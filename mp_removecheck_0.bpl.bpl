var {:scalar} alloc: int;

var {:scalar} sdv_compFset: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} s: int;

var {:scalar} yogi_error: int;

var {:scalar} t: int;

var {:scalar} Mem_T.Buffer__RTL_BITMAP: [int]int;

var {:scalar} Mem_T.CurrentStackLocation_unnamed_tag_7: [int]int;

var {:scalar} Mem_T.DeviceObject__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.FcbState__FCB: [int]int;

var {:scalar} Mem_T.FileObject__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.Flags__IRP_CONTEXT: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

var {:scalar} Mem_T.MajorFunction__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.MajorFunction__IRP_CONTEXT: [int]int;

var {:scalar} Mem_T.MinorFunction__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER: [int]int;

var {:scalar} Mem_T.OriginatingIrp__IRP_CONTEXT: [int]int;

var {:scalar} Mem_T.PendingReturned__IRP: [int]int;

var {:scalar} Mem_T.RootDcb__VCB: [int]int;

var {:scalar} Mem_T.Status__IO_STATUS_BLOCK: [int]int;

var {:scalar} Mem_T.SwapVpb__VCB: [int]int;

var {:scalar} Mem_T.VcbState__VCB: [int]int;

var {:scalar} Mem_T.Vcb__IRP_CONTEXT: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const FatNonPagedFcbLookasideList: int;

const FatJanOne1980: int;

const NlsMbOemCodePageTag: int;

const FatIrpContextLookasideList: int;

const FsRtlLegalAnsiCharacterArray: int;

const FatMaxLarge: int;

const FatEResourceLookasideList: int;

const FatData: int;

const FatCloseContextSList: int;

const FatLargeZero: int;

const FatReserveMdl: int;

const FatSecurityPrivilege: int;

const FatTimeJanOne1980: int;

const FatOneDay: int;

const FatDecThirtyOne1979: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_isr_routine: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_harnessStackLocation: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_remove_irp_already_issued: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_devobj_fdo: int;

const sdv_pDpcContext: int;

const sdv_harnessDeviceExtension: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_dpc_io_registered: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const FatFastIoDispatch: int;

const FatDiskFileSystemDeviceObject: int;

const FatCdromFileSystemDeviceObject: int;

const FatReserveEvent: int;

const FatCloseQueueMutex: int;

const Fat30Milliseconds: int;

const IoFileObjectType: int;

const FatNoAsync: int;

const NlsOemLeadByteInfo: int;

const FatMagic86400000: int;

const Fat100Milliseconds: int;

const FatMagic10000: int;

const sdv_cancelFptr: int;

const SeExports: int;

procedure {:origName "FatDeleteVcb"} FatDeleteVcb(actual_IrpContext: int, actual_Vcb: int);
  modifies alloc, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeleteVcb"} FatDeleteVcb(actual_IrpContext: int, actual_Vcb: int)
{
  var {:pointer} Fcb: int;
  var {:pointer} Tmp_1: int;
  var {:pointer} IrpContext: int;
  var {:pointer} Vcb: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7432: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    IrpContext := actual_IrpContext;
    Vcb := actual_Vcb;
    assume {:nonnull} IrpContext != 0;
    assume IrpContext > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext)] == Vcb;
    assume {:nonnull} IrpContext != 0;
    assume IrpContext > 0;
    Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext)] := 0;
    goto L5;

  L5:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb)] != 0;
    call {:si_unique_call 1} sdv_ExFreePool(0);
    goto L7;

  L7:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb)], 262144) != 0;
    call {:si_unique_call 2} sdv_ExFreePool(0);
    goto L11;

  L11:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 3} sdv_ExFreePool(0);
    goto L15;

  L15:
    call {:si_unique_call 4} vslice_dummy_var_1 := sdv_RemoveEntryList(0);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L23;

  L23:
    call {:si_unique_call 5} KeBugCheckEx(35, 1835757, 0, 0, 0);
    goto L26;

  L26:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    havoc Tmp_1;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    havoc vslice_dummy_var_7432;
    call {:si_unique_call 6} FatDeleteFcb_Real(IrpContext, vslice_dummy_var_7432);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto L27;

  L27:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)] != 0;
    goto L36;

  L36:
    call {:si_unique_call 7} Fcb := FatDeleteVcb_loop_L36(Fcb, IrpContext, Vcb);
    goto L36_last;

  L36_last:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    call {:si_unique_call 19} Fcb := FatGetNextFcbBottomUp(IrpContext, 0, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)]);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Fcb != Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)];
    call {:si_unique_call 8} FatDeleteFcb_Real(IrpContext, Fcb);
    goto anon31_Else_dummy;

  anon31_Else_dummy:
    assume false;
    return;

  anon31_Then:
    assume {:partition} Fcb == Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)];
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    call {:si_unique_call 9} FatDeleteFcb_Real(IrpContext, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)]);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)] := 0;
    goto L33;

  L33:
    call {:si_unique_call 10} vslice_dummy_var_2 := ExDeleteResourceLite(0);
    call {:si_unique_call 11} vslice_dummy_var_3 := ExDeleteResourceLite(0);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb))] != 0;
    call {:si_unique_call 12} FatTearDownAllocationSupport(IrpContext, Vcb);
    goto L55;

  L55:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 13} sdv_ExFreePool(0);
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto L62;

  L62:
    call {:si_unique_call 14} vslice_dummy_var_4 := KeCancelTimer(0);
    call {:si_unique_call 15} vslice_dummy_var_5 := KeRemoveQueueDpc(0);
    call {:si_unique_call 16} sdv_ExFreePool(0);
    call {:si_unique_call 17} vslice_dummy_var_6 := sdv_ObDereferenceObject(0);
    call {:si_unique_call 18} sdv_RtlZeroMemory(0, 688);
    return;

  anon33_Then:
    goto L62;

  anon32_Then:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb))] == 0;
    goto L55;

  anon30_Then:
    assume {:partition} Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb)] == 0;
    goto L33;

  anon29_Then:
    goto L27;

  anon27_Then:
    assume {:nonnull} Vcb != 0;
    assume Vcb > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L26;

  anon28_Then:
    goto L23;

  anon26_Then:
    goto L15;

  anon25_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb)], 262144) == 0;
    goto L11;

  anon24_Then:
    assume {:partition} Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb)] == 0;
    goto L7;

  anon23_Then:
    assume {:partition} Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext)] != Vcb;
    goto L5;
}



procedure {:origName "FatFreeResource"} FatFreeResource(actual_Resource: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeResource"} FatFreeResource(actual_Resource: int)
{
  var {:pointer} Resource: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;

  anon0:
    call {:si_unique_call 20} vslice_dummy_var_7 := __HAVOC_malloc(4);
    Resource := actual_Resource;
    call {:si_unique_call 21} vslice_dummy_var_8 := ExDeleteResourceLite(0);
    call {:si_unique_call 22} ExFreeToNPagedLookasideList(FatEResourceLookasideList, Resource);
    return;
}



procedure {:origName "FatDeleteIrpContext_Real"} FatDeleteIrpContext_Real(actual_IrpContext_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeleteIrpContext_Real"} FatDeleteIrpContext_Real(actual_IrpContext_1: int)
{
  var {:pointer} Tmp_7: int;
  var {:pointer} IrpContext_1: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 23} vslice_dummy_var_9 := __HAVOC_malloc(4);
    IrpContext_1 := actual_IrpContext_1;
    assume {:nonnull} IrpContext_1 != 0;
    assume IrpContext_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} IrpContext_1 != 0;
    assume IrpContext_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_1)], 256) == 0;
    assume {:nonnull} IrpContext_1 != 0;
    assume IrpContext_1 > 0;
    havoc Tmp_7;
    assume {:nonnull} Tmp_7 != 0;
    assume Tmp_7 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} IrpContext_1 != 0;
    assume IrpContext_1 > 0;
    call {:si_unique_call 24} IoFreeMdl(0);
    goto L9;

  L9:
    call {:si_unique_call 25} sdv_ExFreePool(0);
    goto L4;

  L4:
    call {:si_unique_call 26} FatFreeIrpContext(IrpContext_1);
    return;

  anon9_Then:
    goto L9;

  anon8_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_1)], 256) != 0;
    goto L4;

  anon7_Then:
    goto L4;
}



procedure {:origName "FatPreallocateCloseContext"} FatPreallocateCloseContext(actual_Vcb_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPreallocateCloseContext"} FatPreallocateCloseContext(actual_Vcb_1: int)
{
  var {:pointer} sdv_8: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;

  anon0:
    call {:si_unique_call 27} vslice_dummy_var_10 := __HAVOC_malloc(4);
    call {:si_unique_call 28} sdv_8 := ExAllocatePoolWithTag(17, 32, -126590650);
    call {:si_unique_call 29} vslice_dummy_var_11 := sdv_ExInterlockedPushEntrySList(0, 0, 0);
    return;
}



procedure {:origName "FatSwapVpb"} FatSwapVpb(actual_IrpContext_2: int, actual_Vcb_2: int) returns (Tmp_11: int);
  modifies Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB;
  free ensures {:va_keep} Tmp_11 == 0 || Tmp_11 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSwapVpb"} FatSwapVpb(actual_IrpContext_2: int, actual_Vcb_2: int) returns (Tmp_11: int)
{
  var {:pointer} Tmp_12: int;
  var {:pointer} Tmp_13: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} Tmp_15: int;
  var {:pointer} IrpSp: int;
  var {:pointer} Tmp_16: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} OldVpb: int;
  var {:scalar} Result: int;
  var {:pointer} Tmp_19: int;
  var {:pointer} IrpContext_2: int;
  var {:pointer} Vcb_2: int;

  anon0:
    IrpContext_2 := actual_IrpContext_2;
    Vcb_2 := actual_Vcb_2;
    Result := 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    havoc OldVpb;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_2)], 262144) != 0;
    goto L10;

  L10:
    Tmp_11 := Result;
    return;

  anon13_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_2)], 262144) == 0;
    assume {:nonnull} OldVpb != 0;
    assume OldVpb > 0;
    havoc Tmp_13;
    assume {:nonnull} Tmp_13 != 0;
    assume Tmp_13 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Tmp_19 := Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)];
    assume {:nonnull} Tmp_19 != 0;
    assume Tmp_19 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Tmp_12 := Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)];
    assume {:nonnull} Tmp_12 != 0;
    assume Tmp_12 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Tmp_14 := Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)];
    assume {:nonnull} OldVpb != 0;
    assume OldVpb > 0;
    assume {:nonnull} Tmp_14 != 0;
    assume Tmp_14 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Tmp_15 := Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)];
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc Tmp_18;
    assume {:nonnull} Tmp_18 != 0;
    assume Tmp_18 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Tmp_16 := Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)];
    assume {:nonnull} OldVpb != 0;
    assume OldVpb > 0;
    assume {:nonnull} Tmp_16 != 0;
    assume Tmp_16 > 0;
    assume {:nonnull} IrpContext_2 != 0;
    assume IrpContext_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_2)] == 13;
    assume {:nonnull} IrpContext_2 != 0;
    assume IrpContext_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpContext_2 != 0;
    assume IrpContext_2 > 0;
    call {:si_unique_call 30} IrpSp := sdv_IoGetCurrentIrpStackLocation(Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_2)]);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    goto L17;

  L17:
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Mem_T.SwapVpb__VCB[SwapVpb__VCB(Vcb_2)] := 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    assume {:nonnull} Vcb_2 != 0;
    assume Vcb_2 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_2)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_2)], 262144);
    Result := 1;
    goto L10;

  anon12_Then:
    goto L17;

  anon11_Then:
    goto L17;

  anon15_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_2)] != 13;
    goto L17;

  anon14_Then:
    goto L10;
}



procedure {:origName "FatDeleteCcb_Real"} FatDeleteCcb_Real(actual_IrpContext_3: int, actual_Ccb: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeleteCcb_Real"} FatDeleteCcb_Real(actual_IrpContext_3: int, actual_Ccb: int)
{
  var {:pointer} Ccb: int;
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 31} vslice_dummy_var_12 := __HAVOC_malloc(4);
    Ccb := actual_Ccb;
    call {:si_unique_call 32} FatDeallocateCcbStrings(Ccb);
    call {:si_unique_call 33} FatFreeCcb(Ccb);
    return;
}



procedure {:origName "FatDeleteFcb_Real"} FatDeleteFcb_Real(actual_IrpContext_4: int, actual_Fcb_1: int);
  modifies alloc, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeleteFcb_Real"} FatDeleteFcb_Real(actual_IrpContext_4: int, actual_Fcb_1: int)
{
  var {:pointer} Tmp_27: int;
  var {:pointer} Tmp_29: int;
  var {:pointer} IrpContext_4: int;
  var {:pointer} Fcb_1: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_7433: int;
  var vslice_dummy_var_7434: int;
  var vslice_dummy_var_7435: int;

  anon0:
    call {:si_unique_call 34} vslice_dummy_var_13 := __HAVOC_malloc(4);
    IrpContext_4 := actual_IrpContext_4;
    Fcb_1 := actual_Fcb_1;
    call {:si_unique_call 35} Tmp_29 := __HAVOC_malloc(4);
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 36} KeBugCheckEx(35, 1836844, 0, 0, 0);
    goto L4;

  L4:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] == 1283;
    goto L9;

  L9:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeDirentBitmap_unnamed_tag_68(Dcb_unnamed_tag_67(Specific__FCB(Fcb_1))))] != 0;
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    havoc Tmp_29;
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeDirentBitmap_unnamed_tag_68(Dcb_unnamed_tag_67(Specific__FCB(Fcb_1))))] != Tmp_29;
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    call {:si_unique_call 37} sdv_ExFreePool(0);
    goto L10;

  L10:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] != 1284;
    call {:si_unique_call 38} vslice_dummy_var_14 := sdv_RemoveEntryList(0);
    goto L21;

  L21:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_1)], 256) != 0;
    call {:si_unique_call 39} FatRemoveNames(IrpContext_4, Fcb_1);
    goto L25;

  L25:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] != 1284;
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    call {:si_unique_call 40} sdv_ExFreePool(0);
    goto L31;

  L31:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    call {:si_unique_call 41} sdv_ExFreePool(0);
    goto L29;

  L29:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    call {:si_unique_call 42} sdv_ExFreePool(0);
    goto L38;

  L38:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    havoc vslice_dummy_var_7433;
    call {:si_unique_call 43} FatFreeResource(vslice_dummy_var_7433);
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    havoc vslice_dummy_var_7434;
    call {:si_unique_call 44} FatFreeResource(vslice_dummy_var_7434);
    goto L45;

  L45:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    havoc Tmp_27;
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    call {:si_unique_call 45} sdv_ExFreePool(0);
    goto L49;

  L49:
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    havoc vslice_dummy_var_7435;
    call {:si_unique_call 46} FatFreeNonPagedFcb(vslice_dummy_var_7435);
    call {:si_unique_call 47} FatFreeFcb(Fcb_1);
    return;

  anon39_Then:
    goto L49;

  anon37_Then:
    goto L45;

  anon34_Then:
    goto L38;

  anon36_Then:
    goto L29;

  anon35_Then:
    goto L31;

  anon33_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] == 1284;
    goto L29;

  anon32_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_1)], 256) == 0;
    goto L25;

  anon31_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] == 1284;
    goto L21;

  anon38_Then:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeDirentBitmap_unnamed_tag_68(Dcb_unnamed_tag_67(Specific__FCB(Fcb_1))))] == Tmp_29;
    goto L10;

  anon30_Then:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeDirentBitmap_unnamed_tag_68(Dcb_unnamed_tag_67(Specific__FCB(Fcb_1))))] == 0;
    goto L10;

  anon28_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] != 1283;
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] != 1284;
    call {:si_unique_call 48} FsRtlUninitializeFileLock(0);
    assume {:nonnull} Fcb_1 != 0;
    assume Fcb_1 > 0;
    goto L10;

  anon29_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_1))] == 1284;
    goto L9;

  anon27_Then:
    goto L4;
}



procedure {:origName "FatGetNextFcbBottomUp"} FatGetNextFcbBottomUp(actual_IrpContext_5: int, actual_Fcb_2: int, actual_TerminationFcb: int) returns (Tmp_32: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetNextFcbBottomUp"} FatGetNextFcbBottomUp(actual_IrpContext_5: int, actual_Fcb_2: int, actual_TerminationFcb: int) returns (Tmp_32: int)
{
  var {:pointer} Tmp_33: int;
  var {:pointer} NextFcb: int;
  var {:pointer} Tmp_34: int;
  var {:pointer} sdv_12: int;
  var {:pointer} Tmp_35: int;
  var {:scalar} sdv_13: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} sdv_14: int;
  var {:scalar} sdv_15: int;
  var {:pointer} sdv_16: int;
  var {:pointer} Fcb_2: int;
  var {:pointer} TerminationFcb: int;
  var vslice_dummy_var_7436: int;
  var vslice_dummy_var_7437: int;
  var vslice_dummy_var_7438: int;

  anon0:
    Fcb_2 := actual_Fcb_2;
    TerminationFcb := actual_TerminationFcb;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Fcb_2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Fcb_2 == TerminationFcb;
    Tmp_32 := 0;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} Fcb_2 != TerminationFcb;
    assume {:nonnull} Fcb_2 != 0;
    assume Fcb_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_34 := 0;
    goto L13;

  L13:
    NextFcb := Tmp_34;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} NextFcb != 0;
    goto L16;

  L16:
    call {:si_unique_call 49} Tmp_33, NextFcb, Tmp_35, sdv_13, Tmp_37, sdv_14, sdv_15, sdv_16 := FatGetNextFcbBottomUp_loop_L16(Tmp_33, NextFcb, Tmp_35, sdv_13, Tmp_37, sdv_14, sdv_15, sdv_16);
    goto L16_last;

  L16_last:
    Tmp_33 := NextFcb;
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Tmp_33] != 1282;
    call {:si_unique_call 50} sdv_13 := sdv_IsListEmpty(0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_13 != 0;
    Tmp_37 := 0;
    goto L26;

  L26:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Tmp_37 != 0;
    call {:si_unique_call 51} sdv_15 := sdv_IsListEmpty(0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_15 != 0;
    Tmp_35 := 0;
    goto L35;

  L35:
    NextFcb := Tmp_35;
    goto L35_dummy;

  L35_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} sdv_15 == 0;
    assume {:nonnull} NextFcb != 0;
    assume NextFcb > 0;
    havoc vslice_dummy_var_7436;
    call {:si_unique_call 52} sdv_16 := sdv_containing_record(vslice_dummy_var_7436, 72);
    Tmp_35 := sdv_16;
    goto L35;

  anon20_Then:
    assume {:partition} Tmp_37 == 0;
    goto L17;

  L17:
    Tmp_32 := NextFcb;
    goto L1;

  anon19_Then:
    assume {:partition} sdv_13 == 0;
    assume {:nonnull} NextFcb != 0;
    assume NextFcb > 0;
    havoc vslice_dummy_var_7437;
    call {:si_unique_call 53} sdv_14 := sdv_containing_record(vslice_dummy_var_7437, 72);
    Tmp_37 := sdv_14;
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Tmp_33] == 1282;
    goto L17;

  anon23_Then:
    assume {:partition} NextFcb == 0;
    assume {:nonnull} Fcb_2 != 0;
    assume Fcb_2 > 0;
    havoc Tmp_32;
    goto L1;

  anon22_Then:
    assume {:nonnull} Fcb_2 != 0;
    assume Fcb_2 > 0;
    havoc vslice_dummy_var_7438;
    call {:si_unique_call 54} sdv_12 := sdv_containing_record(vslice_dummy_var_7438, 72);
    Tmp_34 := sdv_12;
    goto L13;

  anon17_Then:
    assume {:partition} Fcb_2 == 0;
    NextFcb := TerminationFcb;
    goto L16;
}



procedure {:origName "FatFreeIrpContext"} FatFreeIrpContext(actual_IrpContext_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeIrpContext"} FatFreeIrpContext(actual_IrpContext_6: int)
{
  var {:pointer} IrpContext_6: int;
  var vslice_dummy_var_15: int;

  anon0:
    call {:si_unique_call 55} vslice_dummy_var_15 := __HAVOC_malloc(4);
    IrpContext_6 := actual_IrpContext_6;
    call {:si_unique_call 56} ExFreeToNPagedLookasideList(FatIrpContextLookasideList, IrpContext_6);
    return;
}



procedure {:origName "FatGetNextFcbTopDown"} FatGetNextFcbTopDown(actual_IrpContext_7: int, actual_Fcb_3: int, actual_TerminationFcb_1: int) returns (Tmp_41: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetNextFcbTopDown"} FatGetNextFcbTopDown(actual_IrpContext_7: int, actual_Fcb_3: int, actual_TerminationFcb_1: int) returns (Tmp_41: int)
{
  var {:pointer} Tmp_42: int;
  var {:pointer} Tmp_43: int;
  var {:scalar} sdv_17: int;
  var {:scalar} sdv_18: int;
  var {:pointer} sdv_19: int;
  var {:pointer} sdv_20: int;
  var {:pointer} sdv_21: int;
  var {:pointer} Tmp_45: int;
  var {:pointer} Tmp_48: int;
  var {:pointer} Sibling: int;
  var {:pointer} Tmp_49: int;
  var {:pointer} Tmp_50: int;
  var {:pointer} Fcb_3: int;
  var {:pointer} TerminationFcb_1: int;
  var vslice_dummy_var_7439: int;
  var vslice_dummy_var_7440: int;
  var vslice_dummy_var_7441: int;

  anon0:
    Fcb_3 := actual_Fcb_3;
    TerminationFcb_1 := actual_TerminationFcb_1;
    Tmp_50 := Fcb_3;
    assume {:nonnull} Tmp_50 != 0;
    assume Tmp_50 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[Tmp_50] == 1283;
    goto L6;

  L6:
    call {:si_unique_call 57} sdv_17 := sdv_IsListEmpty(0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_17 != 0;
    goto L13;

  L13:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Fcb_3 == TerminationFcb_1;
    Tmp_41 := 0;
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} Fcb_3 != TerminationFcb_1;
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    Tmp_45 := 0;
    goto L20;

  L20:
    Sibling := Tmp_45;
    goto L22;

  L22:
    call {:si_unique_call 58} Tmp_43, sdv_20, Sibling, Fcb_3 := FatGetNextFcbTopDown_loop_L22(Tmp_43, sdv_20, Sibling, Fcb_3, TerminationFcb_1);
    goto L22_last;

  L22_last:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Sibling != 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Sibling != TerminationFcb_1;
    Tmp_48 := Sibling;
    goto L27;

  L27:
    Tmp_41 := Tmp_48;
    goto L1;

  anon25_Then:
    assume {:partition} Sibling == TerminationFcb_1;
    Tmp_48 := 0;
    goto L27;

  anon23_Then:
    assume {:partition} Sibling == 0;
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Tmp_41 := 0;
    goto L1;

  anon24_Then:
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    havoc Fcb_3;
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_43 := 0;
    goto L35;

  L35:
    Sibling := Tmp_43;
    goto L35_dummy;

  L35_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    havoc vslice_dummy_var_7439;
    call {:si_unique_call 59} sdv_20 := sdv_containing_record(vslice_dummy_var_7439, 72);
    Tmp_43 := sdv_20;
    goto L35;

  anon28_Then:
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    havoc vslice_dummy_var_7440;
    call {:si_unique_call 60} sdv_19 := sdv_containing_record(vslice_dummy_var_7440, 72);
    Tmp_45 := sdv_19;
    goto L20;

  anon21_Then:
    assume {:partition} sdv_17 == 0;
    call {:si_unique_call 61} sdv_18 := sdv_IsListEmpty(0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_18 != 0;
    Tmp_49 := 0;
    goto L43;

  L43:
    Tmp_41 := Tmp_49;
    goto L1;

  anon26_Then:
    assume {:partition} sdv_18 == 0;
    assume {:nonnull} Fcb_3 != 0;
    assume Fcb_3 > 0;
    havoc vslice_dummy_var_7441;
    call {:si_unique_call 62} sdv_21 := sdv_containing_record(vslice_dummy_var_7441, 72);
    Tmp_49 := sdv_21;
    goto L43;

  anon27_Then:
    assume {:partition} Mem_T.INT4[Tmp_50] != 1283;
    Tmp_42 := Fcb_3;
    assume {:nonnull} Tmp_42 != 0;
    assume Tmp_42 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.INT4[Tmp_42] != 1284;
    goto L13;

  anon30_Then:
    assume {:partition} Mem_T.INT4[Tmp_42] == 1284;
    goto L6;
}



procedure {:origName "FatFreeFcb"} FatFreeFcb(actual_Fcb_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeFcb"} FatFreeFcb(actual_Fcb_4: int)
{
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 63} vslice_dummy_var_16 := __HAVOC_malloc(4);
    call {:si_unique_call 64} sdv_ExFreePool(0);
    return;
}



procedure {:origName "FatFreeCcb"} FatFreeCcb(actual_Ccb_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeCcb"} FatFreeCcb(actual_Ccb_1: int)
{
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 65} vslice_dummy_var_17 := __HAVOC_malloc(4);
    call {:si_unique_call 66} sdv_ExFreePool(0);
    return;
}



procedure {:origName "FatCheckFreeDirentBitmap"} FatCheckFreeDirentBitmap(actual_IrpContext_8: int, actual_Dcb: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCheckFreeDirentBitmap"} FatCheckFreeDirentBitmap(actual_IrpContext_8: int, actual_Dcb: int)
{
  var {:scalar} BytesInOldBitmapBuffer: int;
  var {:scalar} NewNumberOfDirents: int;
  var {:pointer} sdv_22: int;
  var {:scalar} OldNumberOfDirents: int;
  var {:scalar} BytesInBitmapBuffer: int;
  var {:pointer} OldBitmapBuffer: int;
  var {:pointer} Tmp_58: int;
  var {:pointer} Tmp_59: int;
  var {:pointer} Tmp_61: int;
  var {:pointer} BitmapBuffer: int;
  var {:scalar} Tmp_63: int;
  var {:pointer} Dcb: int;
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 67} vslice_dummy_var_18 := __HAVOC_malloc(4);
    Dcb := actual_Dcb;
    call {:si_unique_call 68} Tmp_58 := __HAVOC_malloc(4);
    call {:si_unique_call 69} Tmp_59 := __HAVOC_malloc(4);
    call {:si_unique_call 70} Tmp_61 := __HAVOC_malloc(4);
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc OldNumberOfDirents;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc NewNumberOfDirents;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} NewNumberOfDirents > OldNumberOfDirents;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    call {:si_unique_call 71} ExAcquireFastMutexUnsafe(0);
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc OldNumberOfDirents;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc NewNumberOfDirents;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} NewNumberOfDirents > OldNumberOfDirents;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    OldBitmapBuffer := Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeDirentBitmap_unnamed_tag_68(Dcb_unnamed_tag_67(Specific__FCB(Dcb))))];
    BytesInBitmapBuffer := INTDIV(NewNumberOfDirents, 8);
    BytesInOldBitmapBuffer := INTDIV(OldNumberOfDirents, 8);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} 32 >= BytesInBitmapBuffer;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc Tmp_59;
    BitmapBuffer := Tmp_59;
    goto L29;

  L29:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} OldNumberOfDirents != 0;
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc Tmp_58;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BitmapBuffer != Tmp_58;
    call {:si_unique_call 72} sdv_RtlCopyMemory(0, 0, BytesInOldBitmapBuffer);
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    havoc Tmp_61;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} OldBitmapBuffer != Tmp_61;
    call {:si_unique_call 73} sdv_ExFreePool(0);
    goto L30;

  L30:
    Tmp_63 := BytesInBitmapBuffer - BytesInOldBitmapBuffer;
    call {:si_unique_call 74} sdv_RtlZeroMemory(0, Tmp_63);
    goto L18;

  L18:
    assume {:nonnull} Dcb != 0;
    assume Dcb > 0;
    call {:si_unique_call 75} ExReleaseFastMutexUnsafe(0);
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} OldBitmapBuffer == Tmp_61;
    goto L30;

  anon17_Then:
    assume {:partition} BitmapBuffer == Tmp_58;
    goto L30;

  anon13_Then:
    assume {:partition} OldNumberOfDirents == 0;
    goto L30;

  anon16_Then:
    assume {:partition} BytesInBitmapBuffer > 32;
    call {:si_unique_call 76} sdv_22 := ExAllocatePoolWithTag(17, BytesInBitmapBuffer, -730570426);
    BitmapBuffer := sdv_22;
    goto L29;

  anon15_Then:
    assume {:partition} OldNumberOfDirents >= NewNumberOfDirents;
    goto L18;

  anon14_Then:
    assume {:partition} OldNumberOfDirents >= NewNumberOfDirents;
    goto L1;
}



procedure {:origName "FatDeallocateCcbStrings"} FatDeallocateCcbStrings(actual_Ccb_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeallocateCcbStrings"} FatDeallocateCcbStrings(actual_Ccb_2: int)
{
  var {:pointer} Ccb_2: int;
  var vslice_dummy_var_19: int;

  anon0:
    call {:si_unique_call 77} vslice_dummy_var_19 := __HAVOC_malloc(4);
    Ccb_2 := actual_Ccb_2;
    assume {:nonnull} Ccb_2 != 0;
    assume Ccb_2 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 78} RtlFreeUnicodeString(0);
    goto L4;

  L4:
    assume {:nonnull} Ccb_2 != 0;
    assume Ccb_2 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L8;

  L8:
    assume {:nonnull} Ccb_2 != 0;
    assume Ccb_2 > 0;
    return;

  anon6_Then:
    goto L8;

  anon5_Then:
    goto L4;
}



procedure {:origName "FatEnsureStringBufferEnough"} FatEnsureStringBufferEnough(actual_String: int, actual_DesiredBufferSize: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatEnsureStringBufferEnough"} FatEnsureStringBufferEnough(actual_String: int, actual_DesiredBufferSize: int)
{
  var {:pointer} sdv_23: int;
  var {:pointer} LocalString: int;
  var {:scalar} Tmp_68: int;
  var {:pointer} String: int;
  var {:scalar} DesiredBufferSize: int;
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 79} vslice_dummy_var_20 := __HAVOC_malloc(4);
    String := actual_String;
    DesiredBufferSize := actual_DesiredBufferSize;
    LocalString := String;
    assume {:nonnull} LocalString != 0;
    assume LocalString > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 80} FatFreeStringBuffer(LocalString);
    Tmp_68 := DesiredBufferSize;
    call {:si_unique_call 81} sdv_23 := ExAllocatePoolWithTag(17, Tmp_68, -478912186);
    assume {:nonnull} LocalString != 0;
    assume LocalString > 0;
    assume {:nonnull} LocalString != 0;
    assume LocalString > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "FatFreeStringBuffer"} FatFreeStringBuffer(actual_String_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeStringBuffer"} FatFreeStringBuffer(actual_String_1: int)
{
  var {:pointer} LocalString_1: int;
  var {:scalar} Low: int;
  var {:scalar} High: int;
  var {:pointer} String_1: int;
  var vslice_dummy_var_21: int;

  anon0:
    call {:si_unique_call 82} vslice_dummy_var_21 := __HAVOC_malloc(4);
    String_1 := actual_String_1;
    LocalString_1 := String_1;
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 83} IoGetStackLimits(0, 0);
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L14;

  L14:
    call {:si_unique_call 84} sdv_ExFreePool(0);
    goto L17;

  L17:
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    goto L8;

  L8:
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    return;

  anon7_Then:
    assume {:nonnull} LocalString_1 != 0;
    assume LocalString_1 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto L17;

  anon8_Then:
    goto L14;

  anon9_Then:
    goto L8;
}



procedure {:origName "FatAllocateIrpContext"} FatAllocateIrpContext() returns (Tmp_71: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatAllocateIrpContext"} FatAllocateIrpContext() returns (Tmp_71: int)
{
  var {:pointer} sdv_24: int;

  anon0:
    call {:si_unique_call 85} sdv_24 := sdv_ExAllocateFromNPagedLookasideList(0);
    Tmp_71 := sdv_24;
    return;
}



procedure {:origName "FatCreateIrpContext"} FatCreateIrpContext(actual_Irp: int, actual_Wait: int) returns (Tmp_78: int);
  modifies Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCreateIrpContext"} FatCreateIrpContext(actual_Irp: int, actual_Wait: int) returns (Tmp_78: int)
{
  var {:pointer} Tmp_80: int;
  var {:pointer} FileObject: int;
  var {:scalar} Tmp_81: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_30: int;
  var {:pointer} IrpContext_10: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} Irp: int;
  var {:scalar} Wait: int;

  anon0:
    Irp := actual_Irp;
    Wait := actual_Wait;
    call {:si_unique_call 86} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L11;

  L11:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_1)] != 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] != 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] != 18;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] != 2;
    call {:si_unique_call 87} ExRaiseStatus(-1073741808);
    goto L12;

  L12:
    call {:si_unique_call 88} IrpContext_10 := FatAllocateIrpContext();
    call {:si_unique_call 89} sdv_RtlZeroMemory(0, 68);
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_10)] := Irp;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_10)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)];
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_1)] != 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    FileObject := Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_1)];
    assume {:nonnull} FileObject != 0;
    assume FileObject > 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    Tmp_82 := Mem_T.DeviceObject__IO_STACK_LOCATION[DeviceObject__IO_STACK_LOCATION(IrpSp_1)];
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} Tmp_82 != 0;
    assume Tmp_82 > 0;
    Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext_10)] := Vcb__VOLUME_DEVICE_OBJECT(Tmp_82);
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} FileObject != 0;
    assume FileObject > 0;
    havoc Tmp_81;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_81 != 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)], 4);
    goto L40;

  L40:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Wait != 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)], 2);
    goto L42;

  L42:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    sdv_30 := 0;
    goto L46;

  L46:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_30 != Irp;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_10)], 16);
    goto L47;

  L47:
    Tmp_78 := IrpContext_10;
    return;

  anon34_Then:
    assume {:partition} sdv_30 == Irp;
    goto L47;

  anon33_Then:
    call {:si_unique_call 90} sdv_30 := __HAVOC_malloc(1);
    goto L46;

  anon32_Then:
    assume {:partition} Wait == 0;
    goto L42;

  anon36_Then:
    assume {:partition} Tmp_81 == 0;
    goto L40;

  anon35_Then:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_1)] == 0;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_10)] == 13;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_80;
    assume {:nonnull} IrpContext_10 != 0;
    assume IrpContext_10 > 0;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    goto L40;

  anon31_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_10)] != 13;
    goto L40;

  anon30_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] == 2;
    goto L12;

  anon29_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] == 18;
    goto L12;

  anon28_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_1)] == 0;
    goto L12;

  anon27_Then:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_1)] == 0;
    goto L12;

  anon25_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L12;

  anon26_Then:
    goto L11;
}



procedure {:origName "FatTearDownVcb"} FatTearDownVcb(actual_IrpContext_11: int, actual_Vcb_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatTearDownVcb"} FatTearDownVcb(actual_IrpContext_11: int, actual_Vcb_5: int)
{
  var {:pointer} DirectoryFileObject: int;
  var {:pointer} Tmp_83: int;
  var {:pointer} Tmp_84: int;
  var {:pointer} IrpContext_11: int;
  var {:pointer} Vcb_5: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_7442: int;

  anon0:
    call {:si_unique_call 91} vslice_dummy_var_22 := __HAVOC_malloc(4);
    IrpContext_11 := actual_IrpContext_11;
    Vcb_5 := actual_Vcb_5;
    call {:si_unique_call 92} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    havoc vslice_dummy_var_7442;
    call {:si_unique_call 93} FatSyncUninitializeCacheMap(IrpContext_11, vslice_dummy_var_7442);
    call {:si_unique_call 94} vslice_dummy_var_23 := sdv_ObDereferenceObject(0);
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    goto L8;

  L8:
    call {:si_unique_call 95} FatCloseEaFile(IrpContext_11, Vcb_5, 0);
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_5)] != 0;
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    Tmp_83 := Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_5)];
    assume {:nonnull} Tmp_83 != 0;
    assume Tmp_83 > 0;
    havoc DirectoryFileObject;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DirectoryFileObject != 0;
    call {:si_unique_call 96} FatSyncUninitializeCacheMap(IrpContext_11, DirectoryFileObject);
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    Tmp_84 := Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_5)];
    assume {:nonnull} Tmp_84 != 0;
    assume Tmp_84 > 0;
    call {:si_unique_call 97} vslice_dummy_var_24 := sdv_ObDereferenceObject(0);
    goto L22;

  L22:
    assume {:nonnull} Vcb_5 != 0;
    assume Vcb_5 > 0;
    return;

  anon9_Then:
    assume {:partition} DirectoryFileObject == 0;
    goto L22;

  anon8_Then:
    assume {:partition} Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_5)] == 0;
    goto L22;

  anon7_Then:
    goto L8;
}



procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 98} vslice_dummy_var_25 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatIsHandleCountZero"} FatIsHandleCountZero(actual_IrpContext_12: int, actual_Vcb_6: int) returns (Tmp_89: int);
  free ensures {:va_keep} Tmp_89 == 0 || Tmp_89 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatIsHandleCountZero"} FatIsHandleCountZero(actual_IrpContext_12: int, actual_Vcb_6: int) returns (Tmp_89: int)
{
  var {:pointer} Fcb_5: int;
  var {:pointer} IrpContext_12: int;
  var {:pointer} Vcb_6: int;

  anon0:
    IrpContext_12 := actual_IrpContext_12;
    Vcb_6 := actual_Vcb_6;
    assume {:nonnull} Vcb_6 != 0;
    assume Vcb_6 > 0;
    Fcb_5 := Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_6)];
    goto L5;

  L5:
    call {:si_unique_call 99} Fcb_5 := FatIsHandleCountZero_loop_L5(Fcb_5, IrpContext_12, Vcb_6);
    goto L5_last;

  L5_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Fcb_5 != 0;
    assume {:nonnull} Fcb_5 != 0;
    assume Fcb_5 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_89 := 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:nonnull} Vcb_6 != 0;
    assume Vcb_6 > 0;
    call {:si_unique_call 100} Fcb_5 := FatGetNextFcbTopDown(IrpContext_12, Fcb_5, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_6)]);
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} Fcb_5 == 0;
    Tmp_89 := 1;
    goto L1;
}



procedure {:origName "FatFreeNonPagedFcb"} FatFreeNonPagedFcb(actual_NonPagedFcb: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFreeNonPagedFcb"} FatFreeNonPagedFcb(actual_NonPagedFcb: int)
{
  var {:pointer} NonPagedFcb: int;
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 101} vslice_dummy_var_26 := __HAVOC_malloc(4);
    NonPagedFcb := actual_NonPagedFcb;
    call {:si_unique_call 102} ExFreeToNPagedLookasideList(FatNonPagedFcbLookasideList, NonPagedFcb);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_27: int;

  anon0:
    call {:si_unique_call 103} vslice_dummy_var_27 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatSplitAllocation"} FatSplitAllocation(actual_IrpContext_13: int, actual_Vcb_7: int, actual_Mcb: int, actual_SplitAtVbo: int, actual_RemainingMcb: int);
  modifies alloc, Mem_T.INT4, Mem_T.Flags__IRP_CONTEXT, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSplitAllocation"} FatSplitAllocation(actual_IrpContext_13: int, actual_Vcb_7: int, actual_Mcb: int, actual_SplitAtVbo: int, actual_RemainingMcb: int)
{
  var {:dopa} {:scalar} Lbo: int;
  var {:scalar} Tmp_96: int;
  var {:scalar} sdv_34: int;
  var {:scalar} SourceVbo: int;
  var {:scalar} sdv_35: int;
  var {:scalar} sdv_37: int;
  var {:dopa} {:scalar} DontCare: int;
  var {:scalar} TargetVbo: int;
  var {:dopa} {:scalar} ByteCount: int;
  var {:pointer} IrpContext_13: int;
  var {:pointer} Vcb_7: int;
  var {:pointer} Mcb: int;
  var {:scalar} SplitAtVbo: int;
  var {:pointer} RemainingMcb: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 104} Lbo := __HAVOC_malloc(4);
    call {:si_unique_call 105} vslice_dummy_var_28 := __HAVOC_malloc(4);
    call {:si_unique_call 106} DontCare := __HAVOC_malloc(4);
    call {:si_unique_call 107} ByteCount := __HAVOC_malloc(4);
    IrpContext_13 := actual_IrpContext_13;
    Vcb_7 := actual_Vcb_7;
    Mcb := actual_Mcb;
    SplitAtVbo := actual_SplitAtVbo;
    RemainingMcb := actual_RemainingMcb;
    call {:si_unique_call 108} sdv_do_paged_code_check();
    call {:si_unique_call 109} vslice_dummy_var_29 := corral_nondet();
    SourceVbo := SplitAtVbo;
    TargetVbo := 0;
    goto L15;

  L15:
    call {:si_unique_call 110} sdv_34, SourceVbo, TargetVbo, vslice_dummy_var_30 := FatSplitAllocation_loop_L15(Lbo, sdv_34, SourceVbo, TargetVbo, ByteCount, Vcb_7, Mcb, RemainingMcb, vslice_dummy_var_30);
    goto L15_last;

  L15_last:
    call {:si_unique_call 121} sdv_34 := FatLookupMcbEntry(Vcb_7, Mcb, SourceVbo, Lbo, ByteCount, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_34 != 0;
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    assume {:nonnull} Lbo != 0;
    assume Lbo > 0;
    call {:si_unique_call 111} vslice_dummy_var_30 := FatAddMcbEntry(Vcb_7, RemainingMcb, TargetVbo, Mem_T.INT4[Lbo], Mem_T.INT4[ByteCount]);
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    call {:si_unique_call 112} FatRemoveMcbEntry(Vcb_7, Mcb, SourceVbo, Mem_T.INT4[ByteCount]);
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    TargetVbo := TargetVbo + Mem_T.INT4[ByteCount];
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    SourceVbo := SourceVbo + Mem_T.INT4[ByteCount];
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} SourceVbo == 0;
    goto L37;

  L37:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} SplitAtVbo != 0;
    call {:si_unique_call 113} vslice_dummy_var_31 := FatLookupLastMcbEntry(Vcb_7, Mcb, DontCare, Lbo, 0);
    call {:si_unique_call 114} Tmp_96 := corral_nondet();
    call {:si_unique_call 115} FatSetFatEntry#1(IrpContext_13, Vcb_7, Tmp_96, 268435455);
    goto L48;

  L48:
    call {:si_unique_call 116} sdv_35 := sdv_AbnormalTermination();
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_35 != 0;
    TargetVbo := SplitAtVbo;
    SourceVbo := 0;
    goto L62;

  L62:
    call {:si_unique_call 117} SourceVbo, sdv_37, TargetVbo, vslice_dummy_var_32 := FatSplitAllocation_loop_L62(Lbo, SourceVbo, sdv_37, TargetVbo, ByteCount, Vcb_7, Mcb, RemainingMcb, vslice_dummy_var_32);
    goto L62_last;

  L62_last:
    call {:si_unique_call 120} sdv_37 := FatLookupMcbEntry(Vcb_7, RemainingMcb, SourceVbo, Lbo, ByteCount, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_37 != 0;
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    assume {:nonnull} Lbo != 0;
    assume Lbo > 0;
    call {:si_unique_call 118} vslice_dummy_var_32 := FatAddMcbEntry(Vcb_7, Mcb, TargetVbo, Mem_T.INT4[Lbo], Mem_T.INT4[ByteCount]);
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    call {:si_unique_call 119} FatRemoveMcbEntry(Vcb_7, RemainingMcb, SourceVbo, Mem_T.INT4[ByteCount]);
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    TargetVbo := TargetVbo + Mem_T.INT4[ByteCount];
    assume {:nonnull} ByteCount != 0;
    assume ByteCount > 0;
    SourceVbo := SourceVbo + Mem_T.INT4[ByteCount];
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} sdv_37 == 0;
    goto L1;

  L1:
    return;

  anon13_Then:
    assume {:partition} sdv_35 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} SplitAtVbo == 0;
    goto L48;

  anon15_Then:
    assume {:partition} SourceVbo != 0;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} sdv_34 == 0;
    goto L37;
}



procedure {:origName "FatLogOf"} FatLogOf(actual_Value: int) returns (Tmp_98: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLogOf"} FatLogOf(actual_Value: int) returns (Tmp_98: int)
{
  var {:scalar} Tmp_99: int;
  var {:scalar} Log: int;
  var {:scalar} Value: int;

  anon0:
    Value := actual_Value;
    Log := 0;
    call {:si_unique_call 122} sdv_do_paged_code_check();
    goto L8;

  L8:
    call {:si_unique_call 123} Log, Value := FatLogOf_loop_L8(Log, Value);
    goto L8_last;

  L8_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(Value, -2) != 0;
    Log := Log + 1;
    call {:si_unique_call 124} Value := corral_nondet();
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} BAND(Value, -2) == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Value != 1;
    Tmp_99 := Log;
    call {:si_unique_call 125} KeBugCheckEx(35, 135588, Value, Tmp_99, 0);
    goto L12;

  L12:
    Tmp_98 := Log;
    return;

  anon6_Then:
    assume {:partition} Value == 1;
    goto L12;
}



procedure {:origName "FatExamineFatEntries"} FatExamineFatEntries(actual_IrpContext_14: int, actual_Vcb_8: int, actual_StartIndex: int, actual_EndIndex: int, actual_SetupWindows: int, actual_SwitchToWindow: int, actual_BitMapBuffer: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatExamineFatEntries"} FatExamineFatEntries(actual_IrpContext_14: int, actual_Vcb_8: int, actual_StartIndex: int, actual_EndIndex: int, actual_SetupWindows: int, actual_SwitchToWindow: int, actual_BitMapBuffer: int)
{
  var {:pointer} FatBuffer: int;
  var {:scalar} Offset: int;
  var {:scalar} Tmp_102: int;
  var {:scalar} PrivateBitMap: int;
  var {:scalar} Tmp_105: int;
  var {:pointer} NewBitMapBuffer: int;
  var {:scalar} StartIndexOfThisRun: int;
  var {:pointer} CurrentWindow: int;
  var {:pointer} Tmp_107: int;
  var {:pointer} Tmp_108: int;
  var {:scalar} EntriesPerWindow: int;
  var {:pointer} Tmp_109: int;
  var {:pointer} Tmp_111: int;
  var {:pointer} Tmp_112: int;
  var {:pointer} Tmp_113: int;
  var {:scalar} FatIndexBitSize: int;
  var {:pointer} Bcb: int;
  var {:pointer} Tmp_116: int;
  var {:scalar} FatIndex: int;
  var {:scalar} BytesPerEntry: int;
  var {:pointer} Tmp_117: int;
  var {:scalar} Tmp_118: int;
  var {:pointer} Tmp_119: int;
  var {:scalar} Tmp_120: int;
  var {:pointer} FreeClusterCount: int;
  var {:scalar} CurrentRun: int;
  var {:scalar} Page: int;
  var {:pointer} pv: int;
  var {:scalar} Tmp_123: int;
  var {:pointer} Tmp_125: int;
  var {:scalar} FirstFatEntry: int;
  var {:scalar} Tmp_126: int;
  var {:scalar} Tmp_128: int;
  var {:scalar} FatEntry: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} BitMap: int;
  var {:pointer} Tmp_131: int;
  var {:scalar} ClustersThisRun: int;
  var {:pointer} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} Tmp_135: int;
  var {:pointer} IrpContext_14: int;
  var {:pointer} Vcb_8: int;
  var {:scalar} StartIndex: int;
  var {:scalar} EndIndex: int;
  var {:scalar} SetupWindows: int;
  var {:pointer} SwitchToWindow: int;
  var {:pointer} BitMapBuffer: int;
  var vslice_dummy_var_33: int;

  anon0:
    call {:si_unique_call 126} FatBuffer := __HAVOC_malloc(4);
    call {:si_unique_call 127} PrivateBitMap := __HAVOC_malloc(8);
    call {:si_unique_call 128} Bcb := __HAVOC_malloc(4);
    call {:si_unique_call 129} pv := __HAVOC_malloc(4);
    call {:si_unique_call 130} vslice_dummy_var_33 := __HAVOC_malloc(4);
    IrpContext_14 := actual_IrpContext_14;
    Vcb_8 := actual_Vcb_8;
    StartIndex := actual_StartIndex;
    EndIndex := actual_EndIndex;
    SetupWindows := actual_SetupWindows;
    SwitchToWindow := actual_SwitchToWindow;
    BitMapBuffer := actual_BitMapBuffer;
    FatEntry := 0;
    FirstFatEntry := 0;
    FreeClusterCount := 0;
    CurrentWindow := 0;
    NewBitMapBuffer := 0;
    BitMap := 0;
    call {:si_unique_call 131} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    havoc FatIndexBitSize;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    EntriesPerWindow := 65536;
    goto L35;

  L35:
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    FreeClusterCount := NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(Vcb_8));
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} SetupWindows != 0;
    BitMap := 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    havoc Tmp_135;
    CurrentWindow := Tmp_135;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto L42;

  L42:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} FatIndexBitSize != 12;
    call {:si_unique_call 132} BytesPerEntry := corral_nondet();
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_109 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_108 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Tmp_108 != 0;
    assume Tmp_108 > 0;
    assume {:nonnull} Tmp_109 != 0;
    assume Tmp_109 > 0;
    havoc Page;
    Offset := Page * 4096;
    call {:si_unique_call 133} FatReadVolumeFile(IrpContext_14, Vcb_8, Offset, 4096, Bcb, pv);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} FatIndexBitSize == 32;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    assume {:nonnull} pv != 0;
    assume pv > 0;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc Tmp_117;
    assume {:nonnull} Tmp_117 != 0;
    assume Tmp_117 > 0;
    FirstFatEntry := Mem_T.INT4[Tmp_117];
    FirstFatEntry := BAND(FirstFatEntry, BNOT(BOR(BOR(BOR(268435456, 536870912), 1073741824), -2147483648)));
    goto L56;

  L56:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} FirstFatEntry != 0;
    Tmp_123 := 1;
    goto L59;

  L59:
    CurrentRun := Tmp_123;
    StartIndexOfThisRun := StartIndex;
    FatIndex := StartIndex;
    goto L62;

  L62:
    call {:si_unique_call 134} Offset, Tmp_102, StartIndexOfThisRun, Tmp_116, FatIndex, Tmp_120, CurrentRun, Page, FatEntry, ClustersThisRun, Tmp_134 := FatExamineFatEntries_loop_L62(FatBuffer, Offset, Tmp_102, StartIndexOfThisRun, CurrentWindow, EntriesPerWindow, FatIndexBitSize, Bcb, Tmp_116, FatIndex, Tmp_120, FreeClusterCount, CurrentRun, Page, pv, FatEntry, BitMap, ClustersThisRun, Tmp_134, IrpContext_14, Vcb_8, StartIndex, EndIndex, SetupWindows);
    goto L62_last;

  L62_last:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} EndIndex >= FatIndex;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} FatIndexBitSize == 12;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc Tmp_134;
    assume {:nonnull} Tmp_134 != 0;
    assume Tmp_134 > 0;
    havoc FatEntry;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} BAND(FatIndex, 1) != 0;
    call {:si_unique_call 135} Tmp_102 := corral_nondet();
    goto L70;

  L70:
    FatEntry := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), Tmp_102);
    goto L71;

  L71:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} CurrentRun == 2;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} FatEntry != 0;
    Tmp_120 := 1;
    goto L76;

  L76:
    CurrentRun := Tmp_120;
    goto L72;

  L72:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} CurrentRun != 0;
    goto L78;

  L78:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} CurrentRun == 1;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} FatEntry == 0;
    ClustersThisRun := FatIndex - StartIndexOfThisRun;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} BitMap != 0;
    goto L83;

  L83:
    CurrentRun := 0;
    StartIndexOfThisRun := FatIndex;
    goto L79;

  L79:
    FatIndex := FatIndex + 1;
    goto L79_dummy;

  L79_dummy:
    assume false;
    return;

  anon109_Then:
    assume {:partition} BitMap == 0;
    goto L83;

  anon88_Then:
    assume {:partition} FatEntry != 0;
    goto L79;

  anon87_Then:
    assume {:partition} CurrentRun != 1;
    goto L79;

  anon84_Then:
    assume {:partition} CurrentRun == 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} FatEntry != 0;
    ClustersThisRun := FatIndex - StartIndexOfThisRun;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} FreeClusterCount != 0;
    assume {:nonnull} FreeClusterCount != 0;
    assume FreeClusterCount > 0;
    Mem_T.INT4[FreeClusterCount] := Mem_T.INT4[FreeClusterCount] + ClustersThisRun;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto L100;

  L100:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} BitMap != 0;
    goto L103;

  L103:
    CurrentRun := 1;
    StartIndexOfThisRun := FatIndex;
    goto L78;

  anon89_Then:
    assume {:partition} BitMap == 0;
    goto L103;

  anon110_Then:
    assume {:partition} FreeClusterCount == 0;
    goto L100;

  anon86_Then:
    assume {:partition} FatEntry == 0;
    goto L78;

  anon85_Then:
    assume {:partition} FatEntry == 0;
    Tmp_120 := 0;
    goto L76;

  anon83_Then:
    assume {:partition} CurrentRun != 2;
    goto L72;

  anon108_Then:
    assume {:partition} BAND(FatIndex, 1) == 0;
    Tmp_102 := FatEntry;
    goto L70;

  anon81_Then:
    assume {:partition} FatIndexBitSize != 12;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} SetupWindows != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} FatIndex > StartIndex;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} INTMOD(FatIndex - 2, EntriesPerWindow) == 0;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} CurrentRun != 0;
    ClustersThisRun := FatIndex - StartIndexOfThisRun;
    goto L116;

  L116:
    StartIndexOfThisRun := FatIndex;
    CurrentRun := 2;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto L109;

  L109:
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto L125;

  L125:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} FatIndexBitSize == 32;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc Tmp_116;
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    FatEntry := Mem_T.INT4[Tmp_116];
    FatEntry := BAND(FatEntry, BNOT(BOR(BOR(BOR(268435456, 536870912), 1073741824), -2147483648)));
    goto L71;

  anon94_Then:
    assume {:partition} FatIndexBitSize != 32;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc FatEntry;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    goto L71;

  anon90_Then:
    assume {:nonnull} Bcb != 0;
    assume Bcb > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} Bcb != 0;
    assume Bcb > 0;
    goto L130;

  L130:
    Page := Page + 1;
    Offset := Offset + 4096;
    call {:si_unique_call 136} FatReadVolumeFile(IrpContext_14, Vcb_8, Offset, 4096, Bcb, pv);
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    assume {:nonnull} pv != 0;
    assume pv > 0;
    goto L125;

  anon93_Then:
    goto L130;

  anon111_Then:
    assume {:partition} CurrentRun == 0;
    ClustersThisRun := FatIndex - StartIndexOfThisRun;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} FreeClusterCount != 0;
    assume {:nonnull} FreeClusterCount != 0;
    assume FreeClusterCount > 0;
    Mem_T.INT4[FreeClusterCount] := Mem_T.INT4[FreeClusterCount] + ClustersThisRun;
    goto L116;

  anon112_Then:
    assume {:partition} FreeClusterCount == 0;
    goto L116;

  anon92_Then:
    assume {:partition} INTMOD(FatIndex - 2, EntriesPerWindow) != 0;
    goto L109;

  anon91_Then:
    assume {:partition} StartIndex >= FatIndex;
    goto L109;

  anon82_Then:
    assume {:partition} SetupWindows == 0;
    goto L109;

  anon80_Then:
    assume {:partition} FatIndex > EndIndex;
    ClustersThisRun := FatIndex - StartIndexOfThisRun;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} CurrentRun != 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} BitMap != 0;
    goto L143;

  L143:
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} SetupWindows != 0;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto L148;

  L148:
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} SwitchToWindow != 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb_8))] != 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    call {:si_unique_call 137} sdv_ExFreePool(0);
    goto L152;

  L152:
    NewBitMapBuffer := 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} FreeClusterCount != 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    havoc Tmp_119;
    assume {:nonnull} FreeClusterCount != 0;
    assume FreeClusterCount > 0;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    goto L150;

  L150:
    assume {:nonnull} Bcb != 0;
    assume Bcb > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} Bcb != 0;
    assume Bcb > 0;
    goto L166;

  L166:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} NewBitMapBuffer != 0;
    call {:si_unique_call 138} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon101_Then:
    assume {:partition} NewBitMapBuffer == 0;
    goto L1;

  anon100_Then:
    goto L166;

  anon114_Then:
    assume {:partition} FreeClusterCount == 0;
    goto L150;

  anon99_Then:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb_8))] == 0;
    goto L152;

  anon98_Then:
    assume {:partition} SwitchToWindow == 0;
    goto L150;

  anon97_Then:
    assume {:partition} SetupWindows == 0;
    goto L148;

  anon96_Then:
    assume {:partition} BitMap == 0;
    goto L143;

  anon113_Then:
    assume {:partition} CurrentRun == 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} FreeClusterCount != 0;
    assume {:nonnull} FreeClusterCount != 0;
    assume FreeClusterCount > 0;
    Mem_T.INT4[FreeClusterCount] := Mem_T.INT4[FreeClusterCount] + ClustersThisRun;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    goto L174;

  L174:
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} BitMap != 0;
    goto L143;

  anon102_Then:
    assume {:partition} BitMap == 0;
    goto L143;

  anon95_Then:
    assume {:partition} FreeClusterCount == 0;
    goto L174;

  anon79_Then:
    assume {:partition} FirstFatEntry == 0;
    Tmp_123 := 0;
    goto L59;

  anon103_Then:
    assume {:partition} FatIndexBitSize != 32;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    assume {:nonnull} pv != 0;
    assume pv > 0;
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc FirstFatEntry;
    goto L56;

  anon78_Then:
    assume {:partition} FatIndexBitSize == 12;
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_133 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_129 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_131 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    havoc Tmp_118;
    goto L47;

  L47:
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_112 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_107 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Tmp_107 != 0;
    assume Tmp_107 > 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    havoc Tmp_126;
    call {:si_unique_call 139} FatReadVolumeFile(IrpContext_14, Vcb_8, Tmp_126, Tmp_118, Bcb, FatBuffer);
    assume {:nonnull} FatBuffer != 0;
    assume FatBuffer > 0;
    havoc Tmp_125;
    assume {:nonnull} Tmp_125 != 0;
    assume Tmp_125 > 0;
    havoc FirstFatEntry;
    Tmp_105 := FirstFatEntry;
    FirstFatEntry := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), Tmp_105);
    goto L56;

  anon107_Then:
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_111 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    Tmp_113 := Bpb__VCB(Vcb_8);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    assume {:nonnull} Tmp_113 != 0;
    assume Tmp_113 > 0;
    havoc Tmp_118;
    goto L47;

  anon106_Then:
    assume {:partition} SetupWindows == 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} BitMapBuffer != 0;
    BitMap := PrivateBitMap;
    FreeClusterCount := 0;
    goto L42;

  anon77_Then:
    assume {:partition} BitMapBuffer == 0;
    CurrentWindow := SwitchToWindow;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    havoc StartIndex;
    assume {:nonnull} CurrentWindow != 0;
    assume CurrentWindow > 0;
    havoc EndIndex;
    BitMap := PrivateBitMap;
    Tmp_128 := INTDIV(EntriesPerWindow + 7, 8);
    call {:si_unique_call 140} NewBitMapBuffer := ExAllocatePoolWithTag(17, Tmp_128, -1032560314);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} FatIndexBitSize == 32;
    FreeClusterCount := 0;
    goto L42;

  anon104_Then:
    assume {:partition} FatIndexBitSize != 32;
    goto L42;

  anon105_Then:
    assume {:nonnull} Vcb_8 != 0;
    assume Vcb_8 > 0;
    havoc EntriesPerWindow;
    goto L35;
}



procedure {:origName "FatInterpretClusterType"} FatInterpretClusterType(actual_Vcb_9: int, actual_Entry: int) returns (Tmp_137: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_137 == 4 || Tmp_137 == 1 || Tmp_137 == 2 || Tmp_137 == 3 || Tmp_137 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatInterpretClusterType"} FatInterpretClusterType(actual_Vcb_9: int, actual_Entry: int) returns (Tmp_137: int)
{
  var {:pointer} Vcb_9: int;
  var {:scalar} Entry: int;

  anon0:
    Vcb_9 := actual_Vcb_9;
    Entry := actual_Entry;
    call {:si_unique_call 141} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_9 != 0;
    assume Vcb_9 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Vcb_9 != 0;
    assume Vcb_9 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Vcb_9 != 0;
    assume Vcb_9 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    Entry := BAND(Entry, BNOT(BOR(BOR(BOR(268435456, 536870912), 1073741824), -2147483648)));
    goto L11;

  L11:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Entry != 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 268435440 > Entry;
    Tmp_137 := 4;
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} Entry >= 268435440;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 268435447 > Entry;
    Tmp_137 := 1;
    goto L1;

  anon24_Then:
    assume {:partition} Entry >= 268435447;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Entry == 268435447;
    Tmp_137 := 2;
    goto L1;

  anon25_Then:
    assume {:partition} Entry != 268435447;
    Tmp_137 := 3;
    goto L1;

  anon22_Then:
    assume {:partition} Entry == 0;
    Tmp_137 := 0;
    goto L1;

  anon26_Then:
    goto L7;

  L7:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Entry >= 65520;
    Entry := BOR(Entry, BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(65536, 131072), 262144), 524288), 1048576), 2097152), 4194304), 8388608), 16777216), 33554432), 67108864), 134217728));
    goto L11;

  anon20_Then:
    assume {:partition} 65520 > Entry;
    goto L11;

  anon27_Then:
    goto L7;

  anon19_Then:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Entry >= 4080;
    Entry := BOR(Entry, BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(4096, 8192), 16384), 32768), 65536), 131072), 262144), 524288), 1048576), 2097152), 4194304), 8388608), 16777216), 33554432), 67108864), 134217728));
    goto L11;

  anon21_Then:
    assume {:partition} 4080 > Entry;
    goto L11;
}



procedure {:origName "FatSelectBestWindow"} FatSelectBestWindow(actual_Vcb_11: int) returns (Tmp_143: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSelectBestWindow"} FatSelectBestWindow(actual_Vcb_11: int) returns (Tmp_143: int)
{
  var {:scalar} MaxFree: int;
  var {:scalar} i: int;
  var {:pointer} Tmp_144: int;
  var {:scalar} Tmp_146: int;
  var {:scalar} FirstEmpty: int;
  var {:pointer} Tmp_147: int;
  var {:scalar} Fave: int;
  var {:pointer} Tmp_148: int;
  var {:scalar} ClustersPerWindow: int;
  var {:scalar} Tmp_149: int;
  var {:scalar} Tmp_150: int;
  var {:pointer} Vcb_11: int;

  anon0:
    Vcb_11 := actual_Vcb_11;
    Fave := 0;
    MaxFree := 0;
    FirstEmpty := -1;
    ClustersPerWindow := 65536;
    i := 0;
    goto L13;

  L13:
    call {:si_unique_call 142} MaxFree, i, Tmp_144, Tmp_146, FirstEmpty, Tmp_147, Fave, Tmp_148, Tmp_149, Tmp_150 := FatSelectBestWindow_loop_L13(MaxFree, i, Tmp_144, Tmp_146, FirstEmpty, Tmp_147, Fave, Tmp_148, ClustersPerWindow, Tmp_149, Tmp_150, Vcb_11);
    goto L13_last;

  L13_last:
    assume {:nonnull} Vcb_11 != 0;
    assume Vcb_11 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_150 := i;
    assume {:nonnull} Vcb_11 != 0;
    assume Vcb_11 > 0;
    havoc Tmp_147;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} -1 == FirstEmpty;
    FirstEmpty := i;
    goto L18;

  L18:
    i := i + 1;
    goto L18_dummy;

  L18_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} -1 != FirstEmpty;
    goto L18;

  anon19_Then:
    Tmp_149 := i;
    assume {:nonnull} Vcb_11 != 0;
    assume Vcb_11 > 0;
    havoc Tmp_144;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    Tmp_146 := i;
    assume {:nonnull} Vcb_11 != 0;
    assume Vcb_11 > 0;
    havoc Tmp_148;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    havoc MaxFree;
    Fave := i;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L18;

  anon21_Then:
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} -1 != FirstEmpty;
    Fave := FirstEmpty;
    goto L24;

  L24:
    Tmp_143 := Fave;
    return;

  anon18_Then:
    assume {:partition} -1 == FirstEmpty;
    goto L24;

  anon16_Then:
    goto L24;

  anon20_Then:
    goto L18;

  anon15_Then:
    goto L14;
}



procedure {:origName "FatTearDownAllocationSupport"} FatTearDownAllocationSupport(actual_IrpContext_18: int, actual_Vcb_13: int);
  modifies alloc, Mem_T.Buffer__RTL_BITMAP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatTearDownAllocationSupport"} FatTearDownAllocationSupport(actual_IrpContext_18: int, actual_Vcb_13: int)
{
  var {:pointer} Vcb_13: int;
  var vslice_dummy_var_34: int;

  anon0:
    call {:si_unique_call 143} vslice_dummy_var_34 := __HAVOC_malloc(4);
    Vcb_13 := actual_Vcb_13;
    call {:si_unique_call 144} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 145} sdv_ExFreePool(0);
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    goto L7;

  L7:
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb_13))] != 0;
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    call {:si_unique_call 146} sdv_ExFreePool(0);
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb_13))] := 0;
    goto L12;

  L12:
    assume {:nonnull} Vcb_13 != 0;
    assume Vcb_13 > 0;
    call {:si_unique_call 147} FatRemoveMcbEntry(Vcb_13, DirtyFatMcb__VCB(Vcb_13), 0, -1);
    return;

  anon6_Then:
    assume {:partition} Mem_T.Buffer__RTL_BITMAP[Buffer__RTL_BITMAP(FreeClusterBitMap__VCB(Vcb_13))] == 0;
    goto L12;

  anon5_Then:
    goto L7;
}



procedure {:origName "FatTruncateFileAllocation"} FatTruncateFileAllocation(actual_IrpContext_19: int, actual_FcbOrDcb_2: int, actual_DesiredAllocationSize: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.INT4, Mem_T.Flags__IRP_CONTEXT, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatTruncateFileAllocation"} FatTruncateFileAllocation(actual_IrpContext_19: int, actual_FcbOrDcb_2: int, actual_DesiredAllocationSize: int)
{
  var {:scalar} UnwindWeAllocatedMcb: int;
  var {:scalar} UnwindInitialAllocationSize: int;
  var {:pointer} Dirent: int;
  var {:pointer} Bcb_2: int;
  var {:scalar} sdv_54: int;
  var {:scalar} UpdatedDirent: int;
  var {:pointer} Vcb_14: int;
  var {:scalar} RemainingMcb_1: int;
  var {:scalar} BytesPerCluster_2: int;
  var {:scalar} UnwindInitialFirstClusterOfFile: int;
  var {:pointer} IrpContext_19: int;
  var {:pointer} FcbOrDcb_2: int;
  var {:scalar} DesiredAllocationSize: int;
  var boogieTmp: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_7443: int;
  var vslice_dummy_var_7444: int;

  anon0:
    call {:si_unique_call 148} Dirent := __HAVOC_malloc(4);
    call {:si_unique_call 149} Bcb_2 := __HAVOC_malloc(4);
    call {:si_unique_call 150} RemainingMcb_1 := __HAVOC_malloc(24);
    call {:si_unique_call 151} vslice_dummy_var_35 := __HAVOC_malloc(4);
    IrpContext_19 := actual_IrpContext_19;
    FcbOrDcb_2 := actual_FcbOrDcb_2;
    DesiredAllocationSize := actual_DesiredAllocationSize;
    assume {:nonnull} Bcb_2 != 0;
    assume Bcb_2 > 0;
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    UpdatedDirent := 0;
    UnwindWeAllocatedMcb := 0;
    call {:si_unique_call 152} sdv_do_paged_code_check();
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 153} FatLookupFileAllocationSize#1(IrpContext_19, FcbOrDcb_2);
    goto L20;

  L20:
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    havoc Vcb_14;
    call {:si_unique_call 154} BytesPerCluster_2 := corral_nondet();
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} DesiredAllocationSize != 0;
    DesiredAllocationSize := BAND(DesiredAllocationSize + BytesPerCluster_2 - 1, BNOT(BytesPerCluster_2 - 1));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} DesiredAllocationSize != 0;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L26;

  L26:
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    havoc UnwindInitialAllocationSize;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    havoc UnwindInitialFirstClusterOfFile;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} DesiredAllocationSize != 0;
    UnwindWeAllocatedMcb := 1;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    call {:si_unique_call 155} FatSplitAllocation(IrpContext_19, Vcb_14, Mcb__FCB(FcbOrDcb_2), DesiredAllocationSize, RemainingMcb_1);
    call {:si_unique_call 156} FatDeallocateDiskSpace(IrpContext_19, Vcb_14, RemainingMcb_1);
    goto L76;

  L76:
    call {:si_unique_call 157} sdv_54 := sdv_AbnormalTermination();
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sdv_54 != 0;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} DesiredAllocationSize != 0;
    goto L84;

  L84:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} UnwindWeAllocatedMcb != 0;
    goto L80;

  L80:
    assume {:nonnull} Bcb_2 != 0;
    assume Bcb_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Bcb_2 != 0;
    assume Bcb_2 > 0;
    goto L97;

  L97:
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(FcbOrDcb_2)] := BOR(Mem_T.FcbState__FCB[FcbState__FCB(FcbOrDcb_2)], 16);
    goto L1;

  L1:
    return;

  anon30_Then:
    goto L97;

  anon32_Then:
    assume {:partition} UnwindWeAllocatedMcb == 0;
    goto L80;

  anon37_Then:
    assume {:partition} DesiredAllocationSize == 0;
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} UpdatedDirent != 0;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    call {:si_unique_call 158} FatRemoveMcbEntry(Vcb_14, Mcb__FCB(FcbOrDcb_2), 0, -1);
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto L84;

  anon33_Then:
    assume {:partition} UpdatedDirent == 0;
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    assume {:nonnull} Vcb_14 != 0;
    assume Vcb_14 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    call {:si_unique_call 159} boogieTmp := corral_nondet();
    goto L95;

  L95:
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    goto L84;

  anon38_Then:
    goto L95;

  anon31_Then:
    goto L84;

  anon29_Then:
    assume {:partition} sdv_54 == 0;
    goto L80;

  anon36_Then:
    assume {:partition} DesiredAllocationSize == 0;
    call {:si_unique_call 160} FatGetDirentFromFcbOrDcb(IrpContext_19, FcbOrDcb_2, Dirent, Bcb_2);
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    assume {:nonnull} Vcb_14 != 0;
    assume Vcb_14 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Dirent != 0;
    assume Dirent > 0;
    goto L104;

  L104:
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    assume {:nonnull} Bcb_2 != 0;
    assume Bcb_2 > 0;
    havoc vslice_dummy_var_7443;
    call {:si_unique_call 161} FatSetDirtyBcb#1(IrpContext_19, vslice_dummy_var_7443, Vcb_14, 1);
    UpdatedDirent := 1;
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    call {:si_unique_call 162} FatDeallocateDiskSpace(IrpContext_19, Vcb_14, Mcb__FCB(FcbOrDcb_2));
    assume {:nonnull} FcbOrDcb_2 != 0;
    assume FcbOrDcb_2 > 0;
    havoc vslice_dummy_var_7444;
    call {:si_unique_call 163} FatRemoveMcbEntry(vslice_dummy_var_7444, Mcb__FCB(FcbOrDcb_2), 0, -1);
    goto L76;

  anon39_Then:
    goto L104;

  anon28_Then:
    goto L1;

  anon35_Then:
    assume {:partition} DesiredAllocationSize == 0;
    goto L1;

  anon34_Then:
    assume {:partition} DesiredAllocationSize == 0;
    goto L26;

  anon27_Then:
    goto L20;
}



procedure {:origName "FatSetupAllocationSupport"} FatSetupAllocationSupport(actual_IrpContext_20: int, actual_Vcb_15: int);
  modifies alloc, Mem_T.INT4, Mem_T.Buffer__RTL_BITMAP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetupAllocationSupport"} FatSetupAllocationSupport(actual_IrpContext_20: int, actual_Vcb_15: int)
{
  var {:scalar} Tmp_187: int;
  var {:scalar} Tmp_188: int;
  var {:pointer} Tmp_189: int;
  var {:pointer} Tmp_190: int;
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} Tmp_193: int;
  var {:pointer} Tmp_194: int;
  var {:scalar} Tmp_195: int;
  var {:scalar} ClustersDescribableByFat: int;
  var {:pointer} Tmp_196: int;
  var {:pointer} Tmp_197: int;
  var {:pointer} Tmp_198: int;
  var {:scalar} Tmp_199: int;
  var {:pointer} Tmp_200: int;
  var {:pointer} Tmp_201: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_206: int;
  var {:scalar} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Tmp_209: int;
  var {:scalar} Tmp_210: int;
  var {:scalar} Tmp_211: int;
  var {:scalar} Tmp_212: int;
  var {:scalar} Tmp_213: int;
  var {:scalar} Tmp_214: int;
  var {:pointer} Tmp_215: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} Tmp_217: int;
  var {:pointer} Tmp_218: int;
  var {:pointer} Tmp_219: int;
  var {:pointer} Tmp_220: int;
  var {:pointer} Tmp_221: int;
  var {:pointer} Tmp_222: int;
  var {:scalar} Tmp_223: int;
  var {:pointer} Tmp_224: int;
  var {:pointer} Tmp_225: int;
  var {:pointer} Tmp_226: int;
  var {:pointer} Tmp_227: int;
  var {:pointer} Tmp_228: int;
  var {:pointer} Tmp_229: int;
  var {:pointer} Tmp_230: int;
  var {:pointer} Tmp_231: int;
  var {:pointer} Tmp_232: int;
  var {:pointer} Tmp_233: int;
  var {:pointer} Tmp_234: int;
  var {:pointer} Tmp_235: int;
  var {:pointer} Tmp_236: int;
  var {:pointer} Tmp_237: int;
  var {:scalar} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Tmp_240: int;
  var {:scalar} FileSizes: int;
  var {:scalar} Tmp_241: int;
  var {:pointer} Tmp_242: int;
  var {:pointer} Tmp_243: int;
  var {:pointer} Tmp_244: int;
  var {:pointer} Tmp_245: int;
  var {:pointer} Tmp_246: int;
  var {:pointer} Tmp_247: int;
  var {:pointer} Tmp_248: int;
  var {:scalar} Tmp_249: int;
  var {:pointer} sdv_58: int;
  var {:pointer} Tmp_250: int;
  var {:pointer} Tmp_251: int;
  var {:pointer} Tmp_253: int;
  var {:pointer} Tmp_254: int;
  var {:scalar} sdv_59: int;
  var {:pointer} Tmp_255: int;
  var {:scalar} Tmp_256: int;
  var {:pointer} Tmp_257: int;
  var {:pointer} Tmp_258: int;
  var {:scalar} BitIndex: int;
  var {:pointer} Tmp_259: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} Tmp_262: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} Tmp_268: int;
  var {:scalar} Tmp_269: int;
  var {:pointer} Tmp_270: int;
  var {:pointer} Tmp_271: int;
  var {:pointer} Tmp_272: int;
  var {:pointer} Tmp_273: int;
  var {:pointer} Tmp_274: int;
  var {:scalar} Tmp_275: int;
  var {:scalar} sdv_61: int;
  var {:pointer} Tmp_276: int;
  var {:scalar} Tmp_277: int;
  var {:pointer} Tmp_278: int;
  var {:scalar} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} Tmp_281: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} Tmp_284: int;
  var {:pointer} Tmp_285: int;
  var {:scalar} Tmp_286: int;
  var {:scalar} Tmp_287: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} Tmp_289: int;
  var {:pointer} Tmp_290: int;
  var {:pointer} Tmp_291: int;
  var {:pointer} Tmp_292: int;
  var {:pointer} Tmp_293: int;
  var {:pointer} Tmp_294: int;
  var {:scalar} Tmp_295: int;
  var {:pointer} Tmp_296: int;
  var {:pointer} IrpContext_20: int;
  var {:pointer} Vcb_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_7445: int;

  anon0:
    call {:si_unique_call 164} vslice_dummy_var_36 := __HAVOC_malloc(4);
    call {:si_unique_call 165} FileSizes := __HAVOC_malloc(60);
    IrpContext_20 := actual_IrpContext_20;
    Vcb_15 := actual_Vcb_15;
    call {:si_unique_call 166} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_204 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_204 != 0;
    assume Tmp_204 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_254 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_197 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_197 != 0;
    assume Tmp_197 > 0;
    assume {:nonnull} Tmp_254 != 0;
    assume Tmp_254 > 0;
    havoc Tmp_223;
    goto L17;

  L17:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_190 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_278 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_263 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_190 != 0;
    assume Tmp_190 > 0;
    assume {:nonnull} Tmp_263 != 0;
    assume Tmp_263 > 0;
    assume {:nonnull} Tmp_278 != 0;
    assume Tmp_278 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_230 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_226 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_246 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_232 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_232 != 0;
    assume Tmp_232 > 0;
    assume {:nonnull} Tmp_246 != 0;
    assume Tmp_246 > 0;
    havoc Tmp_295;
    goto L22;

  L22:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_267 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_234 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_194 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_235 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_194 != 0;
    assume Tmp_194 > 0;
    assume {:nonnull} Tmp_234 != 0;
    assume Tmp_234 > 0;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_262 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_262 != 0;
    assume Tmp_262 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_201 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_243 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_243 != 0;
    assume Tmp_243 > 0;
    havoc Tmp_211;
    goto L28;

  L28:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_233 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_240 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_219 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_216 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_221 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_294 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_216 != 0;
    assume Tmp_216 > 0;
    assume {:nonnull} Tmp_219 != 0;
    assume Tmp_219 > 0;
    assume {:nonnull} Tmp_221 != 0;
    assume Tmp_221 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    assume {:nonnull} Tmp_294 != 0;
    assume Tmp_294 > 0;
    havoc Tmp_286;
    goto L29;

  L29:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_248 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_248 != 0;
    assume Tmp_248 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_215 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_215 != 0;
    assume Tmp_215 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_227 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_227 != 0;
    assume Tmp_227 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_273 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_273 != 0;
    assume Tmp_273 > 0;
    havoc Tmp_214;
    goto L37;

  L37:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_225 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_229 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_191 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_196 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_270 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_280 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_191 != 0;
    assume Tmp_191 > 0;
    assume {:nonnull} Tmp_196 != 0;
    assume Tmp_196 > 0;
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    assume {:nonnull} Tmp_270 != 0;
    assume Tmp_270 > 0;
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    havoc Tmp_277;
    goto L38;

  L38:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} 4087 > Tmp_277;
    Tmp_256 := 12;
    goto L41;

  L41:
    Tmp_210 := Tmp_256;
    goto L42;

  L42:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_275;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    call {:si_unique_call 167} boogieTmp := FatLogOf(Tmp_275);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_200 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_274 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    havoc Tmp_188;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    call {:si_unique_call 168} boogieTmp := FatLogOf(Tmp_188);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Mem_T.INT4[NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(Vcb_15))] := 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_199;
    goto L57;

  L57:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_292 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_292 != 0;
    assume Tmp_292 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_209 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_209 != 0;
    assume Tmp_209 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_261 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_236 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_236 != 0;
    assume Tmp_236 > 0;
    havoc Tmp_241;
    goto L64;

  L64:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_253 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_220 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_208 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_224 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_290 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_281 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} Tmp_220 != 0;
    assume Tmp_220 > 0;
    assume {:nonnull} Tmp_224 != 0;
    assume Tmp_224 > 0;
    assume {:nonnull} Tmp_253 != 0;
    assume Tmp_253 > 0;
    assume {:nonnull} Tmp_281 != 0;
    assume Tmp_281 > 0;
    assume {:nonnull} Tmp_290 != 0;
    assume Tmp_290 > 0;
    havoc Tmp_249;
    goto L65;

  L65:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} 4087 > Tmp_249;
    Tmp_282 := 12;
    goto L68;

  L68:
    Tmp_287 := Tmp_282;
    goto L69;

  L69:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc ClustersDescribableByFat;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L73;

  L73:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_265 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_265 != 0;
    assume Tmp_265 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_198 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_251 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_198 != 0;
    assume Tmp_198 > 0;
    assume {:nonnull} Tmp_251 != 0;
    assume Tmp_251 > 0;
    havoc Tmp_212;
    goto L76;

  L76:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_272 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_192 := Bpb__VCB(Vcb_15);
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} Tmp_192 != 0;
    assume Tmp_192 > 0;
    assume {:nonnull} Tmp_272 != 0;
    assume Tmp_272 > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} FileSizes != 0;
    assume FileSizes > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_283;
    assume {:nonnull} Tmp_283 != 0;
    assume Tmp_283 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto L86;

  L86:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto L91;

  L91:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_238;
    call {:si_unique_call 169} sdv_58 := ExAllocatePoolWithTag(17, Tmp_238, -680238778);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_207;
    call {:si_unique_call 170} FatExamineFatEntries(IrpContext_20, Vcb_15, 2, Tmp_207, 1, 0, 0);
    call {:si_unique_call 171} sdv_59 := FatSelectBestWindow(Vcb_15);
    Tmp_187 := sdv_59;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_245;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto L116;

  L116:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc vslice_dummy_var_7445;
    call {:si_unique_call 172} FatExamineFatEntries(IrpContext_20, Vcb_15, 0, 0, 0, vslice_dummy_var_7445, 0);
    call {:si_unique_call 173} BitIndex := corral_nondet();
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BitIndex != -1;
    Tmp_279 := BitIndex + 2;
    goto L126;

  L126:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    call {:si_unique_call 174} sdv_61 := sdv_AbnormalTermination();
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_61 != 0;
    call {:si_unique_call 175} FatTearDownAllocationSupport(IrpContext_20, Vcb_15);
    goto L1;

  L1:
    return;

  anon55_Then:
    assume {:partition} sdv_61 == 0;
    goto L1;

  anon54_Then:
    assume {:partition} BitIndex == -1;
    Tmp_279 := 2;
    goto L126;

  anon53_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_237;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_193;
    assume {:nonnull} Tmp_193 != 0;
    assume Tmp_193 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_228;
    assume {:nonnull} Tmp_228 != 0;
    assume Tmp_228 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto L116;

  anon52_Then:
    goto L87;

  L87:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto L91;

  anon51_Then:
    goto L87;

  anon69_Then:
    goto L86;

  anon68_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_291 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_189 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_189 != 0;
    assume Tmp_189 > 0;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    havoc Tmp_212;
    goto L76;

  anon67_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    goto L73;

  anon50_Then:
    assume {:partition} Tmp_249 >= 4087;
    Tmp_282 := 16;
    goto L68;

  anon66_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_276 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_276 != 0;
    assume Tmp_276 > 0;
    havoc Tmp_241;
    goto L64;

  anon65_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_285 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_285 != 0;
    assume Tmp_285 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_296 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_296 != 0;
    assume Tmp_296 > 0;
    havoc Tmp_269;
    goto L140;

  L140:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_258 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_217 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_257 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_250 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_217 != 0;
    assume Tmp_217 > 0;
    assume {:nonnull} Tmp_250 != 0;
    assume Tmp_250 > 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume {:nonnull} Tmp_258 != 0;
    assume Tmp_258 > 0;
    havoc Tmp_249;
    goto L65;

  anon70_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_247 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_247 != 0;
    assume Tmp_247 > 0;
    havoc Tmp_269;
    goto L140;

  anon64_Then:
    Tmp_287 := 32;
    goto L69;

  anon63_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    havoc Tmp_199;
    goto L57;

  anon49_Then:
    assume {:partition} Tmp_277 >= 4087;
    Tmp_256 := 16;
    goto L41;

  anon62_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_218 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    havoc Tmp_214;
    goto L37;

  anon61_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_239 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_255 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_255 != 0;
    assume Tmp_255 > 0;
    havoc Tmp_213;
    goto L143;

  L143:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_266 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_293 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_288 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_264 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_264 != 0;
    assume Tmp_264 > 0;
    assume {:nonnull} Tmp_266 != 0;
    assume Tmp_266 > 0;
    assume {:nonnull} Tmp_288 != 0;
    assume Tmp_288 > 0;
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    havoc Tmp_277;
    goto L38;

  anon71_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_203 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_203 != 0;
    assume Tmp_203 > 0;
    havoc Tmp_213;
    goto L143;

  anon60_Then:
    Tmp_210 := 32;
    goto L42;

  anon59_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_289 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_289 != 0;
    assume Tmp_289 > 0;
    havoc Tmp_211;
    goto L28;

  anon58_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_271 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_271 != 0;
    assume Tmp_271 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_284 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_284 != 0;
    assume Tmp_284 > 0;
    havoc Tmp_195;
    goto L146;

  L146:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_260 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_259 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_231 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_242 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} Tmp_242 != 0;
    assume Tmp_242 > 0;
    assume {:nonnull} Tmp_259 != 0;
    assume Tmp_259 > 0;
    assume {:nonnull} Tmp_260 != 0;
    assume Tmp_260 > 0;
    havoc Tmp_286;
    goto L29;

  anon72_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_206 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    havoc Tmp_195;
    goto L146;

  anon57_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_202 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_244 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_202 != 0;
    assume Tmp_202 > 0;
    assume {:nonnull} Tmp_244 != 0;
    assume Tmp_244 > 0;
    havoc Tmp_295;
    goto L22;

  anon56_Then:
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_268 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Vcb_15 != 0;
    assume Vcb_15 > 0;
    Tmp_222 := Bpb__VCB(Vcb_15);
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    assume {:nonnull} Tmp_268 != 0;
    assume Tmp_268 > 0;
    havoc Tmp_223;
    goto L17;
}



procedure {:origName "FatSetFatRun"} FatSetFatRun(actual_IrpContext_21: int, actual_Vcb_16: int, actual_StartingFatIndex: int, actual_ClusterCount: int, actual_ChainTogether: int);
  modifies alloc, Mem_T.INT4, Mem_T.Flags__IRP_CONTEXT, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFatRun"} FatSetFatRun(actual_IrpContext_21: int, actual_Vcb_16: int, actual_StartingFatIndex: int, actual_ClusterCount: int, actual_ChainTogether: int)
{
  var {:scalar} NumberOfPages: int;
  var {:pointer} Tmp_298: int;
  var {:scalar} Tmp_299: int;
  var {:dopa} {:scalar} TmpFatEntry_1: int;
  var {:scalar} Tmp_300: int;
  var {:scalar} Lbo_4: int;
  var {:scalar} FinalCluster: int;
  var {:pointer} Tmp_301: int;
  var {:scalar} Tmp_302: int;
  var {:scalar} StartSectorLbo: int;
  var {:pointer} Tmp_303: int;
  var {:scalar} Tmp_304: int;
  var {:scalar} Tmp_305: int;
  var {:scalar} Tmp_306: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} Tmp_308: int;
  var {:scalar} Tmp_309: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:scalar} Tmp_313: int;
  var {:pointer} Tmp_314: int;
  var {:scalar} Cluster: int;
  var {:pointer} Tmp_316: int;
  var {:scalar} FinalOffsetInVolume: int;
  var {:pointer} Tmp_317: int;
  var {:scalar} Tmp_318: int;
  var {:pointer} Tmp_319: int;
  var {:scalar} Tmp_320: int;
  var {:pointer} Tmp_321: int;
  var {:pointer} Tmp_322: int;
  var {:scalar} sdv_62: int;
  var {:pointer} Tmp_323: int;
  var {:pointer} Tmp_324: int;
  var {:pointer} FatEntry_3: int;
  var {:pointer} Tmp_327: int;
  var {:scalar} Tmp_328: int;
  var {:pointer} Tmp_329: int;
  var {:pointer} Tmp_330: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} FatEntry_4: int;
  var {:scalar} Tmp_332: int;
  var {:scalar} Tmp_333: int;
  var {:scalar} Tmp_335: int;
  var {:scalar} FinalSectorLbo: int;
  var {:scalar} Tmp_337: int;
  var {:pointer} Tmp_338: int;
  var {:pointer} Tmp_339: int;
  var {:pointer} Tmp_340: int;
  var {:scalar} i_1: int;
  var {:scalar} Tmp_341: int;
  var {:scalar} StartOffsetInVolume: int;
  var {:pointer} Tmp_343: int;
  var {:scalar} Tmp_344: int;
  var {:scalar} i_2: int;
  var {:scalar} Offset_1: int;
  var {:pointer} Tmp_345: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Tmp_347: int;
  var {:scalar} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:scalar} Offset_2: int;
  var {:pointer} Tmp_350: int;
  var {:scalar} Tmp_351: int;
  var {:scalar} Tmp_352: int;
  var {:scalar} Tmp_353: int;
  var {:pointer} Tmp_354: int;
  var {:pointer} Tmp_355: int;
  var {:scalar} Tmp_356: int;
  var {:scalar} StartOffsetInVolume_1: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} PinnedFat_1: int;
  var {:scalar} Tmp_358: int;
  var {:pointer} Tmp_359: int;
  var {:pointer} Tmp_360: int;
  var {:scalar} Tmp_361: int;
  var {:scalar} Tmp_362: int;
  var {:pointer} Tmp_363: int;
  var {:scalar} Page_1: int;
  var {:pointer} SavedBcbs: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Tmp_365: int;
  var {:scalar} Page_2: int;
  var {:scalar} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} Tmp_368: int;
  var {:scalar} Tmp_369: int;
  var {:pointer} Tmp_371: int;
  var {:pointer} Tmp_372: int;
  var {:pointer} Tmp_373: int;
  var {:scalar} Tmp_374: int;
  var {:scalar} SectorSize_1: int;
  var {:pointer} Tmp_377: int;
  var {:pointer} Tmp_378: int;
  var {:dopa} {:scalar} TmpFatEntry_2: int;
  var {:scalar} SavedStartingFatIndex: int;
  var {:scalar} Tmp_379: int;
  var {:scalar} NumberOfPages_1: int;
  var {:pointer} Tmp_380: int;
  var {:scalar} Tmp_381: int;
  var {:scalar} ClusterCountThisRun: int;
  var {:scalar} FinalOffsetInVolume_1: int;
  var {:scalar} Tmp_382: int;
  var {:pointer} Tmp_383: int;
  var {:pointer} Tmp_384: int;
  var {:scalar} FinalCluster_1: int;
  var {:pointer} Tmp_385: int;
  var {:scalar} ReleaseMutex_1: int;
  var {:pointer} IrpContext_21: int;
  var {:pointer} Vcb_16: int;
  var {:scalar} StartingFatIndex: int;
  var {:scalar} ClusterCount: int;
  var {:scalar} ChainTogether: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_7446: int;
  var vslice_dummy_var_7447: int;

  anon0:
    call {:si_unique_call 176} TmpFatEntry_1 := __HAVOC_malloc(4);
    call {:si_unique_call 177} PinnedFat_1 := __HAVOC_malloc(4);
    call {:si_unique_call 178} vslice_dummy_var_37 := __HAVOC_malloc(4);
    call {:si_unique_call 179} TmpFatEntry_2 := __HAVOC_malloc(4);
    IrpContext_21 := actual_IrpContext_21;
    Vcb_16 := actual_Vcb_16;
    StartingFatIndex := actual_StartingFatIndex;
    ClusterCount := actual_ClusterCount;
    ChainTogether := actual_ChainTogether;
    call {:si_unique_call 180} Tmp_298 := __HAVOC_malloc(8);
    call {:si_unique_call 181} Tmp_303 := __HAVOC_malloc(8);
    call {:si_unique_call 182} Tmp_308 := __HAVOC_malloc(8);
    call {:si_unique_call 183} Tmp_311 := __HAVOC_malloc(8);
    call {:si_unique_call 184} Tmp_316 := __HAVOC_malloc(8);
    call {:si_unique_call 185} Tmp_324 := __HAVOC_malloc(8);
    call {:si_unique_call 186} Tmp_329 := __HAVOC_malloc(8);
    call {:si_unique_call 187} Tmp_330 := __HAVOC_malloc(8);
    call {:si_unique_call 188} Tmp_331 := __HAVOC_malloc(8);
    call {:si_unique_call 189} Tmp_338 := __HAVOC_malloc(8);
    call {:si_unique_call 190} Tmp_343 := __HAVOC_malloc(8);
    call {:si_unique_call 191} Tmp_345 := __HAVOC_malloc(8);
    call {:si_unique_call 192} Tmp_346 := __HAVOC_malloc(8);
    call {:si_unique_call 193} Tmp_349 := __HAVOC_malloc(8);
    call {:si_unique_call 194} Tmp_350 := __HAVOC_malloc(8);
    call {:si_unique_call 195} Tmp_359 := __HAVOC_malloc(8);
    call {:si_unique_call 196} Tmp_360 := __HAVOC_malloc(8);
    call {:si_unique_call 197} Tmp_363 := __HAVOC_malloc(8);
    call {:si_unique_call 198} SavedBcbs := __HAVOC_malloc(528);
    call {:si_unique_call 199} Tmp_367 := __HAVOC_malloc(8);
    call {:si_unique_call 200} Tmp_371 := __HAVOC_malloc(8);
    call {:si_unique_call 201} Tmp_377 := __HAVOC_malloc(8);
    ReleaseMutex_1 := 0;
    SavedStartingFatIndex := StartingFatIndex;
    call {:si_unique_call 202} sdv_do_paged_code_check();
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} 2 > StartingFatIndex;
    goto L20;

  L20:
    assume {:nonnull} IrpContext_21 != 0;
    assume IrpContext_21 > 0;
    call {:si_unique_call 203} ExRaiseStatus(-1073741566);
    goto L24;

  L24:
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} 2 > StartingFatIndex + ClusterCount - 1;
    goto L26;

  L26:
    assume {:nonnull} IrpContext_21 != 0;
    assume IrpContext_21 > 0;
    call {:si_unique_call 204} ExRaiseStatus(-1073741566);
    goto L30;

  L30:
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} ClusterCount != 0;
    call {:si_unique_call 205} SectorSize_1 := corral_nondet();
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    goto anon246_Then, anon246_Else;

  anon246_Else:
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_329;
    call {:si_unique_call 206} sdv_RtlZeroMemory(0, 16);
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_367;
    Tmp_373 := Tmp_367;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_365 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_365 != 0;
    assume Tmp_365 > 0;
    goto anon247_Then, anon247_Else;

  anon247_Else:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_307 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_380 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_307 != 0;
    assume Tmp_307 > 0;
    assume {:nonnull} Tmp_380 != 0;
    assume Tmp_380 > 0;
    havoc Tmp_309;
    goto L71;

  L71:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_301 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_327 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_301 != 0;
    assume Tmp_301 > 0;
    assume {:nonnull} Tmp_327 != 0;
    assume Tmp_327 > 0;
    havoc Tmp_299;
    call {:si_unique_call 207} FatPrepareWriteVolumeFile#1(IrpContext_21, Vcb_16, Tmp_299, Tmp_309, Tmp_373, PinnedFat_1, 1, 0);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_385 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_357 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_357 != 0;
    assume Tmp_357 > 0;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    havoc StartSectorLbo;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_310 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_372 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    havoc FinalSectorLbo;
    Lbo_4 := StartSectorLbo;
    goto L78;

  L78:
    call {:si_unique_call 208} Lbo_4, Tmp_337, vslice_dummy_var_38 := FatSetFatRun_loop_L78(Lbo_4, FinalSectorLbo, Tmp_337, SectorSize_1, Vcb_16, vslice_dummy_var_38);
    goto L78_last;

  L78_last:
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} FinalSectorLbo >= Lbo_4;
    Tmp_337 := Lbo_4;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    call {:si_unique_call 209} vslice_dummy_var_38 := FatAddMcbEntry(Vcb_16, DirtyFatMcb__VCB(Vcb_16), Tmp_337, Lbo_4, SectorSize_1);
    Lbo_4 := Lbo_4 + SectorSize_1;
    goto anon215_Else_dummy;

  anon215_Else_dummy:
    assume false;
    return;

  anon215_Then:
    assume {:partition} Lbo_4 > FinalSectorLbo;
    call {:si_unique_call 210} ExAcquireFastMutexUnsafe(0);
    ReleaseMutex_1 := 1;
    Cluster := StartingFatIndex;
    goto L89;

  L89:
    call {:si_unique_call 211} Tmp_300, Cluster, Tmp_340, Tmp_353, Tmp_355, Tmp_366, Tmp_368 := FatSetFatRun_loop_L89(Tmp_300, Cluster, Tmp_340, Tmp_353, Tmp_355, PinnedFat_1, Tmp_366, Tmp_368, TmpFatEntry_2, StartingFatIndex, ClusterCount, ChainTogether);
    goto L89_last;

  L89_last:
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} StartingFatIndex + ClusterCount - 1 <= Cluster;
    assume {:nonnull} PinnedFat_1 != 0;
    assume PinnedFat_1 > 0;
    havoc Tmp_317;
    assume {:nonnull} TmpFatEntry_1 != 0;
    assume TmpFatEntry_1 > 0;
    assume {:nonnull} Tmp_317 != 0;
    assume Tmp_317 > 0;
    havoc vslice_dummy_var_7446;
    Mem_T.INT4[TmpFatEntry_1] := vslice_dummy_var_7446;
    goto anon249_Then, anon249_Else;

  anon249_Else:
    assume {:partition} BAND(Cluster, 1) != 0;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} ChainTogether != 0;
    goto L113;

  L113:
    assume {:nonnull} TmpFatEntry_1 != 0;
    assume TmpFatEntry_1 > 0;
    call {:si_unique_call 212} Tmp_335 := corral_nondet();
    goto L115;

  L115:
    assume {:nonnull} TmpFatEntry_1 != 0;
    assume TmpFatEntry_1 > 0;
    Mem_T.INT4[TmpFatEntry_1] := Tmp_335;
    assume {:nonnull} PinnedFat_1 != 0;
    assume PinnedFat_1 > 0;
    havoc Tmp_364;
    Tmp_314 := TmpFatEntry_1;
    assume {:nonnull} Tmp_314 != 0;
    assume Tmp_314 > 0;
    assume {:nonnull} Tmp_364 != 0;
    assume Tmp_364 > 0;
    assume {:nonnull} Tmp_314 != 0;
    assume Tmp_314 > 0;
    assume {:nonnull} Tmp_364 != 0;
    assume Tmp_364 > 0;
    call {:si_unique_call 213} ExReleaseFastMutexUnsafe(0);
    ReleaseMutex_1 := 0;
    goto L122;

  L122:
    i_1 := 0;
    goto anon250_Then, anon250_Else;

  anon250_Else:
    assume {:partition} ReleaseMutex_1 != 0;
    call {:si_unique_call 214} ExReleaseFastMutexUnsafe(0);
    goto L124;

  L124:
    call {:si_unique_call 215} Tmp_298, Tmp_303, Tmp_305, Tmp_306, Tmp_313, i_1, Tmp_343, Tmp_344, Tmp_360 := FatSetFatRun_loop_L124(Tmp_298, Tmp_303, Tmp_305, Tmp_306, Tmp_313, i_1, Tmp_343, Tmp_344, Tmp_360, SavedBcbs);
    goto L124_last;

  L124_last:
    Tmp_344 := i_1;
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume Tmp_344 <= 2;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume Tmp_344 != 2;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume Tmp_344 != 1;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume Tmp_344 != 0;
    goto L308;

  L308:
    assume {:nonnull} Tmp_298 != 0;
    assume Tmp_298 > 0;
    goto anon242_Then, anon242_Else;

  anon242_Else:
    Tmp_305 := i_1;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    assume Tmp_305 <= 2;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume Tmp_305 != 2;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume Tmp_305 != 1;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume Tmp_305 != 0;
    goto L318;

  L318:
    assume {:nonnull} Tmp_303 != 0;
    assume Tmp_303 > 0;
    goto anon243_Then, anon243_Else;

  anon243_Else:
    Tmp_313 := i_1;
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume Tmp_313 <= 2;
    goto anon258_Then, anon258_Else;

  anon258_Else:
    assume Tmp_313 != 2;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume Tmp_313 != 1;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume Tmp_313 != 0;
    goto L328;

  L328:
    assume {:nonnull} Tmp_343 != 0;
    assume Tmp_343 > 0;
    Tmp_306 := i_1;
    goto anon254_Then, anon254_Else;

  anon254_Else:
    assume Tmp_306 <= 2;
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume Tmp_306 != 2;
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume Tmp_306 != 1;
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume Tmp_306 != 0;
    goto L338;

  L338:
    assume {:nonnull} Tmp_360 != 0;
    assume Tmp_360 > 0;
    goto L132;

  L132:
    i_1 := i_1 + 1;
    goto L132_dummy;

  L132_dummy:
    assume false;
    return;

  anon257_Then:
    assume Tmp_306 == 0;
    Tmp_306 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_360;
    goto L338;

  anon256_Then:
    assume Tmp_306 == 1;
    Tmp_306 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_360;
    goto L338;

  anon255_Then:
    assume Tmp_306 == 2;
    Tmp_306 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_360;
    goto L338;

  anon254_Then:
    assume Tmp_306 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_360;
    goto L338;

  anon260_Then:
    assume Tmp_313 == 0;
    Tmp_313 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_343;
    goto L328;

  anon259_Then:
    assume Tmp_313 == 1;
    Tmp_313 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_343;
    goto L328;

  anon258_Then:
    assume Tmp_313 == 2;
    Tmp_313 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_343;
    goto L328;

  anon253_Then:
    assume Tmp_313 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_343;
    goto L328;

  anon243_Then:
    goto L132;

  anon263_Then:
    assume Tmp_305 == 0;
    Tmp_305 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_303;
    goto L318;

  anon262_Then:
    assume Tmp_305 == 1;
    Tmp_305 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_303;
    goto L318;

  anon261_Then:
    assume Tmp_305 == 2;
    Tmp_305 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_303;
    goto L318;

  anon252_Then:
    assume Tmp_305 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_303;
    goto L318;

  anon242_Then:
    call {:si_unique_call 216} sdv_62 := sdv_AbnormalTermination();
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} sdv_62 != 0;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    goto anon222_Then, anon222_Else;

  anon222_Else:
    goto L141;

  L141:
    call {:si_unique_call 217} Tmp_381, StartingFatIndex := FatSetFatRun_loop_L141(SavedStartingFatIndex, Tmp_381, IrpContext_21, Vcb_16, StartingFatIndex, ChainTogether);
    goto L141_last;

  L141_last:
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} StartingFatIndex > SavedStartingFatIndex;
    StartingFatIndex := StartingFatIndex - 1;
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} ChainTogether != 0;
    Tmp_381 := StartingFatIndex + 1;
    goto L146;

  L146:
    call {:si_unique_call 218} FatSetFatEntry#1(IrpContext_21, Vcb_16, StartingFatIndex, Tmp_381);
    goto L146_dummy;

  L146_dummy:
    assume false;
    return;

  anon264_Then:
    assume {:partition} ChainTogether == 0;
    Tmp_381 := 0;
    goto L146;

  anon223_Then:
    assume {:partition} SavedStartingFatIndex >= StartingFatIndex;
    goto L1;

  L1:
    return;

  anon222_Then:
    goto L1;

  anon221_Then:
    assume {:partition} sdv_62 == 0;
    goto L1;

  anon267_Then:
    assume Tmp_344 == 0;
    Tmp_344 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_298;
    goto L308;

  anon266_Then:
    assume Tmp_344 == 1;
    Tmp_344 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_298;
    goto L308;

  anon265_Then:
    assume Tmp_344 == 2;
    Tmp_344 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_298;
    goto L308;

  anon251_Then:
    assume Tmp_344 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_298;
    goto L308;

  anon250_Then:
    assume {:partition} ReleaseMutex_1 == 0;
    goto L124;

  anon220_Then:
    assume {:partition} ChainTogether == 0;
    goto L113;

  anon249_Then:
    assume {:partition} BAND(Cluster, 1) == 0;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} ChainTogether != 0;
    Tmp_379 := 4095;
    goto L151;

  L151:
    assume {:nonnull} TmpFatEntry_1 != 0;
    assume TmpFatEntry_1 > 0;
    Tmp_332 := BAND(Mem_T.INT4[TmpFatEntry_1], BOR(BOR(BOR(4096, 8192), 16384), 32768));
    Tmp_335 := BOR(Tmp_379, Tmp_332);
    goto L115;

  anon219_Then:
    assume {:partition} ChainTogether == 0;
    Tmp_379 := 0;
    goto L151;

  anon216_Then:
    assume {:partition} Cluster < StartingFatIndex + ClusterCount - 1;
    assume {:nonnull} PinnedFat_1 != 0;
    assume PinnedFat_1 > 0;
    havoc Tmp_340;
    assume {:nonnull} TmpFatEntry_2 != 0;
    assume TmpFatEntry_2 > 0;
    assume {:nonnull} Tmp_340 != 0;
    assume Tmp_340 > 0;
    havoc vslice_dummy_var_7447;
    Mem_T.INT4[TmpFatEntry_2] := vslice_dummy_var_7447;
    goto anon248_Then, anon248_Else;

  anon248_Else:
    assume {:partition} BAND(Cluster, 1) != 0;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} ChainTogether != 0;
    goto L98;

  L98:
    assume {:nonnull} TmpFatEntry_2 != 0;
    assume TmpFatEntry_2 > 0;
    call {:si_unique_call 219} Tmp_353 := corral_nondet();
    goto L100;

  L100:
    assume {:nonnull} TmpFatEntry_2 != 0;
    assume TmpFatEntry_2 > 0;
    Mem_T.INT4[TmpFatEntry_2] := Tmp_353;
    assume {:nonnull} PinnedFat_1 != 0;
    assume PinnedFat_1 > 0;
    havoc Tmp_368;
    Tmp_355 := TmpFatEntry_2;
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    Cluster := Cluster + 1;
    goto L100_dummy;

  L100_dummy:
    assume false;
    return;

  anon218_Then:
    assume {:partition} ChainTogether == 0;
    goto L98;

  anon248_Then:
    assume {:partition} BAND(Cluster, 1) == 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} ChainTogether != 0;
    Tmp_300 := Cluster + 1;
    goto L105;

  L105:
    assume {:nonnull} TmpFatEntry_2 != 0;
    assume TmpFatEntry_2 > 0;
    Tmp_366 := BAND(Mem_T.INT4[TmpFatEntry_2], BOR(BOR(BOR(4096, 8192), 16384), 32768));
    Tmp_353 := BOR(Tmp_300, Tmp_366);
    goto L100;

  anon217_Then:
    assume {:partition} ChainTogether == 0;
    Tmp_300 := 0;
    goto L105;

  anon247_Then:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_322 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_321 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_321 != 0;
    assume Tmp_321 > 0;
    assume {:nonnull} Tmp_322 != 0;
    assume Tmp_322 > 0;
    havoc Tmp_309;
    goto L71;

  anon246_Then:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_323 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_347 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_323 != 0;
    assume Tmp_323 > 0;
    assume {:nonnull} Tmp_347 != 0;
    assume Tmp_347 > 0;
    havoc StartOffsetInVolume;
    FinalOffsetInVolume_1 := StartOffsetInVolume + (ClusterCount - 1) * 2;
    NumberOfPages := INTDIV(FinalOffsetInVolume_1, 4096) - INTDIV(StartOffsetInVolume, 4096) + 1;
    Tmp_362 := (NumberOfPages + 1) * 4 * 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_359;
    call {:si_unique_call 220} sdv_RtlZeroMemory(0, Tmp_362);
    Page_1 := 0;
    Offset_2 := BAND(StartOffsetInVolume, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    goto L246;

  L246:
    call {:si_unique_call 221} Tmp_319, Tmp_324, FatEntry_3, Tmp_333, Tmp_338, Offset_2, Tmp_354, Tmp_356, Tmp_363, Page_1 := FatSetFatRun_loop_L246(NumberOfPages, Tmp_319, Tmp_324, FatEntry_3, Tmp_333, Tmp_338, Offset_2, Tmp_354, Tmp_356, Tmp_363, Page_1, SavedBcbs, IrpContext_21, Vcb_16);
    goto L246_last;

  L246_last:
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} NumberOfPages > Page_1;
    Tmp_333 := Page_1;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume Tmp_333 <= 2;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume Tmp_333 != 2;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume Tmp_333 != 1;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume Tmp_333 != 0;
    goto L428;

  L428:
    Tmp_319 := Tmp_338 + 1 * 4;
    Tmp_356 := Page_1;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume Tmp_356 <= 2;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume Tmp_356 != 2;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume Tmp_356 != 1;
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume Tmp_356 != 0;
    goto L438;

  L438:
    Tmp_354 := Tmp_324;
    call {:si_unique_call 222} FatPrepareWriteVolumeFile#1(IrpContext_21, Vcb_16, Offset_2, 4096, Tmp_354, Tmp_319, 1, 0);
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} Page_1 == 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_363;
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    havoc FatEntry_3;
    goto L255;

  L255:
    Page_1 := Page_1 + 1;
    Offset_2 := Offset_2 + 4096;
    goto L255_dummy;

  L255_dummy:
    assume false;
    return;

  anon235_Then:
    assume {:partition} Page_1 != 0;
    goto L255;

  anon305_Then:
    assume Tmp_356 == 0;
    Tmp_356 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_324;
    goto L438;

  anon304_Then:
    assume Tmp_356 == 1;
    Tmp_356 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_324;
    goto L438;

  anon303_Then:
    assume Tmp_356 == 2;
    Tmp_356 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_324;
    goto L438;

  anon302_Then:
    assume Tmp_356 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_324;
    goto L438;

  anon308_Then:
    assume Tmp_333 == 0;
    Tmp_333 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_338;
    goto L428;

  anon307_Then:
    assume Tmp_333 == 1;
    Tmp_333 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_338;
    goto L428;

  anon306_Then:
    assume Tmp_333 == 2;
    Tmp_333 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_338;
    goto L428;

  anon301_Then:
    assume Tmp_333 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_338;
    goto L428;

  anon234_Then:
    assume {:partition} Page_1 >= NumberOfPages;
    StartSectorLbo := BAND(StartOffsetInVolume, BNOT(SectorSize_1 - 1));
    FinalSectorLbo := BAND(FinalOffsetInVolume_1, BNOT(SectorSize_1 - 1));
    Lbo_4 := StartSectorLbo;
    goto L260;

  L260:
    call {:si_unique_call 223} Lbo_4, Tmp_361, vslice_dummy_var_40 := FatSetFatRun_loop_L260(Lbo_4, FinalSectorLbo, Tmp_361, SectorSize_1, Vcb_16, vslice_dummy_var_40);
    goto L260_last;

  L260_last:
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} FinalSectorLbo >= Lbo_4;
    Tmp_361 := Lbo_4;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    call {:si_unique_call 224} vslice_dummy_var_40 := FatAddMcbEntry(Vcb_16, DirtyFatMcb__VCB(Vcb_16), Tmp_361, Lbo_4, SectorSize_1);
    Lbo_4 := Lbo_4 + SectorSize_1;
    goto anon236_Else_dummy;

  anon236_Else_dummy:
    assume false;
    return;

  anon236_Then:
    assume {:partition} Lbo_4 > FinalSectorLbo;
    FinalCluster_1 := StartingFatIndex + ClusterCount - 1;
    Page_1 := 0;
    Cluster := StartingFatIndex;
    goto L269;

  L269:
    call {:si_unique_call 225} Cluster, FatEntry_3, Tmp_331, Tmp_341, Page_1, Tmp_382 := FatSetFatRun_loop_L269(Cluster, FatEntry_3, Tmp_331, Tmp_341, Page_1, SavedBcbs, Tmp_382, FinalCluster_1, StartingFatIndex, ChainTogether);
    goto L269_last;

  L269_last:
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:partition} FinalCluster_1 >= Cluster;
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} BAND(FatEntry_3, 4095) != 0;
    goto L273;

  L273:
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume {:partition} ChainTogether != 0;
    Tmp_341 := Cluster + 1;
    goto L276;

  L276:
    assume {:nonnull} FatEntry_3 != 0;
    assume FatEntry_3 > 0;
    Mem_T.INT4[FatEntry_3] := Tmp_341;
    Cluster := Cluster + 1;
    goto L276_dummy;

  L276_dummy:
    assume false;
    return;

  anon241_Then:
    assume {:partition} ChainTogether == 0;
    Tmp_341 := 0;
    goto L276;

  anon239_Then:
    assume {:partition} BAND(FatEntry_3, 4095) == 0;
    goto anon240_Then, anon240_Else;

  anon240_Else:
    assume {:partition} Cluster != StartingFatIndex;
    Page_1 := Page_1 + 1;
    Tmp_382 := Page_1;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume Tmp_382 <= 2;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume Tmp_382 != 2;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume Tmp_382 != 1;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume Tmp_382 != 0;
    goto L448;

  L448:
    assume {:nonnull} Tmp_331 != 0;
    assume Tmp_331 > 0;
    havoc FatEntry_3;
    goto L273;

  anon312_Then:
    assume Tmp_382 == 0;
    Tmp_382 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_331;
    goto L448;

  anon311_Then:
    assume Tmp_382 == 1;
    Tmp_382 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_331;
    goto L448;

  anon310_Then:
    assume Tmp_382 == 2;
    Tmp_382 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_331;
    goto L448;

  anon309_Then:
    assume Tmp_382 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_331;
    goto L448;

  anon240_Then:
    assume {:partition} Cluster == StartingFatIndex;
    goto L273;

  anon237_Then:
    assume {:partition} Cluster > FinalCluster_1;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:partition} ChainTogether != 0;
    assume {:nonnull} FatEntry_3 != 0;
    assume FatEntry_3 > 0;
    Mem_T.INT4[FatEntry_3] := 65535;
    goto L122;

  anon238_Then:
    assume {:partition} ChainTogether == 0;
    goto L122;

  anon214_Then:
    goto L161;

  L161:
    call {:si_unique_call 226} Lbo_4, FinalCluster, Tmp_302, StartSectorLbo, Tmp_304, Tmp_308, Tmp_311, Cluster, Tmp_316, FinalOffsetInVolume, Tmp_318, Tmp_320, Tmp_328, Tmp_330, FatEntry_4, FinalSectorLbo, Tmp_339, i_2, Offset_1, Tmp_345, Tmp_346, Tmp_348, Tmp_349, Tmp_350, Tmp_351, Tmp_352, StartOffsetInVolume_1, Tmp_358, Page_2, Tmp_369, Tmp_371, Tmp_374, Tmp_377, Tmp_378, NumberOfPages_1, ClusterCountThisRun, Tmp_383, Tmp_384, StartingFatIndex, ClusterCount, vslice_dummy_var_39 := FatSetFatRun_loop_L161(Lbo_4, FinalCluster, Tmp_302, StartSectorLbo, Tmp_304, Tmp_308, Tmp_311, Cluster, Tmp_316, FinalOffsetInVolume, Tmp_318, Tmp_320, Tmp_328, Tmp_330, FatEntry_4, FinalSectorLbo, Tmp_339, i_2, Offset_1, Tmp_345, Tmp_346, Tmp_348, Tmp_349, Tmp_350, Tmp_351, Tmp_352, StartOffsetInVolume_1, Tmp_358, SavedBcbs, Page_2, Tmp_369, Tmp_371, Tmp_374, SectorSize_1, Tmp_377, Tmp_378, NumberOfPages_1, ClusterCountThisRun, Tmp_383, Tmp_384, IrpContext_21, Vcb_16, StartingFatIndex, ClusterCount, ChainTogether, vslice_dummy_var_39);
    goto L161_last;

  L161_last:
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_383 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    Tmp_384 := Bpb__VCB(Vcb_16);
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    havoc StartOffsetInVolume_1;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:partition} ClusterCount > 65536;
    ClusterCountThisRun := 65536;
    goto L165;

  L165:
    FinalOffsetInVolume := StartOffsetInVolume_1 + (ClusterCountThisRun - 1) * 4;
    NumberOfPages_1 := INTDIV(FinalOffsetInVolume, 4096) - INTDIV(StartOffsetInVolume_1, 4096) + 1;
    Tmp_374 := (NumberOfPages_1 + 1) * 4 * 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_349;
    call {:si_unique_call 227} sdv_RtlZeroMemory(0, Tmp_374);
    Page_2 := 0;
    Offset_1 := BAND(StartOffsetInVolume_1, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    goto L177;

  L177:
    call {:si_unique_call 228} Tmp_304, Tmp_308, FatEntry_4, Tmp_339, Offset_1, Tmp_346, Page_2, Tmp_369, Tmp_371, Tmp_378 := FatSetFatRun_loop_L177(Tmp_304, Tmp_308, FatEntry_4, Tmp_339, Offset_1, Tmp_346, SavedBcbs, Page_2, Tmp_369, Tmp_371, Tmp_378, NumberOfPages_1, IrpContext_21, Vcb_16);
    goto L177_last;

  L177_last:
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} NumberOfPages_1 > Page_2;
    Tmp_304 := Page_2;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume Tmp_304 <= 2;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume Tmp_304 != 2;
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume Tmp_304 != 1;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume Tmp_304 != 0;
    goto L348;

  L348:
    Tmp_339 := Tmp_308 + 1 * 4;
    Tmp_369 := Page_2;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume Tmp_369 <= 2;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume Tmp_369 != 2;
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume Tmp_369 != 1;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume Tmp_369 != 0;
    goto L358;

  L358:
    Tmp_378 := Tmp_346;
    call {:si_unique_call 229} FatPrepareWriteVolumeFile#1(IrpContext_21, Vcb_16, Offset_1, 4096, Tmp_378, Tmp_339, 1, 0);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} Page_2 == 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_371;
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    havoc FatEntry_4;
    goto L186;

  L186:
    Page_2 := Page_2 + 1;
    Offset_1 := Offset_1 + 4096;
    goto L186_dummy;

  L186_dummy:
    assume false;
    return;

  anon225_Then:
    assume {:partition} Page_2 != 0;
    goto L186;

  anon273_Then:
    assume Tmp_369 == 0;
    Tmp_369 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_346;
    goto L358;

  anon272_Then:
    assume Tmp_369 == 1;
    Tmp_369 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_346;
    goto L358;

  anon271_Then:
    assume Tmp_369 == 2;
    Tmp_369 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_346;
    goto L358;

  anon270_Then:
    assume Tmp_369 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_346;
    goto L358;

  anon276_Then:
    assume Tmp_304 == 0;
    Tmp_304 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_308;
    goto L348;

  anon275_Then:
    assume Tmp_304 == 1;
    Tmp_304 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_308;
    goto L348;

  anon274_Then:
    assume Tmp_304 == 2;
    Tmp_304 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_308;
    goto L348;

  anon269_Then:
    assume Tmp_304 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_308;
    goto L348;

  anon224_Then:
    assume {:partition} Page_2 >= NumberOfPages_1;
    StartSectorLbo := BAND(StartOffsetInVolume_1, BNOT(SectorSize_1 - 1));
    FinalSectorLbo := BAND(FinalOffsetInVolume, BNOT(SectorSize_1 - 1));
    Lbo_4 := StartSectorLbo;
    goto L191;

  L191:
    call {:si_unique_call 230} Lbo_4, Tmp_320, vslice_dummy_var_39 := FatSetFatRun_loop_L191(Lbo_4, Tmp_320, FinalSectorLbo, SectorSize_1, Vcb_16, vslice_dummy_var_39);
    goto L191_last;

  L191_last:
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:partition} FinalSectorLbo >= Lbo_4;
    Tmp_320 := Lbo_4;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    call {:si_unique_call 231} vslice_dummy_var_39 := FatAddMcbEntry(Vcb_16, DirtyFatMcb__VCB(Vcb_16), Tmp_320, Lbo_4, SectorSize_1);
    Lbo_4 := Lbo_4 + SectorSize_1;
    goto anon226_Else_dummy;

  anon226_Else_dummy:
    assume false;
    return;

  anon226_Then:
    assume {:partition} Lbo_4 > FinalSectorLbo;
    FinalCluster := StartingFatIndex + ClusterCountThisRun - 1;
    Page_2 := 0;
    Cluster := StartingFatIndex;
    goto L200;

  L200:
    call {:si_unique_call 232} Tmp_302, Cluster, FatEntry_4, Tmp_345, Tmp_348, Page_2 := FatSetFatRun_loop_L200(FinalCluster, Tmp_302, Cluster, FatEntry_4, Tmp_345, Tmp_348, SavedBcbs, Page_2, StartingFatIndex, ChainTogether);
    goto L200_last;

  L200_last:
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:partition} FinalCluster >= Cluster;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    assume {:partition} BAND(FatEntry_4, 4095) != 0;
    goto L204;

  L204:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} ChainTogether != 0;
    Tmp_302 := Cluster + 1;
    goto L207;

  L207:
    assume {:nonnull} FatEntry_4 != 0;
    assume FatEntry_4 > 0;
    Mem_T.INT4[FatEntry_4] := Tmp_302;
    Cluster := Cluster + 1;
    goto L207_dummy;

  L207_dummy:
    assume false;
    return;

  anon231_Then:
    assume {:partition} ChainTogether == 0;
    Tmp_302 := 0;
    goto L207;

  anon229_Then:
    assume {:partition} BAND(FatEntry_4, 4095) == 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} Cluster != StartingFatIndex;
    Page_2 := Page_2 + 1;
    Tmp_348 := Page_2;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume Tmp_348 <= 2;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume Tmp_348 != 2;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume Tmp_348 != 1;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume Tmp_348 != 0;
    goto L368;

  L368:
    assume {:nonnull} Tmp_345 != 0;
    assume Tmp_345 > 0;
    havoc FatEntry_4;
    goto L204;

  anon280_Then:
    assume Tmp_348 == 0;
    Tmp_348 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_345;
    goto L368;

  anon279_Then:
    assume Tmp_348 == 1;
    Tmp_348 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_345;
    goto L368;

  anon278_Then:
    assume Tmp_348 == 2;
    Tmp_348 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_345;
    goto L368;

  anon277_Then:
    assume Tmp_348 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_345;
    goto L368;

  anon230_Then:
    assume {:partition} Cluster == StartingFatIndex;
    goto L204;

  anon227_Then:
    assume {:partition} Cluster > FinalCluster;
    goto anon228_Then, anon228_Else;

  anon228_Else:
    assume {:partition} 65536 < ClusterCount;
    goto L215;

  L215:
    i_2 := 0;
    goto L216;

  L216:
    call {:si_unique_call 233} Tmp_311, Tmp_316, Tmp_318, Tmp_328, Tmp_330, i_2, Tmp_350, Tmp_351, Tmp_352, Tmp_358, Tmp_377 := FatSetFatRun_loop_L216(Tmp_311, Tmp_316, Tmp_318, Tmp_328, Tmp_330, i_2, Tmp_350, Tmp_351, Tmp_352, Tmp_358, SavedBcbs, Tmp_377);
    goto L216_last;

  L216_last:
    Tmp_358 := i_2;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume Tmp_358 <= 2;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume Tmp_358 != 2;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume Tmp_358 != 1;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume Tmp_358 != 0;
    goto L378;

  L378:
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    goto anon244_Then, anon244_Else;

  anon244_Else:
    Tmp_318 := i_2;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume Tmp_318 <= 2;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume Tmp_318 != 2;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume Tmp_318 != 1;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume Tmp_318 != 0;
    goto L388;

  L388:
    assume {:nonnull} Tmp_311 != 0;
    assume Tmp_311 > 0;
    goto anon245_Then, anon245_Else;

  anon245_Else:
    Tmp_351 := i_2;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume Tmp_351 <= 2;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume Tmp_351 != 2;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume Tmp_351 != 1;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume Tmp_351 != 0;
    goto L398;

  L398:
    assume {:nonnull} Tmp_377 != 0;
    assume Tmp_377 > 0;
    Tmp_352 := i_2;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume Tmp_352 <= 2;
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume Tmp_352 != 2;
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume Tmp_352 != 1;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume Tmp_352 != 0;
    goto L408;

  L408:
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    goto L219;

  L219:
    Tmp_328 := i_2;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume Tmp_328 <= 2;
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume Tmp_328 != 2;
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume Tmp_328 != 1;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume Tmp_328 != 0;
    goto L418;

  L418:
    assume {:nonnull} Tmp_330 != 0;
    assume Tmp_330 > 0;
    i_2 := i_2 + 1;
    goto L418_dummy;

  L418_dummy:
    assume false;
    return;

  anon288_Then:
    assume Tmp_328 == 0;
    Tmp_328 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_330;
    goto L418;

  anon287_Then:
    assume Tmp_328 == 1;
    Tmp_328 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_330;
    goto L418;

  anon286_Then:
    assume Tmp_328 == 2;
    Tmp_328 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_330;
    goto L418;

  anon285_Then:
    assume Tmp_328 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_330;
    goto L418;

  anon291_Then:
    assume Tmp_352 == 0;
    Tmp_352 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_350;
    goto L408;

  anon290_Then:
    assume Tmp_352 == 1;
    Tmp_352 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_350;
    goto L408;

  anon289_Then:
    assume Tmp_352 == 2;
    Tmp_352 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_350;
    goto L408;

  anon284_Then:
    assume Tmp_352 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_350;
    goto L408;

  anon294_Then:
    assume Tmp_351 == 0;
    Tmp_351 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_377;
    goto L398;

  anon293_Then:
    assume Tmp_351 == 1;
    Tmp_351 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_377;
    goto L398;

  anon292_Then:
    assume Tmp_351 == 2;
    Tmp_351 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_377;
    goto L398;

  anon283_Then:
    assume Tmp_351 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_377;
    goto L398;

  anon245_Then:
    goto L219;

  anon297_Then:
    assume Tmp_318 == 0;
    Tmp_318 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_311;
    goto L388;

  anon296_Then:
    assume Tmp_318 == 1;
    Tmp_318 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_311;
    goto L388;

  anon295_Then:
    assume Tmp_318 == 2;
    Tmp_318 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_311;
    goto L388;

  anon282_Then:
    assume Tmp_318 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_311;
    goto L388;

  anon244_Then:
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} 65536 < ClusterCount;
    StartingFatIndex := StartingFatIndex + 65536;
    ClusterCount := ClusterCount - 65536;
    goto anon233_Else_dummy;

  anon233_Else_dummy:
    assume false;
    return;

  anon233_Then:
    assume {:partition} ClusterCount <= 65536;
    goto L122;

  anon300_Then:
    assume Tmp_358 == 0;
    Tmp_358 := 0;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_316;
    goto L378;

  anon299_Then:
    assume Tmp_358 == 1;
    Tmp_358 := 1;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_316;
    goto L378;

  anon298_Then:
    assume Tmp_358 == 2;
    Tmp_358 := 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_316;
    goto L378;

  anon281_Then:
    assume Tmp_358 > 2;
    assume {:nonnull} SavedBcbs != 0;
    assume SavedBcbs > 0;
    havoc Tmp_316;
    goto L378;

  anon228_Then:
    assume {:partition} ClusterCount <= 65536;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} ChainTogether == 0;
    goto L215;

  anon232_Then:
    assume {:partition} ChainTogether != 0;
    assume {:nonnull} FatEntry_4 != 0;
    assume FatEntry_4 > 0;
    Mem_T.INT4[FatEntry_4] := 268435455;
    goto L215;

  anon268_Then:
    assume {:partition} 65536 >= ClusterCount;
    ClusterCountThisRun := ClusterCount;
    goto L165;

  anon213_Then:
    assume {:partition} ClusterCount == 0;
    goto L1;

  anon211_Then:
    assume {:partition} StartingFatIndex + ClusterCount - 1 >= 2;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    goto L30;

  anon212_Then:
    goto L26;

  anon209_Then:
    assume {:partition} StartingFatIndex >= 2;
    assume {:nonnull} Vcb_16 != 0;
    assume Vcb_16 > 0;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    goto L24;

  anon210_Then:
    goto L20;
}



procedure {:origName "FatLookupFatEntry"} FatLookupFatEntry(actual_IrpContext_22: int, actual_Vcb_17: int, actual_FatIndex_2: int, actual_FatEntry_5: int, actual_Context_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupFatEntry"} FatLookupFatEntry(actual_IrpContext_22: int, actual_Vcb_17: int, actual_FatIndex_2: int, actual_FatEntry_5: int, actual_Context_1: int)
{
  var {:pointer} Tmp_386: int;
  var {:scalar} Tmp_387: int;
  var {:scalar} Tmp_388: int;
  var {:scalar} OffsetIntoVolumeFile_1: int;
  var {:pointer} Tmp_389: int;
  var {:scalar} PageEntryOffset: int;
  var {:pointer} Tmp_390: int;
  var {:scalar} Tmp_391: int;
  var {:pointer} Tmp_393: int;
  var {:pointer} Tmp_394: int;
  var {:scalar} OffsetIntoVolumeFile_2: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} Tmp_396: int;
  var {:scalar} PageEntryOffset_1: int;
  var {:scalar} Tmp_397: int;
  var {:scalar} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:pointer} Tmp_401: int;
  var {:pointer} Tmp_402: int;
  var {:scalar} Tmp_403: int;
  var {:scalar} Tmp_404: int;
  var {:scalar} Tmp_405: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_407: int;
  var {:pointer} Tmp_408: int;
  var {:scalar} Tmp_409: int;
  var {:pointer} Tmp_410: int;
  var {:pointer} IrpContext_22: int;
  var {:pointer} Vcb_17: int;
  var {:scalar} FatIndex_2: int;
  var {:pointer} FatEntry_5: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 234} vslice_dummy_var_41 := __HAVOC_malloc(4);
    IrpContext_22 := actual_IrpContext_22;
    Vcb_17 := actual_Vcb_17;
    FatIndex_2 := actual_FatIndex_2;
    FatEntry_5 := actual_FatEntry_5;
    Context_1 := actual_Context_1;
    call {:si_unique_call 235} sdv_do_paged_code_check();
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} 2 > FatIndex_2;
    goto L8;

  L8:
    assume {:nonnull} IrpContext_22 != 0;
    assume IrpContext_22 > 0;
    call {:si_unique_call 236} ExRaiseStatus(-1073741566);
    goto L12;

  L12:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto L16;

  L16:
    Tmp_395 := FatEntry_5;
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    havoc Tmp_406;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} BAND(FatIndex_2, 1) != 0;
    call {:si_unique_call 237} Tmp_388 := corral_nondet();
    goto L20;

  L20:
    assume {:nonnull} FatEntry_5 != 0;
    assume FatEntry_5 > 0;
    Mem_T.INT4[FatEntry_5] := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), Tmp_388);
    goto L1;

  L1:
    return;

  anon36_Then:
    assume {:partition} BAND(FatIndex_2, 1) == 0;
    assume {:nonnull} FatEntry_5 != 0;
    assume FatEntry_5 > 0;
    Tmp_388 := Mem_T.INT4[FatEntry_5];
    goto L20;

  anon31_Then:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_402 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_393 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_399 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_393 != 0;
    assume Tmp_393 > 0;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    havoc Tmp_404;
    goto L24;

  L24:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_410 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_389 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_389 != 0;
    assume Tmp_389 > 0;
    assume {:nonnull} Tmp_410 != 0;
    assume Tmp_410 > 0;
    havoc Tmp_398;
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    call {:si_unique_call 238} FatReadVolumeFile(IrpContext_22, Vcb_17, Tmp_398, Tmp_404, Bcb__FAT_ENUMERATION_CONTEXT(Context_1), PinnedPage__FAT_ENUMERATION_CONTEXT(Context_1));
    goto L16;

  anon37_Then:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_407 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_386 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} Tmp_407 != 0;
    assume Tmp_407 > 0;
    havoc Tmp_404;
    goto L24;

  anon29_Then:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_394 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_401 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    havoc OffsetIntoVolumeFile_2;
    Tmp_387 := INTMOD(OffsetIntoVolumeFile_2, 4096);
    PageEntryOffset_1 := INTDIV(Tmp_387, 2);
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L54;

  L54:
    Tmp_391 := PageEntryOffset_1;
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    havoc Tmp_400;
    assume {:nonnull} FatEntry_5 != 0;
    assume FatEntry_5 > 0;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    Mem_T.INT4[FatEntry_5] := Mem_T.INT4[Tmp_400 + Tmp_391 * 4];
    goto L1;

  anon35_Then:
    goto L52;

  L52:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto L55;

  L55:
    Tmp_397 := BAND(OffsetIntoVolumeFile_2, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    call {:si_unique_call 239} FatReadVolumeFile(IrpContext_22, Vcb_17, Tmp_397, 4096, Bcb__FAT_ENUMERATION_CONTEXT(Context_1), PinnedPage__FAT_ENUMERATION_CONTEXT(Context_1));
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto L54;

  anon34_Then:
    goto L55;

  anon39_Then:
    goto L52;

  anon30_Then:
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_396 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    Tmp_408 := Bpb__VCB(Vcb_17);
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Tmp_408 != 0;
    assume Tmp_408 > 0;
    havoc OffsetIntoVolumeFile_1;
    Tmp_409 := INTMOD(OffsetIntoVolumeFile_1, 4096);
    PageEntryOffset := INTDIV(Tmp_409, 4);
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L37;

  L37:
    Tmp_403 := PageEntryOffset;
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    havoc Tmp_390;
    assume {:nonnull} FatEntry_5 != 0;
    assume FatEntry_5 > 0;
    assume {:nonnull} Tmp_390 != 0;
    assume Tmp_390 > 0;
    Mem_T.INT4[FatEntry_5] := BAND(Mem_T.INT4[Tmp_390 + Tmp_403 * 4], BNOT(BOR(BOR(BOR(268435456, 536870912), 1073741824), -2147483648)));
    goto L1;

  anon33_Then:
    goto L35;

  L35:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto L38;

  L38:
    Tmp_405 := BAND(OffsetIntoVolumeFile_1, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    call {:si_unique_call 240} FatReadVolumeFile(IrpContext_22, Vcb_17, Tmp_405, 4096, Bcb__FAT_ENUMERATION_CONTEXT(Context_1), PinnedPage__FAT_ENUMERATION_CONTEXT(Context_1));
    assume {:nonnull} Context_1 != 0;
    assume Context_1 > 0;
    goto L37;

  anon32_Then:
    goto L38;

  anon38_Then:
    goto L35;

  anon27_Then:
    assume {:partition} FatIndex_2 >= 2;
    assume {:nonnull} Vcb_17 != 0;
    assume Vcb_17 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L12;

  anon28_Then:
    goto L8;
}



procedure {:origName "FatDeallocateDiskSpace"} FatDeallocateDiskSpace(actual_IrpContext_23: int, actual_Vcb_18: int, actual_Mcb_1: int);
  modifies alloc, Mem_T.INT4, Mem_T.Flags__IRP_CONTEXT, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDeallocateDiskSpace"} FatDeallocateDiskSpace(actual_IrpContext_23: int, actual_Vcb_18: int, actual_Mcb_1: int)
{
  var {:scalar} count: int;
  var {:scalar} McbIndex: int;
  var {:dopa} {:scalar} Lbo_5: int;
  var {:dopa} {:scalar} Vbo_1: int;
  var {:pointer} Tmp_413: int;
  var {:pointer} Window: int;
  var {:scalar} RunsInMcb: int;
  var {:dopa} {:scalar} LocalLbo: int;
  var {:scalar} Clusters: int;
  var {:scalar} ClusterEnd: int;
  var {:scalar} FatIndex_3: int;
  var {:scalar} Tmp_414: int;
  var {:scalar} sdv_70: int;
  var {:scalar} Tmp_416: int;
  var {:pointer} Tmp_417: int;
  var {:scalar} MyLength: int;
  var {:scalar} MyStart: int;
  var {:scalar} PriorLastIndex: int;
  var {:scalar} ClusterIndex: int;
  var {:scalar} Index_1: int;
  var {:dopa} {:scalar} LocalVbo: int;
  var {:scalar} ClusterCount_1: int;
  var {:dopa} {:scalar} ByteCount_3: int;
  var {:pointer} IrpContext_23: int;
  var {:pointer} Vcb_18: int;
  var {:pointer} Mcb_1: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;

  anon0:
    call {:si_unique_call 241} vslice_dummy_var_42 := __HAVOC_malloc(4);
    call {:si_unique_call 242} Lbo_5 := __HAVOC_malloc(4);
    call {:si_unique_call 243} Vbo_1 := __HAVOC_malloc(4);
    call {:si_unique_call 244} LocalLbo := __HAVOC_malloc(4);
    call {:si_unique_call 245} LocalVbo := __HAVOC_malloc(4);
    call {:si_unique_call 246} ByteCount_3 := __HAVOC_malloc(4);
    IrpContext_23 := actual_IrpContext_23;
    Vcb_18 := actual_Vcb_18;
    Mcb_1 := actual_Mcb_1;
    ClusterCount_1 := 0;
    ClusterIndex := 0;
    call {:si_unique_call 247} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    call {:si_unique_call 248} RunsInMcb := corral_nondet();
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} RunsInMcb != 0;
    call {:si_unique_call 249} vslice_dummy_var_43 := ExAcquireResourceSharedLite(0, 1);
    call {:si_unique_call 250} RunsInMcb := corral_nondet();
    McbIndex := 0;
    goto L67;

  L67:
    call {:si_unique_call 251} McbIndex, ClusterIndex, ClusterCount_1, vslice_dummy_var_44 := FatDeallocateDiskSpace_loop_L67(McbIndex, Lbo_5, Vbo_1, RunsInMcb, ClusterIndex, ClusterCount_1, ByteCount_3, IrpContext_23, Vcb_18, Mcb_1, vslice_dummy_var_44);
    goto L67_last;

  L67_last:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} RunsInMcb > McbIndex;
    call {:si_unique_call 252} vslice_dummy_var_44 := FatGetNextMcbEntry(Vcb_18, Mcb_1, McbIndex, Vbo_1, Lbo_5, ByteCount_3);
    call {:si_unique_call 253} ClusterCount_1 := corral_nondet();
    call {:si_unique_call 254} ClusterIndex := corral_nondet();
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClusterCount_1 == 1;
    call {:si_unique_call 255} FatSetFatEntry#1(IrpContext_23, Vcb_18, ClusterIndex, 0);
    goto L83;

  L83:
    McbIndex := McbIndex + 1;
    goto L83_dummy;

  L83_dummy:
    assume false;
    return;

  anon59_Then:
    assume {:partition} ClusterCount_1 != 1;
    call {:si_unique_call 256} FatSetFatRun(IrpContext_23, Vcb_18, ClusterIndex, ClusterCount_1, 0);
    goto L83;

  anon44_Then:
    assume {:partition} McbIndex >= RunsInMcb;
    call {:si_unique_call 257} ExAcquireFastMutexUnsafe(0);
    McbIndex := 0;
    goto L85;

  L85:
    call {:si_unique_call 258} count, McbIndex, Tmp_413, Window, ClusterEnd, Tmp_414, Tmp_416, Tmp_417, MyLength, MyStart, ClusterIndex, ClusterCount_1, vslice_dummy_var_45 := FatDeallocateDiskSpace_loop_L85(count, McbIndex, Lbo_5, Vbo_1, Tmp_413, Window, RunsInMcb, ClusterEnd, Tmp_414, Tmp_416, Tmp_417, MyLength, MyStart, ClusterIndex, ClusterCount_1, ByteCount_3, Vcb_18, Mcb_1, vslice_dummy_var_45);
    goto L85_last;

  L85_last:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} RunsInMcb > McbIndex;
    call {:si_unique_call 259} vslice_dummy_var_45 := FatGetNextMcbEntry(Vcb_18, Mcb_1, McbIndex, Vbo_1, Lbo_5, ByteCount_3);
    call {:si_unique_call 260} ClusterCount_1 := corral_nondet();
    call {:si_unique_call 261} ClusterIndex := corral_nondet();
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    havoc Window;
    ClusterEnd := ClusterIndex + ClusterCount_1 - 1;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L102;

  L102:
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    Tmp_414 := INTDIV(ClusterIndex - 2, 65536);
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    havoc Tmp_417;
    Window := Tmp_417 + Tmp_414 * 12;
    goto L105;

  L105:
    MyStart := ClusterIndex;
    MyLength := ClusterCount_1;
    goto L107;

  L107:
    call {:si_unique_call 262} count, Tmp_416, MyLength, MyStart := FatDeallocateDiskSpace_loop_L107(count, Window, Tmp_416, MyLength, MyStart);
    goto L107_last;

  L107_last:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} MyLength > 0;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc Tmp_416;
    goto L112;

  L112:
    count := Tmp_416;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} MyLength != count;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyStart;
    goto L115;

  L115:
    MyLength := MyLength - count;
    goto L115_dummy;

  L115_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} MyLength == count;
    goto L115;

  anon49_Then:
    Tmp_416 := MyLength;
    goto L112;

  anon48_Then:
    assume {:partition} 0 >= MyLength;
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    Mem_T.INT4[NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(Vcb_18))] := Mem_T.INT4[NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(Vcb_18))] + ClusterCount_1;
    goto L118;

  L118:
    McbIndex := McbIndex + 1;
    goto L118_dummy;

  L118_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    havoc Tmp_413;
    Window := Tmp_413;
    goto L105;

  anon60_Then:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyStart;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyLength;
    goto L124;

  L124:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} MyLength != 0;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} Vcb_18 != 0;
    assume Vcb_18 > 0;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto L102;

  anon54_Then:
    goto L102;

  anon53_Then:
    assume {:partition} MyLength == 0;
    goto L118;

  anon52_Then:
    goto L120;

  L120:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyStart;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyLength;
    goto L124;

  anon51_Then:
    MyStart := ClusterIndex;
    assume {:nonnull} Window != 0;
    assume Window > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    MyLength := ClusterCount_1;
    goto L124;

  anon62_Then:
    assume {:nonnull} Window != 0;
    assume Window > 0;
    havoc MyLength;
    goto L124;

  anon50_Then:
    goto L120;

  anon46_Then:
    goto L102;

  anon45_Then:
    assume {:partition} McbIndex >= RunsInMcb;
    call {:si_unique_call 263} ExReleaseFastMutexUnsafe(0);
    call {:si_unique_call 264} ExReleaseResourceLite(0);
    call {:si_unique_call 265} sdv_70 := sdv_AbnormalTermination();
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_70 != 0;
    PriorLastIndex := 0;
    Index_1 := 0;
    goto L154;

  L154:
    call {:si_unique_call 266} Clusters, FatIndex_3, PriorLastIndex, Index_1, vslice_dummy_var_46 := FatDeallocateDiskSpace_loop_L154(McbIndex, LocalLbo, Clusters, FatIndex_3, PriorLastIndex, Index_1, LocalVbo, ByteCount_3, IrpContext_23, Vcb_18, Mcb_1, vslice_dummy_var_46);
    goto L154_last;

  L154_last:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} McbIndex >= Index_1;
    call {:si_unique_call 267} vslice_dummy_var_46 := FatGetNextMcbEntry(Vcb_18, Mcb_1, Index_1, LocalVbo, LocalLbo, ByteCount_3);
    call {:si_unique_call 268} FatIndex_3 := corral_nondet();
    call {:si_unique_call 269} Clusters := corral_nondet();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} PriorLastIndex != 0;
    call {:si_unique_call 270} FatSetFatEntry#1(IrpContext_23, Vcb_18, PriorLastIndex, FatIndex_3);
    goto L161;

  L161:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} McbIndex > Index_1;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} Clusters == 1;
    call {:si_unique_call 271} FatSetFatEntry#1(IrpContext_23, Vcb_18, FatIndex_3, 268435455);
    goto L173;

  L173:
    PriorLastIndex := FatIndex_3 + Clusters - 1;
    goto L165;

  L165:
    Index_1 := Index_1 + 1;
    goto L165_dummy;

  L165_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} Clusters != 1;
    call {:si_unique_call 272} FatSetFatRun(IrpContext_23, Vcb_18, FatIndex_3, Clusters, 1);
    goto L173;

  anon57_Then:
    assume {:partition} Index_1 >= McbIndex;
    goto L165;

  anon63_Then:
    assume {:partition} PriorLastIndex == 0;
    goto L161;

  anon56_Then:
    assume {:partition} Index_1 > McbIndex;
    goto L1;

  L1:
    return;

  anon55_Then:
    assume {:partition} sdv_70 == 0;
    goto L1;

  anon43_Then:
    assume {:partition} RunsInMcb == 0;
    goto L1;
}



procedure {:origName "_sdv_init29"} _sdv_init29();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init29"} _sdv_init29()
{
  var vslice_dummy_var_47: int;

  anon0:
    call {:si_unique_call 273} vslice_dummy_var_47 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_48: int;

  anon0:
    call {:si_unique_call 274} vslice_dummy_var_48 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeBugCheckEx"} {:osmodel} KeBugCheckEx(actual_BugCheckCode: int, actual_BugCheckParameter1: int, actual_BugCheckParameter2: int, actual_BugCheckParameter3: int, actual_BugCheckParameter4: int);
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeBugCheckEx"} {:osmodel} KeBugCheckEx(actual_BugCheckCode: int, actual_BugCheckParameter1: int, actual_BugCheckParameter2: int, actual_BugCheckParameter3: int, actual_BugCheckParameter4: int)
{
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 275} vslice_dummy_var_49 := __HAVOC_malloc(4);
    call {:si_unique_call 276} SdvExit#1();
    return;
}



procedure {:origName "ExReleaseResourceLite"} {:osmodel} ExReleaseResourceLite(actual_Resource_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExReleaseResourceLite"} {:osmodel} ExReleaseResourceLite(actual_Resource_1: int)
{
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 277} vslice_dummy_var_50 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_51: int;

  anon0:
    call {:si_unique_call 278} vslice_dummy_var_51 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_515: int);
  free ensures {:va_keep} Tmp_515 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_515: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_515 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_7448: int;

  anon0:
    call {:si_unique_call 279} vslice_dummy_var_52 := __HAVOC_malloc(4);
    p := actual_p;
    sdv_irql_current := 2;
    assume {:nonnull} p != 0;
    assume p > 0;
    havoc vslice_dummy_var_7448;
    Mem_T.INT4[p] := vslice_dummy_var_7448;
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_519: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_519 == 1 || Tmp_519 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_519: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 280} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_519 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_519 := 0;
    goto L1;
}



procedure {:origName "_sdv_init34"} {:osmodel} _sdv_init34();
  modifies alloc, sdv_irql_current, sdv_compFset;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init34"} {:osmodel} _sdv_init34()
{
  var vslice_dummy_var_53: int;

  anon0:
    call {:si_unique_call 281} vslice_dummy_var_53 := __HAVOC_malloc(4);
    assume sdv_dpc_io_registered == 0;
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    sdv_irql_current := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_remove_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    sdv_compFset := 0;
    assume sdv_isr_routine == li2bplFunctionConstant835;
    assume sdv_ke_dpc == li2bplFunctionConstant837;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant840;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_523: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_523: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_523 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_523 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_523 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion()
{
  var vslice_dummy_var_54: int;

  anon0:
    call {:si_unique_call 282} vslice_dummy_var_54 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "CcWaitForCurrentLazyWriterActivity"} {:osmodel} CcWaitForCurrentLazyWriterActivity() returns (Tmp_527: int);
  free ensures {:va_keep} Tmp_527 == -1073741670 || Tmp_527 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "CcWaitForCurrentLazyWriterActivity"} {:osmodel} CcWaitForCurrentLazyWriterActivity() returns (Tmp_527: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_527 := -1073741670;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_527 := 0;
    goto L1;
}



procedure {:origName "ExAcquireResourceExclusiveLite"} {:osmodel} ExAcquireResourceExclusiveLite(actual_Resource_2: int, actual_Wait_1: int) returns (Tmp_531: int);
  free ensures {:va_keep} Tmp_531 == 0 || Tmp_531 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExAcquireResourceExclusiveLite"} {:osmodel} ExAcquireResourceExclusiveLite(actual_Resource_2: int, actual_Wait_1: int) returns (Tmp_531: int)
{
  var {:scalar} Wait_1: int;

  anon0:
    Wait_1 := actual_Wait_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Wait_1 == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_531 := 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_531 := 1;
    goto L1;

  anon5_Then:
    assume {:partition} Wait_1 != 0;
    Tmp_531 := 1;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_2: int)
{
  var vslice_dummy_var_55: int;

  anon0:
    call {:si_unique_call 283} vslice_dummy_var_55 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExAcquireFastMutexUnsafe"} {:osmodel} ExAcquireFastMutexUnsafe(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExAcquireFastMutexUnsafe"} {:osmodel} ExAcquireFastMutexUnsafe(actual_FastMutex: int)
{
  var vslice_dummy_var_56: int;

  anon0:
    call {:si_unique_call 284} vslice_dummy_var_56 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_3: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_3: int)
{
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_57: int;

  anon0:
    call {:si_unique_call 285} vslice_dummy_var_57 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_3))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_3))] := -1073741637;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_1: int) returns (Tmp_539: int);
  free ensures {:va_keep} Tmp_539 == 1 || Tmp_539 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_1: int) returns (Tmp_539: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_539 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_539 := 0;
    goto L1;
}



procedure {:origName "FsRtlIsNameInExpression"} {:osmodel} FsRtlIsNameInExpression(actual_Expression_1: int, actual_Name_1: int, actual_IgnoreCase: int, actual_UpcaseTable: int) returns (Tmp_541: int);
  free ensures {:va_keep} Tmp_541 == 0 || Tmp_541 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FsRtlIsNameInExpression"} {:osmodel} FsRtlIsNameInExpression(actual_Expression_1: int, actual_Name_1: int, actual_IgnoreCase: int, actual_UpcaseTable: int) returns (Tmp_541: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_541 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_541 := 1;
    goto L1;
}



procedure {:origName "ExAcquireResourceSharedLite"} {:osmodel} ExAcquireResourceSharedLite(actual_Resource_3: int, actual_Wait_2: int) returns (Tmp_543: int);
  free ensures {:va_keep} Tmp_543 == 0 || Tmp_543 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExAcquireResourceSharedLite"} {:osmodel} ExAcquireResourceSharedLite(actual_Resource_3: int, actual_Wait_2: int) returns (Tmp_543: int)
{
  var {:scalar} Wait_2: int;

  anon0:
    Wait_2 := actual_Wait_2;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Wait_2 == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_543 := 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_543 := 1;
    goto L1;

  anon5_Then:
    assume {:partition} Wait_2 != 0;
    Tmp_543 := 1;
    goto L1;
}



procedure {:origName "sdv_ExInterlockedPushEntrySList"} {:osmodel} sdv_ExInterlockedPushEntrySList(actual_ListHead: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_545: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_ExInterlockedPushEntrySList"} {:osmodel} sdv_ExInterlockedPushEntrySList(actual_ListHead: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_545: int)
{
  var {:pointer} sdv_229: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_545 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 286} sdv_229 := __HAVOC_malloc(1);
    Tmp_545 := sdv_229;
    goto L1;
}



procedure {:origName "FsRtlAreNamesEqual"} {:osmodel} FsRtlAreNamesEqual(actual_ConstantNameA: int, actual_ConstantNameB: int, actual_IgnoreCase_1: int, actual_UpcaseTable_1: int) returns (Tmp_547: int);
  free ensures {:va_keep} Tmp_547 == 0 || Tmp_547 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FsRtlAreNamesEqual"} {:osmodel} FsRtlAreNamesEqual(actual_ConstantNameA: int, actual_ConstantNameB: int, actual_IgnoreCase_1: int, actual_UpcaseTable_1: int) returns (Tmp_547: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_547 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_547 := 1;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, sdv_irql_current, Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.PendingReturned__IRP, Mem_T.INT4, Mem_T.VcbState__VCB, Mem_T.Buffer__RTL_BITMAP, sdv_compFset, Mem_T.FcbState__FCB, s, yogi_error, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.RootDcb__VCB, t;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} status: int;
  var {:scalar} Tmp_551: int;
  var vslice_dummy_var_58: int;

  anon0:
    call {:si_unique_call 287} vslice_dummy_var_58 := __HAVOC_malloc(4);
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    call {:si_unique_call 288} sdv_stub_driver_init();
    call {:si_unique_call 289} status := sdv_RunRemoveDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status != 0;
    Tmp_551 := 0;
    goto L30;

  L30:
    assume Tmp_551 != 0;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} status == 0;
    Tmp_551 := 1;
    goto L30;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion()
{
  var vslice_dummy_var_59: int;

  anon0:
    call {:si_unique_call 290} vslice_dummy_var_59 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRaiseInformationalHardError"} {:osmodel} IoRaiseInformationalHardError(actual_ErrorStatus: int, actual_String_2: int, actual_Thread: int) returns (Tmp_554: int);
  free ensures {:va_keep} Tmp_554 == 0 || Tmp_554 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoRaiseInformationalHardError"} {:osmodel} IoRaiseInformationalHardError(actual_ErrorStatus: int, actual_String_2: int, actual_Thread: int) returns (Tmp_554: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_554 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_554 := 1;
    goto L1;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_556: int);
  free ensures {:va_keep} Tmp_556 == 1 || Tmp_556 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_556: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_556 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_556 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_4: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc, sdv_compFset;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_4: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_4: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_2: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 291} vslice_dummy_var_60 := __HAVOC_malloc(4);
    pirp_4 := actual_pirp_4;
    CompletionRoutine := actual_CompletionRoutine;
    Context_2 := actual_Context_2;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 292} irpSp := sdv_IoGetNextIrpStackLocation(pirp_4);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    sdv_compFset := 1;
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_560: int);
  free ensures {:va_keep} Tmp_560 == 1 || Tmp_560 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_560: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_560 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_560 := 0;
    goto L1;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_562: int);
  free ensures {:va_keep} Tmp_562 == 258 || Tmp_562 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_562: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_562 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_562 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_562 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject: int);
  modifies alloc, t;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject: int)
{
  var {:pointer} DeviceObject: int;
  var vslice_dummy_var_61: int;

  anon0:
    call {:si_unique_call 293} vslice_dummy_var_61 := __HAVOC_malloc(4);
    DeviceObject := actual_DeviceObject;
    call {:si_unique_call 294} SLIC_IoDeleteDevice_entry(0, DeviceObject);
    return;
}



procedure {:origName "IoAcquireVpbSpinLock"} {:osmodel} IoAcquireVpbSpinLock(actual_Irql: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoAcquireVpbSpinLock"} {:osmodel} IoAcquireVpbSpinLock(actual_Irql: int)
{
  var {:pointer} Irql: int;
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 295} vslice_dummy_var_62 := __HAVOC_malloc(4);
    Irql := actual_Irql;
    assume {:nonnull} Irql != 0;
    assume Irql > 0;
    Mem_T.INT4[Irql] := sdv_irql_current;
    return;
}



procedure {:origName "RtlOemStringToCountedUnicodeString"} {:osmodel} RtlOemStringToCountedUnicodeString(actual_DestinationString: int, actual_SourceString: int, actual_AllocateDestinationString: int) returns (Tmp_570: int);
  free ensures {:va_keep} Tmp_570 == -1073741675 || Tmp_570 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "RtlOemStringToCountedUnicodeString"} {:osmodel} RtlOemStringToCountedUnicodeString(actual_DestinationString: int, actual_SourceString: int, actual_AllocateDestinationString: int) returns (Tmp_570: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_570 := -1073741675;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_570 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_5: int) returns (Tmp_572: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_5: int) returns (Tmp_572: int)
{
  var {:pointer} pirp_5: int;

  anon0:
    pirp_5 := actual_pirp_5;
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Tmp_572 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_5)))];
    return;
}



procedure {:origName "ExDeleteResourceLite"} {:osmodel} ExDeleteResourceLite(actual_Resource_4: int) returns (Tmp_574: int);
  free ensures {:va_keep} Tmp_574 == 0 || Tmp_574 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExDeleteResourceLite"} {:osmodel} ExDeleteResourceLite(actual_Resource_4: int) returns (Tmp_574: int)
{
  var {:scalar} x_2: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} x_2 != 0;
    Tmp_574 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} x_2 == 0;
    Tmp_574 := -1073741823;
    goto L1;
}



procedure {:origName "FsRtlUninitializeFileLock"} {:osmodel} FsRtlUninitializeFileLock(actual_FileLock: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FsRtlUninitializeFileLock"} {:osmodel} FsRtlUninitializeFileLock(actual_FileLock: int)
{
  var vslice_dummy_var_63: int;

  anon0:
    call {:si_unique_call 296} vslice_dummy_var_63 := __HAVOC_malloc(4);
    return;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_578: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_compFset, Mem_T.CurrentStackLocation_unnamed_tag_7, t, s, yogi_error, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.PendingReturned__IRP, Mem_T.VcbState__VCB, Mem_T.Buffer__RTL_BITMAP, Mem_T.FcbState__FCB, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.RootDcb__VCB;
  free ensures {:va_keep} s == 1 || s == 0;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} t == 1 || t == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_578: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_579: int;
  var {:scalar} Tmp_580: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var FatNonPagedFcbLookasideList__Loc: int;
  var FatJanOne1980__Loc: int;
  var FatIrpContextLookasideList__Loc: int;
  var FatMaxLarge__Loc: int;
  var FatEResourceLookasideList__Loc: int;
  var FatData__Loc: int;
  var FatCloseContextSList__Loc: int;
  var FatLargeZero__Loc: int;
  var FatSecurityPrivilege__Loc: int;
  var FatTimeJanOne1980__Loc: int;
  var FatOneDay__Loc: int;
  var FatDecThirtyOne1979__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var FatFastIoDispatch__Loc: int;
  var FatReserveEvent__Loc: int;
  var FatCloseQueueMutex__Loc: int;
  var Fat30Milliseconds__Loc: int;
  var FatMagic86400000__Loc: int;
  var Fat100Milliseconds__Loc: int;
  var FatMagic10000__Loc: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;
  var vslice_dummy_var_416: int;
  var vslice_dummy_var_417: int;
  var vslice_dummy_var_418: int;
  var vslice_dummy_var_419: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_421: int;
  var vslice_dummy_var_422: int;
  var vslice_dummy_var_423: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_7449: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 297} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 298} FatNonPagedFcbLookasideList__Loc := __HAVOC_malloc_or_null(108);
    assume FatNonPagedFcbLookasideList__Loc == FatNonPagedFcbLookasideList;
    assume FatNonPagedFcbLookasideList != 0;
    call {:si_unique_call 299} FatJanOne1980__Loc := __HAVOC_malloc_or_null(20);
    assume FatJanOne1980__Loc == FatJanOne1980;
    assume FatJanOne1980 != 0;
    call {:si_unique_call 300} FatIrpContextLookasideList__Loc := __HAVOC_malloc_or_null(108);
    assume FatIrpContextLookasideList__Loc == FatIrpContextLookasideList;
    assume FatIrpContextLookasideList != 0;
    call {:si_unique_call 301} FatMaxLarge__Loc := __HAVOC_malloc_or_null(20);
    assume FatMaxLarge__Loc == FatMaxLarge;
    assume FatMaxLarge != 0;
    call {:si_unique_call 302} FatEResourceLookasideList__Loc := __HAVOC_malloc_or_null(108);
    assume FatEResourceLookasideList__Loc == FatEResourceLookasideList;
    assume FatEResourceLookasideList != 0;
    call {:si_unique_call 303} FatData__Loc := __HAVOC_malloc_or_null(204);
    assume FatData__Loc == FatData;
    assume FatData != 0;
    call {:si_unique_call 304} FatCloseContextSList__Loc := __HAVOC_malloc_or_null(16);
    assume FatCloseContextSList__Loc == FatCloseContextSList;
    assume FatCloseContextSList != 0;
    call {:si_unique_call 305} FatLargeZero__Loc := __HAVOC_malloc_or_null(20);
    assume FatLargeZero__Loc == FatLargeZero;
    assume FatLargeZero != 0;
    call {:si_unique_call 306} FatSecurityPrivilege__Loc := __HAVOC_malloc_or_null(8);
    assume FatSecurityPrivilege__Loc == FatSecurityPrivilege;
    assume FatSecurityPrivilege != 0;
    call {:si_unique_call 307} FatTimeJanOne1980__Loc := __HAVOC_malloc_or_null(24);
    assume FatTimeJanOne1980__Loc == FatTimeJanOne1980;
    assume FatTimeJanOne1980 != 0;
    call {:si_unique_call 308} FatOneDay__Loc := __HAVOC_malloc_or_null(20);
    assume FatOneDay__Loc == FatOneDay;
    assume FatOneDay != 0;
    call {:si_unique_call 309} FatDecThirtyOne1979__Loc := __HAVOC_malloc_or_null(20);
    assume FatDecThirtyOne1979__Loc == FatDecThirtyOne1979;
    assume FatDecThirtyOne1979 != 0;
    call {:si_unique_call 310} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 311} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 312} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 313} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 314} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 315} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 316} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 317} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 318} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 319} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 320} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 321} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 322} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 323} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 324} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 325} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 326} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 327} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 328} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 329} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 330} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 331} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 332} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 333} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 334} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 335} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 336} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 337} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 338} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 339} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 340} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 341} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 342} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 343} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 344} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 345} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 346} FatFastIoDispatch__Loc := __HAVOC_malloc_or_null(112);
    assume FatFastIoDispatch__Loc == FatFastIoDispatch;
    assume FatFastIoDispatch != 0;
    call {:si_unique_call 347} FatReserveEvent__Loc := __HAVOC_malloc_or_null(124);
    assume FatReserveEvent__Loc == FatReserveEvent;
    assume FatReserveEvent != 0;
    call {:si_unique_call 348} FatCloseQueueMutex__Loc := __HAVOC_malloc_or_null(140);
    assume FatCloseQueueMutex__Loc == FatCloseQueueMutex;
    assume FatCloseQueueMutex != 0;
    call {:si_unique_call 349} Fat30Milliseconds__Loc := __HAVOC_malloc_or_null(20);
    assume Fat30Milliseconds__Loc == Fat30Milliseconds;
    assume Fat30Milliseconds != 0;
    call {:si_unique_call 350} FatMagic86400000__Loc := __HAVOC_malloc_or_null(20);
    assume FatMagic86400000__Loc == FatMagic86400000;
    assume FatMagic86400000 != 0;
    call {:si_unique_call 351} Fat100Milliseconds__Loc := __HAVOC_malloc_or_null(20);
    assume Fat100Milliseconds__Loc == Fat100Milliseconds;
    assume Fat100Milliseconds != 0;
    call {:si_unique_call 352} FatMagic10000__Loc := __HAVOC_malloc_or_null(20);
    assume FatMagic10000__Loc == FatMagic10000;
    assume FatMagic10000 != 0;
    call {:si_unique_call 353} boogieTmp := __HAVOC_malloc_or_null(4);
    assume NlsMbOemCodePageTag == boogieTmp;
    call {:si_unique_call 354} boogieTmp := __HAVOC_malloc_or_null(4);
    assume FsRtlLegalAnsiCharacterArray == boogieTmp;
    call {:si_unique_call 355} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 356} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 357} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pDpcContext == boogieTmp;
    call {:si_unique_call 358} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 359} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 360} boogieTmp := __HAVOC_malloc_or_null(248);
    assume sicrni == boogieTmp;
    call {:si_unique_call 361} boogieTmp := __HAVOC_malloc_or_null(320);
    assume FatDiskFileSystemDeviceObject == boogieTmp;
    call {:si_unique_call 362} boogieTmp := __HAVOC_malloc_or_null(320);
    assume FatCdromFileSystemDeviceObject == boogieTmp;
    call {:si_unique_call 363} boogieTmp := __HAVOC_malloc_or_null(4);
    assume IoFileObjectType == boogieTmp;
    call {:si_unique_call 364} boogieTmp := __HAVOC_malloc_or_null(4);
    assume NlsOemLeadByteInfo == boogieTmp;
    call {:si_unique_call 365} boogieTmp := __HAVOC_malloc_or_null(396);
    assume SeExports == boogieTmp;
    call {:si_unique_call 366} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 367} vslice_dummy_var_287 := __HAVOC_malloc(4);
    call {:si_unique_call 368} vslice_dummy_var_288 := __HAVOC_malloc(4);
    call {:si_unique_call 369} vslice_dummy_var_289 := __HAVOC_malloc(4);
    call {:si_unique_call 370} vslice_dummy_var_290 := __HAVOC_malloc(4);
    call {:si_unique_call 371} vslice_dummy_var_291 := __HAVOC_malloc(4);
    call {:si_unique_call 372} vslice_dummy_var_292 := __HAVOC_malloc(4);
    call {:si_unique_call 373} vslice_dummy_var_293 := __HAVOC_malloc(4);
    call {:si_unique_call 374} vslice_dummy_var_294 := __HAVOC_malloc(4);
    call {:si_unique_call 375} vslice_dummy_var_295 := __HAVOC_malloc(4);
    call {:si_unique_call 376} vslice_dummy_var_296 := __HAVOC_malloc(4);
    call {:si_unique_call 377} vslice_dummy_var_297 := __HAVOC_malloc(4);
    call {:si_unique_call 378} vslice_dummy_var_298 := __HAVOC_malloc(4);
    call {:si_unique_call 379} vslice_dummy_var_299 := __HAVOC_malloc(4);
    call {:si_unique_call 380} vslice_dummy_var_300 := __HAVOC_malloc(4);
    call {:si_unique_call 381} vslice_dummy_var_301 := __HAVOC_malloc(4);
    call {:si_unique_call 382} vslice_dummy_var_302 := __HAVOC_malloc(4);
    call {:si_unique_call 383} vslice_dummy_var_303 := __HAVOC_malloc(4);
    call {:si_unique_call 384} vslice_dummy_var_304 := __HAVOC_malloc(4);
    call {:si_unique_call 385} vslice_dummy_var_305 := __HAVOC_malloc(4);
    call {:si_unique_call 386} vslice_dummy_var_306 := __HAVOC_malloc(4);
    call {:si_unique_call 387} vslice_dummy_var_307 := __HAVOC_malloc(4);
    call {:si_unique_call 388} vslice_dummy_var_308 := __HAVOC_malloc(4);
    call {:si_unique_call 389} vslice_dummy_var_309 := __HAVOC_malloc(4);
    call {:si_unique_call 390} vslice_dummy_var_310 := __HAVOC_malloc(4);
    call {:si_unique_call 391} vslice_dummy_var_311 := __HAVOC_malloc(4);
    call {:si_unique_call 392} vslice_dummy_var_312 := __HAVOC_malloc(4);
    call {:si_unique_call 393} vslice_dummy_var_313 := __HAVOC_malloc(4);
    call {:si_unique_call 394} vslice_dummy_var_314 := __HAVOC_malloc(4);
    call {:si_unique_call 395} vslice_dummy_var_315 := __HAVOC_malloc(4);
    call {:si_unique_call 396} vslice_dummy_var_316 := __HAVOC_malloc(4);
    call {:si_unique_call 397} vslice_dummy_var_317 := __HAVOC_malloc(4);
    call {:si_unique_call 398} vslice_dummy_var_318 := __HAVOC_malloc(4);
    call {:si_unique_call 399} vslice_dummy_var_319 := __HAVOC_malloc(4);
    call {:si_unique_call 400} vslice_dummy_var_320 := __HAVOC_malloc(4);
    call {:si_unique_call 401} vslice_dummy_var_321 := __HAVOC_malloc(4);
    call {:si_unique_call 402} vslice_dummy_var_322 := __HAVOC_malloc(4);
    call {:si_unique_call 403} vslice_dummy_var_323 := __HAVOC_malloc(4);
    call {:si_unique_call 404} vslice_dummy_var_324 := __HAVOC_malloc(4);
    call {:si_unique_call 405} vslice_dummy_var_325 := __HAVOC_malloc(4);
    call {:si_unique_call 406} vslice_dummy_var_326 := __HAVOC_malloc(4);
    call {:si_unique_call 407} vslice_dummy_var_327 := __HAVOC_malloc(4);
    call {:si_unique_call 408} vslice_dummy_var_328 := __HAVOC_malloc(4);
    call {:si_unique_call 409} vslice_dummy_var_329 := __HAVOC_malloc(4);
    call {:si_unique_call 410} vslice_dummy_var_330 := __HAVOC_malloc(4);
    call {:si_unique_call 411} vslice_dummy_var_331 := __HAVOC_malloc(4);
    call {:si_unique_call 412} vslice_dummy_var_332 := __HAVOC_malloc(4);
    call {:si_unique_call 413} vslice_dummy_var_333 := __HAVOC_malloc(4);
    call {:si_unique_call 414} vslice_dummy_var_334 := __HAVOC_malloc(4);
    call {:si_unique_call 415} vslice_dummy_var_335 := __HAVOC_malloc(4);
    call {:si_unique_call 416} vslice_dummy_var_336 := __HAVOC_malloc(4);
    call {:si_unique_call 417} vslice_dummy_var_337 := __HAVOC_malloc(4);
    call {:si_unique_call 418} vslice_dummy_var_338 := __HAVOC_malloc(4);
    call {:si_unique_call 419} vslice_dummy_var_339 := __HAVOC_malloc(4);
    call {:si_unique_call 420} vslice_dummy_var_340 := __HAVOC_malloc(4);
    call {:si_unique_call 421} vslice_dummy_var_341 := __HAVOC_malloc(4);
    call {:si_unique_call 422} vslice_dummy_var_342 := __HAVOC_malloc(4);
    call {:si_unique_call 423} vslice_dummy_var_343 := __HAVOC_malloc(4);
    call {:si_unique_call 424} vslice_dummy_var_344 := __HAVOC_malloc(4);
    call {:si_unique_call 425} vslice_dummy_var_345 := __HAVOC_malloc(4);
    call {:si_unique_call 426} vslice_dummy_var_346 := __HAVOC_malloc(4);
    call {:si_unique_call 427} vslice_dummy_var_347 := __HAVOC_malloc(4);
    call {:si_unique_call 428} vslice_dummy_var_348 := __HAVOC_malloc(4);
    call {:si_unique_call 429} vslice_dummy_var_349 := __HAVOC_malloc(4);
    call {:si_unique_call 430} vslice_dummy_var_350 := __HAVOC_malloc(4);
    call {:si_unique_call 431} vslice_dummy_var_351 := __HAVOC_malloc(4);
    call {:si_unique_call 432} vslice_dummy_var_352 := __HAVOC_malloc(4);
    call {:si_unique_call 433} vslice_dummy_var_353 := __HAVOC_malloc(4);
    call {:si_unique_call 434} vslice_dummy_var_354 := __HAVOC_malloc(4);
    call {:si_unique_call 435} vslice_dummy_var_355 := __HAVOC_malloc(4);
    call {:si_unique_call 436} vslice_dummy_var_356 := __HAVOC_malloc(4);
    call {:si_unique_call 437} vslice_dummy_var_357 := __HAVOC_malloc(4);
    call {:si_unique_call 438} vslice_dummy_var_358 := __HAVOC_malloc(4);
    call {:si_unique_call 439} vslice_dummy_var_359 := __HAVOC_malloc(4);
    call {:si_unique_call 440} vslice_dummy_var_360 := __HAVOC_malloc(4);
    call {:si_unique_call 441} vslice_dummy_var_361 := __HAVOC_malloc(4);
    call {:si_unique_call 442} vslice_dummy_var_362 := __HAVOC_malloc(4);
    call {:si_unique_call 443} vslice_dummy_var_363 := __HAVOC_malloc(4);
    call {:si_unique_call 444} vslice_dummy_var_364 := __HAVOC_malloc(4);
    call {:si_unique_call 445} vslice_dummy_var_365 := __HAVOC_malloc(4);
    call {:si_unique_call 446} vslice_dummy_var_366 := __HAVOC_malloc(4);
    call {:si_unique_call 447} vslice_dummy_var_367 := __HAVOC_malloc(4);
    call {:si_unique_call 448} vslice_dummy_var_368 := __HAVOC_malloc(4);
    call {:si_unique_call 449} vslice_dummy_var_369 := __HAVOC_malloc(4);
    call {:si_unique_call 450} vslice_dummy_var_370 := __HAVOC_malloc(4);
    call {:si_unique_call 451} vslice_dummy_var_371 := __HAVOC_malloc(4);
    call {:si_unique_call 452} vslice_dummy_var_372 := __HAVOC_malloc(4);
    call {:si_unique_call 453} vslice_dummy_var_373 := __HAVOC_malloc(4);
    call {:si_unique_call 454} vslice_dummy_var_374 := __HAVOC_malloc(4);
    call {:si_unique_call 455} vslice_dummy_var_375 := __HAVOC_malloc(4);
    call {:si_unique_call 456} vslice_dummy_var_376 := __HAVOC_malloc(4);
    call {:si_unique_call 457} vslice_dummy_var_377 := __HAVOC_malloc(4);
    call {:si_unique_call 458} vslice_dummy_var_378 := __HAVOC_malloc(4);
    call {:si_unique_call 459} vslice_dummy_var_379 := __HAVOC_malloc(4);
    call {:si_unique_call 460} vslice_dummy_var_380 := __HAVOC_malloc(4);
    call {:si_unique_call 461} vslice_dummy_var_381 := __HAVOC_malloc(4);
    call {:si_unique_call 462} vslice_dummy_var_382 := __HAVOC_malloc(4);
    call {:si_unique_call 463} vslice_dummy_var_383 := __HAVOC_malloc(4);
    call {:si_unique_call 464} vslice_dummy_var_384 := __HAVOC_malloc(4);
    call {:si_unique_call 465} vslice_dummy_var_385 := __HAVOC_malloc(4);
    call {:si_unique_call 466} vslice_dummy_var_386 := __HAVOC_malloc(4);
    call {:si_unique_call 467} vslice_dummy_var_387 := __HAVOC_malloc(4);
    call {:si_unique_call 468} vslice_dummy_var_388 := __HAVOC_malloc(4);
    call {:si_unique_call 469} vslice_dummy_var_389 := __HAVOC_malloc(4);
    call {:si_unique_call 470} vslice_dummy_var_390 := __HAVOC_malloc(4);
    call {:si_unique_call 471} vslice_dummy_var_391 := __HAVOC_malloc(4);
    call {:si_unique_call 472} vslice_dummy_var_392 := __HAVOC_malloc(4);
    call {:si_unique_call 473} vslice_dummy_var_393 := __HAVOC_malloc(4);
    call {:si_unique_call 474} vslice_dummy_var_394 := __HAVOC_malloc(4);
    call {:si_unique_call 475} vslice_dummy_var_395 := __HAVOC_malloc(4);
    call {:si_unique_call 476} vslice_dummy_var_396 := __HAVOC_malloc(4);
    call {:si_unique_call 477} vslice_dummy_var_397 := __HAVOC_malloc(4);
    call {:si_unique_call 478} vslice_dummy_var_398 := __HAVOC_malloc(4);
    call {:si_unique_call 479} vslice_dummy_var_399 := __HAVOC_malloc(4);
    call {:si_unique_call 480} vslice_dummy_var_400 := __HAVOC_malloc(4);
    call {:si_unique_call 481} vslice_dummy_var_401 := __HAVOC_malloc(4);
    call {:si_unique_call 482} vslice_dummy_var_402 := __HAVOC_malloc(4);
    call {:si_unique_call 483} vslice_dummy_var_403 := __HAVOC_malloc(4);
    call {:si_unique_call 484} vslice_dummy_var_404 := __HAVOC_malloc(4);
    call {:si_unique_call 485} vslice_dummy_var_405 := __HAVOC_malloc(4);
    call {:si_unique_call 486} vslice_dummy_var_406 := __HAVOC_malloc(4);
    call {:si_unique_call 487} vslice_dummy_var_407 := __HAVOC_malloc(4);
    call {:si_unique_call 488} vslice_dummy_var_408 := __HAVOC_malloc(4);
    call {:si_unique_call 489} vslice_dummy_var_409 := __HAVOC_malloc(4);
    call {:si_unique_call 490} vslice_dummy_var_410 := __HAVOC_malloc(4);
    call {:si_unique_call 491} vslice_dummy_var_411 := __HAVOC_malloc(4);
    call {:si_unique_call 492} vslice_dummy_var_412 := __HAVOC_malloc(4);
    call {:si_unique_call 493} vslice_dummy_var_413 := __HAVOC_malloc(4);
    call {:si_unique_call 494} vslice_dummy_var_414 := __HAVOC_malloc(4);
    call {:si_unique_call 495} vslice_dummy_var_415 := __HAVOC_malloc(4);
    call {:si_unique_call 496} vslice_dummy_var_416 := __HAVOC_malloc(4);
    call {:si_unique_call 497} vslice_dummy_var_417 := __HAVOC_malloc(4);
    call {:si_unique_call 498} vslice_dummy_var_418 := __HAVOC_malloc(4);
    call {:si_unique_call 499} vslice_dummy_var_419 := __HAVOC_malloc(4);
    call {:si_unique_call 500} vslice_dummy_var_420 := __HAVOC_malloc(4);
    call {:si_unique_call 501} vslice_dummy_var_421 := __HAVOC_malloc(4);
    call {:si_unique_call 502} vslice_dummy_var_422 := __HAVOC_malloc(4);
    call {:si_unique_call 503} vslice_dummy_var_423 := __HAVOC_malloc(4);
    call {:si_unique_call 504} vslice_dummy_var_424 := __HAVOC_malloc(4);
    call {:si_unique_call 505} vslice_dummy_var_425 := __HAVOC_malloc(4);
    call {:si_unique_call 506} vslice_dummy_var_426 := __HAVOC_malloc(4);
    call {:si_unique_call 507} vslice_dummy_var_427 := __HAVOC_malloc(4);
    call {:si_unique_call 508} vslice_dummy_var_428 := __HAVOC_malloc(4);
    call {:si_unique_call 509} vslice_dummy_var_429 := __HAVOC_malloc(4);
    call {:si_unique_call 510} vslice_dummy_var_430 := __HAVOC_malloc(4);
    call {:si_unique_call 511} vslice_dummy_var_431 := __HAVOC_malloc(4);
    call {:si_unique_call 512} vslice_dummy_var_432 := __HAVOC_malloc(4);
    call {:si_unique_call 513} vslice_dummy_var_433 := __HAVOC_malloc(4);
    call {:si_unique_call 514} vslice_dummy_var_434 := __HAVOC_malloc(4);
    call {:si_unique_call 515} vslice_dummy_var_435 := __HAVOC_malloc(4);
    call {:si_unique_call 516} vslice_dummy_var_436 := __HAVOC_malloc(4);
    call {:si_unique_call 517} vslice_dummy_var_437 := __HAVOC_malloc(4);
    call {:si_unique_call 518} vslice_dummy_var_438 := __HAVOC_malloc(4);
    call {:si_unique_call 519} vslice_dummy_var_439 := __HAVOC_malloc(4);
    call {:si_unique_call 520} vslice_dummy_var_440 := __HAVOC_malloc(4);
    call {:si_unique_call 521} vslice_dummy_var_441 := __HAVOC_malloc(4);
    call {:si_unique_call 522} vslice_dummy_var_7449 := __HAVOC_malloc(48);
    call {:si_unique_call 523} vslice_dummy_var_442 := __HAVOC_malloc(4);
    call {:si_unique_call 524} vslice_dummy_var_443 := __HAVOC_malloc(4);
    call {:si_unique_call 525} vslice_dummy_var_444 := __HAVOC_malloc(4);
    call {:si_unique_call 526} vslice_dummy_var_445 := __HAVOC_malloc(4);
    call {:si_unique_call 527} vslice_dummy_var_446 := __HAVOC_malloc(4);
    call {:si_unique_call 528} vslice_dummy_var_447 := __HAVOC_malloc(4);
    call {:si_unique_call 529} vslice_dummy_var_448 := __HAVOC_malloc(4);
    call {:si_unique_call 530} vslice_dummy_var_449 := __HAVOC_malloc(4);
    call {:si_unique_call 531} vslice_dummy_var_450 := __HAVOC_malloc(4);
    call {:si_unique_call 532} vslice_dummy_var_451 := __HAVOC_malloc(4);
    call {:si_unique_call 533} vslice_dummy_var_452 := __HAVOC_malloc(4);
    call {:si_unique_call 534} vslice_dummy_var_453 := __HAVOC_malloc(4);
    call {:si_unique_call 535} vslice_dummy_var_454 := __HAVOC_malloc(4);
    call {:si_unique_call 536} vslice_dummy_var_455 := __HAVOC_malloc(4);
    call {:si_unique_call 537} vslice_dummy_var_456 := __HAVOC_malloc(4);
    assume {:mainInitDone} true;
    call {:si_unique_call 538} corralExtraInit();
    call {:si_unique_call 539} corralExplainErrorInit();
    call {:si_unique_call 540} _sdv_init36();
    call {:si_unique_call 541} _sdv_init22();
    call {:si_unique_call 542} _sdv_init18();
    call {:si_unique_call 543} _sdv_init19();
    call {:si_unique_call 544} _sdv_init32();
    call {:si_unique_call 545} _sdv_init17();
    call {:si_unique_call 546} _sdv_init1();
    call {:si_unique_call 547} _sdv_init28();
    call {:si_unique_call 548} _sdv_init23();
    call {:si_unique_call 549} _sdv_init25();
    call {:si_unique_call 550} _sdv_init4();
    call {:si_unique_call 551} _sdv_init5();
    call {:si_unique_call 552} _sdv_init3();
    call {:si_unique_call 553} _sdv_init30();
    call {:si_unique_call 554} _sdv_init16();
    call {:si_unique_call 555} _sdv_init24();
    call {:si_unique_call 556} _sdv_init14();
    call {:si_unique_call 557} _sdv_init21();
    call {:si_unique_call 558} _sdv_init33();
    call {:si_unique_call 559} _sdv_init6();
    call {:si_unique_call 560} _sdv_init15();
    call {:si_unique_call 561} _sdv_init27();
    call {:si_unique_call 562} _sdv_init10();
    call {:si_unique_call 563} _sdv_init26();
    call {:si_unique_call 564} _sdv_init11();
    call {:si_unique_call 565} _sdv_init9();
    call {:si_unique_call 566} _sdv_init31();
    call {:si_unique_call 567} _sdv_init12();
    call {:si_unique_call 568} _sdv_init13();
    call {:si_unique_call 569} _sdv_init7();
    call {:si_unique_call 570} _sdv_init34();
    call {:si_unique_call 571} _sdv_init8();
    call {:si_unique_call 572} _sdv_init29();
    call {:si_unique_call 573} _sdv_init2();
    call {:si_unique_call 574} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_580 := 0;
    goto L59;

  L59:
    assume Tmp_580 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_579 := 0;
    goto L63;

  L63:
    assume Tmp_579 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_irp)))] := sdv_harnessStackLocation;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_other_irp)))] := sdv_other_harnessStackLocation;
    call {:si_unique_call 575} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L57;

  L57:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L57;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_579 := 1;
    goto L63;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_580 := 1;
    goto L59;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_6: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_6: int)
{
  var {:pointer} pirp_6: int;
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 576} vslice_dummy_var_64 := __HAVOC_malloc(4);
    pirp_6 := actual_pirp_6;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_6 == sdv_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_6 == sdv_other_harnessIrp;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_6 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_6 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_584: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_584: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_584 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_7: int) returns (Tmp_586: int);
  modifies Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.MinorFunction__IO_STACK_LOCATION, alloc, Mem_T.Status__IO_STATUS_BLOCK, sdv_irql_current, Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.PendingReturned__IRP, Mem_T.INT4, Mem_T.VcbState__VCB, Mem_T.Buffer__RTL_BITMAP, sdv_compFset, Mem_T.FcbState__FCB, s, yogi_error, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.RootDcb__VCB, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 0;
  free ensures {:va_keep} old(t) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_7: int) returns (Tmp_586: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_1: int;
  var {:pointer} po: int;
  var {:pointer} pirp_7: int;

  anon0:
    po := actual_po;
    pirp_7 := actual_pirp_7;
    status_1 := 0;
    assume {:nonnull} pirp_7 != 0;
    assume pirp_7 > 0;
    ps := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_7)))];
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 27;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(ps)] := 2;
    assume {:nonnull} pirp_7 != 0;
    assume pirp_7 > 0;
    assume {:nonnull} pirp_7 != 0;
    assume pirp_7 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 577} sdv_stub_dispatch_begin();
    call {:si_unique_call 578} sdv_SetStatus(pirp_7);
    call {:si_unique_call 579} status_1 := FatFsdPnp(po, pirp_7);
    call {:si_unique_call 580} sdv_stub_dispatch_end(status_1, 0);
    Tmp_586 := status_1;
    call {:si_unique_call 581} SLIC_sdv_RunRemoveDevice_exit(strConst__li2bpl1, pirp_7);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_KeGetCurrentThread"} {:osmodel} sdv_KeGetCurrentThread() returns (Tmp_588: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_KeGetCurrentThread"} {:osmodel} sdv_KeGetCurrentThread() returns (Tmp_588: int)
{
  var {:pointer} sdv_241: int;

  anon0:
    call {:si_unique_call 582} sdv_241 := __HAVOC_malloc(4);
    Tmp_588 := sdv_241;
    return;
}



procedure {:origName "IoGetStackLimits"} {:osmodel} IoGetStackLimits(actual_LowLimit: int, actual_HighLimit: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoGetStackLimits"} {:osmodel} IoGetStackLimits(actual_LowLimit: int, actual_HighLimit: int)
{
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 583} vslice_dummy_var_65 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length: int)
{
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 584} vslice_dummy_var_66 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlUpcaseUnicodeString"} {:osmodel} RtlUpcaseUnicodeString(actual_DestinationString_1: int, actual_SourceString_1: int, actual_AllocateDestinationString_1: int) returns (Tmp_594: int);
  free ensures {:va_keep} Tmp_594 == -1073741675 || Tmp_594 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "RtlUpcaseUnicodeString"} {:osmodel} RtlUpcaseUnicodeString(actual_DestinationString_1: int, actual_SourceString_1: int, actual_AllocateDestinationString_1: int) returns (Tmp_594: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_594 := -1073741675;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_594 := 0;
    goto L1;
}



procedure {:origName "ExReleaseFastMutexUnsafe"} {:osmodel} ExReleaseFastMutexUnsafe(actual_FastMutex_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExReleaseFastMutexUnsafe"} {:osmodel} ExReleaseFastMutexUnsafe(actual_FastMutex_1: int)
{
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 585} vslice_dummy_var_67 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl: int)
{
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 586} vslice_dummy_var_68 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 587} vslice_dummy_var_69 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_AbnormalTermination"} {:osmodel} sdv_AbnormalTermination() returns (Tmp_602: int);
  free ensures {:va_keep} Tmp_602 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_AbnormalTermination"} {:osmodel} sdv_AbnormalTermination() returns (Tmp_602: int)
{

  anon0:
    Tmp_602 := 0;
    return;
}



procedure {:origName "ExRaiseStatus"} {:osmodel} ExRaiseStatus(actual_Status: int);
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExRaiseStatus"} {:osmodel} ExRaiseStatus(actual_Status: int)
{
  var vslice_dummy_var_70: int;

  anon0:
    call {:si_unique_call 588} vslice_dummy_var_70 := __HAVOC_malloc(4);
    call {:si_unique_call 589} SdvExit#1();
    return;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 590} vslice_dummy_var_71 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new: int);
  modifies alloc, sdv_irql_current;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new: int)
{
  var {:scalar} new: int;
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 591} vslice_dummy_var_72 := __HAVOC_malloc(4);
    new := actual_new;
    sdv_irql_current := new;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_8: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_8: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 592} vslice_dummy_var_73 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source: int, actual_Length_1: int)
{
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 593} vslice_dummy_var_74 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 594} vslice_dummy_var_75 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExGetSharedWaiterCount"} {:osmodel} ExGetSharedWaiterCount(actual_Resource_5: int) returns (Tmp_616: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExGetSharedWaiterCount"} {:osmodel} ExGetSharedWaiterCount(actual_Resource_5: int) returns (Tmp_616: int)
{
  var {:scalar} sdv_243: int;

  anon0:
    Tmp_616 := sdv_243;
    return;
}



procedure {:origName "IoSetHardErrorOrVerifyDevice"} {:osmodel} IoSetHardErrorOrVerifyDevice(actual_Irp_1: int, actual_DeviceObject_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoSetHardErrorOrVerifyDevice"} {:osmodel} IoSetHardErrorOrVerifyDevice(actual_Irp_1: int, actual_DeviceObject_1: int)
{
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 595} vslice_dummy_var_76 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_622: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_622: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_622 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_1: int) returns (Tmp_624: int);
  free ensures {:va_keep} Tmp_624 == 1 || Tmp_624 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_1: int) returns (Tmp_624: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_624 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_624 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_626: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP;
  free ensures {:va_keep} Tmp_626 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_626: int)
{
  var {:scalar} status_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;

  anon0:
    Irp_2 := actual_Irp_2;
    status_2 := 259;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := 259;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(Irp_2)] := 1;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L19;

  L19:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L23;

  L23:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  L29:
    Tmp_626 := status_2;
    return;

  anon47_Then:
    assume {:partition} sdv_compFset != 0;
    call {:si_unique_call 596} vslice_dummy_var_77 := sdv_RunIoCompletionRoutines(0, Irp_2, 0, 0);
    goto L29;

  anon46_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L23;

  anon45_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L19;

  anon60_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := -1073741823;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(Irp_2)] := 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L58;

  L58:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L62;

  L62:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_compFset != 0;
    call {:si_unique_call 597} vslice_dummy_var_80 := sdv_RunIoCompletionRoutines(0, Irp_2, 0, 0);
    goto L29;

  anon59_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L62;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L58;

  anon61_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := -1073741536;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(Irp_2)] := 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L32;

  L32:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L36;

  L36:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_compFset != 0;
    call {:si_unique_call 598} vslice_dummy_var_78 := sdv_RunIoCompletionRoutines(0, Irp_2, 0, 0);
    goto L29;

  anon51_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon50_Then:
    goto L29;

  anon49_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L36;

  anon48_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L32;

  anon62_Then:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(Irp_2)] := 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L45;

  L45:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_2;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_2;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L49;

  L49:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_compFset != 0;
    call {:si_unique_call 599} vslice_dummy_var_79 := sdv_RunIoCompletionRoutines(0, Irp_2, 0, 0);
    goto L29;

  anon55_Then:
    assume {:partition} sdv_compFset == 0;
    goto L29;

  anon54_Then:
    goto L29;

  anon53_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_2;
    goto L49;

  anon52_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_2;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_2;
    goto L45;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_3: int, actual_Irp_3: int, actual_Context_3: int, actual_Completion: int) returns (Tmp_628: int);
  free ensures {:va_keep} Tmp_628 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_3: int, actual_Irp_3: int, actual_Context_3: int, actual_Completion: int) returns (Tmp_628: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} Irp_3: int;
  var vslice_dummy_var_81: int;

  anon0:
    Irp_3 := actual_Irp_3;
    call {:si_unique_call 600} vslice_dummy_var_81 := sdv_IoGetNextIrpStackLocation(Irp_3);
    Status_1 := 0;
    Tmp_628 := Status_1;
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event: int, actual_Type: int, actual_State: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event: int, actual_Type: int, actual_State: int)
{
  var {:pointer} Event: int;
  var {:scalar} Type: int;
  var {:scalar} State: int;
  var vslice_dummy_var_82: int;

  anon0:
    call {:si_unique_call 601} vslice_dummy_var_82 := __HAVOC_malloc(4);
    Event := actual_Event;
    Type := actual_Type;
    State := actual_State;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_4: int, actual_Irp_4: int) returns (Tmp_632: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} Tmp_632 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_4: int, actual_Irp_4: int) returns (Tmp_632: int)
{
  var {:pointer} Irp_4: int;

  anon0:
    Irp_4 := actual_Irp_4;
    call {:si_unique_call 602} Tmp_632 := IofCallDriver(0, Irp_4);
    call {:si_unique_call 603} SLIC_sdv_IoCallDriver_exit(0, Irp_4);
    return;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_5: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_634: int);
  modifies Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_5: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_634: int)
{
  var {:pointer} Tmp_635: int;
  var {:pointer} Tmp_636: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    Tmp_636 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_IoBuildDeviceIoControlRequest_irp)))];
    assume {:nonnull} Tmp_636 != 0;
    assume Tmp_636 > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(Tmp_636)] := 15;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next)] := 15;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(sdv_IoBuildDeviceIoControlRequest_irp)] := 1;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock)] := 0;
    Tmp_634 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    Tmp_635 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_IoBuildDeviceIoControlRequest_irp)))];
    assume {:nonnull} Tmp_635 != 0;
    assume Tmp_635 > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(Tmp_635)] := 14;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next)] := 14;
    goto L14;

  anon5_Then:
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock)] := -1073741823;
    Tmp_634 := 0;
    goto L1;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_9: int)
{
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 604} vslice_dummy_var_83 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_2: int) returns (Tmp_640: int);
  free ensures {:va_keep} Tmp_640 == 0 || Tmp_640 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_2: int) returns (Tmp_640: int)
{
  var {:scalar} choice_17: int;
  var {:scalar} Tmp_642: int;
  var {:scalar} Status_2: int;

  anon0:
    Status_2 := actual_Status_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_2 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_2;
    Tmp_640 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_2 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_17 != 0;
    Tmp_642 := 1;
    goto L14;

  L14:
    Tmp_640 := Tmp_642;
    goto L1;

  anon8_Then:
    assume {:partition} choice_17 == 0;
    Tmp_642 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_2;
    goto L9;
}



procedure {:origName "IoReleaseVpbSpinLock"} {:osmodel} IoReleaseVpbSpinLock(actual_Irql_1: int);
  modifies alloc, sdv_irql_current;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoReleaseVpbSpinLock"} {:osmodel} IoReleaseVpbSpinLock(actual_Irql_1: int)
{
  var {:scalar} Irql_1: int;
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 605} vslice_dummy_var_84 := __HAVOC_malloc(4);
    Irql_1 := actual_Irql_1;
    sdv_irql_current := Irql_1;
    return;
}



procedure {:origName "IoBuildAsynchronousFsdRequest"} {:osmodel} IoBuildAsynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_6: int, actual_Buffer: int, actual_Length_2: int, actual_StartingOffset: int, actual_IoStatusBlock_1: int) returns (Tmp_645: int);
  modifies Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "IoBuildAsynchronousFsdRequest"} {:osmodel} IoBuildAsynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_6: int, actual_Buffer: int, actual_Length_2: int, actual_StartingOffset: int, actual_IoStatusBlock_1: int) returns (Tmp_645: int)
{
  var {:pointer} Tmp_647: int;
  var {:scalar} MajorFunction: int;
  var {:pointer} IoStatusBlock_1: int;

  anon0:
    MajorFunction := actual_MajorFunction;
    IoStatusBlock_1 := actual_IoStatusBlock_1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IoStatusBlock_1 != 0;
    havoc IoStatusBlock_1;
    goto L9;

  L9:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_irp > 0;
    Mem_T.PendingReturned__IRP[PendingReturned__IRP(sdv_IoBuildAsynchronousFsdRequest_irp)] := 1;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_irp > 0;
    Tmp_647 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_IoBuildAsynchronousFsdRequest_irp)))];
    assume {:nonnull} Tmp_647 != 0;
    assume Tmp_647 > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(Tmp_647)] := MajorFunction;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next)] := MajorFunction;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} IoStatusBlock_1 != 0;
    assume {:nonnull} IoStatusBlock_1 != 0;
    assume IoStatusBlock_1 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock_1)] := 0;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L16;

  L16:
    Tmp_645 := sdv_IoBuildAsynchronousFsdRequest_irp;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} IoStatusBlock_1 == 0;
    goto L16;

  anon10_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoStatusBlock_1 != 0;
    assume {:nonnull} IoStatusBlock_1 != 0;
    assume IoStatusBlock_1 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatusBlock_1)] := -1073741823;
    havoc Mem_T.Status__IO_STATUS_BLOCK;
    goto L20;

  L20:
    Tmp_645 := 0;
    goto L1;

  anon11_Then:
    assume {:partition} IoStatusBlock_1 == 0;
    goto L20;

  anon9_Then:
    assume {:partition} IoStatusBlock_1 == 0;
    goto L9;
}



procedure {:origName "MmUnlockPages"} {:osmodel} MmUnlockPages(actual_MemoryDescriptorList: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "MmUnlockPages"} {:osmodel} MmUnlockPages(actual_MemoryDescriptorList: int)
{
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 606} vslice_dummy_var_85 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_650: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_650: int)
{
  var {:pointer} sdv_256: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    NumberOfBytes := actual_NumberOfBytes;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 607} sdv_256 := __HAVOC_malloc(NumberOfBytes);
    Tmp_650 := sdv_256;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_650 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_86: int;

  anon0:
    call {:si_unique_call 608} vslice_dummy_var_86 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_current;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_87: int;

  anon0:
    call {:si_unique_call 609} vslice_dummy_var_87 := __HAVOC_malloc(4);
    sdv_irql_current := 0;
    return;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_1: int) returns (Tmp_656: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_1: int) returns (Tmp_656: int)
{
  var {:scalar} p_2: int;

  anon0:
    Tmp_656 := p_2;
    return;
}



procedure {:origName "ExGetExclusiveWaiterCount"} {:osmodel} ExGetExclusiveWaiterCount(actual_Resource_6: int) returns (Tmp_658: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExGetExclusiveWaiterCount"} {:osmodel} ExGetExclusiveWaiterCount(actual_Resource_6: int) returns (Tmp_658: int)
{
  var {:scalar} sdv_258: int;

  anon0:
    Tmp_658 := sdv_258;
    return;
}



procedure {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside: int) returns (Tmp_660: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside: int) returns (Tmp_660: int)
{
  var {:pointer} sdv_260: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 610} sdv_260 := __HAVOC_malloc(1);
    Tmp_660 := sdv_260;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_660 := 0;
    goto L1;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 611} vslice_dummy_var_88 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_89: int;

  anon0:
    call {:si_unique_call 612} vslice_dummy_var_89 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatReadVolumeFile"} FatReadVolumeFile(actual_IrpContext_26: int, actual_Vcb_20: int, actual_StartingVbo_2: int, actual_ByteCount_6: int, actual_Bcb_5: int, actual_Buffer_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatReadVolumeFile"} FatReadVolumeFile(actual_IrpContext_26: int, actual_Vcb_20: int, actual_StartingVbo_2: int, actual_ByteCount_6: int, actual_Bcb_5: int, actual_Buffer_3: int)
{
  var {:scalar} Vbo_4: int;
  var {:scalar} sdv_266: int;
  var {:scalar} Tmp_680: int;
  var {:pointer} IrpContext_26: int;
  var {:scalar} StartingVbo_2: int;
  var vslice_dummy_var_90: int;

  anon0:
    call {:si_unique_call 613} Vbo_4 := __HAVOC_malloc(20);
    call {:si_unique_call 614} vslice_dummy_var_90 := __HAVOC_malloc(4);
    IrpContext_26 := actual_IrpContext_26;
    StartingVbo_2 := actual_StartingVbo_2;
    call {:si_unique_call 615} sdv_do_paged_code_check();
    assume {:nonnull} Vbo_4 != 0;
    assume Vbo_4 > 0;
    assume {:nonnull} IrpContext_26 != 0;
    assume IrpContext_26 > 0;
    Tmp_680 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_26)], 2);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_680 == 0;
    goto L25;

  L25:
    call {:si_unique_call 616} sdv_266 := corral_nondet();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_266 == 0;
    assume {:nonnull} IrpContext_26 != 0;
    assume IrpContext_26 > 0;
    call {:si_unique_call 617} ExRaiseStatus(-1073741608);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} sdv_266 != 0;
    goto L1;

  anon6_Then:
    assume {:partition} Tmp_680 != 0;
    goto L25;
}



procedure {:origName "FatUnpinRepinnedBcbs"} FatUnpinRepinnedBcbs(actual_IrpContext_27: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatUnpinRepinnedBcbs"} FatUnpinRepinnedBcbs(actual_IrpContext_27: int)
{
  var {:scalar} i_3: int;
  var {:scalar} Tmp_682: int;
  var {:pointer} Tmp_683: int;
  var {:pointer} Tmp_684: int;
  var {:pointer} Saved: int;
  var {:pointer} Tmp_686: int;
  var {:pointer} Tmp_687: int;
  var {:scalar} Tmp_688: int;
  var {:scalar} j: int;
  var {:scalar} Tmp_690: int;
  var {:scalar} Iosb: int;
  var {:pointer} FileObject_1: int;
  var {:pointer} Tmp_691: int;
  var {:scalar} Tmp_692: int;
  var {:pointer} Tmp_694: int;
  var {:pointer} Tmp_695: int;
  var {:scalar} Tmp_696: int;
  var {:pointer} sdv_269: int;
  var {:scalar} WriteThroughToDisk: int;
  var {:pointer} Tmp_697: int;
  var {:pointer} Tmp_698: int;
  var {:pointer} Tmp_699: int;
  var {:scalar} Tmp_700: int;
  var {:scalar} sdv_270: int;
  var {:pointer} Tmp_701: int;
  var {:scalar} ForceVerify: int;
  var {:pointer} Repinned: int;
  var {:scalar} Tmp_703: int;
  var {:scalar} Tmp_704: int;
  var {:scalar} Tmp_705: int;
  var {:scalar} RaiseIosb: int;
  var {:pointer} Tmp_706: int;
  var {:pointer} Tmp_708: int;
  var {:pointer} IrpContext_27: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;

  anon0:
    call {:si_unique_call 618} Iosb := __HAVOC_malloc(12);
    call {:si_unique_call 619} RaiseIosb := __HAVOC_malloc(12);
    call {:si_unique_call 620} vslice_dummy_var_91 := __HAVOC_malloc(4);
    IrpContext_27 := actual_IrpContext_27;
    call {:si_unique_call 621} Tmp_683 := __HAVOC_malloc(16);
    call {:si_unique_call 622} Tmp_686 := __HAVOC_malloc(16);
    call {:si_unique_call 623} Tmp_687 := __HAVOC_malloc(16);
    call {:si_unique_call 624} Tmp_691 := __HAVOC_malloc(16);
    call {:si_unique_call 625} Tmp_694 := __HAVOC_malloc(16);
    call {:si_unique_call 626} Tmp_695 := __HAVOC_malloc(16);
    call {:si_unique_call 627} Tmp_706 := __HAVOC_malloc(16);
    call {:si_unique_call 628} Tmp_708 := __HAVOC_malloc(16);
    FileObject_1 := 0;
    ForceVerify := 0;
    call {:si_unique_call 629} sdv_do_paged_code_check();
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    Repinned := Repinned__IRP_CONTEXT(IrpContext_27);
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)] := 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 8) != 0;
    goto L18;

  L18:
    Tmp_688 := 0;
    goto L19;

  L19:
    WriteThroughToDisk := Tmp_688;
    goto L20;

  L20:
    call {:si_unique_call 630} i_3, Tmp_682, Tmp_683, Saved, Tmp_686, Tmp_687, j, Tmp_690, FileObject_1, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_696, sdv_269, Tmp_700, Tmp_701, ForceVerify, Repinned, Tmp_703, Tmp_704, Tmp_705, Tmp_706, Tmp_708, vslice_dummy_var_92 := FatUnpinRepinnedBcbs_loop_L20(i_3, Tmp_682, Tmp_683, Saved, Tmp_686, Tmp_687, j, Tmp_690, Iosb, FileObject_1, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_696, sdv_269, WriteThroughToDisk, Tmp_700, Tmp_701, ForceVerify, Repinned, Tmp_703, Tmp_704, Tmp_705, RaiseIosb, Tmp_706, Tmp_708, IrpContext_27, vslice_dummy_var_92);
    goto L20_last;

  L20_last:
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} Repinned != 0;
    i_3 := 0;
    goto L23;

  L23:
    call {:si_unique_call 631} i_3, Tmp_682, Tmp_683, Tmp_686, Tmp_687, j, Tmp_690, FileObject_1, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_696, sdv_269, Tmp_700, Tmp_701, ForceVerify, Tmp_703, Tmp_704, Tmp_705, Tmp_706, Tmp_708, vslice_dummy_var_92 := FatUnpinRepinnedBcbs_loop_L23(i_3, Tmp_682, Tmp_683, Tmp_686, Tmp_687, j, Tmp_690, Iosb, FileObject_1, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_696, sdv_269, WriteThroughToDisk, Tmp_700, Tmp_701, ForceVerify, Repinned, Tmp_703, Tmp_704, Tmp_705, RaiseIosb, Tmp_706, Tmp_708, IrpContext_27, vslice_dummy_var_92);
    goto L23_last;

  L23_last:
    assume {:CounterLoop 4} {:Counter "i_3"} true;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} 4 > i_3;
    Tmp_703 := i_3;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_686;
    assume {:nonnull} Tmp_686 != 0;
    assume Tmp_686 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} WriteThroughToDisk != 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    Tmp_701 := Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext_27)];
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_701)], 4096) != 0;
    Tmp_696 := i_3;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_706;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume Tmp_696 <= 2;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume Tmp_696 != 2;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume Tmp_696 != 1;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume Tmp_696 != 0;
    goto L114;

  L114:
    goto anon117_Then, anon117_Else;

  anon117_Else:
    FileObject_1 := 0;
    goto L29;

  L29:
    Tmp_690 := i_3;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_694;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume Tmp_690 <= 2;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume Tmp_690 != 2;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume Tmp_690 != 1;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume Tmp_690 != 0;
    goto L124;

  L124:
    assume {:nonnull} Iosb != 0;
    assume Iosb > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb)] >= 0;
    goto L41;

  L41:
    Tmp_705 := i_3;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_695;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume Tmp_705 <= 2;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume Tmp_705 != 2;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume Tmp_705 != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume Tmp_705 != 0;
    goto L26;

  L26:
    i_3 := i_3 + 1;
    goto L26_dummy;

  L26_dummy:
    assume false;
    return;

  anon127_Then:
    assume Tmp_705 == 0;
    Tmp_705 := 0;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    goto L26;

  anon126_Then:
    assume Tmp_705 == 1;
    Tmp_705 := 1;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    goto L26;

  anon125_Then:
    assume Tmp_705 == 2;
    Tmp_705 := 2;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    goto L26;

  anon124_Then:
    assume Tmp_705 > 2;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    goto L26;

  anon105_Then:
    assume {:partition} 0 > Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb)];
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)] != 0;
    goto L43;

  L43:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} FileObject_1 != 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] != 18;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] != 9;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] != 6;
    j := i_3 + 1;
    goto L49;

  L49:
    call {:si_unique_call 632} Tmp_682, Tmp_683, Tmp_687, j, Tmp_691, Tmp_692, sdv_269, Tmp_700, Tmp_704, Tmp_708 := FatUnpinRepinnedBcbs_loop_L49(Tmp_682, Tmp_683, Tmp_687, j, FileObject_1, Tmp_691, Tmp_692, sdv_269, Tmp_700, Repinned, Tmp_704, Tmp_708);
    goto L49_last;

  L49_last:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 4 > j;
    Tmp_700 := j;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_687;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    Tmp_692 := j;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_708;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume Tmp_692 <= 2;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume Tmp_692 != 2;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume Tmp_692 != 1;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume Tmp_692 != 0;
    goto L144;

  L144:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    sdv_269 := 0;
    goto L59;

  L59:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} sdv_269 == FileObject_1;
    Tmp_682 := j;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_683;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume Tmp_682 <= 2;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume Tmp_682 != 2;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume Tmp_682 != 1;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume Tmp_682 != 0;
    goto L154;

  L154:
    Tmp_704 := j;
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Tmp_691;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume Tmp_704 <= 2;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume Tmp_704 != 2;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume Tmp_704 != 1;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume Tmp_704 != 0;
    goto L54;

  L54:
    j := j + 1;
    goto L54_dummy;

  L54_dummy:
    assume false;
    return;

  anon134_Then:
    assume Tmp_704 == 0;
    Tmp_704 := 0;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    goto L54;

  anon133_Then:
    assume Tmp_704 == 1;
    Tmp_704 := 1;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    goto L54;

  anon132_Then:
    assume Tmp_704 == 2;
    Tmp_704 := 2;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    goto L54;

  anon131_Then:
    assume Tmp_704 > 2;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    goto L54;

  anon137_Then:
    assume Tmp_682 == 0;
    Tmp_682 := 0;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    goto L154;

  anon136_Then:
    assume Tmp_682 == 1;
    Tmp_682 := 1;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    goto L154;

  anon135_Then:
    assume Tmp_682 == 2;
    Tmp_682 := 2;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    goto L154;

  anon130_Then:
    assume Tmp_682 > 2;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    goto L154;

  anon112_Then:
    assume {:partition} sdv_269 != FileObject_1;
    goto L54;

  anon118_Then:
    call {:si_unique_call 633} sdv_269 := __HAVOC_malloc(1);
    goto L59;

  anon140_Then:
    assume Tmp_692 == 0;
    Tmp_692 := 0;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    goto L144;

  anon139_Then:
    assume Tmp_692 == 1;
    Tmp_692 := 1;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    goto L144;

  anon138_Then:
    assume Tmp_692 == 2;
    Tmp_692 := 2;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    goto L144;

  anon129_Then:
    assume Tmp_692 > 2;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    goto L144;

  anon128_Then:
    goto L54;

  anon111_Then:
    assume {:partition} j >= 4;
    call {:si_unique_call 634} vslice_dummy_var_92 := corral_nondet();
    ForceVerify := 1;
    goto L41;

  anon110_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] == 6;
    goto L41;

  anon109_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] == 9;
    goto L41;

  anon108_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_27)] == 18;
    goto L41;

  anon107_Then:
    assume {:partition} FileObject_1 == 0;
    goto L41;

  anon106_Then:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)] == 0;
    assume {:nonnull} Iosb != 0;
    assume Iosb > 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)] := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb)];
    assume {:nonnull} Iosb != 0;
    assume Iosb > 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    assume {:nonnull} Iosb != 0;
    assume Iosb > 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    goto L43;

  anon143_Then:
    assume Tmp_690 == 0;
    Tmp_690 := 0;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    goto L124;

  anon142_Then:
    assume Tmp_690 == 1;
    Tmp_690 := 1;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    goto L124;

  anon141_Then:
    assume Tmp_690 == 2;
    Tmp_690 := 2;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    goto L124;

  anon123_Then:
    assume Tmp_690 > 2;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    goto L124;

  anon117_Then:
    call {:si_unique_call 635} FileObject_1 := __HAVOC_malloc(1);
    goto L29;

  anon146_Then:
    assume Tmp_696 == 0;
    Tmp_696 := 0;
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    goto L114;

  anon145_Then:
    assume Tmp_696 == 1;
    Tmp_696 := 1;
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    goto L114;

  anon144_Then:
    assume Tmp_696 == 2;
    Tmp_696 := 2;
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    goto L114;

  anon122_Then:
    assume Tmp_696 > 2;
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    goto L114;

  anon121_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_701)], 4096) == 0;
    goto L29;

  anon104_Then:
    assume {:partition} WriteThroughToDisk == 0;
    goto L29;

  anon120_Then:
    goto L26;

  anon102_Then:
    assume {:partition} i_3 >= 4;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} Repinned != Repinned__IRP_CONTEXT(IrpContext_27);
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Saved;
    call {:si_unique_call 636} sdv_ExFreePool(0);
    Repinned := Saved;
    goto anon103_Else_dummy;

  anon103_Else_dummy:
    assume false;
    return;

  anon103_Then:
    assume {:partition} Repinned == Repinned__IRP_CONTEXT(IrpContext_27);
    assume {:nonnull} Repinned != 0;
    assume Repinned > 0;
    havoc Repinned;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon103_Then_dummy;

  anon103_Then_dummy:
    assume false;
    return;

  anon100_Then:
    assume {:partition} Repinned == 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)] < 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} ForceVerify != 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} FileObject_1 != 0;
    assume {:nonnull} FileObject_1 != 0;
    assume FileObject_1 > 0;
    havoc Tmp_698;
    assume {:nonnull} FileObject_1 != 0;
    assume FileObject_1 > 0;
    havoc Tmp_699;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    assume {:nonnull} Tmp_699 != 0;
    assume Tmp_699 > 0;
    call {:si_unique_call 637} IoSetHardErrorOrVerifyDevice(0, 0);
    goto L76;

  L76:
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 2048) == 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    Tmp_697 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_27)];
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    assume {:nonnull} Tmp_697 != 0;
    assume Tmp_697 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_697))] := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)];
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    assume {:nonnull} Tmp_697 != 0;
    assume Tmp_697 > 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    assume {:nonnull} Tmp_697 != 0;
    assume Tmp_697 > 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    assume {:nonnull} RaiseIosb != 0;
    assume RaiseIosb > 0;
    call {:si_unique_call 638} sdv_270 := corral_nondet();
    call {:si_unique_call 639} ExRaiseStatus(sdv_270);
    goto L1;

  L1:
    return;

  anon114_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 2048) != 0;
    goto L1;

  anon115_Then:
    assume {:partition} FileObject_1 == 0;
    goto L76;

  anon113_Then:
    assume {:partition} ForceVerify == 0;
    goto L76;

  anon101_Then:
    assume {:partition} 0 <= Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(RaiseIosb)];
    goto L1;

  anon119_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 8) == 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext_27)] != 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 4) != 0;
    goto L92;

  L92:
    Tmp_688 := 1;
    goto L19;

  anon116_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_27)], 4) == 0;
    assume {:nonnull} IrpContext_27 != 0;
    assume IrpContext_27 > 0;
    Tmp_684 := Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext_27)];
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_684)], 4096) != 0;
    goto L92;

  anon147_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_684)], 4096) == 0;
    goto L18;

  anon99_Then:
    assume {:partition} Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(IrpContext_27)] == 0;
    goto L18;
}



procedure {:origName "FatSyncUninitializeCacheMap"} FatSyncUninitializeCacheMap(actual_IrpContext_30: int, actual_FileObject_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSyncUninitializeCacheMap"} FatSyncUninitializeCacheMap(actual_IrpContext_30: int, actual_FileObject_2: int)
{
  var {:scalar} UninitializeCompleteEvent: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;

  anon0:
    call {:si_unique_call 640} vslice_dummy_var_93 := __HAVOC_malloc(4);
    call {:si_unique_call 641} UninitializeCompleteEvent := __HAVOC_malloc(128);
    call {:si_unique_call 642} sdv_do_paged_code_check();
    assume {:nonnull} UninitializeCompleteEvent != 0;
    assume UninitializeCompleteEvent > 0;
    call {:si_unique_call 643} KeInitializeEvent(Event__CACHE_UNINITIALIZE_EVENT(UninitializeCompleteEvent), 1, 0);
    call {:si_unique_call 644} vslice_dummy_var_94 := corral_nondet();
    call {:si_unique_call 645} vslice_dummy_var_95 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    return;
}



procedure {:origName "FatCloseEaFile"} FatCloseEaFile(actual_IrpContext_31: int, actual_Vcb_22: int, actual_FlushFirst: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCloseEaFile"} FatCloseEaFile(actual_IrpContext_31: int, actual_Vcb_22: int, actual_FlushFirst: int)
{
  var {:pointer} Tmp_726: int;
  var {:pointer} EaFileObject: int;
  var {:pointer} IrpContext_31: int;
  var {:pointer} Vcb_22: int;
  var {:scalar} FlushFirst: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;

  anon0:
    call {:si_unique_call 646} vslice_dummy_var_96 := __HAVOC_malloc(4);
    IrpContext_31 := actual_IrpContext_31;
    Vcb_22 := actual_Vcb_22;
    FlushFirst := actual_FlushFirst;
    assume {:nonnull} Vcb_22 != 0;
    assume Vcb_22 > 0;
    havoc EaFileObject;
    call {:si_unique_call 647} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} EaFileObject != 0;
    assume {:nonnull} Vcb_22 != 0;
    assume Vcb_22 > 0;
    havoc EaFileObject;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} FlushFirst != 0;
    assume {:nonnull} Vcb_22 != 0;
    assume Vcb_22 > 0;
    goto L11;

  L11:
    assume {:nonnull} Vcb_22 != 0;
    assume Vcb_22 > 0;
    assume {:nonnull} Vcb_22 != 0;
    assume Vcb_22 > 0;
    havoc Tmp_726;
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    call {:si_unique_call 648} FatRemoveMcbEntry(Vcb_22, Mcb__FCB(Tmp_726), 0, -1);
    call {:si_unique_call 649} FatSyncUninitializeCacheMap(IrpContext_31, EaFileObject);
    call {:si_unique_call 650} vslice_dummy_var_97 := sdv_ObDereferenceObject(0);
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} FlushFirst == 0;
    goto L11;

  anon5_Then:
    assume {:partition} EaFileObject == 0;
    goto L1;
}



procedure {:origName "FatRepinBcb"} FatRepinBcb(actual_IrpContext_32: int, actual_Bcb_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatRepinBcb"} FatRepinBcb(actual_IrpContext_32: int, actual_Bcb_7: int)
{
  var {:scalar} i_4: int;
  var {:pointer} Tmp_729: int;
  var {:scalar} Tmp_730: int;
  var {:scalar} Tmp_731: int;
  var {:pointer} sdv_284: int;
  var {:pointer} Tmp_733: int;
  var {:pointer} Tmp_734: int;
  var {:scalar} Tmp_736: int;
  var {:pointer} Repinned_1: int;
  var {:pointer} IrpContext_32: int;
  var {:pointer} Bcb_7: int;
  var vslice_dummy_var_98: int;

  anon0:
    call {:si_unique_call 651} vslice_dummy_var_98 := __HAVOC_malloc(4);
    IrpContext_32 := actual_IrpContext_32;
    Bcb_7 := actual_Bcb_7;
    call {:si_unique_call 652} Tmp_729 := __HAVOC_malloc(16);
    call {:si_unique_call 653} Tmp_733 := __HAVOC_malloc(16);
    call {:si_unique_call 654} Tmp_734 := __HAVOC_malloc(16);
    call {:si_unique_call 655} sdv_do_paged_code_check();
    assume {:nonnull} IrpContext_32 != 0;
    assume IrpContext_32 > 0;
    Repinned_1 := Repinned__IRP_CONTEXT(IrpContext_32);
    goto L10;

  L10:
    call {:si_unique_call 656} i_4, Tmp_729, Tmp_730, Tmp_731, sdv_284, Tmp_734, Repinned_1 := FatRepinBcb_loop_L10(i_4, Tmp_729, Tmp_730, Tmp_731, sdv_284, Tmp_734, Repinned_1, Bcb_7);
    goto L10_last;

  L10_last:
    i_4 := 0;
    goto L11;

  L11:
    call {:si_unique_call 657} i_4, Tmp_729, Tmp_730, Tmp_731, Tmp_734 := FatRepinBcb_loop_L11(i_4, Tmp_729, Tmp_730, Tmp_731, Tmp_734, Repinned_1, Bcb_7);
    goto L11_last;

  L11_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > i_4;
    Tmp_730 := i_4;
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    havoc Tmp_734;
    assume {:nonnull} Tmp_734 != 0;
    assume Tmp_734 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_731 := i_4;
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    havoc Tmp_729;
    assume {:nonnull} Tmp_729 != 0;
    assume Tmp_729 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    i_4 := i_4 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    Tmp_736 := i_4;
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    havoc Tmp_733;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume Tmp_736 <= 2;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume Tmp_736 != 2;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Tmp_736 != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume Tmp_736 != 0;
    goto L33;

  L33:
    goto L1;

  L1:
    return;

  anon24_Then:
    assume Tmp_736 == 0;
    Tmp_736 := 0;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    goto L33;

  anon23_Then:
    assume Tmp_736 == 1;
    Tmp_736 := 1;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    goto L33;

  anon22_Then:
    assume Tmp_736 == 2;
    Tmp_736 := 2;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    goto L33;

  anon21_Then:
    assume Tmp_736 > 2;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    goto L33;

  anon19_Then:
    goto L1;

  anon17_Then:
    assume {:partition} i_4 >= 4;
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L25;

  L25:
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    havoc Repinned_1;
    goto L25_dummy;

  L25_dummy:
    assume false;
    return;

  anon18_Then:
    call {:si_unique_call 658} sdv_284 := ExAllocatePoolWithTag(17, 20, -764124858);
    assume {:nonnull} Repinned_1 != 0;
    assume Repinned_1 > 0;
    call {:si_unique_call 659} sdv_RtlZeroMemory(0, 20);
    goto L25;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_99: int;

  anon0:
    call {:si_unique_call 660} vslice_dummy_var_99 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatPerformDevIoCtrl"} FatPerformDevIoCtrl(actual_IrpContext_33: int, actual_IoControlCode_1: int, actual_Device: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_InternalDeviceIoControl_1: int, actual_OverrideVerify: int, actual_Iosb_1: int) returns (Tmp_739: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPerformDevIoCtrl"} FatPerformDevIoCtrl(actual_IrpContext_33: int, actual_IoControlCode_1: int, actual_Device: int, actual_OutputBuffer_1: int, actual_OutputBufferLength_1: int, actual_InternalDeviceIoControl_1: int, actual_OverrideVerify: int, actual_Iosb_1: int) returns (Tmp_739: int)
{
  var {:scalar} LocalIosb: int;
  var {:pointer} Irp_5: int;
  var {:scalar} Status_4: int;
  var {:scalar} Event_2: int;
  var {:pointer} sdv_287: int;
  var {:pointer} IosbToUse: int;
  var {:scalar} IoControlCode_1: int;
  var {:pointer} Device: int;
  var {:scalar} OutputBufferLength_1: int;
  var {:scalar} InternalDeviceIoControl_1: int;
  var {:scalar} OverrideVerify: int;
  var {:pointer} Iosb_1: int;
  var vslice_dummy_var_100: int;

  anon0:
    call {:si_unique_call 661} LocalIosb := __HAVOC_malloc(12);
    call {:si_unique_call 662} Event_2 := __HAVOC_malloc(124);
    IoControlCode_1 := actual_IoControlCode_1;
    Device := actual_Device;
    OutputBufferLength_1 := actual_OutputBufferLength_1;
    InternalDeviceIoControl_1 := actual_InternalDeviceIoControl_1;
    OverrideVerify := actual_OverrideVerify;
    Iosb_1 := actual_Iosb_1;
    IosbToUse := LocalIosb;
    call {:si_unique_call 663} sdv_do_paged_code_check();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Iosb_1 != 0;
    IosbToUse := Iosb_1;
    goto L13;

  L13:
    assume {:nonnull} IosbToUse != 0;
    assume IosbToUse > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IosbToUse)] := 0;
    assume {:nonnull} IosbToUse != 0;
    assume IosbToUse > 0;
    call {:si_unique_call 664} KeInitializeEvent(Event_2, 0, 0);
    call {:si_unique_call 665} Irp_5 := IoBuildDeviceIoControlRequest(IoControlCode_1, 0, 0, 0, 0, OutputBufferLength_1, InternalDeviceIoControl_1, 0, IosbToUse);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Irp_5 != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} OverrideVerify != 0;
    call {:si_unique_call 666} sdv_287 := sdv_IoGetNextIrpStackLocation(Irp_5);
    assume {:nonnull} sdv_287 != 0;
    assume sdv_287 > 0;
    goto L26;

  L26:
    call {:si_unique_call 667} Status_4 := sdv_IoCallDriver(Device, Irp_5);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Status_4 == 259;
    call {:si_unique_call 668} vslice_dummy_var_100 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} IosbToUse != 0;
    assume IosbToUse > 0;
    Status_4 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IosbToUse)];
    goto L35;

  L35:
    Tmp_739 := Status_4;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} Status_4 != 259;
    goto L35;

  anon11_Then:
    assume {:partition} OverrideVerify == 0;
    goto L26;

  anon10_Then:
    assume {:partition} Irp_5 == 0;
    Tmp_739 := -1073741670;
    goto L1;

  anon9_Then:
    assume {:partition} Iosb_1 == 0;
    goto L13;
}



procedure {:origName "FatToggleMediaEjectDisable"} FatToggleMediaEjectDisable(actual_IrpContext_34: int, actual_Vcb_23: int, actual_PreventRemoval: int) returns (Tmp_741: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatToggleMediaEjectDisable"} FatToggleMediaEjectDisable(actual_IrpContext_34: int, actual_Vcb_23: int, actual_PreventRemoval: int) returns (Tmp_741: int)
{
  var {:scalar} SavedIrql_2: int;
  var {:pointer} Irp_6: int;
  var {:pointer} Tmp_742: int;
  var {:scalar} Status_5: int;
  var {:scalar} Iosb_2: int;
  var {:scalar} Event_3: int;
  var {:scalar} Prevent: int;
  var {:pointer} Vcb_23: int;
  var {:scalar} PreventRemoval: int;
  var boogieTmp: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_7450: int;

  anon0:
    call {:si_unique_call 669} Iosb_2 := __HAVOC_malloc(12);
    call {:si_unique_call 670} Event_3 := __HAVOC_malloc(124);
    call {:si_unique_call 671} Prevent := __HAVOC_malloc(4);
    Vcb_23 := actual_Vcb_23;
    PreventRemoval := actual_PreventRemoval;
    call {:si_unique_call 672} Tmp_742 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_742 != 0;
    assume Tmp_742 > 0;
    Mem_T.INT4[Tmp_742] := SavedIrql_2;
    call {:si_unique_call 673} sdv_KeAcquireSpinLock(0, Tmp_742);
    assume {:nonnull} Tmp_742 != 0;
    assume Tmp_742 > 0;
    SavedIrql_2 := Mem_T.INT4[Tmp_742];
    assume {:nonnull} Vcb_23 != 0;
    assume Vcb_23 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Vcb_23 != 0;
    assume Vcb_23 > 0;
    call {:si_unique_call 674} boogieTmp := corral_nondet();
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_23)] := boogieTmp;
    call {:si_unique_call 675} sdv_KeReleaseSpinLock(0, SavedIrql_2);
    assume {:nonnull} Prevent != 0;
    assume Prevent > 0;
    call {:si_unique_call 676} KeInitializeEvent(Event_3, 0, 0);
    call {:si_unique_call 677} Irp_6 := IoBuildDeviceIoControlRequest(477188, 0, 0, 1, 0, 0, 0, 0, Iosb_2);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Irp_6 != 0;
    call {:si_unique_call 678} sdv_IoSetCompletionRoutine(Irp_6, li2bplFunctionConstant739, Event_3, 1, 1, 1);
    assume {:nonnull} Vcb_23 != 0;
    assume Vcb_23 > 0;
    havoc vslice_dummy_var_7450;
    call {:si_unique_call 679} Status_5 := sdv_IoCallDriver(vslice_dummy_var_7450, Irp_6);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Status_5 == 259;
    call {:si_unique_call 680} vslice_dummy_var_101 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Iosb_2 != 0;
    assume Iosb_2 > 0;
    Status_5 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_2)];
    goto L39;

  L39:
    Tmp_741 := Status_5;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} Status_5 != 259;
    goto L39;

  anon7_Then:
    assume {:partition} Irp_6 == 0;
    Tmp_741 := -1073741670;
    goto L1;

  anon9_Then:
    call {:si_unique_call 681} sdv_KeReleaseSpinLock(0, SavedIrql_2);
    Tmp_741 := 0;
    goto L1;
}



procedure {:origName "_sdv_init31"} _sdv_init31();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init31"} _sdv_init31()
{
  var vslice_dummy_var_102: int;

  anon0:
    call {:si_unique_call 682} vslice_dummy_var_102 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatForceCacheMiss"} FatForceCacheMiss(actual_IrpContext_35: int, actual_Fcb_6: int, actual_FlushType: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatForceCacheMiss"} FatForceCacheMiss(actual_IrpContext_35: int, actual_Fcb_6: int, actual_FlushType: int)
{
  var {:pointer} Links: int;
  var {:scalar} ChildrenAcquired: int;
  var {:scalar} DataSectionExists: int;
  var {:pointer} Tmp_746: int;
  var {:pointer} Tmp_747: int;
  var {:scalar} sdv_296: int;
  var {:pointer} sdv_297: int;
  var {:pointer} Vcb_24: int;
  var {:pointer} Links_1: int;
  var {:scalar} ImageSectionExists: int;
  var {:pointer} sdv_300: int;
  var {:pointer} TempFcb_1: int;
  var {:pointer} Section: int;
  var {:pointer} IrpContext_35: int;
  var {:pointer} Fcb_6: int;
  var {:scalar} FlushType: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;

  anon0:
    call {:si_unique_call 683} vslice_dummy_var_103 := __HAVOC_malloc(4);
    IrpContext_35 := actual_IrpContext_35;
    Fcb_6 := actual_Fcb_6;
    FlushType := actual_FlushType;
    ChildrenAcquired := 0;
    assume {:nonnull} IrpContext_35 != 0;
    assume IrpContext_35 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_35)], 2) != 0;
    goto L8;

  L8:
    Tmp_747 := Fcb_6;
    assume {:nonnull} Tmp_747 != 0;
    assume Tmp_747 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.INT4[Tmp_747] != 1282;
    call {:si_unique_call 684} sdv_296 := sdv_IsListEmpty(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_296 == 0;
    ChildrenAcquired := 1;
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    havoc Links;
    goto L20;

  L20:
    call {:si_unique_call 685} Links, sdv_297, TempFcb_1, vslice_dummy_var_108 := FatForceCacheMiss_loop_L20(Links, sdv_297, TempFcb_1, IrpContext_35, vslice_dummy_var_108);
    goto L20_last;

  L20_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 686} sdv_297 := sdv_containing_record(Links, 72);
    TempFcb_1 := sdv_297;
    call {:si_unique_call 687} vslice_dummy_var_108 := FatAcquireExclusiveFcb(IrpContext_35, TempFcb_1);
    assume {:nonnull} Links != 0;
    assume Links > 0;
    havoc Links;
    goto anon28_Else_dummy;

  anon28_Else_dummy:
    assume false;
    return;

  anon28_Then:
    goto L9;

  L9:
    call {:si_unique_call 688} vslice_dummy_var_104 := FatAcquireExclusiveFcb(IrpContext_35, Fcb_6);
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    havoc Vcb_24;
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(Fcb_6)] := BOR(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_6)], 8);
    assume {:nonnull} Vcb_24 != 0;
    assume Vcb_24 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)], BNOT(256));
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} FlushType != 0;
    call {:si_unique_call 689} vslice_dummy_var_105 := FatFlushFile(IrpContext_35, Fcb_6, FlushType);
    goto L36;

  L36:
    assume {:nonnull} Vcb_24 != 0;
    assume Vcb_24 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)], 256) != 0;
    goto L59;

  L59:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} ChildrenAcquired != 0;
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    havoc Links_1;
    goto L64;

  L64:
    call {:si_unique_call 690} Links_1, sdv_300 := FatForceCacheMiss_loop_L64(Links_1, sdv_300);
    goto L64_last;

  L64_last:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 691} sdv_300 := sdv_containing_record(Links_1, 72);
    call {:si_unique_call 692} ExReleaseResourceLite(0);
    assume {:nonnull} Links_1 != 0;
    assume Links_1 > 0;
    havoc Links_1;
    goto anon32_Else_dummy;

  anon32_Else_dummy:
    assume false;
    return;

  anon32_Then:
    goto L60;

  L60:
    assume {:nonnull} Vcb_24 != 0;
    assume Vcb_24 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)], 256) == 0;
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(Fcb_6)] := BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_6)], BNOT(8));
    call {:si_unique_call 693} ExReleaseResourceLite(0);
    goto L1;

  L1:
    return;

  anon31_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)], 256) != 0;
    goto L1;

  anon30_Then:
    assume {:partition} ChildrenAcquired == 0;
    goto L60;

  anon29_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_24)], 256) == 0;
    assume {:nonnull} Fcb_6 != 0;
    assume Fcb_6 > 0;
    havoc Tmp_746;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    Section := SectionObjectPointers__NON_PAGED_FCB(Tmp_746);
    assume {:nonnull} Section != 0;
    assume Section > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    DataSectionExists := 0;
    goto L115;

  L115:
    assume {:nonnull} Section != 0;
    assume Section > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    ImageSectionExists := 0;
    goto L118;

  L118:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} ImageSectionExists != 0;
    call {:si_unique_call 694} vslice_dummy_var_106 := corral_nondet();
    goto L80;

  L80:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} DataSectionExists != 0;
    call {:si_unique_call 695} vslice_dummy_var_107 := corral_nondet();
    goto L59;

  anon33_Then:
    assume {:partition} DataSectionExists == 0;
    goto L59;

  anon39_Then:
    assume {:partition} ImageSectionExists == 0;
    goto L80;

  anon38_Then:
    ImageSectionExists := 1;
    goto L118;

  anon37_Then:
    DataSectionExists := 1;
    goto L115;

  anon36_Then:
    assume {:partition} FlushType == 0;
    goto L36;

  anon27_Then:
    assume {:partition} sdv_296 != 0;
    goto L9;

  anon35_Then:
    assume {:partition} Mem_T.INT4[Tmp_747] == 1282;
    goto L9;

  anon34_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_35)], 2) == 0;
    assume {:nonnull} IrpContext_35 != 0;
    assume IrpContext_35 > 0;
    call {:si_unique_call 696} ExRaiseStatus(-1073741608);
    goto L8;
}



procedure {:origName "FatSetFileObject"} FatSetFileObject(actual_FileObject_3: int, actual_TypeOfOpen: int, actual_VcbOrFcbOrDcb: int, actual_Ccb_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFileObject"} FatSetFileObject(actual_FileObject_3: int, actual_TypeOfOpen: int, actual_VcbOrFcbOrDcb: int, actual_Ccb_3: int)
{
  var {:pointer} Tmp_750: int;
  var {:pointer} Tmp_753: int;
  var {:pointer} Tmp_754: int;
  var {:pointer} Tmp_755: int;
  var {:pointer} Tmp_756: int;
  var {:pointer} FileObject_3: int;
  var {:pointer} VcbOrFcbOrDcb: int;
  var {:pointer} Ccb_3: int;
  var vslice_dummy_var_109: int;

  anon0:
    call {:si_unique_call 697} vslice_dummy_var_109 := __HAVOC_malloc(4);
    FileObject_3 := actual_FileObject_3;
    VcbOrFcbOrDcb := actual_VcbOrFcbOrDcb;
    Ccb_3 := actual_Ccb_3;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} VcbOrFcbOrDcb != 0;
    Tmp_750 := VcbOrFcbOrDcb;
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[Tmp_750] == 1281;
    Tmp_754 := VcbOrFcbOrDcb;
    assume {:nonnull} FileObject_3 != 0;
    assume FileObject_3 > 0;
    assume {:nonnull} Tmp_754 != 0;
    assume Tmp_754 > 0;
    goto L4;

  L4:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} FileObject_3 != 0;
    assume {:nonnull} FileObject_3 != 0;
    assume FileObject_3 > 0;
    assume {:nonnull} FileObject_3 != 0;
    assume FileObject_3 > 0;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} FileObject_3 == 0;
    goto L1;

  anon11_Then:
    assume {:partition} Mem_T.INT4[Tmp_750] != 1281;
    Tmp_753 := VcbOrFcbOrDcb;
    assume {:nonnull} Tmp_753 != 0;
    assume Tmp_753 > 0;
    havoc Tmp_756;
    assume {:nonnull} FileObject_3 != 0;
    assume FileObject_3 > 0;
    assume {:nonnull} Tmp_756 != 0;
    assume Tmp_756 > 0;
    Tmp_755 := VcbOrFcbOrDcb;
    assume {:nonnull} Tmp_755 != 0;
    assume Tmp_755 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Tmp_755)], 32) != 0;
    assume {:nonnull} FileObject_3 != 0;
    assume FileObject_3 > 0;
    goto L4;

  anon12_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Tmp_755)], 32) == 0;
    goto L4;

  anon9_Then:
    assume {:partition} VcbOrFcbOrDcb == 0;
    goto L4;
}



procedure {:origName "FatPurgeReferencedFileObjects"} FatPurgeReferencedFileObjects(actual_IrpContext_36: int, actual_Fcb_7: int, actual_FlushType_1: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.SwapVpb__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPurgeReferencedFileObjects"} FatPurgeReferencedFileObjects(actual_IrpContext_36: int, actual_Fcb_7: int, actual_FlushType_1: int)
{
  var {:pointer} NextFcb_1: int;
  var {:pointer} OriginalFcb: int;
  var {:pointer} IrpContext_36: int;
  var {:pointer} Fcb_7: int;
  var {:scalar} FlushType_1: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_7451: int;

  anon0:
    call {:si_unique_call 698} vslice_dummy_var_110 := __HAVOC_malloc(4);
    IrpContext_36 := actual_IrpContext_36;
    Fcb_7 := actual_Fcb_7;
    FlushType_1 := actual_FlushType_1;
    OriginalFcb := Fcb_7;
    assume {:nonnull} Fcb_7 != 0;
    assume Fcb_7 > 0;
    havoc vslice_dummy_var_7451;
    call {:si_unique_call 699} FatFspClose#1(vslice_dummy_var_7451);
    goto L9;

  L9:
    call {:si_unique_call 700} NextFcb_1, Fcb_7 := FatPurgeReferencedFileObjects_loop_L9(NextFcb_1, OriginalFcb, IrpContext_36, Fcb_7, FlushType_1);
    goto L9_last;

  L9_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Fcb_7 != 0;
    call {:si_unique_call 701} NextFcb_1 := FatGetNextFcbTopDown(IrpContext_36, Fcb_7, OriginalFcb);
    assume {:nonnull} Fcb_7 != 0;
    assume Fcb_7 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L19;

  L19:
    Fcb_7 := NextFcb_1;
    goto L19_dummy;

  L19_dummy:
    assume false;
    return;

  anon6_Then:
    call {:si_unique_call 702} FatForceCacheMiss(IrpContext_36, Fcb_7, FlushType_1);
    goto L19;

  anon5_Then:
    assume {:partition} Fcb_7 == 0;
    return;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_111: int;

  anon0:
    call {:si_unique_call 703} vslice_dummy_var_111 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatAddMcbEntry"} FatAddMcbEntry(actual_Vcb_25: int, actual_Mcb_2: int, actual_Vbo_5: int, actual_Lbo_6: int, actual_SectorCount: int) returns (Tmp_761: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatAddMcbEntry"} FatAddMcbEntry(actual_Vcb_25: int, actual_Mcb_2: int, actual_Vbo_5: int, actual_Lbo_6: int, actual_SectorCount: int) returns (Tmp_761: int)
{
  var {:scalar} Vbo_5: int;
  var {:scalar} SectorCount: int;
  var vslice_dummy_var_112: int;

  anon0:
    Vbo_5 := actual_Vbo_5;
    SectorCount := actual_SectorCount;
    call {:si_unique_call 704} sdv_do_paged_code_check();
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} SectorCount != 0;
    SectorCount := SectorCount - 1;
    call {:si_unique_call 705} SectorCount := corral_nondet();
    SectorCount := SectorCount + 1;
    goto L7;

  L7:
    call {:si_unique_call 706} Vbo_5 := corral_nondet();
    call {:si_unique_call 707} vslice_dummy_var_112 := corral_nondet();
    call {:si_unique_call 708} Tmp_761 := corral_nondet();
    return;

  anon3_Then:
    assume {:partition} SectorCount == 0;
    goto L7;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_113: int;

  anon0:
    call {:si_unique_call 709} vslice_dummy_var_113 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatLookupLastMcbEntry"} FatLookupLastMcbEntry(actual_Vcb_26: int, actual_Mcb_3: int, actual_Vbo_6: int, actual_Lbo_7: int, actual_Index_2: int) returns (Tmp_767: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupLastMcbEntry"} FatLookupLastMcbEntry(actual_Vcb_26: int, actual_Mcb_3: int, actual_Vbo_6: int, actual_Lbo_7: int, actual_Index_2: int) returns (Tmp_767: int)
{
  var {:scalar} LiLbo: int;
  var {:scalar} Results: int;
  var {:scalar} LocalIndex: int;
  var {:pointer} Vbo_6: int;
  var {:pointer} Lbo_7: int;
  var {:pointer} Index_2: int;
  var boogieTmp: int;

  anon0:
    Vbo_6 := actual_Vbo_6;
    Lbo_7 := actual_Lbo_7;
    Index_2 := actual_Index_2;
    call {:si_unique_call 710} sdv_do_paged_code_check();
    LiLbo := 0;
    LocalIndex := 0;
    call {:si_unique_call 711} Results := corral_nondet();
    assume {:nonnull} Vbo_6 != 0;
    assume Vbo_6 > 0;
    call {:si_unique_call 712} boogieTmp := corral_nondet();
    Mem_T.INT4[Vbo_6] := boogieTmp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} LiLbo != -1;
    assume {:nonnull} Lbo_7 != 0;
    assume Lbo_7 > 0;
    call {:si_unique_call 713} boogieTmp := corral_nondet();
    Mem_T.INT4[Lbo_7] := boogieTmp;
    assume {:nonnull} Lbo_7 != 0;
    assume Lbo_7 > 0;
    call {:si_unique_call 714} boogieTmp := corral_nondet();
    Mem_T.INT4[Lbo_7] := boogieTmp;
    assume {:nonnull} Vbo_6 != 0;
    assume Vbo_6 > 0;
    call {:si_unique_call 715} boogieTmp := corral_nondet();
    Mem_T.INT4[Vbo_6] := boogieTmp;
    goto L23;

  L23:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Index_2 != 0;
    assume {:nonnull} Index_2 != 0;
    assume Index_2 > 0;
    Mem_T.INT4[Index_2] := LocalIndex;
    goto L24;

  L24:
    Tmp_767 := Results;
    return;

  anon5_Then:
    assume {:partition} Index_2 == 0;
    goto L24;

  anon6_Then:
    assume {:partition} LiLbo == -1;
    assume {:nonnull} Lbo_7 != 0;
    assume Lbo_7 > 0;
    Mem_T.INT4[Lbo_7] := 0;
    goto L23;
}



procedure {:origName "FatUnlockVolumeInternal"} FatUnlockVolumeInternal(actual_IrpContext_37: int, actual_Vcb_27: int, actual_FileObject_4: int) returns (Tmp_769: int);
  modifies alloc, Mem_T.INT4, Mem_T.VcbState__VCB, sdv_irql_current;
  free ensures {:va_keep} Tmp_769 == 0 || Tmp_769 == -1073741782;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatUnlockVolumeInternal"} FatUnlockVolumeInternal(actual_IrpContext_37: int, actual_Vcb_27: int, actual_FileObject_4: int) returns (Tmp_769: int)
{
  var {:scalar} SavedIrql_3: int;
  var {:pointer} Tmp_770: int;
  var {:scalar} Status_6: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} Tmp_772: int;
  var {:pointer} Tmp_773: int;
  var {:pointer} Vcb_27: int;
  var {:pointer} FileObject_4: int;

  anon0:
    Vcb_27 := actual_Vcb_27;
    FileObject_4 := actual_FileObject_4;
    Status_6 := -1073741782;
    call {:si_unique_call 716} Tmp_772 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    Mem_T.INT4[Tmp_772] := SavedIrql_3;
    call {:si_unique_call 717} IoAcquireVpbSpinLock(Tmp_772);
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    SavedIrql_3 := Mem_T.INT4[Tmp_772];
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    havoc Tmp_773;
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    havoc Tmp_771;
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    havoc Tmp_770;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    assume {:nonnull} Tmp_771 != 0;
    assume Tmp_771 > 0;
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_27)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_27)], BNOT(1));
    assume {:nonnull} Vcb_27 != 0;
    assume Vcb_27 > 0;
    Status_6 := 0;
    goto L10;

  L10:
    call {:si_unique_call 718} IoReleaseVpbSpinLock(SavedIrql_3);
    Tmp_769 := Status_6;
    return;

  anon5_Then:
    goto L10;

  anon6_Then:
    goto L10;
}



procedure {:origName "FatIsBootSectorFat"} FatIsBootSectorFat(actual_BootSector: int) returns (Tmp_774: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_774 == 0 || Tmp_774 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatIsBootSectorFat"} FatIsBootSectorFat(actual_BootSector: int) returns (Tmp_774: int)
{
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} Tmp_777: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:pointer} Tmp_781: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_784: int;
  var {:pointer} Tmp_785: int;
  var {:pointer} Tmp_786: int;
  var {:pointer} Tmp_787: int;
  var {:pointer} Tmp_788: int;
  var {:pointer} Tmp_789: int;
  var {:pointer} Tmp_790: int;
  var {:pointer} Tmp_791: int;
  var {:pointer} Tmp_792: int;
  var {:pointer} Tmp_793: int;
  var {:pointer} Tmp_794: int;
  var {:pointer} Tmp_795: int;
  var {:pointer} Tmp_796: int;
  var {:pointer} Tmp_797: int;
  var {:pointer} Tmp_798: int;
  var {:pointer} Tmp_799: int;
  var {:pointer} Tmp_800: int;
  var {:pointer} Tmp_801: int;
  var {:pointer} Tmp_802: int;
  var {:pointer} Tmp_803: int;
  var {:pointer} Tmp_804: int;
  var {:pointer} Tmp_805: int;
  var {:pointer} Tmp_806: int;
  var {:pointer} Tmp_807: int;
  var {:pointer} Tmp_808: int;
  var {:pointer} Tmp_809: int;
  var {:pointer} Tmp_810: int;
  var {:pointer} Tmp_811: int;
  var {:pointer} Tmp_812: int;
  var {:pointer} Tmp_813: int;
  var {:pointer} Tmp_814: int;
  var {:pointer} Tmp_815: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} Tmp_817: int;
  var {:pointer} Tmp_818: int;
  var {:pointer} Tmp_819: int;
  var {:pointer} Tmp_820: int;
  var {:pointer} Tmp_821: int;
  var {:pointer} Tmp_822: int;
  var {:pointer} Tmp_823: int;
  var {:scalar} Bpb: int;
  var {:pointer} Tmp_824: int;
  var {:pointer} Tmp_825: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} Tmp_827: int;
  var {:pointer} Tmp_828: int;
  var {:pointer} Tmp_829: int;
  var {:pointer} Tmp_830: int;
  var {:pointer} Tmp_831: int;
  var {:pointer} Tmp_832: int;
  var {:scalar} Result_1: int;
  var {:pointer} BootSector: int;

  anon0:
    call {:si_unique_call 719} Bpb := __HAVOC_malloc(88);
    BootSector := actual_BootSector;
    call {:si_unique_call 720} Tmp_776 := __HAVOC_malloc(8);
    call {:si_unique_call 721} Tmp_778 := __HAVOC_malloc(8);
    call {:si_unique_call 722} Tmp_779 := __HAVOC_malloc(8);
    call {:si_unique_call 723} Tmp_788 := __HAVOC_malloc(16);
    call {:si_unique_call 724} Tmp_789 := __HAVOC_malloc(16);
    call {:si_unique_call 725} Tmp_790 := __HAVOC_malloc(8);
    call {:si_unique_call 726} Tmp_791 := __HAVOC_malloc(16);
    call {:si_unique_call 727} Tmp_792 := __HAVOC_malloc(8);
    call {:si_unique_call 728} Tmp_798 := __HAVOC_malloc(4);
    call {:si_unique_call 729} Tmp_800 := __HAVOC_malloc(8);
    call {:si_unique_call 730} Tmp_801 := __HAVOC_malloc(8);
    call {:si_unique_call 731} Tmp_804 := __HAVOC_malloc(16);
    call {:si_unique_call 732} Tmp_806 := __HAVOC_malloc(8);
    call {:si_unique_call 733} Tmp_811 := __HAVOC_malloc(8);
    call {:si_unique_call 734} Tmp_814 := __HAVOC_malloc(12);
    call {:si_unique_call 735} Tmp_815 := __HAVOC_malloc(12);
    call {:si_unique_call 736} Tmp_818 := __HAVOC_malloc(8);
    call {:si_unique_call 737} Tmp_821 := __HAVOC_malloc(12);
    call {:si_unique_call 738} Tmp_825 := __HAVOC_malloc(4);
    call {:si_unique_call 739} Tmp_826 := __HAVOC_malloc(8);
    call {:si_unique_call 740} Tmp_830 := __HAVOC_malloc(4);
    Result_1 := 1;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_795 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_795 != 0;
    assume Tmp_795 > 0;
    havoc Tmp_790;
    Tmp_824 := Tmp_790;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_824 != 0;
    assume Tmp_824 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_784 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_784 != 0;
    assume Tmp_784 > 0;
    havoc Tmp_830;
    Tmp_809 := Tmp_830;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_809 != 0;
    assume Tmp_809 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_799 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_799 != 0;
    assume Tmp_799 > 0;
    havoc Tmp_818;
    Tmp_812 := Tmp_818;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_813 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_813 != 0;
    assume Tmp_813 > 0;
    havoc Tmp_825;
    Tmp_819 := Tmp_825;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_819 != 0;
    assume Tmp_819 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_829 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    havoc Tmp_801;
    Tmp_785 := Tmp_801;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_785 != 0;
    assume Tmp_785 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_831 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    havoc Tmp_826;
    Tmp_775 := Tmp_826;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_775 != 0;
    assume Tmp_775 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_797 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_797 != 0;
    assume Tmp_797 > 0;
    havoc Tmp_798;
    Tmp_787 := Tmp_798;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_796 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    havoc Tmp_800;
    Tmp_817 := Tmp_800;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_817 != 0;
    assume Tmp_817 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_820 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    havoc Tmp_792;
    Tmp_802 := Tmp_792;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_780 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_780 != 0;
    assume Tmp_780 > 0;
    havoc Tmp_779;
    Tmp_807 := Tmp_779;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_793 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_793 != 0;
    assume Tmp_793 > 0;
    havoc Tmp_804;
    Tmp_803 := Tmp_804;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_803 != 0;
    assume Tmp_803 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_777 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_777 != 0;
    assume Tmp_777 > 0;
    havoc Tmp_791;
    Tmp_794 := Tmp_791;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_783 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_783 != 0;
    assume Tmp_783 > 0;
    havoc Tmp_789;
    Tmp_805 := Tmp_789;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_805 != 0;
    assume Tmp_805 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_832 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    havoc Tmp_776;
    Tmp_827 := Tmp_776;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_786 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_786 != 0;
    assume Tmp_786 > 0;
    havoc Tmp_806;
    Tmp_816 := Tmp_806;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_816 != 0;
    assume Tmp_816 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_822 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_822 != 0;
    assume Tmp_822 > 0;
    havoc Tmp_788;
    Tmp_781 := Tmp_788;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_781 != 0;
    assume Tmp_781 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_823 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_823 != 0;
    assume Tmp_823 > 0;
    havoc Tmp_778;
    Tmp_810 := Tmp_778;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    Tmp_808 := PackedBpb__PACKED_BOOT_SECTOR(BootSector);
    assume {:nonnull} Tmp_808 != 0;
    assume Tmp_808 > 0;
    havoc Tmp_811;
    Tmp_828 := Tmp_811;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto L25;

  L25:
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    havoc Tmp_821;
    assume {:nonnull} Tmp_821 != 0;
    assume Tmp_821 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} Mem_T.INT4[Tmp_821] != 233;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    havoc Tmp_814;
    assume {:nonnull} Tmp_814 != 0;
    assume Tmp_814 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} Mem_T.INT4[Tmp_814] != 235;
    assume {:nonnull} BootSector != 0;
    assume BootSector > 0;
    havoc Tmp_815;
    assume {:nonnull} Tmp_815 != 0;
    assume Tmp_815 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} Mem_T.INT4[Tmp_815] != 73;
    Result_1 := 0;
    goto L31;

  L31:
    Tmp_774 := Result_1;
    return;

  anon123_Then:
    assume {:partition} Mem_T.INT4[Tmp_815] == 73;
    goto L27;

  L27:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    Result_1 := 0;
    goto L31;

  anon89_Then:
    goto L32;

  L32:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    Result_1 := 0;
    goto L31;

  anon97_Then:
    goto L39;

  L39:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto L53;

  L53:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    goto L55;

  L55:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    goto L65;

  L65:
    Result_1 := 0;
    goto L31;

  anon115_Then:
    goto L56;

  L56:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    Result_1 := 0;
    goto L31;

  anon117_Then:
    goto L69;

  L69:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    Result_1 := 0;
    goto L31;

  anon118_Then:
    goto L31;

  anon116_Then:
    goto L31;

  anon104_Then:
    goto L69;

  anon114_Then:
    goto L56;

  anon113_Then:
    goto L56;

  anon112_Then:
    goto L65;

  anon111_Then:
    goto L56;

  anon110_Then:
    goto L56;

  anon109_Then:
    goto L56;

  anon108_Then:
    goto L56;

  anon107_Then:
    goto L56;

  anon106_Then:
    goto L56;

  anon105_Then:
    goto L56;

  anon103_Then:
    goto L56;

  anon101_Then:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    goto L74;

  L74:
    Result_1 := 0;
    goto L31;

  anon119_Then:
    goto L55;

  anon102_Then:
    goto L74;

  anon99_Then:
    assume {:nonnull} Bpb != 0;
    assume Bpb > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    Result_1 := 0;
    goto L31;

  anon100_Then:
    goto L53;

  anon98_Then:
    Result_1 := 0;
    goto L31;

  anon90_Then:
    Result_1 := 0;
    goto L31;

  anon96_Then:
    goto L39;

  anon95_Then:
    goto L39;

  anon94_Then:
    goto L39;

  anon93_Then:
    goto L39;

  anon92_Then:
    goto L39;

  anon91_Then:
    goto L39;

  anon84_Then:
    goto L39;

  anon88_Then:
    goto L32;

  anon87_Then:
    goto L32;

  anon86_Then:
    goto L32;

  anon85_Then:
    goto L32;

  anon83_Then:
    goto L32;

  anon122_Then:
    assume {:partition} Mem_T.INT4[Tmp_814] == 235;
    goto L27;

  anon121_Then:
    assume {:partition} Mem_T.INT4[Tmp_821] == 233;
    goto L27;

  anon120_Then:
    goto L25;
}



procedure {:origName "FatLookupMcbEntry"} FatLookupMcbEntry(actual_Vcb_28: int, actual_Mcb_4: int, actual_Vbo_7: int, actual_Lbo_8: int, actual_SectorCount_1: int, actual_Index_3: int) returns (Tmp_833: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupMcbEntry"} FatLookupMcbEntry(actual_Vcb_28: int, actual_Mcb_4: int, actual_Vbo_7: int, actual_Lbo_8: int, actual_SectorCount_1: int, actual_Index_3: int) returns (Tmp_833: int)
{
  var {:dopa} {:scalar} LiSectorCount: int;
  var {:scalar} Remainder: int;
  var {:scalar} LiLbo_1: int;
  var {:scalar} Results_1: int;
  var {:pointer} Lbo_8: int;
  var {:pointer} SectorCount_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_114: int;

  anon0:
    call {:si_unique_call 741} LiSectorCount := __HAVOC_malloc(4);
    Lbo_8 := actual_Lbo_8;
    SectorCount_1 := actual_SectorCount_1;
    LiLbo_1 := 0;
    assume {:nonnull} LiSectorCount != 0;
    assume LiSectorCount > 0;
    Mem_T.INT4[LiSectorCount] := 0;
    call {:si_unique_call 742} Remainder := corral_nondet();
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} SectorCount_1 != 0;
    goto L13;

  L13:
    call {:si_unique_call 743} vslice_dummy_var_114 := corral_nondet();
    call {:si_unique_call 744} Results_1 := corral_nondet();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} LiLbo_1 != -1;
    assume {:nonnull} Lbo_8 != 0;
    assume Lbo_8 > 0;
    call {:si_unique_call 745} boogieTmp := corral_nondet();
    Mem_T.INT4[Lbo_8] := boogieTmp;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Results_1 != 0;
    assume {:nonnull} Lbo_8 != 0;
    assume Lbo_8 > 0;
    Mem_T.INT4[Lbo_8] := Mem_T.INT4[Lbo_8] + Remainder;
    goto L22;

  L22:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} SectorCount_1 != 0;
    assume {:nonnull} LiSectorCount != 0;
    assume LiSectorCount > 0;
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    Mem_T.INT4[SectorCount_1] := Mem_T.INT4[LiSectorCount];
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[SectorCount_1] != 0;
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    call {:si_unique_call 746} boogieTmp := corral_nondet();
    Mem_T.INT4[SectorCount_1] := boogieTmp;
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[SectorCount_1] != 0;
    goto L30;

  L30:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Results_1 != 0;
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    Mem_T.INT4[SectorCount_1] := Mem_T.INT4[SectorCount_1] - Remainder;
    goto L24;

  L24:
    Tmp_833 := Results_1;
    return;

  anon17_Then:
    assume {:partition} Results_1 == 0;
    goto L24;

  anon21_Then:
    assume {:partition} Mem_T.INT4[SectorCount_1] == 0;
    assume {:nonnull} SectorCount_1 != 0;
    assume SectorCount_1 > 0;
    Mem_T.INT4[SectorCount_1] := -1;
    goto L30;

  anon20_Then:
    assume {:partition} Mem_T.INT4[SectorCount_1] == 0;
    goto L24;

  anon16_Then:
    assume {:partition} SectorCount_1 == 0;
    goto L24;

  anon19_Then:
    assume {:partition} Results_1 == 0;
    goto L22;

  anon15_Then:
    assume {:partition} LiLbo_1 == -1;
    assume {:nonnull} Lbo_8 != 0;
    assume Lbo_8 > 0;
    Mem_T.INT4[Lbo_8] := 0;
    goto L22;

  anon18_Then:
    assume {:partition} SectorCount_1 == 0;
    goto L13;
}



procedure {:origName "FatLockVolumeInternal"} FatLockVolumeInternal(actual_IrpContext_38: int, actual_Vcb_29: int, actual_FileObject_5: int) returns (Tmp_837: int);
  modifies Mem_T.Flags__IRP_CONTEXT, alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, sdv_irql_current, Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, s, Mem_T.Buffer__RTL_BITMAP, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} Tmp_837 == -1073741670 || Tmp_837 == 0 || Tmp_837 == -1073741790;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLockVolumeInternal"} FatLockVolumeInternal(actual_IrpContext_38: int, actual_Vcb_29: int, actual_FileObject_5: int) returns (Tmp_837: int)
{
  var {:scalar} SavedIrql_4: int;
  var {:scalar} RemainingUserReferences: int;
  var {:pointer} Tmp_838: int;
  var {:pointer} Tmp_839: int;
  var {:scalar} sdv_305: int;
  var {:scalar} Status_7: int;
  var {:pointer} Tmp_840: int;
  var {:scalar} Tmp_841: int;
  var {:pointer} Tmp_842: int;
  var {:pointer} Tmp_843: int;
  var {:scalar} sdv_309: int;
  var {:scalar} Tmp_844: int;
  var {:pointer} IrpContext_38: int;
  var {:pointer} Vcb_29: int;
  var {:pointer} FileObject_5: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;

  anon0:
    IrpContext_38 := actual_IrpContext_38;
    Vcb_29 := actual_Vcb_29;
    FileObject_5 := actual_FileObject_5;
    Status_7 := 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} FileObject_5 != 0;
    Tmp_844 := 1;
    goto L10;

  L10:
    RemainingUserReferences := Tmp_844;
    assume {:nonnull} IrpContext_38 != 0;
    assume IrpContext_38 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_38)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_38)], 2);
    call {:si_unique_call 747} sdv_305 := FatIsHandleCountZero(IrpContext_38, Vcb_29);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_305 != 0;
    call {:si_unique_call 748} vslice_dummy_var_115 := FatFlushFat(IrpContext_38, Vcb_29);
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    call {:si_unique_call 749} FatPurgeReferencedFileObjects(IrpContext_38, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_29)], 1);
    call {:si_unique_call 750} FatCloseEaFile(IrpContext_38, Vcb_29, 1);
    call {:si_unique_call 751} ExReleaseResourceLite(0);
    call {:si_unique_call 752} Status_7 := CcWaitForCurrentLazyWriterActivity();
    call {:si_unique_call 753} vslice_dummy_var_116 := FatAcquireExclusiveVcb(IrpContext_38, Vcb_29);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Status_7 >= 0;
    call {:si_unique_call 754} FatFspClose#1(Vcb_29);
    call {:si_unique_call 755} Tmp_838 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    Mem_T.INT4[Tmp_838] := SavedIrql_4;
    call {:si_unique_call 756} IoAcquireVpbSpinLock(Tmp_838);
    assume {:nonnull} Tmp_838 != 0;
    assume Tmp_838 > 0;
    SavedIrql_4 := Mem_T.INT4[Tmp_838];
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    havoc Tmp_839;
    assume {:nonnull} Tmp_839 != 0;
    assume Tmp_839 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L46;

  L46:
    Status_7 := -1073741790;
    goto L47;

  L47:
    call {:si_unique_call 757} IoReleaseVpbSpinLock(SavedIrql_4);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Status_7 >= 0;
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], 4) != 0;
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], 16) == 0;
    call {:si_unique_call 758} sdv_309 := corral_nondet();
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_309 == 0;
    call {:si_unique_call 759} FatMarkVolume#1(IrpContext_38, Vcb_29, 0);
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], BNOT(4));
    goto L51;

  L51:
    Tmp_837 := Status_7;
    goto L1;

  L1:
    return;

  anon28_Then:
    assume {:partition} sdv_309 != 0;
    goto L51;

  anon27_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], 16) != 0;
    goto L51;

  anon26_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], 4) == 0;
    goto L51;

  anon25_Then:
    assume {:partition} 0 > Status_7;
    goto L51;

  anon32_Then:
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    havoc Tmp_842;
    assume {:nonnull} Tmp_842 != 0;
    assume Tmp_842 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} FileObject_5 != 0;
    Tmp_841 := 1;
    goto L65;

  L65:
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    havoc Tmp_840;
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    havoc Tmp_843;
    assume {:nonnull} Tmp_840 != 0;
    assume Tmp_840 > 0;
    assume {:nonnull} Tmp_843 != 0;
    assume Tmp_843 > 0;
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_29)], 1);
    assume {:nonnull} Vcb_29 != 0;
    assume Vcb_29 > 0;
    goto L47;

  anon30_Then:
    goto L46;

  anon29_Then:
    assume {:partition} FileObject_5 == 0;
    Tmp_841 := 0;
    goto L65;

  anon33_Then:
    goto L46;

  anon24_Then:
    assume {:partition} 0 > Status_7;
    Tmp_837 := Status_7;
    goto L1;

  anon23_Then:
    assume {:partition} sdv_305 == 0;
    Tmp_837 := -1073741790;
    goto L1;

  anon31_Then:
    assume {:partition} FileObject_5 == 0;
    Tmp_844 := 0;
    goto L10;
}



procedure {:origName "FatRemoveMcbEntry"} FatRemoveMcbEntry(actual_Vcb_30: int, actual_Mcb_5: int, actual_Vbo_8: int, actual_SectorCount_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatRemoveMcbEntry"} FatRemoveMcbEntry(actual_Vcb_30: int, actual_Mcb_5: int, actual_Vbo_8: int, actual_SectorCount_2: int)
{
  var {:scalar} Vbo_8: int;
  var {:scalar} SectorCount_2: int;
  var vslice_dummy_var_117: int;

  anon0:
    call {:si_unique_call 760} vslice_dummy_var_117 := __HAVOC_malloc(4);
    Vbo_8 := actual_Vbo_8;
    SectorCount_2 := actual_SectorCount_2;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} SectorCount_2 != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SectorCount_2 != -1;
    SectorCount_2 := SectorCount_2 - 1;
    call {:si_unique_call 761} SectorCount_2 := corral_nondet();
    SectorCount_2 := SectorCount_2 + 1;
    goto L4;

  L4:
    call {:si_unique_call 762} Vbo_8 := corral_nondet();
    return;

  anon6_Then:
    assume {:partition} SectorCount_2 == -1;
    goto L4;

  anon5_Then:
    assume {:partition} SectorCount_2 == 0;
    goto L4;
}



procedure {:origName "FatGetNextMcbEntry"} FatGetNextMcbEntry(actual_Vcb_31: int, actual_Mcb_6: int, actual_RunIndex: int, actual_Vbo_9: int, actual_Lbo_9: int, actual_SectorCount_3: int) returns (Tmp_849: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetNextMcbEntry"} FatGetNextMcbEntry(actual_Vcb_31: int, actual_Mcb_6: int, actual_RunIndex: int, actual_Vbo_9: int, actual_Lbo_9: int, actual_SectorCount_3: int) returns (Tmp_849: int)
{
  var {:scalar} LiSectorCount_1: int;
  var {:scalar} LiLbo_2: int;
  var {:scalar} Results_2: int;
  var {:pointer} Vbo_9: int;
  var {:pointer} Lbo_9: int;
  var {:pointer} SectorCount_3: int;
  var boogieTmp: int;

  anon0:
    Vbo_9 := actual_Vbo_9;
    Lbo_9 := actual_Lbo_9;
    SectorCount_3 := actual_SectorCount_3;
    call {:si_unique_call 763} sdv_do_paged_code_check();
    LiLbo_2 := 0;
    call {:si_unique_call 764} Results_2 := corral_nondet();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Results_2 != 0;
    assume {:nonnull} Vbo_9 != 0;
    assume Vbo_9 > 0;
    call {:si_unique_call 765} boogieTmp := corral_nondet();
    Mem_T.INT4[Vbo_9] := boogieTmp;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} LiLbo_2 != -1;
    assume {:nonnull} Lbo_9 != 0;
    assume Lbo_9 > 0;
    call {:si_unique_call 766} boogieTmp := corral_nondet();
    Mem_T.INT4[Lbo_9] := boogieTmp;
    goto L22;

  L22:
    assume {:nonnull} SectorCount_3 != 0;
    assume SectorCount_3 > 0;
    call {:si_unique_call 767} boogieTmp := corral_nondet();
    Mem_T.INT4[SectorCount_3] := boogieTmp;
    assume {:nonnull} SectorCount_3 != 0;
    assume SectorCount_3 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[SectorCount_3] == 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} LiSectorCount_1 != 0;
    assume {:nonnull} SectorCount_3 != 0;
    assume SectorCount_3 > 0;
    Mem_T.INT4[SectorCount_3] := -1;
    goto L17;

  L17:
    Tmp_849 := Results_2;
    return;

  anon10_Then:
    assume {:partition} LiSectorCount_1 == 0;
    goto L17;

  anon12_Then:
    assume {:partition} Mem_T.INT4[SectorCount_3] != 0;
    goto L17;

  anon11_Then:
    assume {:partition} LiLbo_2 == -1;
    assume {:nonnull} Lbo_9 != 0;
    assume Lbo_9 > 0;
    Mem_T.INT4[Lbo_9] := 0;
    goto L22;

  anon9_Then:
    assume {:partition} Results_2 == 0;
    goto L17;
}



procedure {:origName "FatFlushAndCleanVolume"} FatFlushAndCleanVolume(actual_IrpContext_39: int, actual_Irp_7: int, actual_Vcb_32: int, actual_FlushType_2: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, sdv_irql_current, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, Mem_T.Buffer__RTL_BITMAP, Mem_T.Flags__IRP_CONTEXT, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, s, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFlushAndCleanVolume"} FatFlushAndCleanVolume(actual_IrpContext_39: int, actual_Irp_7: int, actual_Vcb_32: int, actual_FlushType_2: int)
{
  var {:pointer} IrpContext_39: int;
  var {:pointer} Irp_7: int;
  var {:pointer} Vcb_32: int;
  var {:scalar} FlushType_2: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_7452: int;

  anon0:
    call {:si_unique_call 768} vslice_dummy_var_118 := __HAVOC_malloc(4);
    IrpContext_39 := actual_IrpContext_39;
    Irp_7 := actual_Irp_7;
    Vcb_32 := actual_Vcb_32;
    FlushType_2 := actual_FlushType_2;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FlushType_2 != 0;
    call {:si_unique_call 769} vslice_dummy_var_119 := FatFlushVolume(IrpContext_39, Vcb_32, FlushType_2);
    goto L4;

  L4:
    call {:si_unique_call 770} FatCloseEaFile(IrpContext_39, Vcb_32, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} FlushType_2 != 0;
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    havoc vslice_dummy_var_7452;
    call {:si_unique_call 771} vslice_dummy_var_120 := FatHijackIrpAndFlushDevice(IrpContext_39, Irp_7, vslice_dummy_var_7452);
    goto L11;

  L11:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} FlushType_2 != 3;
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    call {:si_unique_call 772} FatPurgeReferencedFileObjects(IrpContext_39, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_32)], 0);
    goto L15;

  L15:
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 4) != 0;
    call {:si_unique_call 773} vslice_dummy_var_121 := KeCancelTimer(0);
    call {:si_unique_call 774} vslice_dummy_var_122 := KeRemoveQueueDpc(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} FlushType_2 != 0;
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 16) != 0;
    goto L31;

  L31:
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 2) != 0;
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 2048) == 0;
    call {:si_unique_call 775} vslice_dummy_var_123 := FatToggleMediaEjectDisable(IrpContext_39, Vcb_32, 0);
    goto L19;

  L19:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} FlushType_2 != 3;
    call {:si_unique_call 776} vslice_dummy_var_124 := corral_nondet();
    call {:si_unique_call 777} FatTearDownAllocationSupport(IrpContext_39, Vcb_32);
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} FlushType_2 == 3;
    goto L1;

  anon27_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 2048) != 0;
    goto L19;

  anon26_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 2) == 0;
    goto L19;

  anon25_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 16) == 0;
    call {:si_unique_call 778} FatMarkVolume#1(IrpContext_39, Vcb_32, 0);
    assume {:nonnull} Vcb_32 != 0;
    assume Vcb_32 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], BNOT(4));
    goto L31;

  anon24_Then:
    assume {:partition} FlushType_2 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_32)], 4) == 0;
    goto L19;

  anon21_Then:
    assume {:partition} FlushType_2 == 3;
    goto L15;

  anon20_Then:
    assume {:partition} FlushType_2 == 0;
    goto L11;

  anon19_Then:
    assume {:partition} FlushType_2 == 0;
    goto L4;
}



procedure {:origName "_sdv_init26"} _sdv_init26();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init26"} _sdv_init26()
{
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 779} vslice_dummy_var_125 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatFlushDirectory"} FatFlushDirectory(actual_IrpContext_40: int, actual_Dcb_3: int, actual_FlushType_3: int) returns (Tmp_855: int);
  modifies alloc, Mem_T.VcbState__VCB, Mem_T.FcbState__FCB, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFlushDirectory"} FatFlushDirectory(actual_IrpContext_40: int, actual_Dcb_3: int, actual_FlushType_3: int) returns (Tmp_855: int)
{
  var {:scalar} ReturnStatus: int;
  var {:pointer} NextFcb_2: int;
  var {:pointer} Fcb_8: int;
  var {:scalar} ClearWaitOnExit: int;
  var {:pointer} Dirent_1: int;
  var {:scalar} Status_8: int;
  var {:pointer} DirentBcb: int;
  var {:pointer} Tmp_856: int;
  var {:pointer} Tmp_857: int;
  var {:pointer} Vcb_33: int;
  var {:scalar} ClearWriteThroughOnExit: int;
  var {:pointer} IrpContext_40: int;
  var {:pointer} Dcb_3: int;
  var {:scalar} FlushType_3: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_7453: int;

  anon0:
    call {:si_unique_call 780} Dirent_1 := __HAVOC_malloc(4);
    call {:si_unique_call 781} DirentBcb := __HAVOC_malloc(4);
    IrpContext_40 := actual_IrpContext_40;
    Dcb_3 := actual_Dcb_3;
    FlushType_3 := actual_FlushType_3;
    assume {:nonnull} DirentBcb != 0;
    assume DirentBcb > 0;
    ReturnStatus := 0;
    ClearWriteThroughOnExit := 0;
    ClearWaitOnExit := 0;
    call {:si_unique_call 782} sdv_do_paged_code_check();
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 4) != 0;
    goto L21;

  L21:
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 2) != 0;
    goto L23;

  L23:
    assume {:nonnull} Dcb_3 != 0;
    assume Dcb_3 > 0;
    havoc Vcb_33;
    Fcb_8 := Dcb_3;
    goto L25;

  L25:
    call {:si_unique_call 783} ReturnStatus, NextFcb_2, Fcb_8, Status_8, Tmp_856, vslice_dummy_var_126 := FatFlushDirectory_loop_L25(ReturnStatus, NextFcb_2, Fcb_8, Dirent_1, Status_8, DirentBcb, Tmp_856, Vcb_33, IrpContext_40, Dcb_3, FlushType_3, vslice_dummy_var_126);
    goto L25_last;

  L25_last:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Fcb_8 != 0;
    call {:si_unique_call 784} NextFcb_2 := FatGetNextFcbTopDown(IrpContext_40, Fcb_8, Dcb_3);
    Tmp_856 := Fcb_8;
    assume {:nonnull} Tmp_856 != 0;
    assume Tmp_856 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.INT4[Tmp_856] == 1282;
    assume {:nonnull} Vcb_33 != 0;
    assume Vcb_33 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 1) != 0;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L35;

  L35:
    call {:si_unique_call 785} vslice_dummy_var_126 := FatAcquireExclusiveFcb(IrpContext_40, Fcb_8);
    assume {:nonnull} Vcb_33 != 0;
    assume Vcb_33 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_33)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_33)], BNOT(256));
    call {:si_unique_call 786} FatVerifyFcb(IrpContext_40, Fcb_8);
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L78;

  L78:
    assume {:nonnull} DirentBcb != 0;
    assume DirentBcb > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} DirentBcb != 0;
    assume DirentBcb > 0;
    goto L79;

  L79:
    assume {:nonnull} Vcb_33 != 0;
    assume Vcb_33 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_33)], 256) == 0;
    call {:si_unique_call 787} ExReleaseResourceLite(0);
    goto L32;

  L32:
    Fcb_8 := NextFcb_2;
    goto L32_dummy;

  L32_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_33)], 256) != 0;
    goto L32;

  anon53_Then:
    goto L79;

  anon51_Then:
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 2) != 0;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    havoc vslice_dummy_var_7453;
    call {:si_unique_call 788} FatTruncateFileAllocation(IrpContext_40, Fcb_8, vslice_dummy_var_7453);
    goto L87;

  L87:
    call {:si_unique_call 789} FatGetDirentFromFcbOrDcb(IrpContext_40, Fcb_8, Dirent_1, DirentBcb);
    assume {:nonnull} Dirent_1 != 0;
    assume Dirent_1 > 0;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} Dirent_1 != 0;
    assume Dirent_1 > 0;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto L94;

  L94:
    assume {:nonnull} DirentBcb != 0;
    assume DirentBcb > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} DirentBcb != 0;
    assume DirentBcb > 0;
    goto L96;

  L96:
    call {:si_unique_call 790} Status_8 := FatFlushFile(IrpContext_40, Fcb_8, FlushType_3);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} Status_8 < 0;
    ReturnStatus := Status_8;
    goto L78;

  anon57_Then:
    assume {:partition} 0 <= Status_8;
    goto L78;

  anon56_Then:
    goto L96;

  anon55_Then:
    goto L94;

  anon52_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 2) == 0;
    goto L87;

  anon50_Then:
    goto L32;

  anon49_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 1) == 0;
    goto L35;

  anon48_Then:
    goto L32;

  anon65_Then:
    assume {:partition} Mem_T.INT4[Tmp_856] != 1282;
    goto L32;

  anon47_Then:
    assume {:partition} Fcb_8 == 0;
    Fcb_8 := Dcb_3;
    goto L106;

  L106:
    call {:si_unique_call 791} ReturnStatus, NextFcb_2, Fcb_8, Status_8, Tmp_857 := FatFlushDirectory_loop_L106(ReturnStatus, NextFcb_2, Fcb_8, Status_8, Tmp_857, IrpContext_40, Dcb_3, FlushType_3);
    goto L106_last;

  L106_last:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} Fcb_8 != 0;
    call {:si_unique_call 792} NextFcb_2 := FatGetNextFcbTopDown(IrpContext_40, Fcb_8, Dcb_3);
    Tmp_857 := Fcb_8;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.INT4[Tmp_857] != 1282;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 1) != 0;
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L117;

  L117:
    call {:si_unique_call 793} FatVerifyFcb(IrpContext_40, Fcb_8);
    assume {:nonnull} Fcb_8 != 0;
    assume Fcb_8 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    call {:si_unique_call 794} Status_8 := FatFlushFile(IrpContext_40, Fcb_8, FlushType_3);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Status_8 < 0;
    ReturnStatus := Status_8;
    goto L115;

  L115:
    Fcb_8 := NextFcb_2;
    goto L115_dummy;

  L115_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} 0 <= Status_8;
    goto L115;

  anon61_Then:
    goto L115;

  anon60_Then:
    goto L115;

  anon59_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_8)], 1) == 0;
    goto L117;

  anon66_Then:
    assume {:partition} Mem_T.INT4[Tmp_857] == 1282;
    goto L115;

  anon58_Then:
    assume {:partition} Fcb_8 == 0;
    call {:si_unique_call 795} FatUnpinRepinnedBcbs(IrpContext_40);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClearWriteThroughOnExit != 0;
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], BNOT(4));
    goto L148;

  L148:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} ClearWaitOnExit != 0;
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], BNOT(2));
    goto L150;

  L150:
    Tmp_855 := ReturnStatus;
    return;

  anon64_Then:
    assume {:partition} ClearWaitOnExit == 0;
    goto L150;

  anon63_Then:
    assume {:partition} ClearWriteThroughOnExit == 0;
    goto L148;

  anon46_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 2) == 0;
    ClearWaitOnExit := 1;
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 2);
    goto L23;

  anon45_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 4) == 0;
    ClearWriteThroughOnExit := 1;
    assume {:nonnull} IrpContext_40 != 0;
    assume IrpContext_40 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_40)], 4);
    goto L21;
}



procedure {:origName "FatFlushVolume"} FatFlushVolume(actual_IrpContext_41: int, actual_Vcb_34: int, actual_FlushType_4: int) returns (Tmp_859: int);
  modifies alloc, Mem_T.VcbState__VCB, Mem_T.FcbState__FCB, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFlushVolume"} FatFlushVolume(actual_IrpContext_41: int, actual_Vcb_34: int, actual_FlushType_4: int) returns (Tmp_859: int)
{
  var {:scalar} ReturnStatus_1: int;
  var {:scalar} Status_9: int;
  var {:pointer} IrpContext_41: int;
  var {:pointer} Vcb_34: int;
  var {:scalar} FlushType_4: int;
  var vslice_dummy_var_127: int;

  anon0:
    IrpContext_41 := actual_IrpContext_41;
    Vcb_34 := actual_Vcb_34;
    FlushType_4 := actual_FlushType_4;
    ReturnStatus_1 := 0;
    call {:si_unique_call 796} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_34 != 0;
    assume Vcb_34 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 16384) != 0;
    Tmp_859 := 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 16384) == 0;
    assume {:nonnull} Vcb_34 != 0;
    assume Vcb_34 > 0;
    call {:si_unique_call 797} Status_9 := FatFlushDirectory(IrpContext_41, Mem_T.RootDcb__VCB[RootDcb__VCB(Vcb_34)], FlushType_4);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Status_9 >= 0;
    goto L17;

  L17:
    call {:si_unique_call 798} Status_9 := FatFlushFat(IrpContext_41, Vcb_34);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Status_9 >= 0;
    goto L23;

  L23:
    assume {:nonnull} Vcb_34 != 0;
    assume Vcb_34 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 2) != 0;
    assume {:nonnull} Vcb_34 != 0;
    assume Vcb_34 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 2048) == 0;
    call {:si_unique_call 799} vslice_dummy_var_127 := FatToggleMediaEjectDisable(IrpContext_41, Vcb_34, 0);
    goto L24;

  L24:
    Tmp_859 := ReturnStatus_1;
    goto L1;

  anon15_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 2048) != 0;
    goto L24;

  anon14_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_34)], 2) == 0;
    goto L24;

  anon13_Then:
    assume {:partition} 0 > Status_9;
    ReturnStatus_1 := Status_9;
    goto L23;

  anon12_Then:
    assume {:partition} 0 > Status_9;
    ReturnStatus_1 := Status_9;
    goto L17;
}



procedure {:origName "FatFlushFile"} FatFlushFile(actual_IrpContext_42: int, actual_Fcb_9: int, actual_FlushType_5: int) returns (Tmp_861: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFlushFile"} FatFlushFile(actual_IrpContext_42: int, actual_Fcb_9: int, actual_FlushType_5: int) returns (Tmp_861: int)
{
  var {:scalar} Iosb_3: int;
  var {:pointer} Vcb_35: int;
  var {:pointer} IrpContext_42: int;
  var {:pointer} Fcb_9: int;
  var {:scalar} FlushType_5: int;
  var vslice_dummy_var_128: int;

  anon0:
    call {:si_unique_call 800} Iosb_3 := __HAVOC_malloc(12);
    IrpContext_42 := actual_IrpContext_42;
    Fcb_9 := actual_Fcb_9;
    FlushType_5 := actual_FlushType_5;
    assume {:nonnull} Fcb_9 != 0;
    assume Fcb_9 > 0;
    havoc Vcb_35;
    call {:si_unique_call 801} sdv_do_paged_code_check();
    assume {:nonnull} Fcb_9 != 0;
    assume Fcb_9 > 0;
    assume {:nonnull} Vcb_35 != 0;
    assume Vcb_35 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_35)], 256) != 0;
    goto L16;

  L16:
    assume {:nonnull} Iosb_3 != 0;
    assume Iosb_3 > 0;
    Tmp_861 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_3)];
    return;

  anon5_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_35)], 256) == 0;
    call {:si_unique_call 802} vslice_dummy_var_128 := ExAcquireResourceExclusiveLite(0, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} FlushType_5 == 2;
    call {:si_unique_call 803} FatMarkFcbCondition(IrpContext_42, Fcb_9, 2, 0);
    goto L18;

  L18:
    call {:si_unique_call 804} ExReleaseResourceLite(0);
    goto L16;

  anon6_Then:
    assume {:partition} FlushType_5 != 2;
    goto L18;
}



procedure {:origName "FatHijackIrpAndFlushDevice"} FatHijackIrpAndFlushDevice(actual_IrpContext_43: int, actual_Irp_8: int, actual_TargetDeviceObject: int) returns (Tmp_864: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, sdv_compFset, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatHijackIrpAndFlushDevice"} FatHijackIrpAndFlushDevice(actual_IrpContext_43: int, actual_Irp_8: int, actual_TargetDeviceObject: int) returns (Tmp_864: int)
{
  var {:scalar} Status_10: int;
  var {:pointer} NextIrpSp: int;
  var {:scalar} Event_4: int;
  var {:pointer} sdv_335: int;
  var {:pointer} Irp_8: int;
  var {:pointer} TargetDeviceObject: int;
  var vslice_dummy_var_129: int;

  anon0:
    call {:si_unique_call 805} Event_4 := __HAVOC_malloc(124);
    Irp_8 := actual_Irp_8;
    TargetDeviceObject := actual_TargetDeviceObject;
    call {:si_unique_call 806} sdv_do_paged_code_check();
    call {:si_unique_call 807} NextIrpSp := sdv_IoGetNextIrpStackLocation(Irp_8);
    call {:si_unique_call 808} sdv_335 := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(NextIrpSp)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_335)];
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(NextIrpSp)] := Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(sdv_335)];
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    Mem_T.DeviceObject__IO_STACK_LOCATION[DeviceObject__IO_STACK_LOCATION(NextIrpSp)] := Mem_T.DeviceObject__IO_STACK_LOCATION[DeviceObject__IO_STACK_LOCATION(sdv_335)];
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(NextIrpSp)] := Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(sdv_335)];
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    assume {:nonnull} sdv_335 != 0;
    assume sdv_335 > 0;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(NextIrpSp)] := 9;
    assume {:nonnull} NextIrpSp != 0;
    assume NextIrpSp > 0;
    Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(NextIrpSp)] := 0;
    call {:si_unique_call 809} KeInitializeEvent(Event_4, 0, 0);
    call {:si_unique_call 810} sdv_IoSetCompletionRoutine(Irp_8, li2bplFunctionConstant338, Event_4, 1, 1, 1);
    call {:si_unique_call 811} Status_10 := sdv_IoCallDriver(TargetDeviceObject, Irp_8);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Status_10 == 259;
    call {:si_unique_call 812} vslice_dummy_var_129 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Status_10 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_8))];
    goto L30;

  L30:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Status_10 == -1073741808;
    Status_10 := 0;
    goto L35;

  L35:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_8))] := 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Tmp_864 := Status_10;
    return;

  anon6_Then:
    assume {:partition} Status_10 != -1073741808;
    goto L35;

  anon5_Then:
    assume {:partition} Status_10 != 259;
    goto L30;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_130: int;

  anon0:
    call {:si_unique_call 813} vslice_dummy_var_130 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatFlushFat"} FatFlushFat(actual_IrpContext_44: int, actual_Vcb_36: int) returns (Tmp_868: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, sdv_irql_current, Mem_T.VcbState__VCB, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFlushFat"} FatFlushFat(actual_IrpContext_44: int, actual_Vcb_36: int) returns (Tmp_868: int)
{
  var {:pointer} Tmp_869: int;
  var {:scalar} ReturnStatus_2: int;
  var {:scalar} Offset_3: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_873: int;
  var {:scalar} Iosb_4: int;
  var {:pointer} Tmp_874: int;
  var {:pointer} Tmp_875: int;
  var {:scalar} sdv_339: int;
  var {:pointer} Tmp_876: int;
  var {:scalar} Page_3: int;
  var {:scalar} sdv_342: int;
  var {:pointer} Tmp_877: int;
  var {:pointer} Tmp_878: int;
  var {:scalar} Tmp_880: int;
  var {:scalar} NumberOfPages_2: int;
  var {:pointer} Tmp_881: int;
  var {:pointer} Tmp_882: int;
  var {:pointer} Tmp_883: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} Tmp_885: int;
  var {:pointer} IrpContext_44: int;
  var {:pointer} Vcb_36: int;

  anon0:
    call {:si_unique_call 814} Offset_3 := __HAVOC_malloc(20);
    call {:si_unique_call 815} Iosb_4 := __HAVOC_malloc(12);
    IrpContext_44 := actual_IrpContext_44;
    Vcb_36 := actual_Vcb_36;
    ReturnStatus_2 := 0;
    call {:si_unique_call 816} sdv_do_paged_code_check();
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_36)], 16384) != 0;
    Tmp_868 := 0;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_36)], 16384) == 0;
    call {:si_unique_call 817} FatVerifyVcb(IrpContext_44, Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_868 := -1073741672;
    goto L1;

  anon22_Then:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_878 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_884 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_885 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_885 != 0;
    assume Tmp_885 > 0;
    havoc Tmp_880;
    goto L37;

  L37:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_871 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_869 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_869 != 0;
    assume Tmp_869 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    havoc NumberOfPages_2;
    Page_3 := 0;
    assume {:nonnull} Offset_3 != 0;
    assume Offset_3 > 0;
    goto L40;

  L40:
    call {:si_unique_call 818} ReturnStatus_2, Page_3, sdv_342 := FatFlushFat_loop_L40(ReturnStatus_2, Offset_3, Iosb_4, Page_3, sdv_342, NumberOfPages_2);
    goto L40_last;

  L40_last:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} NumberOfPages_2 > Page_3;
    call {:si_unique_call 819} sdv_342 := corral_nondet();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_342 != 0;
    assume {:nonnull} Iosb_4 != 0;
    assume Iosb_4 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)] < 0;
    assume {:nonnull} Iosb_4 != 0;
    assume Iosb_4 > 0;
    ReturnStatus_2 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)];
    goto L54;

  L54:
    Page_3 := Page_3 + 1;
    assume {:nonnull} Offset_3 != 0;
    assume Offset_3 > 0;
    goto L54_dummy;

  L54_dummy:
    assume false;
    return;

  anon26_Then:
    assume {:partition} 0 <= Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)];
    goto L54;

  anon25_Then:
    assume {:partition} sdv_342 == 0;
    goto L54;

  anon24_Then:
    assume {:partition} Page_3 >= NumberOfPages_2;
    goto L41;

  L41:
    Tmp_868 := ReturnStatus_2;
    goto L1;

  anon29_Then:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_881 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_882 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_881 != 0;
    assume Tmp_881 > 0;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    havoc Tmp_880;
    goto L37;

  anon23_Then:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_874 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_875 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Offset_3 != 0;
    assume Offset_3 > 0;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_875 != 0;
    assume Tmp_875 > 0;
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_872 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_877 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_873 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_873 != 0;
    assume Tmp_873 > 0;
    assume {:nonnull} Tmp_877 != 0;
    assume Tmp_877 > 0;
    goto L74;

  L74:
    call {:si_unique_call 820} sdv_339 := corral_nondet();
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_339 != 0;
    assume {:nonnull} Iosb_4 != 0;
    assume Iosb_4 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)] < 0;
    assume {:nonnull} Iosb_4 != 0;
    assume Iosb_4 > 0;
    ReturnStatus_2 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)];
    goto L41;

  anon28_Then:
    assume {:partition} 0 <= Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(Iosb_4)];
    goto L41;

  anon27_Then:
    assume {:partition} sdv_339 == 0;
    goto L41;

  anon30_Then:
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_876 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Vcb_36 != 0;
    assume Vcb_36 > 0;
    Tmp_883 := Bpb__VCB(Vcb_36);
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    goto L74;
}



procedure {:origName "_sdv_init27"} _sdv_init27();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init27"} _sdv_init27()
{
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 821} vslice_dummy_var_131 := __HAVOC_malloc(4);
    assume FatNoAsync == 0;
    return;
}



procedure {:origName "FatStringTo8dot3"} FatStringTo8dot3(actual_IrpContext_47: int, actual_structPtr888InputString: int, actual_Output8dot3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatStringTo8dot3"} FatStringTo8dot3(actual_IrpContext_47: int, actual_structPtr888InputString: int, actual_Output8dot3: int)
{
  var {:scalar} InputString: int;
  var {:scalar} i_5: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} Tmp_897: int;
  var {:pointer} Tmp_898: int;
  var {:scalar} j_1: int;
  var {:scalar} Tmp_900: int;
  var {:pointer} Tmp_901: int;
  var {:scalar} Tmp_902: int;
  var {:scalar} Tmp_904: int;
  var {:scalar} Tmp_905: int;
  var {:scalar} Tmp_906: int;
  var {:pointer} structPtr888InputString: int;
  var {:pointer} Output8dot3: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_7454: int;
  var vslice_dummy_var_7455: int;

  anon0:
    call {:si_unique_call 822} InputString := __HAVOC_malloc(12);
    call {:si_unique_call 823} vslice_dummy_var_132 := __HAVOC_malloc(4);
    structPtr888InputString := actual_structPtr888InputString;
    Output8dot3 := actual_Output8dot3;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    assume {:nonnull} structPtr888InputString != 0;
    assume structPtr888InputString > 0;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    assume {:nonnull} structPtr888InputString != 0;
    assume structPtr888InputString > 0;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    assume {:nonnull} structPtr888InputString != 0;
    assume structPtr888InputString > 0;
    call {:si_unique_call 824} Tmp_896 := __HAVOC_malloc(44);
    call {:si_unique_call 825} Tmp_897 := __HAVOC_malloc(44);
    call {:si_unique_call 826} Tmp_898 := __HAVOC_malloc(44);
    call {:si_unique_call 827} Tmp_901 := __HAVOC_malloc(44);
    i_5 := 0;
    goto L9;

  L9:
    call {:si_unique_call 828} i_5, Tmp_896, Tmp_902, Tmp_904, Tmp_905 := FatStringTo8dot3_loop_L9(InputString, i_5, Tmp_896, Tmp_902, Tmp_904, Tmp_905, Output8dot3);
    goto L9_last;

  L9_last:
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_902 := i_5;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_905 := i_5;
    assume {:nonnull} Output8dot3 != 0;
    assume Output8dot3 > 0;
    havoc Tmp_896;
    Tmp_904 := i_5;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    havoc vslice_dummy_var_7454;
    Mem_T.INT4[Tmp_896 + Tmp_905 * 4] := vslice_dummy_var_7454;
    i_5 := i_5 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    goto L10;

  L10:
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    i_5 := i_5 + 1;
    j_1 := 8;
    goto L17;

  L17:
    call {:si_unique_call 829} i_5, Tmp_898, j_1, Tmp_900, Tmp_906 := FatStringTo8dot3_loop_L17(InputString, i_5, Tmp_898, j_1, Tmp_900, Tmp_906, Output8dot3);
    goto L17_last;

  L17_last:
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Tmp_906 := j_1;
    assume {:nonnull} Output8dot3 != 0;
    assume Output8dot3 > 0;
    havoc Tmp_898;
    Tmp_900 := i_5;
    assume {:nonnull} InputString != 0;
    assume InputString > 0;
    assume {:nonnull} Tmp_898 != 0;
    assume Tmp_898 > 0;
    havoc vslice_dummy_var_7455;
    Mem_T.INT4[Tmp_898 + Tmp_906 * 4] := vslice_dummy_var_7455;
    j_1 := j_1 + 1;
    i_5 := i_5 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    goto L14;

  L14:
    assume {:nonnull} Output8dot3 != 0;
    assume Output8dot3 > 0;
    havoc Tmp_901;
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[Tmp_901] == 229;
    assume {:nonnull} Output8dot3 != 0;
    assume Output8dot3 > 0;
    havoc Tmp_897;
    assume {:nonnull} Tmp_897 != 0;
    assume Tmp_897 > 0;
    Mem_T.INT4[Tmp_897] := 5;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} Mem_T.INT4[Tmp_901] != 229;
    goto L1;

  anon12_Then:
    goto L14;

  anon11_Then:
    goto L10;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_133: int;

  anon0:
    call {:si_unique_call 830} vslice_dummy_var_133 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatIsNameInExpression"} FatIsNameInExpression(actual_IrpContext_48: int, actual_structPtr888Expression: int, actual_structPtr888Name: int) returns (Tmp_909: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatIsNameInExpression"} FatIsNameInExpression(actual_IrpContext_48: int, actual_structPtr888Expression: int, actual_structPtr888Name: int) returns (Tmp_909: int)
{
  var {:scalar} Expression: int;
  var {:scalar} Name: int;
  var {:pointer} structPtr888Expression: int;
  var {:pointer} structPtr888Name: int;

  anon0:
    call {:si_unique_call 831} Expression := __HAVOC_malloc(12);
    call {:si_unique_call 832} Name := __HAVOC_malloc(12);
    structPtr888Expression := actual_structPtr888Expression;
    structPtr888Name := actual_structPtr888Name;
    assume {:nonnull} Expression != 0;
    assume Expression > 0;
    assume {:nonnull} structPtr888Expression != 0;
    assume structPtr888Expression > 0;
    assume {:nonnull} Expression != 0;
    assume Expression > 0;
    assume {:nonnull} structPtr888Expression != 0;
    assume structPtr888Expression > 0;
    assume {:nonnull} Expression != 0;
    assume Expression > 0;
    assume {:nonnull} structPtr888Expression != 0;
    assume structPtr888Expression > 0;
    assume {:nonnull} Name != 0;
    assume Name > 0;
    assume {:nonnull} structPtr888Name != 0;
    assume structPtr888Name > 0;
    assume {:nonnull} Name != 0;
    assume Name > 0;
    assume {:nonnull} structPtr888Name != 0;
    assume structPtr888Name > 0;
    assume {:nonnull} Name != 0;
    assume Name > 0;
    assume {:nonnull} structPtr888Name != 0;
    assume structPtr888Name > 0;
    call {:si_unique_call 833} Tmp_909 := corral_nondet();
    return;
}



procedure {:origName "Fat8dot3ToString"} Fat8dot3ToString(actual_IrpContext_49: int, actual_Dirent_3: int, actual_RestoreCase: int, actual_OutputString: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "Fat8dot3ToString"} Fat8dot3ToString(actual_IrpContext_49: int, actual_Dirent_3: int, actual_RestoreCase: int, actual_OutputString: int)
{
  var {:scalar} Tmp_911: int;
  var {:pointer} o: int;
  var {:pointer} Tmp_912: int;
  var {:scalar} Tmp_913: int;
  var {:scalar} Tmp_914: int;
  var {:pointer} Tmp_915: int;
  var {:scalar} Tmp_916: int;
  var {:scalar} Tmp_917: int;
  var {:scalar} Tmp_918: int;
  var {:pointer} Tmp_919: int;
  var {:pointer} Tmp_920: int;
  var {:scalar} Tmp_921: int;
  var {:scalar} Tmp_922: int;
  var {:scalar} Tmp_923: int;
  var {:pointer} Tmp_924: int;
  var {:scalar} Tmp_925: int;
  var {:scalar} Tmp_927: int;
  var {:pointer} Tmp_928: int;
  var {:scalar} Tmp_929: int;
  var {:scalar} Tmp_930: int;
  var {:pointer} Tmp_931: int;
  var {:pointer} Tmp_932: int;
  var {:scalar} Tmp_933: int;
  var {:pointer} Tmp_934: int;
  var {:scalar} Tmp_935: int;
  var {:scalar} StringIndex: int;
  var {:pointer} Tmp_936: int;
  var {:scalar} Tmp_937: int;
  var {:pointer} Tmp_938: int;
  var {:scalar} Tmp_939: int;
  var {:pointer} Tmp_940: int;
  var {:pointer} Tmp_941: int;
  var {:pointer} Tmp_942: int;
  var {:scalar} Tmp_943: int;
  var {:scalar} Tmp_944: int;
  var {:scalar} BaseLength: int;
  var {:pointer} Tmp_945: int;
  var {:pointer} d: int;
  var {:scalar} Tmp_946: int;
  var {:pointer} Tmp_947: int;
  var {:scalar} ExtensionLength: int;
  var {:pointer} Tmp_948: int;
  var {:scalar} Tmp_950: int;
  var {:pointer} Tmp_951: int;
  var {:pointer} Tmp_952: int;
  var {:pointer} Tmp_953: int;
  var {:scalar} Tmp_954: int;
  var {:scalar} Tmp_955: int;
  var {:pointer} Tmp_956: int;
  var {:pointer} Dirent_3: int;
  var {:scalar} RestoreCase: int;
  var {:pointer} OutputString: int;
  var vslice_dummy_var_134: int;

  anon0:
    call {:si_unique_call 834} vslice_dummy_var_134 := __HAVOC_malloc(4);
    Dirent_3 := actual_Dirent_3;
    RestoreCase := actual_RestoreCase;
    OutputString := actual_OutputString;
    call {:si_unique_call 835} Tmp_938 := __HAVOC_malloc(44);
    call {:si_unique_call 836} Tmp_942 := __HAVOC_malloc(44);
    call {:si_unique_call 837} Tmp_947 := __HAVOC_malloc(44);
    BaseLength := 8;
    goto L8;

  L8:
    call {:si_unique_call 838} Tmp_944, BaseLength, Tmp_947 := Fat8dot3ToString_loop_L8(Tmp_944, BaseLength, Tmp_947, Dirent_3);
    goto L8_last;

  L8_last:
    assume {:CounterLoop 8} {:Counter "BaseLength"} true;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} BaseLength > 0;
    Tmp_944 := BaseLength - 1;
    assume {:nonnull} Dirent_3 != 0;
    assume Dirent_3 > 0;
    havoc Tmp_947;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.INT4[Tmp_947 + Tmp_944 * 4] == 32;
    BaseLength := BaseLength - 1;
    goto anon78_Else_dummy;

  anon78_Else_dummy:
    assume false;
    return;

  anon78_Then:
    assume {:partition} Mem_T.INT4[Tmp_947 + Tmp_944 * 4] != 32;
    goto L9;

  L9:
    ExtensionLength := 3;
    goto L13;

  L13:
    call {:si_unique_call 839} Tmp_918, Tmp_942, ExtensionLength := Fat8dot3ToString_loop_L13(Tmp_918, Tmp_942, ExtensionLength, Dirent_3);
    goto L13_last;

  L13_last:
    assume {:CounterLoop 3} {:Counter "ExtensionLength"} true;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} ExtensionLength > 0;
    Tmp_918 := 8 + ExtensionLength - 1;
    assume {:nonnull} Dirent_3 != 0;
    assume Dirent_3 > 0;
    havoc Tmp_942;
    assume {:nonnull} Tmp_942 != 0;
    assume Tmp_942 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} Mem_T.INT4[Tmp_942 + Tmp_918 * 4] == 32;
    ExtensionLength := ExtensionLength - 1;
    goto anon79_Else_dummy;

  anon79_Else_dummy:
    assume false;
    return;

  anon79_Then:
    assume {:partition} Mem_T.INT4[Tmp_942 + Tmp_918 * 4] != 32;
    goto L14;

  L14:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} BaseLength != 0;
    call {:si_unique_call 840} sdv_RtlCopyMemory(0, 0, BaseLength);
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_951;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.INT4[Tmp_951] == 5;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_912;
    assume {:nonnull} Tmp_912 != 0;
    assume Tmp_912 > 0;
    Mem_T.INT4[Tmp_912] := -27;
    goto L23;

  L23:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} RestoreCase != 0;
    assume {:nonnull} Dirent_3 != 0;
    assume Dirent_3 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    StringIndex := 0;
    goto L28;

  L28:
    call {:si_unique_call 841} Tmp_911, Tmp_914, Tmp_919, Tmp_921, Tmp_922, Tmp_925, Tmp_927, Tmp_928, Tmp_929, Tmp_932, Tmp_933, Tmp_934, StringIndex, Tmp_948, Tmp_950, Tmp_953, Tmp_956 := Fat8dot3ToString_loop_L28(Tmp_911, Tmp_914, Tmp_919, Tmp_921, Tmp_922, Tmp_925, Tmp_927, Tmp_928, Tmp_929, Tmp_932, Tmp_933, Tmp_934, StringIndex, BaseLength, Tmp_948, Tmp_950, Tmp_953, Tmp_956, OutputString);
    goto L28_last;

  L28_last:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} BaseLength > StringIndex;
    Tmp_950 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_932;
    assume {:nonnull} Tmp_932 != 0;
    assume Tmp_932 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} 128 > Mem_T.INT4[Tmp_932 + Tmp_950 * 4];
    Tmp_929 := 0;
    goto L32;

  L32:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Tmp_929 != 0;
    StringIndex := StringIndex + 1;
    goto L36;

  L36:
    StringIndex := StringIndex + 1;
    goto L36_dummy;

  L36_dummy:
    assume false;
    return;

  anon70_Then:
    assume {:partition} Tmp_929 == 0;
    Tmp_927 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_928;
    assume {:nonnull} Tmp_928 != 0;
    assume Tmp_928 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Mem_T.INT4[Tmp_928 + Tmp_927 * 4] >= 65;
    Tmp_922 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_934;
    assume {:nonnull} Tmp_934 != 0;
    assume Tmp_934 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} 90 >= Mem_T.INT4[Tmp_934 + Tmp_922 * 4];
    Tmp_914 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_948;
    Tmp_933 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_956;
    assume {:nonnull} Tmp_948 != 0;
    assume Tmp_948 > 0;
    assume {:nonnull} Tmp_956 != 0;
    assume Tmp_956 > 0;
    Mem_T.INT4[Tmp_948 + Tmp_914 * 4] := Mem_T.INT4[Tmp_956 + Tmp_933 * 4] + 32;
    goto L36;

  anon83_Then:
    assume {:partition} Mem_T.INT4[Tmp_934 + Tmp_922 * 4] > 90;
    goto L36;

  anon82_Then:
    assume {:partition} 65 > Mem_T.INT4[Tmp_928 + Tmp_927 * 4];
    goto L36;

  anon81_Then:
    assume {:partition} Mem_T.INT4[Tmp_932 + Tmp_950 * 4] >= 128;
    assume {:nonnull} NlsMbOemCodePageTag != 0;
    assume NlsMbOemCodePageTag > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] != 0;
    Tmp_925 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_919;
    assume {:nonnull} Tmp_919 != 0;
    assume Tmp_919 > 0;
    Tmp_921 := Mem_T.INT4[Tmp_919 + Tmp_925 * 4];
    assume {:nonnull} NlsOemLeadByteInfo != 0;
    assume NlsOemLeadByteInfo > 0;
    havoc Tmp_953;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.INT4[Tmp_953 + Tmp_921 * 4] != 0;
    Tmp_911 := 1;
    goto L42;

  L42:
    Tmp_929 := Tmp_911;
    goto L32;

  anon84_Then:
    assume {:partition} Mem_T.INT4[Tmp_953 + Tmp_921 * 4] == 0;
    goto L39;

  L39:
    Tmp_911 := 0;
    goto L42;

  anon69_Then:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] == 0;
    goto L39;

  anon68_Then:
    assume {:partition} StringIndex >= BaseLength;
    goto L18;

  L18:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} ExtensionLength != 0;
    Tmp_917 := BaseLength;
    BaseLength := BaseLength + 1;
    Tmp_943 := Tmp_917;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_936;
    assume {:nonnull} Tmp_936 != 0;
    assume Tmp_936 > 0;
    Mem_T.INT4[Tmp_936 + Tmp_943 * 4] := 46;
    Tmp_955 := BaseLength;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_920;
    o := Tmp_920 + Tmp_955 * 4;
    assume {:nonnull} Dirent_3 != 0;
    assume Dirent_3 > 0;
    havoc Tmp_938;
    d := Tmp_938 + 8 * 4;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} ExtensionLength != 1;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} ExtensionLength != 2;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} ExtensionLength == 3;
    assume {:nonnull} d != 0;
    assume d > 0;
    assume {:nonnull} o != 0;
    assume o > 0;
    Mem_T.INT4[o] := Mem_T.INT4[d];
    goto L52;

  L52:
    assume {:nonnull} d != 0;
    assume d > 0;
    assume {:nonnull} o != 0;
    assume o > 0;
    Mem_T.INT4[o] := Mem_T.INT4[d];
    goto L51;

  L51:
    assume {:nonnull} d != 0;
    assume d > 0;
    assume {:nonnull} o != 0;
    assume o > 0;
    Mem_T.INT4[o] := Mem_T.INT4[d];
    goto L50;

  L50:
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} RestoreCase != 0;
    assume {:nonnull} Dirent_3 != 0;
    assume Dirent_3 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    StringIndex := BaseLength;
    goto L59;

  L59:
    call {:si_unique_call 842} Tmp_913, Tmp_915, Tmp_916, Tmp_923, Tmp_924, Tmp_930, Tmp_931, Tmp_935, StringIndex, Tmp_937, Tmp_939, Tmp_940, Tmp_941, Tmp_945, Tmp_946, Tmp_952, Tmp_954 := Fat8dot3ToString_loop_L59(Tmp_913, Tmp_915, Tmp_916, Tmp_923, Tmp_924, Tmp_930, Tmp_931, Tmp_935, StringIndex, Tmp_937, Tmp_939, Tmp_940, Tmp_941, Tmp_945, Tmp_946, Tmp_952, Tmp_954, OutputString);
    goto L59_last;

  L59_last:
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    Tmp_923 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_940;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} 128 > Mem_T.INT4[Tmp_940 + Tmp_923 * 4];
    Tmp_913 := 0;
    goto L63;

  L63:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Tmp_913 != 0;
    StringIndex := StringIndex + 1;
    goto L67;

  L67:
    StringIndex := StringIndex + 1;
    goto L67_dummy;

  L67_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} Tmp_913 == 0;
    Tmp_939 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_952;
    assume {:nonnull} Tmp_952 != 0;
    assume Tmp_952 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Mem_T.INT4[Tmp_952 + Tmp_939 * 4] >= 65;
    Tmp_937 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_941;
    assume {:nonnull} Tmp_941 != 0;
    assume Tmp_941 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} 90 >= Mem_T.INT4[Tmp_941 + Tmp_937 * 4];
    Tmp_935 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_915;
    Tmp_916 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_945;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Tmp_945 != 0;
    assume Tmp_945 > 0;
    Mem_T.INT4[Tmp_915 + Tmp_935 * 4] := Mem_T.INT4[Tmp_945 + Tmp_916 * 4] + 32;
    goto L67;

  anon89_Then:
    assume {:partition} Mem_T.INT4[Tmp_941 + Tmp_937 * 4] > 90;
    goto L67;

  anon88_Then:
    assume {:partition} 65 > Mem_T.INT4[Tmp_952 + Tmp_939 * 4];
    goto L67;

  anon87_Then:
    assume {:partition} Mem_T.INT4[Tmp_940 + Tmp_923 * 4] >= 128;
    assume {:nonnull} NlsMbOemCodePageTag != 0;
    assume NlsMbOemCodePageTag > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] != 0;
    Tmp_954 := StringIndex;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    havoc Tmp_924;
    assume {:nonnull} Tmp_924 != 0;
    assume Tmp_924 > 0;
    Tmp_930 := Mem_T.INT4[Tmp_924 + Tmp_954 * 4];
    assume {:nonnull} NlsOemLeadByteInfo != 0;
    assume NlsOemLeadByteInfo > 0;
    havoc Tmp_931;
    assume {:nonnull} Tmp_931 != 0;
    assume Tmp_931 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Mem_T.INT4[Tmp_931 + Tmp_930 * 4] != 0;
    Tmp_946 := 1;
    goto L73;

  L73:
    Tmp_913 := Tmp_946;
    goto L63;

  anon90_Then:
    assume {:partition} Mem_T.INT4[Tmp_931 + Tmp_930 * 4] == 0;
    goto L70;

  L70:
    Tmp_946 := 0;
    goto L73;

  anon74_Then:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] == 0;
    goto L70;

  anon73_Then:
    goto L1;

  L1:
    return;

  anon72_Then:
    goto L1;

  anon71_Then:
    assume {:partition} RestoreCase == 0;
    goto L1;

  anon86_Then:
    goto L1;

  anon76_Then:
    assume {:partition} ExtensionLength != 3;
    goto L50;

  anon77_Then:
    assume {:partition} ExtensionLength == 2;
    goto L52;

  anon85_Then:
    assume {:partition} ExtensionLength == 1;
    goto L51;

  anon64_Then:
    assume {:partition} ExtensionLength == 0;
    assume {:nonnull} OutputString != 0;
    assume OutputString > 0;
    goto L1;

  anon67_Then:
    goto L18;

  anon66_Then:
    assume {:partition} RestoreCase == 0;
    goto L18;

  anon65_Then:
    goto L18;

  anon80_Then:
    assume {:partition} Mem_T.INT4[Tmp_951] != 5;
    goto L23;

  anon63_Then:
    assume {:partition} BaseLength == 0;
    goto L18;

  anon62_Then:
    assume {:partition} 0 >= ExtensionLength;
    goto L14;

  anon61_Then:
    assume {:partition} 0 >= BaseLength;
    goto L9;
}



procedure {:origName "FatIsIrpTopLevel"} FatIsIrpTopLevel(actual_Irp_9: int) returns (Tmp_962: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_962 == 0 || Tmp_962 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatIsIrpTopLevel"} FatIsIrpTopLevel(actual_Irp_9: int) returns (Tmp_962: int)
{
  var {:pointer} sdv_356: int;

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    sdv_356 := 0;
    goto L6;

  L6:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_356 != 0;
    Tmp_962 := 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_356 == 0;
    Tmp_962 := 1;
    goto L1;

  anon5_Then:
    call {:si_unique_call 843} sdv_356 := __HAVOC_malloc(1);
    goto L6;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_135: int;

  anon0:
    call {:si_unique_call 844} vslice_dummy_var_135 := __HAVOC_malloc(4);
    assume FatReserveMdl == 0;
    return;
}



procedure {:origName "FatCompleteRequest_Real"} FatCompleteRequest_Real(actual_IrpContext_51: int, actual_Irp_10: int, actual_Status_12: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCompleteRequest_Real"} FatCompleteRequest_Real(actual_IrpContext_51: int, actual_Irp_10: int, actual_Status_12: int)
{
  var {:scalar} sdv_357: int;
  var {:pointer} IrpContext_51: int;
  var {:pointer} Irp_10: int;
  var {:scalar} Status_12: int;
  var vslice_dummy_var_136: int;

  anon0:
    call {:si_unique_call 845} vslice_dummy_var_136 := __HAVOC_malloc(4);
    IrpContext_51 := actual_IrpContext_51;
    Irp_10 := actual_Irp_10;
    Status_12 := actual_Status_12;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IrpContext_51 != 0;
    call {:si_unique_call 846} FatUnpinRepinnedBcbs(IrpContext_51);
    goto L4;

  L4:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} IrpContext_51 != 0;
    call {:si_unique_call 847} FatDeleteIrpContext_Real(IrpContext_51);
    goto L8;

  L8:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Irp_10 != 0;
    call {:si_unique_call 848} sdv_357 := sdv_NT_ERROR(Status_12);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_357 != 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    goto L17;

  L17:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_10))] := Status_12;
    call {:si_unique_call 849} sdv_IoCompleteRequest(0, 1);
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L17;

  anon14_Then:
    assume {:partition} sdv_357 == 0;
    goto L17;

  anon13_Then:
    assume {:partition} Irp_10 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} IrpContext_51 == 0;
    goto L8;

  anon11_Then:
    assume {:partition} IrpContext_51 == 0;
    goto L4;
}



procedure {:origName "SLIC_IoDeleteDevice_entry"} {:osmodel} SLIC_IoDeleteDevice_entry(actual_caller: int, actual_IoDeleteDevice_1: int);
  modifies t;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_IoDeleteDevice_entry"} {:osmodel} SLIC_IoDeleteDevice_entry(actual_caller: int, actual_IoDeleteDevice_1: int)
{
  var {:pointer} IoDeleteDevice_1: int;

  anon0:
    IoDeleteDevice_1 := actual_IoDeleteDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} IoDeleteDevice_1 == sdv_p_devobj_fdo;
    t := 1;
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} IoDeleteDevice_1 != sdv_p_devobj_fdo;
    goto L2;
}



procedure {:origName "SLIC_sdv_RunRemoveDevice_exit"} {:osmodel} SLIC_sdv_RunRemoveDevice_exit(actual_caller_1: int, actual_sdv_358: int);
  modifies yogi_error;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(t) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_sdv_RunRemoveDevice_exit"} {:osmodel} SLIC_sdv_RunRemoveDevice_exit(actual_caller_1: int, actual_sdv_358: int)
{
  var {:pointer} Tmp_968: int;
  var {:pointer} caller_1: int;
  var {:pointer} sdv_358: int;

  anon0:
    caller_1 := actual_caller_1;
    sdv_358 := actual_sdv_358;
    assume {:nonnull} sdv_358 != 0;
    assume sdv_358 > 0;
    Tmp_968 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_358)))];
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} s == 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} t == 1;
    assume {:nonnull} Tmp_968 != 0;
    assume Tmp_968 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(Tmp_968)] != 27;
    goto L6;

  L6:
    call {:si_unique_call 850} SLIC_EXIT_ROUTINE(strConst__li2bpl2);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(Tmp_968)] == 27;
    call {:si_unique_call 851} SLIC_ABORT_4_0(caller_1, sdv_358);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} t != 1;
    goto L6;

  anon11_Then:
    assume {:partition} s != 1;
    goto L6;
}



procedure {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_3: int, actual_sdv_359: int);
  modifies s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_3: int, actual_sdv_359: int)
{
  var {:pointer} sdv_359: int;

  anon0:
    sdv_359 := actual_sdv_359;
    assume {:nonnull} sdv_359 != 0;
    assume sdv_359 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 0 <= Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_359))];
    assume {:nonnull} sdv_359 != 0;
    assume sdv_359 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.PendingReturned__IRP[PendingReturned__IRP(sdv_359)] == 0;
    goto L5;

  L5:
    call {:si_unique_call 852} SLIC_EXIT_ROUTINE(strConst__li2bpl2);
    goto L2;

  L2:
    return;

  anon6_Then:
    assume {:partition} Mem_T.PendingReturned__IRP[PendingReturned__IRP(sdv_359)] != 0;
    s := 1;
    goto L2;

  anon5_Then:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_359))] < 0;
    goto L5;
}



procedure {:origName "_sdv_init36"} {:osmodel} _sdv_init36();
  modifies t, s, yogi_error;
  free ensures {:va_keep} old(s) == 1 ==> s != 1;
  free ensures {:va_keep} old(s) == 0 ==> s != 1;
  free ensures {:va_keep} old(t) == 1 ==> t != 1;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} s == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} t == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init36"} {:osmodel} _sdv_init36()
{

  anon0:
    t := 0;
    s := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_ABORT_4_0"} SLIC_ABORT_4_0(actual_caller_4: int, actual_sdv_360: int);
  modifies yogi_error;
  free ensures {:va_keep} old(s) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(s) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(t) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SLIC_ABORT_4_0"} SLIC_ABORT_4_0(actual_caller_4: int, actual_sdv_360: int)
{
  var {:pointer} caller_4: int;
  var {:pointer} sdv_360: int;

  anon0:
    caller_4 := actual_caller_4;
    sdv_360 := actual_sdv_360;
    call {:si_unique_call 853} SLIC_ERROR_ROUTINE(strConst__li2bpl3);
    return;
}



procedure {:origName "FatComputeLfnChecksum"} FatComputeLfnChecksum(actual_Dirent_4: int) returns (Tmp_969: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatComputeLfnChecksum"} FatComputeLfnChecksum(actual_Dirent_4: int) returns (Tmp_969: int)
{
  var {:scalar} i_6: int;
  var {:scalar} Checksum: int;
  var {:pointer} Tmp_972: int;
  var {:pointer} Dirent_4: int;
  var vslice_dummy_var_137: int;

  anon0:
    Dirent_4 := actual_Dirent_4;
    call {:si_unique_call 854} vslice_dummy_var_137 := __HAVOC_malloc(44);
    call {:si_unique_call 855} Tmp_972 := __HAVOC_malloc(44);
    call {:si_unique_call 856} sdv_do_paged_code_check();
    assume {:nonnull} Dirent_4 != 0;
    assume Dirent_4 > 0;
    havoc Tmp_972;
    assume {:nonnull} Tmp_972 != 0;
    assume Tmp_972 > 0;
    Checksum := Mem_T.INT4[Tmp_972];
    i_6 := 1;
    goto L10;

  L10:
    call {:si_unique_call 857} i_6, Checksum := FatComputeLfnChecksum_loop_L10(i_6, Checksum, Dirent_4);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 10} {:Counter "i_6"} true;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} 11 > i_6;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} BAND(Checksum, 1) != 0;
    goto L15;

  L15:
    assume {:nonnull} Dirent_4 != 0;
    assume Dirent_4 > 0;
    call {:si_unique_call 858} Checksum := corral_nondet();
    i_6 := i_6 + 1;
    goto L15_dummy;

  L15_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} BAND(Checksum, 1) == 0;
    goto L15;

  anon5_Then:
    assume {:partition} i_6 >= 11;
    Tmp_969 := Checksum;
    return;
}



procedure {:origName "FatGetDirentFromFcbOrDcb"} FatGetDirentFromFcbOrDcb(actual_IrpContext_53: int, actual_FcbOrDcb_3: int, actual_Dirent_6: int, actual_Bcb_10: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetDirentFromFcbOrDcb"} FatGetDirentFromFcbOrDcb(actual_IrpContext_53: int, actual_FcbOrDcb_3: int, actual_Dirent_6: int, actual_Bcb_10: int)
{
  var {:dopa} {:scalar} DontCare_3: int;
  var {:pointer} IrpContext_53: int;
  var {:pointer} FcbOrDcb_3: int;
  var {:pointer} Dirent_6: int;
  var {:pointer} Bcb_10: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_7456: int;
  var vslice_dummy_var_7457: int;

  anon0:
    call {:si_unique_call 859} DontCare_3 := __HAVOC_malloc(4);
    call {:si_unique_call 860} vslice_dummy_var_138 := __HAVOC_malloc(4);
    IrpContext_53 := actual_IrpContext_53;
    FcbOrDcb_3 := actual_FcbOrDcb_3;
    Dirent_6 := actual_Dirent_6;
    Bcb_10 := actual_Bcb_10;
    call {:si_unique_call 861} sdv_do_paged_code_check();
    assume {:nonnull} FcbOrDcb_3 != 0;
    assume FcbOrDcb_3 > 0;
    havoc vslice_dummy_var_7456;
    havoc vslice_dummy_var_7457;
    call {:si_unique_call 862} FatReadDirectoryFile#1(IrpContext_53, vslice_dummy_var_7456, vslice_dummy_var_7457, 32, 1, Bcb_10, Dirent_6, DontCare_3);
    return;
}



procedure {:origName "_sdv_init33"} _sdv_init33();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init33"} _sdv_init33()
{
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 863} vslice_dummy_var_139 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_140: int;

  anon0:
    call {:si_unique_call 864} vslice_dummy_var_140 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatRemoveNames"} FatRemoveNames(actual_IrpContext_54: int, actual_Fcb_13: int);
  modifies alloc, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatRemoveNames"} FatRemoveNames(actual_IrpContext_54: int, actual_Fcb_13: int)
{
  var {:pointer} NewRoot: int;
  var {:pointer} Parent: int;
  var {:pointer} Fcb_13: int;
  var vslice_dummy_var_141: int;

  anon0:
    call {:si_unique_call 865} vslice_dummy_var_141 := __HAVOC_malloc(4);
    Fcb_13 := actual_Fcb_13;
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    havoc Parent;
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 256) != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    NewRoot := 0;
    goto L12;

  L12:
    assume {:nonnull} Parent != 0;
    assume Parent > 0;
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 512) != 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    NewRoot := 0;
    goto L19;

  L19:
    assume {:nonnull} Parent != 0;
    assume Parent > 0;
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)] := BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], BNOT(512));
    goto L14;

  L14:
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 1024) != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    NewRoot := 0;
    goto L29;

  L29:
    assume {:nonnull} Parent != 0;
    assume Parent > 0;
    call {:si_unique_call 866} RtlFreeUnicodeString(0);
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)] := BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], BNOT(1024));
    goto L24;

  L24:
    assume {:nonnull} Fcb_13 != 0;
    assume Fcb_13 > 0;
    Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)] := BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], BNOT(256));
    goto L1;

  L1:
    return;

  anon16_Then:
    call {:si_unique_call 867} NewRoot := __HAVOC_malloc(1);
    goto L29;

  anon14_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 1024) == 0;
    goto L24;

  anon15_Then:
    call {:si_unique_call 868} NewRoot := __HAVOC_malloc(1);
    goto L19;

  anon18_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 512) == 0;
    goto L14;

  anon13_Then:
    call {:si_unique_call 869} NewRoot := __HAVOC_malloc(1);
    goto L12;

  anon17_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_13)], 256) == 0;
    goto L1;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 870} vslice_dummy_var_142 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init24"} _sdv_init24();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init24"} _sdv_init24()
{
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 871} vslice_dummy_var_143 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatPnpCancelRemove"} FatPnpCancelRemove(actual_IrpContext_55: int, actual_Irp_11: int, actual_Vcb_37: int) returns (Tmp_1053: int);
  modifies alloc, Mem_T.INT4, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Buffer__RTL_BITMAP, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} Tmp_1053 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPnpCancelRemove"} FatPnpCancelRemove(actual_IrpContext_55: int, actual_Irp_11: int, actual_Vcb_37: int) returns (Tmp_1053: int)
{
  var {:scalar} Status_14: int;
  var {:pointer} IrpContext_55: int;
  var {:pointer} Irp_11: int;
  var {:pointer} Vcb_37: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_7458: int;

  anon0:
    IrpContext_55 := actual_IrpContext_55;
    Irp_11 := actual_Irp_11;
    Vcb_37 := actual_Vcb_37;
    call {:si_unique_call 872} vslice_dummy_var_144 := FatAcquireExclusiveVcb(IrpContext_55, Vcb_37);
    call {:si_unique_call 873} ExReleaseResourceLite(0);
    call {:si_unique_call 874} Status_14 := FatUnlockVolumeInternal(IrpContext_55, Vcb_37, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Status_14 >= 0;
    call {:si_unique_call 875} FatSetupAllocationSupport(IrpContext_55, Vcb_37);
    goto L15;

  L15:
    call {:si_unique_call 876} sdv_IoSkipCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} Vcb_37 != 0;
    assume Vcb_37 > 0;
    havoc vslice_dummy_var_7458;
    call {:si_unique_call 877} Status_14 := sdv_IoCallDriver(vslice_dummy_var_7458, Irp_11);
    call {:si_unique_call 878} ExReleaseResourceLite(0);
    call {:si_unique_call 879} FatCompleteRequest_Real(IrpContext_55, 0, 0);
    Tmp_1053 := Status_14;
    return;

  anon3_Then:
    assume {:partition} 0 > Status_14;
    goto L15;
}



procedure {:origName "FatPnpAdjustVpbRefCount"} FatPnpAdjustVpbRefCount(actual_Vcb_38: int, actual_Delta: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPnpAdjustVpbRefCount"} FatPnpAdjustVpbRefCount(actual_Vcb_38: int, actual_Delta: int)
{
  var {:pointer} Tmp_1055: int;
  var {:pointer} Tmp_1056: int;
  var {:scalar} OldIrql: int;
  var {:pointer} Tmp_1058: int;
  var {:pointer} Vcb_38: int;
  var {:scalar} Delta: int;
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 880} vslice_dummy_var_145 := __HAVOC_malloc(4);
    Vcb_38 := actual_Vcb_38;
    Delta := actual_Delta;
    call {:si_unique_call 881} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    Mem_T.INT4[Tmp_1058] := OldIrql;
    call {:si_unique_call 882} IoAcquireVpbSpinLock(Tmp_1058);
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    OldIrql := Mem_T.INT4[Tmp_1058];
    assume {:nonnull} Vcb_38 != 0;
    assume Vcb_38 > 0;
    havoc Tmp_1056;
    assume {:nonnull} Vcb_38 != 0;
    assume Vcb_38 > 0;
    havoc Tmp_1055;
    assume {:nonnull} Tmp_1055 != 0;
    assume Tmp_1055 > 0;
    assume {:nonnull} Tmp_1056 != 0;
    assume Tmp_1056 > 0;
    call {:si_unique_call 883} IoReleaseVpbSpinLock(OldIrql);
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 884} vslice_dummy_var_146 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatCommonPnp"} FatCommonPnp(actual_IrpContext_56: int, actual_Irp_12: int) returns (Tmp_1061: int);
  modifies Mem_T.Flags__IRP_CONTEXT, alloc, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.INT4, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Buffer__RTL_BITMAP, sdv_compFset, Mem_T.FcbState__FCB, s, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.MajorFunction__IRP_CONTEXT, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCommonPnp"} FatCommonPnp(actual_IrpContext_56: int, actual_Irp_12: int) returns (Tmp_1061: int)
{
  var {:scalar} Tmp_1063: int;
  var {:scalar} Status_15: int;
  var {:pointer} IrpSp_2: int;
  var {:pointer} Tmp_1064: int;
  var {:pointer} Vcb_39: int;
  var {:scalar} Tmp_1065: int;
  var {:pointer} OurDeviceObject: int;
  var {:pointer} IrpContext_56: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_7459: int;

  anon0:
    IrpContext_56 := actual_IrpContext_56;
    Irp_12 := actual_Irp_12;
    assume {:nonnull} IrpContext_56 != 0;
    assume IrpContext_56 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_56)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_56)], 2);
    call {:si_unique_call 885} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    OurDeviceObject := Mem_T.DeviceObject__IO_STACK_LOCATION[DeviceObject__IO_STACK_LOCATION(IrpSp_2)];
    assume {:nonnull} IrpContext_56 != 0;
    assume IrpContext_56 > 0;
    Tmp_1063 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_56)], 2);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Tmp_1063 == 0;
    Tmp_1065 := 0;
    goto L77;

  L77:
    call {:si_unique_call 886} vslice_dummy_var_147 := ExAcquireResourceExclusiveLite(0, Tmp_1065);
    assume {:nonnull} OurDeviceObject != 0;
    assume OurDeviceObject > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L20;

  L20:
    call {:si_unique_call 887} ExReleaseResourceLite(0);
    Status_15 := -1073741811;
    call {:si_unique_call 888} FatCompleteRequest_Real(IrpContext_56, Irp_12, Status_15);
    Tmp_1061 := Status_15;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:nonnull} OurDeviceObject != 0;
    assume OurDeviceObject > 0;
    Tmp_1064 := Vcb__VOLUME_DEVICE_OBJECT(OurDeviceObject);
    assume {:nonnull} Tmp_1064 != 0;
    assume Tmp_1064 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[Tmp_1064] == 1281;
    assume {:nonnull} OurDeviceObject != 0;
    assume OurDeviceObject > 0;
    Vcb_39 := Vcb__VOLUME_DEVICE_OBJECT(OurDeviceObject);
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] != 1;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] != 2;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] != 3;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] == 23;
    call {:si_unique_call 889} Status_15 := FatPnpSurpriseRemove(IrpContext_56, Irp_12, Vcb_39);
    goto L47;

  L47:
    Tmp_1061 := Status_15;
    goto L1;

  anon16_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] != 23;
    call {:si_unique_call 890} ExReleaseResourceLite(0);
    call {:si_unique_call 891} sdv_IoSkipCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} Vcb_39 != 0;
    assume Vcb_39 > 0;
    havoc vslice_dummy_var_7459;
    call {:si_unique_call 892} Status_15 := sdv_IoCallDriver(vslice_dummy_var_7459, Irp_12);
    call {:si_unique_call 893} FatCompleteRequest_Real(IrpContext_56, 0, 0);
    goto L47;

  anon17_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] == 3;
    call {:si_unique_call 894} Status_15 := FatPnpCancelRemove(IrpContext_56, Irp_12, Vcb_39);
    goto L47;

  anon18_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] == 2;
    call {:si_unique_call 895} Status_15 := FatPnpRemove(IrpContext_56, Irp_12, Vcb_39);
    goto L47;

  anon21_Then:
    assume {:partition} Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_2)] == 1;
    call {:si_unique_call 896} Status_15 := FatPnpQueryRemove(IrpContext_56, Irp_12, Vcb_39);
    goto L47;

  anon20_Then:
    assume {:partition} Mem_T.INT4[Tmp_1064] != 1281;
    goto L20;

  anon19_Then:
    assume {:partition} Tmp_1063 != 0;
    Tmp_1065 := 1;
    goto L77;
}



procedure {:origName "FatFsdPnp"} FatFsdPnp(actual_VolumeDeviceObject: int, actual_Irp_13: int) returns (Tmp_1066: int);
  modifies alloc, Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.INT4, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Buffer__RTL_BITMAP, sdv_compFset, Mem_T.FcbState__FCB, s, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.RootDcb__VCB, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFsdPnp"} FatFsdPnp(actual_VolumeDeviceObject: int, actual_Irp_13: int) returns (Tmp_1066: int)
{
  var {:scalar} TopLevel: int;
  var {:scalar} Status_16: int;
  var {:scalar} Wait_3: int;
  var {:pointer} sdv_384: int;
  var {:pointer} IrpContext_57: int;
  var {:pointer} VolumeDeviceObject: int;
  var {:pointer} Irp_13: int;

  anon0:
    VolumeDeviceObject := actual_VolumeDeviceObject;
    Irp_13 := actual_Irp_13;
    IrpContext_57 := 0;
    call {:si_unique_call 897} KeEnterCriticalRegion();
    call {:si_unique_call 898} TopLevel := FatIsIrpTopLevel(Irp_13);
    call {:si_unique_call 899} sdv_384 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} sdv_384 != 0;
    assume sdv_384 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(sdv_384)] != 0;
    call {:si_unique_call 900} Wait_3 := corral_nondet();
    goto L48;

  L48:
    call {:si_unique_call 901} IrpContext_57 := FatCreateIrpContext(Irp_13, Wait_3);
    call {:si_unique_call 902} Status_16 := FatCommonPnp(IrpContext_57, Irp_13);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} TopLevel != 0;
    goto L35;

  L35:
    call {:si_unique_call 903} KeLeaveCriticalRegion();
    Tmp_1066 := Status_16;
    return;

  anon5_Then:
    assume {:partition} TopLevel == 0;
    goto L35;

  anon6_Then:
    assume {:partition} Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(sdv_384)] == 0;
    Wait_3 := 1;
    goto L48;
}



procedure {:origName "FatPnpQueryRemove"} FatPnpQueryRemove(actual_IrpContext_58: int, actual_Irp_14: int, actual_Vcb_40: int) returns (Tmp_1068: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, sdv_irql_current, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, Mem_T.Buffer__RTL_BITMAP, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, s, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.MajorFunction__IRP_CONTEXT, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPnpQueryRemove"} FatPnpQueryRemove(actual_IrpContext_58: int, actual_Irp_14: int, actual_Vcb_40: int) returns (Tmp_1068: int)
{
  var {:scalar} Status_17: int;
  var {:scalar} Event_5: int;
  var {:scalar} GlobalHeld: int;
  var {:scalar} Tmp_1070: int;
  var {:scalar} Tmp_1071: int;
  var {:scalar} VcbDeleted_1: int;
  var {:pointer} IrpContext_58: int;
  var {:pointer} Irp_14: int;
  var {:pointer} Vcb_40: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_7460: int;

  anon0:
    call {:si_unique_call 904} Event_5 := __HAVOC_malloc(124);
    IrpContext_58 := actual_IrpContext_58;
    Irp_14 := actual_Irp_14;
    Vcb_40 := actual_Vcb_40;
    VcbDeleted_1 := 0;
    GlobalHeld := 1;
    call {:si_unique_call 905} vslice_dummy_var_149 := FatAcquireExclusiveVcb(IrpContext_58, Vcb_40);
    call {:si_unique_call 906} ExReleaseResourceLite(0);
    GlobalHeld := 0;
    call {:si_unique_call 907} Status_17 := FatLockVolumeInternal(IrpContext_58, Vcb_40, 0);
    call {:si_unique_call 908} FatPnpAdjustVpbRefCount(Vcb_40, 1);
    call {:si_unique_call 909} ExReleaseResourceLite(0);
    assume {:nonnull} IrpContext_58 != 0;
    assume IrpContext_58 > 0;
    Tmp_1071 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_58)], 2);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1071 == 0;
    Tmp_1070 := 0;
    goto L97;

  L97:
    call {:si_unique_call 910} vslice_dummy_var_150 := ExAcquireResourceExclusiveLite(0, Tmp_1070);
    GlobalHeld := 1;
    call {:si_unique_call 911} vslice_dummy_var_151 := FatAcquireExclusiveVcb(IrpContext_58, Vcb_40);
    call {:si_unique_call 912} FatPnpAdjustVpbRefCount(Vcb_40, -1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Status_17 >= 0;
    call {:si_unique_call 913} FatFlushAndCleanVolume(IrpContext_58, Irp_14, Vcb_40, 1);
    call {:si_unique_call 914} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_14);
    call {:si_unique_call 915} KeInitializeEvent(Event_5, 0, 0);
    call {:si_unique_call 916} sdv_IoSetCompletionRoutine(Irp_14, li2bplFunctionConstant466, Event_5, 1, 1, 1);
    assume {:nonnull} Vcb_40 != 0;
    assume Vcb_40 > 0;
    havoc vslice_dummy_var_7460;
    call {:si_unique_call 917} Status_17 := sdv_IoCallDriver(vslice_dummy_var_7460, Irp_14);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Status_17 == 259;
    call {:si_unique_call 918} vslice_dummy_var_148 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    Status_17 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_14))];
    goto L65;

  L65:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Status_17 >= 0;
    call {:si_unique_call 919} VcbDeleted_1 := FatCheckForDismount#1(IrpContext_58, Vcb_40, 1);
    goto L47;

  L47:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} VcbDeleted_1 != 0;
    goto L77;

  L77:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} GlobalHeld != 0;
    call {:si_unique_call 920} ExReleaseResourceLite(0);
    goto L78;

  L78:
    call {:si_unique_call 921} FatCompleteRequest_Real(IrpContext_58, Irp_14, Status_17);
    Tmp_1068 := Status_17;
    return;

  anon17_Then:
    assume {:partition} GlobalHeld == 0;
    goto L78;

  anon14_Then:
    assume {:partition} VcbDeleted_1 == 0;
    call {:si_unique_call 922} ExReleaseResourceLite(0);
    goto L77;

  anon16_Then:
    assume {:partition} 0 > Status_17;
    goto L47;

  anon15_Then:
    assume {:partition} Status_17 != 259;
    goto L65;

  anon13_Then:
    assume {:partition} 0 > Status_17;
    goto L47;

  anon18_Then:
    assume {:partition} Tmp_1071 != 0;
    Tmp_1070 := 1;
    goto L97;
}



procedure {:origName "FatPnpRemove"} FatPnpRemove(actual_IrpContext_59: int, actual_Irp_15: int, actual_Vcb_41: int) returns (Tmp_1072: int);
  modifies alloc, Mem_T.INT4, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION, sdv_compFset, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, Mem_T.FcbState__FCB, Mem_T.Buffer__RTL_BITMAP, s, Mem_T.Flags__IRP_CONTEXT, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.MajorFunction__IRP_CONTEXT, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPnpRemove"} FatPnpRemove(actual_IrpContext_59: int, actual_Irp_15: int, actual_Vcb_41: int) returns (Tmp_1072: int)
{
  var {:scalar} Status_18: int;
  var {:scalar} Event_6: int;
  var {:scalar} VcbDeleted_2: int;
  var {:pointer} IrpContext_59: int;
  var {:pointer} Irp_15: int;
  var {:pointer} Vcb_41: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_7461: int;

  anon0:
    call {:si_unique_call 923} Event_6 := __HAVOC_malloc(124);
    IrpContext_59 := actual_IrpContext_59;
    Irp_15 := actual_Irp_15;
    Vcb_41 := actual_Vcb_41;
    call {:si_unique_call 924} vslice_dummy_var_152 := FatAcquireExclusiveVcb(IrpContext_59, Vcb_41);
    call {:si_unique_call 925} vslice_dummy_var_153 := FatUnlockVolumeInternal(IrpContext_59, Vcb_41, 0);
    call {:si_unique_call 926} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_15);
    call {:si_unique_call 927} KeInitializeEvent(Event_6, 0, 0);
    call {:si_unique_call 928} sdv_IoSetCompletionRoutine(Irp_15, li2bplFunctionConstant466, Event_6, 1, 1, 1);
    assume {:nonnull} Vcb_41 != 0;
    assume Vcb_41 > 0;
    havoc vslice_dummy_var_7461;
    call {:si_unique_call 929} Status_18 := sdv_IoCallDriver(vslice_dummy_var_7461, Irp_15);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Status_18 == 259;
    call {:si_unique_call 930} vslice_dummy_var_154 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Status_18 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))];
    goto L26;

  L26:
    call {:si_unique_call 931} FatFlushAndCleanVolume(IrpContext_59, Irp_15, Vcb_41, 0);
    call {:si_unique_call 932} VcbDeleted_2 := FatCheckForDismount#1(IrpContext_59, Vcb_41, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} VcbDeleted_2 != 0;
    goto L48;

  L48:
    call {:si_unique_call 933} ExReleaseResourceLite(0);
    call {:si_unique_call 934} FatCompleteRequest_Real(IrpContext_59, Irp_15, Status_18);
    Tmp_1072 := Status_18;
    return;

  anon6_Then:
    assume {:partition} VcbDeleted_2 == 0;
    call {:si_unique_call 935} ExReleaseResourceLite(0);
    goto L48;

  anon5_Then:
    assume {:partition} Status_18 != 259;
    goto L26;
}



procedure {:origName "FatPnpSurpriseRemove"} FatPnpSurpriseRemove(actual_IrpContext_60: int, actual_Irp_16: int, actual_Vcb_42: int) returns (Tmp_1074: int);
  modifies alloc, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.MajorFunction__IO_STACK_LOCATION, sdv_compFset, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, sdv_irql_current, Mem_T.Buffer__RTL_BITMAP, s, Mem_T.Flags__IRP_CONTEXT, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.MajorFunction__IRP_CONTEXT, t;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} old(s) == 0 ==> s != 0;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} s == 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPnpSurpriseRemove"} FatPnpSurpriseRemove(actual_IrpContext_60: int, actual_Irp_16: int, actual_Vcb_42: int) returns (Tmp_1074: int)
{
  var {:scalar} Status_19: int;
  var {:scalar} Event_7: int;
  var {:scalar} VcbDeleted_3: int;
  var {:pointer} IrpContext_60: int;
  var {:pointer} Irp_16: int;
  var {:pointer} Vcb_42: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_7462: int;

  anon0:
    call {:si_unique_call 936} Event_7 := __HAVOC_malloc(124);
    IrpContext_60 := actual_IrpContext_60;
    Irp_16 := actual_Irp_16;
    Vcb_42 := actual_Vcb_42;
    call {:si_unique_call 937} vslice_dummy_var_155 := FatAcquireExclusiveVcb(IrpContext_60, Vcb_42);
    call {:si_unique_call 938} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_16);
    call {:si_unique_call 939} KeInitializeEvent(Event_7, 0, 0);
    call {:si_unique_call 940} sdv_IoSetCompletionRoutine(Irp_16, li2bplFunctionConstant466, Event_7, 1, 1, 1);
    assume {:nonnull} Vcb_42 != 0;
    assume Vcb_42 > 0;
    havoc vslice_dummy_var_7462;
    call {:si_unique_call 941} Status_19 := sdv_IoCallDriver(vslice_dummy_var_7462, Irp_16);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Status_19 == 259;
    call {:si_unique_call 942} vslice_dummy_var_156 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Status_19 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_16))];
    goto L23;

  L23:
    call {:si_unique_call 943} FatFlushAndCleanVolume(IrpContext_60, Irp_16, Vcb_42, 0);
    call {:si_unique_call 944} VcbDeleted_3 := FatCheckForDismount#1(IrpContext_60, Vcb_42, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} VcbDeleted_3 != 0;
    goto L45;

  L45:
    call {:si_unique_call 945} ExReleaseResourceLite(0);
    call {:si_unique_call 946} FatCompleteRequest_Real(IrpContext_60, Irp_16, Status_19);
    Tmp_1074 := Status_19;
    return;

  anon6_Then:
    assume {:partition} VcbDeleted_3 == 0;
    call {:si_unique_call 947} ExReleaseResourceLite(0);
    goto L45;

  anon5_Then:
    assume {:partition} Status_19 != 259;
    goto L23;
}



procedure {:origName "_sdv_init30"} _sdv_init30();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init30"} _sdv_init30()
{
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 948} vslice_dummy_var_157 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_158: int;

  anon0:
    call {:si_unique_call 949} vslice_dummy_var_158 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 950} vslice_dummy_var_159 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_160: int;

  anon0:
    call {:si_unique_call 951} vslice_dummy_var_160 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init25"} _sdv_init25();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init25"} _sdv_init25()
{
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 952} vslice_dummy_var_161 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatMarkDevForVerifyIfVcbMounted"} FatMarkDevForVerifyIfVcbMounted(actual_Vcb_43: int) returns (Tmp_1086: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB;
  free ensures {:va_keep} Tmp_1086 == 1 || Tmp_1086 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatMarkDevForVerifyIfVcbMounted"} FatMarkDevForVerifyIfVcbMounted(actual_Vcb_43: int) returns (Tmp_1086: int)
{
  var {:scalar} SavedIrql_5: int;
  var {:pointer} Tmp_1087: int;
  var {:pointer} Tmp_1088: int;
  var {:pointer} Tmp_1089: int;
  var {:pointer} Tmp_1090: int;
  var {:scalar} Marked: int;
  var {:pointer} Tmp_1091: int;
  var {:pointer} Tmp_1092: int;
  var {:pointer} Tmp_1093: int;
  var {:pointer} Vcb_43: int;

  anon0:
    Vcb_43 := actual_Vcb_43;
    Marked := 0;
    call {:si_unique_call 953} Tmp_1087 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1087 != 0;
    assume Tmp_1087 > 0;
    Mem_T.INT4[Tmp_1087] := SavedIrql_5;
    call {:si_unique_call 954} IoAcquireVpbSpinLock(Tmp_1087);
    assume {:nonnull} Tmp_1087 != 0;
    assume Tmp_1087 > 0;
    SavedIrql_5 := Mem_T.INT4[Tmp_1087];
    assume {:nonnull} Vcb_43 != 0;
    assume Vcb_43 > 0;
    havoc Tmp_1089;
    assume {:nonnull} Tmp_1089 != 0;
    assume Tmp_1089 > 0;
    havoc Tmp_1093;
    assume {:nonnull} Tmp_1093 != 0;
    assume Tmp_1093 > 0;
    assume {:nonnull} Vcb_43 != 0;
    assume Vcb_43 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Vcb_43 != 0;
    assume Vcb_43 > 0;
    havoc Tmp_1091;
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    havoc Tmp_1088;
    assume {:nonnull} Vcb_43 != 0;
    assume Vcb_43 > 0;
    havoc Tmp_1090;
    assume {:nonnull} Tmp_1090 != 0;
    assume Tmp_1090 > 0;
    havoc Tmp_1092;
    assume {:nonnull} Tmp_1088 != 0;
    assume Tmp_1088 > 0;
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    Marked := 1;
    goto L13;

  L13:
    call {:si_unique_call 955} IoReleaseVpbSpinLock(SavedIrql_5);
    Tmp_1086 := Marked;
    return;

  anon3_Then:
    assume {:nonnull} Vcb_43 != 0;
    assume Vcb_43 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_43)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_43)], 131072);
    goto L13;
}



procedure {:origName "FatVerifyOperationIsLegal"} FatVerifyOperationIsLegal(actual_IrpContext_61: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatVerifyOperationIsLegal"} FatVerifyOperationIsLegal(actual_IrpContext_61: int)
{
  var {:pointer} Irp_17: int;
  var {:pointer} sdv_405: int;
  var {:pointer} FileObject_6: int;
  var {:pointer} IrpSp_3: int;
  var {:pointer} IrpContext_61: int;
  var vslice_dummy_var_162: int;

  anon0:
    call {:si_unique_call 956} vslice_dummy_var_162 := __HAVOC_malloc(4);
    IrpContext_61 := actual_IrpContext_61;
    assume {:nonnull} IrpContext_61 != 0;
    assume IrpContext_61 > 0;
    Irp_17 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_61)];
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Irp_17 != 0;
    call {:si_unique_call 957} sdv_405 := sdv_IoGetCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} sdv_405 != 0;
    assume sdv_405 > 0;
    FileObject_6 := Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(sdv_405)];
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} FileObject_6 != 0;
    assume {:nonnull} FileObject_6 != 0;
    assume FileObject_6 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 958} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] != 2;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] != 6;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] != 5;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] == 3;
    goto L27;

  L27:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} BAND(Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_3)], 4) == 0;
    goto L28;

  L28:
    assume {:nonnull} IrpContext_61 != 0;
    assume IrpContext_61 > 0;
    call {:si_unique_call 959} ExRaiseStatus(-1073741528);
    goto L1;

  L1:
    return;

  anon28_Then:
    assume {:partition} BAND(Mem_T.MinorFunction__IO_STACK_LOCATION[MinorFunction__IO_STACK_LOCATION(IrpSp_3)], 4) != 0;
    goto L1;

  anon26_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] != 3;
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] != 4;
    goto L28;

  anon27_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] == 4;
    goto L27;

  anon25_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] == 5;
    goto L1;

  anon24_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] == 6;
    goto L1;

  anon23_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_3)] == 2;
    goto L1;

  anon22_Then:
    goto L1;

  anon21_Then:
    goto L1;

  anon30_Then:
    assume {:partition} FileObject_6 == 0;
    goto L1;

  anon29_Then:
    assume {:partition} Irp_17 == 0;
    goto L1;
}



procedure {:origName "FatVerifyVcb"} FatVerifyVcb(actual_IrpContext_62: int, actual_Vcb_44: int);
  modifies alloc, Mem_T.INT4, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, sdv_irql_current, Mem_T.VcbState__VCB, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatVerifyVcb"} FatVerifyVcb(actual_IrpContext_62: int, actual_Vcb_44: int)
{
  var {:scalar} DevMarkedForVerify: int;
  var {:scalar} Tmp_1096: int;
  var {:pointer} Tmp_1097: int;
  var {:scalar} Status_20: int;
  var {:scalar} Iosb_5: int;
  var {:dopa} {:scalar} ChangeCount: int;
  var {:pointer} IrpSp_4: int;
  var {:scalar} Tmp_1101: int;
  var {:scalar} sdv_409: int;
  var {:pointer} Tmp_1103: int;
  var {:pointer} Tmp_1104: int;
  var {:scalar} Tmp_1105: int;
  var {:pointer} Tmp_1106: int;
  var {:pointer} Tmp_1107: int;
  var {:pointer} IrpContext_62: int;
  var {:pointer} Vcb_44: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_7463: int;

  anon0:
    call {:si_unique_call 960} Iosb_5 := __HAVOC_malloc(12);
    call {:si_unique_call 961} ChangeCount := __HAVOC_malloc(4);
    call {:si_unique_call 962} vslice_dummy_var_163 := __HAVOC_malloc(4);
    IrpContext_62 := actual_IrpContext_62;
    Vcb_44 := actual_Vcb_44;
    assume {:nonnull} ChangeCount != 0;
    assume ChangeCount > 0;
    Mem_T.INT4[ChangeCount] := 0;
    Status_20 := 0;
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    havoc Tmp_1103;
    assume {:nonnull} Tmp_1103 != 0;
    assume Tmp_1103 > 0;
    havoc Tmp_1107;
    assume {:nonnull} Tmp_1107 != 0;
    assume Tmp_1107 > 0;
    havoc Tmp_1096;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Tmp_1096 == 0;
    DevMarkedForVerify := 0;
    goto L91;

  L91:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_44)], 2) != 0;
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    havoc Tmp_1106;
    assume {:nonnull} Tmp_1106 != 0;
    assume Tmp_1106 > 0;
    havoc Tmp_1097;
    assume {:nonnull} Tmp_1097 != 0;
    assume Tmp_1097 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    Tmp_1101 := 149504;
    goto L16;

  L16:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    havoc vslice_dummy_var_7463;
    call {:si_unique_call 963} Status_20 := FatPerformDevIoCtrl(IrpContext_62, Tmp_1101, vslice_dummy_var_7463, ChangeCount, 4, 0, 1, Iosb_5);
    assume {:nonnull} Iosb_5 != 0;
    assume Iosb_5 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} ChangeCount != 0;
    assume ChangeCount > 0;
    Mem_T.INT4[ChangeCount] := 0;
    goto L21;

  L21:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Status_20 == -1073741661;
    goto L26;

  L26:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_44)], 131072) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} DevMarkedForVerify == 0;
    call {:si_unique_call 964} DevMarkedForVerify := FatMarkDevForVerifyIfVcbMounted(Vcb_44);
    goto L12;

  L12:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} DevMarkedForVerify != 0;
    goto L35;

  L35:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Status_20 >= 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} DevMarkedForVerify == 0;
    goto L40;

  L40:
    call {:si_unique_call 965} FatQuickVerifyVcb(IrpContext_62, Vcb_44);
    return;

  anon53_Then:
    assume {:partition} DevMarkedForVerify != 0;
    goto L36;

  L36:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    call {:si_unique_call 966} IoSetHardErrorOrVerifyDevice(0, 0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} DevMarkedForVerify != 0;
    Tmp_1105 := 22;
    goto L46;

  L46:
    assume {:nonnull} IrpContext_62 != 0;
    assume IrpContext_62 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} DevMarkedForVerify != 0;
    goto L50;

  L50:
    call {:si_unique_call 967} sdv_409 := corral_nondet();
    call {:si_unique_call 968} ExRaiseStatus(sdv_409);
    goto L40;

  anon59_Then:
    assume {:partition} DevMarkedForVerify == 0;
    goto L50;

  anon54_Then:
    assume {:partition} DevMarkedForVerify == 0;
    Tmp_1105 := Status_20;
    goto L46;

  anon52_Then:
    assume {:partition} 0 > Status_20;
    goto L36;

  anon41_Then:
    assume {:partition} DevMarkedForVerify == 0;
    assume {:nonnull} IrpContext_62 != 0;
    assume IrpContext_62 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_62)] == 0;
    assume {:nonnull} IrpContext_62 != 0;
    assume IrpContext_62 > 0;
    call {:si_unique_call 969} IrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_62)]);
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    Tmp_1104 := Mem_T.FileObject__IO_STACK_LOCATION[FileObject__IO_STACK_LOCATION(IrpSp_4)];
    assume {:nonnull} Tmp_1104 != 0;
    assume Tmp_1104 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    DevMarkedForVerify := 1;
    goto L35;

  anon55_Then:
    goto L35;

  anon60_Then:
    goto L35;

  anon51_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_62)] != 0;
    goto L35;

  anon48_Then:
    assume {:partition} DevMarkedForVerify != 0;
    goto L12;

  anon47_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_44)], 131072) != 0;
    goto L12;

  anon45_Then:
    assume {:partition} Status_20 != -1073741661;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Status_20 == -1073741805;
    goto L26;

  anon46_Then:
    assume {:partition} Status_20 != -1073741805;
    goto L23;

  L23:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Status_20 != 22;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Status_20 >= 0;
    assume {:nonnull} ChangeCount != 0;
    assume ChangeCount > 0;
    assume {:nonnull} Vcb_44 != 0;
    assume Vcb_44 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L26;

  anon50_Then:
    goto L12;

  anon49_Then:
    assume {:partition} 0 > Status_20;
    goto L12;

  anon44_Then:
    assume {:partition} Status_20 == 22;
    goto L26;

  anon43_Then:
    goto L23;

  anon42_Then:
    goto L21;

  anon58_Then:
    Tmp_1101 := 477184;
    goto L16;

  anon57_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_44)], 2) == 0;
    goto L12;

  anon56_Then:
    assume {:partition} Tmp_1096 != 0;
    DevMarkedForVerify := 1;
    goto L91;
}



procedure {:origName "FatDetermineAndMarkFcbCondition"} FatDetermineAndMarkFcbCondition(actual_IrpContext_63: int, actual_Fcb_14: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatDetermineAndMarkFcbCondition"} FatDetermineAndMarkFcbCondition(actual_IrpContext_63: int, actual_Fcb_14: int)
{
  var {:scalar} sdv_411: int;
  var {:pointer} Tmp_1109: int;
  var {:pointer} Dirent_7: int;
  var {:pointer} Buffer_4: int;
  var {:pointer} DirentBcb_2: int;
  var {:scalar} FirstClusterOfFile: int;
  var {:pointer} Tmp_1111: int;
  var {:scalar} Name_3: int;
  var {:pointer} Tmp_1112: int;
  var {:pointer} IrpContext_63: int;
  var {:pointer} Fcb_14: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_7464: int;

  anon0:
    call {:si_unique_call 970} Dirent_7 := __HAVOC_malloc(4);
    call {:si_unique_call 971} DirentBcb_2 := __HAVOC_malloc(4);
    call {:si_unique_call 972} vslice_dummy_var_164 := __HAVOC_malloc(4);
    call {:si_unique_call 973} Name_3 := __HAVOC_malloc(12);
    IrpContext_63 := actual_IrpContext_63;
    Fcb_14 := actual_Fcb_14;
    call {:si_unique_call 974} Buffer_4 := __HAVOC_malloc(64);
    Tmp_1111 := Fcb_14;
    assume {:nonnull} Tmp_1111 != 0;
    assume Tmp_1111 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[Tmp_1111] == 1284;
    call {:si_unique_call 975} FatResetFcb(IrpContext_63, Fcb_14);
    call {:si_unique_call 976} FatMarkFcbCondition(IrpContext_63, Fcb_14, 1, 0);
    goto L1;

  L1:
    return;

  anon25_Then:
    assume {:partition} Mem_T.INT4[Tmp_1111] != 1284;
    call {:si_unique_call 977} FatGetDirentFromFcbOrDcb(IrpContext_63, Fcb_14, Dirent_7, DirentBcb_2);
    assume {:nonnull} DirentBcb_2 != 0;
    assume DirentBcb_2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Name_3 != 0;
    assume Name_3 > 0;
    assume {:nonnull} Name_3 != 0;
    assume Name_3 > 0;
    assume {:nonnull} Dirent_7 != 0;
    assume Dirent_7 > 0;
    havoc vslice_dummy_var_7464;
    call {:si_unique_call 978} Fat8dot3ToString(IrpContext_63, vslice_dummy_var_7464, 0, Name_3);
    assume {:nonnull} Dirent_7 != 0;
    assume Dirent_7 > 0;
    havoc FirstClusterOfFile;
    assume {:nonnull} Fcb_14 != 0;
    assume Fcb_14 > 0;
    havoc Tmp_1112;
    assume {:nonnull} Tmp_1112 != 0;
    assume Tmp_1112 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 979} FirstClusterOfFile := corral_nondet();
    goto L35;

  L35:
    call {:si_unique_call 980} sdv_411 := corral_nondet();
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_411 != 0;
    Tmp_1109 := Fcb_14;
    assume {:nonnull} Tmp_1109 != 0;
    assume Tmp_1109 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[Tmp_1109] == 1282;
    assume {:nonnull} Dirent_7 != 0;
    assume Dirent_7 > 0;
    assume {:nonnull} Fcb_14 != 0;
    assume Fcb_14 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L44;

  L44:
    assume {:nonnull} Fcb_14 != 0;
    assume Fcb_14 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Dirent_7 != 0;
    assume Dirent_7 > 0;
    assume {:nonnull} Fcb_14 != 0;
    assume Fcb_14 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 981} FatResetFcb(IrpContext_63, Fcb_14);
    call {:si_unique_call 982} FatMarkFcbCondition(IrpContext_63, Fcb_14, 1, 0);
    goto L53;

  L53:
    assume {:nonnull} DirentBcb_2 != 0;
    assume DirentBcb_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} DirentBcb_2 != 0;
    assume DirentBcb_2 > 0;
    goto L1;

  anon24_Then:
    goto L1;

  anon23_Then:
    goto L40;

  L40:
    call {:si_unique_call 983} FatMarkFcbCondition(IrpContext_63, Fcb_14, 2, 1);
    goto L53;

  anon21_Then:
    goto L40;

  anon22_Then:
    goto L40;

  anon27_Then:
    assume {:partition} Mem_T.INT4[Tmp_1109] != 1282;
    goto L44;

  anon20_Then:
    assume {:partition} sdv_411 == 0;
    goto L40;

  anon26_Then:
    goto L35;

  anon19_Then:
    call {:si_unique_call 984} FatMarkFcbCondition(IrpContext_63, Fcb_14, 2, 1);
    goto L1;
}



procedure {:origName "FatVerifyFcb"} FatVerifyFcb(actual_IrpContext_64: int, actual_Fcb_15: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatVerifyFcb"} FatVerifyFcb(actual_IrpContext_64: int, actual_Fcb_15: int)
{
  var {:pointer} Tmp_1113: int;
  var {:pointer} Tmp_1114: int;
  var {:pointer} sdv_412: int;
  var {:pointer} Tmp_1115: int;
  var {:pointer} CurrentFcb: int;
  var {:pointer} Tmp_1116: int;
  var {:pointer} Tmp_1117: int;
  var {:pointer} Tmp_1118: int;
  var {:pointer} IrpContext_64: int;
  var {:pointer} Fcb_15: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_7465: int;
  var vslice_dummy_var_7466: int;

  anon0:
    call {:si_unique_call 985} vslice_dummy_var_165 := __HAVOC_malloc(4);
    IrpContext_64 := actual_IrpContext_64;
    Fcb_15 := actual_Fcb_15;
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc Tmp_1116;
    assume {:nonnull} Tmp_1116 != 0;
    assume Tmp_1116 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_1116)], 65536) != 0;
    assume {:nonnull} IrpContext_64 != 0;
    assume IrpContext_64 > 0;
    call {:si_unique_call 986} ExRaiseStatus(-1073741202);
    goto L5;

  L5:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_15)], 1) != 0;
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto L10;

  L10:
    Tmp_1114 := Fcb_15;
    assume {:nonnull} Tmp_1114 != 0;
    assume Tmp_1114 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Mem_T.INT4[Tmp_1114] != 1284;
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc Tmp_1117;
    assume {:nonnull} Tmp_1117 != 0;
    assume Tmp_1117 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Tmp_1117)], 1) != 0;
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc Tmp_1118;
    assume {:nonnull} Tmp_1118 != 0;
    assume Tmp_1118 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L13;

  L13:
    call {:si_unique_call 987} sdv_412 := sdv_KeGetCurrentThread();
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc Tmp_1113;
    assume {:nonnull} Tmp_1113 != 0;
    assume Tmp_1113 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc vslice_dummy_var_7465;
    call {:si_unique_call 988} FatQuickVerifyVcb(IrpContext_64, vslice_dummy_var_7465);
    goto L19;

  L19:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    CurrentFcb := Fcb_15;
    goto L29;

  L29:
    call {:si_unique_call 989} Tmp_1115, CurrentFcb := FatVerifyFcb_loop_L29(Tmp_1115, CurrentFcb, IrpContext_64);
    goto L29_last;

  L29_last:
    assume {:nonnull} CurrentFcb != 0;
    assume CurrentFcb > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    call {:si_unique_call 990} FatDetermineAndMarkFcbCondition(IrpContext_64, CurrentFcb);
    assume {:nonnull} CurrentFcb != 0;
    assume CurrentFcb > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    Tmp_1115 := CurrentFcb;
    assume {:nonnull} Tmp_1115 != 0;
    assume Tmp_1115 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[Tmp_1115] != 1284;
    assume {:nonnull} CurrentFcb != 0;
    assume CurrentFcb > 0;
    havoc CurrentFcb;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:partition} Mem_T.INT4[Tmp_1115] == 1284;
    goto L30;

  L30:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} IrpContext_64 != 0;
    assume IrpContext_64 > 0;
    call {:si_unique_call 991} ExRaiseStatus(-1073741672);
    goto L1;

  L1:
    return;

  anon33_Then:
    goto L1;

  anon34_Then:
    goto L30;

  anon32_Then:
    goto L30;

  anon35_Then:
    assume {:nonnull} Fcb_15 != 0;
    assume Fcb_15 > 0;
    havoc vslice_dummy_var_7466;
    call {:si_unique_call 992} KeBugCheckEx(35, 1966584, vslice_dummy_var_7466, 0, 0);
    goto L1;

  anon36_Then:
    assume {:nonnull} IrpContext_64 != 0;
    assume IrpContext_64 > 0;
    call {:si_unique_call 993} ExRaiseStatus(-1073741672);
    goto L1;

  anon31_Then:
    goto L1;

  anon41_Then:
    goto L19;

  anon40_Then:
    goto L1;

  anon39_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Tmp_1117)], 1) == 0;
    goto L13;

  anon38_Then:
    assume {:partition} Mem_T.INT4[Tmp_1114] == 1284;
    goto L13;

  anon30_Then:
    goto L1;

  anon29_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_15)], 1) == 0;
    goto L10;

  anon37_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_1116)], 65536) == 0;
    goto L5;
}



procedure {:origName "FatMarkFcbCondition"} FatMarkFcbCondition(actual_IrpContext_65: int, actual_Fcb_16: int, actual_FcbCondition: int, actual_Recursive: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatMarkFcbCondition"} FatMarkFcbCondition(actual_IrpContext_65: int, actual_Fcb_16: int, actual_FcbCondition: int, actual_Recursive: int)
{
  var {:pointer} Tmp_1122: int;
  var {:scalar} sdv_413: int;
  var {:scalar} Tmp_1123: int;
  var {:pointer} Tmp_1124: int;
  var {:pointer} OriginalFcb_1: int;
  var {:pointer} Tmp_1126: int;
  var {:scalar} Tmp_1128: int;
  var {:pointer} IrpContext_65: int;
  var {:pointer} Fcb_16: int;
  var {:scalar} FcbCondition: int;
  var {:scalar} Recursive: int;
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 994} vslice_dummy_var_166 := __HAVOC_malloc(4);
    IrpContext_65 := actual_IrpContext_65;
    Fcb_16 := actual_Fcb_16;
    FcbCondition := actual_FcbCondition;
    Recursive := actual_Recursive;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_16)], 4) != 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_16)], 4) == 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] == 1282;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L13;

  L13:
    Tmp_1128 := 0;
    goto L14;

  L14:
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto L8;

  L8:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} FcbCondition == 3;
    goto L23;

  L23:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Recursive != 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] == 1283;
    goto L28;

  L28:
    OriginalFcb_1 := Fcb_16;
    goto L29;

  L29:
    call {:si_unique_call 995} Fcb_16 := FatMarkFcbCondition_loop_L29(OriginalFcb_1, IrpContext_65, Fcb_16, FcbCondition);
    goto L29_last;

  L29_last:
    call {:si_unique_call 997} Fcb_16 := FatGetNextFcbTopDown(IrpContext_65, Fcb_16, OriginalFcb_1);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Fcb_16 != 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} Fcb_16 == 0;
    goto L1;

  anon33_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] != 1283;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] == 1284;
    goto L28;

  anon34_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] != 1284;
    goto L1;

  anon32_Then:
    assume {:partition} Recursive == 0;
    goto L1;

  anon28_Then:
    assume {:partition} FcbCondition != 3;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} FcbCondition == 2;
    goto L23;

  anon31_Then:
    assume {:partition} FcbCondition != 2;
    goto L1;

  anon29_Then:
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    call {:si_unique_call 996} sdv_413 := corral_nondet();
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_413 != 0;
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    Tmp_1124 := FileLock_unnamed_tag_69(Fcb_unnamed_tag_67(Specific__FCB(Fcb_16)));
    assume {:nonnull} Tmp_1124 != 0;
    assume Tmp_1124 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto L18;

  L18:
    Tmp_1123 := 2;
    goto L19;

  L19:
    Tmp_1128 := Tmp_1123;
    goto L14;

  anon37_Then:
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    havoc Tmp_1126;
    assume {:nonnull} Tmp_1126 != 0;
    assume Tmp_1126 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} Fcb_16 != 0;
    assume Fcb_16 > 0;
    havoc Tmp_1122;
    assume {:nonnull} Tmp_1122 != 0;
    assume Tmp_1122 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_1122)], 16384) == 0;
    Tmp_1123 := 1;
    goto L19;

  anon39_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Tmp_1122)], 16384) != 0;
    goto L18;

  anon38_Then:
    goto L18;

  anon30_Then:
    assume {:partition} sdv_413 == 0;
    goto L13;

  anon36_Then:
    assume {:partition} Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER[NodeTypeCode__FSRTL_COMMON_FCB_HEADER(Header__FCB(Fcb_16))] != 1282;
    goto L8;
}



procedure {:origName "_sdv_init23"} _sdv_init23();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init23"} _sdv_init23()
{
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 998} vslice_dummy_var_167 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatQuickVerifyVcb"} FatQuickVerifyVcb(actual_IrpContext_67: int, actual_Vcb_46: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatQuickVerifyVcb"} FatQuickVerifyVcb(actual_IrpContext_67: int, actual_Vcb_46: int)
{
  var {:pointer} Tmp_1146: int;
  var {:pointer} sdv_422: int;
  var {:pointer} Tmp_1150: int;
  var {:pointer} IrpContext_67: int;
  var {:pointer} Vcb_46: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_7467: int;

  anon0:
    call {:si_unique_call 999} vslice_dummy_var_168 := __HAVOC_malloc(4);
    IrpContext_67 := actual_IrpContext_67;
    Vcb_46 := actual_Vcb_46;
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    havoc Tmp_1150;
    assume {:nonnull} Tmp_1150 != 0;
    assume Tmp_1150 > 0;
    havoc Tmp_1146;
    assume {:nonnull} Tmp_1146 != 0;
    assume Tmp_1146 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    call {:si_unique_call 1000} IoSetHardErrorOrVerifyDevice(0, 0);
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1001} ExRaiseStatus(22);
    goto L4;

  L4:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_46)], 65536) != 0;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1002} ExRaiseStatus(-1073741202);
    goto L1;

  L1:
    return;

  anon31_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_46)], 65536) == 0;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1003} ExRaiseStatus(-1073741672);
    goto L1;

  anon40_Then:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    havoc vslice_dummy_var_7467;
    call {:si_unique_call 1004} KeBugCheckEx(35, 1967806, vslice_dummy_var_7467, 0, 0);
    goto L1;

  anon41_Then:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    call {:si_unique_call 1005} IoSetHardErrorOrVerifyDevice(0, 0);
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1006} ExRaiseStatus(-1073741806);
    goto L1;

  anon29_Then:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_46)], 16384) != 0;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 4;
    goto L37;

  L37:
    assume {:nonnull} Vcb_46 != 0;
    assume Vcb_46 > 0;
    call {:si_unique_call 1007} IoSetHardErrorOrVerifyDevice(0, 0);
    call {:si_unique_call 1008} vslice_dummy_var_169 := FatMarkDevForVerifyIfVcbMounted(Vcb_46);
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1009} ExRaiseStatus(-1073741662);
    goto L1;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 4;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 6;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 8;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 9;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 11;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 13;
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} IrpContext_67 != 0;
    assume IrpContext_67 > 0;
    call {:si_unique_call 1010} sdv_422 := sdv_IoGetCurrentIrpStackLocation(Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_67)]);
    assume {:nonnull} sdv_422 != 0;
    assume sdv_422 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L37;

  anon39_Then:
    goto L1;

  anon38_Then:
    goto L1;

  anon37_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] != 13;
    goto L1;

  anon36_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 11;
    goto L37;

  anon35_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 9;
    goto L37;

  anon34_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 8;
    goto L37;

  anon33_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_67)] == 6;
    goto L37;

  anon30_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_46)], 16384) == 0;
    goto L1;

  anon42_Then:
    goto L4;
}



procedure {:origName "FatResetFcb"} FatResetFcb(actual_IrpContext_68: int, actual_Fcb_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatResetFcb"} FatResetFcb(actual_IrpContext_68: int, actual_Fcb_17: int)
{
  var {:pointer} Tmp_1153: int;
  var {:pointer} Tmp_1154: int;
  var {:pointer} Tmp_1155: int;
  var {:pointer} Fcb_17: int;
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 1011} vslice_dummy_var_170 := __HAVOC_malloc(4);
    Fcb_17 := actual_Fcb_17;
    Tmp_1154 := Fcb_17;
    assume {:nonnull} Tmp_1154 != 0;
    assume Tmp_1154 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[Tmp_1154] != 1284;
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_17)], 4) == 0;
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    goto L4;

  L4:
    Tmp_1155 := Fcb_17;
    assume {:nonnull} Tmp_1155 != 0;
    assume Tmp_1155 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[Tmp_1155] == 1283;
    goto L13;

  L13:
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} Mem_T.INT4[Tmp_1155] != 1283;
    Tmp_1153 := Fcb_17;
    assume {:nonnull} Tmp_1153 != 0;
    assume Tmp_1153 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[Tmp_1153] == 1284;
    goto L13;

  anon15_Then:
    assume {:partition} Mem_T.INT4[Tmp_1153] != 1284;
    goto L1;

  anon12_Then:
    assume {:nonnull} Fcb_17 != 0;
    assume Fcb_17 > 0;
    goto L4;

  anon11_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(Fcb_17)], 4) != 0;
    goto L4;

  anon13_Then:
    assume {:partition} Mem_T.INT4[Tmp_1154] == 1284;
    goto L4;
}



procedure {:origName "_sdv_init28"} _sdv_init28();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init28"} _sdv_init28()
{
  var vslice_dummy_var_171: int;

  anon0:
    call {:si_unique_call 1012} vslice_dummy_var_171 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatRemoveClose"} FatRemoveClose(actual_Vcb_49: int, actual_LastVcbHint: int) returns (Tmp_1170: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatRemoveClose"} FatRemoveClose(actual_Vcb_49: int, actual_LastVcbHint: int) returns (Tmp_1170: int)
{
  var {:scalar} WorkerThread: int;
  var {:pointer} sdv_454: int;
  var {:scalar} sdv_455: int;
  var {:pointer} sdv_456: int;
  var {:pointer} sdv_458: int;
  var {:scalar} sdv_459: int;
  var {:scalar} sdv_460: int;
  var {:scalar} sdv_463: int;
  var {:pointer} sdv_465: int;
  var {:pointer} Entry_2: int;
  var {:pointer} CloseContext_2: int;
  var {:pointer} Vcb_49: int;
  var {:pointer} LastVcbHint: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_175: int;

  anon0:
    Vcb_49 := actual_Vcb_49;
    LastVcbHint := actual_LastVcbHint;
    call {:si_unique_call 1013} ExAcquireFastMutexUnsafe(0);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Vcb_49 != 0;
    WorkerThread := 0;
    goto L127;

  L127:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Vcb_49 != 0;
    goto L12;

  L12:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Vcb_49 != 0;
    call {:si_unique_call 1014} sdv_459 := sdv_IsListEmpty(0);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_459 != 0;
    call {:si_unique_call 1015} sdv_463 := sdv_IsListEmpty(0);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_463 != 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} LastVcbHint == 0;
    CloseContext_2 := 0;
    goto L33;

  L33:
    call {:si_unique_call 1016} ExReleaseFastMutexUnsafe(0);
    Tmp_1170 := CloseContext_2;
    return;

  anon50_Then:
    assume {:partition} LastVcbHint != 0;
    goto L13;

  L13:
    call {:si_unique_call 1017} sdv_455 := sdv_IsListEmpty(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_455 != 0;
    call {:si_unique_call 1018} sdv_460 := sdv_IsListEmpty(0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_460 != 0;
    goto L64;

  L64:
    CloseContext_2 := 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} WorkerThread != 0;
    goto L33;

  anon66_Then:
    assume {:partition} WorkerThread == 0;
    goto L33;

  anon52_Then:
    assume {:partition} sdv_460 == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L68;

  L68:
    call {:si_unique_call 1019} Entry_2 := RemoveHeadList(DelayedCloseList__FAT_DATA(FatData));
    call {:si_unique_call 1020} sdv_454 := sdv_containing_record(Entry_2, 0);
    CloseContext_2 := sdv_454;
    call {:si_unique_call 1021} vslice_dummy_var_172 := sdv_RemoveEntryList(0);
    goto L33;

  anon53_Then:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L68;

  anon54_Then:
    goto L64;

  anon51_Then:
    assume {:partition} sdv_455 == 0;
    call {:si_unique_call 1022} Entry_2 := RemoveHeadList(AsyncCloseList__FAT_DATA(FatData));
    call {:si_unique_call 1023} sdv_465 := sdv_containing_record(Entry_2, 0);
    CloseContext_2 := sdv_465;
    call {:si_unique_call 1024} vslice_dummy_var_173 := sdv_RemoveEntryList(0);
    goto L33;

  anon49_Then:
    assume {:partition} sdv_463 == 0;
    assume {:nonnull} Vcb_49 != 0;
    assume Vcb_49 > 0;
    call {:si_unique_call 1025} Entry_2 := RemoveHeadList(DelayedCloseList__VCB(Vcb_49));
    call {:si_unique_call 1026} sdv_456 := sdv_containing_record(Entry_2, 8);
    CloseContext_2 := sdv_456;
    call {:si_unique_call 1027} vslice_dummy_var_174 := sdv_RemoveEntryList(0);
    goto L33;

  anon48_Then:
    assume {:partition} sdv_459 == 0;
    assume {:nonnull} Vcb_49 != 0;
    assume Vcb_49 > 0;
    call {:si_unique_call 1028} Entry_2 := RemoveHeadList(AsyncCloseList__VCB(Vcb_49));
    call {:si_unique_call 1029} sdv_458 := sdv_containing_record(Entry_2, 8);
    CloseContext_2 := sdv_458;
    call {:si_unique_call 1030} vslice_dummy_var_175 := sdv_RemoveEntryList(0);
    goto L33;

  anon47_Then:
    assume {:partition} Vcb_49 == 0;
    goto L13;

  anon65_Then:
    assume {:partition} Vcb_49 == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} LastVcbHint != 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L91;

  L91:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto L92;

  L92:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L96;

  L96:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L97;

  L97:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto L101;

  L101:
    Vcb_49 := LastVcbHint;
    goto L12;

  anon62_Then:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L101;

  anon64_Then:
    goto L12;

  anon63_Then:
    goto L97;

  anon61_Then:
    goto L97;

  anon58_Then:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L97;

  anon60_Then:
    goto L96;

  anon59_Then:
    goto L92;

  anon57_Then:
    goto L92;

  anon55_Then:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L92;

  anon56_Then:
    goto L91;

  anon46_Then:
    assume {:partition} LastVcbHint == 0;
    goto L12;

  anon45_Then:
    assume {:partition} Vcb_49 == 0;
    WorkerThread := 1;
    goto L127;
}



procedure {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_1: int, actual_Entry_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_1: int, actual_Entry_3: int)
{
  var {:pointer} Tmp_1174: int;
  var {:pointer} Lookaside_1: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1031} vslice_dummy_var_176 := __HAVOC_malloc(4);
    Lookaside_1 := actual_Lookaside_1;
    assume {:nonnull} Lookaside_1 != 0;
    assume Lookaside_1 > 0;
    assume {:nonnull} Lookaside_1 != 0;
    assume Lookaside_1 > 0;
    Tmp_1174 := ListHead__GENERAL_LOOKASIDE(L__NPAGED_LOOKASIDE_LIST(Lookaside_1));
    assume {:nonnull} Lookaside_1 != 0;
    assume Lookaside_1 > 0;
    assume {:nonnull} Tmp_1174 != 0;
    assume Tmp_1174 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Lookaside_1 != 0;
    assume Lookaside_1 > 0;
    assume {:nonnull} Lookaside_1 != 0;
    assume Lookaside_1 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L1;

  anon5_Then:
    call {:si_unique_call 1032} vslice_dummy_var_177 := __HAVOC_malloc(1);
    goto L1;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1175: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1175: int)
{
  var {:pointer} Entry_4: int;
  var {:pointer} Flink: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_4;
    assume {:nonnull} Entry_4 != 0;
    assume Entry_4 > 0;
    havoc Flink;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} Flink != 0;
    assume Flink > 0;
    Tmp_1175 := Entry_4;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1033} vslice_dummy_var_178 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1034} vslice_dummy_var_179 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init32"} _sdv_init32();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init32"} _sdv_init32()
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1035} vslice_dummy_var_180 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1036} vslice_dummy_var_181 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1037} vslice_dummy_var_182 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "FatAcquireExclusiveVcb"} FatAcquireExclusiveVcb(actual_IrpContext_70: int, actual_Vcb_50: int) returns (Tmp_1187: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1187 == 1 || Tmp_1187 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatAcquireExclusiveVcb"} FatAcquireExclusiveVcb(actual_IrpContext_70: int, actual_Vcb_50: int) returns (Tmp_1187: int)
{
  var {:scalar} Tmp_1188: int;
  var {:scalar} sdv_470: int;
  var {:scalar} sdv_472: int;
  var {:scalar} Tmp_1190: int;
  var {:pointer} IrpContext_70: int;

  anon0:
    IrpContext_70 := actual_IrpContext_70;
    assume {:nonnull} IrpContext_70 != 0;
    assume IrpContext_70 > 0;
    Tmp_1188 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_70)], 2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_1188 == 0;
    Tmp_1190 := 0;
    goto L33;

  L33:
    call {:si_unique_call 1038} sdv_470 := ExAcquireResourceExclusiveLite(0, Tmp_1190);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_470 != 0;
    call {:si_unique_call 1039} FatVerifyOperationIsLegal(IrpContext_70);
    call {:si_unique_call 1040} sdv_472 := sdv_AbnormalTermination();
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_472 != 0;
    call {:si_unique_call 1041} ExReleaseResourceLite(0);
    goto L24;

  L24:
    Tmp_1187 := 1;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} sdv_472 == 0;
    goto L24;

  anon7_Then:
    assume {:partition} sdv_470 == 0;
    Tmp_1187 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} Tmp_1188 != 0;
    Tmp_1190 := 1;
    goto L33;
}



procedure {:origName "FatAcquireExclusiveFcb"} FatAcquireExclusiveFcb(actual_IrpContext_71: int, actual_Fcb_19: int) returns (Tmp_1191: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1191 == 1 || Tmp_1191 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatAcquireExclusiveFcb"} FatAcquireExclusiveFcb(actual_IrpContext_71: int, actual_Fcb_19: int) returns (Tmp_1191: int)
{
  var {:pointer} Tmp_1193: int;
  var {:scalar} sdv_473: int;
  var {:scalar} sdv_474: int;
  var {:scalar} Tmp_1194: int;
  var {:scalar} Tmp_1195: int;
  var {:scalar} sdv_476: int;
  var {:scalar} sdv_478: int;
  var {:pointer} Tmp_1197: int;
  var {:pointer} IrpContext_71: int;
  var {:pointer} Fcb_19: int;
  var vslice_dummy_var_183: int;

  anon0:
    IrpContext_71 := actual_IrpContext_71;
    Fcb_19 := actual_Fcb_19;
    goto L3;

  L3:
    call {:si_unique_call 1042} Tmp_1193, sdv_473, Tmp_1194, Tmp_1195, sdv_476, sdv_478, Tmp_1197, vslice_dummy_var_183 := FatAcquireExclusiveFcb_loop_L3(Tmp_1193, sdv_473, Tmp_1194, Tmp_1195, sdv_476, sdv_478, Tmp_1197, IrpContext_71, Fcb_19, vslice_dummy_var_183);
    goto L3_last;

  L3_last:
    assume {:nonnull} IrpContext_71 != 0;
    assume IrpContext_71 > 0;
    Tmp_1194 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_71)], 2);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_1194 == 0;
    Tmp_1195 := 0;
    goto L57;

  L57:
    call {:si_unique_call 1043} sdv_473 := ExAcquireResourceExclusiveLite(0, Tmp_1195);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_473 != 0;
    assume {:nonnull} Fcb_19 != 0;
    assume Fcb_19 > 0;
    havoc Tmp_1197;
    assume {:nonnull} Tmp_1197 != 0;
    assume Tmp_1197 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} IrpContext_71 != 0;
    assume IrpContext_71 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_71)] != 4;
    goto L16;

  L16:
    assume {:nonnull} Fcb_19 != 0;
    assume Fcb_19 > 0;
    call {:si_unique_call 1044} vslice_dummy_var_183 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 1045} ExReleaseResourceLite(0);
    goto L16_dummy;

  L16_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_71)] == 4;
    assume {:nonnull} IrpContext_71 != 0;
    assume IrpContext_71 > 0;
    Tmp_1193 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_71)];
    assume {:nonnull} Tmp_1193 != 0;
    assume Tmp_1193 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 1046} sdv_476 := ExGetSharedWaiterCount(0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_476 == 0;
    call {:si_unique_call 1047} sdv_478 := ExGetExclusiveWaiterCount(0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} sdv_478 != 0;
    goto L16;

  anon20_Then:
    assume {:partition} sdv_478 == 0;
    goto L11;

  L11:
    call {:si_unique_call 1048} FatVerifyOperationIsLegal(IrpContext_71);
    call {:si_unique_call 1049} sdv_474 := sdv_AbnormalTermination();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} sdv_474 != 0;
    call {:si_unique_call 1050} ExReleaseResourceLite(0);
    goto L42;

  L42:
    Tmp_1191 := 1;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:partition} sdv_474 == 0;
    goto L42;

  anon19_Then:
    assume {:partition} sdv_476 != 0;
    goto L16;

  anon24_Then:
    goto L16;

  anon23_Then:
    goto L11;

  anon17_Then:
    assume {:partition} sdv_473 == 0;
    Tmp_1191 := 0;
    goto L1;

  anon22_Then:
    assume {:partition} Tmp_1194 != 0;
    Tmp_1195 := 1;
    goto L57;
}



procedure {:origName "_sdv_init22"} _sdv_init22();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "_sdv_init22"} _sdv_init22()
{
  var vslice_dummy_var_184: int;

  anon0:
    call {:si_unique_call 1051} vslice_dummy_var_184 := __HAVOC_malloc(4);
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AdvanceOnly_unnamed_tag_14"} {:fieldname "AdvanceOnly"} AdvanceOnly_unnamed_tag_14(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_38"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_38(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_38"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_38(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__CC_FILE_SIZES"} {:fieldname "AllocationSize"} AllocationSize__CC_FILE_SIZES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FSRTL_COMMON_FCB_HEADER"} {:fieldname "AllocationSize"} AllocationSize__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.AllocationSupport__VCB"} {:fieldname "AllocationSupport"} AllocationSupport__VCB(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.Argument1_unnamed_tag_40"} {:fieldname "Argument1"} Argument1_unnamed_tag_40(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Argument2_unnamed_tag_40"} {:fieldname "Argument2"} Argument2_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Argument3_unnamed_tag_40"} {:fieldname "Argument3"} Argument3_unnamed_tag_40(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Argument4_unnamed_tag_40"} {:fieldname "Argument4"} Argument4_unnamed_tag_40(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AsyncCloseActive__FAT_DATA"} {:fieldname "AsyncCloseActive"} AsyncCloseActive__FAT_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.AsyncCloseCount__FAT_DATA"} {:fieldname "AsyncCloseCount"} AsyncCloseCount__FAT_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AsyncCloseList"} AsyncCloseList__FAT_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AsyncCloseList"} AsyncCloseList__VCB(x: int) : int
{
  x + 1232
}

function {:inline true} {:fieldmap "Mem_T.Attributes__PACKED_DIRENT"} {:fieldname "Attributes"} Attributes__PACKED_DIRENT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.BackupBootSector_BIOS_PARAMETER_BLOCK"} {:fieldname "BackupBootSector"} BackupBootSector_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.BackupBootSector__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "BackupBootSector"} BackupBootSector__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Bcb"} Bcb__FAT_ENUMERATION_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Bcb__REPINNED_BCBS"} {:fieldname "Bcb"} Bcb__REPINNED_BCBS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BIOS_PARAMETER_BLOCK"} {:fieldname "Bpb"} Bpb__VCB(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.BufferSize_unnamed_tag_39"} {:fieldname "BufferSize"} BufferSize_unnamed_tag_39(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Buffer__RTL_BITMAP"} {:fieldname "Buffer"} Buffer__RTL_BITMAP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__STRING"} {:fieldname "Buffer"} Buffer__STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Buffer_unnamed_tag_30"} {:fieldname "Buffer"} Buffer_unnamed_tag_30(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer_unnamed_tag_39"} {:fieldname "Buffer"} Buffer_unnamed_tag_39(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ByteOffset_unnamed_tag_10"} {:fieldname "ByteOffset"} ByteOffset_unnamed_tag_10(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ByteOffset_unnamed_tag_19"} {:fieldname "ByteOffset"} ByteOffset_unnamed_tag_19(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BytesPerSector_BIOS_PARAMETER_BLOCK"} {:fieldname "BytesPerSector"} BytesPerSector_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BytesPerSector__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "BytesPerSector"} BytesPerSector__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_28"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CdromFileSystemDeviceObject__FAT_DATA"} {:fieldname "CdromFileSystemDeviceObject"} CdromFileSystemDeviceObject__FAT_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.ChangeCount__VCB"} {:fieldname "ChangeCount"} ChangeCount__VCB(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.Checksum__PACKED_LFN_DIRENT"} {:fieldname "Checksum"} Checksum__PACKED_LFN_DIRENT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ChicagoMode__FAT_DATA"} {:fieldname "ChicagoMode"} ChicagoMode__FAT_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.CloseContext__VCB"} {:fieldname "CloseContext"} CloseContext__VCB(x: int) : int
{
  x + 1388
}

function {:inline true} {:fieldmap "Mem_T.ClusterCount_unnamed_tag_14"} {:fieldname "ClusterCount"} ClusterCount_unnamed_tag_14(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ClusterHint__VCB"} {:fieldname "ClusterHint"} ClusterHint__VCB(x: int) : int
{
  x + 668
}

function {:inline true} {:fieldmap "Mem_T.ClustersFree__FAT_WINDOW"} {:fieldname "ClustersFree"} ClustersFree__FAT_WINDOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionFilter_unnamed_tag_12"} {:fieldname "CompletionFilter"} CompletionFilter_unnamed_tag_12(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.PINT4"} {:fieldname "Constant"} Constant_unnamed_tag_72(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ContainsWildCards__CCB"} {:fieldname "ContainsWildCards"} ContainsWildCards__CCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ContextAsUlong__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "ContextAsUlong"} ContextAsUlong__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Context__IO_STACK_LOCATION"} {:fieldname "Context"} Context__IO_STACK_LOCATION(x: int) : int
{
  x + 500
}

function {:inline true} {:fieldmap "Mem_T.Control__IO_STACK_LOCATION"} {:fieldname "Control"} Control__IO_STACK_LOCATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentDevice__VCB"} {:fieldname "CurrentDevice"} CurrentDevice__VCB(x: int) : int
{
  x + 672
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CurrentHead"} CurrentHead__PACKED_BOOT_SECTOR(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CurrentHead"} CurrentHead__PACKED_BOOT_SECTOR_EX(x: int) : int
{
  x + 260
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "CurrentSystemState"} CurrentSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.CurrentWindow__VCB"} {:fieldname "CurrentWindow"} CurrentWindow__VCB(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.DataPath_unnamed_tag_39"} {:fieldname "DataPath"} DataPath_unnamed_tag_39(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DataSectionObject__SECTION_OBJECT_POINTERS"} {:fieldname "DataSectionObject"} DataSectionObject__SECTION_OBJECT_POINTERS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Date__FAT_TIME_STAMP"} {:fieldname "Date"} Date__FAT_TIME_STAMP(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Day__FAT_DATE"} {:fieldname "Day"} Day__FAT_DATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Dcb_unnamed_tag_67"} {:fieldname "Dcb"} Dcb_unnamed_tag_67(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DelayedCloseCount__FAT_DATA"} {:fieldname "DelayedCloseCount"} DelayedCloseCount__FAT_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DelayedCloseList"} DelayedCloseList__FAT_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "DelayedCloseList"} DelayedCloseList__VCB(x: int) : int
{
  x + 1240
}

function {:inline true} {:fieldmap "Mem_T.DeleteAccess__FILE_OBJECT"} {:fieldname "DeleteAccess"} DeleteAccess__FILE_OBJECT(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.DeleteHandle_unnamed_tag_14"} {:fieldname "DeleteHandle"} DeleteHandle_unnamed_tag_14(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeletedDirentHint_unnamed_tag_68"} {:fieldname "DeletedDirentHint"} DeletedDirentHint_unnamed_tag_68(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Depth__GENERAL_LOOKASIDE"} {:fieldname "Depth"} Depth__GENERAL_LOOKASIDE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Depth__SLIST_HEADER"} {:fieldname "Depth"} Depth__SLIST_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__DEVOBJ_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__DEVOBJ_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 488
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__VOLUME_DEVICE_OBJECT"} {:fieldname "DeviceObject"} DeviceObject__VOLUME_DEVICE_OBJECT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__VPB"} {:fieldname "DeviceObject"} DeviceObject__VPB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject_unnamed_tag_23"} {:fieldname "DeviceObject"} DeviceObject_unnamed_tag_23(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceTextType_unnamed_tag_33"} {:fieldname "DeviceTextType"} DeviceTextType_unnamed_tag_33(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceType__DEVICE_OBJECT"} {:fieldname "DeviceType"} DeviceType__DEVICE_OBJECT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.DirectAccessOpenCount__VCB"} {:fieldname "DirectAccessOpenCount"} DirectAccessOpenCount__VCB(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.DirectoryFileOpenCount_unnamed_tag_68"} {:fieldname "DirectoryFileOpenCount"} DirectoryFileOpenCount_unnamed_tag_68(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DirectoryFile_unnamed_tag_68"} {:fieldname "DirectoryFile"} DirectoryFile_unnamed_tag_68(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DirentFatFlags__FCB"} {:fieldname "DirentFatFlags"} DirentFatFlags__FCB(x: int) : int
{
  x + 512
}

function {:inline true} {:fieldmap "Mem_T.DirentOffsetWithinDirectory__FCB"} {:fieldname "DirentOffsetWithinDirectory"} DirentOffsetWithinDirectory__FCB(x: int) : int
{
  x + 188
}

function {:inline true} {:fieldmap "Mem_T._LARGE_MCB"} {:fieldname "DirtyFatMcb"} DirtyFatMcb__VCB(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.DiskFileSystemDeviceObject__FAT_DATA"} {:fieldname "DiskFileSystemDeviceObject"} DiskFileSystemDeviceObject__FAT_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DoubleSeconds__FAT_TIME"} {:fieldname "DoubleSeconds"} DoubleSeconds__FAT_TIME(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.EaFcb__VCB"} {:fieldname "EaFcb"} EaFcb__VCB(x: int) : int
{
  x + 680
}

function {:inline true} {:fieldmap "Mem_T.EaIndex_unnamed_tag_15"} {:fieldname "EaIndex"} EaIndex_unnamed_tag_15(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.EaLength_unnamed_tag_9"} {:fieldname "EaLength"} EaLength_unnamed_tag_9(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.EaListLength_unnamed_tag_15"} {:fieldname "EaListLength"} EaListLength_unnamed_tag_15(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.EaList_unnamed_tag_15"} {:fieldname "EaList"} EaList_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.EffectiveSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "EffectiveSystemState"} EffectiveSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "Event"} Event__CACHE_UNINITIALIZE_EVENT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ExactCaseLongName"} ExactCaseLongName__FCB(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.ExceptionStatus__IRP_CONTEXT"} {:fieldname "ExceptionStatus"} ExceptionStatus__IRP_CONTEXT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ExtendedFlags_BIOS_PARAMETER_BLOCK"} {:fieldname "ExtendedFlags"} ExtendedFlags_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ExtendedFlags__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "ExtendedFlags"} ExtendedFlags__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.FastIoIsQuestionable__FILE_LOCK"} {:fieldname "FastIoIsQuestionable"} FastIoIsQuestionable__FILE_LOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FatIndexBitSize_unnamed_tag_65"} {:fieldname "FatIndexBitSize"} FatIndexBitSize_unnamed_tag_65(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.FatIoContext__IRP_CONTEXT"} {:fieldname "FatIoContext"} FatIoContext__IRP_CONTEXT(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.Fats_BIOS_PARAMETER_BLOCK"} {:fieldname "Fats"} Fats_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Fats__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "Fats"} Fats__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.FcbCondition__FCB"} {:fieldname "FcbCondition"} FcbCondition__FCB(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.FcbState__FCB"} {:fieldname "FcbState"} FcbState__FCB(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Fcb_CLOSE_CONTEXT"} {:fieldname "Fcb"} Fcb_CLOSE_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_69"} {:fieldname "Fcb"} Fcb_unnamed_tag_67(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.FileAreaLbo_unnamed_tag_65"} {:fieldname "FileAreaLbo"} FileAreaLbo_unnamed_tag_65(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FileAttributes_unnamed_tag_9"} {:fieldname "FileAttributes"} FileAttributes_unnamed_tag_9(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileIndex_unnamed_tag_11"} {:fieldname "FileIndex"} FileIndex_unnamed_tag_11(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_11"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_11(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_13"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_13(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._FILE_LOCK"} {:fieldname "FileLock"} FileLock_unnamed_tag_69(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FileName__PACKED_DIRENT"} {:fieldname "FileName"} FileName__PACKED_DIRENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FileName_unnamed_tag_11"} {:fieldname "FileName"} FileName_unnamed_tag_11(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FileObjectWithVcbLocked__VCB"} {:fieldname "FileObjectWithVcbLocked"} FileObjectWithVcbLocked__VCB(x: int) : int
{
  x + 684
}

function {:inline true} {:fieldmap "Mem_T.FileObject__IO_STACK_LOCATION"} {:fieldname "FileObject"} FileObject__IO_STACK_LOCATION(x: int) : int
{
  x + 492
}

function {:inline true} {:fieldmap "Mem_T.FileObject_unnamed_tag_14"} {:fieldname "FileObject"} FileObject_unnamed_tag_14(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileSize__CC_FILE_SIZES"} {:fieldname "FileSize"} FileSize__CC_FILE_SIZES(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.FileSize__FSRTL_COMMON_FCB_HEADER"} {:fieldname "FileSize"} FileSize__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.FileSize__PACKED_DIRENT"} {:fieldname "FileSize"} FileSize__PACKED_DIRENT(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.FileSystemControl_unnamed_tag_8"} {:fieldname "FileSystemControl"} FileSystemControl_unnamed_tag_8(x: int) : int
{
  x + 172
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 316
}

function {:inline true} {:fieldmap "Mem_T.FinalNameLength__FCB"} {:fieldname "FinalNameLength"} FinalNameLength__FCB(x: int) : int
{
  x + 508
}

function {:inline true} {:fieldmap "Mem_T.First0x24BytesOfBootSector__VCB"} {:fieldname "First0x24BytesOfBootSector"} First0x24BytesOfBootSector__VCB(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.FirstClusterOfFileHi__PACKED_DIRENT"} {:fieldname "FirstClusterOfFileHi"} FirstClusterOfFileHi__PACKED_DIRENT(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.FirstClusterOfFile__FCB"} {:fieldname "FirstClusterOfFile"} FirstClusterOfFile__FCB(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.FirstClusterOfFile__PACKED_DIRENT"} {:fieldname "FirstClusterOfFile"} FirstClusterOfFile__PACKED_DIRENT(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.FirstCluster__FAT_WINDOW"} {:fieldname "FirstCluster"} FirstCluster__FAT_WINDOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Flags__CCB"} {:fieldname "Flags"} Flags__CCB(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__FILE_OBJECT"} {:fieldname "Flags"} Flags__FILE_OBJECT(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_STACK_LOCATION"} {:fieldname "Flags"} Flags__IO_STACK_LOCATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__IRP"} {:fieldname "Flags"} Flags__IRP(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Flags__IRP_CONTEXT"} {:fieldname "Flags"} Flags__IRP_CONTEXT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Flags__VPB"} {:fieldname "Flags"} Flags__VPB(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ForceAlignment__UCHAR2"} {:fieldname "ForceAlignment"} ForceAlignment__UCHAR2(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._RTL_BITMAP"} {:fieldname "FreeClusterBitMap"} FreeClusterBitMap__VCB(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.FreeClusterCount__FSINFO_SECTOR"} {:fieldname "FreeClusterCount"} FreeClusterCount__FSINFO_SECTOR(x: int) : int
{
  x + 1928
}

function {:inline true} {:fieldmap "Mem_T.FreeDirentBitmapBuffer_unnamed_tag_68"} {:fieldname "FreeDirentBitmapBuffer"} FreeDirentBitmapBuffer_unnamed_tag_68(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T._RTL_BITMAP"} {:fieldname "FreeDirentBitmap"} FreeDirentBitmap_unnamed_tag_68(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FreeMisses__GENERAL_LOOKASIDE"} {:fieldname "FreeMisses"} FreeMisses__GENERAL_LOOKASIDE(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Free_CLOSE_CONTEXT"} {:fieldname "Free"} Free_CLOSE_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Free__GENERAL_LOOKASIDE"} {:fieldname "Free"} Free__GENERAL_LOOKASIDE(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.FsContext2__FILE_OBJECT"} {:fieldname "FsContext2"} FsContext2__FILE_OBJECT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.FsContext__FILE_OBJECT"} {:fieldname "FsContext"} FsContext__FILE_OBJECT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.FsControlCode_unnamed_tag_18"} {:fieldname "FsControlCode"} FsControlCode_unnamed_tag_18(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FsInfoSector_BIOS_PARAMETER_BLOCK"} {:fieldname "FsInfoSector"} FsInfoSector_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.FsInfoSector__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "FsInfoSector"} FsInfoSector__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.FsInfoSignature__FSINFO_SECTOR"} {:fieldname "FsInfoSignature"} FsInfoSignature__FSINFO_SECTOR(x: int) : int
{
  x + 1924
}

function {:inline true} {:fieldmap "Mem_T.FsInformationClass_unnamed_tag_17"} {:fieldname "FsInformationClass"} FsInformationClass_unnamed_tag_17(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FsVersion_BIOS_PARAMETER_BLOCK"} {:fieldname "FsVersion"} FsVersion_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.FsVersion__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "FsVersion"} FsVersion__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.FujitsuFMR__FAT_DATA"} {:fieldname "FujitsuFMR"} FujitsuFMR__FAT_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "FullFileName"} FullFileName__FCB(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.Header__FCB"} {:fieldname "Header"} Header__FCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Heads_BIOS_PARAMETER_BLOCK"} {:fieldname "Heads"} Heads_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Heads__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "Heads"} Heads__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.HiddenSectors_BIOS_PARAMETER_BLOCK"} {:fieldname "HiddenSectors"} HiddenSectors_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.HiddenSectors__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "HiddenSectors"} HiddenSectors__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.HighAsync__FAT_DATA"} {:fieldname "HighAsync"} HighAsync__FAT_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.HighDelayed__FAT_DATA"} {:fieldname "HighDelayed"} HighDelayed__FAT_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Hour__FAT_TIME"} {:fieldname "Hour"} Hour__FAT_TIME(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_32"} {:fieldname "IdType"} IdType_unnamed_tag_32(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IgnoreHibernationPath__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "IgnoreHibernationPath"} IgnoreHibernationPath__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ImageSectionObject__SECTION_OBJECT_POINTERS"} {:fieldname "ImageSectionObject"} ImageSectionObject__SECTION_OBJECT_POINTERS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InPath_unnamed_tag_34"} {:fieldname "InPath"} InPath_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_18"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_18(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_20"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceSpecificData_unnamed_tag_27"} {:fieldname "InterfaceSpecificData"} InterfaceSpecificData_unnamed_tag_27(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType_unnamed_tag_27"} {:fieldname "InterfaceType"} InterfaceType_unnamed_tag_27(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Interface_unnamed_tag_27"} {:fieldname "Interface"} Interface_unnamed_tag_27(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.InternalOpenCount__VCB"} {:fieldname "InternalOpenCount"} InternalOpenCount__VCB(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_20"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_20(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_29"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IsFastIoPossible__FSRTL_COMMON_FCB_HEADER"} {:fieldname "IsFastIoPossible"} IsFastIoPossible__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Jump__PACKED_BOOT_SECTOR"} {:fieldname "Jump"} Jump__PACKED_BOOT_SECTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Key_unnamed_tag_10"} {:fieldname "Key"} Key_unnamed_tag_10(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Key_unnamed_tag_19"} {:fieldname "Key"} Key_unnamed_tag_19(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.L__NPAGED_LOOKASIDE_LIST"} {:fieldname "L"} L__NPAGED_LOOKASIDE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LargeSectorsPerFat_BIOS_PARAMETER_BLOCK"} {:fieldname "LargeSectorsPerFat"} LargeSectorsPerFat_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.LargeSectorsPerFat__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "LargeSectorsPerFat"} LargeSectorsPerFat__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.LargeSectors_BIOS_PARAMETER_BLOCK"} {:fieldname "LargeSectors"} LargeSectors_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.LargeSectors__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "LargeSectors"} LargeSectors__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.LastCluster__FAT_WINDOW"} {:fieldname "LastCluster"} LastCluster__FAT_WINDOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.LastFatMarkVolumeDirtyCall__VCB"} {:fieldname "LastFatMarkVolumeDirtyCall"} LastFatMarkVolumeDirtyCall__VCB(x: int) : int
{
  x + 1044
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_16"} {:fieldname "Length"} Length_unnamed_tag_16(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_19"} {:fieldname "Length"} Length_unnamed_tag_19(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_21"} {:fieldname "Length"} Length_unnamed_tag_21(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_30"} {:fieldname "Length"} Length_unnamed_tag_30(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.LfnOffsetWithinDirectory__FCB"} {:fieldname "LfnOffsetWithinDirectory"} LfnOffsetWithinDirectory__FCB(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T._SLIST_HEADER"} {:fieldname "ListHead"} ListHead__GENERAL_LOOKASIDE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LocaleId_unnamed_tag_33"} {:fieldname "LocaleId"} LocaleId_unnamed_tag_33(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.LockControl_unnamed_tag_8"} {:fieldname "LockControl"} LockControl_unnamed_tag_8(x: int) : int
{
  x + 188
}

function {:inline true} {:fieldmap "Mem_T.Lock_unnamed_tag_31"} {:fieldname "Lock"} Lock_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LogOfBytesPerCluster_unnamed_tag_65"} {:fieldname "LogOfBytesPerCluster"} LogOfBytesPerCluster_unnamed_tag_65(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.LogOfBytesPerSector_unnamed_tag_65"} {:fieldname "LogOfBytesPerSector"} LogOfBytesPerSector_unnamed_tag_65(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IRP_CONTEXT"} {:fieldname "MajorFunction"} MajorFunction__IRP_CONTEXT(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__STRING"} {:fieldname "MaximumLength"} MaximumLength__STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LARGE_MCB"} {:fieldname "Mcb"} Mcb__FCB(x: int) : int
{
  x + 260
}

function {:inline true} {:fieldmap "Mem_T.MdlAddress__IRP"} {:fieldname "MdlAddress"} MdlAddress__IRP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Media_BIOS_PARAMETER_BLOCK"} {:fieldname "Media"} Media_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Media__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "Media"} Media__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IRP_CONTEXT"} {:fieldname "MinorFunction"} MinorFunction__IRP_CONTEXT(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Minute__FAT_TIME"} {:fieldname "Minute"} Minute__FAT_TIME(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MirrorDisabled_BIOS_PARAMETER_BLOCK"} {:fieldname "MirrorDisabled"} MirrorDisabled_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Month__FAT_DATE"} {:fieldname "Month"} Month__FAT_DATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MountVolume_unnamed_tag_8"} {:fieldname "MountVolume"} MountVolume_unnamed_tag_8(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.MustBeZero__PACKED_LFN_DIRENT"} {:fieldname "MustBeZero"} MustBeZero__PACKED_LFN_DIRENT(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.Name1__PACKED_LFN_DIRENT"} {:fieldname "Name1"} Name1__PACKED_LFN_DIRENT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Name2__PACKED_LFN_DIRENT"} {:fieldname "Name2"} Name2__PACKED_LFN_DIRENT(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.Name3__PACKED_LFN_DIRENT"} {:fieldname "Name3"} Name3__PACKED_LFN_DIRENT(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.Name__FILE_NAME_NODE"} {:fieldname "Name"} Name__FILE_NAME_NODE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NextFreeCluster__FSINFO_SECTOR"} {:fieldname "NextFreeCluster"} NextFreeCluster__FSINFO_SECTOR(x: int) : int
{
  x + 1932
}

function {:inline true} {:fieldmap "Mem_T.Next__MDL"} {:fieldname "Next"} Next__MDL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Next__REPINNED_BCBS"} {:fieldname "Next"} Next__REPINNED_BCBS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NodeByteSize__IRP_CONTEXT"} {:fieldname "NodeByteSize"} NodeByteSize__IRP_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NodeTypeCode__FSRTL_COMMON_FCB_HEADER"} {:fieldname "NodeTypeCode"} NodeTypeCode__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NodeTypeCode__IRP_CONTEXT"} {:fieldname "NodeTypeCode"} NodeTypeCode__IRP_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonPaged__FCB"} {:fieldname "NonPaged"} NonPaged__FCB(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.NotifyDirectory_unnamed_tag_8"} {:fieldname "NotifyDirectory"} NotifyDirectory_unnamed_tag_8(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.NtByte__PACKED_DIRENT"} {:fieldname "NtByte"} NtByte__PACKED_DIRENT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.NumberOfClusters_unnamed_tag_65"} {:fieldname "NumberOfClusters"} NumberOfClusters_unnamed_tag_65(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumberOfFreeClusters"} NumberOfFreeClusters_unnamed_tag_65(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberOfWindows__VCB"} {:fieldname "NumberOfWindows"} NumberOfWindows__VCB(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OemQueryTemplate__CCB"} {:fieldname "OemQueryTemplate"} OemQueryTemplate__CCB(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._STRING"} {:fieldname "Oem"} Oem_unnamed_tag_70(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Offset_unnamed_tag_30"} {:fieldname "Offset"} Offset_unnamed_tag_30(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.OpenCount__FCB"} {:fieldname "OpenCount"} OpenCount__FCB(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.OpenFileCount__VCB"} {:fieldname "OpenFileCount"} OpenFileCount__VCB(x: int) : int
{
  x + 188
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Ordinal__PACKED_LFN_DIRENT"} {:fieldname "Ordinal"} Ordinal__PACKED_LFN_DIRENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OriginatingIrp__IRP_CONTEXT"} {:fieldname "OriginatingIrp"} OriginatingIrp__IRP_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_18"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_20"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutstandingAsyncEvent__NON_PAGED_FCB"} {:fieldname "OutstandingAsyncEvent"} OutstandingAsyncEvent__NON_PAGED_FCB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.OutstandingAsyncWrites__NON_PAGED_FCB"} {:fieldname "OutstandingAsyncWrites"} OutstandingAsyncWrites__NON_PAGED_FCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_6"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "PackedBpb"} PackedBpb__PACKED_BOOT_SECTOR(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.PagingIoResource__FSRTL_COMMON_FCB_HEADER"} {:fieldname "PagingIoResource"} PagingIoResource__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParentDcbLinks__FCB"} {:fieldname "ParentDcbLinks"} ParentDcbLinks__FCB(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.ParentDcbQueue_unnamed_tag_68"} {:fieldname "ParentDcbQueue"} ParentDcbQueue_unnamed_tag_68(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ParentDcb__FCB"} {:fieldname "ParentDcb"} ParentDcb__FCB(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "PinnedPage"} PinnedPage__FAT_ENUMERATION_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pointer__IO_STATUS_BLOCK"} {:fieldname "Pointer"} Pointer__IO_STATUS_BLOCK(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PowerSequence_unnamed_tag_36"} {:fieldname "PowerSequence"} PowerSequence_unnamed_tag_36(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PowerSequence_unnamed_tag_8"} {:fieldname "PowerSequence"} PowerSequence_unnamed_tag_8(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.PowerState_unnamed_tag_35"} {:fieldname "PowerState"} PowerState_unnamed_tag_35(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.PreventMediaRemoval__PREVENT_MEDIA_REMOVAL"} {:fieldname "PreventMediaRemoval"} PreventMediaRemoval__PREVENT_MEDIA_REMOVAL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PrivateCacheMap__FILE_OBJECT"} {:fieldname "PrivateCacheMap"} PrivateCacheMap__FILE_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.ProviderId_unnamed_tag_39"} {:fieldname "ProviderId"} ProviderId_unnamed_tag_39(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PseudoTransition__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "PseudoTransition"} PseudoTransition__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__ULARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__ULARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceText_unnamed_tag_8"} {:fieldname "QueryDeviceText"} QueryDeviceText_unnamed_tag_8(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.QueryDirectory_unnamed_tag_8"} {:fieldname "QueryDirectory"} QueryDirectory_unnamed_tag_8(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.QueryEa_unnamed_tag_8"} {:fieldname "QueryEa"} QueryEa_unnamed_tag_8(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.QueryInterface_unnamed_tag_8"} {:fieldname "QueryInterface"} QueryInterface_unnamed_tag_8(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.QueryQuota_unnamed_tag_8"} {:fieldname "QueryQuota"} QueryQuota_unnamed_tag_8(x: int) : int
{
  x + 268
}

function {:inline true} {:fieldmap "Mem_T.QuerySecurity_unnamed_tag_8"} {:fieldname "QuerySecurity"} QuerySecurity_unnamed_tag_8(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.QueryVolume_unnamed_tag_8"} {:fieldname "QueryVolume"} QueryVolume_unnamed_tag_8(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.ReadAccess__FILE_OBJECT"} {:fieldname "ReadAccess"} ReadAccess__FILE_OBJECT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ReadOnlyCount__VCB"} {:fieldname "ReadOnlyCount"} ReadOnlyCount__VCB(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.ReadWriteConfig_unnamed_tag_8"} {:fieldname "ReadWriteConfig"} ReadWriteConfig_unnamed_tag_8(x: int) : int
{
  x + 320
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RealDevice__IRP_CONTEXT"} {:fieldname "RealDevice"} RealDevice__IRP_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.RealDevice__VPB"} {:fieldname "RealDevice"} RealDevice__VPB(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ReferenceCount__VPB"} {:fieldname "ReferenceCount"} ReferenceCount__VPB(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.RelatedFileObject__FILE_OBJECT"} {:fieldname "RelatedFileObject"} RelatedFileObject__FILE_OBJECT(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T._REPINNED_BCBS"} {:fieldname "Repinned"} Repinned__IRP_CONTEXT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.ReplaceIfExists_unnamed_tag_14"} {:fieldname "ReplaceIfExists"} ReplaceIfExists_unnamed_tag_14(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved1__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "Reserved1"} Reserved1__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Reserved2__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "Reserved2"} Reserved2__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ReservedSectors_BIOS_PARAMETER_BLOCK"} {:fieldname "ReservedSectors"} ReservedSectors_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReservedSectors__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "ReservedSectors"} ReservedSectors__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_34"} {:fieldname "Reserved"} Reserved_unnamed_tag_34(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ResidualOpenCount__VCB"} {:fieldname "ResidualOpenCount"} ResidualOpenCount__VCB(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T.Resource__FSRTL_COMMON_FCB_HEADER"} {:fieldname "Resource"} Resource__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.RootDcb__VCB"} {:fieldname "RootDcb"} RootDcb__VCB(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.RootDirFirstCluster_BIOS_PARAMETER_BLOCK"} {:fieldname "RootDirFirstCluster"} RootDirFirstCluster_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.RootDirFirstCluster__PACKED_BIOS_PARAMETER_BLOCK_EX"} {:fieldname "RootDirFirstCluster"} RootDirFirstCluster__PACKED_BIOS_PARAMETER_BLOCK_EX(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.RootDirectoryLbo_unnamed_tag_65"} {:fieldname "RootDirectoryLbo"} RootDirectoryLbo_unnamed_tag_65(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RootDirectorySize_unnamed_tag_65"} {:fieldname "RootDirectorySize"} RootDirectorySize_unnamed_tag_65(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RootEntries_BIOS_PARAMETER_BLOCK"} {:fieldname "RootEntries"} RootEntries_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.RootEntries__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "RootEntries"} RootEntries__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.RootOemNode_unnamed_tag_68"} {:fieldname "RootOemNode"} RootOemNode_unnamed_tag_68(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.RootUnicodeNode_unnamed_tag_68"} {:fieldname "RootUnicodeNode"} RootUnicodeNode_unnamed_tag_68(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Scsi_unnamed_tag_8"} {:fieldname "Scsi"} Scsi_unnamed_tag_8(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T.SectionObjectPointer__FILE_OBJECT"} {:fieldname "SectionObjectPointer"} SectionObjectPointer__FILE_OBJECT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T._SECTION_OBJECT_POINTERS"} {:fieldname "SectionObjectPointers"} SectionObjectPointers__NON_PAGED_FCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SectorBeginSignature__FSINFO_SECTOR"} {:fieldname "SectorBeginSignature"} SectorBeginSignature__FSINFO_SECTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SectorEndSignature__FSINFO_SECTOR"} {:fieldname "SectorEndSignature"} SectorEndSignature__FSINFO_SECTOR(x: int) : int
{
  x + 1984
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerCluster_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerCluster"} SectorsPerCluster_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerCluster__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerCluster"} SectorsPerCluster__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerFat_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerFat"} SectorsPerFat_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerFat__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerFat"} SectorsPerFat__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerTrack_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerTrack"} SectorsPerTrack_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.SectorsPerTrack__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "SectorsPerTrack"} SectorsPerTrack__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.Sectors_BIOS_PARAMETER_BLOCK"} {:fieldname "Sectors"} Sectors_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Sectors__PACKED_BIOS_PARAMETER_BLOCK"} {:fieldname "Sectors"} Sectors__PACKED_BIOS_PARAMETER_BLOCK(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.SecurityContext_unnamed_tag_9"} {:fieldname "SecurityContext"} SecurityContext_unnamed_tag_9(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityDescriptor_unnamed_tag_22"} {:fieldname "SecurityDescriptor"} SecurityDescriptor_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SecurityInformation_unnamed_tag_21"} {:fieldname "SecurityInformation"} SecurityInformation_unnamed_tag_21(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityInformation_unnamed_tag_22"} {:fieldname "SecurityInformation"} SecurityInformation_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SetEa_unnamed_tag_8"} {:fieldname "SetEa"} SetEa_unnamed_tag_8(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.SetLock_unnamed_tag_8"} {:fieldname "SetLock"} SetLock_unnamed_tag_8(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.SetQuota_unnamed_tag_8"} {:fieldname "SetQuota"} SetQuota_unnamed_tag_8(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.SetSecurity_unnamed_tag_8"} {:fieldname "SetSecurity"} SetSecurity_unnamed_tag_8(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.SetVolume_unnamed_tag_8"} {:fieldname "SetVolume"} SetVolume_unnamed_tag_8(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.ShareAccess_unnamed_tag_9"} {:fieldname "ShareAccess"} ShareAccess_unnamed_tag_9(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ShortName__FCB"} {:fieldname "ShortName"} ShortName__FCB(x: int) : int
{
  x + 452
}

function {:inline true} {:fieldmap "Mem_T.ShutdownStarted__FAT_DATA"} {:fieldname "ShutdownStarted"} ShutdownStarted__FAT_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_unnamed_tag_37"} {:fieldname "ShutdownType"} ShutdownType_unnamed_tag_37(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SidListLength_unnamed_tag_25"} {:fieldname "SidListLength"} SidListLength_unnamed_tag_25(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.SidList_unnamed_tag_25"} {:fieldname "SidList"} SidList_unnamed_tag_25(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.SizeOfBitMap__RTL_BITMAP"} {:fieldname "SizeOfBitMap"} SizeOfBitMap__RTL_BITMAP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Size__DEVICE_OBJECT"} {:fieldname "Size"} Size__DEVICE_OBJECT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.Size__VPB"} {:fieldname "Size"} Size__VPB(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Size_unnamed_tag_27"} {:fieldname "Size"} Size_unnamed_tag_27(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Specific__FCB"} {:fieldname "Specific"} Specific__FCB(x: int) : int
{
  x + 284
}

function {:inline true} {:fieldmap "Mem_T.Srb_unnamed_tag_24"} {:fieldname "Srb"} Srb_unnamed_tag_24(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.StartSid_unnamed_tag_25"} {:fieldname "StartSid"} StartSid_unnamed_tag_25(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_37"} {:fieldname "State"} State_unnamed_tag_37(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SwapVpb__VCB"} {:fieldname "SwapVpb"} SwapVpb__VCB(x: int) : int
{
  x + 1228
}

function {:inline true} {:fieldmap "Mem_T.SystemContext_unnamed_tag_37"} {:fieldname "SystemContext"} SystemContext_unnamed_tag_37(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerStateContext_unnamed_tag_37"} {:fieldname "SystemPowerStateContext"} SystemPowerStateContext_unnamed_tag_37(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TargetDeviceObject__VCB"} {:fieldname "TargetDeviceObject"} TargetDeviceObject__VCB(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.TargetSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "TargetSystemState"} TargetSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Thread_unnamed_tag_7"} {:fieldname "Thread"} Thread_unnamed_tag_7(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Time__FAT_TIME_STAMP"} {:fieldname "Time"} Time__FAT_TIME_STAMP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TotalFrees__GENERAL_LOOKASIDE"} {:fieldname "TotalFrees"} TotalFrees__GENERAL_LOOKASIDE(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_18"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_18(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_20"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_20(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.TypeOfOpen_CLOSE_CONTEXT"} {:fieldname "TypeOfOpen"} TypeOfOpen_CLOSE_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_26"} {:fieldname "Type"} Type_unnamed_tag_26(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_34"} {:fieldname "Type"} Type_unnamed_tag_34(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_37"} {:fieldname "Type"} Type_unnamed_tag_37(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Uchar__UCHAR2"} {:fieldname "Uchar"} Uchar__UCHAR2(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UncleanCount__FCB"} {:fieldname "UncleanCount"} UncleanCount__FCB(x: int) : int
{
  x + 176
}

function {:inline true} {:fieldmap "Mem_T.UnicodeQueryTemplate__CCB"} {:fieldname "UnicodeQueryTemplate"} UnicodeQueryTemplate__CCB(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.UnusedDirentVbo_unnamed_tag_68"} {:fieldname "UnusedDirentVbo"} UnusedDirentVbo_unnamed_tag_68(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.UsageNotification_unnamed_tag_8"} {:fieldname "UsageNotification"} UsageNotification_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.ValidDataLength__CC_FILE_SIZES"} {:fieldname "ValidDataLength"} ValidDataLength__CC_FILE_SIZES(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ValidDataLength__FSRTL_COMMON_FCB_HEADER"} {:fieldname "ValidDataLength"} ValidDataLength__FSRTL_COMMON_FCB_HEADER(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.ValidDataToDisk__FCB"} {:fieldname "ValidDataToDisk"} ValidDataToDisk__FCB(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.VboOfPinnedPage__FAT_ENUMERATION_CONTEXT"} {:fieldname "VboOfPinnedPage"} VboOfPinnedPage__FAT_ENUMERATION_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VcbCondition__VCB"} {:fieldname "VcbCondition"} VcbCondition__VCB(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.VcbState__VCB"} {:fieldname "VcbState"} VcbState__VCB(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.Vcb_CLOSE_CONTEXT"} {:fieldname "Vcb"} Vcb_CLOSE_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Vcb__FCB"} {:fieldname "Vcb"} Vcb__FCB(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.Vcb__IRP_CONTEXT"} {:fieldname "Vcb"} Vcb__IRP_CONTEXT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._VCB"} {:fieldname "Vcb"} Vcb__VOLUME_DEVICE_OBJECT(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.VerifyThread__VCB"} {:fieldname "VerifyThread"} VerifyThread__VCB(x: int) : int
{
  x + 840
}

function {:inline true} {:fieldmap "Mem_T.VerifyVolume_unnamed_tag_8"} {:fieldname "VerifyVolume"} VerifyVolume_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.Version_unnamed_tag_27"} {:fieldname "Version"} Version_unnamed_tag_27(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VirtualEaFile__VCB"} {:fieldname "VirtualEaFile"} VirtualEaFile__VCB(x: int) : int
{
  x + 676
}

function {:inline true} {:fieldmap "Mem_T.VirtualVolumeFile__VCB"} {:fieldname "VirtualVolumeFile"} VirtualVolumeFile__VCB(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Vpb__DEVICE_OBJECT"} {:fieldname "Vpb"} Vpb__DEVICE_OBJECT(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Vpb__FILE_OBJECT"} {:fieldname "Vpb"} Vpb__FILE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Vpb__VCB"} {:fieldname "Vpb"} Vpb__VCB(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Vpb_unnamed_tag_23"} {:fieldname "Vpb"} Vpb_unnamed_tag_23(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WMI_unnamed_tag_8"} {:fieldname "WMI"} WMI_unnamed_tag_8(x: int) : int
{
  x + 440
}

function {:inline true} {:fieldmap "Mem_T.WaitWake_unnamed_tag_8"} {:fieldname "WaitWake"} WaitWake_unnamed_tag_8(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.WhichSpace_unnamed_tag_30"} {:fieldname "WhichSpace"} WhichSpace_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Wild_unnamed_tag_72"} {:fieldname "Wild"} Wild_unnamed_tag_72(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Windows__VCB"} {:fieldname "Windows"} Windows__VCB(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.WriteAccess__FILE_OBJECT"} {:fieldname "WriteAccess"} WriteAccess__FILE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Year__FAT_DATE"} {:fieldname "Year"} Year__FAT_DATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ZeroMdl__FAT_IO_CONTEXT"} {:fieldname "ZeroMdl"} ZeroMdl__FAT_IO_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl0: int;

const {:string "The remove device irp is supported."} unique strConst__li2bpl3: int;

const {:string "callee"} unique strConst__li2bpl1: int;

const {:string "halt"} unique strConst__li2bpl2: int;

const {:allocated} li2bplFunctionConstant338: int;

axiom li2bplFunctionConstant338 == 338;

const {:allocated} li2bplFunctionConstant466: int;

axiom li2bplFunctionConstant466 == 466;

const {:allocated} li2bplFunctionConstant600: int;

axiom li2bplFunctionConstant600 == 600;

const {:allocated} li2bplFunctionConstant739: int;

axiom li2bplFunctionConstant739 == 739;

const {:allocated} li2bplFunctionConstant835: int;

axiom li2bplFunctionConstant835 == 835;

const {:allocated} li2bplFunctionConstant837: int;

axiom li2bplFunctionConstant837 == 837;

const {:allocated} li2bplFunctionConstant840: int;

axiom li2bplFunctionConstant840 == 840;

implementation {:origName "SdvExit"} {:osmodel} SdvExit#0()
{
  var vslice_dummy_var_185: int;

  anon0:
    call {:si_unique_call 1052} vslice_dummy_var_185 := __HAVOC_malloc(4);
    assume false;
    assume false;
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#0();
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "SdvExit"} {:osmodel} SdvExit#1()
{
  var vslice_dummy_var_186: int;

  anon0:
    call {:si_unique_call 1053} vslice_dummy_var_186 := __HAVOC_malloc(4);
    assume false;
    call {:si_unique_call 1054} SdvExit#0();
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#1();
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFatEntry"} FatSetFatEntry#0(actual_IrpContext_17: int, actual_Vcb_12: int, actual_FatIndex_1: int, actual_FatEntry_2: int)
{
  var {:pointer} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:scalar} Tmp_155: int;
  var {:scalar} RegularOperation: int;
  var {:pointer} PinnedFatEntry: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:pointer} Tmp_158: int;
  var {:scalar} OffsetIntoVolumeFile: int;
  var {:scalar} Lbo_3: int;
  var {:pointer} Tmp_159: int;
  var {:scalar} Tmp_161: int;
  var {:pointer} Tmp_162: int;
  var {:pointer} PinnedFat: int;
  var {:scalar} WasWait: int;
  var {:scalar} Tmp_165: int;
  var {:scalar} CleaningOperation: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Bcb_1: int;
  var {:pointer} Tmp_169: int;
  var {:scalar} Tmp_170: int;
  var {:pointer} Tmp_171: int;
  var {:scalar} Tmp_172: int;
  var {:scalar} Tmp_173: int;
  var {:pointer} PinnedFatEntry32: int;
  var {:scalar} Tmp_174: int;
  var {:scalar} Tmp_175: int;
  var {:scalar} SectorSize: int;
  var {:scalar} Tmp_176: int;
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:dopa} {:scalar} TmpFatEntry: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} Tmp_180: int;
  var {:pointer} Tmp_181: int;
  var {:scalar} ReleaseMutex: int;
  var {:pointer} IrpContext_17: int;
  var {:pointer} Vcb_12: int;
  var {:scalar} FatIndex_1: int;
  var {:scalar} FatEntry_2: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_7468: int;

  anon0:
    call {:si_unique_call 1055} PinnedFatEntry := __HAVOC_malloc(4);
    call {:si_unique_call 1056} vslice_dummy_var_187 := __HAVOC_malloc(4);
    call {:si_unique_call 1057} PinnedFat := __HAVOC_malloc(4);
    call {:si_unique_call 1058} Bcb_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1059} vslice_dummy_var_188 := __HAVOC_malloc(12);
    call {:si_unique_call 1060} PinnedFatEntry32 := __HAVOC_malloc(4);
    call {:si_unique_call 1061} TmpFatEntry := __HAVOC_malloc(4);
    IrpContext_17 := actual_IrpContext_17;
    Vcb_12 := actual_Vcb_12;
    FatIndex_1 := actual_FatIndex_1;
    FatEntry_2 := actual_FatEntry_2;
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    WasWait := 1;
    RegularOperation := 1;
    CleaningOperation := 0;
    ReleaseMutex := 0;
    call {:si_unique_call 1062} sdv_do_paged_code_check();
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} FatIndex_1 == 1;
    RegularOperation := 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} FatEntry_2 != -268435456;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} FatEntry_2 == -268435455;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    FatEntry_2 := -1;
    goto L31;

  L31:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    WasWait := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], 2);
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BOR(1, 2));
    goto L33;

  L33:
    call {:si_unique_call 1063} SectorSize := corral_nondet();
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    FatEntry_2 := BAND(FatEntry_2, BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048));
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_166 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_181 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    havoc OffsetIntoVolumeFile;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_162 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_162 != 0;
    assume Tmp_162 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_154 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_179 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_154 != 0;
    assume Tmp_154 > 0;
    assume {:nonnull} Tmp_179 != 0;
    assume Tmp_179 > 0;
    havoc Tmp_175;
    goto L42;

  L42:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_178 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_168 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_168 != 0;
    assume Tmp_168 > 0;
    assume {:nonnull} Tmp_178 != 0;
    assume Tmp_178 > 0;
    havoc Tmp_161;
    call {:si_unique_call 1064} FatPrepareWriteVolumeFile#0(IrpContext_17, Vcb_12, Tmp_161, Tmp_175, Bcb_1, PinnedFat, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_174 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1065} vslice_dummy_var_189 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_174, Lbo_3, SectorSize);
    Tmp_165 := BAND(OffsetIntoVolumeFile, SectorSize - 1);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_165 == SectorSize - 1;
    Lbo_3 := Lbo_3 + SectorSize;
    Tmp_173 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1066} vslice_dummy_var_190 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_173, Lbo_3, SectorSize);
    goto L77;

  L77:
    call {:si_unique_call 1067} ExAcquireFastMutexUnsafe(0);
    ReleaseMutex := 1;
    assume {:nonnull} PinnedFat != 0;
    assume PinnedFat > 0;
    havoc Tmp_158;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    assume {:nonnull} Tmp_158 != 0;
    assume Tmp_158 > 0;
    havoc vslice_dummy_var_7468;
    Mem_T.INT4[TmpFatEntry] := vslice_dummy_var_7468;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(FatIndex_1, 1) != 0;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    call {:si_unique_call 1068} Tmp_180 := corral_nondet();
    goto L92;

  L92:
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    Mem_T.INT4[TmpFatEntry] := Tmp_180;
    assume {:nonnull} PinnedFat != 0;
    assume PinnedFat > 0;
    havoc Tmp_157;
    Tmp_156 := TmpFatEntry;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    call {:si_unique_call 1069} ExReleaseFastMutexUnsafe(0);
    ReleaseMutex := 0;
    goto L98;

  L98:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BNOT(1));
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} WasWait != 0;
    goto L101;

  L101:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} ReleaseMutex != 0;
    call {:si_unique_call 1070} ExReleaseFastMutexUnsafe(0);
    goto L102;

  L102:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} CleaningOperation != 0;
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto L1;

  L1:
    return;

  anon44_Then:
    goto L106;

  L106:
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto L1;

  anon43_Then:
    goto L1;

  anon42_Then:
    assume {:partition} CleaningOperation == 0;
    goto L106;

  anon41_Then:
    assume {:partition} ReleaseMutex == 0;
    goto L102;

  anon54_Then:
    assume {:partition} WasWait == 0;
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BNOT(2));
    goto L101;

  anon53_Then:
    assume {:partition} BAND(FatIndex_1, 1) == 0;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    Tmp_155 := BAND(Mem_T.INT4[TmpFatEntry], BOR(BOR(BOR(4096, 8192), 16384), 32768));
    Tmp_180 := BOR(FatEntry_2, Tmp_155);
    goto L92;

  anon52_Then:
    assume {:partition} Tmp_165 != SectorSize - 1;
    goto L77;

  anon51_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_167 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_153 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_153 != 0;
    assume Tmp_153 > 0;
    assume {:nonnull} Tmp_167 != 0;
    assume Tmp_167 > 0;
    havoc Tmp_175;
    goto L42;

  anon50_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_169 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_177 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_169 != 0;
    assume Tmp_169 > 0;
    assume {:nonnull} Tmp_177 != 0;
    assume Tmp_177 > 0;
    havoc OffsetIntoVolumeFile;
    call {:si_unique_call 1071} FatPrepareWriteVolumeFile#0(IrpContext_17, Vcb_12, OffsetIntoVolumeFile, 2, Bcb_1, PinnedFatEntry, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_170 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1072} vslice_dummy_var_192 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_170, Lbo_3, SectorSize);
    assume {:nonnull} PinnedFatEntry != 0;
    assume PinnedFatEntry > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon40_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_159 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_171 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_159 != 0;
    assume Tmp_159 > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    havoc OffsetIntoVolumeFile;
    call {:si_unique_call 1073} FatPrepareWriteVolumeFile#0(IrpContext_17, Vcb_12, OffsetIntoVolumeFile, 4, Bcb_1, PinnedFatEntry32, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_176 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1074} vslice_dummy_var_191 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_176, Lbo_3, SectorSize);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} FatIndex_1 != 1;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Tmp_172;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon45_Then:
    assume {:partition} FatIndex_1 == 1;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon48_Then:
    FatEntry_2 := 32767;
    goto L31;

  anon39_Then:
    FatEntry_2 := 2047;
    goto L31;

  anon47_Then:
    assume {:partition} FatEntry_2 != -268435455;
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    call {:si_unique_call 1075} ExRaiseStatus(-1073741566);
    goto L31;

  anon49_Then:
    assume {:partition} FatEntry_2 == -268435456;
    FatEntry_2 := -1;
    CleaningOperation := 1;
    goto L31;

  anon37_Then:
    assume {:partition} FatIndex_1 != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 2 > FatIndex_1;
    goto L158;

  L158:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    call {:si_unique_call 1076} ExRaiseStatus(-1073741566);
    goto L33;

  anon38_Then:
    assume {:partition} FatIndex_1 >= 2;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L158;

  anon46_Then:
    goto L33;
}



procedure {:origName "FatSetFatEntry"} FatSetFatEntry#0(actual_IrpContext_17: int, actual_Vcb_12: int, actual_FatIndex_1: int, actual_FatEntry_2: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFatEntry"} FatSetFatEntry#1(actual_IrpContext_17: int, actual_Vcb_12: int, actual_FatIndex_1: int, actual_FatEntry_2: int)
{
  var {:pointer} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:scalar} Tmp_155: int;
  var {:scalar} RegularOperation: int;
  var {:pointer} PinnedFatEntry: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:pointer} Tmp_158: int;
  var {:scalar} OffsetIntoVolumeFile: int;
  var {:scalar} Lbo_3: int;
  var {:pointer} Tmp_159: int;
  var {:scalar} Tmp_161: int;
  var {:pointer} Tmp_162: int;
  var {:pointer} PinnedFat: int;
  var {:scalar} WasWait: int;
  var {:scalar} Tmp_165: int;
  var {:scalar} CleaningOperation: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Bcb_1: int;
  var {:pointer} Tmp_169: int;
  var {:scalar} Tmp_170: int;
  var {:pointer} Tmp_171: int;
  var {:scalar} Tmp_172: int;
  var {:scalar} Tmp_173: int;
  var {:pointer} PinnedFatEntry32: int;
  var {:scalar} Tmp_174: int;
  var {:scalar} Tmp_175: int;
  var {:scalar} SectorSize: int;
  var {:scalar} Tmp_176: int;
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:dopa} {:scalar} TmpFatEntry: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} Tmp_180: int;
  var {:pointer} Tmp_181: int;
  var {:scalar} ReleaseMutex: int;
  var {:pointer} IrpContext_17: int;
  var {:pointer} Vcb_12: int;
  var {:scalar} FatIndex_1: int;
  var {:scalar} FatEntry_2: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_7469: int;

  anon0:
    call {:si_unique_call 1077} PinnedFatEntry := __HAVOC_malloc(4);
    call {:si_unique_call 1078} vslice_dummy_var_193 := __HAVOC_malloc(4);
    call {:si_unique_call 1079} PinnedFat := __HAVOC_malloc(4);
    call {:si_unique_call 1080} Bcb_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1081} vslice_dummy_var_194 := __HAVOC_malloc(12);
    call {:si_unique_call 1082} PinnedFatEntry32 := __HAVOC_malloc(4);
    call {:si_unique_call 1083} TmpFatEntry := __HAVOC_malloc(4);
    IrpContext_17 := actual_IrpContext_17;
    Vcb_12 := actual_Vcb_12;
    FatIndex_1 := actual_FatIndex_1;
    FatEntry_2 := actual_FatEntry_2;
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    WasWait := 1;
    RegularOperation := 1;
    CleaningOperation := 0;
    ReleaseMutex := 0;
    call {:si_unique_call 1084} sdv_do_paged_code_check();
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} FatIndex_1 == 1;
    RegularOperation := 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} FatEntry_2 != -268435456;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} FatEntry_2 == -268435455;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    FatEntry_2 := -1;
    goto L31;

  L31:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    WasWait := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], 2);
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BOR(1, 2));
    goto L33;

  L33:
    call {:si_unique_call 1085} SectorSize := corral_nondet();
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    FatEntry_2 := BAND(FatEntry_2, BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048));
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_166 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_181 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    havoc OffsetIntoVolumeFile;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_162 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_162 != 0;
    assume Tmp_162 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_154 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_179 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_154 != 0;
    assume Tmp_154 > 0;
    assume {:nonnull} Tmp_179 != 0;
    assume Tmp_179 > 0;
    havoc Tmp_175;
    goto L42;

  L42:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_178 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_168 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_168 != 0;
    assume Tmp_168 > 0;
    assume {:nonnull} Tmp_178 != 0;
    assume Tmp_178 > 0;
    havoc Tmp_161;
    call {:si_unique_call 1086} FatPrepareWriteVolumeFile#1(IrpContext_17, Vcb_12, Tmp_161, Tmp_175, Bcb_1, PinnedFat, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_174 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1087} vslice_dummy_var_195 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_174, Lbo_3, SectorSize);
    Tmp_165 := BAND(OffsetIntoVolumeFile, SectorSize - 1);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Tmp_165 == SectorSize - 1;
    Lbo_3 := Lbo_3 + SectorSize;
    Tmp_173 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1088} vslice_dummy_var_196 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_173, Lbo_3, SectorSize);
    goto L77;

  L77:
    call {:si_unique_call 1089} ExAcquireFastMutexUnsafe(0);
    ReleaseMutex := 1;
    assume {:nonnull} PinnedFat != 0;
    assume PinnedFat > 0;
    havoc Tmp_158;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    assume {:nonnull} Tmp_158 != 0;
    assume Tmp_158 > 0;
    havoc vslice_dummy_var_7469;
    Mem_T.INT4[TmpFatEntry] := vslice_dummy_var_7469;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(FatIndex_1, 1) != 0;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    call {:si_unique_call 1090} Tmp_180 := corral_nondet();
    goto L92;

  L92:
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    Mem_T.INT4[TmpFatEntry] := Tmp_180;
    assume {:nonnull} PinnedFat != 0;
    assume PinnedFat > 0;
    havoc Tmp_157;
    Tmp_156 := TmpFatEntry;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    call {:si_unique_call 1091} ExReleaseFastMutexUnsafe(0);
    ReleaseMutex := 0;
    goto L98;

  L98:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BNOT(1));
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} WasWait != 0;
    goto L101;

  L101:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} ReleaseMutex != 0;
    call {:si_unique_call 1092} ExReleaseFastMutexUnsafe(0);
    goto L102;

  L102:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} CleaningOperation != 0;
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto L1;

  L1:
    return;

  anon44_Then:
    goto L106;

  L106:
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} Bcb_1 != 0;
    assume Bcb_1 > 0;
    goto L1;

  anon43_Then:
    goto L1;

  anon42_Then:
    assume {:partition} CleaningOperation == 0;
    goto L106;

  anon41_Then:
    assume {:partition} ReleaseMutex == 0;
    goto L102;

  anon54_Then:
    assume {:partition} WasWait == 0;
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)] := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_17)], BNOT(2));
    goto L101;

  anon53_Then:
    assume {:partition} BAND(FatIndex_1, 1) == 0;
    assume {:nonnull} TmpFatEntry != 0;
    assume TmpFatEntry > 0;
    Tmp_155 := BAND(Mem_T.INT4[TmpFatEntry], BOR(BOR(BOR(4096, 8192), 16384), 32768));
    Tmp_180 := BOR(FatEntry_2, Tmp_155);
    goto L92;

  anon52_Then:
    assume {:partition} Tmp_165 != SectorSize - 1;
    goto L77;

  anon51_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_167 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_153 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_153 != 0;
    assume Tmp_153 > 0;
    assume {:nonnull} Tmp_167 != 0;
    assume Tmp_167 > 0;
    havoc Tmp_175;
    goto L42;

  anon50_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_169 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_177 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_169 != 0;
    assume Tmp_169 > 0;
    assume {:nonnull} Tmp_177 != 0;
    assume Tmp_177 > 0;
    havoc OffsetIntoVolumeFile;
    call {:si_unique_call 1093} FatPrepareWriteVolumeFile#1(IrpContext_17, Vcb_12, OffsetIntoVolumeFile, 2, Bcb_1, PinnedFatEntry, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_170 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1094} vslice_dummy_var_198 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_170, Lbo_3, SectorSize);
    assume {:nonnull} PinnedFatEntry != 0;
    assume PinnedFatEntry > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon40_Then:
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_159 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    Tmp_171 := Bpb__VCB(Vcb_12);
    assume {:nonnull} Tmp_159 != 0;
    assume Tmp_159 > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    havoc OffsetIntoVolumeFile;
    call {:si_unique_call 1095} FatPrepareWriteVolumeFile#1(IrpContext_17, Vcb_12, OffsetIntoVolumeFile, 4, Bcb_1, PinnedFatEntry32, RegularOperation, 0);
    Lbo_3 := BAND(OffsetIntoVolumeFile, BNOT(SectorSize - 1));
    Tmp_176 := Lbo_3;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    call {:si_unique_call 1096} vslice_dummy_var_197 := FatAddMcbEntry(Vcb_12, DirtyFatMcb__VCB(Vcb_12), Tmp_176, Lbo_3, SectorSize);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} FatIndex_1 != 1;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Tmp_172;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon45_Then:
    assume {:partition} FatIndex_1 == 1;
    assume {:nonnull} PinnedFatEntry32 != 0;
    assume PinnedFatEntry32 > 0;
    havoc Mem_T.INT4;
    goto L98;

  anon48_Then:
    FatEntry_2 := 32767;
    goto L31;

  anon39_Then:
    FatEntry_2 := 2047;
    goto L31;

  anon47_Then:
    assume {:partition} FatEntry_2 != -268435455;
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    call {:si_unique_call 1097} ExRaiseStatus(-1073741566);
    goto L31;

  anon49_Then:
    assume {:partition} FatEntry_2 == -268435456;
    FatEntry_2 := -1;
    CleaningOperation := 1;
    goto L31;

  anon37_Then:
    assume {:partition} FatIndex_1 != 1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 2 > FatIndex_1;
    goto L158;

  L158:
    assume {:nonnull} IrpContext_17 != 0;
    assume IrpContext_17 > 0;
    call {:si_unique_call 1098} ExRaiseStatus(-1073741566);
    goto L33;

  anon38_Then:
    assume {:partition} FatIndex_1 >= 2;
    assume {:nonnull} Vcb_12 != 0;
    assume Vcb_12 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L158;

  anon46_Then:
    goto L33;
}



procedure {:origName "FatSetFatEntry"} FatSetFatEntry#1(actual_IrpContext_17: int, actual_Vcb_12: int, actual_FatIndex_1: int, actual_FatEntry_2: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPrepareWriteVolumeFile"} FatPrepareWriteVolumeFile#0(actual_IrpContext_24: int, actual_Vcb_19: int, actual_StartingVbo: int, actual_ByteCount_4: int, actual_Bcb_3: int, actual_Buffer_1: int, actual_Reversible: int, actual_Zero: int)
{
  var {:scalar} Vbo_2: int;
  var {:scalar} sdv_261: int;
  var {:scalar} Tmp_665: int;
  var {:scalar} sdv_263: int;
  var {:pointer} IrpContext_24: int;
  var {:pointer} Vcb_19: int;
  var {:scalar} StartingVbo: int;
  var {:scalar} ByteCount_4: int;
  var {:pointer} Bcb_3: int;
  var {:scalar} Reversible: int;
  var {:scalar} Zero: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_7470: int;

  anon0:
    call {:si_unique_call 1099} Vbo_2 := __HAVOC_malloc(20);
    call {:si_unique_call 1100} vslice_dummy_var_199 := __HAVOC_malloc(4);
    IrpContext_24 := actual_IrpContext_24;
    Vcb_19 := actual_Vcb_19;
    StartingVbo := actual_StartingVbo;
    ByteCount_4 := actual_ByteCount_4;
    Bcb_3 := actual_Bcb_3;
    Reversible := actual_Reversible;
    Zero := actual_Zero;
    call {:si_unique_call 1101} sdv_do_paged_code_check();
    assume {:nonnull} Vbo_2 != 0;
    assume Vbo_2 > 0;
    assume {:nonnull} IrpContext_24 != 0;
    assume IrpContext_24 > 0;
    Tmp_665 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_24)], 2);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_665 == 0;
    goto L53;

  L53:
    call {:si_unique_call 1102} sdv_261 := corral_nondet();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_261 != 0;
    goto L15;

  L15:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Zero != 0;
    call {:si_unique_call 1103} sdv_RtlZeroMemory(0, ByteCount_4);
    goto L16;

  L16:
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    havoc vslice_dummy_var_7470;
    call {:si_unique_call 1104} FatSetDirtyBcb#0(IrpContext_24, vslice_dummy_var_7470, Vcb_19, Reversible);
    call {:si_unique_call 1105} sdv_263 := sdv_AbnormalTermination();
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_263 != 0;
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    goto L1;

  anon13_Then:
    assume {:partition} sdv_263 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} Zero == 0;
    goto L16;

  anon11_Then:
    assume {:partition} sdv_261 == 0;
    assume {:nonnull} IrpContext_24 != 0;
    assume IrpContext_24 > 0;
    call {:si_unique_call 1106} ExRaiseStatus(-1073741608);
    goto L15;

  anon15_Then:
    assume {:partition} Tmp_665 != 0;
    goto L53;
}



procedure {:origName "FatPrepareWriteVolumeFile"} FatPrepareWriteVolumeFile#0(actual_IrpContext_24: int, actual_Vcb_19: int, actual_StartingVbo: int, actual_ByteCount_4: int, actual_Bcb_3: int, actual_Buffer_1: int, actual_Reversible: int, actual_Zero: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPrepareWriteVolumeFile"} FatPrepareWriteVolumeFile#1(actual_IrpContext_24: int, actual_Vcb_19: int, actual_StartingVbo: int, actual_ByteCount_4: int, actual_Bcb_3: int, actual_Buffer_1: int, actual_Reversible: int, actual_Zero: int)
{
  var {:scalar} Vbo_2: int;
  var {:scalar} sdv_261: int;
  var {:scalar} Tmp_665: int;
  var {:scalar} sdv_263: int;
  var {:pointer} IrpContext_24: int;
  var {:pointer} Vcb_19: int;
  var {:scalar} StartingVbo: int;
  var {:scalar} ByteCount_4: int;
  var {:pointer} Bcb_3: int;
  var {:scalar} Reversible: int;
  var {:scalar} Zero: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_7471: int;

  anon0:
    call {:si_unique_call 1107} Vbo_2 := __HAVOC_malloc(20);
    call {:si_unique_call 1108} vslice_dummy_var_200 := __HAVOC_malloc(4);
    IrpContext_24 := actual_IrpContext_24;
    Vcb_19 := actual_Vcb_19;
    StartingVbo := actual_StartingVbo;
    ByteCount_4 := actual_ByteCount_4;
    Bcb_3 := actual_Bcb_3;
    Reversible := actual_Reversible;
    Zero := actual_Zero;
    call {:si_unique_call 1109} sdv_do_paged_code_check();
    assume {:nonnull} Vbo_2 != 0;
    assume Vbo_2 > 0;
    assume {:nonnull} IrpContext_24 != 0;
    assume IrpContext_24 > 0;
    Tmp_665 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_24)], 2);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_665 == 0;
    goto L53;

  L53:
    call {:si_unique_call 1110} sdv_261 := corral_nondet();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_261 != 0;
    goto L15;

  L15:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Zero != 0;
    call {:si_unique_call 1111} sdv_RtlZeroMemory(0, ByteCount_4);
    goto L16;

  L16:
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    havoc vslice_dummy_var_7471;
    call {:si_unique_call 1112} FatSetDirtyBcb#1(IrpContext_24, vslice_dummy_var_7471, Vcb_19, Reversible);
    call {:si_unique_call 1113} sdv_263 := sdv_AbnormalTermination();
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_263 != 0;
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} Bcb_3 != 0;
    assume Bcb_3 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    goto L1;

  anon13_Then:
    assume {:partition} sdv_263 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} Zero == 0;
    goto L16;

  anon11_Then:
    assume {:partition} sdv_261 == 0;
    assume {:nonnull} IrpContext_24 != 0;
    assume IrpContext_24 > 0;
    call {:si_unique_call 1114} ExRaiseStatus(-1073741608);
    goto L15;

  anon15_Then:
    assume {:partition} Tmp_665 != 0;
    goto L53;
}



procedure {:origName "FatPrepareWriteVolumeFile"} FatPrepareWriteVolumeFile#1(actual_IrpContext_24: int, actual_Vcb_19: int, actual_StartingVbo: int, actual_ByteCount_4: int, actual_Bcb_3: int, actual_Buffer_1: int, actual_Reversible: int, actual_Zero: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s, Mem_T.Flags__IRP_CONTEXT;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetDirtyBcb"} FatSetDirtyBcb#0(actual_IrpContext_28: int, actual_Bcb_6: int, actual_Vcb_21: int, actual_Reversible_1: int)
{
  var {:scalar} SavedIrql_1: int;
  var {:scalar} CurrentTime: int;
  var {:scalar} Tmp_710: int;
  var {:scalar} CleanVolumeTimer: int;
  var {:scalar} TimeSincePreviousCall: int;
  var {:pointer} Tmp_712: int;
  var {:scalar} SetTimer: int;
  var {:pointer} IrpContext_28: int;
  var {:pointer} Bcb_6: int;
  var {:pointer} Vcb_21: int;
  var {:scalar} Reversible_1: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 1115} CurrentTime := __HAVOC_malloc(20);
    call {:si_unique_call 1116} CleanVolumeTimer := __HAVOC_malloc(20);
    call {:si_unique_call 1117} TimeSincePreviousCall := __HAVOC_malloc(20);
    call {:si_unique_call 1118} vslice_dummy_var_201 := __HAVOC_malloc(4);
    IrpContext_28 := actual_IrpContext_28;
    Bcb_6 := actual_Bcb_6;
    Vcb_21 := actual_Vcb_21;
    Reversible_1 := actual_Reversible_1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Reversible_1 != 0;
    call {:si_unique_call 1119} FatRepinBcb(IrpContext_28, Bcb_6);
    goto L4;

  L4:
    assume {:nonnull} IrpContext_28 != 0;
    assume IrpContext_28 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_28)], 1) == 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Vcb_21 != 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1120} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := SavedIrql_1;
    call {:si_unique_call 1121} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    SavedIrql_1 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} CurrentTime != 0;
    assume CurrentTime > 0;
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L26;

  L26:
    SetTimer := 1;
    goto L27;

  L27:
    call {:si_unique_call 1122} sdv_KeReleaseSpinLock(0, SavedIrql_1);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} SetTimer != 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4096) != 0;
    Tmp_710 := -15000000;
    goto L35;

  L35:
    assume {:nonnull} CleanVolumeTimer != 0;
    assume CleanVolumeTimer > 0;
    call {:si_unique_call 1123} vslice_dummy_var_205 := KeCancelTimer(0);
    call {:si_unique_call 1124} vslice_dummy_var_202 := KeRemoveQueueDpc(0);
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4) != 0;
    goto L44;

  L44:
    call {:si_unique_call 1125} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := SavedIrql_1;
    call {:si_unique_call 1126} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    SavedIrql_1 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1127} sdv_KeReleaseSpinLock(0, SavedIrql_1);
    call {:si_unique_call 1128} vslice_dummy_var_203 := KeSetTimer(0, CleanVolumeTimer, 0);
    goto L1;

  L1:
    return;

  anon30_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4) == 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 16) != 0;
    goto L59;

  L59:
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4);
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 2) != 0;
    call {:si_unique_call 1129} vslice_dummy_var_204 := FatToggleMediaEjectDisable(IrpContext_28, Vcb_21, 1);
    goto L44;

  anon33_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 2) == 0;
    goto L44;

  anon31_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 16) == 0;
    call {:si_unique_call 1130} FatMarkVolume#0(IrpContext_28, Vcb_21, 1);
    goto L59;

  anon29_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4096) == 0;
    Tmp_710 := -80000000;
    goto L35;

  anon28_Then:
    assume {:partition} SetTimer == 0;
    goto L1;

  anon32_Then:
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    SetTimer := 0;
    goto L27;

  anon27_Then:
    goto L26;

  anon26_Then:
    goto L1;

  anon25_Then:
    assume {:partition} Vcb_21 == 0;
    goto L1;

  anon24_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_28)], 1) != 0;
    goto L1;

  anon23_Then:
    assume {:partition} Reversible_1 == 0;
    goto L4;
}



procedure {:origName "FatSetDirtyBcb"} FatSetDirtyBcb#0(actual_IrpContext_28: int, actual_Bcb_6: int, actual_Vcb_21: int, actual_Reversible_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetDirtyBcb"} FatSetDirtyBcb#1(actual_IrpContext_28: int, actual_Bcb_6: int, actual_Vcb_21: int, actual_Reversible_1: int)
{
  var {:scalar} SavedIrql_1: int;
  var {:scalar} CurrentTime: int;
  var {:scalar} Tmp_710: int;
  var {:scalar} CleanVolumeTimer: int;
  var {:scalar} TimeSincePreviousCall: int;
  var {:pointer} Tmp_712: int;
  var {:scalar} SetTimer: int;
  var {:pointer} IrpContext_28: int;
  var {:pointer} Bcb_6: int;
  var {:pointer} Vcb_21: int;
  var {:scalar} Reversible_1: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;

  anon0:
    call {:si_unique_call 1131} CurrentTime := __HAVOC_malloc(20);
    call {:si_unique_call 1132} CleanVolumeTimer := __HAVOC_malloc(20);
    call {:si_unique_call 1133} TimeSincePreviousCall := __HAVOC_malloc(20);
    call {:si_unique_call 1134} vslice_dummy_var_206 := __HAVOC_malloc(4);
    IrpContext_28 := actual_IrpContext_28;
    Bcb_6 := actual_Bcb_6;
    Vcb_21 := actual_Vcb_21;
    Reversible_1 := actual_Reversible_1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Reversible_1 != 0;
    call {:si_unique_call 1135} FatRepinBcb(IrpContext_28, Bcb_6);
    goto L4;

  L4:
    assume {:nonnull} IrpContext_28 != 0;
    assume IrpContext_28 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_28)], 1) == 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Vcb_21 != 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1136} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := SavedIrql_1;
    call {:si_unique_call 1137} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    SavedIrql_1 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} CurrentTime != 0;
    assume CurrentTime > 0;
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L26;

  L26:
    SetTimer := 1;
    goto L27;

  L27:
    call {:si_unique_call 1138} sdv_KeReleaseSpinLock(0, SavedIrql_1);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} SetTimer != 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4096) != 0;
    Tmp_710 := -15000000;
    goto L35;

  L35:
    assume {:nonnull} CleanVolumeTimer != 0;
    assume CleanVolumeTimer > 0;
    call {:si_unique_call 1139} vslice_dummy_var_210 := KeCancelTimer(0);
    call {:si_unique_call 1140} vslice_dummy_var_207 := KeRemoveQueueDpc(0);
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4) != 0;
    goto L44;

  L44:
    call {:si_unique_call 1141} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := SavedIrql_1;
    call {:si_unique_call 1142} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    SavedIrql_1 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1143} sdv_KeReleaseSpinLock(0, SavedIrql_1);
    call {:si_unique_call 1144} vslice_dummy_var_208 := KeSetTimer(0, CleanVolumeTimer, 0);
    goto L1;

  L1:
    return;

  anon30_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4) == 0;
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 16) != 0;
    goto L59;

  L59:
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4);
    assume {:nonnull} Vcb_21 != 0;
    assume Vcb_21 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 2) != 0;
    call {:si_unique_call 1145} vslice_dummy_var_209 := FatToggleMediaEjectDisable(IrpContext_28, Vcb_21, 1);
    goto L44;

  anon33_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 2) == 0;
    goto L44;

  anon31_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 16) == 0;
    call {:si_unique_call 1146} FatMarkVolume#1(IrpContext_28, Vcb_21, 1);
    goto L59;

  anon29_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_21)], 4096) == 0;
    Tmp_710 := -80000000;
    goto L35;

  anon28_Then:
    assume {:partition} SetTimer == 0;
    goto L1;

  anon32_Then:
    assume {:nonnull} TimeSincePreviousCall != 0;
    assume TimeSincePreviousCall > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    SetTimer := 0;
    goto L27;

  anon27_Then:
    goto L26;

  anon26_Then:
    goto L1;

  anon25_Then:
    assume {:partition} Vcb_21 == 0;
    goto L1;

  anon24_Then:
    assume {:partition} BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_28)], 1) != 0;
    goto L1;

  anon23_Then:
    assume {:partition} Reversible_1 == 0;
    goto L4;
}



procedure {:origName "FatSetDirtyBcb"} FatSetDirtyBcb#1(actual_IrpContext_28: int, actual_Bcb_6: int, actual_Vcb_21: int, actual_Reversible_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s, Mem_T.Flags__IRP_CONTEXT;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatMarkVolume"} FatMarkVolume#0(actual_IrpContext_66: int, actual_Vcb_45: int, actual_VolumeState: int)
{
  var {:pointer} Tmp_1131: int;
  var {:scalar} Offset_4: int;
  var {:pointer} Irp_18: int;
  var {:scalar} abort: int;
  var {:scalar} Tmp_1132: int;
  var {:pointer} Tmp_1133: int;
  var {:scalar} PinLength: int;
  var {:pointer} NextMdl: int;
  var {:scalar} Status_21: int;
  var {:pointer} Tmp_1134: int;
  var {:scalar} sdv_416: int;
  var {:pointer} Bcb_11: int;
  var {:scalar} ThisPass: int;
  var {:pointer} Tmp_1135: int;
  var {:scalar} Event_8: int;
  var {:pointer} Tmp_1136: int;
  var {:pointer} Tmp_1137: int;
  var {:pointer} Tmp_1138: int;
  var {:pointer} sdv_418: int;
  var {:pointer} Tmp_1140: int;
  var {:scalar} WriteLength: int;
  var {:scalar} FsInfoUpdate: int;
  var {:pointer} Tmp_1141: int;
  var {:pointer} FsInfoSector: int;
  var {:pointer} Tmp_1142: int;
  var {:pointer} CurrentHead: int;
  var {:pointer} Sector: int;
  var {:pointer} IrpContext_66: int;
  var {:pointer} Vcb_45: int;
  var {:scalar} VolumeState: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_7472: int;

  anon0:
    call {:si_unique_call 1147} Offset_4 := __HAVOC_malloc(20);
    call {:si_unique_call 1148} Event_8 := __HAVOC_malloc(124);
    call {:si_unique_call 1149} vslice_dummy_var_211 := __HAVOC_malloc(4);
    IrpContext_66 := actual_IrpContext_66;
    Vcb_45 := actual_Vcb_45;
    VolumeState := actual_VolumeState;
    Bcb_11 := 0;
    Irp_18 := 0;
    FsInfoUpdate := 0;
    abort := 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_45)], 16384) == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    ThisPass := 0;
    goto L22;

  L22:
    call {:si_unique_call 1150} Tmp_1131, Irp_18, abort, Tmp_1132, Tmp_1133, PinLength, NextMdl, Status_21, Tmp_1134, sdv_416, Bcb_11, ThisPass, Tmp_1135, Tmp_1136, Tmp_1137, Tmp_1138, sdv_418, Tmp_1140, WriteLength, FsInfoUpdate, Tmp_1141, FsInfoSector, Tmp_1142, CurrentHead, vslice_dummy_var_212, vslice_dummy_var_213 := FatMarkVolume#0_loop_L22(Tmp_1131, Offset_4, Irp_18, abort, Tmp_1132, Tmp_1133, PinLength, NextMdl, Status_21, Tmp_1134, sdv_416, Bcb_11, ThisPass, Tmp_1135, Event_8, Tmp_1136, Tmp_1137, Tmp_1138, sdv_418, Tmp_1140, WriteLength, FsInfoUpdate, Tmp_1141, FsInfoSector, Tmp_1142, CurrentHead, Sector, Vcb_45, VolumeState, vslice_dummy_var_212, vslice_dummy_var_213);
    goto L22_last;

  L22_last:
    assume {:CounterLoop 2} {:Counter "ThisPass"} true;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} 2 > ThisPass;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ThisPass != 1;
    goto L32;

  L32:
    assume {:nonnull} Offset_4 != 0;
    assume Offset_4 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1133 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1133 != 0;
    assume Tmp_1133 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1136 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1138 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1136 != 0;
    assume Tmp_1136 > 0;
    assume {:nonnull} Tmp_1138 != 0;
    assume Tmp_1138 > 0;
    havoc Tmp_1132;
    goto L38;

  L38:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1140 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1141 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1140 != 0;
    assume Tmp_1140 > 0;
    assume {:nonnull} Tmp_1141 != 0;
    assume Tmp_1141 > 0;
    havoc PinLength;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc WriteLength;
    goto L40;

  L40:
    call {:si_unique_call 1151} vslice_dummy_var_212 := corral_nondet();
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ThisPass == 0;
    call {:si_unique_call 1152} sdv_416 := FatIsBootSectorFat(Sector);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_416 != 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    Tmp_1131 := Sector;
    assume {:nonnull} Tmp_1131 != 0;
    assume Tmp_1131 > 0;
    CurrentHead := CurrentHead__PACKED_BOOT_SECTOR_EX(Tmp_1131);
    goto L126;

  L126:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} VolumeState != 0;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BOR(Mem_T.INT4[CurrentHead], 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} VolumeState == 2;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BOR(Mem_T.INT4[CurrentHead], 2);
    goto L65;

  L65:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} FsInfoUpdate != 0;
    FsInfoSector := Sector;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    goto L66;

  L66:
    call {:si_unique_call 1153} KeInitializeEvent(Event_8, 0, 0);
    call {:si_unique_call 1154} Irp_18 := IoBuildAsynchronousFsdRequest(4, 0, 0, WriteLength, 0, 0);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Irp_18 == 0;
    goto L94;

  L94:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Irp_18 != 0;
    goto L99;

  L99:
    call {:si_unique_call 1155} NextMdl, Tmp_1134 := FatMarkVolume#0_loop_L99(Irp_18, NextMdl, Tmp_1134);
    goto L99_last;

  L99_last:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_1134;
    assume {:nonnull} Tmp_1134 != 0;
    assume Tmp_1134 > 0;
    havoc NextMdl;
    call {:si_unique_call 1156} MmUnlockPages(0);
    call {:si_unique_call 1157} IoFreeMdl(0);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    call {:si_unique_call 1158} IoFreeIrp(0);
    goto L98;

  L98:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Bcb_11 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Bcb_11 != 0;
    Bcb_11 := 0;
    goto L112;

  L112:
    ThisPass := ThisPass + 1;
    goto L112_dummy;

  L112_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} Bcb_11 == 0;
    goto L112;

  anon70_Then:
    assume {:partition} Bcb_11 == 0;
    goto L112;

  anon69_Then:
    assume {:partition} Irp_18 == 0;
    goto L98;

  anon67_Then:
    assume {:partition} Irp_18 != 0;
    call {:si_unique_call 1159} sdv_418 := sdv_IoGetNextIrpStackLocation(Irp_18);
    assume {:nonnull} sdv_418 != 0;
    assume sdv_418 > 0;
    call {:si_unique_call 1160} sdv_IoSetCompletionRoutine(Irp_18, li2bplFunctionConstant600, Event_8, 1, 1, 1);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc vslice_dummy_var_7472;
    call {:si_unique_call 1161} Status_21 := sdv_IoCallDriver(vslice_dummy_var_7472, Irp_18);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Status_21 == 259;
    call {:si_unique_call 1162} vslice_dummy_var_213 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L94;

  anon68_Then:
    assume {:partition} Status_21 != 259;
    goto L94;

  anon66_Then:
    assume {:partition} FsInfoUpdate == 0;
    goto L66;

  anon83_Then:
    assume {:partition} VolumeState != 2;
    goto L65;

  anon75_Then:
    assume {:partition} VolumeState == 0;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BAND(Mem_T.INT4[CurrentHead], BNOT(1));
    goto L65;

  anon74_Then:
    Tmp_1142 := Sector;
    assume {:nonnull} Tmp_1142 != 0;
    assume Tmp_1142 > 0;
    CurrentHead := CurrentHead__PACKED_BOOT_SECTOR(Tmp_1142);
    goto L126;

  anon73_Then:
    assume {:partition} sdv_416 == 0;
    abort := 1;
    goto L94;

  anon65_Then:
    assume {:partition} ThisPass != 0;
    goto L65;

  anon82_Then:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1137 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1135 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    assume {:nonnull} Tmp_1137 != 0;
    assume Tmp_1137 > 0;
    havoc Tmp_1132;
    goto L38;

  anon81_Then:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc PinLength;
    WriteLength := PinLength;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} VolumeState == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    FsInfoUpdate := 1;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc PinLength;
    WriteLength := PinLength;
    goto L40;

  anon77_Then:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} ThisPass == 1;
    FsInfoUpdate := 1;
    assume {:nonnull} Offset_4 != 0;
    assume Offset_4 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto L40;

  anon78_Then:
    assume {:partition} ThisPass != 1;
    goto L40;

  anon76_Then:
    assume {:partition} VolumeState != 0;
    goto L40;

  anon84_Then:
    goto L40;

  anon60_Then:
    assume {:partition} ThisPass == 1;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} VolumeState == 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} FsInfoUpdate == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L32;

  anon64_Then:
    goto L23;

  L23:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} abort == 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} VolumeState == 1;
    assume false;
    return;

  anon79_Then:
    assume {:partition} VolumeState != 1;
    assume false;
    return;

  anon59_Then:
    assume {:partition} abort != 0;
    goto L1;

  L1:
    return;

  anon63_Then:
    assume {:partition} FsInfoUpdate != 0;
    goto L23;

  anon62_Then:
    assume {:partition} VolumeState != 0;
    goto L23;

  anon61_Then:
    goto L23;

  anon58_Then:
    assume {:partition} ThisPass >= 2;
    goto L23;

  anon57_Then:
    goto L1;

  anon80_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_45)], 16384) != 0;
    goto L1;
}



procedure {:origName "FatMarkVolume"} FatMarkVolume#0(actual_IrpContext_66: int, actual_Vcb_45: int, actual_VolumeState: int);
  modifies alloc, Mem_T.INT4, Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatMarkVolume"} FatMarkVolume#1(actual_IrpContext_66: int, actual_Vcb_45: int, actual_VolumeState: int)
{
  var {:pointer} Tmp_1131: int;
  var {:scalar} Offset_4: int;
  var {:pointer} Irp_18: int;
  var {:scalar} abort: int;
  var {:scalar} Tmp_1132: int;
  var {:pointer} Tmp_1133: int;
  var {:scalar} PinLength: int;
  var {:pointer} NextMdl: int;
  var {:scalar} Status_21: int;
  var {:pointer} Tmp_1134: int;
  var {:scalar} sdv_416: int;
  var {:pointer} Bcb_11: int;
  var {:scalar} ThisPass: int;
  var {:pointer} Tmp_1135: int;
  var {:scalar} Event_8: int;
  var {:pointer} Tmp_1136: int;
  var {:pointer} Tmp_1137: int;
  var {:pointer} Tmp_1138: int;
  var {:pointer} sdv_418: int;
  var {:pointer} Tmp_1140: int;
  var {:scalar} WriteLength: int;
  var {:scalar} FsInfoUpdate: int;
  var {:pointer} Tmp_1141: int;
  var {:pointer} FsInfoSector: int;
  var {:pointer} Tmp_1142: int;
  var {:pointer} CurrentHead: int;
  var {:pointer} Sector: int;
  var {:pointer} IrpContext_66: int;
  var {:pointer} Vcb_45: int;
  var {:scalar} VolumeState: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_7473: int;

  anon0:
    call {:si_unique_call 1163} Offset_4 := __HAVOC_malloc(20);
    call {:si_unique_call 1164} Event_8 := __HAVOC_malloc(124);
    call {:si_unique_call 1165} vslice_dummy_var_214 := __HAVOC_malloc(4);
    IrpContext_66 := actual_IrpContext_66;
    Vcb_45 := actual_Vcb_45;
    VolumeState := actual_VolumeState;
    Bcb_11 := 0;
    Irp_18 := 0;
    FsInfoUpdate := 0;
    abort := 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_45)], 16384) == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    ThisPass := 0;
    goto L22;

  L22:
    call {:si_unique_call 1166} Tmp_1131, Irp_18, abort, Tmp_1132, Tmp_1133, PinLength, NextMdl, Status_21, Tmp_1134, sdv_416, Bcb_11, ThisPass, Tmp_1135, Tmp_1136, Tmp_1137, Tmp_1138, sdv_418, Tmp_1140, WriteLength, FsInfoUpdate, Tmp_1141, FsInfoSector, Tmp_1142, CurrentHead, vslice_dummy_var_215, vslice_dummy_var_216 := FatMarkVolume#1_loop_L22(Tmp_1131, Offset_4, Irp_18, abort, Tmp_1132, Tmp_1133, PinLength, NextMdl, Status_21, Tmp_1134, sdv_416, Bcb_11, ThisPass, Tmp_1135, Event_8, Tmp_1136, Tmp_1137, Tmp_1138, sdv_418, Tmp_1140, WriteLength, FsInfoUpdate, Tmp_1141, FsInfoSector, Tmp_1142, CurrentHead, Sector, Vcb_45, VolumeState, vslice_dummy_var_215, vslice_dummy_var_216);
    goto L22_last;

  L22_last:
    assume {:CounterLoop 2} {:Counter "ThisPass"} true;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} 2 > ThisPass;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ThisPass != 1;
    goto L32;

  L32:
    assume {:nonnull} Offset_4 != 0;
    assume Offset_4 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1133 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1133 != 0;
    assume Tmp_1133 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1136 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1138 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1136 != 0;
    assume Tmp_1136 > 0;
    assume {:nonnull} Tmp_1138 != 0;
    assume Tmp_1138 > 0;
    havoc Tmp_1132;
    goto L38;

  L38:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1140 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1141 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1140 != 0;
    assume Tmp_1140 > 0;
    assume {:nonnull} Tmp_1141 != 0;
    assume Tmp_1141 > 0;
    havoc PinLength;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc WriteLength;
    goto L40;

  L40:
    call {:si_unique_call 1167} vslice_dummy_var_215 := corral_nondet();
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ThisPass == 0;
    call {:si_unique_call 1168} sdv_416 := FatIsBootSectorFat(Sector);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_416 != 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    Tmp_1131 := Sector;
    assume {:nonnull} Tmp_1131 != 0;
    assume Tmp_1131 > 0;
    CurrentHead := CurrentHead__PACKED_BOOT_SECTOR_EX(Tmp_1131);
    goto L126;

  L126:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} VolumeState != 0;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BOR(Mem_T.INT4[CurrentHead], 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} VolumeState == 2;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BOR(Mem_T.INT4[CurrentHead], 2);
    goto L65;

  L65:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} FsInfoUpdate != 0;
    FsInfoSector := Sector;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} FsInfoSector != 0;
    assume FsInfoSector > 0;
    goto L66;

  L66:
    call {:si_unique_call 1169} KeInitializeEvent(Event_8, 0, 0);
    call {:si_unique_call 1170} Irp_18 := IoBuildAsynchronousFsdRequest(4, 0, 0, WriteLength, 0, 0);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Irp_18 == 0;
    goto L94;

  L94:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Irp_18 != 0;
    goto L99;

  L99:
    call {:si_unique_call 1171} NextMdl, Tmp_1134 := FatMarkVolume#1_loop_L99(Irp_18, NextMdl, Tmp_1134);
    goto L99_last;

  L99_last:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_1134;
    assume {:nonnull} Tmp_1134 != 0;
    assume Tmp_1134 > 0;
    havoc NextMdl;
    call {:si_unique_call 1172} MmUnlockPages(0);
    call {:si_unique_call 1173} IoFreeMdl(0);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    call {:si_unique_call 1174} IoFreeIrp(0);
    goto L98;

  L98:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Bcb_11 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Bcb_11 != 0;
    Bcb_11 := 0;
    goto L112;

  L112:
    ThisPass := ThisPass + 1;
    goto L112_dummy;

  L112_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} Bcb_11 == 0;
    goto L112;

  anon70_Then:
    assume {:partition} Bcb_11 == 0;
    goto L112;

  anon69_Then:
    assume {:partition} Irp_18 == 0;
    goto L98;

  anon67_Then:
    assume {:partition} Irp_18 != 0;
    call {:si_unique_call 1175} sdv_418 := sdv_IoGetNextIrpStackLocation(Irp_18);
    assume {:nonnull} sdv_418 != 0;
    assume sdv_418 > 0;
    call {:si_unique_call 1176} sdv_IoSetCompletionRoutine(Irp_18, li2bplFunctionConstant600, Event_8, 1, 1, 1);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc vslice_dummy_var_7473;
    call {:si_unique_call 1177} Status_21 := sdv_IoCallDriver(vslice_dummy_var_7473, Irp_18);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Status_21 == 259;
    call {:si_unique_call 1178} vslice_dummy_var_216 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L94;

  anon68_Then:
    assume {:partition} Status_21 != 259;
    goto L94;

  anon66_Then:
    assume {:partition} FsInfoUpdate == 0;
    goto L66;

  anon83_Then:
    assume {:partition} VolumeState != 2;
    goto L65;

  anon75_Then:
    assume {:partition} VolumeState == 0;
    assume {:nonnull} CurrentHead != 0;
    assume CurrentHead > 0;
    Mem_T.INT4[CurrentHead] := BAND(Mem_T.INT4[CurrentHead], BNOT(1));
    goto L65;

  anon74_Then:
    Tmp_1142 := Sector;
    assume {:nonnull} Tmp_1142 != 0;
    assume Tmp_1142 > 0;
    CurrentHead := CurrentHead__PACKED_BOOT_SECTOR(Tmp_1142);
    goto L126;

  anon73_Then:
    assume {:partition} sdv_416 == 0;
    abort := 1;
    goto L94;

  anon65_Then:
    assume {:partition} ThisPass != 0;
    goto L65;

  anon82_Then:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1137 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    Tmp_1135 := Bpb__VCB(Vcb_45);
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    assume {:nonnull} Tmp_1137 != 0;
    assume Tmp_1137 > 0;
    havoc Tmp_1132;
    goto L38;

  anon81_Then:
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc PinLength;
    WriteLength := PinLength;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} VolumeState == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    FsInfoUpdate := 1;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    havoc PinLength;
    WriteLength := PinLength;
    goto L40;

  anon77_Then:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} ThisPass == 1;
    FsInfoUpdate := 1;
    assume {:nonnull} Offset_4 != 0;
    assume Offset_4 > 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto L40;

  anon78_Then:
    assume {:partition} ThisPass != 1;
    goto L40;

  anon76_Then:
    assume {:partition} VolumeState != 0;
    goto L40;

  anon84_Then:
    goto L40;

  anon60_Then:
    assume {:partition} ThisPass == 1;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} VolumeState == 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} FsInfoUpdate == 0;
    assume {:nonnull} Vcb_45 != 0;
    assume Vcb_45 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L32;

  anon64_Then:
    goto L23;

  L23:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} abort == 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} VolumeState == 1;
    call {:si_unique_call 1179} FatSetFatEntry#0(IrpContext_66, Vcb_45, 1, -268435455);
    goto L1;

  L1:
    return;

  anon79_Then:
    assume {:partition} VolumeState != 1;
    call {:si_unique_call 1180} FatSetFatEntry#0(IrpContext_66, Vcb_45, 1, -268435456);
    goto L1;

  anon59_Then:
    assume {:partition} abort != 0;
    goto L1;

  anon63_Then:
    assume {:partition} FsInfoUpdate != 0;
    goto L23;

  anon62_Then:
    assume {:partition} VolumeState != 0;
    goto L23;

  anon61_Then:
    goto L23;

  anon58_Then:
    assume {:partition} ThisPass >= 2;
    goto L23;

  anon57_Then:
    goto L1;

  anon80_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_45)], 16384) != 0;
    goto L1;
}



procedure {:origName "FatMarkVolume"} FatMarkVolume#1(actual_IrpContext_66: int, actual_Vcb_45: int, actual_VolumeState: int);
  modifies alloc, Mem_T.INT4, Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, Mem_T.Flags__IRP_CONTEXT, s, sdv_irql_current, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatOpenDirectoryFile"} FatOpenDirectoryFile#0(actual_IrpContext_29: int, actual_Dcb_2: int)
{
  var {:pointer} DirectoryFileObject_1: int;
  var {:pointer} Tmp_713: int;
  var {:pointer} Tmp_714: int;
  var {:pointer} Tmp_715: int;
  var {:pointer} Tmp_716: int;
  var {:pointer} Tmp_718: int;
  var {:pointer} Tmp_719: int;
  var {:pointer} Tmp_721: int;
  var {:pointer} IrpContext_29: int;
  var {:pointer} Dcb_2: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_7474: int;
  var vslice_dummy_var_7475: int;
  var vslice_dummy_var_7476: int;
  var vslice_dummy_var_7477: int;

  anon0:
    call {:si_unique_call 1181} vslice_dummy_var_217 := __HAVOC_malloc(4);
    IrpContext_29 := actual_IrpContext_29;
    Dcb_2 := actual_Dcb_2;
    call {:si_unique_call 1182} sdv_do_paged_code_check();
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume false;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    return;

  anon15_Then:
    goto L7;

  L7:
    call {:si_unique_call 1183} FatCheckFreeDirentBitmap(IrpContext_29, Dcb_2);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    DirectoryFileObject_1 := 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    call {:si_unique_call 1184} ExAcquireFastMutexUnsafe(0);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_713;
    assume {:nonnull} Tmp_713 != 0;
    assume Tmp_713 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    DirectoryFileObject_1 := 0;
    goto L48;

  L48:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc vslice_dummy_var_7474;
    call {:si_unique_call 1185} FatPreallocateCloseContext(vslice_dummy_var_7474);
    call {:si_unique_call 1186} FatSetFileObject(DirectoryFileObject_1, 6, Dcb_2, 0);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_721;
    call {:si_unique_call 1187} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    havoc vslice_dummy_var_7475;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7475;
    call {:si_unique_call 1188} vslice_dummy_var_219 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    Tmp_714 := Dcb_2;
    assume {:nonnull} Tmp_714 != 0;
    assume Tmp_714 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[Tmp_714] == 1284;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_715;
    call {:si_unique_call 1189} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    havoc vslice_dummy_var_7476;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7476;
    call {:si_unique_call 1190} vslice_dummy_var_220 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    goto L58;

  L58:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_716;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} Tmp_716 != 0;
    assume Tmp_716 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    call {:si_unique_call 1191} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    havoc vslice_dummy_var_7477;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7477;
    call {:si_unique_call 1192} vslice_dummy_var_221 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    DirectoryFileObject_1 := 0;
    goto L29;

  L29:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    call {:si_unique_call 1193} ExReleaseFastMutexUnsafe(0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} DirectoryFileObject_1 != 0;
    call {:si_unique_call 1194} vslice_dummy_var_218 := sdv_ObDereferenceObject(0);
    goto L16;

  L16:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_718;
    assume {:nonnull} Tmp_718 != 0;
    assume Tmp_718 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto L1;

  L1:
    return;

  anon19_Then:
    goto L1;

  anon18_Then:
    assume {:partition} DirectoryFileObject_1 == 0;
    goto L16;

  anon21_Then:
    assume {:partition} Mem_T.INT4[Tmp_714] != 1284;
    goto L58;

  anon20_Then:
    call {:si_unique_call 1195} DirectoryFileObject_1 := __HAVOC_malloc(1);
    goto L48;

  anon17_Then:
    goto L29;

  anon16_Then:
    goto L16;
}



procedure {:origName "FatOpenDirectoryFile"} FatOpenDirectoryFile#0(actual_IrpContext_29: int, actual_Dcb_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatOpenDirectoryFile"} FatOpenDirectoryFile#1(actual_IrpContext_29: int, actual_Dcb_2: int)
{
  var {:pointer} DirectoryFileObject_1: int;
  var {:pointer} Tmp_713: int;
  var {:pointer} Tmp_714: int;
  var {:pointer} Tmp_715: int;
  var {:pointer} Tmp_716: int;
  var {:pointer} Tmp_718: int;
  var {:pointer} Tmp_719: int;
  var {:pointer} Tmp_721: int;
  var {:pointer} IrpContext_29: int;
  var {:pointer} Dcb_2: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_7478: int;
  var vslice_dummy_var_7479: int;
  var vslice_dummy_var_7480: int;
  var vslice_dummy_var_7481: int;

  anon0:
    call {:si_unique_call 1196} vslice_dummy_var_222 := __HAVOC_malloc(4);
    IrpContext_29 := actual_IrpContext_29;
    Dcb_2 := actual_Dcb_2;
    call {:si_unique_call 1197} sdv_do_paged_code_check();
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1198} FatLookupFileAllocationSize#0(IrpContext_29, Dcb_2);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto L7;

  L7:
    call {:si_unique_call 1199} FatCheckFreeDirentBitmap(IrpContext_29, Dcb_2);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    DirectoryFileObject_1 := 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    call {:si_unique_call 1200} ExAcquireFastMutexUnsafe(0);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_713;
    assume {:nonnull} Tmp_713 != 0;
    assume Tmp_713 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    DirectoryFileObject_1 := 0;
    goto L48;

  L48:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc vslice_dummy_var_7478;
    call {:si_unique_call 1201} FatPreallocateCloseContext(vslice_dummy_var_7478);
    call {:si_unique_call 1202} FatSetFileObject(DirectoryFileObject_1, 6, Dcb_2, 0);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_721;
    call {:si_unique_call 1203} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    havoc vslice_dummy_var_7479;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7479;
    call {:si_unique_call 1204} vslice_dummy_var_224 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    Tmp_714 := Dcb_2;
    assume {:nonnull} Tmp_714 != 0;
    assume Tmp_714 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[Tmp_714] == 1284;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_715;
    call {:si_unique_call 1205} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    havoc vslice_dummy_var_7480;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7480;
    call {:si_unique_call 1206} vslice_dummy_var_225 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Tmp_715 != 0;
    assume Tmp_715 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    goto L58;

  L58:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_716;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} Tmp_716 != 0;
    assume Tmp_716 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    assume {:nonnull} DirectoryFileObject_1 != 0;
    assume DirectoryFileObject_1 > 0;
    call {:si_unique_call 1207} Tmp_719 := __HAVOC_malloc(4);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    havoc vslice_dummy_var_7481;
    Mem_T.INT4[Tmp_719] := vslice_dummy_var_7481;
    call {:si_unique_call 1208} vslice_dummy_var_226 := sdv_InterlockedIncrement(Tmp_719);
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    DirectoryFileObject_1 := 0;
    goto L29;

  L29:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    call {:si_unique_call 1209} ExReleaseFastMutexUnsafe(0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} DirectoryFileObject_1 != 0;
    call {:si_unique_call 1210} vslice_dummy_var_223 := sdv_ObDereferenceObject(0);
    goto L16;

  L16:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    havoc Tmp_718;
    assume {:nonnull} Tmp_718 != 0;
    assume Tmp_718 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    assume {:nonnull} Dcb_2 != 0;
    assume Dcb_2 > 0;
    goto L1;

  L1:
    return;

  anon19_Then:
    goto L1;

  anon18_Then:
    assume {:partition} DirectoryFileObject_1 == 0;
    goto L16;

  anon21_Then:
    assume {:partition} Mem_T.INT4[Tmp_714] != 1284;
    goto L58;

  anon20_Then:
    call {:si_unique_call 1211} DirectoryFileObject_1 := __HAVOC_malloc(1);
    goto L48;

  anon17_Then:
    goto L29;

  anon16_Then:
    goto L16;

  anon15_Then:
    goto L7;
}



procedure {:origName "FatOpenDirectoryFile"} FatOpenDirectoryFile#1(actual_IrpContext_29: int, actual_Dcb_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupFileAllocationSize"} FatLookupFileAllocationSize#0(actual_IrpContext_16: int, actual_FcbOrDcb_1: int)
{
  var {:dopa} {:scalar} Lbo_2: int;
  var {:dopa} {:scalar} DontCare_1: int;
  var {:dopa} {:scalar} ByteCount_2: int;
  var {:pointer} IrpContext_16: int;
  var {:pointer} FcbOrDcb_1: int;
  var vslice_dummy_var_227: int;

  anon0:
    call {:si_unique_call 1212} Lbo_2 := __HAVOC_malloc(4);
    call {:si_unique_call 1213} DontCare_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1214} vslice_dummy_var_227 := __HAVOC_malloc(4);
    call {:si_unique_call 1215} ByteCount_2 := __HAVOC_malloc(4);
    IrpContext_16 := actual_IrpContext_16;
    FcbOrDcb_1 := actual_FcbOrDcb_1;
    call {:si_unique_call 1216} sdv_do_paged_code_check();
    call {:si_unique_call 1217} FatLookupFileAllocation#0(IrpContext_16, FcbOrDcb_1, -2, Lbo_2, ByteCount_2, DontCare_1, DontCare_1, 0);
    assume {:nonnull} FcbOrDcb_1 != 0;
    assume FcbOrDcb_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1218} FatPopUpFileCorrupt#0(IrpContext_16, FcbOrDcb_1);
    assume {:nonnull} IrpContext_16 != 0;
    assume IrpContext_16 > 0;
    call {:si_unique_call 1219} ExRaiseStatus(-1073741566);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "FatLookupFileAllocationSize"} FatLookupFileAllocationSize#0(actual_IrpContext_16: int, actual_FcbOrDcb_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupFileAllocationSize"} FatLookupFileAllocationSize#1(actual_IrpContext_16: int, actual_FcbOrDcb_1: int)
{
  var {:dopa} {:scalar} Lbo_2: int;
  var {:dopa} {:scalar} DontCare_1: int;
  var {:dopa} {:scalar} ByteCount_2: int;
  var {:pointer} IrpContext_16: int;
  var {:pointer} FcbOrDcb_1: int;
  var vslice_dummy_var_228: int;

  anon0:
    call {:si_unique_call 1220} Lbo_2 := __HAVOC_malloc(4);
    call {:si_unique_call 1221} DontCare_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1222} vslice_dummy_var_228 := __HAVOC_malloc(4);
    call {:si_unique_call 1223} ByteCount_2 := __HAVOC_malloc(4);
    IrpContext_16 := actual_IrpContext_16;
    FcbOrDcb_1 := actual_FcbOrDcb_1;
    call {:si_unique_call 1224} sdv_do_paged_code_check();
    call {:si_unique_call 1225} FatLookupFileAllocation#1(IrpContext_16, FcbOrDcb_1, -2, Lbo_2, ByteCount_2, DontCare_1, DontCare_1, 0);
    assume {:nonnull} FcbOrDcb_1 != 0;
    assume FcbOrDcb_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1226} FatPopUpFileCorrupt#1(IrpContext_16, FcbOrDcb_1);
    assume {:nonnull} IrpContext_16 != 0;
    assume IrpContext_16 > 0;
    call {:si_unique_call 1227} ExRaiseStatus(-1073741566);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "FatLookupFileAllocationSize"} FatLookupFileAllocationSize#1(actual_IrpContext_16: int, actual_FcbOrDcb_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupFileAllocation"} FatLookupFileAllocation#0(actual_IrpContext_15: int, actual_FcbOrDcb: int, actual_Vbo: int, actual_Lbo_1: int, actual_ByteCount_1: int, actual_Allocated: int, actual_EndOnMax: int, actual_Index: int)
{
  var {:scalar} BytesOnVolume: int;
  var {:scalar} sdv_44: int;
  var {:scalar} Tmp_140: int;
  var {:dopa} {:scalar} CurrentLbo: int;
  var {:scalar} Tmp_141: int;
  var {:scalar} sdv_45: int;
  var {:dopa} {:scalar} Runs: int;
  var {:scalar} Context: int;
  var {:scalar} sdv_46: int;
  var {:scalar} LastCluster: int;
  var {:pointer} Vcb_10: int;
  var {:dopa} {:scalar} FatEntry_1: int;
  var {:scalar} FirstLboOfCurrentRun: int;
  var {:scalar} FirstVboOfCurrentRun: int;
  var {:dopa} {:scalar} CurrentVbo: int;
  var {:scalar} BytesPerCluster_1: int;
  var {:scalar} PriorLbo: int;
  var {:pointer} IrpContext_15: int;
  var {:pointer} FcbOrDcb: int;
  var {:scalar} Vbo: int;
  var {:pointer} Lbo_1: int;
  var {:pointer} ByteCount_1: int;
  var {:pointer} Allocated: int;
  var {:pointer} EndOnMax: int;
  var {:pointer} Index: int;
  var boogieTmp: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;

  anon0:
    call {:si_unique_call 1228} BytesOnVolume := __HAVOC_malloc(20);
    call {:si_unique_call 1229} vslice_dummy_var_229 := __HAVOC_malloc(4);
    call {:si_unique_call 1230} CurrentLbo := __HAVOC_malloc(4);
    call {:si_unique_call 1231} Runs := __HAVOC_malloc(4);
    call {:si_unique_call 1232} Context := __HAVOC_malloc(12);
    call {:si_unique_call 1233} FatEntry_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1234} CurrentVbo := __HAVOC_malloc(4);
    IrpContext_15 := actual_IrpContext_15;
    FcbOrDcb := actual_FcbOrDcb;
    Vbo := actual_Vbo;
    Lbo_1 := actual_Lbo_1;
    ByteCount_1 := actual_ByteCount_1;
    Allocated := actual_Allocated;
    EndOnMax := actual_EndOnMax;
    Index := actual_Index;
    call {:si_unique_call 1235} sdv_do_paged_code_check();
    assume {:nonnull} Context != 0;
    assume Context > 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    havoc Vcb_10;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1236} sdv_44 := FatLookupMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), Vbo, Lbo_1, ByteCount_1, Index);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_44 != 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 1;
    assume {:nonnull} ByteCount_1 != 0;
    assume ByteCount_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Vbo + Mem_T.INT4[ByteCount_1] == 0;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 1;
    goto L1;

  L1:
    return;

  anon69_Then:
    assume {:partition} Vbo + Mem_T.INT4[ByteCount_1] != 0;
    goto L1;

  anon49_Then:
    assume {:partition} sdv_44 == 0;
    call {:si_unique_call 1237} BytesPerCluster_1 := corral_nondet();
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    assume {:nonnull} Vcb_10 != 0;
    assume Vcb_10 > 0;
    LastCluster := 0;
    FirstLboOfCurrentRun := 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L1;

  anon70_Then:
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1238} sdv_45 := FatLookupLastMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), CurrentVbo, CurrentLbo, Runs);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_45 != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] - (BytesPerCluster_1 - 1);
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    Mem_T.INT4[CurrentLbo] := Mem_T.INT4[CurrentLbo] - (BytesPerCluster_1 - 1);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L44;

  L44:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1239} boogieTmp := corral_nondet();
    Mem_T.INT4[FatEntry_1] := boogieTmp;
    goto L46;

  L46:
    call {:si_unique_call 1240} Tmp_140, Tmp_141, sdv_46, LastCluster, FirstLboOfCurrentRun, FirstVboOfCurrentRun, PriorLbo, boogieTmp, vslice_dummy_var_230, vslice_dummy_var_231 := FatLookupFileAllocation#0_loop_L46(BytesOnVolume, Tmp_140, CurrentLbo, Tmp_141, Runs, Context, sdv_46, LastCluster, Vcb_10, FatEntry_1, FirstLboOfCurrentRun, FirstVboOfCurrentRun, CurrentVbo, BytesPerCluster_1, PriorLbo, IrpContext_15, FcbOrDcb, Vbo, EndOnMax, boogieTmp, vslice_dummy_var_230, vslice_dummy_var_231);
    goto L46_last;

  L46_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} LastCluster != 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 1;
    assume {:nonnull} Lbo_1 != 0;
    assume Lbo_1 > 0;
    Mem_T.INT4[Lbo_1] := FirstLboOfCurrentRun + Vbo - FirstVboOfCurrentRun;
    assume {:nonnull} ByteCount_1 != 0;
    assume ByteCount_1 > 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[ByteCount_1] := Mem_T.INT4[CurrentVbo] - Vbo;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Index != 0;
    assume {:nonnull} Index != 0;
    assume Index > 0;
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Index] := Mem_T.INT4[Runs] - 1;
    goto L54;

  L54:
    assume {:nonnull} Context != 0;
    assume Context > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Context != 0;
    assume Context > 0;
    goto L1;

  anon53_Then:
    goto L1;

  anon71_Then:
    assume {:partition} Index == 0;
    goto L54;

  anon52_Then:
    assume {:partition} LastCluster == 0;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1241} FatLookupFatEntry(IrpContext_15, Vcb_10, Mem_T.INT4[FatEntry_1], FatEntry_1, Context);
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    PriorLbo := Mem_T.INT4[CurrentLbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    call {:si_unique_call 1242} boogieTmp := corral_nondet();
    Mem_T.INT4[CurrentLbo] := boogieTmp;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] + BytesPerCluster_1;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1243} sdv_46 := FatInterpretClusterType(Vcb_10, Mem_T.INT4[FatEntry_1]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_46 != 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_46 != 1;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_46 != 2;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_46 != 3;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_46 == 4;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] != 0;
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L86;

  L86:
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} PriorLbo + BytesPerCluster_1 != Mem_T.INT4[CurrentLbo];
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} FirstLboOfCurrentRun != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Tmp_141 := Mem_T.INT4[CurrentVbo] - FirstVboOfCurrentRun;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1244} vslice_dummy_var_231 := FatAddMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), FirstVboOfCurrentRun, FirstLboOfCurrentRun, Tmp_141);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L89;

  L89:
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] > Vbo;
    LastCluster := 1;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} Vbo >= Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    FirstVboOfCurrentRun := Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    FirstLboOfCurrentRun := Mem_T.INT4[CurrentLbo];
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} FirstLboOfCurrentRun == 0;
    goto L89;

  anon59_Then:
    assume {:partition} PriorLbo + BytesPerCluster_1 == Mem_T.INT4[CurrentLbo];
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L86;

  anon58_Then:
    goto L81;

  L81:
    call {:si_unique_call 1245} FatPopUpFileCorrupt#0(IrpContext_15, FcbOrDcb);
    assume {:nonnull} IrpContext_15 != 0;
    assume IrpContext_15 > 0;
    call {:si_unique_call 1246} ExRaiseStatus(-1073741566);
    goto L86;

  anon56_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] == 0;
    goto L81;

  anon65_Then:
    assume {:partition} sdv_46 != 4;
    call {:si_unique_call 1247} KeBugCheckEx(35, 132170, 0, 0, 0);
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} sdv_46 == 3;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] != 0;
    goto L103;

  L103:
    LastCluster := 1;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} FirstLboOfCurrentRun != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Tmp_140 := Mem_T.INT4[CurrentVbo] - FirstVboOfCurrentRun;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1248} vslice_dummy_var_230 := FatAddMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), FirstVboOfCurrentRun, FirstLboOfCurrentRun, Tmp_140);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L105;

  L105:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Vbo == -2;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto L54;

  anon62_Then:
    assume {:partition} Vbo != -2;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Vbo >= Mem_T.INT4[CurrentVbo];
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[EndOnMax] == 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L54;

  anon64_Then:
    assume {:partition} Mem_T.INT4[EndOnMax] != 0;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] > Vbo;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} FirstLboOfCurrentRun == 0;
    goto L105;

  anon55_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] == 0;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 1;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] - 1;
    goto L103;

  anon67_Then:
    assume {:partition} sdv_46 == 2;
    goto L76;

  L76:
    call {:si_unique_call 1249} FatPopUpFileCorrupt#0(IrpContext_15, FcbOrDcb);
    assume {:nonnull} IrpContext_15 != 0;
    assume IrpContext_15 > 0;
    call {:si_unique_call 1250} ExRaiseStatus(-1073741566);
    goto L76_dummy;

  L76_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} sdv_46 == 1;
    goto L76;

  anon54_Then:
    assume {:partition} sdv_46 == 0;
    goto L76;

  anon50_Then:
    assume {:partition} sdv_45 == 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := 0;
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    call {:si_unique_call 1251} boogieTmp := corral_nondet();
    Mem_T.INT4[CurrentLbo] := boogieTmp;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    FirstVboOfCurrentRun := Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    FirstLboOfCurrentRun := Mem_T.INT4[CurrentLbo];
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := 0;
    goto L44;

  anon51_Then:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L1;
}



procedure {:origName "FatLookupFileAllocation"} FatLookupFileAllocation#0(actual_IrpContext_15: int, actual_FcbOrDcb: int, actual_Vbo: int, actual_Lbo_1: int, actual_ByteCount_1: int, actual_Allocated: int, actual_EndOnMax: int, actual_Index: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLookupFileAllocation"} FatLookupFileAllocation#1(actual_IrpContext_15: int, actual_FcbOrDcb: int, actual_Vbo: int, actual_Lbo_1: int, actual_ByteCount_1: int, actual_Allocated: int, actual_EndOnMax: int, actual_Index: int)
{
  var {:scalar} BytesOnVolume: int;
  var {:scalar} sdv_44: int;
  var {:scalar} Tmp_140: int;
  var {:dopa} {:scalar} CurrentLbo: int;
  var {:scalar} Tmp_141: int;
  var {:scalar} sdv_45: int;
  var {:dopa} {:scalar} Runs: int;
  var {:scalar} Context: int;
  var {:scalar} sdv_46: int;
  var {:scalar} LastCluster: int;
  var {:pointer} Vcb_10: int;
  var {:dopa} {:scalar} FatEntry_1: int;
  var {:scalar} FirstLboOfCurrentRun: int;
  var {:scalar} FirstVboOfCurrentRun: int;
  var {:dopa} {:scalar} CurrentVbo: int;
  var {:scalar} BytesPerCluster_1: int;
  var {:scalar} PriorLbo: int;
  var {:pointer} IrpContext_15: int;
  var {:pointer} FcbOrDcb: int;
  var {:scalar} Vbo: int;
  var {:pointer} Lbo_1: int;
  var {:pointer} ByteCount_1: int;
  var {:pointer} Allocated: int;
  var {:pointer} EndOnMax: int;
  var {:pointer} Index: int;
  var boogieTmp: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;

  anon0:
    call {:si_unique_call 1252} BytesOnVolume := __HAVOC_malloc(20);
    call {:si_unique_call 1253} vslice_dummy_var_232 := __HAVOC_malloc(4);
    call {:si_unique_call 1254} CurrentLbo := __HAVOC_malloc(4);
    call {:si_unique_call 1255} Runs := __HAVOC_malloc(4);
    call {:si_unique_call 1256} Context := __HAVOC_malloc(12);
    call {:si_unique_call 1257} FatEntry_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1258} CurrentVbo := __HAVOC_malloc(4);
    IrpContext_15 := actual_IrpContext_15;
    FcbOrDcb := actual_FcbOrDcb;
    Vbo := actual_Vbo;
    Lbo_1 := actual_Lbo_1;
    ByteCount_1 := actual_ByteCount_1;
    Allocated := actual_Allocated;
    EndOnMax := actual_EndOnMax;
    Index := actual_Index;
    call {:si_unique_call 1259} sdv_do_paged_code_check();
    assume {:nonnull} Context != 0;
    assume Context > 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    havoc Vcb_10;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1260} sdv_44 := FatLookupMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), Vbo, Lbo_1, ByteCount_1, Index);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_44 != 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 1;
    assume {:nonnull} ByteCount_1 != 0;
    assume ByteCount_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Vbo + Mem_T.INT4[ByteCount_1] == 0;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 1;
    goto L1;

  L1:
    return;

  anon69_Then:
    assume {:partition} Vbo + Mem_T.INT4[ByteCount_1] != 0;
    goto L1;

  anon49_Then:
    assume {:partition} sdv_44 == 0;
    call {:si_unique_call 1261} BytesPerCluster_1 := corral_nondet();
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    assume {:nonnull} Vcb_10 != 0;
    assume Vcb_10 > 0;
    LastCluster := 0;
    FirstLboOfCurrentRun := 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L1;

  anon70_Then:
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1262} sdv_45 := FatLookupLastMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), CurrentVbo, CurrentLbo, Runs);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_45 != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] - (BytesPerCluster_1 - 1);
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    Mem_T.INT4[CurrentLbo] := Mem_T.INT4[CurrentLbo] - (BytesPerCluster_1 - 1);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L44;

  L44:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1263} boogieTmp := corral_nondet();
    Mem_T.INT4[FatEntry_1] := boogieTmp;
    goto L46;

  L46:
    call {:si_unique_call 1264} Tmp_140, Tmp_141, sdv_46, LastCluster, FirstLboOfCurrentRun, FirstVboOfCurrentRun, PriorLbo, boogieTmp, vslice_dummy_var_233, vslice_dummy_var_234 := FatLookupFileAllocation#1_loop_L46(BytesOnVolume, Tmp_140, CurrentLbo, Tmp_141, Runs, Context, sdv_46, LastCluster, Vcb_10, FatEntry_1, FirstLboOfCurrentRun, FirstVboOfCurrentRun, CurrentVbo, BytesPerCluster_1, PriorLbo, IrpContext_15, FcbOrDcb, Vbo, EndOnMax, boogieTmp, vslice_dummy_var_233, vslice_dummy_var_234);
    goto L46_last;

  L46_last:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} LastCluster != 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 1;
    assume {:nonnull} Lbo_1 != 0;
    assume Lbo_1 > 0;
    Mem_T.INT4[Lbo_1] := FirstLboOfCurrentRun + Vbo - FirstVboOfCurrentRun;
    assume {:nonnull} ByteCount_1 != 0;
    assume ByteCount_1 > 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[ByteCount_1] := Mem_T.INT4[CurrentVbo] - Vbo;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Index != 0;
    assume {:nonnull} Index != 0;
    assume Index > 0;
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Index] := Mem_T.INT4[Runs] - 1;
    goto L54;

  L54:
    assume {:nonnull} Context != 0;
    assume Context > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} Context != 0;
    assume Context > 0;
    goto L1;

  anon53_Then:
    goto L1;

  anon71_Then:
    assume {:partition} Index == 0;
    goto L54;

  anon52_Then:
    assume {:partition} LastCluster == 0;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1265} FatLookupFatEntry(IrpContext_15, Vcb_10, Mem_T.INT4[FatEntry_1], FatEntry_1, Context);
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    PriorLbo := Mem_T.INT4[CurrentLbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    call {:si_unique_call 1266} boogieTmp := corral_nondet();
    Mem_T.INT4[CurrentLbo] := boogieTmp;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] + BytesPerCluster_1;
    assume {:nonnull} FatEntry_1 != 0;
    assume FatEntry_1 > 0;
    call {:si_unique_call 1267} sdv_46 := FatInterpretClusterType(Vcb_10, Mem_T.INT4[FatEntry_1]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_46 != 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_46 != 1;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_46 != 2;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_46 != 3;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_46 == 4;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] != 0;
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L86;

  L86:
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} PriorLbo + BytesPerCluster_1 != Mem_T.INT4[CurrentLbo];
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} FirstLboOfCurrentRun != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Tmp_141 := Mem_T.INT4[CurrentVbo] - FirstVboOfCurrentRun;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1268} vslice_dummy_var_234 := FatAddMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), FirstVboOfCurrentRun, FirstLboOfCurrentRun, Tmp_141);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L89;

  L89:
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] > Vbo;
    LastCluster := 1;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    assume false;
    return;

  anon61_Then:
    assume {:partition} Vbo >= Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    FirstVboOfCurrentRun := Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    FirstLboOfCurrentRun := Mem_T.INT4[CurrentLbo];
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} FirstLboOfCurrentRun == 0;
    goto L89;

  anon59_Then:
    assume {:partition} PriorLbo + BytesPerCluster_1 == Mem_T.INT4[CurrentLbo];
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    assume false;
    return;

  anon57_Then:
    assume {:nonnull} BytesOnVolume != 0;
    assume BytesOnVolume > 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L86;

  anon58_Then:
    goto L81;

  L81:
    call {:si_unique_call 1269} FatPopUpFileCorrupt#1(IrpContext_15, FcbOrDcb);
    assume {:nonnull} IrpContext_15 != 0;
    assume IrpContext_15 > 0;
    call {:si_unique_call 1270} ExRaiseStatus(-1073741566);
    goto L86;

  anon56_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] == 0;
    goto L81;

  anon65_Then:
    assume {:partition} sdv_46 != 4;
    call {:si_unique_call 1271} KeBugCheckEx(35, 132170, 0, 0, 0);
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    assume false;
    return;

  anon66_Then:
    assume {:partition} sdv_46 == 3;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Mem_T.INT4[CurrentVbo] != 0;
    goto L103;

  L103:
    LastCluster := 1;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} FirstLboOfCurrentRun != 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Tmp_140 := Mem_T.INT4[CurrentVbo] - FirstVboOfCurrentRun;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    call {:si_unique_call 1272} vslice_dummy_var_233 := FatAddMcbEntry(Vcb_10, Mcb__FCB(FcbOrDcb), FirstVboOfCurrentRun, FirstLboOfCurrentRun, Tmp_140);
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := Mem_T.INT4[Runs] + 1;
    goto L105;

  L105:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Vbo == -2;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto L54;

  anon62_Then:
    assume {:partition} Vbo != -2;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Vbo >= Mem_T.INT4[CurrentVbo];
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[EndOnMax] == 0;
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L54;

  anon64_Then:
    assume {:partition} Mem_T.INT4[EndOnMax] != 0;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] > Vbo;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon72_Then:
    assume {:partition} FirstLboOfCurrentRun == 0;
    goto L105;

  anon55_Then:
    assume {:partition} Mem_T.INT4[CurrentVbo] == 0;
    assume {:nonnull} EndOnMax != 0;
    assume EndOnMax > 0;
    Mem_T.INT4[EndOnMax] := 1;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := Mem_T.INT4[CurrentVbo] - 1;
    goto L103;

  anon67_Then:
    assume {:partition} sdv_46 == 2;
    goto L76;

  L76:
    call {:si_unique_call 1273} FatPopUpFileCorrupt#1(IrpContext_15, FcbOrDcb);
    assume {:nonnull} IrpContext_15 != 0;
    assume IrpContext_15 > 0;
    call {:si_unique_call 1274} ExRaiseStatus(-1073741566);
    goto L76_dummy;

  L76_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} sdv_46 == 1;
    goto L76;

  anon54_Then:
    assume {:partition} sdv_46 == 0;
    goto L76;

  anon50_Then:
    assume {:partition} sdv_45 == 0;
    assume {:nonnull} FcbOrDcb != 0;
    assume FcbOrDcb > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    Mem_T.INT4[CurrentVbo] := 0;
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    call {:si_unique_call 1275} boogieTmp := corral_nondet();
    Mem_T.INT4[CurrentLbo] := boogieTmp;
    assume {:nonnull} CurrentVbo != 0;
    assume CurrentVbo > 0;
    FirstVboOfCurrentRun := Mem_T.INT4[CurrentVbo];
    assume {:nonnull} CurrentLbo != 0;
    assume CurrentLbo > 0;
    FirstLboOfCurrentRun := Mem_T.INT4[CurrentLbo];
    assume {:nonnull} Runs != 0;
    assume Runs > 0;
    Mem_T.INT4[Runs] := 0;
    goto L44;

  anon51_Then:
    assume {:nonnull} Allocated != 0;
    assume Allocated > 0;
    Mem_T.INT4[Allocated] := 0;
    goto L1;
}



procedure {:origName "FatLookupFileAllocation"} FatLookupFileAllocation#1(actual_IrpContext_15: int, actual_FcbOrDcb: int, actual_Vbo: int, actual_Lbo_1: int, actual_ByteCount_1: int, actual_Allocated: int, actual_EndOnMax: int, actual_Index: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPopUpFileCorrupt"} FatPopUpFileCorrupt#0(actual_IrpContext_50: int, actual_Fcb_12: int)
{
  var {:pointer} Tmp_958: int;
  var {:pointer} Tmp_959: int;
  var {:scalar} sdv_354: int;
  var {:pointer} IrpContext_50: int;
  var {:pointer} Fcb_12: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;

  anon0:
    call {:si_unique_call 1276} vslice_dummy_var_235 := __HAVOC_malloc(4);
    IrpContext_50 := actual_IrpContext_50;
    Fcb_12 := actual_Fcb_12;
    Tmp_958 := Fcb_12;
    assume {:nonnull} Tmp_958 != 0;
    assume Tmp_958 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[Tmp_958] != 1284;
    assume {:nonnull} Fcb_12 != 0;
    assume Fcb_12 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L10;

  L10:
    assume {:nonnull} IrpContext_50 != 0;
    assume IrpContext_50 > 0;
    call {:si_unique_call 1277} sdv_354 := corral_nondet();
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_354 != 0;
    goto L16;

  L16:
    call {:si_unique_call 1278} vslice_dummy_var_236 := IoRaiseInformationalHardError(-1073741566, 0, 0);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} sdv_354 == 0;
    assume {:nonnull} IrpContext_50 != 0;
    assume IrpContext_50 > 0;
    Tmp_959 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_50)];
    assume {:nonnull} Tmp_959 != 0;
    assume Tmp_959 > 0;
    goto L16;

  anon7_Then:
    call {:si_unique_call 1279} FatSetFullFileNameInFcb#0(IrpContext_50, Fcb_12);
    goto L10;

  anon9_Then:
    assume {:partition} Mem_T.INT4[Tmp_958] == 1284;
    goto L1;
}



procedure {:origName "FatPopUpFileCorrupt"} FatPopUpFileCorrupt#0(actual_IrpContext_50: int, actual_Fcb_12: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatPopUpFileCorrupt"} FatPopUpFileCorrupt#1(actual_IrpContext_50: int, actual_Fcb_12: int)
{
  var {:pointer} Tmp_958: int;
  var {:pointer} Tmp_959: int;
  var {:scalar} sdv_354: int;
  var {:pointer} IrpContext_50: int;
  var {:pointer} Fcb_12: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;

  anon0:
    call {:si_unique_call 1280} vslice_dummy_var_237 := __HAVOC_malloc(4);
    IrpContext_50 := actual_IrpContext_50;
    Fcb_12 := actual_Fcb_12;
    Tmp_958 := Fcb_12;
    assume {:nonnull} Tmp_958 != 0;
    assume Tmp_958 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[Tmp_958] != 1284;
    assume {:nonnull} Fcb_12 != 0;
    assume Fcb_12 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L10;

  L10:
    assume {:nonnull} IrpContext_50 != 0;
    assume IrpContext_50 > 0;
    call {:si_unique_call 1281} sdv_354 := corral_nondet();
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_354 != 0;
    goto L16;

  L16:
    call {:si_unique_call 1282} vslice_dummy_var_238 := IoRaiseInformationalHardError(-1073741566, 0, 0);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} sdv_354 == 0;
    assume {:nonnull} IrpContext_50 != 0;
    assume IrpContext_50 > 0;
    Tmp_959 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(IrpContext_50)];
    assume {:nonnull} Tmp_959 != 0;
    assume Tmp_959 > 0;
    goto L16;

  anon7_Then:
    call {:si_unique_call 1283} FatSetFullFileNameInFcb#1(IrpContext_50, Fcb_12);
    goto L10;

  anon9_Then:
    assume {:partition} Mem_T.INT4[Tmp_958] == 1284;
    goto L1;
}



procedure {:origName "FatPopUpFileCorrupt"} FatPopUpFileCorrupt#1(actual_IrpContext_50: int, actual_Fcb_12: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFullFileNameInFcb"} FatSetFullFileNameInFcb#0(actual_IrpContext_46: int, actual_Fcb_11: int)
{
  var {:scalar} PathLength: int;
  var {:pointer} TmpFcb: int;
  var {:scalar} Lfn_1: int;
  var {:pointer} sdv_347: int;
  var {:scalar} Tmp_892: int;
  var {:scalar} Tmp_893: int;
  var {:pointer} sdv_348: int;
  var {:pointer} Tmp_894: int;
  var {:scalar} sdv_350: int;
  var {:pointer} sdv_351: int;
  var {:pointer} StopFcb: int;
  var {:pointer} TmpBuffer: int;
  var {:pointer} IrpContext_46: int;
  var {:pointer} Fcb_11: int;
  var vslice_dummy_var_239: int;

  anon0:
    call {:si_unique_call 1284} vslice_dummy_var_239 := __HAVOC_malloc(4);
    call {:si_unique_call 1285} Lfn_1 := __HAVOC_malloc(12);
    IrpContext_46 := actual_IrpContext_46;
    Fcb_11 := actual_Fcb_11;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    TmpFcb := Fcb_11;
    PathLength := 0;
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    call {:si_unique_call 1286} sdv_347 := ExAllocatePoolWithTag(17, 520, -294362810);
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    goto L17;

  L17:
    call {:si_unique_call 1287} PathLength, TmpFcb, Tmp_894 := FatSetFullFileNameInFcb#0_loop_L17(PathLength, TmpFcb, Tmp_894, Fcb_11);
    goto L17_last;

  L17_last:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    havoc Tmp_894;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} TmpFcb != Mem_T.RootDcb__VCB[RootDcb__VCB(Tmp_894)];
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} TmpFcb != Fcb_11;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc PathLength;
    call {:si_unique_call 1288} sdv_348 := ExAllocatePoolWithTag(17, PathLength, -294362810);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc Tmp_893;
    call {:si_unique_call 1289} sdv_RtlCopyMemory(0, 0, Tmp_893);
    goto L18;

  L18:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L48;

  L48:
    StopFcb := TmpFcb;
    TmpFcb := Fcb_11;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    havoc TmpBuffer;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L53;

  L53:
    call {:si_unique_call 1290} TmpFcb, Tmp_892 := FatSetFullFileNameInFcb#0_loop_L53(TmpFcb, Lfn_1, Tmp_892, StopFcb, TmpBuffer, IrpContext_46);
    goto L53_last;

  L53_last:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} TmpFcb != StopFcb;
    call {:si_unique_call 1291} FatGetUnicodeNameFromFcb#0(IrpContext_46, TmpFcb, Lfn_1);
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    havoc Tmp_892;
    call {:si_unique_call 1292} sdv_RtlCopyMemory(0, 0, Tmp_892);
    assume {:nonnull} TmpBuffer != 0;
    assume TmpBuffer > 0;
    Mem_T.INT4[TmpBuffer] := 92;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc TmpFcb;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} TmpFcb == StopFcb;
    call {:si_unique_call 1293} sdv_350 := sdv_AbnormalTermination();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_350 != 0;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    call {:si_unique_call 1294} sdv_ExFreePool(0);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L69;

  L69:
    call {:si_unique_call 1295} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon23_Then:
    goto L69;

  anon22_Then:
    assume {:partition} sdv_350 == 0;
    goto L69;

  anon18_Then:
    call {:si_unique_call 1296} sdv_351 := ExAllocatePoolWithTag(17, PathLength, -294362810);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L48;

  anon20_Then:
    goto L20;

  L20:
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc PathLength;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc TmpFcb;
    goto L20_dummy;

  L20_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} TmpFcb == Fcb_11;
    goto L20;

  anon24_Then:
    assume {:partition} TmpFcb == Mem_T.RootDcb__VCB[RootDcb__VCB(Tmp_894)];
    goto L18;

  anon17_Then:
    goto L1;
}



procedure {:origName "FatSetFullFileNameInFcb"} FatSetFullFileNameInFcb#0(actual_IrpContext_46: int, actual_Fcb_11: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatSetFullFileNameInFcb"} FatSetFullFileNameInFcb#1(actual_IrpContext_46: int, actual_Fcb_11: int)
{
  var {:scalar} PathLength: int;
  var {:pointer} TmpFcb: int;
  var {:scalar} Lfn_1: int;
  var {:pointer} sdv_347: int;
  var {:scalar} Tmp_892: int;
  var {:scalar} Tmp_893: int;
  var {:pointer} sdv_348: int;
  var {:pointer} Tmp_894: int;
  var {:scalar} sdv_350: int;
  var {:pointer} sdv_351: int;
  var {:pointer} StopFcb: int;
  var {:pointer} TmpBuffer: int;
  var {:pointer} IrpContext_46: int;
  var {:pointer} Fcb_11: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 1297} vslice_dummy_var_240 := __HAVOC_malloc(4);
    call {:si_unique_call 1298} Lfn_1 := __HAVOC_malloc(12);
    IrpContext_46 := actual_IrpContext_46;
    Fcb_11 := actual_Fcb_11;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    TmpFcb := Fcb_11;
    PathLength := 0;
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    call {:si_unique_call 1299} sdv_347 := ExAllocatePoolWithTag(17, 520, -294362810);
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    goto L17;

  L17:
    call {:si_unique_call 1300} PathLength, TmpFcb, Tmp_894 := FatSetFullFileNameInFcb#1_loop_L17(PathLength, TmpFcb, Tmp_894, Fcb_11);
    goto L17_last;

  L17_last:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    havoc Tmp_894;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} TmpFcb != Mem_T.RootDcb__VCB[RootDcb__VCB(Tmp_894)];
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} TmpFcb != Fcb_11;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc PathLength;
    call {:si_unique_call 1301} sdv_348 := ExAllocatePoolWithTag(17, PathLength, -294362810);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc Tmp_893;
    call {:si_unique_call 1302} sdv_RtlCopyMemory(0, 0, Tmp_893);
    goto L18;

  L18:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L48;

  L48:
    StopFcb := TmpFcb;
    TmpFcb := Fcb_11;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    havoc TmpBuffer;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L53;

  L53:
    call {:si_unique_call 1303} TmpFcb, Tmp_892 := FatSetFullFileNameInFcb#1_loop_L53(TmpFcb, Lfn_1, Tmp_892, StopFcb, TmpBuffer, IrpContext_46);
    goto L53_last;

  L53_last:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} TmpFcb != StopFcb;
    call {:si_unique_call 1304} FatGetUnicodeNameFromFcb#1(IrpContext_46, TmpFcb, Lfn_1);
    assume {:nonnull} Lfn_1 != 0;
    assume Lfn_1 > 0;
    havoc Tmp_892;
    call {:si_unique_call 1305} sdv_RtlCopyMemory(0, 0, Tmp_892);
    assume {:nonnull} TmpBuffer != 0;
    assume TmpBuffer > 0;
    Mem_T.INT4[TmpBuffer] := 92;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc TmpFcb;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} TmpFcb == StopFcb;
    call {:si_unique_call 1306} sdv_350 := sdv_AbnormalTermination();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_350 != 0;
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    call {:si_unique_call 1307} sdv_ExFreePool(0);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L69;

  L69:
    call {:si_unique_call 1308} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon23_Then:
    goto L69;

  anon22_Then:
    assume {:partition} sdv_350 == 0;
    goto L69;

  anon18_Then:
    call {:si_unique_call 1309} sdv_351 := ExAllocatePoolWithTag(17, PathLength, -294362810);
    assume {:nonnull} Fcb_11 != 0;
    assume Fcb_11 > 0;
    goto L48;

  anon20_Then:
    goto L20;

  L20:
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc PathLength;
    assume {:nonnull} TmpFcb != 0;
    assume TmpFcb > 0;
    havoc TmpFcb;
    goto L20_dummy;

  L20_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} TmpFcb == Fcb_11;
    goto L20;

  anon24_Then:
    assume {:partition} TmpFcb == Mem_T.RootDcb__VCB[RootDcb__VCB(Tmp_894)];
    goto L18;

  anon17_Then:
    goto L1;
}



procedure {:origName "FatSetFullFileNameInFcb"} FatSetFullFileNameInFcb#1(actual_IrpContext_46: int, actual_Fcb_11: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetUnicodeNameFromFcb"} FatGetUnicodeNameFromFcb#0(actual_IrpContext_45: int, actual_Fcb_10: int, actual_Lfn: int)
{
  var {:pointer} Dirent_2: int;
  var {:pointer} DirentBcb_1: int;
  var {:scalar} ShortName: int;
  var {:scalar} LocalCcb: int;
  var {:pointer} ShortNameBuffer: int;
  var {:dopa} {:scalar} DirentByteOffset: int;
  var {:pointer} IrpContext_45: int;
  var {:pointer} Fcb_10: int;
  var {:pointer} Lfn: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_7482: int;
  var vslice_dummy_var_7483: int;
  var vslice_dummy_var_7484: int;
  var vslice_dummy_var_7485: int;

  anon0:
    call {:si_unique_call 1310} Dirent_2 := __HAVOC_malloc(4);
    call {:si_unique_call 1311} DirentBcb_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1312} ShortName := __HAVOC_malloc(12);
    call {:si_unique_call 1313} LocalCcb := __HAVOC_malloc(88);
    call {:si_unique_call 1314} vslice_dummy_var_241 := __HAVOC_malloc(4);
    call {:si_unique_call 1315} DirentByteOffset := __HAVOC_malloc(4);
    IrpContext_45 := actual_IrpContext_45;
    Fcb_10 := actual_Fcb_10;
    Lfn := actual_Lfn;
    call {:si_unique_call 1316} ShortNameBuffer := __HAVOC_malloc(48);
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    havoc vslice_dummy_var_7482;
    call {:si_unique_call 1317} FatStringTo8dot3(IrpContext_45, vslice_dummy_var_7482, Constant_unnamed_tag_72(OemQueryTemplate__CCB(LocalCcb)));
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    havoc vslice_dummy_var_7483;
    havoc vslice_dummy_var_7484;
    call {:si_unique_call 1318} FatLocateDirent#0(IrpContext_45, vslice_dummy_var_7483, LocalCcb, vslice_dummy_var_7484, Dirent_2, DirentBcb_1, DirentByteOffset, 0, Lfn);
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} DirentByteOffset != 0;
    assume DirentByteOffset > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L20;

  L20:
    assume {:nonnull} Lfn != 0;
    assume Lfn > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} IrpContext_45 != 0;
    assume IrpContext_45 > 0;
    call {:si_unique_call 1319} ExRaiseStatus(-1073741672);
    goto L30;

  L30:
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} Dirent_2 != 0;
    assume Dirent_2 > 0;
    havoc vslice_dummy_var_7485;
    call {:si_unique_call 1320} Fat8dot3ToString(IrpContext_45, vslice_dummy_var_7485, 1, ShortName);
    call {:si_unique_call 1321} vslice_dummy_var_242 := RtlOemStringToCountedUnicodeString(0, 0, 0);
    goto L22;

  L22:
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    goto L1;

  anon15_Then:
    goto L30;

  anon13_Then:
    goto L22;

  anon12_Then:
    goto L18;

  L18:
    assume {:nonnull} IrpContext_45 != 0;
    assume IrpContext_45 > 0;
    call {:si_unique_call 1322} ExRaiseStatus(-1073741672);
    goto L20;

  anon11_Then:
    goto L18;
}



procedure {:origName "FatGetUnicodeNameFromFcb"} FatGetUnicodeNameFromFcb#0(actual_IrpContext_45: int, actual_Fcb_10: int, actual_Lfn: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatGetUnicodeNameFromFcb"} FatGetUnicodeNameFromFcb#1(actual_IrpContext_45: int, actual_Fcb_10: int, actual_Lfn: int)
{
  var {:pointer} Dirent_2: int;
  var {:pointer} DirentBcb_1: int;
  var {:scalar} ShortName: int;
  var {:scalar} LocalCcb: int;
  var {:pointer} ShortNameBuffer: int;
  var {:dopa} {:scalar} DirentByteOffset: int;
  var {:pointer} IrpContext_45: int;
  var {:pointer} Fcb_10: int;
  var {:pointer} Lfn: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_7486: int;
  var vslice_dummy_var_7487: int;
  var vslice_dummy_var_7488: int;
  var vslice_dummy_var_7489: int;

  anon0:
    call {:si_unique_call 1323} Dirent_2 := __HAVOC_malloc(4);
    call {:si_unique_call 1324} DirentBcb_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1325} ShortName := __HAVOC_malloc(12);
    call {:si_unique_call 1326} LocalCcb := __HAVOC_malloc(88);
    call {:si_unique_call 1327} vslice_dummy_var_243 := __HAVOC_malloc(4);
    call {:si_unique_call 1328} DirentByteOffset := __HAVOC_malloc(4);
    IrpContext_45 := actual_IrpContext_45;
    Fcb_10 := actual_Fcb_10;
    Lfn := actual_Lfn;
    call {:si_unique_call 1329} ShortNameBuffer := __HAVOC_malloc(48);
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    havoc vslice_dummy_var_7486;
    call {:si_unique_call 1330} FatStringTo8dot3(IrpContext_45, vslice_dummy_var_7486, Constant_unnamed_tag_72(OemQueryTemplate__CCB(LocalCcb)));
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} LocalCcb != 0;
    assume LocalCcb > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    havoc vslice_dummy_var_7487;
    havoc vslice_dummy_var_7488;
    call {:si_unique_call 1331} FatLocateDirent#1(IrpContext_45, vslice_dummy_var_7487, LocalCcb, vslice_dummy_var_7488, Dirent_2, DirentBcb_1, DirentByteOffset, 0, Lfn);
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} DirentByteOffset != 0;
    assume DirentByteOffset > 0;
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L20;

  L20:
    assume {:nonnull} Lfn != 0;
    assume Lfn > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Fcb_10 != 0;
    assume Fcb_10 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} IrpContext_45 != 0;
    assume IrpContext_45 > 0;
    call {:si_unique_call 1332} ExRaiseStatus(-1073741672);
    goto L30;

  L30:
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} ShortName != 0;
    assume ShortName > 0;
    assume {:nonnull} Dirent_2 != 0;
    assume Dirent_2 > 0;
    havoc vslice_dummy_var_7489;
    call {:si_unique_call 1333} Fat8dot3ToString(IrpContext_45, vslice_dummy_var_7489, 1, ShortName);
    call {:si_unique_call 1334} vslice_dummy_var_244 := RtlOemStringToCountedUnicodeString(0, 0, 0);
    goto L22;

  L22:
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} DirentBcb_1 != 0;
    assume DirentBcb_1 > 0;
    goto L1;

  L1:
    return;

  anon14_Then:
    goto L1;

  anon15_Then:
    goto L30;

  anon13_Then:
    goto L22;

  anon12_Then:
    goto L18;

  L18:
    assume {:nonnull} IrpContext_45 != 0;
    assume IrpContext_45 > 0;
    call {:si_unique_call 1335} ExRaiseStatus(-1073741672);
    goto L20;

  anon11_Then:
    goto L18;
}



procedure {:origName "FatGetUnicodeNameFromFcb"} FatGetUnicodeNameFromFcb#1(actual_IrpContext_45: int, actual_Fcb_10: int, actual_Lfn: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLocateDirent"} FatLocateDirent#0(actual_IrpContext_52: int, actual_ParentDirectory: int, actual_Ccb_4: int, actual_OffsetToStartSearchFrom: int, actual_Dirent_5: int, actual_Bcb_9: int, actual_ByteOffset: int, actual_FileNameDos: int, actual_LongFileName: int)
{
  var {:scalar} LfnInProgress: int;
  var {:pointer} Tmp_975: int;
  var {:scalar} Ordinal: int;
  var {:scalar} LfnByteOffset: int;
  var {:pointer} Tmp_976: int;
  var {:pointer} Tmp_977: int;
  var {:scalar} Tmp_978: int;
  var {:pointer} Tmp_979: int;
  var {:pointer} Tmp_980: int;
  var {:pointer} Tmp_982: int;
  var {:pointer} Tmp_983: int;
  var {:scalar} LfnChecksum: int;
  var {:pointer} Tmp_984: int;
  var {:pointer} Tmp_987: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} Tmp_989: int;
  var {:pointer} Tmp_990: int;
  var {:pointer} Tmp_991: int;
  var {:scalar} LfnIndex: int;
  var {:pointer} Tmp_992: int;
  var {:pointer} Tmp_993: int;
  var {:scalar} LfnSize: int;
  var {:pointer} Lfn_2: int;
  var {:scalar} sdv_361: int;
  var {:pointer} Tmp_994: int;
  var {:pointer} Tmp_995: int;
  var {:scalar} Tmp_997: int;
  var {:scalar} Tmp_998: int;
  var {:dopa} {:scalar} Status_13: int;
  var {:pointer} Tmp_999: int;
  var {:pointer} Tmp_1000: int;
  var {:scalar} Tmp_1001: int;
  var {:scalar} sdv_362: int;
  var {:pointer} Tmp_1002: int;
  var {:pointer} Tmp_1003: int;
  var {:pointer} NameBuffer: int;
  var {:scalar} Tmp_1006: int;
  var {:pointer} Tmp_1008: int;
  var {:scalar} CheckTail: int;
  var {:scalar} Tmp_1009: int;
  var {:pointer} Tmp_1011: int;
  var {:scalar} UpcasedLfn: int;
  var {:pointer} Tmp_1012: int;
  var {:pointer} Tmp_1013: int;
  var {:scalar} sdv_364: int;
  var {:pointer} Tmp_1014: int;
  var {:pointer} Tmp_1015: int;
  var {:pointer} Tmp_1016: int;
  var {:scalar} FoundValidLfn: int;
  var {:pointer} Tmp_1017: int;
  var {:scalar} sdv_365: int;
  var {:scalar} sdv_366: int;
  var {:pointer} Tmp_1018: int;
  var {:pointer} Tmp_1019: int;
  var {:pointer} Tmp_1020: int;
  var {:scalar} Tmp_1023: int;
  var {:scalar} Tmp_1025: int;
  var {:pointer} Tmp_1026: int;
  var {:pointer} Tmp_1027: int;
  var {:pointer} Tmp_1028: int;
  var {:pointer} LocalLfnBuffer: int;
  var {:scalar} Tmp_1029: int;
  var {:pointer} Tmp_1031: int;
  var {:pointer} Tmp_1033: int;
  var {:scalar} Name_2: int;
  var {:pointer} Tmp_1034: int;
  var {:scalar} Tmp_1035: int;
  var {:pointer} Tmp_1036: int;
  var {:pointer} Tmp_1037: int;
  var {:scalar} Tmp_1039: int;
  var {:pointer} Tmp_1040: int;
  var {:pointer} IrpContext_52: int;
  var {:pointer} ParentDirectory: int;
  var {:pointer} Ccb_4: int;
  var {:scalar} OffsetToStartSearchFrom: int;
  var {:pointer} Dirent_5: int;
  var {:pointer} Bcb_9: int;
  var {:pointer} ByteOffset: int;
  var {:pointer} FileNameDos: int;
  var {:pointer} LongFileName: int;
  var boogieTmp: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_7490: int;
  var vslice_dummy_var_7491: int;
  var vslice_dummy_var_7492: int;
  var vslice_dummy_var_7493: int;

  anon0:
    call {:si_unique_call 1336} Status_13 := __HAVOC_malloc(4);
    call {:si_unique_call 1337} UpcasedLfn := __HAVOC_malloc(12);
    call {:si_unique_call 1338} vslice_dummy_var_245 := __HAVOC_malloc(4);
    call {:si_unique_call 1339} Name_2 := __HAVOC_malloc(12);
    IrpContext_52 := actual_IrpContext_52;
    ParentDirectory := actual_ParentDirectory;
    Ccb_4 := actual_Ccb_4;
    OffsetToStartSearchFrom := actual_OffsetToStartSearchFrom;
    Dirent_5 := actual_Dirent_5;
    Bcb_9 := actual_Bcb_9;
    ByteOffset := actual_ByteOffset;
    FileNameDos := actual_FileNameDos;
    LongFileName := actual_LongFileName;
    call {:si_unique_call 1340} Tmp_977 := __HAVOC_malloc(44);
    call {:si_unique_call 1341} Tmp_983 := __HAVOC_malloc(44);
    call {:si_unique_call 1342} Tmp_993 := __HAVOC_malloc(24);
    call {:si_unique_call 1343} Tmp_999 := __HAVOC_malloc(8);
    call {:si_unique_call 1344} Tmp_1000 := __HAVOC_malloc(40);
    call {:si_unique_call 1345} Tmp_1003 := __HAVOC_malloc(44);
    call {:si_unique_call 1346} NameBuffer := __HAVOC_malloc(48);
    call {:si_unique_call 1347} Tmp_1008 := __HAVOC_malloc(44);
    call {:si_unique_call 1348} Tmp_1011 := __HAVOC_malloc(44);
    call {:si_unique_call 1349} Tmp_1012 := __HAVOC_malloc(44);
    call {:si_unique_call 1350} Tmp_1013 := __HAVOC_malloc(40);
    call {:si_unique_call 1351} Tmp_1016 := __HAVOC_malloc(8);
    call {:si_unique_call 1352} Tmp_1020 := __HAVOC_malloc(44);
    call {:si_unique_call 1353} Tmp_1026 := __HAVOC_malloc(44);
    call {:si_unique_call 1354} Tmp_1027 := __HAVOC_malloc(44);
    call {:si_unique_call 1355} LocalLfnBuffer := __HAVOC_malloc(128);
    call {:si_unique_call 1356} Tmp_1036 := __HAVOC_malloc(44);
    call {:si_unique_call 1357} Tmp_1037 := __HAVOC_malloc(24);
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    Mem_T.INT4[Status_13] := 0;
    LfnInProgress := 0;
    call {:si_unique_call 1358} sdv_do_paged_code_check();
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} INTDIV(OffsetToStartSearchFrom, 4096) == INTDIV(Mem_T.INT4[ByteOffset], 4096);
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L25;

  L25:
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} LongFileName != 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L33;

  L33:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 0;
    goto L35;

  L35:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := BAND(OffsetToStartSearchFrom + 31, BNOT(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16)));
    goto L42;

  L42:
    call {:si_unique_call 1359} LfnInProgress, Tmp_975, Ordinal, LfnByteOffset, Tmp_976, Tmp_977, Tmp_978, Tmp_979, Tmp_980, Tmp_982, Tmp_983, LfnChecksum, Tmp_984, Tmp_987, Tmp_988, Tmp_989, Tmp_990, Tmp_991, LfnIndex, Tmp_992, Tmp_993, LfnSize, Lfn_2, sdv_361, Tmp_994, Tmp_995, Tmp_997, Tmp_998, Tmp_999, Tmp_1000, Tmp_1001, sdv_362, Tmp_1002, Tmp_1003, Tmp_1006, Tmp_1008, CheckTail, Tmp_1009, Tmp_1011, Tmp_1012, Tmp_1013, sdv_364, Tmp_1014, Tmp_1015, Tmp_1016, FoundValidLfn, Tmp_1017, sdv_365, sdv_366, Tmp_1018, Tmp_1019, Tmp_1020, Tmp_1023, Tmp_1025, Tmp_1026, Tmp_1027, Tmp_1028, Tmp_1029, Tmp_1031, Tmp_1033, Tmp_1034, Tmp_1035, Tmp_1036, Tmp_1037, Tmp_1039, Tmp_1040, boogieTmp := FatLocateDirent#0_loop_L42(LfnInProgress, Tmp_975, Ordinal, LfnByteOffset, Tmp_976, Tmp_977, Tmp_978, Tmp_979, Tmp_980, Tmp_982, Tmp_983, LfnChecksum, Tmp_984, Tmp_987, Tmp_988, Tmp_989, Tmp_990, Tmp_991, LfnIndex, Tmp_992, Tmp_993, LfnSize, Lfn_2, sdv_361, Tmp_994, Tmp_995, Tmp_997, Tmp_998, Status_13, Tmp_999, Tmp_1000, Tmp_1001, sdv_362, Tmp_1002, Tmp_1003, Tmp_1006, Tmp_1008, CheckTail, Tmp_1009, Tmp_1011, UpcasedLfn, Tmp_1012, Tmp_1013, sdv_364, Tmp_1014, Tmp_1015, Tmp_1016, FoundValidLfn, Tmp_1017, sdv_365, sdv_366, Tmp_1018, Tmp_1019, Tmp_1020, Tmp_1023, Tmp_1025, Tmp_1026, Tmp_1027, Tmp_1028, Tmp_1029, Tmp_1031, Tmp_1033, Name_2, Tmp_1034, Tmp_1035, Tmp_1036, Tmp_1037, Tmp_1039, Tmp_1040, IrpContext_52, ParentDirectory, Ccb_4, Dirent_5, Bcb_9, ByteOffset, LongFileName, boogieTmp);
    goto L42_last;

  L42_last:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    assume {:nonnull} ParentDirectory != 0;
    assume ParentDirectory > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    Mem_T.INT4[Status_13] := -1073741807;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L46;

  L46:
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} Mem_T.INT4[Status_13] == -1073741807;
    goto L55;

  L55:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L56;

  L56:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := 0;
    goto L38;

  L38:
    call {:si_unique_call 1360} FatFreeStringBuffer(UpcasedLfn);
    return;

  anon136_Then:
    goto L56;

  anon135_Then:
    assume {:partition} Mem_T.INT4[Status_13] != -1073741807;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_976;
    assume {:nonnull} Tmp_976 != 0;
    assume Tmp_976 > 0;
    havoc Tmp_1027;
    assume {:nonnull} Tmp_1027 != 0;
    assume Tmp_1027 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} Mem_T.INT4[Tmp_1027] != 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_995;
    assume {:nonnull} Tmp_995 != 0;
    assume Tmp_995 > 0;
    havoc Tmp_1011;
    assume {:nonnull} Tmp_1011 != 0;
    assume Tmp_1011 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} Mem_T.INT4[Tmp_1011] == 229;
    LfnInProgress := 0;
    goto L67;

  L67:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := Mem_T.INT4[ByteOffset] + 32;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L67_dummy;

  L67_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} Mem_T.INT4[Tmp_1011] != 229;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} LongFileName != 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1018;
    assume {:nonnull} Tmp_1018 != 0;
    assume Tmp_1018 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Lfn_2;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} LfnInProgress != 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto L78;

  L78:
    LfnInProgress := 0;
    goto L75;

  L75:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} LfnInProgress == 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_978;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} 20 >= Tmp_978;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    CheckTail := 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Ordinal;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} Ordinal != 0;
    goto L112;

  L112:
    LfnIndex := (Ordinal - 1) * 13;
    call {:si_unique_call 1361} Tmp_988 := corral_nondet();
    call {:si_unique_call 1362} FatEnsureStringBufferEnough(LongFileName, Tmp_988);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1013;
    Tmp_989 := LfnIndex + 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1017;
    call {:si_unique_call 1363} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1037;
    Tmp_1025 := LfnIndex + 5;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_980;
    call {:si_unique_call 1364} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_999;
    Tmp_1029 := LfnIndex + 11;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1034;
    call {:si_unique_call 1365} sdv_RtlCopyMemory(0, 0, 4);
    goto L132;

  L132:
    call {:si_unique_call 1366} LfnIndex, Tmp_992, LfnSize, Tmp_998, CheckTail, Tmp_1023, Tmp_1028 := FatLocateDirent#0_loop_L132(Ordinal, LfnIndex, Tmp_992, LfnSize, Tmp_998, CheckTail, Tmp_1023, Tmp_1028, LongFileName);
    goto L132_last;

  L132_last:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} LfnIndex != Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} CheckTail != 0;
    Tmp_1023 := LfnIndex;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1028;
    assume {:nonnull} Tmp_1028 != 0;
    assume Tmp_1028 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[Tmp_1028 + Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    LfnIndex := LfnIndex + 1;
    goto L137_dummy;

  L137_dummy:
    assume false;
    return;

  anon184_Then:
    assume {:partition} Mem_T.INT4[Tmp_1028 + Tmp_1023 * 4] != 65535;
    goto L133;

  L133:
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} LfnIndex == Ordinal * 13;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} CheckTail != 0;
    goto L143;

  L143:
    LfnIndex := LfnIndex - 13;
    LfnInProgress := 1;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc LfnChecksum;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    LfnByteOffset := Mem_T.INT4[ByteOffset];
    goto L67;

  anon150_Then:
    assume {:partition} CheckTail == 0;
    LfnSize := LfnIndex;
    goto L143;

  anon148_Then:
    assume {:partition} LfnIndex != Ordinal * 13;
    goto L67;

  anon149_Then:
    assume {:partition} CheckTail == 0;
    Tmp_998 := LfnIndex;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_992;
    assume {:nonnull} Tmp_992 != 0;
    assume Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[Tmp_992 + Tmp_998 * 4] == 0;
    LfnSize := LfnIndex;
    CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[Tmp_992 + Tmp_998 * 4] != 0;
    goto L137;

  anon147_Then:
    assume {:partition} LfnIndex == Ordinal * 13;
    goto L133;

  anon183_Then:
    assume {:partition} Ordinal == 0;
    assume false;
    assume {:nonnull} IrpContext_52 != 0;
    assume IrpContext_52 > 0;
    call {:si_unique_call 1367} ExRaiseStatus(-1073741566);
    return;

  anon146_Then:
    goto L67;

  anon182_Then:
    assume {:partition} Tmp_978 > 20;
    goto L67;

  anon145_Then:
    goto L67;

  anon139_Then:
    assume {:partition} LfnInProgress != 0;
    goto L67;

  anon140_Then:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    LfnIndex := LfnIndex - 13;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1000;
    Tmp_997 := LfnIndex + 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_979;
    call {:si_unique_call 1368} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_993;
    Tmp_1039 := LfnIndex + 5;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1002;
    call {:si_unique_call 1369} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1016;
    Tmp_1001 := LfnIndex + 11;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_984;
    call {:si_unique_call 1370} sdv_RtlCopyMemory(0, 0, 4);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Ordinal;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    LfnByteOffset := Mem_T.INT4[ByteOffset];
    goto L75;

  anon144_Then:
    goto L78;

  anon143_Then:
    goto L78;

  anon142_Then:
    goto L78;

  anon141_Then:
    goto L78;

  anon181_Then:
    assume {:partition} LfnInProgress == 0;
    goto L75;

  anon180_Then:
    goto L69;

  L69:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_982;
    assume {:nonnull} Tmp_982 != 0;
    assume Tmp_982 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    goto L67;

  anon152_Then:
    goto L38;

  anon186_Then:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} LfnInProgress != 0;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} Mem_T.INT4[ByteOffset] == LfnByteOffset + 32;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} LfnIndex == 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc vslice_dummy_var_7490;
    call {:si_unique_call 1371} sdv_361 := FatComputeLfnChecksum(vslice_dummy_var_7490);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} sdv_361 == LfnChecksum;
    FoundValidLfn := 1;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L164;

  L164:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    goto L168;

  L168:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} FoundValidLfn != 0;
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    goto L172;

  L172:
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc vslice_dummy_var_7491;
    call {:si_unique_call 1372} FatEnsureStringBufferEnough(UpcasedLfn, vslice_dummy_var_7491);
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    call {:si_unique_call 1373} boogieTmp := RtlUpcaseUnicodeString(0, 0, 0);
    Mem_T.INT4[Status_13] := boogieTmp;
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[Status_13] >= 0;
    goto L181;

  L181:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    call {:si_unique_call 1374} sdv_364 := FsRtlIsNameInExpression(0, 0, 1, 0);
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} sdv_364 == 0;
    goto L169;

  L169:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} FoundValidLfn != 0;
    FoundValidLfn := 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L67;

  anon160_Then:
    assume {:partition} FoundValidLfn == 0;
    goto L67;

  anon165_Then:
    assume {:partition} sdv_364 != 0;
    goto L38;

  anon164_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1009;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} Tmp_1009 == 0;
    Tmp_1006 := 0;
    goto L387;

  L387:
    call {:si_unique_call 1375} sdv_366 := FsRtlAreNamesEqual(0, 0, Tmp_1006, 0);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} sdv_366 == 0;
    goto L169;

  anon166_Then:
    assume {:partition} sdv_366 != 0;
    goto L38;

  anon187_Then:
    assume {:partition} Tmp_1009 != 0;
    Tmp_1006 := 1;
    goto L387;

  anon163_Then:
    assume {:partition} 0 > Mem_T.INT4[Status_13];
    assume {:nonnull} IrpContext_52 != 0;
    assume IrpContext_52 > 0;
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    call {:si_unique_call 1376} sdv_365 := corral_nondet();
    call {:si_unique_call 1377} ExRaiseStatus(sdv_365);
    goto L181;

  anon161_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    FoundValidLfn := 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L67;

  anon162_Then:
    goto L172;

  anon159_Then:
    assume {:partition} FoundValidLfn == 0;
    goto L169;

  anon157_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc vslice_dummy_var_7492;
    call {:si_unique_call 1378} Fat8dot3ToString(IrpContext_52, vslice_dummy_var_7492, 0, Name_2);
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto L210;

  L210:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc vslice_dummy_var_7493;
    call {:si_unique_call 1379} sdv_362 := FatIsNameInExpression(IrpContext_52, vslice_dummy_var_7493, Name_2);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} sdv_362 != 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 1;
    goto L38;

  anon172_Then:
    assume {:partition} FileNameDos == 0;
    goto L38;

  anon171_Then:
    assume {:partition} sdv_362 == 0;
    goto L168;

  anon170_Then:
    goto L210;

  anon169_Then:
    goto L210;

  anon168_Then:
    goto L210;

  anon167_Then:
    goto L210;

  anon158_Then:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1015;
    assume {:nonnull} Tmp_1015 != 0;
    assume Tmp_1015 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1020;
    Tmp_991 := Tmp_1020;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1033;
    assume {:nonnull} Tmp_1033 != 0;
    assume Tmp_1033 > 0;
    havoc Tmp_1036;
    Tmp_990 := Tmp_1036;
    assume {:nonnull} Tmp_990 != 0;
    assume Tmp_990 > 0;
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[Tmp_991] == Mem_T.INT4[Tmp_990];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1026;
    Tmp_975 := Tmp_1026 + 4 * 4;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_994;
    assume {:nonnull} Tmp_994 != 0;
    assume Tmp_994 > 0;
    havoc Tmp_1003;
    Tmp_1014 := Tmp_1003 + 4 * 4;
    assume {:nonnull} Tmp_1014 != 0;
    assume Tmp_1014 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} Mem_T.INT4[Tmp_975] == Mem_T.INT4[Tmp_1014];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1008;
    Tmp_1019 := Tmp_1008 + 8 * 4;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1031;
    assume {:nonnull} Tmp_1031 != 0;
    assume Tmp_1031 > 0;
    havoc Tmp_983;
    Tmp_987 := Tmp_983 + 8 * 4;
    assume {:nonnull} Tmp_1019 != 0;
    assume Tmp_1019 > 0;
    assume {:nonnull} Tmp_987 != 0;
    assume Tmp_987 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} Mem_T.INT4[Tmp_1019] == Mem_T.INT4[Tmp_987];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_977;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1040;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    havoc Tmp_1012;
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} Tmp_977 != 0;
    assume Tmp_977 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} Mem_T.INT4[Tmp_977 + 10 * 4] == Mem_T.INT4[Tmp_1012 + 10 * 4];
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 1;
    goto L38;

  anon173_Then:
    assume {:partition} FileNameDos == 0;
    goto L38;

  anon192_Then:
    assume {:partition} Mem_T.INT4[Tmp_977 + 10 * 4] != Mem_T.INT4[Tmp_1012 + 10 * 4];
    goto L168;

  anon191_Then:
    assume {:partition} Mem_T.INT4[Tmp_1019] != Mem_T.INT4[Tmp_987];
    goto L168;

  anon190_Then:
    assume {:partition} Mem_T.INT4[Tmp_975] != Mem_T.INT4[Tmp_1014];
    goto L168;

  anon189_Then:
    assume {:partition} Mem_T.INT4[Tmp_991] != Mem_T.INT4[Tmp_990];
    goto L168;

  anon188_Then:
    goto L168;

  anon156_Then:
    goto L38;

  anon155_Then:
    assume {:partition} sdv_361 != LfnChecksum;
    goto L155;

  L155:
    FoundValidLfn := 0;
    goto L164;

  anon154_Then:
    assume {:partition} LfnIndex != 0;
    goto L155;

  anon153_Then:
    assume {:partition} Mem_T.INT4[ByteOffset] != LfnByteOffset + 32;
    goto L155;

  anon151_Then:
    assume {:partition} LfnInProgress == 0;
    goto L155;

  anon138_Then:
    assume {:partition} LongFileName == 0;
    goto L69;

  anon137_Then:
    goto L69;

  anon178_Then:
    assume {:partition} Mem_T.INT4[Tmp_1027] == 0;
    goto L55;

  anon177_Then:
    goto L46;

  anon133_Then:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} INTMOD(Mem_T.INT4[ByteOffset], 4096) != 0;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L228;

  L228:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L230;

  L230:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Tmp_1035 := BAND(Mem_T.INT4[ByteOffset], BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    call {:si_unique_call 1380} FatReadDirectoryFile#0(IrpContext_52, ParentDirectory, Tmp_1035, 4096, 0, Bcb_9, Dirent_5, Status_13);
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L46;

  anon174_Then:
    goto L230;

  anon175_Then:
    goto L46;

  anon134_Then:
    assume {:partition} INTMOD(Mem_T.INT4[ByteOffset], 4096) == 0;
    goto L228;

  anon132_Then:
    assume {:partition} FileNameDos == 0;
    goto L35;

  anon129_Then:
    assume {:partition} LongFileName == 0;
    goto L33;

  anon130_Then:
    assume {:partition} INTDIV(OffsetToStartSearchFrom, 4096) != INTDIV(Mem_T.INT4[ByteOffset], 4096);
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L25;

  anon131_Then:
    goto L25;

  anon176_Then:
    goto L25;
}



procedure {:origName "FatLocateDirent"} FatLocateDirent#0(actual_IrpContext_52: int, actual_ParentDirectory: int, actual_Ccb_4: int, actual_OffsetToStartSearchFrom: int, actual_Dirent_5: int, actual_Bcb_9: int, actual_ByteOffset: int, actual_FileNameDos: int, actual_LongFileName: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatLocateDirent"} FatLocateDirent#1(actual_IrpContext_52: int, actual_ParentDirectory: int, actual_Ccb_4: int, actual_OffsetToStartSearchFrom: int, actual_Dirent_5: int, actual_Bcb_9: int, actual_ByteOffset: int, actual_FileNameDos: int, actual_LongFileName: int)
{
  var {:scalar} LfnInProgress: int;
  var {:pointer} Tmp_975: int;
  var {:scalar} Ordinal: int;
  var {:scalar} LfnByteOffset: int;
  var {:pointer} Tmp_976: int;
  var {:pointer} Tmp_977: int;
  var {:scalar} Tmp_978: int;
  var {:pointer} Tmp_979: int;
  var {:pointer} Tmp_980: int;
  var {:pointer} Tmp_982: int;
  var {:pointer} Tmp_983: int;
  var {:scalar} LfnChecksum: int;
  var {:pointer} Tmp_984: int;
  var {:pointer} Tmp_987: int;
  var {:scalar} Tmp_988: int;
  var {:scalar} Tmp_989: int;
  var {:pointer} Tmp_990: int;
  var {:pointer} Tmp_991: int;
  var {:scalar} LfnIndex: int;
  var {:pointer} Tmp_992: int;
  var {:pointer} Tmp_993: int;
  var {:scalar} LfnSize: int;
  var {:pointer} Lfn_2: int;
  var {:scalar} sdv_361: int;
  var {:pointer} Tmp_994: int;
  var {:pointer} Tmp_995: int;
  var {:scalar} Tmp_997: int;
  var {:scalar} Tmp_998: int;
  var {:dopa} {:scalar} Status_13: int;
  var {:pointer} Tmp_999: int;
  var {:pointer} Tmp_1000: int;
  var {:scalar} Tmp_1001: int;
  var {:scalar} sdv_362: int;
  var {:pointer} Tmp_1002: int;
  var {:pointer} Tmp_1003: int;
  var {:pointer} NameBuffer: int;
  var {:scalar} Tmp_1006: int;
  var {:pointer} Tmp_1008: int;
  var {:scalar} CheckTail: int;
  var {:scalar} Tmp_1009: int;
  var {:pointer} Tmp_1011: int;
  var {:scalar} UpcasedLfn: int;
  var {:pointer} Tmp_1012: int;
  var {:pointer} Tmp_1013: int;
  var {:scalar} sdv_364: int;
  var {:pointer} Tmp_1014: int;
  var {:pointer} Tmp_1015: int;
  var {:pointer} Tmp_1016: int;
  var {:scalar} FoundValidLfn: int;
  var {:pointer} Tmp_1017: int;
  var {:scalar} sdv_365: int;
  var {:scalar} sdv_366: int;
  var {:pointer} Tmp_1018: int;
  var {:pointer} Tmp_1019: int;
  var {:pointer} Tmp_1020: int;
  var {:scalar} Tmp_1023: int;
  var {:scalar} Tmp_1025: int;
  var {:pointer} Tmp_1026: int;
  var {:pointer} Tmp_1027: int;
  var {:pointer} Tmp_1028: int;
  var {:pointer} LocalLfnBuffer: int;
  var {:scalar} Tmp_1029: int;
  var {:pointer} Tmp_1031: int;
  var {:pointer} Tmp_1033: int;
  var {:scalar} Name_2: int;
  var {:pointer} Tmp_1034: int;
  var {:scalar} Tmp_1035: int;
  var {:pointer} Tmp_1036: int;
  var {:pointer} Tmp_1037: int;
  var {:scalar} Tmp_1039: int;
  var {:pointer} Tmp_1040: int;
  var {:pointer} IrpContext_52: int;
  var {:pointer} ParentDirectory: int;
  var {:pointer} Ccb_4: int;
  var {:scalar} OffsetToStartSearchFrom: int;
  var {:pointer} Dirent_5: int;
  var {:pointer} Bcb_9: int;
  var {:pointer} ByteOffset: int;
  var {:pointer} FileNameDos: int;
  var {:pointer} LongFileName: int;
  var boogieTmp: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_7494: int;
  var vslice_dummy_var_7495: int;
  var vslice_dummy_var_7496: int;
  var vslice_dummy_var_7497: int;

  anon0:
    call {:si_unique_call 1381} Status_13 := __HAVOC_malloc(4);
    call {:si_unique_call 1382} UpcasedLfn := __HAVOC_malloc(12);
    call {:si_unique_call 1383} vslice_dummy_var_246 := __HAVOC_malloc(4);
    call {:si_unique_call 1384} Name_2 := __HAVOC_malloc(12);
    IrpContext_52 := actual_IrpContext_52;
    ParentDirectory := actual_ParentDirectory;
    Ccb_4 := actual_Ccb_4;
    OffsetToStartSearchFrom := actual_OffsetToStartSearchFrom;
    Dirent_5 := actual_Dirent_5;
    Bcb_9 := actual_Bcb_9;
    ByteOffset := actual_ByteOffset;
    FileNameDos := actual_FileNameDos;
    LongFileName := actual_LongFileName;
    call {:si_unique_call 1385} Tmp_977 := __HAVOC_malloc(44);
    call {:si_unique_call 1386} Tmp_983 := __HAVOC_malloc(44);
    call {:si_unique_call 1387} Tmp_993 := __HAVOC_malloc(24);
    call {:si_unique_call 1388} Tmp_999 := __HAVOC_malloc(8);
    call {:si_unique_call 1389} Tmp_1000 := __HAVOC_malloc(40);
    call {:si_unique_call 1390} Tmp_1003 := __HAVOC_malloc(44);
    call {:si_unique_call 1391} NameBuffer := __HAVOC_malloc(48);
    call {:si_unique_call 1392} Tmp_1008 := __HAVOC_malloc(44);
    call {:si_unique_call 1393} Tmp_1011 := __HAVOC_malloc(44);
    call {:si_unique_call 1394} Tmp_1012 := __HAVOC_malloc(44);
    call {:si_unique_call 1395} Tmp_1013 := __HAVOC_malloc(40);
    call {:si_unique_call 1396} Tmp_1016 := __HAVOC_malloc(8);
    call {:si_unique_call 1397} Tmp_1020 := __HAVOC_malloc(44);
    call {:si_unique_call 1398} Tmp_1026 := __HAVOC_malloc(44);
    call {:si_unique_call 1399} Tmp_1027 := __HAVOC_malloc(44);
    call {:si_unique_call 1400} LocalLfnBuffer := __HAVOC_malloc(128);
    call {:si_unique_call 1401} Tmp_1036 := __HAVOC_malloc(44);
    call {:si_unique_call 1402} Tmp_1037 := __HAVOC_malloc(24);
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    Mem_T.INT4[Status_13] := 0;
    LfnInProgress := 0;
    call {:si_unique_call 1403} sdv_do_paged_code_check();
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} UpcasedLfn != 0;
    assume UpcasedLfn > 0;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} INTDIV(OffsetToStartSearchFrom, 4096) == INTDIV(Mem_T.INT4[ByteOffset], 4096);
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L25;

  L25:
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} LongFileName != 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L33;

  L33:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 0;
    goto L35;

  L35:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := BAND(OffsetToStartSearchFrom + 31, BNOT(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16)));
    goto L42;

  L42:
    call {:si_unique_call 1404} LfnInProgress, Tmp_975, Ordinal, LfnByteOffset, Tmp_976, Tmp_977, Tmp_978, Tmp_979, Tmp_980, Tmp_982, Tmp_983, LfnChecksum, Tmp_984, Tmp_987, Tmp_988, Tmp_989, Tmp_990, Tmp_991, LfnIndex, Tmp_992, Tmp_993, LfnSize, Lfn_2, sdv_361, Tmp_994, Tmp_995, Tmp_997, Tmp_998, Tmp_999, Tmp_1000, Tmp_1001, sdv_362, Tmp_1002, Tmp_1003, Tmp_1006, Tmp_1008, CheckTail, Tmp_1009, Tmp_1011, Tmp_1012, Tmp_1013, sdv_364, Tmp_1014, Tmp_1015, Tmp_1016, FoundValidLfn, Tmp_1017, sdv_365, sdv_366, Tmp_1018, Tmp_1019, Tmp_1020, Tmp_1023, Tmp_1025, Tmp_1026, Tmp_1027, Tmp_1028, Tmp_1029, Tmp_1031, Tmp_1033, Tmp_1034, Tmp_1035, Tmp_1036, Tmp_1037, Tmp_1039, Tmp_1040, boogieTmp := FatLocateDirent#1_loop_L42(LfnInProgress, Tmp_975, Ordinal, LfnByteOffset, Tmp_976, Tmp_977, Tmp_978, Tmp_979, Tmp_980, Tmp_982, Tmp_983, LfnChecksum, Tmp_984, Tmp_987, Tmp_988, Tmp_989, Tmp_990, Tmp_991, LfnIndex, Tmp_992, Tmp_993, LfnSize, Lfn_2, sdv_361, Tmp_994, Tmp_995, Tmp_997, Tmp_998, Status_13, Tmp_999, Tmp_1000, Tmp_1001, sdv_362, Tmp_1002, Tmp_1003, Tmp_1006, Tmp_1008, CheckTail, Tmp_1009, Tmp_1011, UpcasedLfn, Tmp_1012, Tmp_1013, sdv_364, Tmp_1014, Tmp_1015, Tmp_1016, FoundValidLfn, Tmp_1017, sdv_365, sdv_366, Tmp_1018, Tmp_1019, Tmp_1020, Tmp_1023, Tmp_1025, Tmp_1026, Tmp_1027, Tmp_1028, Tmp_1029, Tmp_1031, Tmp_1033, Name_2, Tmp_1034, Tmp_1035, Tmp_1036, Tmp_1037, Tmp_1039, Tmp_1040, IrpContext_52, ParentDirectory, Ccb_4, Dirent_5, Bcb_9, ByteOffset, LongFileName, boogieTmp);
    goto L42_last;

  L42_last:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    assume {:nonnull} ParentDirectory != 0;
    assume ParentDirectory > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    Mem_T.INT4[Status_13] := -1073741807;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L46;

  L46:
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} Mem_T.INT4[Status_13] == -1073741807;
    goto L55;

  L55:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L56;

  L56:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := 0;
    goto L38;

  L38:
    call {:si_unique_call 1405} FatFreeStringBuffer(UpcasedLfn);
    return;

  anon136_Then:
    goto L56;

  anon135_Then:
    assume {:partition} Mem_T.INT4[Status_13] != -1073741807;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_976;
    assume {:nonnull} Tmp_976 != 0;
    assume Tmp_976 > 0;
    havoc Tmp_1027;
    assume {:nonnull} Tmp_1027 != 0;
    assume Tmp_1027 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} Mem_T.INT4[Tmp_1027] != 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_995;
    assume {:nonnull} Tmp_995 != 0;
    assume Tmp_995 > 0;
    havoc Tmp_1011;
    assume {:nonnull} Tmp_1011 != 0;
    assume Tmp_1011 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} Mem_T.INT4[Tmp_1011] == 229;
    LfnInProgress := 0;
    goto L67;

  L67:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Mem_T.INT4[ByteOffset] := Mem_T.INT4[ByteOffset] + 32;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L67_dummy;

  L67_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} Mem_T.INT4[Tmp_1011] != 229;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} LongFileName != 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1018;
    assume {:nonnull} Tmp_1018 != 0;
    assume Tmp_1018 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Lfn_2;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} LfnInProgress != 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto L78;

  L78:
    LfnInProgress := 0;
    goto L75;

  L75:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} LfnInProgress == 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_978;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} 20 >= Tmp_978;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    CheckTail := 0;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Ordinal;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} Ordinal != 0;
    goto L112;

  L112:
    LfnIndex := (Ordinal - 1) * 13;
    call {:si_unique_call 1406} Tmp_988 := corral_nondet();
    call {:si_unique_call 1407} FatEnsureStringBufferEnough(LongFileName, Tmp_988);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1013;
    Tmp_989 := LfnIndex + 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1017;
    call {:si_unique_call 1408} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1037;
    Tmp_1025 := LfnIndex + 5;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_980;
    call {:si_unique_call 1409} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_999;
    Tmp_1029 := LfnIndex + 11;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1034;
    call {:si_unique_call 1410} sdv_RtlCopyMemory(0, 0, 4);
    goto L132;

  L132:
    call {:si_unique_call 1411} LfnIndex, Tmp_992, LfnSize, Tmp_998, CheckTail, Tmp_1023, Tmp_1028 := FatLocateDirent#1_loop_L132(Ordinal, LfnIndex, Tmp_992, LfnSize, Tmp_998, CheckTail, Tmp_1023, Tmp_1028, LongFileName);
    goto L132_last;

  L132_last:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} LfnIndex != Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} CheckTail != 0;
    Tmp_1023 := LfnIndex;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1028;
    assume {:nonnull} Tmp_1028 != 0;
    assume Tmp_1028 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[Tmp_1028 + Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    LfnIndex := LfnIndex + 1;
    goto L137_dummy;

  L137_dummy:
    assume false;
    return;

  anon184_Then:
    assume {:partition} Mem_T.INT4[Tmp_1028 + Tmp_1023 * 4] != 65535;
    goto L133;

  L133:
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} LfnIndex == Ordinal * 13;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} CheckTail != 0;
    goto L143;

  L143:
    LfnIndex := LfnIndex - 13;
    LfnInProgress := 1;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc LfnChecksum;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    LfnByteOffset := Mem_T.INT4[ByteOffset];
    goto L67;

  anon150_Then:
    assume {:partition} CheckTail == 0;
    LfnSize := LfnIndex;
    goto L143;

  anon148_Then:
    assume {:partition} LfnIndex != Ordinal * 13;
    goto L67;

  anon149_Then:
    assume {:partition} CheckTail == 0;
    Tmp_998 := LfnIndex;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_992;
    assume {:nonnull} Tmp_992 != 0;
    assume Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[Tmp_992 + Tmp_998 * 4] == 0;
    LfnSize := LfnIndex;
    CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[Tmp_992 + Tmp_998 * 4] != 0;
    goto L137;

  anon147_Then:
    assume {:partition} LfnIndex == Ordinal * 13;
    goto L133;

  anon183_Then:
    assume {:partition} Ordinal == 0;
    call {:si_unique_call 1412} FatPopUpFileCorrupt#0(IrpContext_52, ParentDirectory);
    assume {:nonnull} IrpContext_52 != 0;
    assume IrpContext_52 > 0;
    call {:si_unique_call 1413} ExRaiseStatus(-1073741566);
    goto L112;

  anon146_Then:
    goto L67;

  anon182_Then:
    assume {:partition} Tmp_978 > 20;
    goto L67;

  anon145_Then:
    goto L67;

  anon139_Then:
    assume {:partition} LfnInProgress != 0;
    goto L67;

  anon140_Then:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    LfnIndex := LfnIndex - 13;
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1000;
    Tmp_997 := LfnIndex + 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_979;
    call {:si_unique_call 1414} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_993;
    Tmp_1039 := LfnIndex + 5;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_1002;
    call {:si_unique_call 1415} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Tmp_1016;
    Tmp_1001 := LfnIndex + 11;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc Tmp_984;
    call {:si_unique_call 1416} sdv_RtlCopyMemory(0, 0, 4);
    assume {:nonnull} Lfn_2 != 0;
    assume Lfn_2 > 0;
    havoc Ordinal;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    LfnByteOffset := Mem_T.INT4[ByteOffset];
    goto L75;

  anon144_Then:
    goto L78;

  anon143_Then:
    goto L78;

  anon142_Then:
    goto L78;

  anon141_Then:
    goto L78;

  anon181_Then:
    assume {:partition} LfnInProgress == 0;
    goto L75;

  anon180_Then:
    goto L69;

  L69:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_982;
    assume {:nonnull} Tmp_982 != 0;
    assume Tmp_982 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    goto L67;

  anon152_Then:
    goto L38;

  anon186_Then:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} LfnInProgress != 0;
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} Mem_T.INT4[ByteOffset] == LfnByteOffset + 32;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} LfnIndex == 0;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc vslice_dummy_var_7494;
    call {:si_unique_call 1417} sdv_361 := FatComputeLfnChecksum(vslice_dummy_var_7494);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} sdv_361 == LfnChecksum;
    FoundValidLfn := 1;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L164;

  L164:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    goto L168;

  L168:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} FoundValidLfn != 0;
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    goto L172;

  L172:
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    havoc vslice_dummy_var_7495;
    call {:si_unique_call 1418} FatEnsureStringBufferEnough(UpcasedLfn, vslice_dummy_var_7495);
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    call {:si_unique_call 1419} boogieTmp := RtlUpcaseUnicodeString(0, 0, 0);
    Mem_T.INT4[Status_13] := boogieTmp;
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[Status_13] >= 0;
    goto L181;

  L181:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    call {:si_unique_call 1420} sdv_364 := FsRtlIsNameInExpression(0, 0, 1, 0);
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} sdv_364 == 0;
    goto L169;

  L169:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} FoundValidLfn != 0;
    FoundValidLfn := 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L67;

  anon160_Then:
    assume {:partition} FoundValidLfn == 0;
    goto L67;

  anon165_Then:
    assume {:partition} sdv_364 != 0;
    goto L38;

  anon164_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1009;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} Tmp_1009 == 0;
    Tmp_1006 := 0;
    goto L387;

  L387:
    call {:si_unique_call 1421} sdv_366 := FsRtlAreNamesEqual(0, 0, Tmp_1006, 0);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} sdv_366 == 0;
    goto L169;

  anon166_Then:
    assume {:partition} sdv_366 != 0;
    goto L38;

  anon187_Then:
    assume {:partition} Tmp_1009 != 0;
    Tmp_1006 := 1;
    goto L387;

  anon163_Then:
    assume {:partition} 0 > Mem_T.INT4[Status_13];
    assume {:nonnull} IrpContext_52 != 0;
    assume IrpContext_52 > 0;
    assume {:nonnull} Status_13 != 0;
    assume Status_13 > 0;
    call {:si_unique_call 1422} sdv_365 := corral_nondet();
    call {:si_unique_call 1423} ExRaiseStatus(sdv_365);
    goto L181;

  anon161_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    FoundValidLfn := 0;
    assume {:nonnull} LongFileName != 0;
    assume LongFileName > 0;
    goto L67;

  anon162_Then:
    goto L172;

  anon159_Then:
    assume {:partition} FoundValidLfn == 0;
    goto L169;

  anon157_Then:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc vslice_dummy_var_7496;
    call {:si_unique_call 1424} Fat8dot3ToString(IrpContext_52, vslice_dummy_var_7496, 0, Name_2);
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} Name_2 != 0;
    assume Name_2 > 0;
    goto L210;

  L210:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc vslice_dummy_var_7497;
    call {:si_unique_call 1425} sdv_362 := FatIsNameInExpression(IrpContext_52, vslice_dummy_var_7497, Name_2);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} sdv_362 != 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 1;
    goto L38;

  anon172_Then:
    assume {:partition} FileNameDos == 0;
    goto L38;

  anon171_Then:
    assume {:partition} sdv_362 == 0;
    goto L168;

  anon170_Then:
    goto L210;

  anon169_Then:
    goto L210;

  anon168_Then:
    goto L210;

  anon167_Then:
    goto L210;

  anon158_Then:
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1015;
    assume {:nonnull} Tmp_1015 != 0;
    assume Tmp_1015 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1020;
    Tmp_991 := Tmp_1020;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1033;
    assume {:nonnull} Tmp_1033 != 0;
    assume Tmp_1033 > 0;
    havoc Tmp_1036;
    Tmp_990 := Tmp_1036;
    assume {:nonnull} Tmp_990 != 0;
    assume Tmp_990 > 0;
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[Tmp_991] == Mem_T.INT4[Tmp_990];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1026;
    Tmp_975 := Tmp_1026 + 4 * 4;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_994;
    assume {:nonnull} Tmp_994 != 0;
    assume Tmp_994 > 0;
    havoc Tmp_1003;
    Tmp_1014 := Tmp_1003 + 4 * 4;
    assume {:nonnull} Tmp_1014 != 0;
    assume Tmp_1014 > 0;
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} Mem_T.INT4[Tmp_975] == Mem_T.INT4[Tmp_1014];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_1008;
    Tmp_1019 := Tmp_1008 + 8 * 4;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1031;
    assume {:nonnull} Tmp_1031 != 0;
    assume Tmp_1031 > 0;
    havoc Tmp_983;
    Tmp_987 := Tmp_983 + 8 * 4;
    assume {:nonnull} Tmp_1019 != 0;
    assume Tmp_1019 > 0;
    assume {:nonnull} Tmp_987 != 0;
    assume Tmp_987 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} Mem_T.INT4[Tmp_1019] == Mem_T.INT4[Tmp_987];
    assume {:nonnull} Ccb_4 != 0;
    assume Ccb_4 > 0;
    havoc Tmp_977;
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    havoc Tmp_1040;
    assume {:nonnull} Tmp_1040 != 0;
    assume Tmp_1040 > 0;
    havoc Tmp_1012;
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} Tmp_977 != 0;
    assume Tmp_977 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} Mem_T.INT4[Tmp_977 + 10 * 4] == Mem_T.INT4[Tmp_1012 + 10 * 4];
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} FileNameDos != 0;
    assume {:nonnull} FileNameDos != 0;
    assume FileNameDos > 0;
    Mem_T.INT4[FileNameDos] := 1;
    goto L38;

  anon173_Then:
    assume {:partition} FileNameDos == 0;
    goto L38;

  anon192_Then:
    assume {:partition} Mem_T.INT4[Tmp_977 + 10 * 4] != Mem_T.INT4[Tmp_1012 + 10 * 4];
    goto L168;

  anon191_Then:
    assume {:partition} Mem_T.INT4[Tmp_1019] != Mem_T.INT4[Tmp_987];
    goto L168;

  anon190_Then:
    assume {:partition} Mem_T.INT4[Tmp_975] != Mem_T.INT4[Tmp_1014];
    goto L168;

  anon189_Then:
    assume {:partition} Mem_T.INT4[Tmp_991] != Mem_T.INT4[Tmp_990];
    goto L168;

  anon188_Then:
    goto L168;

  anon156_Then:
    goto L38;

  anon155_Then:
    assume {:partition} sdv_361 != LfnChecksum;
    goto L155;

  L155:
    FoundValidLfn := 0;
    goto L164;

  anon154_Then:
    assume {:partition} LfnIndex != 0;
    goto L155;

  anon153_Then:
    assume {:partition} Mem_T.INT4[ByteOffset] != LfnByteOffset + 32;
    goto L155;

  anon151_Then:
    assume {:partition} LfnInProgress == 0;
    goto L155;

  anon138_Then:
    assume {:partition} LongFileName == 0;
    goto L69;

  anon137_Then:
    goto L69;

  anon178_Then:
    assume {:partition} Mem_T.INT4[Tmp_1027] == 0;
    goto L55;

  anon177_Then:
    goto L46;

  anon133_Then:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} INTMOD(Mem_T.INT4[ByteOffset], 4096) != 0;
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L228;

  L228:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L230;

  L230:
    assume {:nonnull} ByteOffset != 0;
    assume ByteOffset > 0;
    Tmp_1035 := BAND(Mem_T.INT4[ByteOffset], BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    call {:si_unique_call 1426} FatReadDirectoryFile#1(IrpContext_52, ParentDirectory, Tmp_1035, 4096, 0, Bcb_9, Dirent_5, Status_13);
    assume {:nonnull} Dirent_5 != 0;
    assume Dirent_5 > 0;
    goto L46;

  anon174_Then:
    goto L230;

  anon175_Then:
    goto L46;

  anon134_Then:
    assume {:partition} INTMOD(Mem_T.INT4[ByteOffset], 4096) == 0;
    goto L228;

  anon132_Then:
    assume {:partition} FileNameDos == 0;
    goto L35;

  anon129_Then:
    assume {:partition} LongFileName == 0;
    goto L33;

  anon130_Then:
    assume {:partition} INTDIV(OffsetToStartSearchFrom, 4096) != INTDIV(Mem_T.INT4[ByteOffset], 4096);
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:nonnull} Bcb_9 != 0;
    assume Bcb_9 > 0;
    goto L25;

  anon131_Then:
    goto L25;

  anon176_Then:
    goto L25;
}



procedure {:origName "FatLocateDirent"} FatLocateDirent#1(actual_IrpContext_52: int, actual_ParentDirectory: int, actual_Ccb_4: int, actual_OffsetToStartSearchFrom: int, actual_Dirent_5: int, actual_Bcb_9: int, actual_ByteOffset: int, actual_FileNameDos: int, actual_LongFileName: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatReadDirectoryFile"} FatReadDirectoryFile#0(actual_IrpContext_25: int, actual_Dcb_1: int, actual_StartingVbo_1: int, actual_ByteCount_5: int, actual_Pin: int, actual_Bcb_4: int, actual_Buffer_2: int, actual_Status_3: int)
{
  var {:scalar} Vbo_3: int;
  var {:scalar} sdv_264: int;
  var {:scalar} Tmp_669: int;
  var {:scalar} Tmp_670: int;
  var {:scalar} sdv_265: int;
  var {:scalar} Tmp_671: int;
  var {:scalar} Tmp_672: int;
  var {:pointer} IrpContext_25: int;
  var {:pointer} Dcb_1: int;
  var {:scalar} StartingVbo_1: int;
  var {:scalar} ByteCount_5: int;
  var {:scalar} Pin: int;
  var {:pointer} Bcb_4: int;
  var {:pointer} Buffer_2: int;
  var {:pointer} Status_3: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 1427} Vbo_3 := __HAVOC_malloc(20);
    call {:si_unique_call 1428} vslice_dummy_var_247 := __HAVOC_malloc(4);
    IrpContext_25 := actual_IrpContext_25;
    Dcb_1 := actual_Dcb_1;
    StartingVbo_1 := actual_StartingVbo_1;
    ByteCount_5 := actual_ByteCount_5;
    Pin := actual_Pin;
    Bcb_4 := actual_Bcb_4;
    Buffer_2 := actual_Buffer_2;
    Status_3 := actual_Status_3;
    call {:si_unique_call 1429} sdv_do_paged_code_check();
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} ByteCount_5 != 0;
    call {:si_unique_call 1430} FatOpenDirectoryFile#0(IrpContext_25, Dcb_1);
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := -1073741807;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    havoc Tmp_670;
    goto L20;

  L20:
    ByteCount_5 := Tmp_670;
    assume {:nonnull} Vbo_3 != 0;
    assume Vbo_3 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Pin != 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    Tmp_669 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_25)], 2);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Tmp_669 == 0;
    goto L58;

  L58:
    call {:si_unique_call 1431} sdv_264 := corral_nondet();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_264 != 0;
    Tmp_672 := 0;
    goto L61;

  L61:
    goto L30;

  L30:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_672 != 0;
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    call {:si_unique_call 1432} ExRaiseStatus(-1073741608);
    goto L31;

  L31:
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := 0;
    goto L1;

  anon23_Then:
    assume {:partition} Tmp_672 == 0;
    goto L31;

  anon22_Then:
    assume {:partition} sdv_264 == 0;
    Tmp_672 := 1;
    goto L61;

  anon26_Then:
    assume {:partition} Tmp_669 != 0;
    goto L58;

  anon25_Then:
    assume {:partition} Pin == 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    Tmp_671 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_25)], 2);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Tmp_671 == 0;
    goto L69;

  L69:
    call {:si_unique_call 1433} sdv_265 := corral_nondet();
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_265 != 0;
    Tmp_672 := 0;
    goto L72;

  L72:
    goto L30;

  anon24_Then:
    assume {:partition} sdv_265 == 0;
    Tmp_672 := 1;
    goto L72;

  anon27_Then:
    assume {:partition} Tmp_671 != 0;
    goto L69;

  anon21_Then:
    Tmp_670 := ByteCount_5;
    goto L20;

  anon19_Then:
    assume {:partition} ByteCount_5 == 0;
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := 0;
    goto L1;
}



procedure {:origName "FatReadDirectoryFile"} FatReadDirectoryFile#0(actual_IrpContext_25: int, actual_Dcb_1: int, actual_StartingVbo_1: int, actual_ByteCount_5: int, actual_Pin: int, actual_Bcb_4: int, actual_Buffer_2: int, actual_Status_3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatReadDirectoryFile"} FatReadDirectoryFile#1(actual_IrpContext_25: int, actual_Dcb_1: int, actual_StartingVbo_1: int, actual_ByteCount_5: int, actual_Pin: int, actual_Bcb_4: int, actual_Buffer_2: int, actual_Status_3: int)
{
  var {:scalar} Vbo_3: int;
  var {:scalar} sdv_264: int;
  var {:scalar} Tmp_669: int;
  var {:scalar} Tmp_670: int;
  var {:scalar} sdv_265: int;
  var {:scalar} Tmp_671: int;
  var {:scalar} Tmp_672: int;
  var {:pointer} IrpContext_25: int;
  var {:pointer} Dcb_1: int;
  var {:scalar} StartingVbo_1: int;
  var {:scalar} ByteCount_5: int;
  var {:scalar} Pin: int;
  var {:pointer} Bcb_4: int;
  var {:pointer} Buffer_2: int;
  var {:pointer} Status_3: int;
  var vslice_dummy_var_248: int;

  anon0:
    call {:si_unique_call 1434} Vbo_3 := __HAVOC_malloc(20);
    call {:si_unique_call 1435} vslice_dummy_var_248 := __HAVOC_malloc(4);
    IrpContext_25 := actual_IrpContext_25;
    Dcb_1 := actual_Dcb_1;
    StartingVbo_1 := actual_StartingVbo_1;
    ByteCount_5 := actual_ByteCount_5;
    Pin := actual_Pin;
    Bcb_4 := actual_Bcb_4;
    Buffer_2 := actual_Buffer_2;
    Status_3 := actual_Status_3;
    call {:si_unique_call 1436} sdv_do_paged_code_check();
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} ByteCount_5 != 0;
    call {:si_unique_call 1437} FatOpenDirectoryFile#1(IrpContext_25, Dcb_1);
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := -1073741807;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Dcb_1 != 0;
    assume Dcb_1 > 0;
    havoc Tmp_670;
    goto L20;

  L20:
    ByteCount_5 := Tmp_670;
    assume {:nonnull} Vbo_3 != 0;
    assume Vbo_3 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Pin != 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    Tmp_669 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_25)], 2);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Tmp_669 == 0;
    goto L58;

  L58:
    call {:si_unique_call 1438} sdv_264 := corral_nondet();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_264 != 0;
    Tmp_672 := 0;
    goto L61;

  L61:
    goto L30;

  L30:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_672 != 0;
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    call {:si_unique_call 1439} ExRaiseStatus(-1073741608);
    goto L31;

  L31:
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := 0;
    goto L1;

  anon23_Then:
    assume {:partition} Tmp_672 == 0;
    goto L31;

  anon22_Then:
    assume {:partition} sdv_264 == 0;
    Tmp_672 := 1;
    goto L61;

  anon26_Then:
    assume {:partition} Tmp_669 != 0;
    goto L58;

  anon25_Then:
    assume {:partition} Pin == 0;
    assume {:nonnull} IrpContext_25 != 0;
    assume IrpContext_25 > 0;
    Tmp_671 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_25)], 2);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Tmp_671 == 0;
    goto L69;

  L69:
    call {:si_unique_call 1440} sdv_265 := corral_nondet();
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_265 != 0;
    Tmp_672 := 0;
    goto L72;

  L72:
    goto L30;

  anon24_Then:
    assume {:partition} sdv_265 == 0;
    Tmp_672 := 1;
    goto L72;

  anon27_Then:
    assume {:partition} Tmp_671 != 0;
    goto L69;

  anon21_Then:
    Tmp_670 := ByteCount_5;
    goto L20;

  anon19_Then:
    assume {:partition} ByteCount_5 == 0;
    assume {:nonnull} Bcb_4 != 0;
    assume Bcb_4 > 0;
    assume {:nonnull} Buffer_2 != 0;
    assume Buffer_2 > 0;
    assume {:nonnull} Status_3 != 0;
    assume Status_3 > 0;
    Mem_T.INT4[Status_3] := 0;
    goto L1;
}



procedure {:origName "FatReadDirectoryFile"} FatReadDirectoryFile#1(actual_IrpContext_25: int, actual_Dcb_1: int, actual_StartingVbo_1: int, actual_ByteCount_5: int, actual_Pin: int, actual_Bcb_4: int, actual_Buffer_2: int, actual_Status_3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCheckForDismount"} FatCheckForDismount#0(actual_IrpContext_9: int, actual_Vcb_3: int, actual_Force: int) returns (Tmp_73: int)
{
  var {:scalar} SavedIrql: int;
  var {:pointer} Vpb: int;
  var {:pointer} Tmp_74: int;
  var {:pointer} sdv_26: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} Tmp_76: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} VcbDeleted: int;
  var {:pointer} IrpContext_9: int;
  var {:pointer} Vcb_3: int;
  var {:scalar} Force: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;

  anon0:
    IrpContext_9 := actual_IrpContext_9;
    Vcb_3 := actual_Vcb_3;
    Force := actual_Force;
    VcbDeleted := 0;
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Force == 0;
    Tmp_73 := 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} Force != 0;
    goto L8;

  L8:
    call {:si_unique_call 1441} Tmp_75 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    Mem_T.INT4[Tmp_75] := SavedIrql;
    call {:si_unique_call 1442} IoAcquireVpbSpinLock(Tmp_75);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    SavedIrql := Mem_T.INT4[Tmp_75];
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Tmp_77;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Vpb;
    call {:si_unique_call 1443} vslice_dummy_var_250 := FatSwapVpb(IrpContext_9, Vcb_3);
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    call {:si_unique_call 1444} IoReleaseVpbSpinLock(SavedIrql);
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)], 524288);
    call {:si_unique_call 1445} FatTearDownVcb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1446} FatFspClose#0(Vcb_3);
    call {:si_unique_call 1447} Tmp_75 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    Mem_T.INT4[Tmp_75] := SavedIrql;
    call {:si_unique_call 1448} IoAcquireVpbSpinLock(Tmp_75);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    SavedIrql := Mem_T.INT4[Tmp_75];
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Tmp_74;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L38;

  L38:
    call {:si_unique_call 1449} IoReleaseVpbSpinLock(SavedIrql);
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)], BNOT(524288));
    goto L42;

  L42:
    Tmp_73 := VcbDeleted;
    goto L1;

  anon21_Then:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    call {:si_unique_call 1450} IoReleaseVpbSpinLock(SavedIrql);
    call {:si_unique_call 1451} FatDeleteVcb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1452} sdv_26 := sdv_containing_record(Vcb_3, 248);
    Tmp_76 := sdv_26;
    call {:si_unique_call 1453} IoDeleteDevice(Tmp_76);
    VcbDeleted := 1;
    goto L42;

  anon18_Then:
    goto L38;

  anon17_Then:
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Force != 0;
    call {:si_unique_call 1454} vslice_dummy_var_249 := FatSwapVpb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1455} IoReleaseVpbSpinLock(SavedIrql);
    goto L42;

  anon16_Then:
    assume {:partition} Force == 0;
    call {:si_unique_call 1456} IoReleaseVpbSpinLock(SavedIrql);
    goto L42;

  anon20_Then:
    goto L14;

  anon19_Then:
    goto L8;
}



procedure {:origName "FatCheckForDismount"} FatCheckForDismount#0(actual_IrpContext_9: int, actual_Vcb_3: int, actual_Force: int) returns (Tmp_73: int);
  modifies alloc, Mem_T.INT4, Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} Tmp_73 == 0 || Tmp_73 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCheckForDismount"} FatCheckForDismount#1(actual_IrpContext_9: int, actual_Vcb_3: int, actual_Force: int) returns (Tmp_73: int)
{
  var {:scalar} SavedIrql: int;
  var {:pointer} Vpb: int;
  var {:pointer} Tmp_74: int;
  var {:pointer} sdv_26: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} Tmp_76: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} VcbDeleted: int;
  var {:pointer} IrpContext_9: int;
  var {:pointer} Vcb_3: int;
  var {:scalar} Force: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;

  anon0:
    IrpContext_9 := actual_IrpContext_9;
    Vcb_3 := actual_Vcb_3;
    Force := actual_Force;
    VcbDeleted := 0;
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Force == 0;
    Tmp_73 := 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} Force != 0;
    goto L8;

  L8:
    call {:si_unique_call 1457} Tmp_75 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    Mem_T.INT4[Tmp_75] := SavedIrql;
    call {:si_unique_call 1458} IoAcquireVpbSpinLock(Tmp_75);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    SavedIrql := Mem_T.INT4[Tmp_75];
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Tmp_77;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Vpb;
    call {:si_unique_call 1459} vslice_dummy_var_252 := FatSwapVpb(IrpContext_9, Vcb_3);
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    call {:si_unique_call 1460} IoReleaseVpbSpinLock(SavedIrql);
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)], 524288);
    call {:si_unique_call 1461} FatTearDownVcb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1462} FatFspClose#1(Vcb_3);
    call {:si_unique_call 1463} Tmp_75 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    Mem_T.INT4[Tmp_75] := SavedIrql;
    call {:si_unique_call 1464} IoAcquireVpbSpinLock(Tmp_75);
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    SavedIrql := Mem_T.INT4[Tmp_75];
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    havoc Tmp_74;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L38;

  L38:
    call {:si_unique_call 1465} IoReleaseVpbSpinLock(SavedIrql);
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_3)], BNOT(524288));
    goto L42;

  L42:
    Tmp_73 := VcbDeleted;
    goto L1;

  anon21_Then:
    assume {:nonnull} Vcb_3 != 0;
    assume Vcb_3 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Vpb != 0;
    assume Vpb > 0;
    call {:si_unique_call 1466} IoReleaseVpbSpinLock(SavedIrql);
    call {:si_unique_call 1467} FatDeleteVcb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1468} sdv_26 := sdv_containing_record(Vcb_3, 248);
    Tmp_76 := sdv_26;
    call {:si_unique_call 1469} IoDeleteDevice(Tmp_76);
    VcbDeleted := 1;
    goto L42;

  anon18_Then:
    goto L38;

  anon17_Then:
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Force != 0;
    call {:si_unique_call 1470} vslice_dummy_var_251 := FatSwapVpb(IrpContext_9, Vcb_3);
    call {:si_unique_call 1471} IoReleaseVpbSpinLock(SavedIrql);
    goto L42;

  anon16_Then:
    assume {:partition} Force == 0;
    call {:si_unique_call 1472} IoReleaseVpbSpinLock(SavedIrql);
    goto L42;

  anon20_Then:
    goto L14;

  anon19_Then:
    goto L8;
}



procedure {:origName "FatCheckForDismount"} FatCheckForDismount#1(actual_IrpContext_9: int, actual_Vcb_3: int, actual_Force: int) returns (Tmp_73: int);
  modifies alloc, Mem_T.INT4, Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} Tmp_73 == 0 || Tmp_73 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFspClose"} FatFspClose#0(actual_Vcb_47: int)
{
  var {:scalar} sdv_426: int;
  var {:pointer} sdv_427: int;
  var {:pointer} LastVcb: int;
  var {:scalar} FreeContext: int;
  var {:pointer} CurrentVcb: int;
  var {:pointer} Tmp_1160: int;
  var {:scalar} sdv_431: int;
  var {:scalar} LoopsWithVcbHeld: int;
  var {:pointer} CloseContext_1: int;
  var {:pointer} Vcb_47: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_7498: int;
  var vslice_dummy_var_7499: int;
  var vslice_dummy_var_7500: int;

  anon0:
    call {:si_unique_call 1473} vslice_dummy_var_253 := __HAVOC_malloc(4);
    Vcb_47 := actual_Vcb_47;
    CurrentVcb := 0;
    LastVcb := 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Vcb_47 != 0;
    goto L14;

  L14:
    call {:si_unique_call 1474} sdv_426, sdv_427, LastVcb, FreeContext, CurrentVcb, Tmp_1160, sdv_431, LoopsWithVcbHeld, CloseContext_1, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256 := FatFspClose#0_loop_L14(sdv_426, sdv_427, LastVcb, FreeContext, CurrentVcb, Tmp_1160, sdv_431, LoopsWithVcbHeld, CloseContext_1, Vcb_47, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256);
    goto L14_last;

  L14_last:
    call {:si_unique_call 1487} CloseContext_1 := FatRemoveClose(Vcb_47, LastVcb);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} CloseContext_1 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Vcb_47 != 0;
    goto L22;

  L22:
    LastVcb := CurrentVcb;
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc FreeContext;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} FreeContext != 0;
    Tmp_1160 := 0;
    goto L29;

  L29:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc vslice_dummy_var_7498;
    havoc vslice_dummy_var_7499;
    havoc vslice_dummy_var_7500;
    call {:si_unique_call 1475} vslice_dummy_var_254 := FatCommonClose#0(vslice_dummy_var_7498, vslice_dummy_var_7499, Tmp_1160, vslice_dummy_var_7500, 1, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} FreeContext != 0;
    call {:si_unique_call 1476} sdv_ExFreePool(0);
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} FreeContext == 0;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} FreeContext == 0;
    call {:si_unique_call 1477} sdv_427 := sdv_containing_record(CloseContext_1, 12);
    Tmp_1160 := sdv_427;
    goto L29;

  anon31_Then:
    assume {:partition} Vcb_47 == 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1478} ExReleaseResourceLite(0);
    CurrentVcb := 0;
    goto L22;

  anon35_Then:
    assume {:partition} CurrentVcb == 0;
    goto L22;

  anon32_Then:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    LoopsWithVcbHeld := 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1479} ExReleaseResourceLite(0);
    goto L53;

  L53:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc CurrentVcb;
    call {:si_unique_call 1480} vslice_dummy_var_256 := ExAcquireResourceExclusiveLite(0, 1);
    goto L60;

  L60:
    assume {:nonnull} CurrentVcb != 0;
    assume CurrentVcb > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1481} ExReleaseResourceLite(0);
    CurrentVcb := 0;
    goto L22;

  anon36_Then:
    goto L22;

  anon41_Then:
    assume {:partition} CurrentVcb == 0;
    goto L53;

  anon34_Then:
    LoopsWithVcbHeld := LoopsWithVcbHeld + 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} LoopsWithVcbHeld >= 20;
    call {:si_unique_call 1482} sdv_431 := ExGetSharedWaiterCount(0);
    call {:si_unique_call 1483} sdv_426 := ExGetExclusiveWaiterCount(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_431 + sdv_426 != 0;
    call {:si_unique_call 1484} ExReleaseResourceLite(0);
    call {:si_unique_call 1485} vslice_dummy_var_255 := ExAcquireResourceExclusiveLite(0, 1);
    goto L72;

  L72:
    LoopsWithVcbHeld := 0;
    goto L60;

  anon37_Then:
    assume {:partition} sdv_431 + sdv_426 == 0;
    goto L72;

  anon42_Then:
    assume {:partition} 20 > LoopsWithVcbHeld;
    goto L60;

  anon29_Then:
    assume {:partition} CloseContext_1 == 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1486} ExReleaseResourceLite(0);
    goto L79;

  L79:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Vcb_47 == 0;
    goto L1;

  L1:
    return;

  anon38_Then:
    assume {:partition} Vcb_47 != 0;
    goto L1;

  anon30_Then:
    assume {:partition} CurrentVcb == 0;
    goto L79;

  anon39_Then:
    assume {:partition} Vcb_47 == 0;
    goto L14;
}



procedure {:origName "FatFspClose"} FatFspClose#0(actual_Vcb_47: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.VcbState__VCB, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatFspClose"} FatFspClose#1(actual_Vcb_47: int)
{
  var {:scalar} sdv_426: int;
  var {:pointer} sdv_427: int;
  var {:pointer} LastVcb: int;
  var {:scalar} FreeContext: int;
  var {:pointer} CurrentVcb: int;
  var {:pointer} Tmp_1160: int;
  var {:scalar} sdv_431: int;
  var {:scalar} LoopsWithVcbHeld: int;
  var {:pointer} CloseContext_1: int;
  var {:pointer} Vcb_47: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_7501: int;
  var vslice_dummy_var_7502: int;
  var vslice_dummy_var_7503: int;

  anon0:
    call {:si_unique_call 1488} vslice_dummy_var_257 := __HAVOC_malloc(4);
    Vcb_47 := actual_Vcb_47;
    CurrentVcb := 0;
    LastVcb := 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Vcb_47 != 0;
    goto L14;

  L14:
    call {:si_unique_call 1489} sdv_426, sdv_427, LastVcb, FreeContext, CurrentVcb, Tmp_1160, sdv_431, LoopsWithVcbHeld, CloseContext_1, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260 := FatFspClose#1_loop_L14(sdv_426, sdv_427, LastVcb, FreeContext, CurrentVcb, Tmp_1160, sdv_431, LoopsWithVcbHeld, CloseContext_1, Vcb_47, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260);
    goto L14_last;

  L14_last:
    call {:si_unique_call 1502} CloseContext_1 := FatRemoveClose(Vcb_47, LastVcb);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} CloseContext_1 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Vcb_47 != 0;
    goto L22;

  L22:
    LastVcb := CurrentVcb;
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc FreeContext;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} FreeContext != 0;
    Tmp_1160 := 0;
    goto L29;

  L29:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc vslice_dummy_var_7501;
    havoc vslice_dummy_var_7502;
    havoc vslice_dummy_var_7503;
    call {:si_unique_call 1490} vslice_dummy_var_258 := FatCommonClose#1(vslice_dummy_var_7501, vslice_dummy_var_7502, Tmp_1160, vslice_dummy_var_7503, 1, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} FreeContext != 0;
    call {:si_unique_call 1491} sdv_ExFreePool(0);
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} FreeContext == 0;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    assume false;
    return;

  anon40_Then:
    assume {:partition} FreeContext == 0;
    call {:si_unique_call 1492} sdv_427 := sdv_containing_record(CloseContext_1, 12);
    Tmp_1160 := sdv_427;
    goto L29;

  anon31_Then:
    assume {:partition} Vcb_47 == 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1493} ExReleaseResourceLite(0);
    CurrentVcb := 0;
    goto L22;

  anon35_Then:
    assume {:partition} CurrentVcb == 0;
    goto L22;

  anon32_Then:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    LoopsWithVcbHeld := 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1494} ExReleaseResourceLite(0);
    goto L53;

  L53:
    assume {:nonnull} CloseContext_1 != 0;
    assume CloseContext_1 > 0;
    havoc CurrentVcb;
    call {:si_unique_call 1495} vslice_dummy_var_260 := ExAcquireResourceExclusiveLite(0, 1);
    goto L60;

  L60:
    assume {:nonnull} CurrentVcb != 0;
    assume CurrentVcb > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1496} ExReleaseResourceLite(0);
    CurrentVcb := 0;
    goto L22;

  anon36_Then:
    goto L22;

  anon41_Then:
    assume {:partition} CurrentVcb == 0;
    goto L53;

  anon34_Then:
    LoopsWithVcbHeld := LoopsWithVcbHeld + 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} LoopsWithVcbHeld >= 20;
    call {:si_unique_call 1497} sdv_431 := ExGetSharedWaiterCount(0);
    call {:si_unique_call 1498} sdv_426 := ExGetExclusiveWaiterCount(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_431 + sdv_426 != 0;
    call {:si_unique_call 1499} ExReleaseResourceLite(0);
    call {:si_unique_call 1500} vslice_dummy_var_259 := ExAcquireResourceExclusiveLite(0, 1);
    goto L72;

  L72:
    LoopsWithVcbHeld := 0;
    goto L60;

  anon37_Then:
    assume {:partition} sdv_431 + sdv_426 == 0;
    goto L72;

  anon42_Then:
    assume {:partition} 20 > LoopsWithVcbHeld;
    goto L60;

  anon29_Then:
    assume {:partition} CloseContext_1 == 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} CurrentVcb != 0;
    call {:si_unique_call 1501} ExReleaseResourceLite(0);
    goto L79;

  L79:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Vcb_47 == 0;
    goto L1;

  L1:
    return;

  anon38_Then:
    assume {:partition} Vcb_47 != 0;
    goto L1;

  anon30_Then:
    assume {:partition} CurrentVcb == 0;
    goto L79;

  anon39_Then:
    assume {:partition} Vcb_47 == 0;
    goto L14;
}



procedure {:origName "FatFspClose"} FatFspClose#1(actual_Vcb_47: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCommonClose"} FatCommonClose#0(actual_Vcb_48: int, actual_Fcb_18: int, actual_Ccb_5: int, actual_TypeOfOpen_1: int, actual_Wait_4: int, actual_VcbDeleted_4: int) returns (Tmp_1161: int)
{
  var {:pointer} ParentDcb: int;
  var {:pointer} CurrentDcb: int;
  var {:scalar} Tmp_1162: int;
  var {:scalar} sdv_432: int;
  var {:pointer} Tmp_1163: int;
  var {:pointer} Tmp_1164: int;
  var {:scalar} sdv_436: int;
  var {:scalar} Status_22: int;
  var {:pointer} Tmp_1165: int;
  var {:pointer} Tmp_1166: int;
  var {:pointer} Tmp_1167: int;
  var {:scalar} sdv_444: int;
  var {:scalar} Tmp_1168: int;
  var {:scalar} IrpContext_69: int;
  var {:scalar} sdv_448: int;
  var {:scalar} LocalVcbDeleted: int;
  var {:scalar} RecursiveClose: int;
  var {:pointer} Tmp_1169: int;
  var {:pointer} Vcb_48: int;
  var {:pointer} Fcb_18: int;
  var {:pointer} Ccb_5: int;
  var {:scalar} TypeOfOpen_1: int;
  var {:scalar} Wait_4: int;
  var {:pointer} VcbDeleted_4: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_7504: int;
  var vslice_dummy_var_7505: int;
  var vslice_dummy_var_7506: int;
  var vslice_dummy_var_7507: int;
  var vslice_dummy_var_7508: int;
  var vslice_dummy_var_7509: int;
  var vslice_dummy_var_7510: int;

  anon0:
    call {:si_unique_call 1503} IrpContext_69 := __HAVOC_malloc(68);
    Vcb_48 := actual_Vcb_48;
    Fcb_18 := actual_Fcb_18;
    Ccb_5 := actual_Ccb_5;
    TypeOfOpen_1 := actual_TypeOfOpen_1;
    Wait_4 := actual_Wait_4;
    VcbDeleted_4 := actual_VcbDeleted_4;
    LocalVcbDeleted := 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} VcbDeleted_4 != 0;
    assume {:nonnull} VcbDeleted_4 != 0;
    assume VcbDeleted_4 > 0;
    Mem_T.INT4[VcbDeleted_4] := LocalVcbDeleted;
    goto L10;

  L10:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} TypeOfOpen_1 == 1;
    Status_22 := 0;
    Tmp_1161 := Status_22;
    goto L1;

  L1:
    return;

  anon81_Then:
    assume {:partition} TypeOfOpen_1 != 1;
    call {:si_unique_call 1504} sdv_RtlZeroMemory(0, 68);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_69)] := 2;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} Wait_4 != 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    goto L21;

  L21:
    call {:si_unique_call 1505} sdv_436 := ExAcquireResourceExclusiveLite(0, Wait_4);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} sdv_436 != 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 512) != 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 1506} ExReleaseResourceLite(0);
    Tmp_1161 := 259;
    goto L1;

  anon85_Then:
    goto L28;

  L28:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128) != 0;
    RecursiveClose := 1;
    goto L36;

  L36:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} TypeOfOpen_1 != 2;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} TypeOfOpen_1 != 3;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} TypeOfOpen_1 != 4;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} TypeOfOpen_1 != 5;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} TypeOfOpen_1 != 6;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} TypeOfOpen_1 == 7;
    call {:si_unique_call 1507} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7504;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7504;
    call {:si_unique_call 1508} vslice_dummy_var_272 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    call {:si_unique_call 1509} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7505;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7505;
    call {:si_unique_call 1510} vslice_dummy_var_273 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Status_22 := 0;
    goto L89;

  L89:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} RecursiveClose != 0;
    goto L91;

  L91:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} LocalVcbDeleted != 0;
    goto L95;

  L95:
    Tmp_1161 := Status_22;
    goto L1;

  anon89_Then:
    assume {:partition} LocalVcbDeleted == 0;
    call {:si_unique_call 1511} ExReleaseResourceLite(0);
    goto L95;

  anon87_Then:
    assume {:partition} RecursiveClose == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 524288) == 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} VcbDeleted_4 != 0;
    call {:si_unique_call 1512} ExReleaseResourceLite(0);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Tmp_1162 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Tmp_1162 == 0;
    Tmp_1168 := 0;
    goto L293;

  L293:
    call {:si_unique_call 1513} vslice_dummy_var_264 := ExAcquireResourceExclusiveLite(0, Tmp_1168);
    call {:si_unique_call 1514} vslice_dummy_var_261 := FatAcquireExclusiveVcb(IrpContext_69, Vcb_48);
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume false;
    call {:si_unique_call 1515} ExReleaseResourceLite(0);
    return;

  anon117_Then:
    assume {:partition} Tmp_1162 != 0;
    Tmp_1168 := 1;
    goto L293;

  anon91_Then:
    assume {:partition} VcbDeleted_4 == 0;
    goto L96;

  L96:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L120;

  L120:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} LocalVcbDeleted == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], BNOT(128));
    goto L91;

  anon93_Then:
    assume {:partition} LocalVcbDeleted != 0;
    goto L91;

  anon90_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 524288) != 0;
    goto L96;

  anon88_Then:
    goto L96;

  anon106_Then:
    assume {:partition} TypeOfOpen_1 != 7;
    call {:si_unique_call 1516} KeBugCheckEx(35, 328752, TypeOfOpen_1, 0, 0);
    goto L134;

  L134:
    Tmp_1166 := Fcb_18;
    assume {:nonnull} Tmp_1166 != 0;
    assume Tmp_1166 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} Mem_T.INT4[Tmp_1166] == 1282;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    goto L137;

  L137:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    havoc ParentDcb;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 256);
    call {:si_unique_call 1517} FatDeleteFcb_Real(IrpContext_69, Fcb_18);
    goto L142;

  L142:
    call {:si_unique_call 1518} ParentDcb, CurrentDcb, Tmp_1167, sdv_448, vslice_dummy_var_265, vslice_dummy_var_266 := FatCommonClose#0_loop_L142(ParentDcb, CurrentDcb, Tmp_1167, IrpContext_69, sdv_448, Vcb_48, vslice_dummy_var_265, vslice_dummy_var_266);
    goto L142_last;

  L142_last:
    Tmp_1167 := ParentDcb;
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[Tmp_1167] == 1283;
    call {:si_unique_call 1519} sdv_448 := sdv_IsListEmpty(0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_448 != 0;
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    call {:si_unique_call 1520} vslice_dummy_var_265 := corral_nondet();
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    call {:si_unique_call 1521} vslice_dummy_var_266 := sdv_ObDereferenceObject(0);
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    CurrentDcb := ParentDcb;
    assume {:nonnull} CurrentDcb != 0;
    assume CurrentDcb > 0;
    havoc ParentDcb;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 256);
    call {:si_unique_call 1522} FatDeleteFcb_Real(IrpContext_69, CurrentDcb);
    goto anon99_Else_dummy;

  anon99_Else_dummy:
    assume false;
    return;

  anon99_Then:
    goto L143;

  L143:
    Status_22 := 0;
    goto L89;

  anon98_Then:
    goto L143;

  anon97_Then:
    goto L143;

  anon96_Then:
    assume {:partition} sdv_448 == 0;
    goto L143;

  anon118_Then:
    assume {:partition} Mem_T.INT4[Tmp_1167] != 1283;
    goto L143;

  anon95_Then:
    goto L135;

  L135:
    Tmp_1164 := Fcb_18;
    assume {:nonnull} Tmp_1164 != 0;
    assume Tmp_1164 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Mem_T.INT4[Tmp_1164] == 1283;
    call {:si_unique_call 1523} sdv_432 := sdv_IsListEmpty(0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_432 != 0;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L143;

  anon102_Then:
    goto L137;

  anon101_Then:
    goto L143;

  anon100_Then:
    assume {:partition} sdv_432 == 0;
    goto L143;

  anon116_Then:
    assume {:partition} Mem_T.INT4[Tmp_1164] != 1283;
    goto L143;

  anon115_Then:
    assume {:partition} Mem_T.INT4[Tmp_1166] != 1282;
    goto L135;

  anon107_Then:
    assume {:partition} TypeOfOpen_1 == 6;
    call {:si_unique_call 1524} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    havoc vslice_dummy_var_7506;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7506;
    call {:si_unique_call 1525} vslice_dummy_var_269 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    call {:si_unique_call 1526} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7507;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7507;
    call {:si_unique_call 1527} vslice_dummy_var_270 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Tmp_1165 := Fcb_18;
    assume {:nonnull} Tmp_1165 != 0;
    assume Tmp_1165 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} Mem_T.INT4[Tmp_1165] == 1284;
    call {:si_unique_call 1528} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7508;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7508;
    call {:si_unique_call 1529} vslice_dummy_var_271 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L127;

  L127:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} RecursiveClose == 0;
    goto L134;

  anon94_Then:
    assume {:partition} RecursiveClose != 0;
    Status_22 := 0;
    goto L89;

  anon120_Then:
    assume {:partition} Mem_T.INT4[Tmp_1165] != 1284;
    goto L127;

  anon108_Then:
    assume {:partition} TypeOfOpen_1 == 5;
    call {:si_unique_call 1530} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7509;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7509;
    call {:si_unique_call 1531} vslice_dummy_var_267 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    call {:si_unique_call 1532} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7510;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7510;
    call {:si_unique_call 1533} vslice_dummy_var_268 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Status_22 := 0;
    goto L89;

  anon109_Then:
    assume {:partition} TypeOfOpen_1 == 4;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Ccb_5 != 0;
    assume Ccb_5 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L181;

  L181:
    call {:si_unique_call 1534} FatDeleteCcb_Real(IrpContext_69, Ccb_5);
    Status_22 := 0;
    goto L89;

  anon119_Then:
    goto L181;

  anon110_Then:
    assume {:partition} TypeOfOpen_1 == 3;
    goto L40;

  L40:
    Tmp_1169 := Fcb_18;
    assume {:nonnull} Tmp_1169 != 0;
    assume Tmp_1169 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.INT4[Tmp_1169] == 1283;
    call {:si_unique_call 1535} sdv_444 := sdv_IsListEmpty(0);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_444 != 0;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    call {:si_unique_call 1536} vslice_dummy_var_262 := corral_nondet();
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    call {:si_unique_call 1537} vslice_dummy_var_263 := sdv_ObDereferenceObject(0);
    goto L187;

  L187:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Ccb_5 != 0;
    assume Ccb_5 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L205;

  L205:
    call {:si_unique_call 1538} FatDeleteCcb_Real(IrpContext_69, Ccb_5);
    goto L134;

  anon114_Then:
    goto L205;

  anon105_Then:
    goto L187;

  anon104_Then:
    goto L187;

  anon103_Then:
    assume {:partition} sdv_444 == 0;
    goto L187;

  anon113_Then:
    assume {:partition} Mem_T.INT4[Tmp_1169] != 1283;
    goto L187;

  anon86_Then:
    assume {:partition} TypeOfOpen_1 == 2;
    goto L40;

  anon84_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128) == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128);
    RecursiveClose := 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L36;

  anon83_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 512) == 0;
    goto L28;

  anon82_Then:
    assume {:partition} sdv_436 == 0;
    Tmp_1161 := 259;
    goto L1;

  anon112_Then:
    assume {:partition} Wait_4 == 0;
    goto L21;

  anon111_Then:
    assume {:partition} VcbDeleted_4 == 0;
    goto L10;
}



procedure {:origName "FatCommonClose"} FatCommonClose#0(actual_Vcb_48: int, actual_Fcb_18: int, actual_Ccb_5: int, actual_TypeOfOpen_1: int, actual_Wait_4: int, actual_VcbDeleted_4: int) returns (Tmp_1161: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.VcbState__VCB, Mem_T.FcbState__FCB;
  free ensures {:va_keep} Tmp_1161 == 0 || Tmp_1161 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:origName "FatCommonClose"} FatCommonClose#1(actual_Vcb_48: int, actual_Fcb_18: int, actual_Ccb_5: int, actual_TypeOfOpen_1: int, actual_Wait_4: int, actual_VcbDeleted_4: int) returns (Tmp_1161: int)
{
  var {:pointer} ParentDcb: int;
  var {:pointer} CurrentDcb: int;
  var {:scalar} Tmp_1162: int;
  var {:scalar} sdv_432: int;
  var {:pointer} Tmp_1163: int;
  var {:pointer} Tmp_1164: int;
  var {:scalar} sdv_436: int;
  var {:scalar} Status_22: int;
  var {:pointer} Tmp_1165: int;
  var {:pointer} Tmp_1166: int;
  var {:pointer} Tmp_1167: int;
  var {:scalar} sdv_444: int;
  var {:scalar} Tmp_1168: int;
  var {:scalar} IrpContext_69: int;
  var {:scalar} sdv_448: int;
  var {:scalar} LocalVcbDeleted: int;
  var {:scalar} RecursiveClose: int;
  var {:pointer} Tmp_1169: int;
  var {:pointer} Vcb_48: int;
  var {:pointer} Fcb_18: int;
  var {:pointer} Ccb_5: int;
  var {:scalar} TypeOfOpen_1: int;
  var {:scalar} Wait_4: int;
  var {:pointer} VcbDeleted_4: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_7511: int;
  var vslice_dummy_var_7512: int;
  var vslice_dummy_var_7513: int;
  var vslice_dummy_var_7514: int;
  var vslice_dummy_var_7515: int;
  var vslice_dummy_var_7516: int;
  var vslice_dummy_var_7517: int;

  anon0:
    call {:si_unique_call 1539} IrpContext_69 := __HAVOC_malloc(68);
    Vcb_48 := actual_Vcb_48;
    Fcb_18 := actual_Fcb_18;
    Ccb_5 := actual_Ccb_5;
    TypeOfOpen_1 := actual_TypeOfOpen_1;
    Wait_4 := actual_Wait_4;
    VcbDeleted_4 := actual_VcbDeleted_4;
    LocalVcbDeleted := 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} VcbDeleted_4 != 0;
    assume {:nonnull} VcbDeleted_4 != 0;
    assume VcbDeleted_4 > 0;
    Mem_T.INT4[VcbDeleted_4] := LocalVcbDeleted;
    goto L10;

  L10:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} TypeOfOpen_1 == 1;
    Status_22 := 0;
    Tmp_1161 := Status_22;
    goto L1;

  L1:
    return;

  anon81_Then:
    assume {:partition} TypeOfOpen_1 != 1;
    call {:si_unique_call 1540} sdv_RtlZeroMemory(0, 68);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(IrpContext_69)] := 2;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} Wait_4 != 0;
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    goto L21;

  L21:
    call {:si_unique_call 1541} sdv_436 := ExAcquireResourceExclusiveLite(0, Wait_4);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} sdv_436 != 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 512) != 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 1542} ExReleaseResourceLite(0);
    Tmp_1161 := 259;
    goto L1;

  anon85_Then:
    goto L28;

  L28:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128) != 0;
    RecursiveClose := 1;
    goto L36;

  L36:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} TypeOfOpen_1 != 2;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} TypeOfOpen_1 != 3;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} TypeOfOpen_1 != 4;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} TypeOfOpen_1 != 5;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} TypeOfOpen_1 != 6;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} TypeOfOpen_1 == 7;
    call {:si_unique_call 1543} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7511;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7511;
    call {:si_unique_call 1544} vslice_dummy_var_285 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    call {:si_unique_call 1545} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7512;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7512;
    call {:si_unique_call 1546} vslice_dummy_var_286 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Status_22 := 0;
    goto L89;

  L89:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} RecursiveClose != 0;
    goto L91;

  L91:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} LocalVcbDeleted != 0;
    goto L95;

  L95:
    Tmp_1161 := Status_22;
    goto L1;

  anon89_Then:
    assume {:partition} LocalVcbDeleted == 0;
    call {:si_unique_call 1547} ExReleaseResourceLite(0);
    goto L95;

  anon87_Then:
    assume {:partition} RecursiveClose == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 524288) == 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} VcbDeleted_4 != 0;
    call {:si_unique_call 1548} ExReleaseResourceLite(0);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)] := BOR(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    assume {:nonnull} IrpContext_69 != 0;
    assume IrpContext_69 > 0;
    Tmp_1162 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(IrpContext_69)], 2);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Tmp_1162 == 0;
    Tmp_1168 := 0;
    goto L293;

  L293:
    call {:si_unique_call 1549} vslice_dummy_var_277 := ExAcquireResourceExclusiveLite(0, Tmp_1168);
    call {:si_unique_call 1550} vslice_dummy_var_274 := FatAcquireExclusiveVcb(IrpContext_69, Vcb_48);
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    call {:si_unique_call 1551} LocalVcbDeleted := FatCheckForDismount#0(IrpContext_69, Vcb_48, 0);
    call {:si_unique_call 1552} ExReleaseResourceLite(0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} VcbDeleted_4 != 0;
    assume {:nonnull} VcbDeleted_4 != 0;
    assume VcbDeleted_4 > 0;
    Mem_T.INT4[VcbDeleted_4] := LocalVcbDeleted;
    goto L120;

  L120:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} LocalVcbDeleted == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], BNOT(128));
    goto L91;

  anon93_Then:
    assume {:partition} LocalVcbDeleted != 0;
    goto L91;

  anon92_Then:
    assume {:partition} VcbDeleted_4 == 0;
    goto L120;

  anon117_Then:
    assume {:partition} Tmp_1162 != 0;
    Tmp_1168 := 1;
    goto L293;

  anon91_Then:
    assume {:partition} VcbDeleted_4 == 0;
    goto L96;

  L96:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L120;

  anon90_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 524288) != 0;
    goto L96;

  anon88_Then:
    goto L96;

  anon106_Then:
    assume {:partition} TypeOfOpen_1 != 7;
    call {:si_unique_call 1553} KeBugCheckEx(35, 328752, TypeOfOpen_1, 0, 0);
    goto L134;

  L134:
    Tmp_1166 := Fcb_18;
    assume {:nonnull} Tmp_1166 != 0;
    assume Tmp_1166 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} Mem_T.INT4[Tmp_1166] == 1282;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    goto L137;

  L137:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    havoc ParentDcb;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 256);
    call {:si_unique_call 1554} FatDeleteFcb_Real(IrpContext_69, Fcb_18);
    goto L142;

  L142:
    call {:si_unique_call 1555} ParentDcb, CurrentDcb, Tmp_1167, sdv_448, vslice_dummy_var_278, vslice_dummy_var_279 := FatCommonClose#1_loop_L142(ParentDcb, CurrentDcb, Tmp_1167, IrpContext_69, sdv_448, Vcb_48, vslice_dummy_var_278, vslice_dummy_var_279);
    goto L142_last;

  L142_last:
    Tmp_1167 := ParentDcb;
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[Tmp_1167] == 1283;
    call {:si_unique_call 1556} sdv_448 := sdv_IsListEmpty(0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_448 != 0;
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    call {:si_unique_call 1557} vslice_dummy_var_278 := corral_nondet();
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    call {:si_unique_call 1558} vslice_dummy_var_279 := sdv_ObDereferenceObject(0);
    assume {:nonnull} ParentDcb != 0;
    assume ParentDcb > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    CurrentDcb := ParentDcb;
    assume {:nonnull} CurrentDcb != 0;
    assume CurrentDcb > 0;
    havoc ParentDcb;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 256);
    call {:si_unique_call 1559} FatDeleteFcb_Real(IrpContext_69, CurrentDcb);
    goto anon99_Else_dummy;

  anon99_Else_dummy:
    assume false;
    return;

  anon99_Then:
    goto L143;

  L143:
    Status_22 := 0;
    goto L89;

  anon98_Then:
    goto L143;

  anon97_Then:
    goto L143;

  anon96_Then:
    assume {:partition} sdv_448 == 0;
    goto L143;

  anon118_Then:
    assume {:partition} Mem_T.INT4[Tmp_1167] != 1283;
    goto L143;

  anon95_Then:
    goto L135;

  L135:
    Tmp_1164 := Fcb_18;
    assume {:nonnull} Tmp_1164 != 0;
    assume Tmp_1164 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Mem_T.INT4[Tmp_1164] == 1283;
    call {:si_unique_call 1560} sdv_432 := sdv_IsListEmpty(0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_432 != 0;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L143;

  anon102_Then:
    goto L137;

  anon101_Then:
    goto L143;

  anon100_Then:
    assume {:partition} sdv_432 == 0;
    goto L143;

  anon116_Then:
    assume {:partition} Mem_T.INT4[Tmp_1164] != 1283;
    goto L143;

  anon115_Then:
    assume {:partition} Mem_T.INT4[Tmp_1166] != 1282;
    goto L135;

  anon107_Then:
    assume {:partition} TypeOfOpen_1 == 6;
    call {:si_unique_call 1561} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    havoc vslice_dummy_var_7513;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7513;
    call {:si_unique_call 1562} vslice_dummy_var_282 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    call {:si_unique_call 1563} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7514;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7514;
    call {:si_unique_call 1564} vslice_dummy_var_283 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Tmp_1165 := Fcb_18;
    assume {:nonnull} Tmp_1165 != 0;
    assume Tmp_1165 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} Mem_T.INT4[Tmp_1165] == 1284;
    call {:si_unique_call 1565} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7515;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7515;
    call {:si_unique_call 1566} vslice_dummy_var_284 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L127;

  L127:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} RecursiveClose == 0;
    goto L134;

  anon94_Then:
    assume {:partition} RecursiveClose != 0;
    Status_22 := 0;
    goto L89;

  anon120_Then:
    assume {:partition} Mem_T.INT4[Tmp_1165] != 1284;
    goto L127;

  anon108_Then:
    assume {:partition} TypeOfOpen_1 == 5;
    call {:si_unique_call 1567} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7516;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7516;
    call {:si_unique_call 1568} vslice_dummy_var_280 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    call {:si_unique_call 1569} Tmp_1163 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    havoc vslice_dummy_var_7517;
    Mem_T.INT4[Tmp_1163] := vslice_dummy_var_7517;
    call {:si_unique_call 1570} vslice_dummy_var_281 := sdv_InterlockedDecrement(Tmp_1163);
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Status_22 := 0;
    goto L89;

  anon109_Then:
    assume {:partition} TypeOfOpen_1 == 4;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Ccb_5 != 0;
    assume Ccb_5 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L181;

  L181:
    call {:si_unique_call 1571} FatDeleteCcb_Real(IrpContext_69, Ccb_5);
    Status_22 := 0;
    goto L89;

  anon119_Then:
    goto L181;

  anon110_Then:
    assume {:partition} TypeOfOpen_1 == 3;
    goto L40;

  L40:
    Tmp_1169 := Fcb_18;
    assume {:nonnull} Tmp_1169 != 0;
    assume Tmp_1169 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.INT4[Tmp_1169] == 1283;
    call {:si_unique_call 1572} sdv_444 := sdv_IsListEmpty(0);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_444 != 0;
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    call {:si_unique_call 1573} vslice_dummy_var_275 := corral_nondet();
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    call {:si_unique_call 1574} vslice_dummy_var_276 := sdv_ObDereferenceObject(0);
    goto L187;

  L187:
    assume {:nonnull} Fcb_18 != 0;
    assume Fcb_18 > 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    assume {:nonnull} Ccb_5 != 0;
    assume Ccb_5 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L205;

  L205:
    call {:si_unique_call 1575} FatDeleteCcb_Real(IrpContext_69, Ccb_5);
    goto L134;

  anon114_Then:
    goto L205;

  anon105_Then:
    goto L187;

  anon104_Then:
    goto L187;

  anon103_Then:
    assume {:partition} sdv_444 == 0;
    goto L187;

  anon113_Then:
    assume {:partition} Mem_T.INT4[Tmp_1169] != 1283;
    goto L187;

  anon86_Then:
    assume {:partition} TypeOfOpen_1 == 2;
    goto L40;

  anon84_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128) == 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 128);
    RecursiveClose := 0;
    assume {:nonnull} Vcb_48 != 0;
    assume Vcb_48 > 0;
    goto L36;

  anon83_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(Vcb_48)], 512) == 0;
    goto L28;

  anon82_Then:
    assume {:partition} sdv_436 == 0;
    Tmp_1161 := 259;
    goto L1;

  anon112_Then:
    assume {:partition} Wait_4 == 0;
    goto L21;

  anon111_Then:
    assume {:partition} VcbDeleted_4 == 0;
    goto L10;
}



procedure {:origName "FatCommonClose"} FatCommonClose#1(actual_Vcb_48: int, actual_Fcb_18: int, actual_Ccb_5: int, actual_TypeOfOpen_1: int, actual_Wait_4: int, actual_VcbDeleted_4: int) returns (Tmp_1161: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} Tmp_1161 == 0 || Tmp_1161 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation FatDeleteVcb_loop_L36(in_Fcb: int, in_IrpContext: int, in_Vcb: int) returns (out_Fcb: int)
{

  entry:
    out_Fcb := in_Fcb;
    goto L36, exit;

  exit:
    return;

  L36:
    assume {:nonnull} in_Vcb != 0;
    assume in_Vcb > 0;
    call {:si_unique_call 1576} out_Fcb := FatGetNextFcbBottomUp(in_IrpContext, 0, Mem_T.RootDcb__VCB[RootDcb__VCB(in_Vcb)]);
    assume {:nonnull} in_Vcb != 0;
    assume in_Vcb > 0;
    goto anon31_Else;

  anon31_Else:
    assume {:partition} out_Fcb != Mem_T.RootDcb__VCB[RootDcb__VCB(in_Vcb)];
    call {:si_unique_call 1577} FatDeleteFcb_Real(in_IrpContext, out_Fcb);
    goto anon31_Else_dummy;

  anon31_Else_dummy:
    call {:si_unique_call 1578} {:si_old_unique_call 1} out_Fcb := FatDeleteVcb_loop_L36(out_Fcb, in_IrpContext, in_Vcb);
    return;
}



procedure {:LoopProcedure} FatDeleteVcb_loop_L36(in_Fcb: int, in_IrpContext: int, in_Vcb: int) returns (out_Fcb: int);
  modifies alloc, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatGetNextFcbBottomUp_loop_L16(in_Tmp_33: int, in_NextFcb: int, in_Tmp_35: int, in_sdv_13: int, in_Tmp_37: int, in_sdv_14: int, in_sdv_15: int, in_sdv_16: int) returns (out_Tmp_33: int, out_NextFcb: int, out_Tmp_35: int, out_sdv_13: int, out_Tmp_37: int, out_sdv_14: int, out_sdv_15: int, out_sdv_16: int)
{
  var vslice_dummy_var_7518: int;
  var vslice_dummy_var_7519: int;

  entry:
    out_Tmp_33, out_NextFcb, out_Tmp_35, out_sdv_13, out_Tmp_37, out_sdv_14, out_sdv_15, out_sdv_16 := in_Tmp_33, in_NextFcb, in_Tmp_35, in_sdv_13, in_Tmp_37, in_sdv_14, in_sdv_15, in_sdv_16;
    goto L16, exit;

  exit:
    return;

  L16:
    out_Tmp_33 := out_NextFcb;
    assume {:nonnull} out_Tmp_33 != 0;
    assume out_Tmp_33 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_33] != 1282;
    call {:si_unique_call 1582} out_sdv_13 := sdv_IsListEmpty(0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_sdv_13 != 0;
    out_Tmp_37 := 0;
    goto L26;

  L26:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_Tmp_37 != 0;
    call {:si_unique_call 1580} out_sdv_15 := sdv_IsListEmpty(0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_sdv_15 != 0;
    out_Tmp_35 := 0;
    goto L35;

  L35:
    out_NextFcb := out_Tmp_35;
    goto L35_dummy;

  L35_dummy:
    call {:si_unique_call 1583} {:si_old_unique_call 1} out_Tmp_33, out_NextFcb, out_Tmp_35, out_sdv_13, out_Tmp_37, out_sdv_14, out_sdv_15, out_sdv_16 := FatGetNextFcbBottomUp_loop_L16(out_Tmp_33, out_NextFcb, out_Tmp_35, out_sdv_13, out_Tmp_37, out_sdv_14, out_sdv_15, out_sdv_16);
    return;

  anon21_Then:
    assume {:partition} out_sdv_15 == 0;
    assume {:nonnull} out_NextFcb != 0;
    assume out_NextFcb > 0;
    havoc vslice_dummy_var_7518;
    call {:si_unique_call 1579} out_sdv_16 := sdv_containing_record(vslice_dummy_var_7518, 72);
    out_Tmp_35 := out_sdv_16;
    goto L35;

  anon19_Then:
    assume {:partition} out_sdv_13 == 0;
    assume {:nonnull} out_NextFcb != 0;
    assume out_NextFcb > 0;
    havoc vslice_dummy_var_7519;
    call {:si_unique_call 1581} out_sdv_14 := sdv_containing_record(vslice_dummy_var_7519, 72);
    out_Tmp_37 := out_sdv_14;
    goto L26;
}



procedure {:LoopProcedure} FatGetNextFcbBottomUp_loop_L16(in_Tmp_33: int, in_NextFcb: int, in_Tmp_35: int, in_sdv_13: int, in_Tmp_37: int, in_sdv_14: int, in_sdv_15: int, in_sdv_16: int) returns (out_Tmp_33: int, out_NextFcb: int, out_Tmp_35: int, out_sdv_13: int, out_Tmp_37: int, out_sdv_14: int, out_sdv_15: int, out_sdv_16: int);
  free ensures {:va_keep} out_sdv_13 == 1 || out_sdv_13 == 0 || out_sdv_13 == in_sdv_13;
  free ensures {:va_keep} out_sdv_15 == 1 || out_sdv_15 == 0 || out_sdv_15 == in_sdv_15;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatGetNextFcbTopDown_loop_L22(in_Tmp_43: int, in_sdv_20: int, in_Sibling: int, in_Fcb_3: int, in_TerminationFcb_1: int) returns (out_Tmp_43: int, out_sdv_20: int, out_Sibling: int, out_Fcb_3: int)
{
  var vslice_dummy_var_7520: int;

  entry:
    out_Tmp_43, out_sdv_20, out_Sibling, out_Fcb_3 := in_Tmp_43, in_sdv_20, in_Sibling, in_Fcb_3;
    goto L22, exit;

  exit:
    return;

  L22:
    goto anon23_Then;

  anon23_Then:
    assume {:partition} out_Sibling == 0;
    assume {:nonnull} out_Fcb_3 != 0;
    assume out_Fcb_3 > 0;
    goto anon24_Then;

  anon24_Then:
    assume {:nonnull} out_Fcb_3 != 0;
    assume out_Fcb_3 > 0;
    havoc out_Fcb_3;
    assume {:nonnull} out_Fcb_3 != 0;
    assume out_Fcb_3 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    out_Tmp_43 := 0;
    goto L35;

  L35:
    out_Sibling := out_Tmp_43;
    goto L35_dummy;

  L35_dummy:
    call {:si_unique_call 1585} {:si_old_unique_call 1} out_Tmp_43, out_sdv_20, out_Sibling, out_Fcb_3 := FatGetNextFcbTopDown_loop_L22(out_Tmp_43, out_sdv_20, out_Sibling, out_Fcb_3, in_TerminationFcb_1);
    return;

  anon29_Then:
    assume {:nonnull} out_Fcb_3 != 0;
    assume out_Fcb_3 > 0;
    havoc vslice_dummy_var_7520;
    call {:si_unique_call 1584} out_sdv_20 := sdv_containing_record(vslice_dummy_var_7520, 72);
    out_Tmp_43 := out_sdv_20;
    goto L35;
}



procedure {:LoopProcedure} FatGetNextFcbTopDown_loop_L22(in_Tmp_43: int, in_sdv_20: int, in_Sibling: int, in_Fcb_3: int, in_TerminationFcb_1: int) returns (out_Tmp_43: int, out_sdv_20: int, out_Sibling: int, out_Fcb_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatIsHandleCountZero_loop_L5(in_Fcb_5: int, in_IrpContext_12: int, in_Vcb_6: int) returns (out_Fcb_5: int)
{

  entry:
    out_Fcb_5 := in_Fcb_5;
    goto L5, exit;

  exit:
    return;

  L5:
    goto anon5_Else;

  anon5_Else:
    assume {:partition} out_Fcb_5 != 0;
    assume {:nonnull} out_Fcb_5 != 0;
    assume out_Fcb_5 > 0;
    goto anon6_Then;

  anon6_Then:
    assume {:nonnull} in_Vcb_6 != 0;
    assume in_Vcb_6 > 0;
    call {:si_unique_call 1586} out_Fcb_5 := FatGetNextFcbTopDown(in_IrpContext_12, out_Fcb_5, Mem_T.RootDcb__VCB[RootDcb__VCB(in_Vcb_6)]);
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    call {:si_unique_call 1587} {:si_old_unique_call 1} out_Fcb_5 := FatIsHandleCountZero_loop_L5(out_Fcb_5, in_IrpContext_12, in_Vcb_6);
    return;
}



procedure {:LoopProcedure} FatIsHandleCountZero_loop_L5(in_Fcb_5: int, in_IrpContext_12: int, in_Vcb_6: int) returns (out_Fcb_5: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSplitAllocation_loop_L62(in_Lbo: int, in_SourceVbo: int, in_sdv_37: int, in_TargetVbo: int, in_ByteCount: int, in_Vcb_7: int, in_Mcb: int, in_RemainingMcb: int, in_vslice_dummy_var_32: int) returns (out_SourceVbo: int, out_sdv_37: int, out_TargetVbo: int, out_vslice_dummy_var_32: int)
{

  entry:
    out_SourceVbo, out_sdv_37, out_TargetVbo, out_vslice_dummy_var_32 := in_SourceVbo, in_sdv_37, in_TargetVbo, in_vslice_dummy_var_32;
    goto L62, exit;

  exit:
    return;

  L62:
    call {:si_unique_call 1588} out_sdv_37 := FatLookupMcbEntry(in_Vcb_7, in_RemainingMcb, out_SourceVbo, in_Lbo, in_ByteCount, 0);
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_sdv_37 != 0;
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    assume {:nonnull} in_Lbo != 0;
    assume in_Lbo > 0;
    call {:si_unique_call 1589} out_vslice_dummy_var_32 := FatAddMcbEntry(in_Vcb_7, in_Mcb, out_TargetVbo, Mem_T.INT4[in_Lbo], Mem_T.INT4[in_ByteCount]);
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    call {:si_unique_call 1590} FatRemoveMcbEntry(in_Vcb_7, in_RemainingMcb, out_SourceVbo, Mem_T.INT4[in_ByteCount]);
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    out_TargetVbo := out_TargetVbo + Mem_T.INT4[in_ByteCount];
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    out_SourceVbo := out_SourceVbo + Mem_T.INT4[in_ByteCount];
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 1591} {:si_old_unique_call 1} out_SourceVbo, out_sdv_37, out_TargetVbo, out_vslice_dummy_var_32 := FatSplitAllocation_loop_L62(in_Lbo, out_SourceVbo, out_sdv_37, out_TargetVbo, in_ByteCount, in_Vcb_7, in_Mcb, in_RemainingMcb, out_vslice_dummy_var_32);
    return;
}



procedure {:LoopProcedure} FatSplitAllocation_loop_L62(in_Lbo: int, in_SourceVbo: int, in_sdv_37: int, in_TargetVbo: int, in_ByteCount: int, in_Vcb_7: int, in_Mcb: int, in_RemainingMcb: int, in_vslice_dummy_var_32: int) returns (out_SourceVbo: int, out_sdv_37: int, out_TargetVbo: int, out_vslice_dummy_var_32: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSplitAllocation_loop_L15(in_Lbo: int, in_sdv_34: int, in_SourceVbo: int, in_TargetVbo: int, in_ByteCount: int, in_Vcb_7: int, in_Mcb: int, in_RemainingMcb: int, in_vslice_dummy_var_30: int) returns (out_sdv_34: int, out_SourceVbo: int, out_TargetVbo: int, out_vslice_dummy_var_30: int)
{

  entry:
    out_sdv_34, out_SourceVbo, out_TargetVbo, out_vslice_dummy_var_30 := in_sdv_34, in_SourceVbo, in_TargetVbo, in_vslice_dummy_var_30;
    goto L15, exit;

  exit:
    return;

  L15:
    call {:si_unique_call 1592} out_sdv_34 := FatLookupMcbEntry(in_Vcb_7, in_Mcb, out_SourceVbo, in_Lbo, in_ByteCount, 0);
    goto anon11_Else;

  anon11_Else:
    assume {:partition} out_sdv_34 != 0;
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    assume {:nonnull} in_Lbo != 0;
    assume in_Lbo > 0;
    call {:si_unique_call 1593} out_vslice_dummy_var_30 := FatAddMcbEntry(in_Vcb_7, in_RemainingMcb, out_TargetVbo, Mem_T.INT4[in_Lbo], Mem_T.INT4[in_ByteCount]);
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    call {:si_unique_call 1594} FatRemoveMcbEntry(in_Vcb_7, in_Mcb, out_SourceVbo, Mem_T.INT4[in_ByteCount]);
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    out_TargetVbo := out_TargetVbo + Mem_T.INT4[in_ByteCount];
    assume {:nonnull} in_ByteCount != 0;
    assume in_ByteCount > 0;
    out_SourceVbo := out_SourceVbo + Mem_T.INT4[in_ByteCount];
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_SourceVbo != 0;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    call {:si_unique_call 1595} {:si_old_unique_call 1} out_sdv_34, out_SourceVbo, out_TargetVbo, out_vslice_dummy_var_30 := FatSplitAllocation_loop_L15(in_Lbo, out_sdv_34, out_SourceVbo, out_TargetVbo, in_ByteCount, in_Vcb_7, in_Mcb, in_RemainingMcb, out_vslice_dummy_var_30);
    return;
}



procedure {:LoopProcedure} FatSplitAllocation_loop_L15(in_Lbo: int, in_sdv_34: int, in_SourceVbo: int, in_TargetVbo: int, in_ByteCount: int, in_Vcb_7: int, in_Mcb: int, in_RemainingMcb: int, in_vslice_dummy_var_30: int) returns (out_sdv_34: int, out_SourceVbo: int, out_TargetVbo: int, out_vslice_dummy_var_30: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLogOf_loop_L8(in_Log: int, in_Value: int) returns (out_Log: int, out_Value: int)
{

  entry:
    out_Log, out_Value := in_Log, in_Value;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon5_Else;

  anon5_Else:
    assume {:partition} BAND(out_Value, -2) != 0;
    out_Log := out_Log + 1;
    call {:si_unique_call 1596} out_Value := corral_nondet();
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_Log;
    return;
}



procedure {:LoopProcedure} FatLogOf_loop_L8(in_Log: int, in_Value: int) returns (out_Log: int, out_Value: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatExamineFatEntries_loop_L62(in_FatBuffer: int, in_Offset: int, in_Tmp_102: int, in_StartIndexOfThisRun: int, in_CurrentWindow: int, in_EntriesPerWindow: int, in_FatIndexBitSize: int, in_Bcb: int, in_Tmp_116: int, in_FatIndex: int, in_Tmp_120: int, in_FreeClusterCount: int, in_CurrentRun: int, in_Page: int, in_pv: int, in_FatEntry: int, in_BitMap: int, in_ClustersThisRun: int, in_Tmp_134: int, in_IrpContext_14: int, in_Vcb_8: int, in_StartIndex: int, in_EndIndex: int, in_SetupWindows: int) returns (out_Offset: int, out_Tmp_102: int, out_StartIndexOfThisRun: int, out_Tmp_116: int, out_FatIndex: int, out_Tmp_120: int, out_CurrentRun: int, out_Page: int, out_FatEntry: int, out_ClustersThisRun: int, out_Tmp_134: int)
{

  entry:
    out_Offset, out_Tmp_102, out_StartIndexOfThisRun, out_Tmp_116, out_FatIndex, out_Tmp_120, out_CurrentRun, out_Page, out_FatEntry, out_ClustersThisRun, out_Tmp_134 := in_Offset, in_Tmp_102, in_StartIndexOfThisRun, in_Tmp_116, in_FatIndex, in_Tmp_120, in_CurrentRun, in_Page, in_FatEntry, in_ClustersThisRun, in_Tmp_134;
    goto L62, exit;

  exit:
    return;

  L62:
    goto anon80_Else;

  anon80_Else:
    assume {:partition} in_EndIndex >= out_FatIndex;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} in_FatIndexBitSize == 12;
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    havoc out_Tmp_134;
    assume {:nonnull} out_Tmp_134 != 0;
    assume out_Tmp_134 > 0;
    havoc out_FatEntry;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} BAND(out_FatIndex, 1) != 0;
    call {:si_unique_call 1598} out_Tmp_102 := corral_nondet();
    goto L70;

  L70:
    out_FatEntry := BAND(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048), out_Tmp_102);
    goto L71;

  L71:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} out_CurrentRun == 2;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} out_FatEntry != 0;
    out_Tmp_120 := 1;
    goto L76;

  L76:
    out_CurrentRun := out_Tmp_120;
    goto L72;

  L72:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} out_CurrentRun != 0;
    goto L78;

  L78:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} out_CurrentRun == 1;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_FatEntry == 0;
    out_ClustersThisRun := out_FatIndex - out_StartIndexOfThisRun;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} in_BitMap != 0;
    goto L83;

  L83:
    out_CurrentRun := 0;
    out_StartIndexOfThisRun := out_FatIndex;
    goto L79;

  L79:
    out_FatIndex := out_FatIndex + 1;
    goto L79_dummy;

  L79_dummy:
    call {:si_unique_call 1599} {:si_old_unique_call 1} out_Offset, out_Tmp_102, out_StartIndexOfThisRun, out_Tmp_116, out_FatIndex, out_Tmp_120, out_CurrentRun, out_Page, out_FatEntry, out_ClustersThisRun, out_Tmp_134 := FatExamineFatEntries_loop_L62(in_FatBuffer, out_Offset, out_Tmp_102, out_StartIndexOfThisRun, in_CurrentWindow, in_EntriesPerWindow, in_FatIndexBitSize, in_Bcb, out_Tmp_116, out_FatIndex, out_Tmp_120, in_FreeClusterCount, out_CurrentRun, out_Page, in_pv, out_FatEntry, in_BitMap, out_ClustersThisRun, out_Tmp_134, in_IrpContext_14, in_Vcb_8, in_StartIndex, in_EndIndex, in_SetupWindows);
    return;

  anon109_Then:
    assume {:partition} in_BitMap == 0;
    goto L83;

  anon88_Then:
    assume {:partition} out_FatEntry != 0;
    goto L79;

  anon87_Then:
    assume {:partition} out_CurrentRun != 1;
    goto L79;

  anon84_Then:
    assume {:partition} out_CurrentRun == 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_FatEntry != 0;
    out_ClustersThisRun := out_FatIndex - out_StartIndexOfThisRun;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} in_FreeClusterCount != 0;
    assume {:nonnull} in_FreeClusterCount != 0;
    assume in_FreeClusterCount > 0;
    Mem_T.INT4[in_FreeClusterCount] := Mem_T.INT4[in_FreeClusterCount] + out_ClustersThisRun;
    assume {:nonnull} in_CurrentWindow != 0;
    assume in_CurrentWindow > 0;
    goto L100;

  L100:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} in_BitMap != 0;
    goto L103;

  L103:
    out_CurrentRun := 1;
    out_StartIndexOfThisRun := out_FatIndex;
    goto L78;

  anon89_Then:
    assume {:partition} in_BitMap == 0;
    goto L103;

  anon110_Then:
    assume {:partition} in_FreeClusterCount == 0;
    goto L100;

  anon86_Then:
    assume {:partition} out_FatEntry == 0;
    goto L78;

  anon85_Then:
    assume {:partition} out_FatEntry == 0;
    out_Tmp_120 := 0;
    goto L76;

  anon83_Then:
    assume {:partition} out_CurrentRun != 2;
    goto L72;

  anon108_Then:
    assume {:partition} BAND(out_FatIndex, 1) == 0;
    out_Tmp_102 := out_FatEntry;
    goto L70;

  anon81_Then:
    assume {:partition} in_FatIndexBitSize != 12;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} in_SetupWindows != 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} out_FatIndex > in_StartIndex;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} INTMOD(out_FatIndex - 2, in_EntriesPerWindow) == 0;
    assume {:nonnull} in_CurrentWindow != 0;
    assume in_CurrentWindow > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} out_CurrentRun != 0;
    out_ClustersThisRun := out_FatIndex - out_StartIndexOfThisRun;
    goto L116;

  L116:
    out_StartIndexOfThisRun := out_FatIndex;
    out_CurrentRun := 2;
    assume {:nonnull} in_CurrentWindow != 0;
    assume in_CurrentWindow > 0;
    assume {:nonnull} in_CurrentWindow != 0;
    assume in_CurrentWindow > 0;
    goto L109;

  L109:
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto L125;

  L125:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} in_FatIndexBitSize == 32;
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    havoc out_Tmp_116;
    assume {:nonnull} out_Tmp_116 != 0;
    assume out_Tmp_116 > 0;
    out_FatEntry := Mem_T.INT4[out_Tmp_116];
    out_FatEntry := BAND(out_FatEntry, BNOT(BOR(BOR(BOR(268435456, 536870912), 1073741824), -2147483648)));
    goto L71;

  anon94_Then:
    assume {:partition} in_FatIndexBitSize != 32;
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    havoc out_FatEntry;
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    goto L71;

  anon90_Then:
    assume {:nonnull} in_Bcb != 0;
    assume in_Bcb > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} in_Bcb != 0;
    assume in_Bcb > 0;
    goto L130;

  L130:
    out_Page := out_Page + 1;
    out_Offset := out_Offset + 4096;
    call {:si_unique_call 1597} FatReadVolumeFile(in_IrpContext_14, in_Vcb_8, out_Offset, 4096, in_Bcb, in_pv);
    assume {:nonnull} in_FatBuffer != 0;
    assume in_FatBuffer > 0;
    assume {:nonnull} in_pv != 0;
    assume in_pv > 0;
    goto L125;

  anon93_Then:
    goto L130;

  anon111_Then:
    assume {:partition} out_CurrentRun == 0;
    out_ClustersThisRun := out_FatIndex - out_StartIndexOfThisRun;
    assume {:nonnull} in_CurrentWindow != 0;
    assume in_CurrentWindow > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} in_FreeClusterCount != 0;
    assume {:nonnull} in_FreeClusterCount != 0;
    assume in_FreeClusterCount > 0;
    Mem_T.INT4[in_FreeClusterCount] := Mem_T.INT4[in_FreeClusterCount] + out_ClustersThisRun;
    goto L116;

  anon112_Then:
    assume {:partition} in_FreeClusterCount == 0;
    goto L116;

  anon92_Then:
    assume {:partition} INTMOD(out_FatIndex - 2, in_EntriesPerWindow) != 0;
    goto L109;

  anon91_Then:
    assume {:partition} in_StartIndex >= out_FatIndex;
    goto L109;

  anon82_Then:
    assume {:partition} in_SetupWindows == 0;
    goto L109;
}



procedure {:LoopProcedure} FatExamineFatEntries_loop_L62(in_FatBuffer: int, in_Offset: int, in_Tmp_102: int, in_StartIndexOfThisRun: int, in_CurrentWindow: int, in_EntriesPerWindow: int, in_FatIndexBitSize: int, in_Bcb: int, in_Tmp_116: int, in_FatIndex: int, in_Tmp_120: int, in_FreeClusterCount: int, in_CurrentRun: int, in_Page: int, in_pv: int, in_FatEntry: int, in_BitMap: int, in_ClustersThisRun: int, in_Tmp_134: int, in_IrpContext_14: int, in_Vcb_8: int, in_StartIndex: int, in_EndIndex: int, in_SetupWindows: int) returns (out_Offset: int, out_Tmp_102: int, out_StartIndexOfThisRun: int, out_Tmp_116: int, out_FatIndex: int, out_Tmp_120: int, out_CurrentRun: int, out_Page: int, out_FatEntry: int, out_ClustersThisRun: int, out_Tmp_134: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_120 == 1 || out_Tmp_120 == 0 || out_Tmp_120 == in_Tmp_120;
  free ensures {:va_keep} out_CurrentRun == 0 || out_CurrentRun == 1 || out_CurrentRun == 2 || out_CurrentRun == in_CurrentRun;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSelectBestWindow_loop_L13(in_MaxFree: int, in_i: int, in_Tmp_144: int, in_Tmp_146: int, in_FirstEmpty: int, in_Tmp_147: int, in_Fave: int, in_Tmp_148: int, in_ClustersPerWindow: int, in_Tmp_149: int, in_Tmp_150: int, in_Vcb_11: int) returns (out_MaxFree: int, out_i: int, out_Tmp_144: int, out_Tmp_146: int, out_FirstEmpty: int, out_Tmp_147: int, out_Fave: int, out_Tmp_148: int, out_Tmp_149: int, out_Tmp_150: int)
{

  entry:
    out_MaxFree, out_i, out_Tmp_144, out_Tmp_146, out_FirstEmpty, out_Tmp_147, out_Fave, out_Tmp_148, out_Tmp_149, out_Tmp_150 := in_MaxFree, in_i, in_Tmp_144, in_Tmp_146, in_FirstEmpty, in_Tmp_147, in_Fave, in_Tmp_148, in_Tmp_149, in_Tmp_150;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:nonnull} in_Vcb_11 != 0;
    assume in_Vcb_11 > 0;
    goto anon15_Else;

  anon15_Else:
    out_Tmp_150 := out_i;
    assume {:nonnull} in_Vcb_11 != 0;
    assume in_Vcb_11 > 0;
    havoc out_Tmp_147;
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} -1 == out_FirstEmpty;
    out_FirstEmpty := out_i;
    goto L18;

  L18:
    out_i := out_i + 1;
    goto L18_dummy;

  L18_dummy:
    call {:si_unique_call 1600} {:si_old_unique_call 1} out_MaxFree, out_i, out_Tmp_144, out_Tmp_146, out_FirstEmpty, out_Tmp_147, out_Fave, out_Tmp_148, out_Tmp_149, out_Tmp_150 := FatSelectBestWindow_loop_L13(out_MaxFree, out_i, out_Tmp_144, out_Tmp_146, out_FirstEmpty, out_Tmp_147, out_Fave, out_Tmp_148, in_ClustersPerWindow, out_Tmp_149, out_Tmp_150, in_Vcb_11);
    return;

  anon17_Then:
    assume {:partition} -1 != out_FirstEmpty;
    goto L18;

  anon19_Then:
    out_Tmp_149 := out_i;
    assume {:nonnull} in_Vcb_11 != 0;
    assume in_Vcb_11 > 0;
    havoc out_Tmp_144;
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    out_Tmp_146 := out_i;
    assume {:nonnull} in_Vcb_11 != 0;
    assume in_Vcb_11 > 0;
    havoc out_Tmp_148;
    assume {:nonnull} out_Tmp_148 != 0;
    assume out_Tmp_148 > 0;
    havoc out_MaxFree;
    out_Fave := out_i;
    goto anon21_Else;

  anon21_Else:
    goto L18;

  anon20_Then:
    goto L18;
}



procedure {:LoopProcedure} FatSelectBestWindow_loop_L13(in_MaxFree: int, in_i: int, in_Tmp_144: int, in_Tmp_146: int, in_FirstEmpty: int, in_Tmp_147: int, in_Fave: int, in_Tmp_148: int, in_ClustersPerWindow: int, in_Tmp_149: int, in_Tmp_150: int, in_Vcb_11: int) returns (out_MaxFree: int, out_i: int, out_Tmp_144: int, out_Tmp_146: int, out_FirstEmpty: int, out_Tmp_147: int, out_Fave: int, out_Tmp_148: int, out_Tmp_149: int, out_Tmp_150: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L141(in_SavedStartingFatIndex: int, in_Tmp_381: int, in_IrpContext_21: int, in_Vcb_16: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Tmp_381: int, out_StartingFatIndex: int)
{

  entry:
    out_Tmp_381, out_StartingFatIndex := in_Tmp_381, in_StartingFatIndex;
    goto L141, exit;

  exit:
    return;

  L141:
    goto anon223_Else;

  anon223_Else:
    assume {:partition} out_StartingFatIndex > in_SavedStartingFatIndex;
    out_StartingFatIndex := out_StartingFatIndex - 1;
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:partition} in_ChainTogether != 0;
    out_Tmp_381 := out_StartingFatIndex + 1;
    goto L146;

  L146:
    call {:si_unique_call 1601} FatSetFatEntry#1(in_IrpContext_21, in_Vcb_16, out_StartingFatIndex, out_Tmp_381);
    goto L146_dummy;

  L146_dummy:
    call {:si_unique_call 1602} {:si_old_unique_call 1} out_Tmp_381, out_StartingFatIndex := FatSetFatRun_loop_L141(in_SavedStartingFatIndex, out_Tmp_381, in_IrpContext_21, in_Vcb_16, out_StartingFatIndex, in_ChainTogether);
    return;

  anon264_Then:
    assume {:partition} in_ChainTogether == 0;
    out_Tmp_381 := 0;
    goto L146;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L141(in_SavedStartingFatIndex: int, in_Tmp_381: int, in_IrpContext_21: int, in_Vcb_16: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Tmp_381: int, out_StartingFatIndex: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L124(in_Tmp_298: int, in_Tmp_303: int, in_Tmp_305: int, in_Tmp_306: int, in_Tmp_313: int, in_i_1: int, in_Tmp_343: int, in_Tmp_344: int, in_Tmp_360: int, in_SavedBcbs: int) returns (out_Tmp_298: int, out_Tmp_303: int, out_Tmp_305: int, out_Tmp_306: int, out_Tmp_313: int, out_i_1: int, out_Tmp_343: int, out_Tmp_344: int, out_Tmp_360: int)
{

  entry:
    out_Tmp_298, out_Tmp_303, out_Tmp_305, out_Tmp_306, out_Tmp_313, out_i_1, out_Tmp_343, out_Tmp_344, out_Tmp_360 := in_Tmp_298, in_Tmp_303, in_Tmp_305, in_Tmp_306, in_Tmp_313, in_i_1, in_Tmp_343, in_Tmp_344, in_Tmp_360;
    goto L124, exit;

  exit:
    return;

  L124:
    out_Tmp_344 := out_i_1;
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume out_Tmp_344 <= 2;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume out_Tmp_344 != 2;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume out_Tmp_344 != 1;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume out_Tmp_344 != 0;
    goto L308;

  L308:
    assume {:nonnull} out_Tmp_298 != 0;
    assume out_Tmp_298 > 0;
    goto anon242_Else;

  anon242_Else:
    out_Tmp_305 := out_i_1;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    assume out_Tmp_305 <= 2;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume out_Tmp_305 != 2;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume out_Tmp_305 != 1;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume out_Tmp_305 != 0;
    goto L318;

  L318:
    assume {:nonnull} out_Tmp_303 != 0;
    assume out_Tmp_303 > 0;
    goto anon243_Then, anon243_Else;

  anon243_Else:
    out_Tmp_313 := out_i_1;
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume out_Tmp_313 <= 2;
    goto anon258_Then, anon258_Else;

  anon258_Else:
    assume out_Tmp_313 != 2;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume out_Tmp_313 != 1;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume out_Tmp_313 != 0;
    goto L328;

  L328:
    assume {:nonnull} out_Tmp_343 != 0;
    assume out_Tmp_343 > 0;
    out_Tmp_306 := out_i_1;
    goto anon254_Then, anon254_Else;

  anon254_Else:
    assume out_Tmp_306 <= 2;
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume out_Tmp_306 != 2;
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume out_Tmp_306 != 1;
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume out_Tmp_306 != 0;
    goto L338;

  L338:
    assume {:nonnull} out_Tmp_360 != 0;
    assume out_Tmp_360 > 0;
    goto L132;

  L132:
    out_i_1 := out_i_1 + 1;
    goto L132_dummy;

  L132_dummy:
    call {:si_unique_call 1603} {:si_old_unique_call 1} out_Tmp_298, out_Tmp_303, out_Tmp_305, out_Tmp_306, out_Tmp_313, out_i_1, out_Tmp_343, out_Tmp_344, out_Tmp_360 := FatSetFatRun_loop_L124(out_Tmp_298, out_Tmp_303, out_Tmp_305, out_Tmp_306, out_Tmp_313, out_i_1, out_Tmp_343, out_Tmp_344, out_Tmp_360, in_SavedBcbs);
    return;

  anon257_Then:
    assume out_Tmp_306 == 0;
    out_Tmp_306 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_360;
    goto L338;

  anon256_Then:
    assume out_Tmp_306 == 1;
    out_Tmp_306 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_360;
    goto L338;

  anon255_Then:
    assume out_Tmp_306 == 2;
    out_Tmp_306 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_360;
    goto L338;

  anon254_Then:
    assume out_Tmp_306 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_360;
    goto L338;

  anon260_Then:
    assume out_Tmp_313 == 0;
    out_Tmp_313 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_343;
    goto L328;

  anon259_Then:
    assume out_Tmp_313 == 1;
    out_Tmp_313 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_343;
    goto L328;

  anon258_Then:
    assume out_Tmp_313 == 2;
    out_Tmp_313 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_343;
    goto L328;

  anon253_Then:
    assume out_Tmp_313 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_343;
    goto L328;

  anon243_Then:
    goto L132;

  anon263_Then:
    assume out_Tmp_305 == 0;
    out_Tmp_305 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_303;
    goto L318;

  anon262_Then:
    assume out_Tmp_305 == 1;
    out_Tmp_305 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_303;
    goto L318;

  anon261_Then:
    assume out_Tmp_305 == 2;
    out_Tmp_305 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_303;
    goto L318;

  anon252_Then:
    assume out_Tmp_305 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_303;
    goto L318;

  anon267_Then:
    assume out_Tmp_344 == 0;
    out_Tmp_344 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_298;
    goto L308;

  anon266_Then:
    assume out_Tmp_344 == 1;
    out_Tmp_344 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_298;
    goto L308;

  anon265_Then:
    assume out_Tmp_344 == 2;
    out_Tmp_344 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_298;
    goto L308;

  anon251_Then:
    assume out_Tmp_344 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_298;
    goto L308;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L124(in_Tmp_298: int, in_Tmp_303: int, in_Tmp_305: int, in_Tmp_306: int, in_Tmp_313: int, in_i_1: int, in_Tmp_343: int, in_Tmp_344: int, in_Tmp_360: int, in_SavedBcbs: int) returns (out_Tmp_298: int, out_Tmp_303: int, out_Tmp_305: int, out_Tmp_306: int, out_Tmp_313: int, out_i_1: int, out_Tmp_343: int, out_Tmp_344: int, out_Tmp_360: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L89(in_Tmp_300: int, in_Cluster: int, in_Tmp_340: int, in_Tmp_353: int, in_Tmp_355: int, in_PinnedFat_1: int, in_Tmp_366: int, in_Tmp_368: int, in_TmpFatEntry_2: int, in_StartingFatIndex: int, in_ClusterCount: int, in_ChainTogether: int) returns (out_Tmp_300: int, out_Cluster: int, out_Tmp_340: int, out_Tmp_353: int, out_Tmp_355: int, out_Tmp_366: int, out_Tmp_368: int)
{
  var vslice_dummy_var_7521: int;

  entry:
    out_Tmp_300, out_Cluster, out_Tmp_340, out_Tmp_353, out_Tmp_355, out_Tmp_366, out_Tmp_368 := in_Tmp_300, in_Cluster, in_Tmp_340, in_Tmp_353, in_Tmp_355, in_Tmp_366, in_Tmp_368;
    goto L89, exit;

  exit:
    return;

  L89:
    goto anon216_Then;

  anon216_Then:
    assume {:partition} out_Cluster < in_StartingFatIndex + in_ClusterCount - 1;
    assume {:nonnull} in_PinnedFat_1 != 0;
    assume in_PinnedFat_1 > 0;
    havoc out_Tmp_340;
    assume {:nonnull} in_TmpFatEntry_2 != 0;
    assume in_TmpFatEntry_2 > 0;
    assume {:nonnull} out_Tmp_340 != 0;
    assume out_Tmp_340 > 0;
    havoc vslice_dummy_var_7521;
    Mem_T.INT4[in_TmpFatEntry_2] := vslice_dummy_var_7521;
    goto anon248_Then, anon248_Else;

  anon248_Else:
    assume {:partition} BAND(out_Cluster, 1) != 0;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} in_ChainTogether != 0;
    goto L98;

  L98:
    assume {:nonnull} in_TmpFatEntry_2 != 0;
    assume in_TmpFatEntry_2 > 0;
    call {:si_unique_call 1604} out_Tmp_353 := corral_nondet();
    goto L100;

  L100:
    assume {:nonnull} in_TmpFatEntry_2 != 0;
    assume in_TmpFatEntry_2 > 0;
    Mem_T.INT4[in_TmpFatEntry_2] := out_Tmp_353;
    assume {:nonnull} in_PinnedFat_1 != 0;
    assume in_PinnedFat_1 > 0;
    havoc out_Tmp_368;
    out_Tmp_355 := in_TmpFatEntry_2;
    assume {:nonnull} out_Tmp_355 != 0;
    assume out_Tmp_355 > 0;
    assume {:nonnull} out_Tmp_368 != 0;
    assume out_Tmp_368 > 0;
    assume {:nonnull} out_Tmp_355 != 0;
    assume out_Tmp_355 > 0;
    assume {:nonnull} out_Tmp_368 != 0;
    assume out_Tmp_368 > 0;
    out_Cluster := out_Cluster + 1;
    goto L100_dummy;

  L100_dummy:
    call {:si_unique_call 1605} {:si_old_unique_call 1} out_Tmp_300, out_Cluster, out_Tmp_340, out_Tmp_353, out_Tmp_355, out_Tmp_366, out_Tmp_368 := FatSetFatRun_loop_L89(out_Tmp_300, out_Cluster, out_Tmp_340, out_Tmp_353, out_Tmp_355, in_PinnedFat_1, out_Tmp_366, out_Tmp_368, in_TmpFatEntry_2, in_StartingFatIndex, in_ClusterCount, in_ChainTogether);
    return;

  anon218_Then:
    assume {:partition} in_ChainTogether == 0;
    goto L98;

  anon248_Then:
    assume {:partition} BAND(out_Cluster, 1) == 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} in_ChainTogether != 0;
    out_Tmp_300 := out_Cluster + 1;
    goto L105;

  L105:
    assume {:nonnull} in_TmpFatEntry_2 != 0;
    assume in_TmpFatEntry_2 > 0;
    out_Tmp_366 := BAND(Mem_T.INT4[in_TmpFatEntry_2], BOR(BOR(BOR(4096, 8192), 16384), 32768));
    out_Tmp_353 := BOR(out_Tmp_300, out_Tmp_366);
    goto L100;

  anon217_Then:
    assume {:partition} in_ChainTogether == 0;
    out_Tmp_300 := 0;
    goto L105;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L89(in_Tmp_300: int, in_Cluster: int, in_Tmp_340: int, in_Tmp_353: int, in_Tmp_355: int, in_PinnedFat_1: int, in_Tmp_366: int, in_Tmp_368: int, in_TmpFatEntry_2: int, in_StartingFatIndex: int, in_ClusterCount: int, in_ChainTogether: int) returns (out_Tmp_300: int, out_Cluster: int, out_Tmp_340: int, out_Tmp_353: int, out_Tmp_355: int, out_Tmp_366: int, out_Tmp_368: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_355 == in_Tmp_355 || out_Tmp_355 == in_TmpFatEntry_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L78(in_Lbo_4: int, in_FinalSectorLbo: int, in_Tmp_337: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_38: int) returns (out_Lbo_4: int, out_Tmp_337: int, out_vslice_dummy_var_38: int)
{

  entry:
    out_Lbo_4, out_Tmp_337, out_vslice_dummy_var_38 := in_Lbo_4, in_Tmp_337, in_vslice_dummy_var_38;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon215_Else;

  anon215_Else:
    assume {:partition} in_FinalSectorLbo >= out_Lbo_4;
    out_Tmp_337 := out_Lbo_4;
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    call {:si_unique_call 1606} out_vslice_dummy_var_38 := FatAddMcbEntry(in_Vcb_16, DirtyFatMcb__VCB(in_Vcb_16), out_Tmp_337, out_Lbo_4, in_SectorSize_1);
    out_Lbo_4 := out_Lbo_4 + in_SectorSize_1;
    goto anon215_Else_dummy;

  anon215_Else_dummy:
    havoc out_Lbo_4;
    return;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L78(in_Lbo_4: int, in_FinalSectorLbo: int, in_Tmp_337: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_38: int) returns (out_Lbo_4: int, out_Tmp_337: int, out_vslice_dummy_var_38: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_337 == in_Lbo_4 || out_Tmp_337 == in_Tmp_337;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L269(in_Cluster: int, in_FatEntry_3: int, in_Tmp_331: int, in_Tmp_341: int, in_Page_1: int, in_SavedBcbs: int, in_Tmp_382: int, in_FinalCluster_1: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Cluster: int, out_FatEntry_3: int, out_Tmp_331: int, out_Tmp_341: int, out_Page_1: int, out_Tmp_382: int)
{

  entry:
    out_Cluster, out_FatEntry_3, out_Tmp_331, out_Tmp_341, out_Page_1, out_Tmp_382 := in_Cluster, in_FatEntry_3, in_Tmp_331, in_Tmp_341, in_Page_1, in_Tmp_382;
    goto L269, exit;

  exit:
    return;

  L269:
    goto anon237_Else;

  anon237_Else:
    assume {:partition} in_FinalCluster_1 >= out_Cluster;
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} BAND(out_FatEntry_3, 4095) != 0;
    goto L273;

  L273:
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume {:partition} in_ChainTogether != 0;
    out_Tmp_341 := out_Cluster + 1;
    goto L276;

  L276:
    assume {:nonnull} out_FatEntry_3 != 0;
    assume out_FatEntry_3 > 0;
    Mem_T.INT4[out_FatEntry_3] := out_Tmp_341;
    out_Cluster := out_Cluster + 1;
    goto L276_dummy;

  L276_dummy:
    call {:si_unique_call 1607} {:si_old_unique_call 1} out_Cluster, out_FatEntry_3, out_Tmp_331, out_Tmp_341, out_Page_1, out_Tmp_382 := FatSetFatRun_loop_L269(out_Cluster, out_FatEntry_3, out_Tmp_331, out_Tmp_341, out_Page_1, in_SavedBcbs, out_Tmp_382, in_FinalCluster_1, in_StartingFatIndex, in_ChainTogether);
    return;

  anon241_Then:
    assume {:partition} in_ChainTogether == 0;
    out_Tmp_341 := 0;
    goto L276;

  anon239_Then:
    assume {:partition} BAND(out_FatEntry_3, 4095) == 0;
    goto anon240_Then, anon240_Else;

  anon240_Else:
    assume {:partition} out_Cluster != in_StartingFatIndex;
    out_Page_1 := out_Page_1 + 1;
    out_Tmp_382 := out_Page_1;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume out_Tmp_382 <= 2;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume out_Tmp_382 != 2;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume out_Tmp_382 != 1;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume out_Tmp_382 != 0;
    goto L448;

  L448:
    assume {:nonnull} out_Tmp_331 != 0;
    assume out_Tmp_331 > 0;
    havoc out_FatEntry_3;
    goto L273;

  anon312_Then:
    assume out_Tmp_382 == 0;
    out_Tmp_382 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_331;
    goto L448;

  anon311_Then:
    assume out_Tmp_382 == 1;
    out_Tmp_382 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_331;
    goto L448;

  anon310_Then:
    assume out_Tmp_382 == 2;
    out_Tmp_382 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_331;
    goto L448;

  anon309_Then:
    assume out_Tmp_382 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_331;
    goto L448;

  anon240_Then:
    assume {:partition} out_Cluster == in_StartingFatIndex;
    goto L273;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L269(in_Cluster: int, in_FatEntry_3: int, in_Tmp_331: int, in_Tmp_341: int, in_Page_1: int, in_SavedBcbs: int, in_Tmp_382: int, in_FinalCluster_1: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Cluster: int, out_FatEntry_3: int, out_Tmp_331: int, out_Tmp_341: int, out_Page_1: int, out_Tmp_382: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L260(in_Lbo_4: int, in_FinalSectorLbo: int, in_Tmp_361: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_40: int) returns (out_Lbo_4: int, out_Tmp_361: int, out_vslice_dummy_var_40: int)
{

  entry:
    out_Lbo_4, out_Tmp_361, out_vslice_dummy_var_40 := in_Lbo_4, in_Tmp_361, in_vslice_dummy_var_40;
    goto L260, exit;

  exit:
    return;

  L260:
    goto anon236_Else;

  anon236_Else:
    assume {:partition} in_FinalSectorLbo >= out_Lbo_4;
    out_Tmp_361 := out_Lbo_4;
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    call {:si_unique_call 1608} out_vslice_dummy_var_40 := FatAddMcbEntry(in_Vcb_16, DirtyFatMcb__VCB(in_Vcb_16), out_Tmp_361, out_Lbo_4, in_SectorSize_1);
    out_Lbo_4 := out_Lbo_4 + in_SectorSize_1;
    goto anon236_Else_dummy;

  anon236_Else_dummy:
    havoc out_Lbo_4;
    return;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L260(in_Lbo_4: int, in_FinalSectorLbo: int, in_Tmp_361: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_40: int) returns (out_Lbo_4: int, out_Tmp_361: int, out_vslice_dummy_var_40: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_361 == in_Lbo_4 || out_Tmp_361 == in_Tmp_361;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L246(in_NumberOfPages: int, in_Tmp_319: int, in_Tmp_324: int, in_FatEntry_3: int, in_Tmp_333: int, in_Tmp_338: int, in_Offset_2: int, in_Tmp_354: int, in_Tmp_356: int, in_Tmp_363: int, in_Page_1: int, in_SavedBcbs: int, in_IrpContext_21: int, in_Vcb_16: int) returns (out_Tmp_319: int, out_Tmp_324: int, out_FatEntry_3: int, out_Tmp_333: int, out_Tmp_338: int, out_Offset_2: int, out_Tmp_354: int, out_Tmp_356: int, out_Tmp_363: int, out_Page_1: int)
{

  entry:
    out_Tmp_319, out_Tmp_324, out_FatEntry_3, out_Tmp_333, out_Tmp_338, out_Offset_2, out_Tmp_354, out_Tmp_356, out_Tmp_363, out_Page_1 := in_Tmp_319, in_Tmp_324, in_FatEntry_3, in_Tmp_333, in_Tmp_338, in_Offset_2, in_Tmp_354, in_Tmp_356, in_Tmp_363, in_Page_1;
    goto L246, exit;

  exit:
    return;

  L246:
    goto anon234_Else;

  anon234_Else:
    assume {:partition} in_NumberOfPages > out_Page_1;
    out_Tmp_333 := out_Page_1;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume out_Tmp_333 <= 2;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume out_Tmp_333 != 2;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume out_Tmp_333 != 1;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume out_Tmp_333 != 0;
    goto L428;

  L428:
    out_Tmp_319 := out_Tmp_338 + 1 * 4;
    out_Tmp_356 := out_Page_1;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume out_Tmp_356 <= 2;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume out_Tmp_356 != 2;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume out_Tmp_356 != 1;
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume out_Tmp_356 != 0;
    goto L438;

  L438:
    out_Tmp_354 := out_Tmp_324;
    call {:si_unique_call 1609} FatPrepareWriteVolumeFile#1(in_IrpContext_21, in_Vcb_16, out_Offset_2, 4096, out_Tmp_354, out_Tmp_319, 1, 0);
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} out_Page_1 == 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_363;
    assume {:nonnull} out_Tmp_363 != 0;
    assume out_Tmp_363 > 0;
    havoc out_FatEntry_3;
    goto L255;

  L255:
    out_Page_1 := out_Page_1 + 1;
    out_Offset_2 := out_Offset_2 + 4096;
    goto L255_dummy;

  L255_dummy:
    call {:si_unique_call 1610} {:si_old_unique_call 1} out_Tmp_319, out_Tmp_324, out_FatEntry_3, out_Tmp_333, out_Tmp_338, out_Offset_2, out_Tmp_354, out_Tmp_356, out_Tmp_363, out_Page_1 := FatSetFatRun_loop_L246(in_NumberOfPages, out_Tmp_319, out_Tmp_324, out_FatEntry_3, out_Tmp_333, out_Tmp_338, out_Offset_2, out_Tmp_354, out_Tmp_356, out_Tmp_363, out_Page_1, in_SavedBcbs, in_IrpContext_21, in_Vcb_16);
    return;

  anon235_Then:
    assume {:partition} out_Page_1 != 0;
    goto L255;

  anon305_Then:
    assume out_Tmp_356 == 0;
    out_Tmp_356 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_324;
    goto L438;

  anon304_Then:
    assume out_Tmp_356 == 1;
    out_Tmp_356 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_324;
    goto L438;

  anon303_Then:
    assume out_Tmp_356 == 2;
    out_Tmp_356 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_324;
    goto L438;

  anon302_Then:
    assume out_Tmp_356 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_324;
    goto L438;

  anon308_Then:
    assume out_Tmp_333 == 0;
    out_Tmp_333 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_338;
    goto L428;

  anon307_Then:
    assume out_Tmp_333 == 1;
    out_Tmp_333 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_338;
    goto L428;

  anon306_Then:
    assume out_Tmp_333 == 2;
    out_Tmp_333 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_338;
    goto L428;

  anon301_Then:
    assume out_Tmp_333 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_338;
    goto L428;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L246(in_NumberOfPages: int, in_Tmp_319: int, in_Tmp_324: int, in_FatEntry_3: int, in_Tmp_333: int, in_Tmp_338: int, in_Offset_2: int, in_Tmp_354: int, in_Tmp_356: int, in_Tmp_363: int, in_Page_1: int, in_SavedBcbs: int, in_IrpContext_21: int, in_Vcb_16: int) returns (out_Tmp_319: int, out_Tmp_324: int, out_FatEntry_3: int, out_Tmp_333: int, out_Tmp_338: int, out_Offset_2: int, out_Tmp_354: int, out_Tmp_356: int, out_Tmp_363: int, out_Page_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s, Mem_T.Flags__IRP_CONTEXT;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L216(in_Tmp_311: int, in_Tmp_316: int, in_Tmp_318: int, in_Tmp_328: int, in_Tmp_330: int, in_i_2: int, in_Tmp_350: int, in_Tmp_351: int, in_Tmp_352: int, in_Tmp_358: int, in_SavedBcbs: int, in_Tmp_377: int) returns (out_Tmp_311: int, out_Tmp_316: int, out_Tmp_318: int, out_Tmp_328: int, out_Tmp_330: int, out_i_2: int, out_Tmp_350: int, out_Tmp_351: int, out_Tmp_352: int, out_Tmp_358: int, out_Tmp_377: int)
{

  entry:
    out_Tmp_311, out_Tmp_316, out_Tmp_318, out_Tmp_328, out_Tmp_330, out_i_2, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_Tmp_358, out_Tmp_377 := in_Tmp_311, in_Tmp_316, in_Tmp_318, in_Tmp_328, in_Tmp_330, in_i_2, in_Tmp_350, in_Tmp_351, in_Tmp_352, in_Tmp_358, in_Tmp_377;
    goto L216, exit;

  exit:
    return;

  L216:
    out_Tmp_358 := out_i_2;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume out_Tmp_358 <= 2;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume out_Tmp_358 != 2;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume out_Tmp_358 != 1;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume out_Tmp_358 != 0;
    goto L378;

  L378:
    assume {:nonnull} out_Tmp_316 != 0;
    assume out_Tmp_316 > 0;
    goto anon244_Else;

  anon244_Else:
    out_Tmp_318 := out_i_2;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume out_Tmp_318 <= 2;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume out_Tmp_318 != 2;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume out_Tmp_318 != 1;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume out_Tmp_318 != 0;
    goto L388;

  L388:
    assume {:nonnull} out_Tmp_311 != 0;
    assume out_Tmp_311 > 0;
    goto anon245_Then, anon245_Else;

  anon245_Else:
    out_Tmp_351 := out_i_2;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume out_Tmp_351 <= 2;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume out_Tmp_351 != 2;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume out_Tmp_351 != 1;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume out_Tmp_351 != 0;
    goto L398;

  L398:
    assume {:nonnull} out_Tmp_377 != 0;
    assume out_Tmp_377 > 0;
    out_Tmp_352 := out_i_2;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume out_Tmp_352 <= 2;
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume out_Tmp_352 != 2;
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume out_Tmp_352 != 1;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume out_Tmp_352 != 0;
    goto L408;

  L408:
    assume {:nonnull} out_Tmp_350 != 0;
    assume out_Tmp_350 > 0;
    goto L219;

  L219:
    out_Tmp_328 := out_i_2;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume out_Tmp_328 <= 2;
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume out_Tmp_328 != 2;
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume out_Tmp_328 != 1;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume out_Tmp_328 != 0;
    goto L418;

  L418:
    assume {:nonnull} out_Tmp_330 != 0;
    assume out_Tmp_330 > 0;
    out_i_2 := out_i_2 + 1;
    goto L418_dummy;

  L418_dummy:
    call {:si_unique_call 1611} {:si_old_unique_call 1} out_Tmp_311, out_Tmp_316, out_Tmp_318, out_Tmp_328, out_Tmp_330, out_i_2, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_Tmp_358, out_Tmp_377 := FatSetFatRun_loop_L216(out_Tmp_311, out_Tmp_316, out_Tmp_318, out_Tmp_328, out_Tmp_330, out_i_2, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_Tmp_358, in_SavedBcbs, out_Tmp_377);
    return;

  anon288_Then:
    assume out_Tmp_328 == 0;
    out_Tmp_328 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon287_Then:
    assume out_Tmp_328 == 1;
    out_Tmp_328 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon286_Then:
    assume out_Tmp_328 == 2;
    out_Tmp_328 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon285_Then:
    assume out_Tmp_328 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon291_Then:
    assume out_Tmp_352 == 0;
    out_Tmp_352 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon290_Then:
    assume out_Tmp_352 == 1;
    out_Tmp_352 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon289_Then:
    assume out_Tmp_352 == 2;
    out_Tmp_352 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon284_Then:
    assume out_Tmp_352 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon294_Then:
    assume out_Tmp_351 == 0;
    out_Tmp_351 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon293_Then:
    assume out_Tmp_351 == 1;
    out_Tmp_351 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon292_Then:
    assume out_Tmp_351 == 2;
    out_Tmp_351 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon283_Then:
    assume out_Tmp_351 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon245_Then:
    goto L219;

  anon297_Then:
    assume out_Tmp_318 == 0;
    out_Tmp_318 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon296_Then:
    assume out_Tmp_318 == 1;
    out_Tmp_318 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon295_Then:
    assume out_Tmp_318 == 2;
    out_Tmp_318 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon282_Then:
    assume out_Tmp_318 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon300_Then:
    assume out_Tmp_358 == 0;
    out_Tmp_358 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon299_Then:
    assume out_Tmp_358 == 1;
    out_Tmp_358 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon298_Then:
    assume out_Tmp_358 == 2;
    out_Tmp_358 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon281_Then:
    assume out_Tmp_358 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L216(in_Tmp_311: int, in_Tmp_316: int, in_Tmp_318: int, in_Tmp_328: int, in_Tmp_330: int, in_i_2: int, in_Tmp_350: int, in_Tmp_351: int, in_Tmp_352: int, in_Tmp_358: int, in_SavedBcbs: int, in_Tmp_377: int) returns (out_Tmp_311: int, out_Tmp_316: int, out_Tmp_318: int, out_Tmp_328: int, out_Tmp_330: int, out_i_2: int, out_Tmp_350: int, out_Tmp_351: int, out_Tmp_352: int, out_Tmp_358: int, out_Tmp_377: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L200(in_FinalCluster: int, in_Tmp_302: int, in_Cluster: int, in_FatEntry_4: int, in_Tmp_345: int, in_Tmp_348: int, in_SavedBcbs: int, in_Page_2: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Tmp_302: int, out_Cluster: int, out_FatEntry_4: int, out_Tmp_345: int, out_Tmp_348: int, out_Page_2: int)
{

  entry:
    out_Tmp_302, out_Cluster, out_FatEntry_4, out_Tmp_345, out_Tmp_348, out_Page_2 := in_Tmp_302, in_Cluster, in_FatEntry_4, in_Tmp_345, in_Tmp_348, in_Page_2;
    goto L200, exit;

  exit:
    return;

  L200:
    goto anon227_Else;

  anon227_Else:
    assume {:partition} in_FinalCluster >= out_Cluster;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    assume {:partition} BAND(out_FatEntry_4, 4095) != 0;
    goto L204;

  L204:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} in_ChainTogether != 0;
    out_Tmp_302 := out_Cluster + 1;
    goto L207;

  L207:
    assume {:nonnull} out_FatEntry_4 != 0;
    assume out_FatEntry_4 > 0;
    Mem_T.INT4[out_FatEntry_4] := out_Tmp_302;
    out_Cluster := out_Cluster + 1;
    goto L207_dummy;

  L207_dummy:
    call {:si_unique_call 1612} {:si_old_unique_call 1} out_Tmp_302, out_Cluster, out_FatEntry_4, out_Tmp_345, out_Tmp_348, out_Page_2 := FatSetFatRun_loop_L200(in_FinalCluster, out_Tmp_302, out_Cluster, out_FatEntry_4, out_Tmp_345, out_Tmp_348, in_SavedBcbs, out_Page_2, in_StartingFatIndex, in_ChainTogether);
    return;

  anon231_Then:
    assume {:partition} in_ChainTogether == 0;
    out_Tmp_302 := 0;
    goto L207;

  anon229_Then:
    assume {:partition} BAND(out_FatEntry_4, 4095) == 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} out_Cluster != in_StartingFatIndex;
    out_Page_2 := out_Page_2 + 1;
    out_Tmp_348 := out_Page_2;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume out_Tmp_348 <= 2;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume out_Tmp_348 != 2;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume out_Tmp_348 != 1;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume out_Tmp_348 != 0;
    goto L368;

  L368:
    assume {:nonnull} out_Tmp_345 != 0;
    assume out_Tmp_345 > 0;
    havoc out_FatEntry_4;
    goto L204;

  anon280_Then:
    assume out_Tmp_348 == 0;
    out_Tmp_348 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon279_Then:
    assume out_Tmp_348 == 1;
    out_Tmp_348 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon278_Then:
    assume out_Tmp_348 == 2;
    out_Tmp_348 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon277_Then:
    assume out_Tmp_348 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon230_Then:
    assume {:partition} out_Cluster == in_StartingFatIndex;
    goto L204;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L200(in_FinalCluster: int, in_Tmp_302: int, in_Cluster: int, in_FatEntry_4: int, in_Tmp_345: int, in_Tmp_348: int, in_SavedBcbs: int, in_Page_2: int, in_StartingFatIndex: int, in_ChainTogether: int) returns (out_Tmp_302: int, out_Cluster: int, out_FatEntry_4: int, out_Tmp_345: int, out_Tmp_348: int, out_Page_2: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L191(in_Lbo_4: int, in_Tmp_320: int, in_FinalSectorLbo: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_39: int) returns (out_Lbo_4: int, out_Tmp_320: int, out_vslice_dummy_var_39: int)
{

  entry:
    out_Lbo_4, out_Tmp_320, out_vslice_dummy_var_39 := in_Lbo_4, in_Tmp_320, in_vslice_dummy_var_39;
    goto L191, exit;

  exit:
    return;

  L191:
    goto anon226_Else;

  anon226_Else:
    assume {:partition} in_FinalSectorLbo >= out_Lbo_4;
    out_Tmp_320 := out_Lbo_4;
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    call {:si_unique_call 1613} out_vslice_dummy_var_39 := FatAddMcbEntry(in_Vcb_16, DirtyFatMcb__VCB(in_Vcb_16), out_Tmp_320, out_Lbo_4, in_SectorSize_1);
    out_Lbo_4 := out_Lbo_4 + in_SectorSize_1;
    goto anon226_Else_dummy;

  anon226_Else_dummy:
    call {:si_unique_call 1614} {:si_old_unique_call 1} out_Lbo_4, out_Tmp_320, out_vslice_dummy_var_39 := FatSetFatRun_loop_L191(out_Lbo_4, out_Tmp_320, in_FinalSectorLbo, in_SectorSize_1, in_Vcb_16, out_vslice_dummy_var_39);
    return;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L191(in_Lbo_4: int, in_Tmp_320: int, in_FinalSectorLbo: int, in_SectorSize_1: int, in_Vcb_16: int, in_vslice_dummy_var_39: int) returns (out_Lbo_4: int, out_Tmp_320: int, out_vslice_dummy_var_39: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L177(in_Tmp_304: int, in_Tmp_308: int, in_FatEntry_4: int, in_Tmp_339: int, in_Offset_1: int, in_Tmp_346: int, in_SavedBcbs: int, in_Page_2: int, in_Tmp_369: int, in_Tmp_371: int, in_Tmp_378: int, in_NumberOfPages_1: int, in_IrpContext_21: int, in_Vcb_16: int) returns (out_Tmp_304: int, out_Tmp_308: int, out_FatEntry_4: int, out_Tmp_339: int, out_Offset_1: int, out_Tmp_346: int, out_Page_2: int, out_Tmp_369: int, out_Tmp_371: int, out_Tmp_378: int)
{

  entry:
    out_Tmp_304, out_Tmp_308, out_FatEntry_4, out_Tmp_339, out_Offset_1, out_Tmp_346, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_378 := in_Tmp_304, in_Tmp_308, in_FatEntry_4, in_Tmp_339, in_Offset_1, in_Tmp_346, in_Page_2, in_Tmp_369, in_Tmp_371, in_Tmp_378;
    goto L177, exit;

  exit:
    return;

  L177:
    goto anon224_Else;

  anon224_Else:
    assume {:partition} in_NumberOfPages_1 > out_Page_2;
    out_Tmp_304 := out_Page_2;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume out_Tmp_304 <= 2;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume out_Tmp_304 != 2;
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume out_Tmp_304 != 1;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume out_Tmp_304 != 0;
    goto L348;

  L348:
    out_Tmp_339 := out_Tmp_308 + 1 * 4;
    out_Tmp_369 := out_Page_2;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume out_Tmp_369 <= 2;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume out_Tmp_369 != 2;
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume out_Tmp_369 != 1;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume out_Tmp_369 != 0;
    goto L358;

  L358:
    out_Tmp_378 := out_Tmp_346;
    call {:si_unique_call 1615} FatPrepareWriteVolumeFile#1(in_IrpContext_21, in_Vcb_16, out_Offset_1, 4096, out_Tmp_378, out_Tmp_339, 1, 0);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} out_Page_2 == 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_371;
    assume {:nonnull} out_Tmp_371 != 0;
    assume out_Tmp_371 > 0;
    havoc out_FatEntry_4;
    goto L186;

  L186:
    out_Page_2 := out_Page_2 + 1;
    out_Offset_1 := out_Offset_1 + 4096;
    goto L186_dummy;

  L186_dummy:
    call {:si_unique_call 1616} {:si_old_unique_call 1} out_Tmp_304, out_Tmp_308, out_FatEntry_4, out_Tmp_339, out_Offset_1, out_Tmp_346, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_378 := FatSetFatRun_loop_L177(out_Tmp_304, out_Tmp_308, out_FatEntry_4, out_Tmp_339, out_Offset_1, out_Tmp_346, in_SavedBcbs, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_378, in_NumberOfPages_1, in_IrpContext_21, in_Vcb_16);
    return;

  anon225_Then:
    assume {:partition} out_Page_2 != 0;
    goto L186;

  anon273_Then:
    assume out_Tmp_369 == 0;
    out_Tmp_369 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon272_Then:
    assume out_Tmp_369 == 1;
    out_Tmp_369 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon271_Then:
    assume out_Tmp_369 == 2;
    out_Tmp_369 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon270_Then:
    assume out_Tmp_369 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon276_Then:
    assume out_Tmp_304 == 0;
    out_Tmp_304 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon275_Then:
    assume out_Tmp_304 == 1;
    out_Tmp_304 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon274_Then:
    assume out_Tmp_304 == 2;
    out_Tmp_304 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon269_Then:
    assume out_Tmp_304 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L177(in_Tmp_304: int, in_Tmp_308: int, in_FatEntry_4: int, in_Tmp_339: int, in_Offset_1: int, in_Tmp_346: int, in_SavedBcbs: int, in_Page_2: int, in_Tmp_369: int, in_Tmp_371: int, in_Tmp_378: int, in_NumberOfPages_1: int, in_IrpContext_21: int, in_Vcb_16: int) returns (out_Tmp_304: int, out_Tmp_308: int, out_FatEntry_4: int, out_Tmp_339: int, out_Offset_1: int, out_Tmp_346: int, out_Page_2: int, out_Tmp_369: int, out_Tmp_371: int, out_Tmp_378: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s, Mem_T.Flags__IRP_CONTEXT;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFatRun_loop_L161(in_Lbo_4: int, in_FinalCluster: int, in_Tmp_302: int, in_StartSectorLbo: int, in_Tmp_304: int, in_Tmp_308: int, in_Tmp_311: int, in_Cluster: int, in_Tmp_316: int, in_FinalOffsetInVolume: int, in_Tmp_318: int, in_Tmp_320: int, in_Tmp_328: int, in_Tmp_330: int, in_FatEntry_4: int, in_FinalSectorLbo: int, in_Tmp_339: int, in_i_2: int, in_Offset_1: int, in_Tmp_345: int, in_Tmp_346: int, in_Tmp_348: int, in_Tmp_349: int, in_Tmp_350: int, in_Tmp_351: int, in_Tmp_352: int, in_StartOffsetInVolume_1: int, in_Tmp_358: int, in_SavedBcbs: int, in_Page_2: int, in_Tmp_369: int, in_Tmp_371: int, in_Tmp_374: int, in_SectorSize_1: int, in_Tmp_377: int, in_Tmp_378: int, in_NumberOfPages_1: int, in_ClusterCountThisRun: int, in_Tmp_383: int, in_Tmp_384: int, in_IrpContext_21: int, in_Vcb_16: int, in_StartingFatIndex: int, in_ClusterCount: int, in_ChainTogether: int, in_vslice_dummy_var_39: int) returns (out_Lbo_4: int, out_FinalCluster: int, out_Tmp_302: int, out_StartSectorLbo: int, out_Tmp_304: int, out_Tmp_308: int, out_Tmp_311: int, out_Cluster: int, out_Tmp_316: int, out_FinalOffsetInVolume: int, out_Tmp_318: int, out_Tmp_320: int, out_Tmp_328: int, out_Tmp_330: int, out_FatEntry_4: int, out_FinalSectorLbo: int, out_Tmp_339: int, out_i_2: int, out_Offset_1: int, out_Tmp_345: int, out_Tmp_346: int, out_Tmp_348: int, out_Tmp_349: int, out_Tmp_350: int, out_Tmp_351: int, out_Tmp_352: int, out_StartOffsetInVolume_1: int, out_Tmp_358: int, out_Page_2: int, out_Tmp_369: int, out_Tmp_371: int, out_Tmp_374: int, out_Tmp_377: int, out_Tmp_378: int, out_NumberOfPages_1: int, out_ClusterCountThisRun: int, out_Tmp_383: int, out_Tmp_384: int, out_StartingFatIndex: int, out_ClusterCount: int, out_vslice_dummy_var_39: int)
{

  entry:
    out_Lbo_4, out_FinalCluster, out_Tmp_302, out_StartSectorLbo, out_Tmp_304, out_Tmp_308, out_Tmp_311, out_Cluster, out_Tmp_316, out_FinalOffsetInVolume, out_Tmp_318, out_Tmp_320, out_Tmp_328, out_Tmp_330, out_FatEntry_4, out_FinalSectorLbo, out_Tmp_339, out_i_2, out_Offset_1, out_Tmp_345, out_Tmp_346, out_Tmp_348, out_Tmp_349, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_StartOffsetInVolume_1, out_Tmp_358, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_374, out_Tmp_377, out_Tmp_378, out_NumberOfPages_1, out_ClusterCountThisRun, out_Tmp_383, out_Tmp_384, out_StartingFatIndex, out_ClusterCount, out_vslice_dummy_var_39 := in_Lbo_4, in_FinalCluster, in_Tmp_302, in_StartSectorLbo, in_Tmp_304, in_Tmp_308, in_Tmp_311, in_Cluster, in_Tmp_316, in_FinalOffsetInVolume, in_Tmp_318, in_Tmp_320, in_Tmp_328, in_Tmp_330, in_FatEntry_4, in_FinalSectorLbo, in_Tmp_339, in_i_2, in_Offset_1, in_Tmp_345, in_Tmp_346, in_Tmp_348, in_Tmp_349, in_Tmp_350, in_Tmp_351, in_Tmp_352, in_StartOffsetInVolume_1, in_Tmp_358, in_Page_2, in_Tmp_369, in_Tmp_371, in_Tmp_374, in_Tmp_377, in_Tmp_378, in_NumberOfPages_1, in_ClusterCountThisRun, in_Tmp_383, in_Tmp_384, in_StartingFatIndex, in_ClusterCount, in_vslice_dummy_var_39;
    goto L161, exit;

  exit:
    return;

  L161:
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    out_Tmp_383 := Bpb__VCB(in_Vcb_16);
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    out_Tmp_384 := Bpb__VCB(in_Vcb_16);
    assume {:nonnull} out_Tmp_383 != 0;
    assume out_Tmp_383 > 0;
    assume {:nonnull} out_Tmp_384 != 0;
    assume out_Tmp_384 > 0;
    havoc out_StartOffsetInVolume_1;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:partition} out_ClusterCount > 65536;
    out_ClusterCountThisRun := 65536;
    goto L165;

  L165:
    out_FinalOffsetInVolume := out_StartOffsetInVolume_1 + (out_ClusterCountThisRun - 1) * 4;
    out_NumberOfPages_1 := INTDIV(out_FinalOffsetInVolume, 4096) - INTDIV(out_StartOffsetInVolume_1, 4096) + 1;
    out_Tmp_374 := (out_NumberOfPages_1 + 1) * 4 * 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_349;
    call {:si_unique_call 1622} sdv_RtlZeroMemory(0, out_Tmp_374);
    out_Page_2 := 0;
    out_Offset_1 := BAND(out_StartOffsetInVolume_1, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    goto L177;

  L177:
    call {:si_unique_call 1621} out_Tmp_304, out_Tmp_308, out_FatEntry_4, out_Tmp_339, out_Offset_1, out_Tmp_346, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_378 := FatSetFatRun_loop_L177(out_Tmp_304, out_Tmp_308, out_FatEntry_4, out_Tmp_339, out_Offset_1, out_Tmp_346, in_SavedBcbs, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_378, out_NumberOfPages_1, in_IrpContext_21, in_Vcb_16);
    goto L177_last;

  L177_last:
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} out_NumberOfPages_1 > out_Page_2;
    out_Tmp_304 := out_Page_2;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume out_Tmp_304 <= 2;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume out_Tmp_304 != 2;
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume out_Tmp_304 != 1;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume out_Tmp_304 != 0;
    goto L348;

  L348:
    out_Tmp_339 := out_Tmp_308 + 1 * 4;
    out_Tmp_369 := out_Page_2;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume out_Tmp_369 <= 2;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume out_Tmp_369 != 2;
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume out_Tmp_369 != 1;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume out_Tmp_369 != 0;
    goto L358;

  L358:
    out_Tmp_378 := out_Tmp_346;
    call {:si_unique_call 1623} FatPrepareWriteVolumeFile#1(in_IrpContext_21, in_Vcb_16, out_Offset_1, 4096, out_Tmp_378, out_Tmp_339, 1, 0);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} out_Page_2 == 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_371;
    assume {:nonnull} out_Tmp_371 != 0;
    assume out_Tmp_371 > 0;
    havoc out_FatEntry_4;
    goto L186;

  L186:
    out_Page_2 := out_Page_2 + 1;
    out_Offset_1 := out_Offset_1 + 4096;
    assume false;
    return;

  anon225_Then:
    assume {:partition} out_Page_2 != 0;
    goto L186;

  anon273_Then:
    assume out_Tmp_369 == 0;
    out_Tmp_369 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon272_Then:
    assume out_Tmp_369 == 1;
    out_Tmp_369 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon271_Then:
    assume out_Tmp_369 == 2;
    out_Tmp_369 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon270_Then:
    assume out_Tmp_369 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_346;
    goto L358;

  anon276_Then:
    assume out_Tmp_304 == 0;
    out_Tmp_304 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon275_Then:
    assume out_Tmp_304 == 1;
    out_Tmp_304 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon274_Then:
    assume out_Tmp_304 == 2;
    out_Tmp_304 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon269_Then:
    assume out_Tmp_304 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_308;
    goto L348;

  anon224_Then:
    assume {:partition} out_Page_2 >= out_NumberOfPages_1;
    out_StartSectorLbo := BAND(out_StartOffsetInVolume_1, BNOT(in_SectorSize_1 - 1));
    out_FinalSectorLbo := BAND(out_FinalOffsetInVolume, BNOT(in_SectorSize_1 - 1));
    out_Lbo_4 := out_StartSectorLbo;
    goto L191;

  L191:
    call {:si_unique_call 1619} out_Lbo_4, out_Tmp_320, out_vslice_dummy_var_39 := FatSetFatRun_loop_L191(out_Lbo_4, out_Tmp_320, out_FinalSectorLbo, in_SectorSize_1, in_Vcb_16, out_vslice_dummy_var_39);
    goto L191_last;

  L191_last:
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:partition} out_FinalSectorLbo >= out_Lbo_4;
    out_Tmp_320 := out_Lbo_4;
    assume {:nonnull} in_Vcb_16 != 0;
    assume in_Vcb_16 > 0;
    call {:si_unique_call 1620} out_vslice_dummy_var_39 := FatAddMcbEntry(in_Vcb_16, DirtyFatMcb__VCB(in_Vcb_16), out_Tmp_320, out_Lbo_4, in_SectorSize_1);
    out_Lbo_4 := out_Lbo_4 + in_SectorSize_1;
    assume false;
    return;

  anon226_Then:
    assume {:partition} out_Lbo_4 > out_FinalSectorLbo;
    out_FinalCluster := out_StartingFatIndex + out_ClusterCountThisRun - 1;
    out_Page_2 := 0;
    out_Cluster := out_StartingFatIndex;
    goto L200;

  L200:
    call {:si_unique_call 1618} out_Tmp_302, out_Cluster, out_FatEntry_4, out_Tmp_345, out_Tmp_348, out_Page_2 := FatSetFatRun_loop_L200(out_FinalCluster, out_Tmp_302, out_Cluster, out_FatEntry_4, out_Tmp_345, out_Tmp_348, in_SavedBcbs, out_Page_2, out_StartingFatIndex, in_ChainTogether);
    goto L200_last;

  L200_last:
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:partition} out_FinalCluster >= out_Cluster;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    assume {:partition} BAND(out_FatEntry_4, 4095) != 0;
    goto L204;

  L204:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} in_ChainTogether != 0;
    out_Tmp_302 := out_Cluster + 1;
    goto L207;

  L207:
    assume {:nonnull} out_FatEntry_4 != 0;
    assume out_FatEntry_4 > 0;
    Mem_T.INT4[out_FatEntry_4] := out_Tmp_302;
    out_Cluster := out_Cluster + 1;
    assume false;
    return;

  anon231_Then:
    assume {:partition} in_ChainTogether == 0;
    out_Tmp_302 := 0;
    goto L207;

  anon229_Then:
    assume {:partition} BAND(out_FatEntry_4, 4095) == 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} out_Cluster != out_StartingFatIndex;
    out_Page_2 := out_Page_2 + 1;
    out_Tmp_348 := out_Page_2;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume out_Tmp_348 <= 2;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume out_Tmp_348 != 2;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume out_Tmp_348 != 1;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume out_Tmp_348 != 0;
    goto L368;

  L368:
    assume {:nonnull} out_Tmp_345 != 0;
    assume out_Tmp_345 > 0;
    havoc out_FatEntry_4;
    goto L204;

  anon280_Then:
    assume out_Tmp_348 == 0;
    out_Tmp_348 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon279_Then:
    assume out_Tmp_348 == 1;
    out_Tmp_348 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon278_Then:
    assume out_Tmp_348 == 2;
    out_Tmp_348 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon277_Then:
    assume out_Tmp_348 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_345;
    goto L368;

  anon230_Then:
    assume {:partition} out_Cluster == out_StartingFatIndex;
    goto L204;

  anon227_Then:
    assume {:partition} out_Cluster > out_FinalCluster;
    goto anon228_Then, anon228_Else;

  anon228_Else:
    assume {:partition} 65536 < out_ClusterCount;
    goto L215;

  L215:
    out_i_2 := 0;
    goto L216;

  L216:
    call {:si_unique_call 1617} out_Tmp_311, out_Tmp_316, out_Tmp_318, out_Tmp_328, out_Tmp_330, out_i_2, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_Tmp_358, out_Tmp_377 := FatSetFatRun_loop_L216(out_Tmp_311, out_Tmp_316, out_Tmp_318, out_Tmp_328, out_Tmp_330, out_i_2, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_Tmp_358, in_SavedBcbs, out_Tmp_377);
    goto L216_last;

  L216_last:
    out_Tmp_358 := out_i_2;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume out_Tmp_358 <= 2;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume out_Tmp_358 != 2;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume out_Tmp_358 != 1;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume out_Tmp_358 != 0;
    goto L378;

  L378:
    assume {:nonnull} out_Tmp_316 != 0;
    assume out_Tmp_316 > 0;
    goto anon244_Then, anon244_Else;

  anon244_Else:
    out_Tmp_318 := out_i_2;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume out_Tmp_318 <= 2;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume out_Tmp_318 != 2;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume out_Tmp_318 != 1;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume out_Tmp_318 != 0;
    goto L388;

  L388:
    assume {:nonnull} out_Tmp_311 != 0;
    assume out_Tmp_311 > 0;
    goto anon245_Then, anon245_Else;

  anon245_Else:
    out_Tmp_351 := out_i_2;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume out_Tmp_351 <= 2;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume out_Tmp_351 != 2;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume out_Tmp_351 != 1;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume out_Tmp_351 != 0;
    goto L398;

  L398:
    assume {:nonnull} out_Tmp_377 != 0;
    assume out_Tmp_377 > 0;
    out_Tmp_352 := out_i_2;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume out_Tmp_352 <= 2;
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume out_Tmp_352 != 2;
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume out_Tmp_352 != 1;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume out_Tmp_352 != 0;
    goto L408;

  L408:
    assume {:nonnull} out_Tmp_350 != 0;
    assume out_Tmp_350 > 0;
    goto L219;

  L219:
    out_Tmp_328 := out_i_2;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume out_Tmp_328 <= 2;
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume out_Tmp_328 != 2;
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume out_Tmp_328 != 1;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume out_Tmp_328 != 0;
    goto L418;

  L418:
    assume {:nonnull} out_Tmp_330 != 0;
    assume out_Tmp_330 > 0;
    out_i_2 := out_i_2 + 1;
    assume false;
    return;

  anon288_Then:
    assume out_Tmp_328 == 0;
    out_Tmp_328 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon287_Then:
    assume out_Tmp_328 == 1;
    out_Tmp_328 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon286_Then:
    assume out_Tmp_328 == 2;
    out_Tmp_328 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon285_Then:
    assume out_Tmp_328 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_330;
    goto L418;

  anon291_Then:
    assume out_Tmp_352 == 0;
    out_Tmp_352 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon290_Then:
    assume out_Tmp_352 == 1;
    out_Tmp_352 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon289_Then:
    assume out_Tmp_352 == 2;
    out_Tmp_352 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon284_Then:
    assume out_Tmp_352 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_350;
    goto L408;

  anon294_Then:
    assume out_Tmp_351 == 0;
    out_Tmp_351 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon293_Then:
    assume out_Tmp_351 == 1;
    out_Tmp_351 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon292_Then:
    assume out_Tmp_351 == 2;
    out_Tmp_351 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon283_Then:
    assume out_Tmp_351 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_377;
    goto L398;

  anon245_Then:
    goto L219;

  anon297_Then:
    assume out_Tmp_318 == 0;
    out_Tmp_318 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon296_Then:
    assume out_Tmp_318 == 1;
    out_Tmp_318 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon295_Then:
    assume out_Tmp_318 == 2;
    out_Tmp_318 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon282_Then:
    assume out_Tmp_318 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_311;
    goto L388;

  anon244_Then:
    goto anon233_Else;

  anon233_Else:
    assume {:partition} 65536 < out_ClusterCount;
    out_StartingFatIndex := out_StartingFatIndex + 65536;
    out_ClusterCount := out_ClusterCount - 65536;
    goto anon233_Else_dummy;

  anon233_Else_dummy:
    call {:si_unique_call 1624} {:si_old_unique_call 1} out_Lbo_4, out_FinalCluster, out_Tmp_302, out_StartSectorLbo, out_Tmp_304, out_Tmp_308, out_Tmp_311, out_Cluster, out_Tmp_316, out_FinalOffsetInVolume, out_Tmp_318, out_Tmp_320, out_Tmp_328, out_Tmp_330, out_FatEntry_4, out_FinalSectorLbo, out_Tmp_339, out_i_2, out_Offset_1, out_Tmp_345, out_Tmp_346, out_Tmp_348, out_Tmp_349, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_StartOffsetInVolume_1, out_Tmp_358, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_374, out_Tmp_377, out_Tmp_378, out_NumberOfPages_1, out_ClusterCountThisRun, out_Tmp_383, out_Tmp_384, out_StartingFatIndex, out_ClusterCount, out_vslice_dummy_var_39 := FatSetFatRun_loop_L161(out_Lbo_4, out_FinalCluster, out_Tmp_302, out_StartSectorLbo, out_Tmp_304, out_Tmp_308, out_Tmp_311, out_Cluster, out_Tmp_316, out_FinalOffsetInVolume, out_Tmp_318, out_Tmp_320, out_Tmp_328, out_Tmp_330, out_FatEntry_4, out_FinalSectorLbo, out_Tmp_339, out_i_2, out_Offset_1, out_Tmp_345, out_Tmp_346, out_Tmp_348, out_Tmp_349, out_Tmp_350, out_Tmp_351, out_Tmp_352, out_StartOffsetInVolume_1, out_Tmp_358, in_SavedBcbs, out_Page_2, out_Tmp_369, out_Tmp_371, out_Tmp_374, in_SectorSize_1, out_Tmp_377, out_Tmp_378, out_NumberOfPages_1, out_ClusterCountThisRun, out_Tmp_383, out_Tmp_384, in_IrpContext_21, in_Vcb_16, out_StartingFatIndex, out_ClusterCount, in_ChainTogether, out_vslice_dummy_var_39);
    return;

  anon300_Then:
    assume out_Tmp_358 == 0;
    out_Tmp_358 := 0;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon299_Then:
    assume out_Tmp_358 == 1;
    out_Tmp_358 := 1;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon298_Then:
    assume out_Tmp_358 == 2;
    out_Tmp_358 := 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon281_Then:
    assume out_Tmp_358 > 2;
    assume {:nonnull} in_SavedBcbs != 0;
    assume in_SavedBcbs > 0;
    havoc out_Tmp_316;
    goto L378;

  anon228_Then:
    assume {:partition} out_ClusterCount <= 65536;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} in_ChainTogether == 0;
    goto L215;

  anon232_Then:
    assume {:partition} in_ChainTogether != 0;
    assume {:nonnull} out_FatEntry_4 != 0;
    assume out_FatEntry_4 > 0;
    Mem_T.INT4[out_FatEntry_4] := 268435455;
    goto L215;

  anon268_Then:
    assume {:partition} 65536 >= out_ClusterCount;
    out_ClusterCountThisRun := out_ClusterCount;
    goto L165;
}



procedure {:LoopProcedure} FatSetFatRun_loop_L161(in_Lbo_4: int, in_FinalCluster: int, in_Tmp_302: int, in_StartSectorLbo: int, in_Tmp_304: int, in_Tmp_308: int, in_Tmp_311: int, in_Cluster: int, in_Tmp_316: int, in_FinalOffsetInVolume: int, in_Tmp_318: int, in_Tmp_320: int, in_Tmp_328: int, in_Tmp_330: int, in_FatEntry_4: int, in_FinalSectorLbo: int, in_Tmp_339: int, in_i_2: int, in_Offset_1: int, in_Tmp_345: int, in_Tmp_346: int, in_Tmp_348: int, in_Tmp_349: int, in_Tmp_350: int, in_Tmp_351: int, in_Tmp_352: int, in_StartOffsetInVolume_1: int, in_Tmp_358: int, in_SavedBcbs: int, in_Page_2: int, in_Tmp_369: int, in_Tmp_371: int, in_Tmp_374: int, in_SectorSize_1: int, in_Tmp_377: int, in_Tmp_378: int, in_NumberOfPages_1: int, in_ClusterCountThisRun: int, in_Tmp_383: int, in_Tmp_384: int, in_IrpContext_21: int, in_Vcb_16: int, in_StartingFatIndex: int, in_ClusterCount: int, in_ChainTogether: int, in_vslice_dummy_var_39: int) returns (out_Lbo_4: int, out_FinalCluster: int, out_Tmp_302: int, out_StartSectorLbo: int, out_Tmp_304: int, out_Tmp_308: int, out_Tmp_311: int, out_Cluster: int, out_Tmp_316: int, out_FinalOffsetInVolume: int, out_Tmp_318: int, out_Tmp_320: int, out_Tmp_328: int, out_Tmp_330: int, out_FatEntry_4: int, out_FinalSectorLbo: int, out_Tmp_339: int, out_i_2: int, out_Offset_1: int, out_Tmp_345: int, out_Tmp_346: int, out_Tmp_348: int, out_Tmp_349: int, out_Tmp_350: int, out_Tmp_351: int, out_Tmp_352: int, out_StartOffsetInVolume_1: int, out_Tmp_358: int, out_Page_2: int, out_Tmp_369: int, out_Tmp_371: int, out_Tmp_374: int, out_Tmp_377: int, out_Tmp_378: int, out_NumberOfPages_1: int, out_ClusterCountThisRun: int, out_Tmp_383: int, out_Tmp_384: int, out_StartingFatIndex: int, out_ClusterCount: int, out_vslice_dummy_var_39: int);
  modifies Mem_T.INT4, alloc, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s, Mem_T.Flags__IRP_CONTEXT;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} out_Tmp_383 == in_Tmp_383 || out_Tmp_383 == Bpb__VCB(in_Vcb_16);
  free ensures {:va_keep} out_Tmp_384 == in_Tmp_384 || out_Tmp_384 == Bpb__VCB(in_Vcb_16);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatDeallocateDiskSpace_loop_L107(in_count: int, in_Window: int, in_Tmp_416: int, in_MyLength: int, in_MyStart: int) returns (out_count: int, out_Tmp_416: int, out_MyLength: int, out_MyStart: int)
{

  entry:
    out_count, out_Tmp_416, out_MyLength, out_MyStart := in_count, in_Tmp_416, in_MyLength, in_MyStart;
    goto L107, exit;

  exit:
    return;

  L107:
    goto anon48_Else;

  anon48_Else:
    assume {:partition} out_MyLength > 0;
    assume {:nonnull} in_Window != 0;
    assume in_Window > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} in_Window != 0;
    assume in_Window > 0;
    havoc out_Tmp_416;
    goto L112;

  L112:
    out_count := out_Tmp_416;
    assume {:nonnull} in_Window != 0;
    assume in_Window > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} out_MyLength != out_count;
    assume {:nonnull} in_Window != 0;
    assume in_Window > 0;
    havoc out_MyStart;
    goto L115;

  L115:
    out_MyLength := out_MyLength - out_count;
    goto L115_dummy;

  L115_dummy:
    call {:si_unique_call 1625} {:si_old_unique_call 1} out_count, out_Tmp_416, out_MyLength, out_MyStart := FatDeallocateDiskSpace_loop_L107(out_count, in_Window, out_Tmp_416, out_MyLength, out_MyStart);
    return;

  anon61_Then:
    assume {:partition} out_MyLength == out_count;
    goto L115;

  anon49_Then:
    out_Tmp_416 := out_MyLength;
    goto L112;
}



procedure {:LoopProcedure} FatDeallocateDiskSpace_loop_L107(in_count: int, in_Window: int, in_Tmp_416: int, in_MyLength: int, in_MyStart: int) returns (out_count: int, out_Tmp_416: int, out_MyLength: int, out_MyStart: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatDeallocateDiskSpace_loop_L154(in_McbIndex: int, in_LocalLbo: int, in_Clusters: int, in_FatIndex_3: int, in_PriorLastIndex: int, in_Index_1: int, in_LocalVbo: int, in_ByteCount_3: int, in_IrpContext_23: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_46: int) returns (out_Clusters: int, out_FatIndex_3: int, out_PriorLastIndex: int, out_Index_1: int, out_vslice_dummy_var_46: int)
{

  entry:
    out_Clusters, out_FatIndex_3, out_PriorLastIndex, out_Index_1, out_vslice_dummy_var_46 := in_Clusters, in_FatIndex_3, in_PriorLastIndex, in_Index_1, in_vslice_dummy_var_46;
    goto L154, exit;

  exit:
    return;

  L154:
    goto anon56_Else;

  anon56_Else:
    assume {:partition} in_McbIndex >= out_Index_1;
    call {:si_unique_call 1627} out_vslice_dummy_var_46 := FatGetNextMcbEntry(in_Vcb_18, in_Mcb_1, out_Index_1, in_LocalVbo, in_LocalLbo, in_ByteCount_3);
    call {:si_unique_call 1628} out_FatIndex_3 := corral_nondet();
    call {:si_unique_call 1629} out_Clusters := corral_nondet();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} out_PriorLastIndex != 0;
    call {:si_unique_call 1626} FatSetFatEntry#1(in_IrpContext_23, in_Vcb_18, out_PriorLastIndex, out_FatIndex_3);
    goto L161;

  L161:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} in_McbIndex > out_Index_1;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} out_Clusters == 1;
    call {:si_unique_call 1630} FatSetFatEntry#1(in_IrpContext_23, in_Vcb_18, out_FatIndex_3, 268435455);
    goto L173;

  L173:
    out_PriorLastIndex := out_FatIndex_3 + out_Clusters - 1;
    goto L165;

  L165:
    out_Index_1 := out_Index_1 + 1;
    goto L165_dummy;

  L165_dummy:
    call {:si_unique_call 1632} {:si_old_unique_call 1} out_Clusters, out_FatIndex_3, out_PriorLastIndex, out_Index_1, out_vslice_dummy_var_46 := FatDeallocateDiskSpace_loop_L154(in_McbIndex, in_LocalLbo, out_Clusters, out_FatIndex_3, out_PriorLastIndex, out_Index_1, in_LocalVbo, in_ByteCount_3, in_IrpContext_23, in_Vcb_18, in_Mcb_1, out_vslice_dummy_var_46);
    return;

  anon58_Then:
    assume {:partition} out_Clusters != 1;
    call {:si_unique_call 1631} FatSetFatRun(in_IrpContext_23, in_Vcb_18, out_FatIndex_3, out_Clusters, 1);
    goto L173;

  anon57_Then:
    assume {:partition} out_Index_1 >= in_McbIndex;
    goto L165;

  anon63_Then:
    assume {:partition} out_PriorLastIndex == 0;
    goto L161;
}



procedure {:LoopProcedure} FatDeallocateDiskSpace_loop_L154(in_McbIndex: int, in_LocalLbo: int, in_Clusters: int, in_FatIndex_3: int, in_PriorLastIndex: int, in_Index_1: int, in_LocalVbo: int, in_ByteCount_3: int, in_IrpContext_23: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_46: int) returns (out_Clusters: int, out_FatIndex_3: int, out_PriorLastIndex: int, out_Index_1: int, out_vslice_dummy_var_46: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatDeallocateDiskSpace_loop_L85(in_count: int, in_McbIndex: int, in_Lbo_5: int, in_Vbo_1: int, in_Tmp_413: int, in_Window: int, in_RunsInMcb: int, in_ClusterEnd: int, in_Tmp_414: int, in_Tmp_416: int, in_Tmp_417: int, in_MyLength: int, in_MyStart: int, in_ClusterIndex: int, in_ClusterCount_1: int, in_ByteCount_3: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_45: int) returns (out_count: int, out_McbIndex: int, out_Tmp_413: int, out_Window: int, out_ClusterEnd: int, out_Tmp_414: int, out_Tmp_416: int, out_Tmp_417: int, out_MyLength: int, out_MyStart: int, out_ClusterIndex: int, out_ClusterCount_1: int, out_vslice_dummy_var_45: int)
{

  entry:
    out_count, out_McbIndex, out_Tmp_413, out_Window, out_ClusterEnd, out_Tmp_414, out_Tmp_416, out_Tmp_417, out_MyLength, out_MyStart, out_ClusterIndex, out_ClusterCount_1, out_vslice_dummy_var_45 := in_count, in_McbIndex, in_Tmp_413, in_Window, in_ClusterEnd, in_Tmp_414, in_Tmp_416, in_Tmp_417, in_MyLength, in_MyStart, in_ClusterIndex, in_ClusterCount_1, in_vslice_dummy_var_45;
    goto L85, exit;

  exit:
    return;

  L85:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} in_RunsInMcb > out_McbIndex;
    call {:si_unique_call 1633} out_vslice_dummy_var_45 := FatGetNextMcbEntry(in_Vcb_18, in_Mcb_1, out_McbIndex, in_Vbo_1, in_Lbo_5, in_ByteCount_3);
    call {:si_unique_call 1634} out_ClusterCount_1 := corral_nondet();
    call {:si_unique_call 1635} out_ClusterIndex := corral_nondet();
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    havoc out_Window;
    out_ClusterEnd := out_ClusterIndex + out_ClusterCount_1 - 1;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L102;

  L102:
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    out_Tmp_414 := INTDIV(out_ClusterIndex - 2, 65536);
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    havoc out_Tmp_417;
    out_Window := out_Tmp_417 + out_Tmp_414 * 12;
    goto L105;

  L105:
    out_MyStart := out_ClusterIndex;
    out_MyLength := out_ClusterCount_1;
    goto L107;

  L107:
    call {:si_unique_call 1636} out_count, out_Tmp_416, out_MyLength, out_MyStart := FatDeallocateDiskSpace_loop_L107(out_count, out_Window, out_Tmp_416, out_MyLength, out_MyStart);
    goto L107_last;

  L107_last:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} out_MyLength > 0;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_Tmp_416;
    goto L112;

  L112:
    out_count := out_Tmp_416;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} out_MyLength != out_count;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyStart;
    goto L115;

  L115:
    out_MyLength := out_MyLength - out_count;
    assume false;
    return;

  anon61_Then:
    assume {:partition} out_MyLength == out_count;
    goto L115;

  anon49_Then:
    out_Tmp_416 := out_MyLength;
    goto L112;

  anon48_Then:
    assume {:partition} 0 >= out_MyLength;
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    Mem_T.INT4[NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(in_Vcb_18))] := Mem_T.INT4[NumberOfFreeClusters_unnamed_tag_65(AllocationSupport__VCB(in_Vcb_18))] + out_ClusterCount_1;
    goto L118;

  L118:
    out_McbIndex := out_McbIndex + 1;
    goto L118_dummy;

  L118_dummy:
    call {:si_unique_call 1637} {:si_old_unique_call 1} out_count, out_McbIndex, out_Tmp_413, out_Window, out_ClusterEnd, out_Tmp_414, out_Tmp_416, out_Tmp_417, out_MyLength, out_MyStart, out_ClusterIndex, out_ClusterCount_1, out_vslice_dummy_var_45 := FatDeallocateDiskSpace_loop_L85(out_count, out_McbIndex, in_Lbo_5, in_Vbo_1, out_Tmp_413, out_Window, in_RunsInMcb, out_ClusterEnd, out_Tmp_414, out_Tmp_416, out_Tmp_417, out_MyLength, out_MyStart, out_ClusterIndex, out_ClusterCount_1, in_ByteCount_3, in_Vcb_18, in_Mcb_1, out_vslice_dummy_var_45);
    return;

  anon47_Then:
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    havoc out_Tmp_413;
    out_Window := out_Tmp_413;
    goto L105;

  anon60_Then:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyStart;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyLength;
    goto L124;

  L124:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} out_MyLength != 0;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} in_Vcb_18 != 0;
    assume in_Vcb_18 > 0;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto L102;

  anon54_Then:
    goto L102;

  anon53_Then:
    assume {:partition} out_MyLength == 0;
    goto L118;

  anon52_Then:
    goto L120;

  L120:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyStart;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyLength;
    goto L124;

  anon51_Then:
    out_MyStart := out_ClusterIndex;
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    out_MyLength := out_ClusterCount_1;
    goto L124;

  anon62_Then:
    assume {:nonnull} out_Window != 0;
    assume out_Window > 0;
    havoc out_MyLength;
    goto L124;

  anon50_Then:
    goto L120;

  anon46_Then:
    goto L102;
}



procedure {:LoopProcedure} FatDeallocateDiskSpace_loop_L85(in_count: int, in_McbIndex: int, in_Lbo_5: int, in_Vbo_1: int, in_Tmp_413: int, in_Window: int, in_RunsInMcb: int, in_ClusterEnd: int, in_Tmp_414: int, in_Tmp_416: int, in_Tmp_417: int, in_MyLength: int, in_MyStart: int, in_ClusterIndex: int, in_ClusterCount_1: int, in_ByteCount_3: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_45: int) returns (out_count: int, out_McbIndex: int, out_Tmp_413: int, out_Window: int, out_ClusterEnd: int, out_Tmp_414: int, out_Tmp_416: int, out_Tmp_417: int, out_MyLength: int, out_MyStart: int, out_ClusterIndex: int, out_ClusterCount_1: int, out_vslice_dummy_var_45: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatDeallocateDiskSpace_loop_L67(in_McbIndex: int, in_Lbo_5: int, in_Vbo_1: int, in_RunsInMcb: int, in_ClusterIndex: int, in_ClusterCount_1: int, in_ByteCount_3: int, in_IrpContext_23: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_44: int) returns (out_McbIndex: int, out_ClusterIndex: int, out_ClusterCount_1: int, out_vslice_dummy_var_44: int)
{

  entry:
    out_McbIndex, out_ClusterIndex, out_ClusterCount_1, out_vslice_dummy_var_44 := in_McbIndex, in_ClusterIndex, in_ClusterCount_1, in_vslice_dummy_var_44;
    goto L67, exit;

  exit:
    return;

  L67:
    goto anon44_Else;

  anon44_Else:
    assume {:partition} in_RunsInMcb > out_McbIndex;
    call {:si_unique_call 1640} out_vslice_dummy_var_44 := FatGetNextMcbEntry(in_Vcb_18, in_Mcb_1, out_McbIndex, in_Vbo_1, in_Lbo_5, in_ByteCount_3);
    call {:si_unique_call 1641} out_ClusterCount_1 := corral_nondet();
    call {:si_unique_call 1642} out_ClusterIndex := corral_nondet();
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_ClusterCount_1 == 1;
    call {:si_unique_call 1638} FatSetFatEntry#1(in_IrpContext_23, in_Vcb_18, out_ClusterIndex, 0);
    goto L83;

  L83:
    out_McbIndex := out_McbIndex + 1;
    goto L83_dummy;

  L83_dummy:
    call {:si_unique_call 1643} {:si_old_unique_call 1} out_McbIndex, out_ClusterIndex, out_ClusterCount_1, out_vslice_dummy_var_44 := FatDeallocateDiskSpace_loop_L67(out_McbIndex, in_Lbo_5, in_Vbo_1, in_RunsInMcb, out_ClusterIndex, out_ClusterCount_1, in_ByteCount_3, in_IrpContext_23, in_Vcb_18, in_Mcb_1, out_vslice_dummy_var_44);
    return;

  anon59_Then:
    assume {:partition} out_ClusterCount_1 != 1;
    call {:si_unique_call 1639} FatSetFatRun(in_IrpContext_23, in_Vcb_18, out_ClusterIndex, out_ClusterCount_1, 0);
    goto L83;
}



procedure {:LoopProcedure} FatDeallocateDiskSpace_loop_L67(in_McbIndex: int, in_Lbo_5: int, in_Vbo_1: int, in_RunsInMcb: int, in_ClusterIndex: int, in_ClusterCount_1: int, in_ByteCount_3: int, in_IrpContext_23: int, in_Vcb_18: int, in_Mcb_1: int, in_vslice_dummy_var_44: int) returns (out_McbIndex: int, out_ClusterIndex: int, out_ClusterCount_1: int, out_vslice_dummy_var_44: int);
  modifies alloc, Mem_T.Flags__IRP_CONTEXT, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatUnpinRepinnedBcbs_loop_L49(in_Tmp_682: int, in_Tmp_683: int, in_Tmp_687: int, in_j: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_sdv_269: int, in_Tmp_700: int, in_Repinned: int, in_Tmp_704: int, in_Tmp_708: int) returns (out_Tmp_682: int, out_Tmp_683: int, out_Tmp_687: int, out_j: int, out_Tmp_691: int, out_Tmp_692: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_704: int, out_Tmp_708: int)
{

  entry:
    out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, out_Tmp_704, out_Tmp_708 := in_Tmp_682, in_Tmp_683, in_Tmp_687, in_j, in_Tmp_691, in_Tmp_692, in_sdv_269, in_Tmp_700, in_Tmp_704, in_Tmp_708;
    goto L49, exit;

  exit:
    return;

  L49:
    goto anon111_Else;

  anon111_Else:
    assume {:partition} 4 > out_j;
    out_Tmp_700 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_687;
    assume {:nonnull} out_Tmp_687 != 0;
    assume out_Tmp_687 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    out_Tmp_692 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_708;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume out_Tmp_692 <= 2;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume out_Tmp_692 != 2;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume out_Tmp_692 != 1;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume out_Tmp_692 != 0;
    goto L144;

  L144:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    out_sdv_269 := 0;
    goto L59;

  L59:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_sdv_269 == in_FileObject_1;
    out_Tmp_682 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_683;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume out_Tmp_682 <= 2;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume out_Tmp_682 != 2;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume out_Tmp_682 != 1;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume out_Tmp_682 != 0;
    goto L154;

  L154:
    out_Tmp_704 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_691;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume out_Tmp_704 <= 2;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume out_Tmp_704 != 2;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume out_Tmp_704 != 1;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume out_Tmp_704 != 0;
    goto L54;

  L54:
    out_j := out_j + 1;
    goto L54_dummy;

  L54_dummy:
    call {:si_unique_call 1645} {:si_old_unique_call 1} out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, out_Tmp_704, out_Tmp_708 := FatUnpinRepinnedBcbs_loop_L49(out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, in_FileObject_1, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, in_Repinned, out_Tmp_704, out_Tmp_708);
    return;

  anon134_Then:
    assume out_Tmp_704 == 0;
    out_Tmp_704 := 0;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon133_Then:
    assume out_Tmp_704 == 1;
    out_Tmp_704 := 1;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon132_Then:
    assume out_Tmp_704 == 2;
    out_Tmp_704 := 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon131_Then:
    assume out_Tmp_704 > 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon137_Then:
    assume out_Tmp_682 == 0;
    out_Tmp_682 := 0;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon136_Then:
    assume out_Tmp_682 == 1;
    out_Tmp_682 := 1;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon135_Then:
    assume out_Tmp_682 == 2;
    out_Tmp_682 := 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon130_Then:
    assume out_Tmp_682 > 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon112_Then:
    assume {:partition} out_sdv_269 != in_FileObject_1;
    goto L54;

  anon118_Then:
    call {:si_unique_call 1644} out_sdv_269 := __HAVOC_malloc(1);
    goto L59;

  anon140_Then:
    assume out_Tmp_692 == 0;
    out_Tmp_692 := 0;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon139_Then:
    assume out_Tmp_692 == 1;
    out_Tmp_692 := 1;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon138_Then:
    assume out_Tmp_692 == 2;
    out_Tmp_692 := 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon129_Then:
    assume out_Tmp_692 > 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon128_Then:
    goto L54;
}



procedure {:LoopProcedure} FatUnpinRepinnedBcbs_loop_L49(in_Tmp_682: int, in_Tmp_683: int, in_Tmp_687: int, in_j: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_sdv_269: int, in_Tmp_700: int, in_Repinned: int, in_Tmp_704: int, in_Tmp_708: int) returns (out_Tmp_682: int, out_Tmp_683: int, out_Tmp_687: int, out_j: int, out_Tmp_691: int, out_Tmp_692: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_704: int, out_Tmp_708: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatUnpinRepinnedBcbs_loop_L23(in_i_3: int, in_Tmp_682: int, in_Tmp_683: int, in_Tmp_686: int, in_Tmp_687: int, in_j: int, in_Tmp_690: int, in_Iosb: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_696: int, in_sdv_269: int, in_WriteThroughToDisk: int, in_Tmp_700: int, in_Tmp_701: int, in_ForceVerify: int, in_Repinned: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_RaiseIosb: int, in_Tmp_706: int, in_Tmp_708: int, in_IrpContext_27: int, in_vslice_dummy_var_92: int) returns (out_i_3: int, out_Tmp_682: int, out_Tmp_683: int, out_Tmp_686: int, out_Tmp_687: int, out_j: int, out_Tmp_690: int, out_FileObject_1: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_696: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_701: int, out_ForceVerify: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_708: int, out_vslice_dummy_var_92: int)
{

  entry:
    out_i_3, out_Tmp_682, out_Tmp_683, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_Tmp_708, out_vslice_dummy_var_92 := in_i_3, in_Tmp_682, in_Tmp_683, in_Tmp_686, in_Tmp_687, in_j, in_Tmp_690, in_FileObject_1, in_Tmp_691, in_Tmp_692, in_Tmp_694, in_Tmp_695, in_Tmp_696, in_sdv_269, in_Tmp_700, in_Tmp_701, in_ForceVerify, in_Tmp_703, in_Tmp_704, in_Tmp_705, in_Tmp_706, in_Tmp_708, in_vslice_dummy_var_92;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:CounterLoop 4} {:Counter "i_3"} true;
    goto anon102_Else;

  anon102_Else:
    assume {:partition} 4 > out_i_3;
    out_Tmp_703 := out_i_3;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_686;
    assume {:nonnull} out_Tmp_686 != 0;
    assume out_Tmp_686 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} in_WriteThroughToDisk != 0;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    out_Tmp_701 := Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(in_IrpContext_27)];
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(out_Tmp_701)], 4096) != 0;
    out_Tmp_696 := out_i_3;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_706;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume out_Tmp_696 <= 2;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume out_Tmp_696 != 2;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume out_Tmp_696 != 1;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume out_Tmp_696 != 0;
    goto L114;

  L114:
    goto anon117_Then, anon117_Else;

  anon117_Else:
    out_FileObject_1 := 0;
    goto L29;

  L29:
    out_Tmp_690 := out_i_3;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_694;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume out_Tmp_690 <= 2;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume out_Tmp_690 != 2;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume out_Tmp_690 != 1;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume out_Tmp_690 != 0;
    goto L124;

  L124:
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)] >= 0;
    goto L41;

  L41:
    out_Tmp_705 := out_i_3;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_695;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume out_Tmp_705 <= 2;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume out_Tmp_705 != 2;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume out_Tmp_705 != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume out_Tmp_705 != 0;
    goto L26;

  L26:
    out_i_3 := out_i_3 + 1;
    goto L26_dummy;

  L26_dummy:
    call {:si_unique_call 1650} {:si_old_unique_call 1} out_i_3, out_Tmp_682, out_Tmp_683, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_Tmp_708, out_vslice_dummy_var_92 := FatUnpinRepinnedBcbs_loop_L23(out_i_3, out_Tmp_682, out_Tmp_683, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, in_Iosb, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, in_WriteThroughToDisk, out_Tmp_700, out_Tmp_701, out_ForceVerify, in_Repinned, out_Tmp_703, out_Tmp_704, out_Tmp_705, in_RaiseIosb, out_Tmp_706, out_Tmp_708, in_IrpContext_27, out_vslice_dummy_var_92);
    return;

  anon127_Then:
    assume out_Tmp_705 == 0;
    out_Tmp_705 := 0;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon126_Then:
    assume out_Tmp_705 == 1;
    out_Tmp_705 := 1;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon125_Then:
    assume out_Tmp_705 == 2;
    out_Tmp_705 := 2;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon124_Then:
    assume out_Tmp_705 > 2;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon105_Then:
    assume {:partition} 0 > Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)];
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] != 0;
    goto L43;

  L43:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} out_FileObject_1 != 0;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 18;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 9;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 6;
    out_j := out_i_3 + 1;
    goto L49;

  L49:
    call {:si_unique_call 1648} out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, out_Tmp_704, out_Tmp_708 := FatUnpinRepinnedBcbs_loop_L49(out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, in_Repinned, out_Tmp_704, out_Tmp_708);
    goto L49_last;

  L49_last:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 4 > out_j;
    out_Tmp_700 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_687;
    assume {:nonnull} out_Tmp_687 != 0;
    assume out_Tmp_687 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    out_Tmp_692 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_708;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume out_Tmp_692 <= 2;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume out_Tmp_692 != 2;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume out_Tmp_692 != 1;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume out_Tmp_692 != 0;
    goto L144;

  L144:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    out_sdv_269 := 0;
    goto L59;

  L59:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_sdv_269 == out_FileObject_1;
    out_Tmp_682 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_683;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume out_Tmp_682 <= 2;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume out_Tmp_682 != 2;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume out_Tmp_682 != 1;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume out_Tmp_682 != 0;
    goto L154;

  L154:
    out_Tmp_704 := out_j;
    assume {:nonnull} in_Repinned != 0;
    assume in_Repinned > 0;
    havoc out_Tmp_691;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume out_Tmp_704 <= 2;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume out_Tmp_704 != 2;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume out_Tmp_704 != 1;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume out_Tmp_704 != 0;
    goto L54;

  L54:
    out_j := out_j + 1;
    assume false;
    return;

  anon134_Then:
    assume out_Tmp_704 == 0;
    out_Tmp_704 := 0;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon133_Then:
    assume out_Tmp_704 == 1;
    out_Tmp_704 := 1;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon132_Then:
    assume out_Tmp_704 == 2;
    out_Tmp_704 := 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon131_Then:
    assume out_Tmp_704 > 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon137_Then:
    assume out_Tmp_682 == 0;
    out_Tmp_682 := 0;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon136_Then:
    assume out_Tmp_682 == 1;
    out_Tmp_682 := 1;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon135_Then:
    assume out_Tmp_682 == 2;
    out_Tmp_682 := 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon130_Then:
    assume out_Tmp_682 > 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon112_Then:
    assume {:partition} out_sdv_269 != out_FileObject_1;
    goto L54;

  anon118_Then:
    call {:si_unique_call 1649} out_sdv_269 := __HAVOC_malloc(1);
    goto L59;

  anon140_Then:
    assume out_Tmp_692 == 0;
    out_Tmp_692 := 0;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon139_Then:
    assume out_Tmp_692 == 1;
    out_Tmp_692 := 1;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon138_Then:
    assume out_Tmp_692 == 2;
    out_Tmp_692 := 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon129_Then:
    assume out_Tmp_692 > 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon128_Then:
    goto L54;

  anon111_Then:
    assume {:partition} out_j >= 4;
    call {:si_unique_call 1646} out_vslice_dummy_var_92 := corral_nondet();
    out_ForceVerify := 1;
    goto L41;

  anon110_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 6;
    goto L41;

  anon109_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 9;
    goto L41;

  anon108_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 18;
    goto L41;

  anon107_Then:
    assume {:partition} out_FileObject_1 == 0;
    goto L41;

  anon106_Then:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] == 0;
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)];
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    goto L43;

  anon143_Then:
    assume out_Tmp_690 == 0;
    out_Tmp_690 := 0;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon142_Then:
    assume out_Tmp_690 == 1;
    out_Tmp_690 := 1;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon141_Then:
    assume out_Tmp_690 == 2;
    out_Tmp_690 := 2;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon123_Then:
    assume out_Tmp_690 > 2;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon117_Then:
    call {:si_unique_call 1647} out_FileObject_1 := __HAVOC_malloc(1);
    goto L29;

  anon146_Then:
    assume out_Tmp_696 == 0;
    out_Tmp_696 := 0;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon145_Then:
    assume out_Tmp_696 == 1;
    out_Tmp_696 := 1;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon144_Then:
    assume out_Tmp_696 == 2;
    out_Tmp_696 := 2;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon122_Then:
    assume out_Tmp_696 > 2;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon121_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(out_Tmp_701)], 4096) == 0;
    goto L29;

  anon104_Then:
    assume {:partition} in_WriteThroughToDisk == 0;
    goto L29;

  anon120_Then:
    goto L26;
}



procedure {:LoopProcedure} FatUnpinRepinnedBcbs_loop_L23(in_i_3: int, in_Tmp_682: int, in_Tmp_683: int, in_Tmp_686: int, in_Tmp_687: int, in_j: int, in_Tmp_690: int, in_Iosb: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_696: int, in_sdv_269: int, in_WriteThroughToDisk: int, in_Tmp_700: int, in_Tmp_701: int, in_ForceVerify: int, in_Repinned: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_RaiseIosb: int, in_Tmp_706: int, in_Tmp_708: int, in_IrpContext_27: int, in_vslice_dummy_var_92: int) returns (out_i_3: int, out_Tmp_682: int, out_Tmp_683: int, out_Tmp_686: int, out_Tmp_687: int, out_j: int, out_Tmp_690: int, out_FileObject_1: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_696: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_701: int, out_ForceVerify: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_708: int, out_vslice_dummy_var_92: int);
  modifies Mem_T.Status__IO_STATUS_BLOCK, alloc;
  free ensures {:va_keep} out_ForceVerify == 1 || out_ForceVerify == in_ForceVerify;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatUnpinRepinnedBcbs_loop_L20(in_i_3: int, in_Tmp_682: int, in_Tmp_683: int, in_Saved: int, in_Tmp_686: int, in_Tmp_687: int, in_j: int, in_Tmp_690: int, in_Iosb: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_696: int, in_sdv_269: int, in_WriteThroughToDisk: int, in_Tmp_700: int, in_Tmp_701: int, in_ForceVerify: int, in_Repinned: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_RaiseIosb: int, in_Tmp_706: int, in_Tmp_708: int, in_IrpContext_27: int, in_vslice_dummy_var_92: int) returns (out_i_3: int, out_Tmp_682: int, out_Tmp_683: int, out_Saved: int, out_Tmp_686: int, out_Tmp_687: int, out_j: int, out_Tmp_690: int, out_FileObject_1: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_696: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_701: int, out_ForceVerify: int, out_Repinned: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_708: int, out_vslice_dummy_var_92: int)
{

  entry:
    out_i_3, out_Tmp_682, out_Tmp_683, out_Saved, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Repinned, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_Tmp_708, out_vslice_dummy_var_92 := in_i_3, in_Tmp_682, in_Tmp_683, in_Saved, in_Tmp_686, in_Tmp_687, in_j, in_Tmp_690, in_FileObject_1, in_Tmp_691, in_Tmp_692, in_Tmp_694, in_Tmp_695, in_Tmp_696, in_sdv_269, in_Tmp_700, in_Tmp_701, in_ForceVerify, in_Repinned, in_Tmp_703, in_Tmp_704, in_Tmp_705, in_Tmp_706, in_Tmp_708, in_vslice_dummy_var_92;
    goto L20, exit;

  exit:
    return;

  L20:
    goto anon100_Else;

  anon100_Else:
    assume {:partition} out_Repinned != 0;
    out_i_3 := 0;
    goto L23;

  L23:
    call {:si_unique_call 1652} out_i_3, out_Tmp_682, out_Tmp_683, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_Tmp_708, out_vslice_dummy_var_92 := FatUnpinRepinnedBcbs_loop_L23(out_i_3, out_Tmp_682, out_Tmp_683, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, in_Iosb, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, in_WriteThroughToDisk, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Repinned, out_Tmp_703, out_Tmp_704, out_Tmp_705, in_RaiseIosb, out_Tmp_706, out_Tmp_708, in_IrpContext_27, out_vslice_dummy_var_92);
    goto L23_last;

  L23_last:
    assume {:CounterLoop 4} {:Counter "i_3"} true;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} 4 > out_i_3;
    out_Tmp_703 := out_i_3;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_686;
    assume {:nonnull} out_Tmp_686 != 0;
    assume out_Tmp_686 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} in_WriteThroughToDisk != 0;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    out_Tmp_701 := Mem_T.Vcb__IRP_CONTEXT[Vcb__IRP_CONTEXT(in_IrpContext_27)];
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(out_Tmp_701)], 4096) != 0;
    out_Tmp_696 := out_i_3;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_706;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume out_Tmp_696 <= 2;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume out_Tmp_696 != 2;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume out_Tmp_696 != 1;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume out_Tmp_696 != 0;
    goto L114;

  L114:
    goto anon117_Then, anon117_Else;

  anon117_Else:
    out_FileObject_1 := 0;
    goto L29;

  L29:
    out_Tmp_690 := out_i_3;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_694;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume out_Tmp_690 <= 2;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume out_Tmp_690 != 2;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume out_Tmp_690 != 1;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume out_Tmp_690 != 0;
    goto L124;

  L124:
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)] >= 0;
    goto L41;

  L41:
    out_Tmp_705 := out_i_3;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_695;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume out_Tmp_705 <= 2;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume out_Tmp_705 != 2;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume out_Tmp_705 != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume out_Tmp_705 != 0;
    goto L26;

  L26:
    out_i_3 := out_i_3 + 1;
    assume false;
    return;

  anon127_Then:
    assume out_Tmp_705 == 0;
    out_Tmp_705 := 0;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon126_Then:
    assume out_Tmp_705 == 1;
    out_Tmp_705 := 1;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon125_Then:
    assume out_Tmp_705 == 2;
    out_Tmp_705 := 2;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon124_Then:
    assume out_Tmp_705 > 2;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto L26;

  anon105_Then:
    assume {:partition} 0 > Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)];
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] != 0;
    goto L43;

  L43:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} out_FileObject_1 != 0;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 18;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 9;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] != 6;
    out_j := out_i_3 + 1;
    goto L49;

  L49:
    call {:si_unique_call 1655} out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, out_Tmp_704, out_Tmp_708 := FatUnpinRepinnedBcbs_loop_L49(out_Tmp_682, out_Tmp_683, out_Tmp_687, out_j, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_sdv_269, out_Tmp_700, out_Repinned, out_Tmp_704, out_Tmp_708);
    goto L49_last;

  L49_last:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} 4 > out_j;
    out_Tmp_700 := out_j;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_687;
    assume {:nonnull} out_Tmp_687 != 0;
    assume out_Tmp_687 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    out_Tmp_692 := out_j;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_708;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume out_Tmp_692 <= 2;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume out_Tmp_692 != 2;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume out_Tmp_692 != 1;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume out_Tmp_692 != 0;
    goto L144;

  L144:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    out_sdv_269 := 0;
    goto L59;

  L59:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} out_sdv_269 == out_FileObject_1;
    out_Tmp_682 := out_j;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_683;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume out_Tmp_682 <= 2;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume out_Tmp_682 != 2;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume out_Tmp_682 != 1;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume out_Tmp_682 != 0;
    goto L154;

  L154:
    out_Tmp_704 := out_j;
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Tmp_691;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume out_Tmp_704 <= 2;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume out_Tmp_704 != 2;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume out_Tmp_704 != 1;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume out_Tmp_704 != 0;
    goto L54;

  L54:
    out_j := out_j + 1;
    assume false;
    return;

  anon134_Then:
    assume out_Tmp_704 == 0;
    out_Tmp_704 := 0;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon133_Then:
    assume out_Tmp_704 == 1;
    out_Tmp_704 := 1;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon132_Then:
    assume out_Tmp_704 == 2;
    out_Tmp_704 := 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon131_Then:
    assume out_Tmp_704 > 2;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    goto L54;

  anon137_Then:
    assume out_Tmp_682 == 0;
    out_Tmp_682 := 0;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon136_Then:
    assume out_Tmp_682 == 1;
    out_Tmp_682 := 1;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon135_Then:
    assume out_Tmp_682 == 2;
    out_Tmp_682 := 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon130_Then:
    assume out_Tmp_682 > 2;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    goto L154;

  anon112_Then:
    assume {:partition} out_sdv_269 != out_FileObject_1;
    goto L54;

  anon118_Then:
    call {:si_unique_call 1656} out_sdv_269 := __HAVOC_malloc(1);
    goto L59;

  anon140_Then:
    assume out_Tmp_692 == 0;
    out_Tmp_692 := 0;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon139_Then:
    assume out_Tmp_692 == 1;
    out_Tmp_692 := 1;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon138_Then:
    assume out_Tmp_692 == 2;
    out_Tmp_692 := 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon129_Then:
    assume out_Tmp_692 > 2;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    goto L144;

  anon128_Then:
    goto L54;

  anon111_Then:
    assume {:partition} out_j >= 4;
    call {:si_unique_call 1653} out_vslice_dummy_var_92 := corral_nondet();
    out_ForceVerify := 1;
    goto L41;

  anon110_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 6;
    goto L41;

  anon109_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 9;
    goto L41;

  anon108_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_27)] == 18;
    goto L41;

  anon107_Then:
    assume {:partition} out_FileObject_1 == 0;
    goto L41;

  anon106_Then:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] == 0;
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_RaiseIosb)] := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb)];
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    assume {:nonnull} in_Iosb != 0;
    assume in_Iosb > 0;
    assume {:nonnull} in_RaiseIosb != 0;
    assume in_RaiseIosb > 0;
    goto L43;

  anon143_Then:
    assume out_Tmp_690 == 0;
    out_Tmp_690 := 0;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon142_Then:
    assume out_Tmp_690 == 1;
    out_Tmp_690 := 1;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon141_Then:
    assume out_Tmp_690 == 2;
    out_Tmp_690 := 2;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon123_Then:
    assume out_Tmp_690 > 2;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    goto L124;

  anon117_Then:
    call {:si_unique_call 1654} out_FileObject_1 := __HAVOC_malloc(1);
    goto L29;

  anon146_Then:
    assume out_Tmp_696 == 0;
    out_Tmp_696 := 0;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon145_Then:
    assume out_Tmp_696 == 1;
    out_Tmp_696 := 1;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon144_Then:
    assume out_Tmp_696 == 2;
    out_Tmp_696 := 2;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon122_Then:
    assume out_Tmp_696 > 2;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    goto L114;

  anon121_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(out_Tmp_701)], 4096) == 0;
    goto L29;

  anon104_Then:
    assume {:partition} in_WriteThroughToDisk == 0;
    goto L29;

  anon120_Then:
    goto L26;

  anon102_Then:
    assume {:partition} out_i_3 >= 4;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} out_Repinned != Repinned__IRP_CONTEXT(in_IrpContext_27);
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Saved;
    call {:si_unique_call 1651} sdv_ExFreePool(0);
    out_Repinned := out_Saved;
    goto anon103_Else_dummy;

  anon103_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 1657} {:si_old_unique_call 1} out_i_3, out_Tmp_682, out_Tmp_683, out_Saved, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Repinned, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_Tmp_708, out_vslice_dummy_var_92 := FatUnpinRepinnedBcbs_loop_L20(out_i_3, out_Tmp_682, out_Tmp_683, out_Saved, out_Tmp_686, out_Tmp_687, out_j, out_Tmp_690, in_Iosb, out_FileObject_1, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_696, out_sdv_269, in_WriteThroughToDisk, out_Tmp_700, out_Tmp_701, out_ForceVerify, out_Repinned, out_Tmp_703, out_Tmp_704, out_Tmp_705, in_RaiseIosb, out_Tmp_706, out_Tmp_708, in_IrpContext_27, out_vslice_dummy_var_92);
    return;

  anon103_Then:
    assume {:partition} out_Repinned == Repinned__IRP_CONTEXT(in_IrpContext_27);
    assume {:nonnull} out_Repinned != 0;
    assume out_Repinned > 0;
    havoc out_Repinned;
    assume {:nonnull} in_IrpContext_27 != 0;
    assume in_IrpContext_27 > 0;
    goto anon103_Then_dummy;

  anon103_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} FatUnpinRepinnedBcbs_loop_L20(in_i_3: int, in_Tmp_682: int, in_Tmp_683: int, in_Saved: int, in_Tmp_686: int, in_Tmp_687: int, in_j: int, in_Tmp_690: int, in_Iosb: int, in_FileObject_1: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_696: int, in_sdv_269: int, in_WriteThroughToDisk: int, in_Tmp_700: int, in_Tmp_701: int, in_ForceVerify: int, in_Repinned: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_RaiseIosb: int, in_Tmp_706: int, in_Tmp_708: int, in_IrpContext_27: int, in_vslice_dummy_var_92: int) returns (out_i_3: int, out_Tmp_682: int, out_Tmp_683: int, out_Saved: int, out_Tmp_686: int, out_Tmp_687: int, out_j: int, out_Tmp_690: int, out_FileObject_1: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_696: int, out_sdv_269: int, out_Tmp_700: int, out_Tmp_701: int, out_ForceVerify: int, out_Repinned: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_708: int, out_vslice_dummy_var_92: int);
  modifies alloc, Mem_T.Status__IO_STATUS_BLOCK;
  free ensures {:va_keep} out_ForceVerify == 1 || out_ForceVerify == in_ForceVerify;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatRepinBcb_loop_L11(in_i_4: int, in_Tmp_729: int, in_Tmp_730: int, in_Tmp_731: int, in_Tmp_734: int, in_Repinned_1: int, in_Bcb_7: int) returns (out_i_4: int, out_Tmp_729: int, out_Tmp_730: int, out_Tmp_731: int, out_Tmp_734: int)
{

  entry:
    out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_Tmp_734 := in_i_4, in_Tmp_729, in_Tmp_730, in_Tmp_731, in_Tmp_734;
    goto L11, exit;

  exit:
    return;

  L11:
    goto anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_4;
    out_Tmp_730 := out_i_4;
    assume {:nonnull} in_Repinned_1 != 0;
    assume in_Repinned_1 > 0;
    havoc out_Tmp_734;
    assume {:nonnull} out_Tmp_734 != 0;
    assume out_Tmp_734 > 0;
    goto anon19_Else;

  anon19_Else:
    out_Tmp_731 := out_i_4;
    assume {:nonnull} in_Repinned_1 != 0;
    assume in_Repinned_1 > 0;
    havoc out_Tmp_729;
    assume {:nonnull} out_Tmp_729 != 0;
    assume out_Tmp_729 > 0;
    goto anon20_Else;

  anon20_Else:
    out_i_4 := out_i_4 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    call {:si_unique_call 1658} {:si_old_unique_call 1} out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_Tmp_734 := FatRepinBcb_loop_L11(out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_Tmp_734, in_Repinned_1, in_Bcb_7);
    return;
}



procedure {:LoopProcedure} FatRepinBcb_loop_L11(in_i_4: int, in_Tmp_729: int, in_Tmp_730: int, in_Tmp_731: int, in_Tmp_734: int, in_Repinned_1: int, in_Bcb_7: int) returns (out_i_4: int, out_Tmp_729: int, out_Tmp_730: int, out_Tmp_731: int, out_Tmp_734: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatRepinBcb_loop_L10(in_i_4: int, in_Tmp_729: int, in_Tmp_730: int, in_Tmp_731: int, in_sdv_284: int, in_Tmp_734: int, in_Repinned_1: int, in_Bcb_7: int) returns (out_i_4: int, out_Tmp_729: int, out_Tmp_730: int, out_Tmp_731: int, out_sdv_284: int, out_Tmp_734: int, out_Repinned_1: int)
{

  entry:
    out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_sdv_284, out_Tmp_734, out_Repinned_1 := in_i_4, in_Tmp_729, in_Tmp_730, in_Tmp_731, in_sdv_284, in_Tmp_734, in_Repinned_1;
    goto L10, exit;

  exit:
    return;

  L10:
    out_i_4 := 0;
    goto L11;

  L11:
    call {:si_unique_call 1661} out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_Tmp_734 := FatRepinBcb_loop_L11(out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_Tmp_734, out_Repinned_1, in_Bcb_7);
    goto L11_last;

  L11_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} 4 > out_i_4;
    out_Tmp_730 := out_i_4;
    assume {:nonnull} out_Repinned_1 != 0;
    assume out_Repinned_1 > 0;
    havoc out_Tmp_734;
    assume {:nonnull} out_Tmp_734 != 0;
    assume out_Tmp_734 > 0;
    goto anon19_Else;

  anon19_Else:
    out_Tmp_731 := out_i_4;
    assume {:nonnull} out_Repinned_1 != 0;
    assume out_Repinned_1 > 0;
    havoc out_Tmp_729;
    assume {:nonnull} out_Tmp_729 != 0;
    assume out_Tmp_729 > 0;
    goto anon20_Else;

  anon20_Else:
    out_i_4 := out_i_4 + 1;
    assume false;
    return;

  anon17_Then:
    assume {:partition} out_i_4 >= 4;
    assume {:nonnull} out_Repinned_1 != 0;
    assume out_Repinned_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L25;

  L25:
    assume {:nonnull} out_Repinned_1 != 0;
    assume out_Repinned_1 > 0;
    havoc out_Repinned_1;
    goto L25_dummy;

  L25_dummy:
    call {:si_unique_call 1662} {:si_old_unique_call 1} out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_sdv_284, out_Tmp_734, out_Repinned_1 := FatRepinBcb_loop_L10(out_i_4, out_Tmp_729, out_Tmp_730, out_Tmp_731, out_sdv_284, out_Tmp_734, out_Repinned_1, in_Bcb_7);
    return;

  anon18_Then:
    call {:si_unique_call 1659} out_sdv_284 := ExAllocatePoolWithTag(17, 20, -764124858);
    assume {:nonnull} out_Repinned_1 != 0;
    assume out_Repinned_1 > 0;
    call {:si_unique_call 1660} sdv_RtlZeroMemory(0, 20);
    goto L25;
}



procedure {:LoopProcedure} FatRepinBcb_loop_L10(in_i_4: int, in_Tmp_729: int, in_Tmp_730: int, in_Tmp_731: int, in_sdv_284: int, in_Tmp_734: int, in_Repinned_1: int, in_Bcb_7: int) returns (out_i_4: int, out_Tmp_729: int, out_Tmp_730: int, out_Tmp_731: int, out_sdv_284: int, out_Tmp_734: int, out_Repinned_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatForceCacheMiss_loop_L20(in_Links: int, in_sdv_297: int, in_TempFcb_1: int, in_IrpContext_35: int, in_vslice_dummy_var_108: int) returns (out_Links: int, out_sdv_297: int, out_TempFcb_1: int, out_vslice_dummy_var_108: int)
{

  entry:
    out_Links, out_sdv_297, out_TempFcb_1, out_vslice_dummy_var_108 := in_Links, in_sdv_297, in_TempFcb_1, in_vslice_dummy_var_108;
    goto L20, exit;

  exit:
    return;

  L20:
    goto anon28_Else;

  anon28_Else:
    call {:si_unique_call 1663} out_sdv_297 := sdv_containing_record(out_Links, 72);
    out_TempFcb_1 := out_sdv_297;
    call {:si_unique_call 1664} out_vslice_dummy_var_108 := FatAcquireExclusiveFcb(in_IrpContext_35, out_TempFcb_1);
    assume {:nonnull} out_Links != 0;
    assume out_Links > 0;
    havoc out_Links;
    goto anon28_Else_dummy;

  anon28_Else_dummy:
    call {:si_unique_call 1665} {:si_old_unique_call 1} out_Links, out_sdv_297, out_TempFcb_1, out_vslice_dummy_var_108 := FatForceCacheMiss_loop_L20(out_Links, out_sdv_297, out_TempFcb_1, in_IrpContext_35, out_vslice_dummy_var_108);
    return;
}



procedure {:LoopProcedure} FatForceCacheMiss_loop_L20(in_Links: int, in_sdv_297: int, in_TempFcb_1: int, in_IrpContext_35: int, in_vslice_dummy_var_108: int) returns (out_Links: int, out_sdv_297: int, out_TempFcb_1: int, out_vslice_dummy_var_108: int);
  modifies alloc;
  free ensures {:va_keep} out_vslice_dummy_var_108 == 1 || out_vslice_dummy_var_108 == 0 || out_vslice_dummy_var_108 == in_vslice_dummy_var_108;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatForceCacheMiss_loop_L64(in_Links_1: int, in_sdv_300: int) returns (out_Links_1: int, out_sdv_300: int)
{

  entry:
    out_Links_1, out_sdv_300 := in_Links_1, in_sdv_300;
    goto L64, exit;

  exit:
    return;

  L64:
    goto anon32_Else;

  anon32_Else:
    call {:si_unique_call 1666} out_sdv_300 := sdv_containing_record(out_Links_1, 72);
    call {:si_unique_call 1667} ExReleaseResourceLite(0);
    assume {:nonnull} out_Links_1 != 0;
    assume out_Links_1 > 0;
    havoc out_Links_1;
    goto anon32_Else_dummy;

  anon32_Else_dummy:
    havoc out_Links_1;
    return;
}



procedure {:LoopProcedure} FatForceCacheMiss_loop_L64(in_Links_1: int, in_sdv_300: int) returns (out_Links_1: int, out_sdv_300: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_300 == in_Links_1 || out_sdv_300 == in_sdv_300;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatPurgeReferencedFileObjects_loop_L9(in_NextFcb_1: int, in_OriginalFcb: int, in_IrpContext_36: int, in_Fcb_7: int, in_FlushType_1: int) returns (out_NextFcb_1: int, out_Fcb_7: int)
{

  entry:
    out_NextFcb_1, out_Fcb_7 := in_NextFcb_1, in_Fcb_7;
    goto L9, exit;

  exit:
    return;

  L9:
    goto anon5_Else;

  anon5_Else:
    assume {:partition} out_Fcb_7 != 0;
    call {:si_unique_call 1669} out_NextFcb_1 := FatGetNextFcbTopDown(in_IrpContext_36, out_Fcb_7, in_OriginalFcb);
    assume {:nonnull} out_Fcb_7 != 0;
    assume out_Fcb_7 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L19;

  L19:
    out_Fcb_7 := out_NextFcb_1;
    goto L19_dummy;

  L19_dummy:
    call {:si_unique_call 1670} {:si_old_unique_call 1} out_NextFcb_1, out_Fcb_7 := FatPurgeReferencedFileObjects_loop_L9(out_NextFcb_1, in_OriginalFcb, in_IrpContext_36, out_Fcb_7, in_FlushType_1);
    return;

  anon6_Then:
    call {:si_unique_call 1668} FatForceCacheMiss(in_IrpContext_36, out_Fcb_7, in_FlushType_1);
    goto L19;
}



procedure {:LoopProcedure} FatPurgeReferencedFileObjects_loop_L9(in_NextFcb_1: int, in_OriginalFcb: int, in_IrpContext_36: int, in_Fcb_7: int, in_FlushType_1: int) returns (out_NextFcb_1: int, out_Fcb_7: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatFlushDirectory_loop_L106(in_ReturnStatus: int, in_NextFcb_2: int, in_Fcb_8: int, in_Status_8: int, in_Tmp_857: int, in_IrpContext_40: int, in_Dcb_3: int, in_FlushType_3: int) returns (out_ReturnStatus: int, out_NextFcb_2: int, out_Fcb_8: int, out_Status_8: int, out_Tmp_857: int)
{

  entry:
    out_ReturnStatus, out_NextFcb_2, out_Fcb_8, out_Status_8, out_Tmp_857 := in_ReturnStatus, in_NextFcb_2, in_Fcb_8, in_Status_8, in_Tmp_857;
    goto L106, exit;

  exit:
    return;

  L106:
    goto anon58_Else;

  anon58_Else:
    assume {:partition} out_Fcb_8 != 0;
    call {:si_unique_call 1671} out_NextFcb_2 := FatGetNextFcbTopDown(in_IrpContext_40, out_Fcb_8, in_Dcb_3);
    out_Tmp_857 := out_Fcb_8;
    assume {:nonnull} out_Tmp_857 != 0;
    assume out_Tmp_857 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_857] != 1282;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 1) != 0;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto L117;

  L117:
    call {:si_unique_call 1672} FatVerifyFcb(in_IrpContext_40, out_Fcb_8);
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    call {:si_unique_call 1673} out_Status_8 := FatFlushFile(in_IrpContext_40, out_Fcb_8, in_FlushType_3);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_Status_8 < 0;
    out_ReturnStatus := out_Status_8;
    goto L115;

  L115:
    out_Fcb_8 := out_NextFcb_2;
    goto L115_dummy;

  L115_dummy:
    call {:si_unique_call 1674} {:si_old_unique_call 1} out_ReturnStatus, out_NextFcb_2, out_Fcb_8, out_Status_8, out_Tmp_857 := FatFlushDirectory_loop_L106(out_ReturnStatus, out_NextFcb_2, out_Fcb_8, out_Status_8, out_Tmp_857, in_IrpContext_40, in_Dcb_3, in_FlushType_3);
    return;

  anon62_Then:
    assume {:partition} 0 <= out_Status_8;
    goto L115;

  anon61_Then:
    goto L115;

  anon60_Then:
    goto L115;

  anon59_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 1) == 0;
    goto L117;

  anon66_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_857] == 1282;
    goto L115;
}



procedure {:LoopProcedure} FatFlushDirectory_loop_L106(in_ReturnStatus: int, in_NextFcb_2: int, in_Fcb_8: int, in_Status_8: int, in_Tmp_857: int, in_IrpContext_40: int, in_Dcb_3: int, in_FlushType_3: int) returns (out_ReturnStatus: int, out_NextFcb_2: int, out_Fcb_8: int, out_Status_8: int, out_Tmp_857: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, Mem_T.VcbState__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatFlushDirectory_loop_L25(in_ReturnStatus: int, in_NextFcb_2: int, in_Fcb_8: int, in_Dirent_1: int, in_Status_8: int, in_DirentBcb: int, in_Tmp_856: int, in_Vcb_33: int, in_IrpContext_40: int, in_Dcb_3: int, in_FlushType_3: int, in_vslice_dummy_var_126: int) returns (out_ReturnStatus: int, out_NextFcb_2: int, out_Fcb_8: int, out_Status_8: int, out_Tmp_856: int, out_vslice_dummy_var_126: int)
{
  var vslice_dummy_var_7522: int;

  entry:
    out_ReturnStatus, out_NextFcb_2, out_Fcb_8, out_Status_8, out_Tmp_856, out_vslice_dummy_var_126 := in_ReturnStatus, in_NextFcb_2, in_Fcb_8, in_Status_8, in_Tmp_856, in_vslice_dummy_var_126;
    goto L25, exit;

  exit:
    return;

  L25:
    goto anon47_Else;

  anon47_Else:
    assume {:partition} out_Fcb_8 != 0;
    call {:si_unique_call 1676} out_NextFcb_2 := FatGetNextFcbTopDown(in_IrpContext_40, out_Fcb_8, in_Dcb_3);
    out_Tmp_856 := out_Fcb_8;
    assume {:nonnull} out_Tmp_856 != 0;
    assume out_Tmp_856 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_856] == 1282;
    assume {:nonnull} in_Vcb_33 != 0;
    assume in_Vcb_33 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 1) != 0;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L35;

  L35:
    call {:si_unique_call 1680} out_vslice_dummy_var_126 := FatAcquireExclusiveFcb(in_IrpContext_40, out_Fcb_8);
    assume {:nonnull} in_Vcb_33 != 0;
    assume in_Vcb_33 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_33)] := BAND(Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_33)], BNOT(256));
    call {:si_unique_call 1681} FatVerifyFcb(in_IrpContext_40, out_Fcb_8);
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto L78;

  L78:
    assume {:nonnull} in_DirentBcb != 0;
    assume in_DirentBcb > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} in_DirentBcb != 0;
    assume in_DirentBcb > 0;
    goto L79;

  L79:
    assume {:nonnull} in_Vcb_33 != 0;
    assume in_Vcb_33 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_33)], 256) == 0;
    call {:si_unique_call 1675} ExReleaseResourceLite(0);
    goto L32;

  L32:
    out_Fcb_8 := out_NextFcb_2;
    goto L32_dummy;

  L32_dummy:
    call {:si_unique_call 1682} {:si_old_unique_call 1} out_ReturnStatus, out_NextFcb_2, out_Fcb_8, out_Status_8, out_Tmp_856, out_vslice_dummy_var_126 := FatFlushDirectory_loop_L25(out_ReturnStatus, out_NextFcb_2, out_Fcb_8, in_Dirent_1, out_Status_8, in_DirentBcb, out_Tmp_856, in_Vcb_33, in_IrpContext_40, in_Dcb_3, in_FlushType_3, out_vslice_dummy_var_126);
    return;

  anon54_Then:
    assume {:partition} BAND(Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_33)], 256) != 0;
    goto L32;

  anon53_Then:
    goto L79;

  anon51_Then:
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 2) != 0;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    havoc vslice_dummy_var_7522;
    call {:si_unique_call 1679} FatTruncateFileAllocation(in_IrpContext_40, out_Fcb_8, vslice_dummy_var_7522);
    goto L87;

  L87:
    call {:si_unique_call 1678} FatGetDirentFromFcbOrDcb(in_IrpContext_40, out_Fcb_8, in_Dirent_1, in_DirentBcb);
    assume {:nonnull} in_Dirent_1 != 0;
    assume in_Dirent_1 > 0;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} in_Dirent_1 != 0;
    assume in_Dirent_1 > 0;
    assume {:nonnull} out_Fcb_8 != 0;
    assume out_Fcb_8 > 0;
    goto L94;

  L94:
    assume {:nonnull} in_DirentBcb != 0;
    assume in_DirentBcb > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} in_DirentBcb != 0;
    assume in_DirentBcb > 0;
    goto L96;

  L96:
    call {:si_unique_call 1677} out_Status_8 := FatFlushFile(in_IrpContext_40, out_Fcb_8, in_FlushType_3);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} out_Status_8 < 0;
    out_ReturnStatus := out_Status_8;
    goto L78;

  anon57_Then:
    assume {:partition} 0 <= out_Status_8;
    goto L78;

  anon56_Then:
    goto L96;

  anon55_Then:
    goto L94;

  anon52_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 2) == 0;
    goto L87;

  anon50_Then:
    goto L32;

  anon49_Then:
    assume {:partition} BAND(Mem_T.FcbState__FCB[FcbState__FCB(out_Fcb_8)], 1) == 0;
    goto L35;

  anon48_Then:
    goto L32;

  anon65_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_856] != 1282;
    goto L32;
}



procedure {:LoopProcedure} FatFlushDirectory_loop_L25(in_ReturnStatus: int, in_NextFcb_2: int, in_Fcb_8: int, in_Dirent_1: int, in_Status_8: int, in_DirentBcb: int, in_Tmp_856: int, in_Vcb_33: int, in_IrpContext_40: int, in_Dcb_3: int, in_FlushType_3: int, in_vslice_dummy_var_126: int) returns (out_ReturnStatus: int, out_NextFcb_2: int, out_Fcb_8: int, out_Status_8: int, out_Tmp_856: int, out_vslice_dummy_var_126: int);
  modifies alloc, Mem_T.FcbState__FCB, Mem_T.VcbState__VCB, Mem_T.INT4, Mem_T.Flags__IRP_CONTEXT, sdv_irql_current, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.PendingReturned__IRP, Mem_T.Status__IO_STATUS_BLOCK, sdv_compFset, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} out_vslice_dummy_var_126 == 1 || out_vslice_dummy_var_126 == 0 || out_vslice_dummy_var_126 == in_vslice_dummy_var_126;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatFlushFat_loop_L40(in_ReturnStatus_2: int, in_Offset_3: int, in_Iosb_4: int, in_Page_3: int, in_sdv_342: int, in_NumberOfPages_2: int) returns (out_ReturnStatus_2: int, out_Page_3: int, out_sdv_342: int)
{

  entry:
    out_ReturnStatus_2, out_Page_3, out_sdv_342 := in_ReturnStatus_2, in_Page_3, in_sdv_342;
    goto L40, exit;

  exit:
    return;

  L40:
    goto anon24_Else;

  anon24_Else:
    assume {:partition} in_NumberOfPages_2 > out_Page_3;
    call {:si_unique_call 1683} out_sdv_342 := corral_nondet();
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_342 != 0;
    assume {:nonnull} in_Iosb_4 != 0;
    assume in_Iosb_4 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb_4)] < 0;
    assume {:nonnull} in_Iosb_4 != 0;
    assume in_Iosb_4 > 0;
    out_ReturnStatus_2 := Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb_4)];
    goto L54;

  L54:
    out_Page_3 := out_Page_3 + 1;
    assume {:nonnull} in_Offset_3 != 0;
    assume in_Offset_3 > 0;
    goto L54_dummy;

  L54_dummy:
    call {:si_unique_call 1684} {:si_old_unique_call 1} out_ReturnStatus_2, out_Page_3, out_sdv_342 := FatFlushFat_loop_L40(out_ReturnStatus_2, in_Offset_3, in_Iosb_4, out_Page_3, out_sdv_342, in_NumberOfPages_2);
    return;

  anon26_Then:
    assume {:partition} 0 <= Mem_T.Status__IO_STATUS_BLOCK[Status__IO_STATUS_BLOCK(in_Iosb_4)];
    goto L54;

  anon25_Then:
    assume {:partition} out_sdv_342 == 0;
    goto L54;
}



procedure {:LoopProcedure} FatFlushFat_loop_L40(in_ReturnStatus_2: int, in_Offset_3: int, in_Iosb_4: int, in_Page_3: int, in_sdv_342: int, in_NumberOfPages_2: int) returns (out_ReturnStatus_2: int, out_Page_3: int, out_sdv_342: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatStringTo8dot3_loop_L17(in_InputString: int, in_i_5: int, in_Tmp_898: int, in_j_1: int, in_Tmp_900: int, in_Tmp_906: int, in_Output8dot3: int) returns (out_i_5: int, out_Tmp_898: int, out_j_1: int, out_Tmp_900: int, out_Tmp_906: int)
{
  var vslice_dummy_var_7523: int;

  entry:
    out_i_5, out_Tmp_898, out_j_1, out_Tmp_900, out_Tmp_906 := in_i_5, in_Tmp_898, in_j_1, in_Tmp_900, in_Tmp_906;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:nonnull} in_InputString != 0;
    assume in_InputString > 0;
    goto anon13_Else;

  anon13_Else:
    out_Tmp_906 := out_j_1;
    assume {:nonnull} in_Output8dot3 != 0;
    assume in_Output8dot3 > 0;
    havoc out_Tmp_898;
    out_Tmp_900 := out_i_5;
    assume {:nonnull} in_InputString != 0;
    assume in_InputString > 0;
    assume {:nonnull} out_Tmp_898 != 0;
    assume out_Tmp_898 > 0;
    havoc vslice_dummy_var_7523;
    Mem_T.INT4[out_Tmp_898 + out_Tmp_906 * 4] := vslice_dummy_var_7523;
    out_j_1 := out_j_1 + 1;
    out_i_5 := out_i_5 + 1;
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    call {:si_unique_call 1685} {:si_old_unique_call 1} out_i_5, out_Tmp_898, out_j_1, out_Tmp_900, out_Tmp_906 := FatStringTo8dot3_loop_L17(in_InputString, out_i_5, out_Tmp_898, out_j_1, out_Tmp_900, out_Tmp_906, in_Output8dot3);
    return;
}



procedure {:LoopProcedure} FatStringTo8dot3_loop_L17(in_InputString: int, in_i_5: int, in_Tmp_898: int, in_j_1: int, in_Tmp_900: int, in_Tmp_906: int, in_Output8dot3: int) returns (out_i_5: int, out_Tmp_898: int, out_j_1: int, out_Tmp_900: int, out_Tmp_906: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatStringTo8dot3_loop_L9(in_InputString: int, in_i_5: int, in_Tmp_896: int, in_Tmp_902: int, in_Tmp_904: int, in_Tmp_905: int, in_Output8dot3: int) returns (out_i_5: int, out_Tmp_896: int, out_Tmp_902: int, out_Tmp_904: int, out_Tmp_905: int)
{
  var vslice_dummy_var_7524: int;

  entry:
    out_i_5, out_Tmp_896, out_Tmp_902, out_Tmp_904, out_Tmp_905 := in_i_5, in_Tmp_896, in_Tmp_902, in_Tmp_904, in_Tmp_905;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} in_InputString != 0;
    assume in_InputString > 0;
    goto anon11_Else;

  anon11_Else:
    out_Tmp_902 := out_i_5;
    assume {:nonnull} in_InputString != 0;
    assume in_InputString > 0;
    goto anon14_Else;

  anon14_Else:
    out_Tmp_905 := out_i_5;
    assume {:nonnull} in_Output8dot3 != 0;
    assume in_Output8dot3 > 0;
    havoc out_Tmp_896;
    out_Tmp_904 := out_i_5;
    assume {:nonnull} in_InputString != 0;
    assume in_InputString > 0;
    assume {:nonnull} out_Tmp_896 != 0;
    assume out_Tmp_896 > 0;
    havoc vslice_dummy_var_7524;
    Mem_T.INT4[out_Tmp_896 + out_Tmp_905 * 4] := vslice_dummy_var_7524;
    out_i_5 := out_i_5 + 1;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 1686} {:si_old_unique_call 1} out_i_5, out_Tmp_896, out_Tmp_902, out_Tmp_904, out_Tmp_905 := FatStringTo8dot3_loop_L9(in_InputString, out_i_5, out_Tmp_896, out_Tmp_902, out_Tmp_904, out_Tmp_905, in_Output8dot3);
    return;
}



procedure {:LoopProcedure} FatStringTo8dot3_loop_L9(in_InputString: int, in_i_5: int, in_Tmp_896: int, in_Tmp_902: int, in_Tmp_904: int, in_Tmp_905: int, in_Output8dot3: int) returns (out_i_5: int, out_Tmp_896: int, out_Tmp_902: int, out_Tmp_904: int, out_Tmp_905: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation Fat8dot3ToString_loop_L28(in_Tmp_911: int, in_Tmp_914: int, in_Tmp_919: int, in_Tmp_921: int, in_Tmp_922: int, in_Tmp_925: int, in_Tmp_927: int, in_Tmp_928: int, in_Tmp_929: int, in_Tmp_932: int, in_Tmp_933: int, in_Tmp_934: int, in_StringIndex: int, in_BaseLength: int, in_Tmp_948: int, in_Tmp_950: int, in_Tmp_953: int, in_Tmp_956: int, in_OutputString: int) returns (out_Tmp_911: int, out_Tmp_914: int, out_Tmp_919: int, out_Tmp_921: int, out_Tmp_922: int, out_Tmp_925: int, out_Tmp_927: int, out_Tmp_928: int, out_Tmp_929: int, out_Tmp_932: int, out_Tmp_933: int, out_Tmp_934: int, out_StringIndex: int, out_Tmp_948: int, out_Tmp_950: int, out_Tmp_953: int, out_Tmp_956: int)
{

  entry:
    out_Tmp_911, out_Tmp_914, out_Tmp_919, out_Tmp_921, out_Tmp_922, out_Tmp_925, out_Tmp_927, out_Tmp_928, out_Tmp_929, out_Tmp_932, out_Tmp_933, out_Tmp_934, out_StringIndex, out_Tmp_948, out_Tmp_950, out_Tmp_953, out_Tmp_956 := in_Tmp_911, in_Tmp_914, in_Tmp_919, in_Tmp_921, in_Tmp_922, in_Tmp_925, in_Tmp_927, in_Tmp_928, in_Tmp_929, in_Tmp_932, in_Tmp_933, in_Tmp_934, in_StringIndex, in_Tmp_948, in_Tmp_950, in_Tmp_953, in_Tmp_956;
    goto L28, exit;

  exit:
    return;

  L28:
    goto anon68_Else;

  anon68_Else:
    assume {:partition} in_BaseLength > out_StringIndex;
    out_Tmp_950 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_932;
    assume {:nonnull} out_Tmp_932 != 0;
    assume out_Tmp_932 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} 128 > Mem_T.INT4[out_Tmp_932 + out_Tmp_950 * 4];
    out_Tmp_929 := 0;
    goto L32;

  L32:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_Tmp_929 != 0;
    out_StringIndex := out_StringIndex + 1;
    goto L36;

  L36:
    out_StringIndex := out_StringIndex + 1;
    goto L36_dummy;

  L36_dummy:
    call {:si_unique_call 1687} {:si_old_unique_call 1} out_Tmp_911, out_Tmp_914, out_Tmp_919, out_Tmp_921, out_Tmp_922, out_Tmp_925, out_Tmp_927, out_Tmp_928, out_Tmp_929, out_Tmp_932, out_Tmp_933, out_Tmp_934, out_StringIndex, out_Tmp_948, out_Tmp_950, out_Tmp_953, out_Tmp_956 := Fat8dot3ToString_loop_L28(out_Tmp_911, out_Tmp_914, out_Tmp_919, out_Tmp_921, out_Tmp_922, out_Tmp_925, out_Tmp_927, out_Tmp_928, out_Tmp_929, out_Tmp_932, out_Tmp_933, out_Tmp_934, out_StringIndex, in_BaseLength, out_Tmp_948, out_Tmp_950, out_Tmp_953, out_Tmp_956, in_OutputString);
    return;

  anon70_Then:
    assume {:partition} out_Tmp_929 == 0;
    out_Tmp_927 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_928;
    assume {:nonnull} out_Tmp_928 != 0;
    assume out_Tmp_928 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_928 + out_Tmp_927 * 4] >= 65;
    out_Tmp_922 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_934;
    assume {:nonnull} out_Tmp_934 != 0;
    assume out_Tmp_934 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} 90 >= Mem_T.INT4[out_Tmp_934 + out_Tmp_922 * 4];
    out_Tmp_914 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_948;
    out_Tmp_933 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_956;
    assume {:nonnull} out_Tmp_948 != 0;
    assume out_Tmp_948 > 0;
    assume {:nonnull} out_Tmp_956 != 0;
    assume out_Tmp_956 > 0;
    Mem_T.INT4[out_Tmp_948 + out_Tmp_914 * 4] := Mem_T.INT4[out_Tmp_956 + out_Tmp_933 * 4] + 32;
    goto L36;

  anon83_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_934 + out_Tmp_922 * 4] > 90;
    goto L36;

  anon82_Then:
    assume {:partition} 65 > Mem_T.INT4[out_Tmp_928 + out_Tmp_927 * 4];
    goto L36;

  anon81_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_932 + out_Tmp_950 * 4] >= 128;
    assume {:nonnull} NlsMbOemCodePageTag != 0;
    assume NlsMbOemCodePageTag > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] != 0;
    out_Tmp_925 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_919;
    assume {:nonnull} out_Tmp_919 != 0;
    assume out_Tmp_919 > 0;
    out_Tmp_921 := Mem_T.INT4[out_Tmp_919 + out_Tmp_925 * 4];
    assume {:nonnull} NlsOemLeadByteInfo != 0;
    assume NlsOemLeadByteInfo > 0;
    havoc out_Tmp_953;
    assume {:nonnull} out_Tmp_953 != 0;
    assume out_Tmp_953 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_953 + out_Tmp_921 * 4] != 0;
    out_Tmp_911 := 1;
    goto L42;

  L42:
    out_Tmp_929 := out_Tmp_911;
    goto L32;

  anon84_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_953 + out_Tmp_921 * 4] == 0;
    goto L39;

  L39:
    out_Tmp_911 := 0;
    goto L42;

  anon69_Then:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] == 0;
    goto L39;
}



procedure {:LoopProcedure} Fat8dot3ToString_loop_L28(in_Tmp_911: int, in_Tmp_914: int, in_Tmp_919: int, in_Tmp_921: int, in_Tmp_922: int, in_Tmp_925: int, in_Tmp_927: int, in_Tmp_928: int, in_Tmp_929: int, in_Tmp_932: int, in_Tmp_933: int, in_Tmp_934: int, in_StringIndex: int, in_BaseLength: int, in_Tmp_948: int, in_Tmp_950: int, in_Tmp_953: int, in_Tmp_956: int, in_OutputString: int) returns (out_Tmp_911: int, out_Tmp_914: int, out_Tmp_919: int, out_Tmp_921: int, out_Tmp_922: int, out_Tmp_925: int, out_Tmp_927: int, out_Tmp_928: int, out_Tmp_929: int, out_Tmp_932: int, out_Tmp_933: int, out_Tmp_934: int, out_StringIndex: int, out_Tmp_948: int, out_Tmp_950: int, out_Tmp_953: int, out_Tmp_956: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_911 == 1 || out_Tmp_911 == 0 || out_Tmp_911 == in_Tmp_911;
  free ensures {:va_keep} out_Tmp_929 == 0 || out_Tmp_929 == 1 || out_Tmp_929 == in_Tmp_929;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation Fat8dot3ToString_loop_L59(in_Tmp_913: int, in_Tmp_915: int, in_Tmp_916: int, in_Tmp_923: int, in_Tmp_924: int, in_Tmp_930: int, in_Tmp_931: int, in_Tmp_935: int, in_StringIndex: int, in_Tmp_937: int, in_Tmp_939: int, in_Tmp_940: int, in_Tmp_941: int, in_Tmp_945: int, in_Tmp_946: int, in_Tmp_952: int, in_Tmp_954: int, in_OutputString: int) returns (out_Tmp_913: int, out_Tmp_915: int, out_Tmp_916: int, out_Tmp_923: int, out_Tmp_924: int, out_Tmp_930: int, out_Tmp_931: int, out_Tmp_935: int, out_StringIndex: int, out_Tmp_937: int, out_Tmp_939: int, out_Tmp_940: int, out_Tmp_941: int, out_Tmp_945: int, out_Tmp_946: int, out_Tmp_952: int, out_Tmp_954: int)
{

  entry:
    out_Tmp_913, out_Tmp_915, out_Tmp_916, out_Tmp_923, out_Tmp_924, out_Tmp_930, out_Tmp_931, out_Tmp_935, out_StringIndex, out_Tmp_937, out_Tmp_939, out_Tmp_940, out_Tmp_941, out_Tmp_945, out_Tmp_946, out_Tmp_952, out_Tmp_954 := in_Tmp_913, in_Tmp_915, in_Tmp_916, in_Tmp_923, in_Tmp_924, in_Tmp_930, in_Tmp_931, in_Tmp_935, in_StringIndex, in_Tmp_937, in_Tmp_939, in_Tmp_940, in_Tmp_941, in_Tmp_945, in_Tmp_946, in_Tmp_952, in_Tmp_954;
    goto L59, exit;

  exit:
    return;

  L59:
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    goto anon73_Else;

  anon73_Else:
    out_Tmp_923 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_940;
    assume {:nonnull} out_Tmp_940 != 0;
    assume out_Tmp_940 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} 128 > Mem_T.INT4[out_Tmp_940 + out_Tmp_923 * 4];
    out_Tmp_913 := 0;
    goto L63;

  L63:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_Tmp_913 != 0;
    out_StringIndex := out_StringIndex + 1;
    goto L67;

  L67:
    out_StringIndex := out_StringIndex + 1;
    goto L67_dummy;

  L67_dummy:
    call {:si_unique_call 1688} {:si_old_unique_call 1} out_Tmp_913, out_Tmp_915, out_Tmp_916, out_Tmp_923, out_Tmp_924, out_Tmp_930, out_Tmp_931, out_Tmp_935, out_StringIndex, out_Tmp_937, out_Tmp_939, out_Tmp_940, out_Tmp_941, out_Tmp_945, out_Tmp_946, out_Tmp_952, out_Tmp_954 := Fat8dot3ToString_loop_L59(out_Tmp_913, out_Tmp_915, out_Tmp_916, out_Tmp_923, out_Tmp_924, out_Tmp_930, out_Tmp_931, out_Tmp_935, out_StringIndex, out_Tmp_937, out_Tmp_939, out_Tmp_940, out_Tmp_941, out_Tmp_945, out_Tmp_946, out_Tmp_952, out_Tmp_954, in_OutputString);
    return;

  anon75_Then:
    assume {:partition} out_Tmp_913 == 0;
    out_Tmp_939 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_952;
    assume {:nonnull} out_Tmp_952 != 0;
    assume out_Tmp_952 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_952 + out_Tmp_939 * 4] >= 65;
    out_Tmp_937 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_941;
    assume {:nonnull} out_Tmp_941 != 0;
    assume out_Tmp_941 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} 90 >= Mem_T.INT4[out_Tmp_941 + out_Tmp_937 * 4];
    out_Tmp_935 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_915;
    out_Tmp_916 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_945;
    assume {:nonnull} out_Tmp_915 != 0;
    assume out_Tmp_915 > 0;
    assume {:nonnull} out_Tmp_945 != 0;
    assume out_Tmp_945 > 0;
    Mem_T.INT4[out_Tmp_915 + out_Tmp_935 * 4] := Mem_T.INT4[out_Tmp_945 + out_Tmp_916 * 4] + 32;
    goto L67;

  anon89_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_941 + out_Tmp_937 * 4] > 90;
    goto L67;

  anon88_Then:
    assume {:partition} 65 > Mem_T.INT4[out_Tmp_952 + out_Tmp_939 * 4];
    goto L67;

  anon87_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_940 + out_Tmp_923 * 4] >= 128;
    assume {:nonnull} NlsMbOemCodePageTag != 0;
    assume NlsMbOemCodePageTag > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] != 0;
    out_Tmp_954 := out_StringIndex;
    assume {:nonnull} in_OutputString != 0;
    assume in_OutputString > 0;
    havoc out_Tmp_924;
    assume {:nonnull} out_Tmp_924 != 0;
    assume out_Tmp_924 > 0;
    out_Tmp_930 := Mem_T.INT4[out_Tmp_924 + out_Tmp_954 * 4];
    assume {:nonnull} NlsOemLeadByteInfo != 0;
    assume NlsOemLeadByteInfo > 0;
    havoc out_Tmp_931;
    assume {:nonnull} out_Tmp_931 != 0;
    assume out_Tmp_931 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_931 + out_Tmp_930 * 4] != 0;
    out_Tmp_946 := 1;
    goto L73;

  L73:
    out_Tmp_913 := out_Tmp_946;
    goto L63;

  anon90_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_931 + out_Tmp_930 * 4] == 0;
    goto L70;

  L70:
    out_Tmp_946 := 0;
    goto L73;

  anon74_Then:
    assume {:partition} Mem_T.INT4[NlsMbOemCodePageTag] == 0;
    goto L70;
}



procedure {:LoopProcedure} Fat8dot3ToString_loop_L59(in_Tmp_913: int, in_Tmp_915: int, in_Tmp_916: int, in_Tmp_923: int, in_Tmp_924: int, in_Tmp_930: int, in_Tmp_931: int, in_Tmp_935: int, in_StringIndex: int, in_Tmp_937: int, in_Tmp_939: int, in_Tmp_940: int, in_Tmp_941: int, in_Tmp_945: int, in_Tmp_946: int, in_Tmp_952: int, in_Tmp_954: int, in_OutputString: int) returns (out_Tmp_913: int, out_Tmp_915: int, out_Tmp_916: int, out_Tmp_923: int, out_Tmp_924: int, out_Tmp_930: int, out_Tmp_931: int, out_Tmp_935: int, out_StringIndex: int, out_Tmp_937: int, out_Tmp_939: int, out_Tmp_940: int, out_Tmp_941: int, out_Tmp_945: int, out_Tmp_946: int, out_Tmp_952: int, out_Tmp_954: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_913 == 0 || out_Tmp_913 == 1 || out_Tmp_913 == in_Tmp_913;
  free ensures {:va_keep} out_Tmp_946 == 1 || out_Tmp_946 == 0 || out_Tmp_946 == in_Tmp_946;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation Fat8dot3ToString_loop_L13(in_Tmp_918: int, in_Tmp_942: int, in_ExtensionLength: int, in_Dirent_3: int) returns (out_Tmp_918: int, out_Tmp_942: int, out_ExtensionLength: int)
{

  entry:
    out_Tmp_918, out_Tmp_942, out_ExtensionLength := in_Tmp_918, in_Tmp_942, in_ExtensionLength;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:CounterLoop 3} {:Counter "ExtensionLength"} true;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_ExtensionLength > 0;
    out_Tmp_918 := 8 + out_ExtensionLength - 1;
    assume {:nonnull} in_Dirent_3 != 0;
    assume in_Dirent_3 > 0;
    havoc out_Tmp_942;
    assume {:nonnull} out_Tmp_942 != 0;
    assume out_Tmp_942 > 0;
    goto anon79_Else;

  anon79_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_942 + out_Tmp_918 * 4] == 32;
    out_ExtensionLength := out_ExtensionLength - 1;
    goto anon79_Else_dummy;

  anon79_Else_dummy:
    havoc out_ExtensionLength;
    return;
}



procedure {:LoopProcedure} Fat8dot3ToString_loop_L13(in_Tmp_918: int, in_Tmp_942: int, in_ExtensionLength: int, in_Dirent_3: int) returns (out_Tmp_918: int, out_Tmp_942: int, out_ExtensionLength: int);
  free ensures {:va_keep} out_Tmp_918 == in_Tmp_918 || out_Tmp_918 == 8 + in_ExtensionLength - 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation Fat8dot3ToString_loop_L8(in_Tmp_944: int, in_BaseLength: int, in_Tmp_947: int, in_Dirent_3: int) returns (out_Tmp_944: int, out_BaseLength: int, out_Tmp_947: int)
{

  entry:
    out_Tmp_944, out_BaseLength, out_Tmp_947 := in_Tmp_944, in_BaseLength, in_Tmp_947;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:CounterLoop 8} {:Counter "BaseLength"} true;
    goto anon61_Else;

  anon61_Else:
    assume {:partition} out_BaseLength > 0;
    out_Tmp_944 := out_BaseLength - 1;
    assume {:nonnull} in_Dirent_3 != 0;
    assume in_Dirent_3 > 0;
    havoc out_Tmp_947;
    assume {:nonnull} out_Tmp_947 != 0;
    assume out_Tmp_947 > 0;
    goto anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_947 + out_Tmp_944 * 4] == 32;
    out_BaseLength := out_BaseLength - 1;
    goto anon78_Else_dummy;

  anon78_Else_dummy:
    havoc out_BaseLength;
    return;
}



procedure {:LoopProcedure} Fat8dot3ToString_loop_L8(in_Tmp_944: int, in_BaseLength: int, in_Tmp_947: int, in_Dirent_3: int) returns (out_Tmp_944: int, out_BaseLength: int, out_Tmp_947: int);
  free ensures {:va_keep} out_Tmp_944 == in_Tmp_944 || out_Tmp_944 == in_BaseLength - 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatComputeLfnChecksum_loop_L10(in_i_6: int, in_Checksum: int, in_Dirent_4: int) returns (out_i_6: int, out_Checksum: int)
{

  entry:
    out_i_6, out_Checksum := in_i_6, in_Checksum;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 10} {:Counter "i_6"} true;
    goto anon5_Else;

  anon5_Else:
    assume {:partition} 11 > out_i_6;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} BAND(out_Checksum, 1) != 0;
    goto L15;

  L15:
    assume {:nonnull} in_Dirent_4 != 0;
    assume in_Dirent_4 > 0;
    call {:si_unique_call 1689} out_Checksum := corral_nondet();
    out_i_6 := out_i_6 + 1;
    goto L15_dummy;

  L15_dummy:
    havoc out_i_6;
    return;

  anon6_Then:
    assume {:partition} BAND(out_Checksum, 1) == 0;
    goto L15;
}



procedure {:LoopProcedure} FatComputeLfnChecksum_loop_L10(in_i_6: int, in_Checksum: int, in_Dirent_4: int) returns (out_i_6: int, out_Checksum: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatVerifyFcb_loop_L29(in_Tmp_1115: int, in_CurrentFcb: int, in_IrpContext_64: int) returns (out_Tmp_1115: int, out_CurrentFcb: int)
{

  entry:
    out_Tmp_1115, out_CurrentFcb := in_Tmp_1115, in_CurrentFcb;
    goto L29, exit;

  exit:
    return;

  L29:
    assume {:nonnull} out_CurrentFcb != 0;
    assume out_CurrentFcb > 0;
    goto anon32_Else;

  anon32_Else:
    call {:si_unique_call 1690} FatDetermineAndMarkFcbCondition(in_IrpContext_64, out_CurrentFcb);
    assume {:nonnull} out_CurrentFcb != 0;
    assume out_CurrentFcb > 0;
    goto anon34_Else;

  anon34_Else:
    out_Tmp_1115 := out_CurrentFcb;
    assume {:nonnull} out_Tmp_1115 != 0;
    assume out_Tmp_1115 > 0;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1115] != 1284;
    assume {:nonnull} out_CurrentFcb != 0;
    assume out_CurrentFcb > 0;
    havoc out_CurrentFcb;
    goto anon42_Else_dummy;

  anon42_Else_dummy:
    call {:si_unique_call 1691} {:si_old_unique_call 1} out_Tmp_1115, out_CurrentFcb := FatVerifyFcb_loop_L29(out_Tmp_1115, out_CurrentFcb, in_IrpContext_64);
    return;
}



procedure {:LoopProcedure} FatVerifyFcb_loop_L29(in_Tmp_1115: int, in_CurrentFcb: int, in_IrpContext_64: int) returns (out_Tmp_1115: int, out_CurrentFcb: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatMarkFcbCondition_loop_L29(in_OriginalFcb_1: int, in_IrpContext_65: int, in_Fcb_16: int, in_FcbCondition: int) returns (out_Fcb_16: int)
{

  entry:
    out_Fcb_16 := in_Fcb_16;
    goto L29, exit;

  exit:
    return;

  L29:
    call {:si_unique_call 1692} out_Fcb_16 := FatGetNextFcbTopDown(in_IrpContext_65, out_Fcb_16, in_OriginalFcb_1);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} out_Fcb_16 != 0;
    assume {:nonnull} out_Fcb_16 != 0;
    assume out_Fcb_16 > 0;
    assume {:nonnull} out_Fcb_16 != 0;
    assume out_Fcb_16 > 0;
    goto anon35_Else_dummy;

  anon35_Else_dummy:
    call {:si_unique_call 1693} {:si_old_unique_call 1} out_Fcb_16 := FatMarkFcbCondition_loop_L29(in_OriginalFcb_1, in_IrpContext_65, out_Fcb_16, in_FcbCondition);
    return;
}



procedure {:LoopProcedure} FatMarkFcbCondition_loop_L29(in_OriginalFcb_1: int, in_IrpContext_65: int, in_Fcb_16: int, in_FcbCondition: int) returns (out_Fcb_16: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatAcquireExclusiveFcb_loop_L3(in_Tmp_1193: int, in_sdv_473: int, in_Tmp_1194: int, in_Tmp_1195: int, in_sdv_476: int, in_sdv_478: int, in_Tmp_1197: int, in_IrpContext_71: int, in_Fcb_19: int, in_vslice_dummy_var_183: int) returns (out_Tmp_1193: int, out_sdv_473: int, out_Tmp_1194: int, out_Tmp_1195: int, out_sdv_476: int, out_sdv_478: int, out_Tmp_1197: int, out_vslice_dummy_var_183: int)
{

  entry:
    out_Tmp_1193, out_sdv_473, out_Tmp_1194, out_Tmp_1195, out_sdv_476, out_sdv_478, out_Tmp_1197, out_vslice_dummy_var_183 := in_Tmp_1193, in_sdv_473, in_Tmp_1194, in_Tmp_1195, in_sdv_476, in_sdv_478, in_Tmp_1197, in_vslice_dummy_var_183;
    goto L3, exit;

  exit:
    return;

  L3:
    assume {:nonnull} in_IrpContext_71 != 0;
    assume in_IrpContext_71 > 0;
    out_Tmp_1194 := BAND(Mem_T.Flags__IRP_CONTEXT[Flags__IRP_CONTEXT(in_IrpContext_71)], 2);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} out_Tmp_1194 == 0;
    out_Tmp_1195 := 0;
    goto L57;

  L57:
    call {:si_unique_call 1696} out_sdv_473 := ExAcquireResourceExclusiveLite(0, out_Tmp_1195);
    goto anon17_Else;

  anon17_Else:
    assume {:partition} out_sdv_473 != 0;
    assume {:nonnull} in_Fcb_19 != 0;
    assume in_Fcb_19 > 0;
    havoc out_Tmp_1197;
    assume {:nonnull} out_Tmp_1197 != 0;
    assume out_Tmp_1197 > 0;
    goto anon23_Else;

  anon23_Else:
    assume {:nonnull} in_IrpContext_71 != 0;
    assume in_IrpContext_71 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_71)] != 4;
    goto L16;

  L16:
    assume {:nonnull} in_Fcb_19 != 0;
    assume in_Fcb_19 > 0;
    call {:si_unique_call 1694} out_vslice_dummy_var_183 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 1695} ExReleaseResourceLite(0);
    goto L16_dummy;

  L16_dummy:
    call {:si_unique_call 1699} {:si_old_unique_call 1} out_Tmp_1193, out_sdv_473, out_Tmp_1194, out_Tmp_1195, out_sdv_476, out_sdv_478, out_Tmp_1197, out_vslice_dummy_var_183 := FatAcquireExclusiveFcb_loop_L3(out_Tmp_1193, out_sdv_473, out_Tmp_1194, out_Tmp_1195, out_sdv_476, out_sdv_478, out_Tmp_1197, in_IrpContext_71, in_Fcb_19, out_vslice_dummy_var_183);
    return;

  anon18_Then:
    assume {:partition} Mem_T.MajorFunction__IRP_CONTEXT[MajorFunction__IRP_CONTEXT(in_IrpContext_71)] == 4;
    assume {:nonnull} in_IrpContext_71 != 0;
    assume in_IrpContext_71 > 0;
    out_Tmp_1193 := Mem_T.OriginatingIrp__IRP_CONTEXT[OriginatingIrp__IRP_CONTEXT(in_IrpContext_71)];
    assume {:nonnull} out_Tmp_1193 != 0;
    assume out_Tmp_1193 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 1697} out_sdv_476 := ExGetSharedWaiterCount(0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_sdv_476 == 0;
    call {:si_unique_call 1698} out_sdv_478 := ExGetExclusiveWaiterCount(0);
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_sdv_478 != 0;
    goto L16;

  anon19_Then:
    assume {:partition} out_sdv_476 != 0;
    goto L16;

  anon24_Then:
    goto L16;

  anon22_Then:
    assume {:partition} out_Tmp_1194 != 0;
    out_Tmp_1195 := 1;
    goto L57;
}



procedure {:LoopProcedure} FatAcquireExclusiveFcb_loop_L3(in_Tmp_1193: int, in_sdv_473: int, in_Tmp_1194: int, in_Tmp_1195: int, in_sdv_476: int, in_sdv_478: int, in_Tmp_1197: int, in_IrpContext_71: int, in_Fcb_19: int, in_vslice_dummy_var_183: int) returns (out_Tmp_1193: int, out_sdv_473: int, out_Tmp_1194: int, out_Tmp_1195: int, out_sdv_476: int, out_sdv_478: int, out_Tmp_1197: int, out_vslice_dummy_var_183: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_473 == 0 || out_sdv_473 == 1 || out_sdv_473 == in_sdv_473;
  free ensures {:va_keep} out_Tmp_1195 == 0 || out_Tmp_1195 == 1 || out_Tmp_1195 == in_Tmp_1195;
  free ensures {:va_keep} out_vslice_dummy_var_183 == 258 || out_vslice_dummy_var_183 == 0 || out_vslice_dummy_var_183 == in_vslice_dummy_var_183;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatMarkVolume#0_loop_L99(in_Irp_18: int, in_NextMdl: int, in_Tmp_1134: int) returns (out_NextMdl: int, out_Tmp_1134: int)
{

  entry:
    out_NextMdl, out_Tmp_1134 := in_NextMdl, in_Tmp_1134;
    goto L99, exit;

  exit:
    return;

  L99:
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    goto anon71_Else;

  anon71_Else:
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    havoc out_Tmp_1134;
    assume {:nonnull} out_Tmp_1134 != 0;
    assume out_Tmp_1134 > 0;
    havoc out_NextMdl;
    call {:si_unique_call 1700} MmUnlockPages(0);
    call {:si_unique_call 1701} IoFreeMdl(0);
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    call {:si_unique_call 1702} {:si_old_unique_call 1} out_NextMdl, out_Tmp_1134 := FatMarkVolume#0_loop_L99(in_Irp_18, out_NextMdl, out_Tmp_1134);
    return;
}



procedure {:LoopProcedure} FatMarkVolume#0_loop_L99(in_Irp_18: int, in_NextMdl: int, in_Tmp_1134: int) returns (out_NextMdl: int, out_Tmp_1134: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatMarkVolume#0_loop_L22(in_Tmp_1131: int, in_Offset_4: int, in_Irp_18: int, in_abort: int, in_Tmp_1132: int, in_Tmp_1133: int, in_PinLength: int, in_NextMdl: int, in_Status_21: int, in_Tmp_1134: int, in_sdv_416: int, in_Bcb_11: int, in_ThisPass: int, in_Tmp_1135: int, in_Event_8: int, in_Tmp_1136: int, in_Tmp_1137: int, in_Tmp_1138: int, in_sdv_418: int, in_Tmp_1140: int, in_WriteLength: int, in_FsInfoUpdate: int, in_Tmp_1141: int, in_FsInfoSector: int, in_Tmp_1142: int, in_CurrentHead: int, in_Sector: int, in_Vcb_45: int, in_VolumeState: int, in_vslice_dummy_var_212: int, in_vslice_dummy_var_213: int) returns (out_Tmp_1131: int, out_Irp_18: int, out_abort: int, out_Tmp_1132: int, out_Tmp_1133: int, out_PinLength: int, out_NextMdl: int, out_Status_21: int, out_Tmp_1134: int, out_sdv_416: int, out_Bcb_11: int, out_ThisPass: int, out_Tmp_1135: int, out_Tmp_1136: int, out_Tmp_1137: int, out_Tmp_1138: int, out_sdv_418: int, out_Tmp_1140: int, out_WriteLength: int, out_FsInfoUpdate: int, out_Tmp_1141: int, out_FsInfoSector: int, out_Tmp_1142: int, out_CurrentHead: int, out_vslice_dummy_var_212: int, out_vslice_dummy_var_213: int)
{
  var vslice_dummy_var_7525: int;

  entry:
    out_Tmp_1131, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, out_vslice_dummy_var_212, out_vslice_dummy_var_213 := in_Tmp_1131, in_Irp_18, in_abort, in_Tmp_1132, in_Tmp_1133, in_PinLength, in_NextMdl, in_Status_21, in_Tmp_1134, in_sdv_416, in_Bcb_11, in_ThisPass, in_Tmp_1135, in_Tmp_1136, in_Tmp_1137, in_Tmp_1138, in_sdv_418, in_Tmp_1140, in_WriteLength, in_FsInfoUpdate, in_Tmp_1141, in_FsInfoSector, in_Tmp_1142, in_CurrentHead, in_vslice_dummy_var_212, in_vslice_dummy_var_213;
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:CounterLoop 2} {:Counter "ThisPass"} true;
    goto anon58_Else;

  anon58_Else:
    assume {:partition} 2 > out_ThisPass;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_ThisPass != 1;
    goto L32;

  L32:
    assume {:nonnull} in_Offset_4 != 0;
    assume in_Offset_4 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1133 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1133 != 0;
    assume out_Tmp_1133 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1136 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1138 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1136 != 0;
    assume out_Tmp_1136 > 0;
    assume {:nonnull} out_Tmp_1138 != 0;
    assume out_Tmp_1138 > 0;
    havoc out_Tmp_1132;
    goto L38;

  L38:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1140 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1141 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1140 != 0;
    assume out_Tmp_1140 > 0;
    assume {:nonnull} out_Tmp_1141 != 0;
    assume out_Tmp_1141 > 0;
    havoc out_PinLength;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_WriteLength;
    goto L40;

  L40:
    call {:si_unique_call 1706} out_vslice_dummy_var_212 := corral_nondet();
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_ThisPass == 0;
    call {:si_unique_call 1705} out_sdv_416 := FatIsBootSectorFat(in_Sector);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_sdv_416 != 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    out_Tmp_1131 := in_Sector;
    assume {:nonnull} out_Tmp_1131 != 0;
    assume out_Tmp_1131 > 0;
    out_CurrentHead := CurrentHead__PACKED_BOOT_SECTOR_EX(out_Tmp_1131);
    goto L126;

  L126:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} in_VolumeState != 0;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BOR(Mem_T.INT4[out_CurrentHead], 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} in_VolumeState == 2;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BOR(Mem_T.INT4[out_CurrentHead], 2);
    goto L65;

  L65:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_FsInfoUpdate != 0;
    out_FsInfoSector := in_Sector;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    goto L66;

  L66:
    call {:si_unique_call 1710} KeInitializeEvent(in_Event_8, 0, 0);
    call {:si_unique_call 1711} out_Irp_18 := IoBuildAsynchronousFsdRequest(4, 0, 0, out_WriteLength, 0, 0);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_Irp_18 == 0;
    goto L94;

  L94:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_Irp_18 != 0;
    goto L99;

  L99:
    call {:si_unique_call 1712} out_NextMdl, out_Tmp_1134 := FatMarkVolume#0_loop_L99(out_Irp_18, out_NextMdl, out_Tmp_1134);
    goto L99_last;

  L99_last:
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    havoc out_Tmp_1134;
    assume {:nonnull} out_Tmp_1134 != 0;
    assume out_Tmp_1134 > 0;
    havoc out_NextMdl;
    call {:si_unique_call 1713} MmUnlockPages(0);
    call {:si_unique_call 1714} IoFreeMdl(0);
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    assume false;
    return;

  anon71_Then:
    call {:si_unique_call 1703} IoFreeIrp(0);
    goto L98;

  L98:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_Bcb_11 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_Bcb_11 != 0;
    out_Bcb_11 := 0;
    goto L112;

  L112:
    out_ThisPass := out_ThisPass + 1;
    goto L112_dummy;

  L112_dummy:
    call {:si_unique_call 1715} {:si_old_unique_call 1} out_Tmp_1131, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, out_vslice_dummy_var_212, out_vslice_dummy_var_213 := FatMarkVolume#0_loop_L22(out_Tmp_1131, in_Offset_4, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, in_Event_8, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, in_Sector, in_Vcb_45, in_VolumeState, out_vslice_dummy_var_212, out_vslice_dummy_var_213);
    return;

  anon72_Then:
    assume {:partition} out_Bcb_11 == 0;
    goto L112;

  anon70_Then:
    assume {:partition} out_Bcb_11 == 0;
    goto L112;

  anon69_Then:
    assume {:partition} out_Irp_18 == 0;
    goto L98;

  anon67_Then:
    assume {:partition} out_Irp_18 != 0;
    call {:si_unique_call 1707} out_sdv_418 := sdv_IoGetNextIrpStackLocation(out_Irp_18);
    assume {:nonnull} out_sdv_418 != 0;
    assume out_sdv_418 > 0;
    call {:si_unique_call 1708} sdv_IoSetCompletionRoutine(out_Irp_18, li2bplFunctionConstant600, in_Event_8, 1, 1, 1);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc vslice_dummy_var_7525;
    call {:si_unique_call 1709} out_Status_21 := sdv_IoCallDriver(vslice_dummy_var_7525, out_Irp_18);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_Status_21 == 259;
    call {:si_unique_call 1704} out_vslice_dummy_var_213 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L94;

  anon68_Then:
    assume {:partition} out_Status_21 != 259;
    goto L94;

  anon66_Then:
    assume {:partition} out_FsInfoUpdate == 0;
    goto L66;

  anon83_Then:
    assume {:partition} in_VolumeState != 2;
    goto L65;

  anon75_Then:
    assume {:partition} in_VolumeState == 0;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BAND(Mem_T.INT4[out_CurrentHead], BNOT(1));
    goto L65;

  anon74_Then:
    out_Tmp_1142 := in_Sector;
    assume {:nonnull} out_Tmp_1142 != 0;
    assume out_Tmp_1142 > 0;
    out_CurrentHead := CurrentHead__PACKED_BOOT_SECTOR(out_Tmp_1142);
    goto L126;

  anon73_Then:
    assume {:partition} out_sdv_416 == 0;
    out_abort := 1;
    goto L94;

  anon65_Then:
    assume {:partition} out_ThisPass != 0;
    goto L65;

  anon82_Then:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1137 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1135 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1135 != 0;
    assume out_Tmp_1135 > 0;
    assume {:nonnull} out_Tmp_1137 != 0;
    assume out_Tmp_1137 > 0;
    havoc out_Tmp_1132;
    goto L38;

  anon81_Then:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_PinLength;
    out_WriteLength := out_PinLength;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} in_VolumeState == 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    out_FsInfoUpdate := 1;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_PinLength;
    out_WriteLength := out_PinLength;
    goto L40;

  anon77_Then:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_ThisPass == 1;
    out_FsInfoUpdate := 1;
    assume {:nonnull} in_Offset_4 != 0;
    assume in_Offset_4 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto L40;

  anon78_Then:
    assume {:partition} out_ThisPass != 1;
    goto L40;

  anon76_Then:
    assume {:partition} in_VolumeState != 0;
    goto L40;

  anon84_Then:
    goto L40;

  anon60_Then:
    assume {:partition} out_ThisPass == 1;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon61_Else;

  anon61_Else:
    goto anon62_Else;

  anon62_Else:
    assume {:partition} in_VolumeState == 0;
    goto anon63_Else;

  anon63_Else:
    assume {:partition} out_FsInfoUpdate == 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon64_Else;

  anon64_Else:
    goto L32;
}



procedure {:LoopProcedure} FatMarkVolume#0_loop_L22(in_Tmp_1131: int, in_Offset_4: int, in_Irp_18: int, in_abort: int, in_Tmp_1132: int, in_Tmp_1133: int, in_PinLength: int, in_NextMdl: int, in_Status_21: int, in_Tmp_1134: int, in_sdv_416: int, in_Bcb_11: int, in_ThisPass: int, in_Tmp_1135: int, in_Event_8: int, in_Tmp_1136: int, in_Tmp_1137: int, in_Tmp_1138: int, in_sdv_418: int, in_Tmp_1140: int, in_WriteLength: int, in_FsInfoUpdate: int, in_Tmp_1141: int, in_FsInfoSector: int, in_Tmp_1142: int, in_CurrentHead: int, in_Sector: int, in_Vcb_45: int, in_VolumeState: int, in_vslice_dummy_var_212: int, in_vslice_dummy_var_213: int) returns (out_Tmp_1131: int, out_Irp_18: int, out_abort: int, out_Tmp_1132: int, out_Tmp_1133: int, out_PinLength: int, out_NextMdl: int, out_Status_21: int, out_Tmp_1134: int, out_sdv_416: int, out_Bcb_11: int, out_ThisPass: int, out_Tmp_1135: int, out_Tmp_1136: int, out_Tmp_1137: int, out_Tmp_1138: int, out_sdv_418: int, out_Tmp_1140: int, out_WriteLength: int, out_FsInfoUpdate: int, out_Tmp_1141: int, out_FsInfoSector: int, out_Tmp_1142: int, out_CurrentHead: int, out_vslice_dummy_var_212: int, out_vslice_dummy_var_213: int);
  modifies alloc, sdv_compFset, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.INT4, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} out_Tmp_1131 == in_Tmp_1131 || out_Tmp_1131 == in_Sector;
  free ensures {:va_keep} out_abort == 1 || out_abort == in_abort;
  free ensures {:va_keep} out_Tmp_1133 == in_Tmp_1133 || out_Tmp_1133 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Status_21 == 259 || out_Status_21 == in_Status_21;
  free ensures {:va_keep} out_sdv_416 == 0 || out_sdv_416 == 1 || out_sdv_416 == in_sdv_416;
  free ensures {:va_keep} out_Bcb_11 == 0 || out_Bcb_11 == in_Bcb_11;
  free ensures {:va_keep} out_Tmp_1135 == in_Tmp_1135 || out_Tmp_1135 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1136 == in_Tmp_1136 || out_Tmp_1136 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1137 == in_Tmp_1137 || out_Tmp_1137 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1138 == in_Tmp_1138 || out_Tmp_1138 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1140 == in_Tmp_1140 || out_Tmp_1140 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_FsInfoUpdate == 1 || out_FsInfoUpdate == in_FsInfoUpdate;
  free ensures {:va_keep} out_Tmp_1141 == in_Tmp_1141 || out_Tmp_1141 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_FsInfoSector == in_FsInfoSector || out_FsInfoSector == in_Sector;
  free ensures {:va_keep} out_Tmp_1142 == in_Tmp_1142 || out_Tmp_1142 == in_Sector;
  free ensures {:va_keep} out_CurrentHead == in_CurrentHead || out_CurrentHead == CurrentHead__PACKED_BOOT_SECTOR_EX(in_Sector) || out_CurrentHead == CurrentHead__PACKED_BOOT_SECTOR(in_Sector);
  free ensures {:va_keep} out_vslice_dummy_var_213 == 258 || out_vslice_dummy_var_213 == 0 || out_vslice_dummy_var_213 == in_vslice_dummy_var_213;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatMarkVolume#1_loop_L99(in_Irp_18: int, in_NextMdl: int, in_Tmp_1134: int) returns (out_NextMdl: int, out_Tmp_1134: int)
{

  entry:
    out_NextMdl, out_Tmp_1134 := in_NextMdl, in_Tmp_1134;
    goto L99, exit;

  exit:
    return;

  L99:
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    goto anon71_Else;

  anon71_Else:
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    havoc out_Tmp_1134;
    assume {:nonnull} out_Tmp_1134 != 0;
    assume out_Tmp_1134 > 0;
    havoc out_NextMdl;
    call {:si_unique_call 1716} MmUnlockPages(0);
    call {:si_unique_call 1717} IoFreeMdl(0);
    assume {:nonnull} in_Irp_18 != 0;
    assume in_Irp_18 > 0;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    call {:si_unique_call 1718} {:si_old_unique_call 1} out_NextMdl, out_Tmp_1134 := FatMarkVolume#1_loop_L99(in_Irp_18, out_NextMdl, out_Tmp_1134);
    return;
}



procedure {:LoopProcedure} FatMarkVolume#1_loop_L99(in_Irp_18: int, in_NextMdl: int, in_Tmp_1134: int) returns (out_NextMdl: int, out_Tmp_1134: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:SIextraRecBound 2} FatMarkVolume#1_loop_L22(in_Tmp_1131: int, in_Offset_4: int, in_Irp_18: int, in_abort: int, in_Tmp_1132: int, in_Tmp_1133: int, in_PinLength: int, in_NextMdl: int, in_Status_21: int, in_Tmp_1134: int, in_sdv_416: int, in_Bcb_11: int, in_ThisPass: int, in_Tmp_1135: int, in_Event_8: int, in_Tmp_1136: int, in_Tmp_1137: int, in_Tmp_1138: int, in_sdv_418: int, in_Tmp_1140: int, in_WriteLength: int, in_FsInfoUpdate: int, in_Tmp_1141: int, in_FsInfoSector: int, in_Tmp_1142: int, in_CurrentHead: int, in_Sector: int, in_Vcb_45: int, in_VolumeState: int, in_vslice_dummy_var_215: int, in_vslice_dummy_var_216: int) returns (out_Tmp_1131: int, out_Irp_18: int, out_abort: int, out_Tmp_1132: int, out_Tmp_1133: int, out_PinLength: int, out_NextMdl: int, out_Status_21: int, out_Tmp_1134: int, out_sdv_416: int, out_Bcb_11: int, out_ThisPass: int, out_Tmp_1135: int, out_Tmp_1136: int, out_Tmp_1137: int, out_Tmp_1138: int, out_sdv_418: int, out_Tmp_1140: int, out_WriteLength: int, out_FsInfoUpdate: int, out_Tmp_1141: int, out_FsInfoSector: int, out_Tmp_1142: int, out_CurrentHead: int, out_vslice_dummy_var_215: int, out_vslice_dummy_var_216: int)
{
  var vslice_dummy_var_7526: int;

  entry:
    out_Tmp_1131, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, out_vslice_dummy_var_215, out_vslice_dummy_var_216 := in_Tmp_1131, in_Irp_18, in_abort, in_Tmp_1132, in_Tmp_1133, in_PinLength, in_NextMdl, in_Status_21, in_Tmp_1134, in_sdv_416, in_Bcb_11, in_ThisPass, in_Tmp_1135, in_Tmp_1136, in_Tmp_1137, in_Tmp_1138, in_sdv_418, in_Tmp_1140, in_WriteLength, in_FsInfoUpdate, in_Tmp_1141, in_FsInfoSector, in_Tmp_1142, in_CurrentHead, in_vslice_dummy_var_215, in_vslice_dummy_var_216;
    goto L22, exit;

  exit:
    return;

  L22:
    assume {:CounterLoop 2} {:Counter "ThisPass"} true;
    goto anon58_Else;

  anon58_Else:
    assume {:partition} 2 > out_ThisPass;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_ThisPass != 1;
    goto L32;

  L32:
    assume {:nonnull} in_Offset_4 != 0;
    assume in_Offset_4 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1133 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1133 != 0;
    assume out_Tmp_1133 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1136 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1138 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1136 != 0;
    assume out_Tmp_1136 > 0;
    assume {:nonnull} out_Tmp_1138 != 0;
    assume out_Tmp_1138 > 0;
    havoc out_Tmp_1132;
    goto L38;

  L38:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1140 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1141 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1140 != 0;
    assume out_Tmp_1140 > 0;
    assume {:nonnull} out_Tmp_1141 != 0;
    assume out_Tmp_1141 > 0;
    havoc out_PinLength;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_WriteLength;
    goto L40;

  L40:
    call {:si_unique_call 1722} out_vslice_dummy_var_215 := corral_nondet();
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_ThisPass == 0;
    call {:si_unique_call 1721} out_sdv_416 := FatIsBootSectorFat(in_Sector);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_sdv_416 != 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    out_Tmp_1131 := in_Sector;
    assume {:nonnull} out_Tmp_1131 != 0;
    assume out_Tmp_1131 > 0;
    out_CurrentHead := CurrentHead__PACKED_BOOT_SECTOR_EX(out_Tmp_1131);
    goto L126;

  L126:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} in_VolumeState != 0;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BOR(Mem_T.INT4[out_CurrentHead], 1);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} in_VolumeState == 2;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BOR(Mem_T.INT4[out_CurrentHead], 2);
    goto L65;

  L65:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_FsInfoUpdate != 0;
    out_FsInfoSector := in_Sector;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} out_FsInfoSector != 0;
    assume out_FsInfoSector > 0;
    goto L66;

  L66:
    call {:si_unique_call 1726} KeInitializeEvent(in_Event_8, 0, 0);
    call {:si_unique_call 1727} out_Irp_18 := IoBuildAsynchronousFsdRequest(4, 0, 0, out_WriteLength, 0, 0);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_Irp_18 == 0;
    goto L94;

  L94:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_Irp_18 != 0;
    goto L99;

  L99:
    call {:si_unique_call 1728} out_NextMdl, out_Tmp_1134 := FatMarkVolume#1_loop_L99(out_Irp_18, out_NextMdl, out_Tmp_1134);
    goto L99_last;

  L99_last:
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    havoc out_Tmp_1134;
    assume {:nonnull} out_Tmp_1134 != 0;
    assume out_Tmp_1134 > 0;
    havoc out_NextMdl;
    call {:si_unique_call 1729} MmUnlockPages(0);
    call {:si_unique_call 1730} IoFreeMdl(0);
    assume {:nonnull} out_Irp_18 != 0;
    assume out_Irp_18 > 0;
    assume false;
    return;

  anon71_Then:
    call {:si_unique_call 1719} IoFreeIrp(0);
    goto L98;

  L98:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} out_Bcb_11 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_Bcb_11 != 0;
    out_Bcb_11 := 0;
    goto L112;

  L112:
    out_ThisPass := out_ThisPass + 1;
    goto L112_dummy;

  L112_dummy:
    call {:si_unique_call 1731} {:si_old_unique_call 1} out_Tmp_1131, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, out_vslice_dummy_var_215, out_vslice_dummy_var_216 := FatMarkVolume#1_loop_L22(out_Tmp_1131, in_Offset_4, out_Irp_18, out_abort, out_Tmp_1132, out_Tmp_1133, out_PinLength, out_NextMdl, out_Status_21, out_Tmp_1134, out_sdv_416, out_Bcb_11, out_ThisPass, out_Tmp_1135, in_Event_8, out_Tmp_1136, out_Tmp_1137, out_Tmp_1138, out_sdv_418, out_Tmp_1140, out_WriteLength, out_FsInfoUpdate, out_Tmp_1141, out_FsInfoSector, out_Tmp_1142, out_CurrentHead, in_Sector, in_Vcb_45, in_VolumeState, out_vslice_dummy_var_215, out_vslice_dummy_var_216);
    return;

  anon72_Then:
    assume {:partition} out_Bcb_11 == 0;
    goto L112;

  anon70_Then:
    assume {:partition} out_Bcb_11 == 0;
    goto L112;

  anon69_Then:
    assume {:partition} out_Irp_18 == 0;
    goto L98;

  anon67_Then:
    assume {:partition} out_Irp_18 != 0;
    call {:si_unique_call 1723} out_sdv_418 := sdv_IoGetNextIrpStackLocation(out_Irp_18);
    assume {:nonnull} out_sdv_418 != 0;
    assume out_sdv_418 > 0;
    call {:si_unique_call 1724} sdv_IoSetCompletionRoutine(out_Irp_18, li2bplFunctionConstant600, in_Event_8, 1, 1, 1);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc vslice_dummy_var_7526;
    call {:si_unique_call 1725} out_Status_21 := sdv_IoCallDriver(vslice_dummy_var_7526, out_Irp_18);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_Status_21 == 259;
    call {:si_unique_call 1720} out_vslice_dummy_var_216 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L94;

  anon68_Then:
    assume {:partition} out_Status_21 != 259;
    goto L94;

  anon66_Then:
    assume {:partition} out_FsInfoUpdate == 0;
    goto L66;

  anon83_Then:
    assume {:partition} in_VolumeState != 2;
    goto L65;

  anon75_Then:
    assume {:partition} in_VolumeState == 0;
    assume {:nonnull} out_CurrentHead != 0;
    assume out_CurrentHead > 0;
    Mem_T.INT4[out_CurrentHead] := BAND(Mem_T.INT4[out_CurrentHead], BNOT(1));
    goto L65;

  anon74_Then:
    out_Tmp_1142 := in_Sector;
    assume {:nonnull} out_Tmp_1142 != 0;
    assume out_Tmp_1142 > 0;
    out_CurrentHead := CurrentHead__PACKED_BOOT_SECTOR(out_Tmp_1142);
    goto L126;

  anon73_Then:
    assume {:partition} out_sdv_416 == 0;
    out_abort := 1;
    goto L94;

  anon65_Then:
    assume {:partition} out_ThisPass != 0;
    goto L65;

  anon82_Then:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1137 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    out_Tmp_1135 := Bpb__VCB(in_Vcb_45);
    assume {:nonnull} out_Tmp_1135 != 0;
    assume out_Tmp_1135 > 0;
    assume {:nonnull} out_Tmp_1137 != 0;
    assume out_Tmp_1137 > 0;
    havoc out_Tmp_1132;
    goto L38;

  anon81_Then:
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_PinLength;
    out_WriteLength := out_PinLength;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} in_VolumeState == 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    out_FsInfoUpdate := 1;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    havoc out_PinLength;
    out_WriteLength := out_PinLength;
    goto L40;

  anon77_Then:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_ThisPass == 1;
    out_FsInfoUpdate := 1;
    assume {:nonnull} in_Offset_4 != 0;
    assume in_Offset_4 > 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto L40;

  anon78_Then:
    assume {:partition} out_ThisPass != 1;
    goto L40;

  anon76_Then:
    assume {:partition} in_VolumeState != 0;
    goto L40;

  anon84_Then:
    goto L40;

  anon60_Then:
    assume {:partition} out_ThisPass == 1;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon61_Else;

  anon61_Else:
    goto anon62_Else;

  anon62_Else:
    assume {:partition} in_VolumeState == 0;
    goto anon63_Else;

  anon63_Else:
    assume {:partition} out_FsInfoUpdate == 0;
    assume {:nonnull} in_Vcb_45 != 0;
    assume in_Vcb_45 > 0;
    goto anon64_Else;

  anon64_Else:
    goto L32;
}



procedure {:LoopProcedure} FatMarkVolume#1_loop_L22(in_Tmp_1131: int, in_Offset_4: int, in_Irp_18: int, in_abort: int, in_Tmp_1132: int, in_Tmp_1133: int, in_PinLength: int, in_NextMdl: int, in_Status_21: int, in_Tmp_1134: int, in_sdv_416: int, in_Bcb_11: int, in_ThisPass: int, in_Tmp_1135: int, in_Event_8: int, in_Tmp_1136: int, in_Tmp_1137: int, in_Tmp_1138: int, in_sdv_418: int, in_Tmp_1140: int, in_WriteLength: int, in_FsInfoUpdate: int, in_Tmp_1141: int, in_FsInfoSector: int, in_Tmp_1142: int, in_CurrentHead: int, in_Sector: int, in_Vcb_45: int, in_VolumeState: int, in_vslice_dummy_var_215: int, in_vslice_dummy_var_216: int) returns (out_Tmp_1131: int, out_Irp_18: int, out_abort: int, out_Tmp_1132: int, out_Tmp_1133: int, out_PinLength: int, out_NextMdl: int, out_Status_21: int, out_Tmp_1134: int, out_sdv_416: int, out_Bcb_11: int, out_ThisPass: int, out_Tmp_1135: int, out_Tmp_1136: int, out_Tmp_1137: int, out_Tmp_1138: int, out_sdv_418: int, out_Tmp_1140: int, out_WriteLength: int, out_FsInfoUpdate: int, out_Tmp_1141: int, out_FsInfoSector: int, out_Tmp_1142: int, out_CurrentHead: int, out_vslice_dummy_var_215: int, out_vslice_dummy_var_216: int);
  modifies alloc, sdv_compFset, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.PendingReturned__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.INT4, s;
  free ensures {:va_keep} old(s) == 1 ==> s != 0;
  free ensures {:va_keep} s == 1 || s == old(s);
  free ensures {:va_keep} out_Tmp_1131 == in_Tmp_1131 || out_Tmp_1131 == in_Sector;
  free ensures {:va_keep} out_abort == 1 || out_abort == in_abort;
  free ensures {:va_keep} out_Tmp_1133 == in_Tmp_1133 || out_Tmp_1133 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Status_21 == 259 || out_Status_21 == in_Status_21;
  free ensures {:va_keep} out_sdv_416 == 0 || out_sdv_416 == 1 || out_sdv_416 == in_sdv_416;
  free ensures {:va_keep} out_Bcb_11 == 0 || out_Bcb_11 == in_Bcb_11;
  free ensures {:va_keep} out_Tmp_1135 == in_Tmp_1135 || out_Tmp_1135 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1136 == in_Tmp_1136 || out_Tmp_1136 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1137 == in_Tmp_1137 || out_Tmp_1137 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1138 == in_Tmp_1138 || out_Tmp_1138 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_Tmp_1140 == in_Tmp_1140 || out_Tmp_1140 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_FsInfoUpdate == 1 || out_FsInfoUpdate == in_FsInfoUpdate;
  free ensures {:va_keep} out_Tmp_1141 == in_Tmp_1141 || out_Tmp_1141 == Bpb__VCB(in_Vcb_45);
  free ensures {:va_keep} out_FsInfoSector == in_FsInfoSector || out_FsInfoSector == in_Sector;
  free ensures {:va_keep} out_Tmp_1142 == in_Tmp_1142 || out_Tmp_1142 == in_Sector;
  free ensures {:va_keep} out_CurrentHead == in_CurrentHead || out_CurrentHead == CurrentHead__PACKED_BOOT_SECTOR_EX(in_Sector) || out_CurrentHead == CurrentHead__PACKED_BOOT_SECTOR(in_Sector);
  free ensures {:va_keep} out_vslice_dummy_var_216 == 258 || out_vslice_dummy_var_216 == 0 || out_vslice_dummy_var_216 == in_vslice_dummy_var_216;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLookupFileAllocation#0_loop_L46(in_BytesOnVolume: int, in_Tmp_140: int, in_CurrentLbo: int, in_Tmp_141: int, in_Runs: int, in_Context: int, in_sdv_46: int, in_LastCluster: int, in_Vcb_10: int, in_FatEntry_1: int, in_FirstLboOfCurrentRun: int, in_FirstVboOfCurrentRun: int, in_CurrentVbo: int, in_BytesPerCluster_1: int, in_PriorLbo: int, in_IrpContext_15: int, in_FcbOrDcb: int, in_Vbo: int, in_EndOnMax: int, in_boogieTmp: int, in_vslice_dummy_var_230: int, in_vslice_dummy_var_231: int) returns (out_Tmp_140: int, out_Tmp_141: int, out_sdv_46: int, out_LastCluster: int, out_FirstLboOfCurrentRun: int, out_FirstVboOfCurrentRun: int, out_PriorLbo: int, out_boogieTmp: int, out_vslice_dummy_var_230: int, out_vslice_dummy_var_231: int)
{

  entry:
    out_Tmp_140, out_Tmp_141, out_sdv_46, out_LastCluster, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, out_PriorLbo, out_boogieTmp, out_vslice_dummy_var_230, out_vslice_dummy_var_231 := in_Tmp_140, in_Tmp_141, in_sdv_46, in_LastCluster, in_FirstLboOfCurrentRun, in_FirstVboOfCurrentRun, in_PriorLbo, in_boogieTmp, in_vslice_dummy_var_230, in_vslice_dummy_var_231;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon52_Then;

  anon52_Then:
    assume {:partition} out_LastCluster == 0;
    assume {:nonnull} in_FatEntry_1 != 0;
    assume in_FatEntry_1 > 0;
    call {:si_unique_call 1735} FatLookupFatEntry(in_IrpContext_15, in_Vcb_10, Mem_T.INT4[in_FatEntry_1], in_FatEntry_1, in_Context);
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    out_PriorLbo := Mem_T.INT4[in_CurrentLbo];
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    call {:si_unique_call 1736} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_CurrentLbo] := out_boogieTmp;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    Mem_T.INT4[in_CurrentVbo] := Mem_T.INT4[in_CurrentVbo] + in_BytesPerCluster_1;
    assume {:nonnull} in_FatEntry_1 != 0;
    assume in_FatEntry_1 > 0;
    call {:si_unique_call 1737} out_sdv_46 := FatInterpretClusterType(in_Vcb_10, Mem_T.INT4[in_FatEntry_1]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_sdv_46 != 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_sdv_46 != 1;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_sdv_46 != 2;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_sdv_46 != 3;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_sdv_46 == 4;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] != 0;
    assume {:nonnull} in_BytesOnVolume != 0;
    assume in_BytesOnVolume > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L86;

  L86:
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_PriorLbo + in_BytesPerCluster_1 != Mem_T.INT4[in_CurrentLbo];
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_FirstLboOfCurrentRun != 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_Tmp_141 := Mem_T.INT4[in_CurrentVbo] - out_FirstVboOfCurrentRun;
    assume {:nonnull} in_FcbOrDcb != 0;
    assume in_FcbOrDcb > 0;
    call {:si_unique_call 1732} out_vslice_dummy_var_231 := FatAddMcbEntry(in_Vcb_10, Mcb__FCB(in_FcbOrDcb), out_FirstVboOfCurrentRun, out_FirstLboOfCurrentRun, out_Tmp_141);
    assume {:nonnull} in_Runs != 0;
    assume in_Runs > 0;
    Mem_T.INT4[in_Runs] := Mem_T.INT4[in_Runs] + 1;
    goto L89;

  L89:
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] > in_Vbo;
    out_LastCluster := 1;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 1742} {:si_old_unique_call 1} out_Tmp_140, out_Tmp_141, out_sdv_46, out_LastCluster, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, out_PriorLbo, out_boogieTmp, out_vslice_dummy_var_230, out_vslice_dummy_var_231 := FatLookupFileAllocation#0_loop_L46(in_BytesOnVolume, out_Tmp_140, in_CurrentLbo, out_Tmp_141, in_Runs, in_Context, out_sdv_46, out_LastCluster, in_Vcb_10, in_FatEntry_1, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, in_CurrentVbo, in_BytesPerCluster_1, out_PriorLbo, in_IrpContext_15, in_FcbOrDcb, in_Vbo, in_EndOnMax, out_boogieTmp, out_vslice_dummy_var_230, out_vslice_dummy_var_231);
    return;

  anon61_Then:
    assume {:partition} in_Vbo >= Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_FirstVboOfCurrentRun := Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    out_FirstLboOfCurrentRun := Mem_T.INT4[in_CurrentLbo];
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    goto L_BAF_1;

  anon60_Then:
    assume {:partition} out_FirstLboOfCurrentRun == 0;
    goto L89;

  anon59_Then:
    assume {:partition} out_PriorLbo + in_BytesPerCluster_1 == Mem_T.INT4[in_CurrentLbo];
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    goto L_BAF_1;

  anon57_Then:
    assume {:nonnull} in_BytesOnVolume != 0;
    assume in_BytesOnVolume > 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L86;

  anon58_Then:
    goto L81;

  L81:
    call {:si_unique_call 1733} FatPopUpFileCorrupt#0(in_IrpContext_15, in_FcbOrDcb);
    assume {:nonnull} in_IrpContext_15 != 0;
    assume in_IrpContext_15 > 0;
    call {:si_unique_call 1734} ExRaiseStatus(-1073741566);
    goto L86;

  anon56_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] == 0;
    goto L81;

  anon65_Then:
    assume {:partition} out_sdv_46 != 4;
    call {:si_unique_call 1738} KeBugCheckEx(35, 132170, 0, 0, 0);
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    goto L_BAF_1;

  anon66_Then:
    assume {:partition} out_sdv_46 == 3;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] != 0;
    goto L103;

  L103:
    out_LastCluster := 1;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_FirstLboOfCurrentRun != 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_Tmp_140 := Mem_T.INT4[in_CurrentVbo] - out_FirstVboOfCurrentRun;
    assume {:nonnull} in_FcbOrDcb != 0;
    assume in_FcbOrDcb > 0;
    call {:si_unique_call 1739} out_vslice_dummy_var_230 := FatAddMcbEntry(in_Vcb_10, Mcb__FCB(in_FcbOrDcb), out_FirstVboOfCurrentRun, out_FirstLboOfCurrentRun, out_Tmp_140);
    assume {:nonnull} in_Runs != 0;
    assume in_Runs > 0;
    Mem_T.INT4[in_Runs] := Mem_T.INT4[in_Runs] + 1;
    goto L105;

  L105:
    goto anon62_Then;

  anon62_Then:
    assume {:partition} in_Vbo != -2;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} in_Vbo >= Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_EndOnMax != 0;
    assume in_EndOnMax > 0;
    goto anon64_Then;

  anon64_Then:
    assume {:partition} Mem_T.INT4[in_EndOnMax] != 0;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    goto L_BAF_1;

  anon63_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] > in_Vbo;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_1;

  anon72_Then:
    assume {:partition} out_FirstLboOfCurrentRun == 0;
    goto L105;

  anon55_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] == 0;
    assume {:nonnull} in_EndOnMax != 0;
    assume in_EndOnMax > 0;
    Mem_T.INT4[in_EndOnMax] := 1;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    Mem_T.INT4[in_CurrentVbo] := Mem_T.INT4[in_CurrentVbo] - 1;
    goto L103;

  anon67_Then:
    assume {:partition} out_sdv_46 == 2;
    goto L76;

  L76:
    call {:si_unique_call 1740} FatPopUpFileCorrupt#0(in_IrpContext_15, in_FcbOrDcb);
    assume {:nonnull} in_IrpContext_15 != 0;
    assume in_IrpContext_15 > 0;
    call {:si_unique_call 1741} ExRaiseStatus(-1073741566);
    goto L76_dummy;

  L76_dummy:
    goto L_BAF_1;

  anon68_Then:
    assume {:partition} out_sdv_46 == 1;
    goto L76;

  anon54_Then:
    assume {:partition} out_sdv_46 == 0;
    goto L76;
}



procedure {:LoopProcedure} FatLookupFileAllocation#0_loop_L46(in_BytesOnVolume: int, in_Tmp_140: int, in_CurrentLbo: int, in_Tmp_141: int, in_Runs: int, in_Context: int, in_sdv_46: int, in_LastCluster: int, in_Vcb_10: int, in_FatEntry_1: int, in_FirstLboOfCurrentRun: int, in_FirstVboOfCurrentRun: int, in_CurrentVbo: int, in_BytesPerCluster_1: int, in_PriorLbo: int, in_IrpContext_15: int, in_FcbOrDcb: int, in_Vbo: int, in_EndOnMax: int, in_boogieTmp: int, in_vslice_dummy_var_230: int, in_vslice_dummy_var_231: int) returns (out_Tmp_140: int, out_Tmp_141: int, out_sdv_46: int, out_LastCluster: int, out_FirstLboOfCurrentRun: int, out_FirstVboOfCurrentRun: int, out_PriorLbo: int, out_boogieTmp: int, out_vslice_dummy_var_230: int, out_vslice_dummy_var_231: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_46 == 4 || out_sdv_46 == 1 || out_sdv_46 == 2 || out_sdv_46 == 3 || out_sdv_46 == 0 || out_sdv_46 == in_sdv_46;
  free ensures {:va_keep} out_LastCluster == 1 || out_LastCluster == in_LastCluster;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLookupFileAllocation#1_loop_L46(in_BytesOnVolume: int, in_Tmp_140: int, in_CurrentLbo: int, in_Tmp_141: int, in_Runs: int, in_Context: int, in_sdv_46: int, in_LastCluster: int, in_Vcb_10: int, in_FatEntry_1: int, in_FirstLboOfCurrentRun: int, in_FirstVboOfCurrentRun: int, in_CurrentVbo: int, in_BytesPerCluster_1: int, in_PriorLbo: int, in_IrpContext_15: int, in_FcbOrDcb: int, in_Vbo: int, in_EndOnMax: int, in_boogieTmp: int, in_vslice_dummy_var_233: int, in_vslice_dummy_var_234: int) returns (out_Tmp_140: int, out_Tmp_141: int, out_sdv_46: int, out_LastCluster: int, out_FirstLboOfCurrentRun: int, out_FirstVboOfCurrentRun: int, out_PriorLbo: int, out_boogieTmp: int, out_vslice_dummy_var_233: int, out_vslice_dummy_var_234: int)
{

  entry:
    out_Tmp_140, out_Tmp_141, out_sdv_46, out_LastCluster, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, out_PriorLbo, out_boogieTmp, out_vslice_dummy_var_233, out_vslice_dummy_var_234 := in_Tmp_140, in_Tmp_141, in_sdv_46, in_LastCluster, in_FirstLboOfCurrentRun, in_FirstVboOfCurrentRun, in_PriorLbo, in_boogieTmp, in_vslice_dummy_var_233, in_vslice_dummy_var_234;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon52_Then;

  anon52_Then:
    assume {:partition} out_LastCluster == 0;
    assume {:nonnull} in_FatEntry_1 != 0;
    assume in_FatEntry_1 > 0;
    call {:si_unique_call 1746} FatLookupFatEntry(in_IrpContext_15, in_Vcb_10, Mem_T.INT4[in_FatEntry_1], in_FatEntry_1, in_Context);
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    out_PriorLbo := Mem_T.INT4[in_CurrentLbo];
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    call {:si_unique_call 1747} out_boogieTmp := corral_nondet();
    Mem_T.INT4[in_CurrentLbo] := out_boogieTmp;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    Mem_T.INT4[in_CurrentVbo] := Mem_T.INT4[in_CurrentVbo] + in_BytesPerCluster_1;
    assume {:nonnull} in_FatEntry_1 != 0;
    assume in_FatEntry_1 > 0;
    call {:si_unique_call 1748} out_sdv_46 := FatInterpretClusterType(in_Vcb_10, Mem_T.INT4[in_FatEntry_1]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} out_sdv_46 != 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} out_sdv_46 != 1;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} out_sdv_46 != 2;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_sdv_46 != 3;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} out_sdv_46 == 4;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] != 0;
    assume {:nonnull} in_BytesOnVolume != 0;
    assume in_BytesOnVolume > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L86;

  L86:
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} out_PriorLbo + in_BytesPerCluster_1 != Mem_T.INT4[in_CurrentLbo];
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_FirstLboOfCurrentRun != 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_Tmp_141 := Mem_T.INT4[in_CurrentVbo] - out_FirstVboOfCurrentRun;
    assume {:nonnull} in_FcbOrDcb != 0;
    assume in_FcbOrDcb > 0;
    call {:si_unique_call 1743} out_vslice_dummy_var_234 := FatAddMcbEntry(in_Vcb_10, Mcb__FCB(in_FcbOrDcb), out_FirstVboOfCurrentRun, out_FirstLboOfCurrentRun, out_Tmp_141);
    assume {:nonnull} in_Runs != 0;
    assume in_Runs > 0;
    Mem_T.INT4[in_Runs] := Mem_T.INT4[in_Runs] + 1;
    goto L89;

  L89:
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] > in_Vbo;
    out_LastCluster := 1;
    goto anon61_Else_dummy;

  anon61_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 1753} {:si_old_unique_call 1} out_Tmp_140, out_Tmp_141, out_sdv_46, out_LastCluster, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, out_PriorLbo, out_boogieTmp, out_vslice_dummy_var_233, out_vslice_dummy_var_234 := FatLookupFileAllocation#1_loop_L46(in_BytesOnVolume, out_Tmp_140, in_CurrentLbo, out_Tmp_141, in_Runs, in_Context, out_sdv_46, out_LastCluster, in_Vcb_10, in_FatEntry_1, out_FirstLboOfCurrentRun, out_FirstVboOfCurrentRun, in_CurrentVbo, in_BytesPerCluster_1, out_PriorLbo, in_IrpContext_15, in_FcbOrDcb, in_Vbo, in_EndOnMax, out_boogieTmp, out_vslice_dummy_var_233, out_vslice_dummy_var_234);
    return;

  anon61_Then:
    assume {:partition} in_Vbo >= Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_FirstVboOfCurrentRun := Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_CurrentLbo != 0;
    assume in_CurrentLbo > 0;
    out_FirstLboOfCurrentRun := Mem_T.INT4[in_CurrentLbo];
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    goto L_BAF_2;

  anon60_Then:
    assume {:partition} out_FirstLboOfCurrentRun == 0;
    goto L89;

  anon59_Then:
    assume {:partition} out_PriorLbo + in_BytesPerCluster_1 == Mem_T.INT4[in_CurrentLbo];
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    goto L_BAF_2;

  anon57_Then:
    assume {:nonnull} in_BytesOnVolume != 0;
    assume in_BytesOnVolume > 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L86;

  anon58_Then:
    goto L81;

  L81:
    call {:si_unique_call 1744} FatPopUpFileCorrupt#1(in_IrpContext_15, in_FcbOrDcb);
    assume {:nonnull} in_IrpContext_15 != 0;
    assume in_IrpContext_15 > 0;
    call {:si_unique_call 1745} ExRaiseStatus(-1073741566);
    goto L86;

  anon56_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] == 0;
    goto L81;

  anon65_Then:
    assume {:partition} out_sdv_46 != 4;
    call {:si_unique_call 1749} KeBugCheckEx(35, 132170, 0, 0, 0);
    goto anon65_Then_dummy;

  anon65_Then_dummy:
    goto L_BAF_2;

  anon66_Then:
    assume {:partition} out_sdv_46 == 3;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] != 0;
    goto L103;

  L103:
    out_LastCluster := 1;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_FirstLboOfCurrentRun != 0;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    out_Tmp_140 := Mem_T.INT4[in_CurrentVbo] - out_FirstVboOfCurrentRun;
    assume {:nonnull} in_FcbOrDcb != 0;
    assume in_FcbOrDcb > 0;
    call {:si_unique_call 1750} out_vslice_dummy_var_233 := FatAddMcbEntry(in_Vcb_10, Mcb__FCB(in_FcbOrDcb), out_FirstVboOfCurrentRun, out_FirstLboOfCurrentRun, out_Tmp_140);
    assume {:nonnull} in_Runs != 0;
    assume in_Runs > 0;
    Mem_T.INT4[in_Runs] := Mem_T.INT4[in_Runs] + 1;
    goto L105;

  L105:
    goto anon62_Then;

  anon62_Then:
    assume {:partition} in_Vbo != -2;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} in_Vbo >= Mem_T.INT4[in_CurrentVbo];
    assume {:nonnull} in_EndOnMax != 0;
    assume in_EndOnMax > 0;
    goto anon64_Then;

  anon64_Then:
    assume {:partition} Mem_T.INT4[in_EndOnMax] != 0;
    goto anon64_Then_dummy;

  anon64_Then_dummy:
    goto L_BAF_2;

  anon63_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] > in_Vbo;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    goto L_BAF_2;

  anon72_Then:
    assume {:partition} out_FirstLboOfCurrentRun == 0;
    goto L105;

  anon55_Then:
    assume {:partition} Mem_T.INT4[in_CurrentVbo] == 0;
    assume {:nonnull} in_EndOnMax != 0;
    assume in_EndOnMax > 0;
    Mem_T.INT4[in_EndOnMax] := 1;
    assume {:nonnull} in_CurrentVbo != 0;
    assume in_CurrentVbo > 0;
    Mem_T.INT4[in_CurrentVbo] := Mem_T.INT4[in_CurrentVbo] - 1;
    goto L103;

  anon67_Then:
    assume {:partition} out_sdv_46 == 2;
    goto L76;

  L76:
    call {:si_unique_call 1751} FatPopUpFileCorrupt#1(in_IrpContext_15, in_FcbOrDcb);
    assume {:nonnull} in_IrpContext_15 != 0;
    assume in_IrpContext_15 > 0;
    call {:si_unique_call 1752} ExRaiseStatus(-1073741566);
    goto L76_dummy;

  L76_dummy:
    goto L_BAF_2;

  anon68_Then:
    assume {:partition} out_sdv_46 == 1;
    goto L76;

  anon54_Then:
    assume {:partition} out_sdv_46 == 0;
    goto L76;
}



procedure {:LoopProcedure} FatLookupFileAllocation#1_loop_L46(in_BytesOnVolume: int, in_Tmp_140: int, in_CurrentLbo: int, in_Tmp_141: int, in_Runs: int, in_Context: int, in_sdv_46: int, in_LastCluster: int, in_Vcb_10: int, in_FatEntry_1: int, in_FirstLboOfCurrentRun: int, in_FirstVboOfCurrentRun: int, in_CurrentVbo: int, in_BytesPerCluster_1: int, in_PriorLbo: int, in_IrpContext_15: int, in_FcbOrDcb: int, in_Vbo: int, in_EndOnMax: int, in_boogieTmp: int, in_vslice_dummy_var_233: int, in_vslice_dummy_var_234: int) returns (out_Tmp_140: int, out_Tmp_141: int, out_sdv_46: int, out_LastCluster: int, out_FirstLboOfCurrentRun: int, out_FirstVboOfCurrentRun: int, out_PriorLbo: int, out_boogieTmp: int, out_vslice_dummy_var_233: int, out_vslice_dummy_var_234: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_46 == 4 || out_sdv_46 == 1 || out_sdv_46 == 2 || out_sdv_46 == 3 || out_sdv_46 == 0 || out_sdv_46 == in_sdv_46;
  free ensures {:va_keep} out_LastCluster == 1 || out_LastCluster == in_LastCluster;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFullFileNameInFcb#0_loop_L53(in_TmpFcb: int, in_Lfn_1: int, in_Tmp_892: int, in_StopFcb: int, in_TmpBuffer: int, in_IrpContext_46: int) returns (out_TmpFcb: int, out_Tmp_892: int)
{

  entry:
    out_TmpFcb, out_Tmp_892 := in_TmpFcb, in_Tmp_892;
    goto L53, exit;

  exit:
    return;

  L53:
    goto anon21_Else;

  anon21_Else:
    assume {:partition} out_TmpFcb != in_StopFcb;
    call {:si_unique_call 1754} FatGetUnicodeNameFromFcb#0(in_IrpContext_46, out_TmpFcb, in_Lfn_1);
    assume {:nonnull} in_Lfn_1 != 0;
    assume in_Lfn_1 > 0;
    havoc out_Tmp_892;
    call {:si_unique_call 1755} sdv_RtlCopyMemory(0, 0, out_Tmp_892);
    assume {:nonnull} in_TmpBuffer != 0;
    assume in_TmpBuffer > 0;
    Mem_T.INT4[in_TmpBuffer] := 92;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_TmpFcb;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    call {:si_unique_call 1756} {:si_old_unique_call 1} out_TmpFcb, out_Tmp_892 := FatSetFullFileNameInFcb#0_loop_L53(out_TmpFcb, in_Lfn_1, out_Tmp_892, in_StopFcb, in_TmpBuffer, in_IrpContext_46);
    return;
}



procedure {:LoopProcedure} FatSetFullFileNameInFcb#0_loop_L53(in_TmpFcb: int, in_Lfn_1: int, in_Tmp_892: int, in_StopFcb: int, in_TmpBuffer: int, in_IrpContext_46: int) returns (out_TmpFcb: int, out_Tmp_892: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFullFileNameInFcb#0_loop_L17(in_PathLength: int, in_TmpFcb: int, in_Tmp_894: int, in_Fcb_11: int) returns (out_PathLength: int, out_TmpFcb: int, out_Tmp_894: int)
{

  entry:
    out_PathLength, out_TmpFcb, out_Tmp_894 := in_PathLength, in_TmpFcb, in_Tmp_894;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:nonnull} in_Fcb_11 != 0;
    assume in_Fcb_11 > 0;
    havoc out_Tmp_894;
    assume {:nonnull} out_Tmp_894 != 0;
    assume out_Tmp_894 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_TmpFcb != Mem_T.RootDcb__VCB[RootDcb__VCB(out_Tmp_894)];
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_TmpFcb != in_Fcb_11;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    goto anon20_Then;

  anon20_Then:
    goto L20;

  L20:
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_PathLength;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_TmpFcb;
    goto L20_dummy;

  L20_dummy:
    call {:si_unique_call 1757} {:si_old_unique_call 1} out_PathLength, out_TmpFcb, out_Tmp_894 := FatSetFullFileNameInFcb#0_loop_L17(out_PathLength, out_TmpFcb, out_Tmp_894, in_Fcb_11);
    return;

  anon19_Then:
    assume {:partition} out_TmpFcb == in_Fcb_11;
    goto L20;
}



procedure {:LoopProcedure} FatSetFullFileNameInFcb#0_loop_L17(in_PathLength: int, in_TmpFcb: int, in_Tmp_894: int, in_Fcb_11: int) returns (out_PathLength: int, out_TmpFcb: int, out_Tmp_894: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFullFileNameInFcb#1_loop_L53(in_TmpFcb: int, in_Lfn_1: int, in_Tmp_892: int, in_StopFcb: int, in_TmpBuffer: int, in_IrpContext_46: int) returns (out_TmpFcb: int, out_Tmp_892: int)
{

  entry:
    out_TmpFcb, out_Tmp_892 := in_TmpFcb, in_Tmp_892;
    goto L53, exit;

  exit:
    return;

  L53:
    goto anon21_Else;

  anon21_Else:
    assume {:partition} out_TmpFcb != in_StopFcb;
    call {:si_unique_call 1758} FatGetUnicodeNameFromFcb#1(in_IrpContext_46, out_TmpFcb, in_Lfn_1);
    assume {:nonnull} in_Lfn_1 != 0;
    assume in_Lfn_1 > 0;
    havoc out_Tmp_892;
    call {:si_unique_call 1759} sdv_RtlCopyMemory(0, 0, out_Tmp_892);
    assume {:nonnull} in_TmpBuffer != 0;
    assume in_TmpBuffer > 0;
    Mem_T.INT4[in_TmpBuffer] := 92;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_TmpFcb;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    call {:si_unique_call 1760} {:si_old_unique_call 1} out_TmpFcb, out_Tmp_892 := FatSetFullFileNameInFcb#1_loop_L53(out_TmpFcb, in_Lfn_1, out_Tmp_892, in_StopFcb, in_TmpBuffer, in_IrpContext_46);
    return;
}



procedure {:LoopProcedure} FatSetFullFileNameInFcb#1_loop_L53(in_TmpFcb: int, in_Lfn_1: int, in_Tmp_892: int, in_StopFcb: int, in_TmpBuffer: int, in_IrpContext_46: int) returns (out_TmpFcb: int, out_Tmp_892: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatSetFullFileNameInFcb#1_loop_L17(in_PathLength: int, in_TmpFcb: int, in_Tmp_894: int, in_Fcb_11: int) returns (out_PathLength: int, out_TmpFcb: int, out_Tmp_894: int)
{

  entry:
    out_PathLength, out_TmpFcb, out_Tmp_894 := in_PathLength, in_TmpFcb, in_Tmp_894;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:nonnull} in_Fcb_11 != 0;
    assume in_Fcb_11 > 0;
    havoc out_Tmp_894;
    assume {:nonnull} out_Tmp_894 != 0;
    assume out_Tmp_894 > 0;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_TmpFcb != Mem_T.RootDcb__VCB[RootDcb__VCB(out_Tmp_894)];
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_TmpFcb != in_Fcb_11;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    goto anon20_Then;

  anon20_Then:
    goto L20;

  L20:
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_PathLength;
    assume {:nonnull} out_TmpFcb != 0;
    assume out_TmpFcb > 0;
    havoc out_TmpFcb;
    goto L20_dummy;

  L20_dummy:
    call {:si_unique_call 1761} {:si_old_unique_call 1} out_PathLength, out_TmpFcb, out_Tmp_894 := FatSetFullFileNameInFcb#1_loop_L17(out_PathLength, out_TmpFcb, out_Tmp_894, in_Fcb_11);
    return;

  anon19_Then:
    assume {:partition} out_TmpFcb == in_Fcb_11;
    goto L20;
}



procedure {:LoopProcedure} FatSetFullFileNameInFcb#1_loop_L17(in_PathLength: int, in_TmpFcb: int, in_Tmp_894: int, in_Fcb_11: int) returns (out_PathLength: int, out_TmpFcb: int, out_Tmp_894: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLocateDirent#0_loop_L132(in_Ordinal: int, in_LfnIndex: int, in_Tmp_992: int, in_LfnSize: int, in_Tmp_998: int, in_CheckTail: int, in_Tmp_1023: int, in_Tmp_1028: int, in_LongFileName: int) returns (out_LfnIndex: int, out_Tmp_992: int, out_LfnSize: int, out_Tmp_998: int, out_CheckTail: int, out_Tmp_1023: int, out_Tmp_1028: int)
{

  entry:
    out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := in_LfnIndex, in_Tmp_992, in_LfnSize, in_Tmp_998, in_CheckTail, in_Tmp_1023, in_Tmp_1028;
    goto L132, exit;

  exit:
    return;

  L132:
    goto anon147_Else;

  anon147_Else:
    assume {:partition} out_LfnIndex != in_Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} out_CheckTail != 0;
    out_Tmp_1023 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1028;
    assume {:nonnull} out_Tmp_1028 != 0;
    assume out_Tmp_1028 > 0;
    goto anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    out_LfnIndex := out_LfnIndex + 1;
    goto L137_dummy;

  L137_dummy:
    call {:si_unique_call 1762} {:si_old_unique_call 1} out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := FatLocateDirent#0_loop_L132(in_Ordinal, out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028, in_LongFileName);
    return;

  anon149_Then:
    assume {:partition} out_CheckTail == 0;
    out_Tmp_998 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_992;
    assume {:nonnull} out_Tmp_992 != 0;
    assume out_Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] == 0;
    out_LfnSize := out_LfnIndex;
    out_CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] != 0;
    goto L137;
}



procedure {:LoopProcedure} FatLocateDirent#0_loop_L132(in_Ordinal: int, in_LfnIndex: int, in_Tmp_992: int, in_LfnSize: int, in_Tmp_998: int, in_CheckTail: int, in_Tmp_1023: int, in_Tmp_1028: int, in_LongFileName: int) returns (out_LfnIndex: int, out_Tmp_992: int, out_LfnSize: int, out_Tmp_998: int, out_CheckTail: int, out_Tmp_1023: int, out_Tmp_1028: int);
  free ensures {:va_keep} out_CheckTail == 1 || out_CheckTail == in_CheckTail;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLocateDirent#0_loop_L42(in_LfnInProgress: int, in_Tmp_975: int, in_Ordinal: int, in_LfnByteOffset: int, in_Tmp_976: int, in_Tmp_977: int, in_Tmp_978: int, in_Tmp_979: int, in_Tmp_980: int, in_Tmp_982: int, in_Tmp_983: int, in_LfnChecksum: int, in_Tmp_984: int, in_Tmp_987: int, in_Tmp_988: int, in_Tmp_989: int, in_Tmp_990: int, in_Tmp_991: int, in_LfnIndex: int, in_Tmp_992: int, in_Tmp_993: int, in_LfnSize: int, in_Lfn_2: int, in_sdv_361: int, in_Tmp_994: int, in_Tmp_995: int, in_Tmp_997: int, in_Tmp_998: int, in_Status_13: int, in_Tmp_999: int, in_Tmp_1000: int, in_Tmp_1001: int, in_sdv_362: int, in_Tmp_1002: int, in_Tmp_1003: int, in_Tmp_1006: int, in_Tmp_1008: int, in_CheckTail: int, in_Tmp_1009: int, in_Tmp_1011: int, in_UpcasedLfn: int, in_Tmp_1012: int, in_Tmp_1013: int, in_sdv_364: int, in_Tmp_1014: int, in_Tmp_1015: int, in_Tmp_1016: int, in_FoundValidLfn: int, in_Tmp_1017: int, in_sdv_365: int, in_sdv_366: int, in_Tmp_1018: int, in_Tmp_1019: int, in_Tmp_1020: int, in_Tmp_1023: int, in_Tmp_1025: int, in_Tmp_1026: int, in_Tmp_1027: int, in_Tmp_1028: int, in_Tmp_1029: int, in_Tmp_1031: int, in_Tmp_1033: int, in_Name_2: int, in_Tmp_1034: int, in_Tmp_1035: int, in_Tmp_1036: int, in_Tmp_1037: int, in_Tmp_1039: int, in_Tmp_1040: int, in_IrpContext_52: int, in_ParentDirectory: int, in_Ccb_4: int, in_Dirent_5: int, in_Bcb_9: int, in_ByteOffset: int, in_LongFileName: int, in_boogieTmp: int) returns (out_LfnInProgress: int, out_Tmp_975: int, out_Ordinal: int, out_LfnByteOffset: int, out_Tmp_976: int, out_Tmp_977: int, out_Tmp_978: int, out_Tmp_979: int, out_Tmp_980: int, out_Tmp_982: int, out_Tmp_983: int, out_LfnChecksum: int, out_Tmp_984: int, out_Tmp_987: int, out_Tmp_988: int, out_Tmp_989: int, out_Tmp_990: int, out_Tmp_991: int, out_LfnIndex: int, out_Tmp_992: int, out_Tmp_993: int, out_LfnSize: int, out_Lfn_2: int, out_sdv_361: int, out_Tmp_994: int, out_Tmp_995: int, out_Tmp_997: int, out_Tmp_998: int, out_Tmp_999: int, out_Tmp_1000: int, out_Tmp_1001: int, out_sdv_362: int, out_Tmp_1002: int, out_Tmp_1003: int, out_Tmp_1006: int, out_Tmp_1008: int, out_CheckTail: int, out_Tmp_1009: int, out_Tmp_1011: int, out_Tmp_1012: int, out_Tmp_1013: int, out_sdv_364: int, out_Tmp_1014: int, out_Tmp_1015: int, out_Tmp_1016: int, out_FoundValidLfn: int, out_Tmp_1017: int, out_sdv_365: int, out_sdv_366: int, out_Tmp_1018: int, out_Tmp_1019: int, out_Tmp_1020: int, out_Tmp_1023: int, out_Tmp_1025: int, out_Tmp_1026: int, out_Tmp_1027: int, out_Tmp_1028: int, out_Tmp_1029: int, out_Tmp_1031: int, out_Tmp_1033: int, out_Tmp_1034: int, out_Tmp_1035: int, out_Tmp_1036: int, out_Tmp_1037: int, out_Tmp_1039: int, out_Tmp_1040: int, out_boogieTmp: int)
{
  var vslice_dummy_var_7527: int;
  var vslice_dummy_var_7528: int;
  var vslice_dummy_var_7529: int;
  var vslice_dummy_var_7530: int;

  entry:
    out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, out_boogieTmp := in_LfnInProgress, in_Tmp_975, in_Ordinal, in_LfnByteOffset, in_Tmp_976, in_Tmp_977, in_Tmp_978, in_Tmp_979, in_Tmp_980, in_Tmp_982, in_Tmp_983, in_LfnChecksum, in_Tmp_984, in_Tmp_987, in_Tmp_988, in_Tmp_989, in_Tmp_990, in_Tmp_991, in_LfnIndex, in_Tmp_992, in_Tmp_993, in_LfnSize, in_Lfn_2, in_sdv_361, in_Tmp_994, in_Tmp_995, in_Tmp_997, in_Tmp_998, in_Tmp_999, in_Tmp_1000, in_Tmp_1001, in_sdv_362, in_Tmp_1002, in_Tmp_1003, in_Tmp_1006, in_Tmp_1008, in_CheckTail, in_Tmp_1009, in_Tmp_1011, in_Tmp_1012, in_Tmp_1013, in_sdv_364, in_Tmp_1014, in_Tmp_1015, in_Tmp_1016, in_FoundValidLfn, in_Tmp_1017, in_sdv_365, in_sdv_366, in_Tmp_1018, in_Tmp_1019, in_Tmp_1020, in_Tmp_1023, in_Tmp_1025, in_Tmp_1026, in_Tmp_1027, in_Tmp_1028, in_Tmp_1029, in_Tmp_1031, in_Tmp_1033, in_Tmp_1034, in_Tmp_1035, in_Tmp_1036, in_Tmp_1037, in_Tmp_1039, in_Tmp_1040, in_boogieTmp;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    assume {:nonnull} in_ParentDirectory != 0;
    assume in_ParentDirectory > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    Mem_T.INT4[in_Status_13] := -1073741807;
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto L46;

  L46:
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    goto anon135_Then;

  anon135_Then:
    assume {:partition} Mem_T.INT4[in_Status_13] != -1073741807;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_976;
    assume {:nonnull} out_Tmp_976 != 0;
    assume out_Tmp_976 > 0;
    havoc out_Tmp_1027;
    assume {:nonnull} out_Tmp_1027 != 0;
    assume out_Tmp_1027 > 0;
    goto anon178_Else;

  anon178_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1027] != 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_995;
    assume {:nonnull} out_Tmp_995 != 0;
    assume out_Tmp_995 > 0;
    havoc out_Tmp_1011;
    assume {:nonnull} out_Tmp_1011 != 0;
    assume out_Tmp_1011 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1011] == 229;
    out_LfnInProgress := 0;
    goto L67;

  L67:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    Mem_T.INT4[in_ByteOffset] := Mem_T.INT4[in_ByteOffset] + 32;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    goto L67_dummy;

  L67_dummy:
    call {:si_unique_call 1782} {:si_old_unique_call 1} out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, out_boogieTmp := FatLocateDirent#0_loop_L42(out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, in_Status_13, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, in_UpcasedLfn, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, in_Name_2, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, in_IrpContext_52, in_ParentDirectory, in_Ccb_4, in_Dirent_5, in_Bcb_9, in_ByteOffset, in_LongFileName, out_boogieTmp);
    return;

  anon179_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1011] != 229;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} in_LongFileName != 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1018;
    assume {:nonnull} out_Tmp_1018 != 0;
    assume out_Tmp_1018 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Lfn_2;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} out_LfnInProgress != 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto L78;

  L78:
    out_LfnInProgress := 0;
    goto L75;

  L75:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_LfnInProgress == 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_978;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} 20 >= out_Tmp_978;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    out_CheckTail := 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Ordinal;
    goto anon183_Else;

  anon183_Else:
    assume {:partition} out_Ordinal != 0;
    goto L112;

  L112:
    out_LfnIndex := (out_Ordinal - 1) * 13;
    call {:si_unique_call 1777} out_Tmp_988 := corral_nondet();
    call {:si_unique_call 1778} FatEnsureStringBufferEnough(in_LongFileName, out_Tmp_988);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1013;
    out_Tmp_989 := out_LfnIndex + 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1017;
    call {:si_unique_call 1779} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1037;
    out_Tmp_1025 := out_LfnIndex + 5;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_980;
    call {:si_unique_call 1780} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_999;
    out_Tmp_1029 := out_LfnIndex + 11;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1034;
    call {:si_unique_call 1781} sdv_RtlCopyMemory(0, 0, 4);
    goto L132;

  L132:
    call {:si_unique_call 1776} out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := FatLocateDirent#0_loop_L132(out_Ordinal, out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028, in_LongFileName);
    goto L132_last;

  L132_last:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_LfnIndex != out_Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} out_CheckTail != 0;
    out_Tmp_1023 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1028;
    assume {:nonnull} out_Tmp_1028 != 0;
    assume out_Tmp_1028 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    out_LfnIndex := out_LfnIndex + 1;
    assume false;
    return;

  anon184_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] != 65535;
    goto L133;

  L133:
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_LfnIndex == out_Ordinal * 13;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_CheckTail != 0;
    goto L143;

  L143:
    out_LfnIndex := out_LfnIndex - 13;
    out_LfnInProgress := 1;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_LfnChecksum;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_LfnByteOffset := Mem_T.INT4[in_ByteOffset];
    goto L67;

  anon150_Then:
    assume {:partition} out_CheckTail == 0;
    out_LfnSize := out_LfnIndex;
    goto L143;

  anon148_Then:
    assume {:partition} out_LfnIndex != out_Ordinal * 13;
    goto L67;

  anon149_Then:
    assume {:partition} out_CheckTail == 0;
    out_Tmp_998 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_992;
    assume {:nonnull} out_Tmp_992 != 0;
    assume out_Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] == 0;
    out_LfnSize := out_LfnIndex;
    out_CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] != 0;
    goto L137;

  anon147_Then:
    assume {:partition} out_LfnIndex == out_Ordinal * 13;
    goto L133;

  anon146_Then:
    goto L67;

  anon182_Then:
    assume {:partition} out_Tmp_978 > 20;
    goto L67;

  anon145_Then:
    goto L67;

  anon139_Then:
    assume {:partition} out_LfnInProgress != 0;
    goto L67;

  anon140_Then:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    out_LfnIndex := out_LfnIndex - 13;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1000;
    out_Tmp_997 := out_LfnIndex + 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_979;
    call {:si_unique_call 1773} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_993;
    out_Tmp_1039 := out_LfnIndex + 5;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1002;
    call {:si_unique_call 1774} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1016;
    out_Tmp_1001 := out_LfnIndex + 11;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_984;
    call {:si_unique_call 1775} sdv_RtlCopyMemory(0, 0, 4);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Ordinal;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_LfnByteOffset := Mem_T.INT4[in_ByteOffset];
    goto L75;

  anon144_Then:
    goto L78;

  anon143_Then:
    goto L78;

  anon142_Then:
    goto L78;

  anon141_Then:
    goto L78;

  anon181_Then:
    assume {:partition} out_LfnInProgress == 0;
    goto L75;

  anon180_Then:
    goto L69;

  L69:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_982;
    assume {:nonnull} out_Tmp_982 != 0;
    assume out_Tmp_982 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon152_Else;

  anon152_Else:
    goto L67;

  anon186_Then:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_LfnInProgress != 0;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} Mem_T.INT4[in_ByteOffset] == out_LfnByteOffset + 32;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} out_LfnIndex == 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc vslice_dummy_var_7527;
    call {:si_unique_call 1764} out_sdv_361 := FatComputeLfnChecksum(vslice_dummy_var_7527);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} out_sdv_361 == out_LfnChecksum;
    out_FoundValidLfn := 1;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L164;

  L164:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon156_Else;

  anon156_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    goto L168;

  L168:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} out_FoundValidLfn != 0;
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    goto L172;

  L172:
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc vslice_dummy_var_7530;
    call {:si_unique_call 1770} FatEnsureStringBufferEnough(in_UpcasedLfn, vslice_dummy_var_7530);
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    call {:si_unique_call 1771} out_boogieTmp := RtlUpcaseUnicodeString(0, 0, 0);
    Mem_T.INT4[in_Status_13] := out_boogieTmp;
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[in_Status_13] >= 0;
    goto L181;

  L181:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    call {:si_unique_call 1772} out_sdv_364 := FsRtlIsNameInExpression(0, 0, 1, 0);
    goto anon165_Else;

  anon165_Else:
    assume {:partition} out_sdv_364 == 0;
    goto L169;

  L169:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} out_FoundValidLfn != 0;
    out_FoundValidLfn := 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L67;

  anon160_Then:
    assume {:partition} out_FoundValidLfn == 0;
    goto L67;

  anon164_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1009;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} out_Tmp_1009 == 0;
    out_Tmp_1006 := 0;
    goto L387;

  L387:
    call {:si_unique_call 1767} out_sdv_366 := FsRtlAreNamesEqual(0, 0, out_Tmp_1006, 0);
    goto anon166_Else;

  anon166_Else:
    assume {:partition} out_sdv_366 == 0;
    goto L169;

  anon187_Then:
    assume {:partition} out_Tmp_1009 != 0;
    out_Tmp_1006 := 1;
    goto L387;

  anon163_Then:
    assume {:partition} 0 > Mem_T.INT4[in_Status_13];
    assume {:nonnull} in_IrpContext_52 != 0;
    assume in_IrpContext_52 > 0;
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    call {:si_unique_call 1768} out_sdv_365 := corral_nondet();
    call {:si_unique_call 1769} ExRaiseStatus(out_sdv_365);
    goto L181;

  anon161_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    out_FoundValidLfn := 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L67;

  anon162_Then:
    goto L172;

  anon159_Then:
    assume {:partition} out_FoundValidLfn == 0;
    goto L169;

  anon157_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc vslice_dummy_var_7529;
    call {:si_unique_call 1766} Fat8dot3ToString(in_IrpContext_52, vslice_dummy_var_7529, 0, in_Name_2);
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto L210;

  L210:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc vslice_dummy_var_7528;
    call {:si_unique_call 1765} out_sdv_362 := FatIsNameInExpression(in_IrpContext_52, vslice_dummy_var_7528, in_Name_2);
    goto anon171_Then;

  anon171_Then:
    assume {:partition} out_sdv_362 == 0;
    goto L168;

  anon170_Then:
    goto L210;

  anon169_Then:
    goto L210;

  anon168_Then:
    goto L210;

  anon167_Then:
    goto L210;

  anon158_Then:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1015;
    assume {:nonnull} out_Tmp_1015 != 0;
    assume out_Tmp_1015 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1020;
    out_Tmp_991 := out_Tmp_1020;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1033;
    assume {:nonnull} out_Tmp_1033 != 0;
    assume out_Tmp_1033 > 0;
    havoc out_Tmp_1036;
    out_Tmp_990 := out_Tmp_1036;
    assume {:nonnull} out_Tmp_990 != 0;
    assume out_Tmp_990 > 0;
    assume {:nonnull} out_Tmp_991 != 0;
    assume out_Tmp_991 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_991] == Mem_T.INT4[out_Tmp_990];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1026;
    out_Tmp_975 := out_Tmp_1026 + 4 * 4;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_994;
    assume {:nonnull} out_Tmp_994 != 0;
    assume out_Tmp_994 > 0;
    havoc out_Tmp_1003;
    out_Tmp_1014 := out_Tmp_1003 + 4 * 4;
    assume {:nonnull} out_Tmp_1014 != 0;
    assume out_Tmp_1014 > 0;
    assume {:nonnull} out_Tmp_975 != 0;
    assume out_Tmp_975 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_975] == Mem_T.INT4[out_Tmp_1014];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1008;
    out_Tmp_1019 := out_Tmp_1008 + 8 * 4;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1031;
    assume {:nonnull} out_Tmp_1031 != 0;
    assume out_Tmp_1031 > 0;
    havoc out_Tmp_983;
    out_Tmp_987 := out_Tmp_983 + 8 * 4;
    assume {:nonnull} out_Tmp_1019 != 0;
    assume out_Tmp_1019 > 0;
    assume {:nonnull} out_Tmp_987 != 0;
    assume out_Tmp_987 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1019] == Mem_T.INT4[out_Tmp_987];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_977;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1040;
    assume {:nonnull} out_Tmp_1040 != 0;
    assume out_Tmp_1040 > 0;
    havoc out_Tmp_1012;
    assume {:nonnull} out_Tmp_1012 != 0;
    assume out_Tmp_1012 > 0;
    assume {:nonnull} out_Tmp_977 != 0;
    assume out_Tmp_977 > 0;
    goto anon192_Then;

  anon192_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_977 + 10 * 4] != Mem_T.INT4[out_Tmp_1012 + 10 * 4];
    goto L168;

  anon191_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1019] != Mem_T.INT4[out_Tmp_987];
    goto L168;

  anon190_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_975] != Mem_T.INT4[out_Tmp_1014];
    goto L168;

  anon189_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_991] != Mem_T.INT4[out_Tmp_990];
    goto L168;

  anon188_Then:
    goto L168;

  anon155_Then:
    assume {:partition} out_sdv_361 != out_LfnChecksum;
    goto L155;

  L155:
    out_FoundValidLfn := 0;
    goto L164;

  anon154_Then:
    assume {:partition} out_LfnIndex != 0;
    goto L155;

  anon153_Then:
    assume {:partition} Mem_T.INT4[in_ByteOffset] != out_LfnByteOffset + 32;
    goto L155;

  anon151_Then:
    assume {:partition} out_LfnInProgress == 0;
    goto L155;

  anon138_Then:
    assume {:partition} in_LongFileName == 0;
    goto L69;

  anon137_Then:
    goto L69;

  anon177_Then:
    goto L46;

  anon133_Then:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} INTMOD(Mem_T.INT4[in_ByteOffset], 4096) != 0;
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L228;

  L228:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto L230;

  L230:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_Tmp_1035 := BAND(Mem_T.INT4[in_ByteOffset], BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    call {:si_unique_call 1763} FatReadDirectoryFile#0(in_IrpContext_52, in_ParentDirectory, out_Tmp_1035, 4096, 0, in_Bcb_9, in_Dirent_5, in_Status_13);
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    goto L46;

  anon174_Then:
    goto L230;

  anon175_Then:
    goto L46;

  anon134_Then:
    assume {:partition} INTMOD(Mem_T.INT4[in_ByteOffset], 4096) == 0;
    goto L228;
}



procedure {:LoopProcedure} FatLocateDirent#0_loop_L42(in_LfnInProgress: int, in_Tmp_975: int, in_Ordinal: int, in_LfnByteOffset: int, in_Tmp_976: int, in_Tmp_977: int, in_Tmp_978: int, in_Tmp_979: int, in_Tmp_980: int, in_Tmp_982: int, in_Tmp_983: int, in_LfnChecksum: int, in_Tmp_984: int, in_Tmp_987: int, in_Tmp_988: int, in_Tmp_989: int, in_Tmp_990: int, in_Tmp_991: int, in_LfnIndex: int, in_Tmp_992: int, in_Tmp_993: int, in_LfnSize: int, in_Lfn_2: int, in_sdv_361: int, in_Tmp_994: int, in_Tmp_995: int, in_Tmp_997: int, in_Tmp_998: int, in_Status_13: int, in_Tmp_999: int, in_Tmp_1000: int, in_Tmp_1001: int, in_sdv_362: int, in_Tmp_1002: int, in_Tmp_1003: int, in_Tmp_1006: int, in_Tmp_1008: int, in_CheckTail: int, in_Tmp_1009: int, in_Tmp_1011: int, in_UpcasedLfn: int, in_Tmp_1012: int, in_Tmp_1013: int, in_sdv_364: int, in_Tmp_1014: int, in_Tmp_1015: int, in_Tmp_1016: int, in_FoundValidLfn: int, in_Tmp_1017: int, in_sdv_365: int, in_sdv_366: int, in_Tmp_1018: int, in_Tmp_1019: int, in_Tmp_1020: int, in_Tmp_1023: int, in_Tmp_1025: int, in_Tmp_1026: int, in_Tmp_1027: int, in_Tmp_1028: int, in_Tmp_1029: int, in_Tmp_1031: int, in_Tmp_1033: int, in_Name_2: int, in_Tmp_1034: int, in_Tmp_1035: int, in_Tmp_1036: int, in_Tmp_1037: int, in_Tmp_1039: int, in_Tmp_1040: int, in_IrpContext_52: int, in_ParentDirectory: int, in_Ccb_4: int, in_Dirent_5: int, in_Bcb_9: int, in_ByteOffset: int, in_LongFileName: int, in_boogieTmp: int) returns (out_LfnInProgress: int, out_Tmp_975: int, out_Ordinal: int, out_LfnByteOffset: int, out_Tmp_976: int, out_Tmp_977: int, out_Tmp_978: int, out_Tmp_979: int, out_Tmp_980: int, out_Tmp_982: int, out_Tmp_983: int, out_LfnChecksum: int, out_Tmp_984: int, out_Tmp_987: int, out_Tmp_988: int, out_Tmp_989: int, out_Tmp_990: int, out_Tmp_991: int, out_LfnIndex: int, out_Tmp_992: int, out_Tmp_993: int, out_LfnSize: int, out_Lfn_2: int, out_sdv_361: int, out_Tmp_994: int, out_Tmp_995: int, out_Tmp_997: int, out_Tmp_998: int, out_Tmp_999: int, out_Tmp_1000: int, out_Tmp_1001: int, out_sdv_362: int, out_Tmp_1002: int, out_Tmp_1003: int, out_Tmp_1006: int, out_Tmp_1008: int, out_CheckTail: int, out_Tmp_1009: int, out_Tmp_1011: int, out_Tmp_1012: int, out_Tmp_1013: int, out_sdv_364: int, out_Tmp_1014: int, out_Tmp_1015: int, out_Tmp_1016: int, out_FoundValidLfn: int, out_Tmp_1017: int, out_sdv_365: int, out_sdv_366: int, out_Tmp_1018: int, out_Tmp_1019: int, out_Tmp_1020: int, out_Tmp_1023: int, out_Tmp_1025: int, out_Tmp_1026: int, out_Tmp_1027: int, out_Tmp_1028: int, out_Tmp_1029: int, out_Tmp_1031: int, out_Tmp_1033: int, out_Tmp_1034: int, out_Tmp_1035: int, out_Tmp_1036: int, out_Tmp_1037: int, out_Tmp_1039: int, out_Tmp_1040: int, out_boogieTmp: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_LfnInProgress == 0 || out_LfnInProgress == 1 || out_LfnInProgress == in_LfnInProgress;
  free ensures {:va_keep} out_Tmp_1006 == 0 || out_Tmp_1006 == 1 || out_Tmp_1006 == in_Tmp_1006;
  free ensures {:va_keep} out_CheckTail == 1 || out_CheckTail == 0 || out_CheckTail == in_CheckTail;
  free ensures {:va_keep} out_sdv_364 == 0 || out_sdv_364 == 1 || out_sdv_364 == in_sdv_364;
  free ensures {:va_keep} out_FoundValidLfn == 0 || out_FoundValidLfn == 1 || out_FoundValidLfn == in_FoundValidLfn;
  free ensures {:va_keep} out_sdv_365 == in_sdv_365;
  free ensures {:va_keep} out_sdv_366 == 0 || out_sdv_366 == 1 || out_sdv_366 == in_sdv_366;
  free ensures {:va_keep} out_boogieTmp == -1073741675 || out_boogieTmp == 0 || out_boogieTmp == in_boogieTmp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLocateDirent#1_loop_L132(in_Ordinal: int, in_LfnIndex: int, in_Tmp_992: int, in_LfnSize: int, in_Tmp_998: int, in_CheckTail: int, in_Tmp_1023: int, in_Tmp_1028: int, in_LongFileName: int) returns (out_LfnIndex: int, out_Tmp_992: int, out_LfnSize: int, out_Tmp_998: int, out_CheckTail: int, out_Tmp_1023: int, out_Tmp_1028: int)
{

  entry:
    out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := in_LfnIndex, in_Tmp_992, in_LfnSize, in_Tmp_998, in_CheckTail, in_Tmp_1023, in_Tmp_1028;
    goto L132, exit;

  exit:
    return;

  L132:
    goto anon147_Else;

  anon147_Else:
    assume {:partition} out_LfnIndex != in_Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} out_CheckTail != 0;
    out_Tmp_1023 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1028;
    assume {:nonnull} out_Tmp_1028 != 0;
    assume out_Tmp_1028 > 0;
    goto anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    out_LfnIndex := out_LfnIndex + 1;
    goto L137_dummy;

  L137_dummy:
    call {:si_unique_call 1783} {:si_old_unique_call 1} out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := FatLocateDirent#1_loop_L132(in_Ordinal, out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028, in_LongFileName);
    return;

  anon149_Then:
    assume {:partition} out_CheckTail == 0;
    out_Tmp_998 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_992;
    assume {:nonnull} out_Tmp_992 != 0;
    assume out_Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] == 0;
    out_LfnSize := out_LfnIndex;
    out_CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] != 0;
    goto L137;
}



procedure {:LoopProcedure} FatLocateDirent#1_loop_L132(in_Ordinal: int, in_LfnIndex: int, in_Tmp_992: int, in_LfnSize: int, in_Tmp_998: int, in_CheckTail: int, in_Tmp_1023: int, in_Tmp_1028: int, in_LongFileName: int) returns (out_LfnIndex: int, out_Tmp_992: int, out_LfnSize: int, out_Tmp_998: int, out_CheckTail: int, out_Tmp_1023: int, out_Tmp_1028: int);
  free ensures {:va_keep} out_CheckTail == 1 || out_CheckTail == in_CheckTail;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatLocateDirent#1_loop_L42(in_LfnInProgress: int, in_Tmp_975: int, in_Ordinal: int, in_LfnByteOffset: int, in_Tmp_976: int, in_Tmp_977: int, in_Tmp_978: int, in_Tmp_979: int, in_Tmp_980: int, in_Tmp_982: int, in_Tmp_983: int, in_LfnChecksum: int, in_Tmp_984: int, in_Tmp_987: int, in_Tmp_988: int, in_Tmp_989: int, in_Tmp_990: int, in_Tmp_991: int, in_LfnIndex: int, in_Tmp_992: int, in_Tmp_993: int, in_LfnSize: int, in_Lfn_2: int, in_sdv_361: int, in_Tmp_994: int, in_Tmp_995: int, in_Tmp_997: int, in_Tmp_998: int, in_Status_13: int, in_Tmp_999: int, in_Tmp_1000: int, in_Tmp_1001: int, in_sdv_362: int, in_Tmp_1002: int, in_Tmp_1003: int, in_Tmp_1006: int, in_Tmp_1008: int, in_CheckTail: int, in_Tmp_1009: int, in_Tmp_1011: int, in_UpcasedLfn: int, in_Tmp_1012: int, in_Tmp_1013: int, in_sdv_364: int, in_Tmp_1014: int, in_Tmp_1015: int, in_Tmp_1016: int, in_FoundValidLfn: int, in_Tmp_1017: int, in_sdv_365: int, in_sdv_366: int, in_Tmp_1018: int, in_Tmp_1019: int, in_Tmp_1020: int, in_Tmp_1023: int, in_Tmp_1025: int, in_Tmp_1026: int, in_Tmp_1027: int, in_Tmp_1028: int, in_Tmp_1029: int, in_Tmp_1031: int, in_Tmp_1033: int, in_Name_2: int, in_Tmp_1034: int, in_Tmp_1035: int, in_Tmp_1036: int, in_Tmp_1037: int, in_Tmp_1039: int, in_Tmp_1040: int, in_IrpContext_52: int, in_ParentDirectory: int, in_Ccb_4: int, in_Dirent_5: int, in_Bcb_9: int, in_ByteOffset: int, in_LongFileName: int, in_boogieTmp: int) returns (out_LfnInProgress: int, out_Tmp_975: int, out_Ordinal: int, out_LfnByteOffset: int, out_Tmp_976: int, out_Tmp_977: int, out_Tmp_978: int, out_Tmp_979: int, out_Tmp_980: int, out_Tmp_982: int, out_Tmp_983: int, out_LfnChecksum: int, out_Tmp_984: int, out_Tmp_987: int, out_Tmp_988: int, out_Tmp_989: int, out_Tmp_990: int, out_Tmp_991: int, out_LfnIndex: int, out_Tmp_992: int, out_Tmp_993: int, out_LfnSize: int, out_Lfn_2: int, out_sdv_361: int, out_Tmp_994: int, out_Tmp_995: int, out_Tmp_997: int, out_Tmp_998: int, out_Tmp_999: int, out_Tmp_1000: int, out_Tmp_1001: int, out_sdv_362: int, out_Tmp_1002: int, out_Tmp_1003: int, out_Tmp_1006: int, out_Tmp_1008: int, out_CheckTail: int, out_Tmp_1009: int, out_Tmp_1011: int, out_Tmp_1012: int, out_Tmp_1013: int, out_sdv_364: int, out_Tmp_1014: int, out_Tmp_1015: int, out_Tmp_1016: int, out_FoundValidLfn: int, out_Tmp_1017: int, out_sdv_365: int, out_sdv_366: int, out_Tmp_1018: int, out_Tmp_1019: int, out_Tmp_1020: int, out_Tmp_1023: int, out_Tmp_1025: int, out_Tmp_1026: int, out_Tmp_1027: int, out_Tmp_1028: int, out_Tmp_1029: int, out_Tmp_1031: int, out_Tmp_1033: int, out_Tmp_1034: int, out_Tmp_1035: int, out_Tmp_1036: int, out_Tmp_1037: int, out_Tmp_1039: int, out_Tmp_1040: int, out_boogieTmp: int)
{
  var vslice_dummy_var_7531: int;
  var vslice_dummy_var_7532: int;
  var vslice_dummy_var_7533: int;
  var vslice_dummy_var_7534: int;

  entry:
    out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, out_boogieTmp := in_LfnInProgress, in_Tmp_975, in_Ordinal, in_LfnByteOffset, in_Tmp_976, in_Tmp_977, in_Tmp_978, in_Tmp_979, in_Tmp_980, in_Tmp_982, in_Tmp_983, in_LfnChecksum, in_Tmp_984, in_Tmp_987, in_Tmp_988, in_Tmp_989, in_Tmp_990, in_Tmp_991, in_LfnIndex, in_Tmp_992, in_Tmp_993, in_LfnSize, in_Lfn_2, in_sdv_361, in_Tmp_994, in_Tmp_995, in_Tmp_997, in_Tmp_998, in_Tmp_999, in_Tmp_1000, in_Tmp_1001, in_sdv_362, in_Tmp_1002, in_Tmp_1003, in_Tmp_1006, in_Tmp_1008, in_CheckTail, in_Tmp_1009, in_Tmp_1011, in_Tmp_1012, in_Tmp_1013, in_sdv_364, in_Tmp_1014, in_Tmp_1015, in_Tmp_1016, in_FoundValidLfn, in_Tmp_1017, in_sdv_365, in_sdv_366, in_Tmp_1018, in_Tmp_1019, in_Tmp_1020, in_Tmp_1023, in_Tmp_1025, in_Tmp_1026, in_Tmp_1027, in_Tmp_1028, in_Tmp_1029, in_Tmp_1031, in_Tmp_1033, in_Tmp_1034, in_Tmp_1035, in_Tmp_1036, in_Tmp_1037, in_Tmp_1039, in_Tmp_1040, in_boogieTmp;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    assume {:nonnull} in_ParentDirectory != 0;
    assume in_ParentDirectory > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    Mem_T.INT4[in_Status_13] := -1073741807;
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto L46;

  L46:
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    goto anon135_Then;

  anon135_Then:
    assume {:partition} Mem_T.INT4[in_Status_13] != -1073741807;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_976;
    assume {:nonnull} out_Tmp_976 != 0;
    assume out_Tmp_976 > 0;
    havoc out_Tmp_1027;
    assume {:nonnull} out_Tmp_1027 != 0;
    assume out_Tmp_1027 > 0;
    goto anon178_Else;

  anon178_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1027] != 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_995;
    assume {:nonnull} out_Tmp_995 != 0;
    assume out_Tmp_995 > 0;
    havoc out_Tmp_1011;
    assume {:nonnull} out_Tmp_1011 != 0;
    assume out_Tmp_1011 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1011] == 229;
    out_LfnInProgress := 0;
    goto L67;

  L67:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    Mem_T.INT4[in_ByteOffset] := Mem_T.INT4[in_ByteOffset] + 32;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    goto L67_dummy;

  L67_dummy:
    call {:si_unique_call 1805} {:si_old_unique_call 1} out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, out_boogieTmp := FatLocateDirent#1_loop_L42(out_LfnInProgress, out_Tmp_975, out_Ordinal, out_LfnByteOffset, out_Tmp_976, out_Tmp_977, out_Tmp_978, out_Tmp_979, out_Tmp_980, out_Tmp_982, out_Tmp_983, out_LfnChecksum, out_Tmp_984, out_Tmp_987, out_Tmp_988, out_Tmp_989, out_Tmp_990, out_Tmp_991, out_LfnIndex, out_Tmp_992, out_Tmp_993, out_LfnSize, out_Lfn_2, out_sdv_361, out_Tmp_994, out_Tmp_995, out_Tmp_997, out_Tmp_998, in_Status_13, out_Tmp_999, out_Tmp_1000, out_Tmp_1001, out_sdv_362, out_Tmp_1002, out_Tmp_1003, out_Tmp_1006, out_Tmp_1008, out_CheckTail, out_Tmp_1009, out_Tmp_1011, in_UpcasedLfn, out_Tmp_1012, out_Tmp_1013, out_sdv_364, out_Tmp_1014, out_Tmp_1015, out_Tmp_1016, out_FoundValidLfn, out_Tmp_1017, out_sdv_365, out_sdv_366, out_Tmp_1018, out_Tmp_1019, out_Tmp_1020, out_Tmp_1023, out_Tmp_1025, out_Tmp_1026, out_Tmp_1027, out_Tmp_1028, out_Tmp_1029, out_Tmp_1031, out_Tmp_1033, in_Name_2, out_Tmp_1034, out_Tmp_1035, out_Tmp_1036, out_Tmp_1037, out_Tmp_1039, out_Tmp_1040, in_IrpContext_52, in_ParentDirectory, in_Ccb_4, in_Dirent_5, in_Bcb_9, in_ByteOffset, in_LongFileName, out_boogieTmp);
    return;

  anon179_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1011] != 229;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} in_LongFileName != 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1018;
    assume {:nonnull} out_Tmp_1018 != 0;
    assume out_Tmp_1018 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Lfn_2;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} out_LfnInProgress != 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto L78;

  L78:
    out_LfnInProgress := 0;
    goto L75;

  L75:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_LfnInProgress == 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_978;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} 20 >= out_Tmp_978;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    out_CheckTail := 0;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Ordinal;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} out_Ordinal != 0;
    goto L112;

  L112:
    out_LfnIndex := (out_Ordinal - 1) * 13;
    call {:si_unique_call 1798} out_Tmp_988 := corral_nondet();
    call {:si_unique_call 1799} FatEnsureStringBufferEnough(in_LongFileName, out_Tmp_988);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1013;
    out_Tmp_989 := out_LfnIndex + 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1017;
    call {:si_unique_call 1800} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1037;
    out_Tmp_1025 := out_LfnIndex + 5;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_980;
    call {:si_unique_call 1801} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_999;
    out_Tmp_1029 := out_LfnIndex + 11;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1034;
    call {:si_unique_call 1802} sdv_RtlCopyMemory(0, 0, 4);
    goto L132;

  L132:
    call {:si_unique_call 1797} out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028 := FatLocateDirent#1_loop_L132(out_Ordinal, out_LfnIndex, out_Tmp_992, out_LfnSize, out_Tmp_998, out_CheckTail, out_Tmp_1023, out_Tmp_1028, in_LongFileName);
    goto L132_last;

  L132_last:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_LfnIndex != out_Ordinal * 13;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} out_CheckTail != 0;
    out_Tmp_1023 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1028;
    assume {:nonnull} out_Tmp_1028 != 0;
    assume out_Tmp_1028 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] == 65535;
    goto L137;

  L137:
    out_LfnIndex := out_LfnIndex + 1;
    assume false;
    return;

  anon184_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1028 + out_Tmp_1023 * 4] != 65535;
    goto L133;

  L133:
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_LfnIndex == out_Ordinal * 13;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_CheckTail != 0;
    goto L143;

  L143:
    out_LfnIndex := out_LfnIndex - 13;
    out_LfnInProgress := 1;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_LfnChecksum;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_LfnByteOffset := Mem_T.INT4[in_ByteOffset];
    goto L67;

  anon150_Then:
    assume {:partition} out_CheckTail == 0;
    out_LfnSize := out_LfnIndex;
    goto L143;

  anon148_Then:
    assume {:partition} out_LfnIndex != out_Ordinal * 13;
    goto L67;

  anon149_Then:
    assume {:partition} out_CheckTail == 0;
    out_Tmp_998 := out_LfnIndex;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_992;
    assume {:nonnull} out_Tmp_992 != 0;
    assume out_Tmp_992 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] == 0;
    out_LfnSize := out_LfnIndex;
    out_CheckTail := 1;
    goto L137;

  anon185_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_992 + out_Tmp_998 * 4] != 0;
    goto L137;

  anon147_Then:
    assume {:partition} out_LfnIndex == out_Ordinal * 13;
    goto L133;

  anon183_Then:
    assume {:partition} out_Ordinal == 0;
    call {:si_unique_call 1803} FatPopUpFileCorrupt#0(in_IrpContext_52, in_ParentDirectory);
    assume {:nonnull} in_IrpContext_52 != 0;
    assume in_IrpContext_52 > 0;
    call {:si_unique_call 1804} ExRaiseStatus(-1073741566);
    goto L112;

  anon146_Then:
    goto L67;

  anon182_Then:
    assume {:partition} out_Tmp_978 > 20;
    goto L67;

  anon145_Then:
    goto L67;

  anon139_Then:
    assume {:partition} out_LfnInProgress != 0;
    goto L67;

  anon140_Then:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    out_LfnIndex := out_LfnIndex - 13;
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1000;
    out_Tmp_997 := out_LfnIndex + 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_979;
    call {:si_unique_call 1794} sdv_RtlCopyMemory(0, 0, 10);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_993;
    out_Tmp_1039 := out_LfnIndex + 5;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_1002;
    call {:si_unique_call 1795} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Tmp_1016;
    out_Tmp_1001 := out_LfnIndex + 11;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc out_Tmp_984;
    call {:si_unique_call 1796} sdv_RtlCopyMemory(0, 0, 4);
    assume {:nonnull} out_Lfn_2 != 0;
    assume out_Lfn_2 > 0;
    havoc out_Ordinal;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_LfnByteOffset := Mem_T.INT4[in_ByteOffset];
    goto L75;

  anon144_Then:
    goto L78;

  anon143_Then:
    goto L78;

  anon142_Then:
    goto L78;

  anon141_Then:
    goto L78;

  anon181_Then:
    assume {:partition} out_LfnInProgress == 0;
    goto L75;

  anon180_Then:
    goto L69;

  L69:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_982;
    assume {:nonnull} out_Tmp_982 != 0;
    assume out_Tmp_982 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon152_Else;

  anon152_Else:
    goto L67;

  anon186_Then:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_LfnInProgress != 0;
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} Mem_T.INT4[in_ByteOffset] == out_LfnByteOffset + 32;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} out_LfnIndex == 0;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc vslice_dummy_var_7531;
    call {:si_unique_call 1785} out_sdv_361 := FatComputeLfnChecksum(vslice_dummy_var_7531);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} out_sdv_361 == out_LfnChecksum;
    out_FoundValidLfn := 1;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L164;

  L164:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon156_Else;

  anon156_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    goto L168;

  L168:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} out_FoundValidLfn != 0;
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    goto L172;

  L172:
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    havoc vslice_dummy_var_7534;
    call {:si_unique_call 1791} FatEnsureStringBufferEnough(in_UpcasedLfn, vslice_dummy_var_7534);
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    call {:si_unique_call 1792} out_boogieTmp := RtlUpcaseUnicodeString(0, 0, 0);
    Mem_T.INT4[in_Status_13] := out_boogieTmp;
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[in_Status_13] >= 0;
    goto L181;

  L181:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    call {:si_unique_call 1793} out_sdv_364 := FsRtlIsNameInExpression(0, 0, 1, 0);
    goto anon165_Else;

  anon165_Else:
    assume {:partition} out_sdv_364 == 0;
    goto L169;

  L169:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} out_FoundValidLfn != 0;
    out_FoundValidLfn := 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L67;

  anon160_Then:
    assume {:partition} out_FoundValidLfn == 0;
    goto L67;

  anon164_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1009;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} out_Tmp_1009 == 0;
    out_Tmp_1006 := 0;
    goto L387;

  L387:
    call {:si_unique_call 1788} out_sdv_366 := FsRtlAreNamesEqual(0, 0, out_Tmp_1006, 0);
    goto anon166_Else;

  anon166_Else:
    assume {:partition} out_sdv_366 == 0;
    goto L169;

  anon187_Then:
    assume {:partition} out_Tmp_1009 != 0;
    out_Tmp_1006 := 1;
    goto L387;

  anon163_Then:
    assume {:partition} 0 > Mem_T.INT4[in_Status_13];
    assume {:nonnull} in_IrpContext_52 != 0;
    assume in_IrpContext_52 > 0;
    assume {:nonnull} in_Status_13 != 0;
    assume in_Status_13 > 0;
    call {:si_unique_call 1789} out_sdv_365 := corral_nondet();
    call {:si_unique_call 1790} ExRaiseStatus(out_sdv_365);
    goto L181;

  anon161_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    out_FoundValidLfn := 0;
    assume {:nonnull} in_LongFileName != 0;
    assume in_LongFileName > 0;
    goto L67;

  anon162_Then:
    goto L172;

  anon159_Then:
    assume {:partition} out_FoundValidLfn == 0;
    goto L169;

  anon157_Then:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc vslice_dummy_var_7533;
    call {:si_unique_call 1787} Fat8dot3ToString(in_IrpContext_52, vslice_dummy_var_7533, 0, in_Name_2);
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} in_Name_2 != 0;
    assume in_Name_2 > 0;
    goto L210;

  L210:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc vslice_dummy_var_7532;
    call {:si_unique_call 1786} out_sdv_362 := FatIsNameInExpression(in_IrpContext_52, vslice_dummy_var_7532, in_Name_2);
    goto anon171_Then;

  anon171_Then:
    assume {:partition} out_sdv_362 == 0;
    goto L168;

  anon170_Then:
    goto L210;

  anon169_Then:
    goto L210;

  anon168_Then:
    goto L210;

  anon167_Then:
    goto L210;

  anon158_Then:
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1015;
    assume {:nonnull} out_Tmp_1015 != 0;
    assume out_Tmp_1015 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1020;
    out_Tmp_991 := out_Tmp_1020;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1033;
    assume {:nonnull} out_Tmp_1033 != 0;
    assume out_Tmp_1033 > 0;
    havoc out_Tmp_1036;
    out_Tmp_990 := out_Tmp_1036;
    assume {:nonnull} out_Tmp_990 != 0;
    assume out_Tmp_990 > 0;
    assume {:nonnull} out_Tmp_991 != 0;
    assume out_Tmp_991 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_991] == Mem_T.INT4[out_Tmp_990];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1026;
    out_Tmp_975 := out_Tmp_1026 + 4 * 4;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_994;
    assume {:nonnull} out_Tmp_994 != 0;
    assume out_Tmp_994 > 0;
    havoc out_Tmp_1003;
    out_Tmp_1014 := out_Tmp_1003 + 4 * 4;
    assume {:nonnull} out_Tmp_1014 != 0;
    assume out_Tmp_1014 > 0;
    assume {:nonnull} out_Tmp_975 != 0;
    assume out_Tmp_975 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_975] == Mem_T.INT4[out_Tmp_1014];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_1008;
    out_Tmp_1019 := out_Tmp_1008 + 8 * 4;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1031;
    assume {:nonnull} out_Tmp_1031 != 0;
    assume out_Tmp_1031 > 0;
    havoc out_Tmp_983;
    out_Tmp_987 := out_Tmp_983 + 8 * 4;
    assume {:nonnull} out_Tmp_1019 != 0;
    assume out_Tmp_1019 > 0;
    assume {:nonnull} out_Tmp_987 != 0;
    assume out_Tmp_987 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1019] == Mem_T.INT4[out_Tmp_987];
    assume {:nonnull} in_Ccb_4 != 0;
    assume in_Ccb_4 > 0;
    havoc out_Tmp_977;
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    havoc out_Tmp_1040;
    assume {:nonnull} out_Tmp_1040 != 0;
    assume out_Tmp_1040 > 0;
    havoc out_Tmp_1012;
    assume {:nonnull} out_Tmp_1012 != 0;
    assume out_Tmp_1012 > 0;
    assume {:nonnull} out_Tmp_977 != 0;
    assume out_Tmp_977 > 0;
    goto anon192_Then;

  anon192_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_977 + 10 * 4] != Mem_T.INT4[out_Tmp_1012 + 10 * 4];
    goto L168;

  anon191_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_1019] != Mem_T.INT4[out_Tmp_987];
    goto L168;

  anon190_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_975] != Mem_T.INT4[out_Tmp_1014];
    goto L168;

  anon189_Then:
    assume {:partition} Mem_T.INT4[out_Tmp_991] != Mem_T.INT4[out_Tmp_990];
    goto L168;

  anon188_Then:
    goto L168;

  anon155_Then:
    assume {:partition} out_sdv_361 != out_LfnChecksum;
    goto L155;

  L155:
    out_FoundValidLfn := 0;
    goto L164;

  anon154_Then:
    assume {:partition} out_LfnIndex != 0;
    goto L155;

  anon153_Then:
    assume {:partition} Mem_T.INT4[in_ByteOffset] != out_LfnByteOffset + 32;
    goto L155;

  anon151_Then:
    assume {:partition} out_LfnInProgress == 0;
    goto L155;

  anon138_Then:
    assume {:partition} in_LongFileName == 0;
    goto L69;

  anon137_Then:
    goto L69;

  anon177_Then:
    goto L46;

  anon133_Then:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} INTMOD(Mem_T.INT4[in_ByteOffset], 4096) != 0;
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L228;

  L228:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} in_Bcb_9 != 0;
    assume in_Bcb_9 > 0;
    goto L230;

  L230:
    assume {:nonnull} in_ByteOffset != 0;
    assume in_ByteOffset > 0;
    out_Tmp_1035 := BAND(Mem_T.INT4[in_ByteOffset], BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64), 128), 256), 512), 1024), 2048)));
    call {:si_unique_call 1784} FatReadDirectoryFile#1(in_IrpContext_52, in_ParentDirectory, out_Tmp_1035, 4096, 0, in_Bcb_9, in_Dirent_5, in_Status_13);
    assume {:nonnull} in_Dirent_5 != 0;
    assume in_Dirent_5 > 0;
    goto L46;

  anon174_Then:
    goto L230;

  anon175_Then:
    goto L46;

  anon134_Then:
    assume {:partition} INTMOD(Mem_T.INT4[in_ByteOffset], 4096) == 0;
    goto L228;
}



procedure {:LoopProcedure} FatLocateDirent#1_loop_L42(in_LfnInProgress: int, in_Tmp_975: int, in_Ordinal: int, in_LfnByteOffset: int, in_Tmp_976: int, in_Tmp_977: int, in_Tmp_978: int, in_Tmp_979: int, in_Tmp_980: int, in_Tmp_982: int, in_Tmp_983: int, in_LfnChecksum: int, in_Tmp_984: int, in_Tmp_987: int, in_Tmp_988: int, in_Tmp_989: int, in_Tmp_990: int, in_Tmp_991: int, in_LfnIndex: int, in_Tmp_992: int, in_Tmp_993: int, in_LfnSize: int, in_Lfn_2: int, in_sdv_361: int, in_Tmp_994: int, in_Tmp_995: int, in_Tmp_997: int, in_Tmp_998: int, in_Status_13: int, in_Tmp_999: int, in_Tmp_1000: int, in_Tmp_1001: int, in_sdv_362: int, in_Tmp_1002: int, in_Tmp_1003: int, in_Tmp_1006: int, in_Tmp_1008: int, in_CheckTail: int, in_Tmp_1009: int, in_Tmp_1011: int, in_UpcasedLfn: int, in_Tmp_1012: int, in_Tmp_1013: int, in_sdv_364: int, in_Tmp_1014: int, in_Tmp_1015: int, in_Tmp_1016: int, in_FoundValidLfn: int, in_Tmp_1017: int, in_sdv_365: int, in_sdv_366: int, in_Tmp_1018: int, in_Tmp_1019: int, in_Tmp_1020: int, in_Tmp_1023: int, in_Tmp_1025: int, in_Tmp_1026: int, in_Tmp_1027: int, in_Tmp_1028: int, in_Tmp_1029: int, in_Tmp_1031: int, in_Tmp_1033: int, in_Name_2: int, in_Tmp_1034: int, in_Tmp_1035: int, in_Tmp_1036: int, in_Tmp_1037: int, in_Tmp_1039: int, in_Tmp_1040: int, in_IrpContext_52: int, in_ParentDirectory: int, in_Ccb_4: int, in_Dirent_5: int, in_Bcb_9: int, in_ByteOffset: int, in_LongFileName: int, in_boogieTmp: int) returns (out_LfnInProgress: int, out_Tmp_975: int, out_Ordinal: int, out_LfnByteOffset: int, out_Tmp_976: int, out_Tmp_977: int, out_Tmp_978: int, out_Tmp_979: int, out_Tmp_980: int, out_Tmp_982: int, out_Tmp_983: int, out_LfnChecksum: int, out_Tmp_984: int, out_Tmp_987: int, out_Tmp_988: int, out_Tmp_989: int, out_Tmp_990: int, out_Tmp_991: int, out_LfnIndex: int, out_Tmp_992: int, out_Tmp_993: int, out_LfnSize: int, out_Lfn_2: int, out_sdv_361: int, out_Tmp_994: int, out_Tmp_995: int, out_Tmp_997: int, out_Tmp_998: int, out_Tmp_999: int, out_Tmp_1000: int, out_Tmp_1001: int, out_sdv_362: int, out_Tmp_1002: int, out_Tmp_1003: int, out_Tmp_1006: int, out_Tmp_1008: int, out_CheckTail: int, out_Tmp_1009: int, out_Tmp_1011: int, out_Tmp_1012: int, out_Tmp_1013: int, out_sdv_364: int, out_Tmp_1014: int, out_Tmp_1015: int, out_Tmp_1016: int, out_FoundValidLfn: int, out_Tmp_1017: int, out_sdv_365: int, out_sdv_366: int, out_Tmp_1018: int, out_Tmp_1019: int, out_Tmp_1020: int, out_Tmp_1023: int, out_Tmp_1025: int, out_Tmp_1026: int, out_Tmp_1027: int, out_Tmp_1028: int, out_Tmp_1029: int, out_Tmp_1031: int, out_Tmp_1033: int, out_Tmp_1034: int, out_Tmp_1035: int, out_Tmp_1036: int, out_Tmp_1037: int, out_Tmp_1039: int, out_Tmp_1040: int, out_boogieTmp: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_LfnInProgress == 0 || out_LfnInProgress == 1 || out_LfnInProgress == in_LfnInProgress;
  free ensures {:va_keep} out_Tmp_1006 == 0 || out_Tmp_1006 == 1 || out_Tmp_1006 == in_Tmp_1006;
  free ensures {:va_keep} out_CheckTail == 1 || out_CheckTail == 0 || out_CheckTail == in_CheckTail;
  free ensures {:va_keep} out_sdv_364 == 0 || out_sdv_364 == 1 || out_sdv_364 == in_sdv_364;
  free ensures {:va_keep} out_FoundValidLfn == 0 || out_FoundValidLfn == 1 || out_FoundValidLfn == in_FoundValidLfn;
  free ensures {:va_keep} out_sdv_365 == in_sdv_365;
  free ensures {:va_keep} out_sdv_366 == 0 || out_sdv_366 == 1 || out_sdv_366 == in_sdv_366;
  free ensures {:va_keep} out_boogieTmp == -1073741675 || out_boogieTmp == 0 || out_boogieTmp == in_boogieTmp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatFspClose#0_loop_L14(in_sdv_426: int, in_sdv_427: int, in_LastVcb: int, in_FreeContext: int, in_CurrentVcb: int, in_Tmp_1160: int, in_sdv_431: int, in_LoopsWithVcbHeld: int, in_CloseContext_1: int, in_Vcb_47: int, in_vslice_dummy_var_254: int, in_vslice_dummy_var_255: int, in_vslice_dummy_var_256: int) returns (out_sdv_426: int, out_sdv_427: int, out_LastVcb: int, out_FreeContext: int, out_CurrentVcb: int, out_Tmp_1160: int, out_sdv_431: int, out_LoopsWithVcbHeld: int, out_CloseContext_1: int, out_vslice_dummy_var_254: int, out_vslice_dummy_var_255: int, out_vslice_dummy_var_256: int)
{
  var vslice_dummy_var_7535: int;
  var vslice_dummy_var_7536: int;
  var vslice_dummy_var_7537: int;

  entry:
    out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256 := in_sdv_426, in_sdv_427, in_LastVcb, in_FreeContext, in_CurrentVcb, in_Tmp_1160, in_sdv_431, in_LoopsWithVcbHeld, in_CloseContext_1, in_vslice_dummy_var_254, in_vslice_dummy_var_255, in_vslice_dummy_var_256;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 1806} out_CloseContext_1 := FatRemoveClose(in_Vcb_47, out_LastVcb);
    goto anon29_Else;

  anon29_Else:
    assume {:partition} out_CloseContext_1 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} in_Vcb_47 != 0;
    goto L22;

  L22:
    out_LastVcb := out_CurrentVcb;
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc out_FreeContext;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} out_FreeContext != 0;
    out_Tmp_1160 := 0;
    goto L29;

  L29:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc vslice_dummy_var_7535;
    havoc vslice_dummy_var_7536;
    havoc vslice_dummy_var_7537;
    call {:si_unique_call 1808} out_vslice_dummy_var_254 := FatCommonClose#0(vslice_dummy_var_7535, vslice_dummy_var_7536, out_Tmp_1160, vslice_dummy_var_7537, 1, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} out_FreeContext != 0;
    call {:si_unique_call 1807} sdv_ExFreePool(0);
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 1818} {:si_old_unique_call 1} out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256 := FatFspClose#0_loop_L14(out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, in_Vcb_47, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256);
    return;

  anon33_Then:
    assume {:partition} out_FreeContext == 0;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    goto L_BAF_3;

  anon40_Then:
    assume {:partition} out_FreeContext == 0;
    call {:si_unique_call 1809} out_sdv_427 := sdv_containing_record(out_CloseContext_1, 12);
    out_Tmp_1160 := out_sdv_427;
    goto L29;

  anon31_Then:
    assume {:partition} in_Vcb_47 == 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_CurrentVcb != 0;
    call {:si_unique_call 1810} ExReleaseResourceLite(0);
    out_CurrentVcb := 0;
    goto L22;

  anon35_Then:
    assume {:partition} out_CurrentVcb == 0;
    goto L22;

  anon32_Then:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    out_LoopsWithVcbHeld := 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} out_CurrentVcb != 0;
    call {:si_unique_call 1817} ExReleaseResourceLite(0);
    goto L53;

  L53:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc out_CurrentVcb;
    call {:si_unique_call 1812} out_vslice_dummy_var_256 := ExAcquireResourceExclusiveLite(0, 1);
    goto L60;

  L60:
    assume {:nonnull} out_CurrentVcb != 0;
    assume out_CurrentVcb > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1811} ExReleaseResourceLite(0);
    out_CurrentVcb := 0;
    goto L22;

  anon36_Then:
    goto L22;

  anon41_Then:
    assume {:partition} out_CurrentVcb == 0;
    goto L53;

  anon34_Then:
    out_LoopsWithVcbHeld := out_LoopsWithVcbHeld + 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} out_LoopsWithVcbHeld >= 20;
    call {:si_unique_call 1815} out_sdv_431 := ExGetSharedWaiterCount(0);
    call {:si_unique_call 1816} out_sdv_426 := ExGetExclusiveWaiterCount(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_sdv_431 + out_sdv_426 != 0;
    call {:si_unique_call 1813} ExReleaseResourceLite(0);
    call {:si_unique_call 1814} out_vslice_dummy_var_255 := ExAcquireResourceExclusiveLite(0, 1);
    goto L72;

  L72:
    out_LoopsWithVcbHeld := 0;
    goto L60;

  anon37_Then:
    assume {:partition} out_sdv_431 + out_sdv_426 == 0;
    goto L72;

  anon42_Then:
    assume {:partition} 20 > out_LoopsWithVcbHeld;
    goto L60;
}



procedure {:LoopProcedure} FatFspClose#0_loop_L14(in_sdv_426: int, in_sdv_427: int, in_LastVcb: int, in_FreeContext: int, in_CurrentVcb: int, in_Tmp_1160: int, in_sdv_431: int, in_LoopsWithVcbHeld: int, in_CloseContext_1: int, in_Vcb_47: int, in_vslice_dummy_var_254: int, in_vslice_dummy_var_255: int, in_vslice_dummy_var_256: int) returns (out_sdv_426: int, out_sdv_427: int, out_LastVcb: int, out_FreeContext: int, out_CurrentVcb: int, out_Tmp_1160: int, out_sdv_431: int, out_LoopsWithVcbHeld: int, out_CloseContext_1: int, out_vslice_dummy_var_254: int, out_vslice_dummy_var_255: int, out_vslice_dummy_var_256: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.VcbState__VCB, Mem_T.FcbState__FCB;
  free ensures {:va_keep} out_vslice_dummy_var_254 == 0 || out_vslice_dummy_var_254 == 259 || out_vslice_dummy_var_254 == in_vslice_dummy_var_254;
  free ensures {:va_keep} out_vslice_dummy_var_255 == 0 || out_vslice_dummy_var_255 == 1 || out_vslice_dummy_var_255 == in_vslice_dummy_var_255;
  free ensures {:va_keep} out_vslice_dummy_var_256 == 0 || out_vslice_dummy_var_256 == 1 || out_vslice_dummy_var_256 == in_vslice_dummy_var_256;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatFspClose#1_loop_L14(in_sdv_426: int, in_sdv_427: int, in_LastVcb: int, in_FreeContext: int, in_CurrentVcb: int, in_Tmp_1160: int, in_sdv_431: int, in_LoopsWithVcbHeld: int, in_CloseContext_1: int, in_Vcb_47: int, in_vslice_dummy_var_258: int, in_vslice_dummy_var_259: int, in_vslice_dummy_var_260: int) returns (out_sdv_426: int, out_sdv_427: int, out_LastVcb: int, out_FreeContext: int, out_CurrentVcb: int, out_Tmp_1160: int, out_sdv_431: int, out_LoopsWithVcbHeld: int, out_CloseContext_1: int, out_vslice_dummy_var_258: int, out_vslice_dummy_var_259: int, out_vslice_dummy_var_260: int)
{
  var vslice_dummy_var_7538: int;
  var vslice_dummy_var_7539: int;
  var vslice_dummy_var_7540: int;

  entry:
    out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260 := in_sdv_426, in_sdv_427, in_LastVcb, in_FreeContext, in_CurrentVcb, in_Tmp_1160, in_sdv_431, in_LoopsWithVcbHeld, in_CloseContext_1, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 1819} out_CloseContext_1 := FatRemoveClose(in_Vcb_47, out_LastVcb);
    goto anon29_Else;

  anon29_Else:
    assume {:partition} out_CloseContext_1 != 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} in_Vcb_47 != 0;
    goto L22;

  L22:
    out_LastVcb := out_CurrentVcb;
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc out_FreeContext;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} out_FreeContext != 0;
    out_Tmp_1160 := 0;
    goto L29;

  L29:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc vslice_dummy_var_7538;
    havoc vslice_dummy_var_7539;
    havoc vslice_dummy_var_7540;
    call {:si_unique_call 1821} out_vslice_dummy_var_258 := FatCommonClose#1(vslice_dummy_var_7538, vslice_dummy_var_7539, out_Tmp_1160, vslice_dummy_var_7540, 1, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} out_FreeContext != 0;
    call {:si_unique_call 1820} sdv_ExFreePool(0);
    goto anon33_Else_dummy;

  anon33_Else_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 1831} {:si_old_unique_call 1} out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260 := FatFspClose#1_loop_L14(out_sdv_426, out_sdv_427, out_LastVcb, out_FreeContext, out_CurrentVcb, out_Tmp_1160, out_sdv_431, out_LoopsWithVcbHeld, out_CloseContext_1, in_Vcb_47, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260);
    return;

  anon33_Then:
    assume {:partition} out_FreeContext == 0;
    goto anon33_Then_dummy;

  anon33_Then_dummy:
    goto L_BAF_4;

  anon40_Then:
    assume {:partition} out_FreeContext == 0;
    call {:si_unique_call 1822} out_sdv_427 := sdv_containing_record(out_CloseContext_1, 12);
    out_Tmp_1160 := out_sdv_427;
    goto L29;

  anon31_Then:
    assume {:partition} in_Vcb_47 == 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} out_CurrentVcb != 0;
    call {:si_unique_call 1823} ExReleaseResourceLite(0);
    out_CurrentVcb := 0;
    goto L22;

  anon35_Then:
    assume {:partition} out_CurrentVcb == 0;
    goto L22;

  anon32_Then:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    out_LoopsWithVcbHeld := 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} out_CurrentVcb != 0;
    call {:si_unique_call 1830} ExReleaseResourceLite(0);
    goto L53;

  L53:
    assume {:nonnull} out_CloseContext_1 != 0;
    assume out_CloseContext_1 > 0;
    havoc out_CurrentVcb;
    call {:si_unique_call 1825} out_vslice_dummy_var_260 := ExAcquireResourceExclusiveLite(0, 1);
    goto L60;

  L60:
    assume {:nonnull} out_CurrentVcb != 0;
    assume out_CurrentVcb > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 1824} ExReleaseResourceLite(0);
    out_CurrentVcb := 0;
    goto L22;

  anon36_Then:
    goto L22;

  anon41_Then:
    assume {:partition} out_CurrentVcb == 0;
    goto L53;

  anon34_Then:
    out_LoopsWithVcbHeld := out_LoopsWithVcbHeld + 1;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} out_LoopsWithVcbHeld >= 20;
    call {:si_unique_call 1828} out_sdv_431 := ExGetSharedWaiterCount(0);
    call {:si_unique_call 1829} out_sdv_426 := ExGetExclusiveWaiterCount(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_sdv_431 + out_sdv_426 != 0;
    call {:si_unique_call 1826} ExReleaseResourceLite(0);
    call {:si_unique_call 1827} out_vslice_dummy_var_259 := ExAcquireResourceExclusiveLite(0, 1);
    goto L72;

  L72:
    out_LoopsWithVcbHeld := 0;
    goto L60;

  anon37_Then:
    assume {:partition} out_sdv_431 + out_sdv_426 == 0;
    goto L72;

  anon42_Then:
    assume {:partition} 20 > out_LoopsWithVcbHeld;
    goto L60;
}



procedure {:LoopProcedure} FatFspClose#1_loop_L14(in_sdv_426: int, in_sdv_427: int, in_LastVcb: int, in_FreeContext: int, in_CurrentVcb: int, in_Tmp_1160: int, in_sdv_431: int, in_LoopsWithVcbHeld: int, in_CloseContext_1: int, in_Vcb_47: int, in_vslice_dummy_var_258: int, in_vslice_dummy_var_259: int, in_vslice_dummy_var_260: int) returns (out_sdv_426: int, out_sdv_427: int, out_LastVcb: int, out_FreeContext: int, out_CurrentVcb: int, out_Tmp_1160: int, out_sdv_431: int, out_LoopsWithVcbHeld: int, out_CloseContext_1: int, out_vslice_dummy_var_258: int, out_vslice_dummy_var_259: int, out_vslice_dummy_var_260: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.SwapVpb__VCB, Mem_T.VcbState__VCB, sdv_irql_current, Mem_T.Vcb__IRP_CONTEXT, Mem_T.RootDcb__VCB, Mem_T.Buffer__RTL_BITMAP, t, Mem_T.FcbState__FCB;
  free ensures {:va_keep} old(t) == 1 ==> t != 0;
  free ensures {:va_keep} old(t) == 0 ==> t != 1;
  free ensures {:va_keep} t == 1 || t == old(t);
  free ensures {:va_keep} out_vslice_dummy_var_258 == 0 || out_vslice_dummy_var_258 == 259 || out_vslice_dummy_var_258 == in_vslice_dummy_var_258;
  free ensures {:va_keep} out_vslice_dummy_var_259 == 0 || out_vslice_dummy_var_259 == 1 || out_vslice_dummy_var_259 == in_vslice_dummy_var_259;
  free ensures {:va_keep} out_vslice_dummy_var_260 == 0 || out_vslice_dummy_var_260 == 1 || out_vslice_dummy_var_260 == in_vslice_dummy_var_260;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatCommonClose#0_loop_L142(in_ParentDcb: int, in_CurrentDcb: int, in_Tmp_1167: int, in_IrpContext_69: int, in_sdv_448: int, in_Vcb_48: int, in_vslice_dummy_var_265: int, in_vslice_dummy_var_266: int) returns (out_ParentDcb: int, out_CurrentDcb: int, out_Tmp_1167: int, out_sdv_448: int, out_vslice_dummy_var_265: int, out_vslice_dummy_var_266: int)
{

  entry:
    out_ParentDcb, out_CurrentDcb, out_Tmp_1167, out_sdv_448, out_vslice_dummy_var_265, out_vslice_dummy_var_266 := in_ParentDcb, in_CurrentDcb, in_Tmp_1167, in_sdv_448, in_vslice_dummy_var_265, in_vslice_dummy_var_266;
    goto L142, exit;

  exit:
    return;

  L142:
    out_Tmp_1167 := out_ParentDcb;
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    goto anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1167] == 1283;
    call {:si_unique_call 1835} out_sdv_448 := sdv_IsListEmpty(0);
    goto anon96_Else;

  anon96_Else:
    assume {:partition} out_sdv_448 != 0;
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon97_Else;

  anon97_Else:
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon98_Else;

  anon98_Else:
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    call {:si_unique_call 1833} out_vslice_dummy_var_265 := corral_nondet();
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    call {:si_unique_call 1834} out_vslice_dummy_var_266 := sdv_ObDereferenceObject(0);
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon99_Else;

  anon99_Else:
    out_CurrentDcb := out_ParentDcb;
    assume {:nonnull} out_CurrentDcb != 0;
    assume out_CurrentDcb > 0;
    havoc out_ParentDcb;
    assume {:nonnull} in_Vcb_48 != 0;
    assume in_Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_48)], 256);
    call {:si_unique_call 1832} FatDeleteFcb_Real(in_IrpContext_69, out_CurrentDcb);
    goto anon99_Else_dummy;

  anon99_Else_dummy:
    call {:si_unique_call 1836} {:si_old_unique_call 1} out_ParentDcb, out_CurrentDcb, out_Tmp_1167, out_sdv_448, out_vslice_dummy_var_265, out_vslice_dummy_var_266 := FatCommonClose#0_loop_L142(out_ParentDcb, out_CurrentDcb, out_Tmp_1167, in_IrpContext_69, out_sdv_448, in_Vcb_48, out_vslice_dummy_var_265, out_vslice_dummy_var_266);
    return;
}



procedure {:LoopProcedure} FatCommonClose#0_loop_L142(in_ParentDcb: int, in_CurrentDcb: int, in_Tmp_1167: int, in_IrpContext_69: int, in_sdv_448: int, in_Vcb_48: int, in_vslice_dummy_var_265: int, in_vslice_dummy_var_266: int) returns (out_ParentDcb: int, out_CurrentDcb: int, out_Tmp_1167: int, out_sdv_448: int, out_vslice_dummy_var_265: int, out_vslice_dummy_var_266: int);
  modifies Mem_T.VcbState__VCB, alloc, Mem_T.FcbState__FCB;
  free ensures {:va_keep} out_sdv_448 == 1 || out_sdv_448 == 0 || out_sdv_448 == in_sdv_448;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation FatCommonClose#1_loop_L142(in_ParentDcb: int, in_CurrentDcb: int, in_Tmp_1167: int, in_IrpContext_69: int, in_sdv_448: int, in_Vcb_48: int, in_vslice_dummy_var_278: int, in_vslice_dummy_var_279: int) returns (out_ParentDcb: int, out_CurrentDcb: int, out_Tmp_1167: int, out_sdv_448: int, out_vslice_dummy_var_278: int, out_vslice_dummy_var_279: int)
{

  entry:
    out_ParentDcb, out_CurrentDcb, out_Tmp_1167, out_sdv_448, out_vslice_dummy_var_278, out_vslice_dummy_var_279 := in_ParentDcb, in_CurrentDcb, in_Tmp_1167, in_sdv_448, in_vslice_dummy_var_278, in_vslice_dummy_var_279;
    goto L142, exit;

  exit:
    return;

  L142:
    out_Tmp_1167 := out_ParentDcb;
    assume {:nonnull} out_Tmp_1167 != 0;
    assume out_Tmp_1167 > 0;
    goto anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_1167] == 1283;
    call {:si_unique_call 1840} out_sdv_448 := sdv_IsListEmpty(0);
    goto anon96_Else;

  anon96_Else:
    assume {:partition} out_sdv_448 != 0;
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon97_Else;

  anon97_Else:
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon98_Else;

  anon98_Else:
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    call {:si_unique_call 1838} out_vslice_dummy_var_278 := corral_nondet();
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    call {:si_unique_call 1839} out_vslice_dummy_var_279 := sdv_ObDereferenceObject(0);
    assume {:nonnull} out_ParentDcb != 0;
    assume out_ParentDcb > 0;
    goto anon99_Else;

  anon99_Else:
    out_CurrentDcb := out_ParentDcb;
    assume {:nonnull} out_CurrentDcb != 0;
    assume out_CurrentDcb > 0;
    havoc out_ParentDcb;
    assume {:nonnull} in_Vcb_48 != 0;
    assume in_Vcb_48 > 0;
    Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_48)] := BOR(Mem_T.VcbState__VCB[VcbState__VCB(in_Vcb_48)], 256);
    call {:si_unique_call 1837} FatDeleteFcb_Real(in_IrpContext_69, out_CurrentDcb);
    goto anon99_Else_dummy;

  anon99_Else_dummy:
    call {:si_unique_call 1841} {:si_old_unique_call 1} out_ParentDcb, out_CurrentDcb, out_Tmp_1167, out_sdv_448, out_vslice_dummy_var_278, out_vslice_dummy_var_279 := FatCommonClose#1_loop_L142(out_ParentDcb, out_CurrentDcb, out_Tmp_1167, in_IrpContext_69, out_sdv_448, in_Vcb_48, out_vslice_dummy_var_278, out_vslice_dummy_var_279);
    return;
}



procedure {:LoopProcedure} FatCommonClose#1_loop_L142(in_ParentDcb: int, in_CurrentDcb: int, in_Tmp_1167: int, in_IrpContext_69: int, in_sdv_448: int, in_Vcb_48: int, in_vslice_dummy_var_278: int, in_vslice_dummy_var_279: int) returns (out_ParentDcb: int, out_CurrentDcb: int, out_Tmp_1167: int, out_sdv_448: int, out_vslice_dummy_var_278: int, out_vslice_dummy_var_279: int);
  modifies Mem_T.VcbState__VCB, alloc, Mem_T.FcbState__FCB;
  free ensures {:va_keep} out_sdv_448 == 1 || out_sdv_448 == 0 || out_sdv_448 == in_sdv_448;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



procedure fakeMain() returns (Tmp_578: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_compFset, Mem_T.CurrentStackLocation_unnamed_tag_7, t, s, yogi_error, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.MinorFunction__IO_STACK_LOCATION, Mem_T.Status__IO_STATUS_BLOCK, Mem_T.OriginatingIrp__IRP_CONTEXT, Mem_T.MajorFunction__IRP_CONTEXT, Mem_T.Vcb__IRP_CONTEXT, Mem_T.Flags__IRP_CONTEXT, Mem_T.PendingReturned__IRP, Mem_T.VcbState__VCB, Mem_T.Buffer__RTL_BITMAP, Mem_T.FcbState__FCB, Mem_T.DeviceObject__IO_STACK_LOCATION, Mem_T.FileObject__IO_STACK_LOCATION, Mem_T.SwapVpb__VCB, Mem_T.RootDcb__VCB;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(s) == 1 || old(s) == 0;
  free ensures {:va_keep} false || old(t) == 1 || old(t) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || s == 1 || s == 0;
  free ensures {:va_keep} false || t == 1 || t == 0;



implementation {:entrypoint} fakeMain() returns (Tmp_578: int, dup_assertVar: bool)
{

  start:
    call Tmp_578, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


