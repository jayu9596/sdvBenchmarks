var {:scalar} alloc: int;

var {:scalar} yogi_error: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} Mem_T.CancelIrql__IRP: [int]int;

var {:scalar} Mem_T.CancelRoutine__IRP: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const SerialGlobals: int;

const SerialPhysicalZero: int;

const currentInstance_sdv_static_local_variable_304: int;

const SerialPhysicalZero_1: int;

const GUID_DEVINTERFACE_COMPORT: int;

const driverDefaults: int;

const sdv_cancelFptr: int;

const SerialPortNameGuid: int;

const SerailPortPerfGuid: int;

const SerialPortPropertiesGuid: int;

const SerialPortHWGuid: int;

const SerialPortCommGuid: int;

const SerialPhysicalZero_2: int;

const KdComPortInUse: int;

const SerialPhysicalZero_3: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

procedure {:origName "SerialCommError"} SerialCommError(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCommError"} SerialCommError(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int)
{
  var {:pointer} Tmp_2: int;
  var {:pointer} Tmp_4: int;
  var {:pointer} Extension: int;
  var {:pointer} Dpc: int;
  var {:pointer} DeferredContext: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_457: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    Dpc := actual_Dpc;
    DeferredContext := actual_DeferredContext;
    call {:si_unique_call 1} Tmp_2 := __HAVOC_malloc(88);
    call {:si_unique_call 2} Tmp_4 := __HAVOC_malloc(72);
    Extension := DeferredContext;
    Tmp_2 := strConst__li2bpl1;
    call {:si_unique_call 3} vslice_dummy_var_1 := SerialDbgPrintEx(2, Tmp_2);
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc vslice_dummy_var_456;
    call {:si_unique_call 4} SerialKillAllReadsOrWrites(vslice_dummy_var_456, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension));
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc vslice_dummy_var_457;
    call {:si_unique_call 5} SerialKillAllReadsOrWrites(vslice_dummy_var_457, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension));
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 6} SerialDpcEpilogue(Extension, Dpc);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_4 := strConst__li2bpl0;
    call {:si_unique_call 7} vslice_dummy_var_2 := SerialDbgPrintEx(2, Tmp_4);
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 8} vslice_dummy_var_3 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt: int, actual_DeviceIsOpened: int, actual_Reopen: int)
{
  var {:pointer} Tmp_9: int;
  var {:scalar} oldIrql: int;
  var {:pointer} PDevExt: int;
  var {:scalar} DeviceIsOpened: int;
  var {:scalar} Reopen: int;
  var vslice_dummy_var_4: int;

  anon0:
    call {:si_unique_call 9} vslice_dummy_var_4 := __HAVOC_malloc(4);
    PDevExt := actual_PDevExt;
    DeviceIsOpened := actual_DeviceIsOpened;
    Reopen := actual_Reopen;
    call {:si_unique_call 10} Tmp_9 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    Mem_T.INT4[Tmp_9] := oldIrql;
    call {:si_unique_call 11} sdv_KeAcquireSpinLock(0, Tmp_9);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    oldIrql := Mem_T.INT4[Tmp_9];
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 12} sdv_KeReleaseSpinLock(0, oldIrql);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 13} vslice_dummy_var_5 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_12: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFinishSystemPower"} SerialFinishSystemPower(actual_PDevObj: int, actual_PIrp: int, actual_PContext: int) returns (Tmp_12: int)
{
  var {:pointer} sdv_6: int;
  var {:pointer} pDevExt: int;
  var {:pointer} pContext: int;
  var {:scalar} status: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} PDevObj: int;
  var {:pointer} PIrp: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;

  anon0:
    PDevObj := actual_PDevObj;
    PIrp := actual_PIrp;
    call {:si_unique_call 14} Tmp_14 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc pDevExt;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status >= 0;
    call {:si_unique_call 15} sdv_6 := ExAllocatePoolWithTag(512, 8, -666022077);
    pContext := sdv_6;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 16} pIrpSp := sdv_IoGetCurrentIrpStackLocation(PIrp);
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pContext != 0;
    assume pContext > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    havoc vslice_dummy_var_458;
    havoc vslice_dummy_var_459;
    havoc vslice_dummy_var_460;
    call {:si_unique_call 17} status := PoRequestPowerIrp#1(vslice_dummy_var_458, vslice_dummy_var_459, vslice_dummy_var_460, li2bplFunctionConstant339, pContext, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  L29:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status >= 0;
    goto L31;

  L31:
    Tmp_12 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} 0 > status;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pContext != 0;
    call {:si_unique_call 18} sdv_ExFreePool(0);
    goto L32;

  L32:
    call {:si_unique_call 19} PoStartNextPowerIrp(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status;
    Tmp_14 := strConst__li2bpl2;
    call {:si_unique_call 20} vslice_dummy_var_6 := SerialDbgPrintEx(9, Tmp_14);
    call {:si_unique_call 21} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 22} SerialIRPEpilogue(pDevExt);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L31;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} pContext == 0;
    goto L32;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} pContext == 0;
    status := -1073741670;
    goto L29;

  anon15_Then:
    assume {:partition} 0 > status;
    call {:si_unique_call 23} PoStartNextPowerIrp(0);
    Tmp_12 := status;
    goto L1;
}



procedure {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_15: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_1: int, actual_PDevExt_1: int, actual_DevPowerState: int) returns (Tmp_15: int)
{
  var {:scalar} powerState: int;
  var {:pointer} Tmp_17: int;
  var {:scalar} gotoPowEvent: int;
  var {:scalar} status_1: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} PDevObj_1: int;
  var {:scalar} DevPowerState: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;

  anon0:
    call {:si_unique_call 24} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 25} gotoPowEvent := __HAVOC_malloc(156);
    PDevObj_1 := actual_PDevObj_1;
    DevPowerState := actual_DevPowerState;
    call {:si_unique_call 26} Tmp_17 := __HAVOC_malloc(100);
    call {:si_unique_call 27} Tmp_18 := __HAVOC_malloc(120);
    call {:si_unique_call 28} sdv_do_paged_code_check();
    Tmp_17 := strConst__li2bpl3;
    call {:si_unique_call 29} vslice_dummy_var_8 := SerialDbgPrintEx(11, Tmp_17);
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 30} KeInitializeEvent(gotoPowEvent, 1, 0);
    call {:si_unique_call 31} status_1 := PoRequestPowerIrp#1(PDevObj_1, 2, powerState, li2bplFunctionConstant336, gotoPowEvent, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_1 == 259;
    call {:si_unique_call 32} vslice_dummy_var_7 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    status_1 := 0;
    goto L21;

  L21:
    Tmp_18 := strConst__li2bpl4;
    call {:si_unique_call 33} vslice_dummy_var_9 := SerialDbgPrintEx(11, Tmp_18);
    Tmp_15 := status_1;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} status_1 != 259;
    goto L21;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_21: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_21: int)
{
  var {:pointer} pDevExt_2: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:scalar} status_3: int;
  var {:pointer} PDevObj_3: int;
  var {:pointer} PIrp_1: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;

  anon0:
    PDevObj_3 := actual_PDevObj_3;
    PIrp_1 := actual_PIrp_1;
    call {:si_unique_call 34} Tmp_22 := __HAVOC_malloc(92);
    call {:si_unique_call 35} Tmp_24 := __HAVOC_malloc(84);
    call {:si_unique_call 36} Tmp_25 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_3 != 0;
    assume PDevObj_3 > 0;
    havoc pDevExt_2;
    call {:si_unique_call 37} vslice_dummy_var_10 := sdv_IoGetCurrentIrpStackLocation(PIrp_1);
    call {:si_unique_call 38} sdv_do_paged_code_check();
    Tmp_25 := strConst__li2bpl5;
    call {:si_unique_call 39} vslice_dummy_var_11 := SerialDbgPrintEx(11, Tmp_25);
    Tmp_22 := strConst__li2bpl6;
    call {:si_unique_call 40} vslice_dummy_var_12 := SerialDbgPrintEx(12, Tmp_22);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 41} KeClearEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_2));
    call {:si_unique_call 42} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_1);
    call {:si_unique_call 43} sdv_IoSetCompletionRoutine(PIrp_1, li2bplFunctionConstant343, 0, 1, 1, 1);
    Tmp_24 := strConst__li2bpl7;
    call {:si_unique_call 44} vslice_dummy_var_13 := SerialDbgPrintEx(12, Tmp_24);
    call {:si_unique_call 45} status_3 := PoCallDriver(0, PIrp_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_21 := status_3;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_26: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_4: int, actual_PIrp_2: int) returns (Tmp_26: int)
{
  var {:pointer} Tmp_27: int;
  var {:pointer} Tmp_28: int;
  var {:pointer} Tmp_29: int;
  var {:pointer} pDevExt_3: int;
  var {:pointer} Tmp_30: int;
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_31: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} pLowerDevObj: int;
  var {:pointer} Tmp_32: int;
  var {:pointer} Tmp_33: int;
  var {:pointer} Tmp_34: int;
  var {:pointer} Tmp_36: int;
  var {:scalar} status_4: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} Tmp_38: int;
  var {:scalar} Tmp_39: int;
  var {:pointer} Tmp_40: int;
  var {:pointer} Tmp_41: int;
  var {:pointer} Tmp_42: int;
  var {:pointer} PDevObj_4: int;
  var {:pointer} PIrp_2: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 46} powerState_2 := __HAVOC_malloc(8);
    PDevObj_4 := actual_PDevObj_4;
    PIrp_2 := actual_PIrp_2;
    call {:si_unique_call 47} Tmp_27 := __HAVOC_malloc(100);
    call {:si_unique_call 48} Tmp_28 := __HAVOC_malloc(72);
    call {:si_unique_call 49} Tmp_29 := __HAVOC_malloc(80);
    call {:si_unique_call 50} Tmp_30 := __HAVOC_malloc(72);
    call {:si_unique_call 51} Tmp_31 := __HAVOC_malloc(124);
    call {:si_unique_call 52} Tmp_32 := __HAVOC_malloc(72);
    call {:si_unique_call 53} Tmp_33 := __HAVOC_malloc(72);
    call {:si_unique_call 54} Tmp_34 := __HAVOC_malloc(28);
    call {:si_unique_call 55} Tmp_36 := __HAVOC_malloc(112);
    call {:si_unique_call 56} Tmp_37 := __HAVOC_malloc(136);
    call {:si_unique_call 57} Tmp_38 := __HAVOC_malloc(104);
    call {:si_unique_call 58} Tmp_40 := __HAVOC_malloc(72);
    call {:si_unique_call 59} Tmp_41 := __HAVOC_malloc(104);
    call {:si_unique_call 60} Tmp_42 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_4 != 0;
    assume PDevObj_4 > 0;
    havoc pDevExt_3;
    call {:si_unique_call 61} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(PIrp_2);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc pLowerDevObj;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 62} sdv_do_paged_code_check();
    call {:si_unique_call 63} status_4 := SerialIRPPrologue(PIrp_2, pDevExt_3);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_4 != 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} status_4 != 259;
    call {:si_unique_call 64} PoStartNextPowerIrp(0);
    Tmp_28 := strConst__li2bpl2;
    call {:si_unique_call 65} vslice_dummy_var_16 := SerialDbgPrintEx(9, Tmp_28);
    call {:si_unique_call 66} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 67} SerialIRPEpilogue(pDevExt_3);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  L26:
    Tmp_26 := status_4;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon113_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume {:partition} status_4 == 259;
    goto L26;

  anon83_Then:
    assume {:partition} status_4 == 0;
    status_4 := 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    Tmp_36 := strConst__li2bpl11;
    call {:si_unique_call 68} vslice_dummy_var_28 := SerialDbgPrintEx(12, Tmp_36);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto L57;

  L57:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := -1073741436;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_4 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    call {:si_unique_call 69} PoStartNextPowerIrp(0);
    Tmp_40 := strConst__li2bpl2;
    call {:si_unique_call 70} vslice_dummy_var_29 := SerialDbgPrintEx(9, Tmp_40);
    call {:si_unique_call 71} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 72} SerialIRPEpilogue(pDevExt_3);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := status_4;
    goto L1;

  anon122_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    goto L58;

  L58:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := 0;
    status_4 := 0;
    call {:si_unique_call 73} PoStartNextPowerIrp(0);
    call {:si_unique_call 74} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 75} Tmp_26 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon123_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon87_Then:
    goto L58;

  anon85_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto L58;

  anon86_Then:
    goto L57;

  anon100_Then:
    goto L40;

  L40:
    call {:si_unique_call 76} PoStartNextPowerIrp(0);
    call {:si_unique_call 77} sdv_IoSkipCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 78} status_4 := SerialPoCallDriver(pDevExt_3, pLowerDevObj, PIrp_2);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := status_4;
    goto L1;

  anon116_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon101_Then:
    Tmp_38 := strConst__li2bpl10;
    call {:si_unique_call 79} vslice_dummy_var_20 := SerialDbgPrintEx(12, Tmp_38);
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_32 := strConst__li2bpl13;
    call {:si_unique_call 80} vslice_dummy_var_23 := SerialDbgPrintEx(12, Tmp_32);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    Tmp_37 := strConst__li2bpl14;
    call {:si_unique_call 81} vslice_dummy_var_24 := SerialDbgPrintEx(12, Tmp_37);
    status_4 := 0;
    goto L40;

  anon90_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    goto L106;

  L106:
    Tmp_42 := strConst__li2bpl16;
    call {:si_unique_call 82} vslice_dummy_var_26 := SerialDbgPrintEx(12, Tmp_42);
    call {:si_unique_call 83} Tmp_26 := SerialSetPowerD3(PDevObj_4, PIrp_2);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon121_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon110_Then:
    goto L40;

  anon111_Then:
    goto L106;

  anon112_Then:
    goto L106;

  anon91_Then:
    Tmp_27 := strConst__li2bpl15;
    call {:si_unique_call 84} vslice_dummy_var_25 := SerialDbgPrintEx(12, Tmp_27);
    call {:si_unique_call 85} Tmp_26 := SerialSetPowerD0(PDevObj_4, PIrp_2);
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon120_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon103_Then:
    Tmp_29 := strConst__li2bpl12;
    call {:si_unique_call 86} vslice_dummy_var_27 := SerialDbgPrintEx(12, Tmp_29);
    status_4 := 0;
    goto L40;

  anon89_Then:
    Tmp_33 := strConst__li2bpl17;
    call {:si_unique_call 87} vslice_dummy_var_21 := SerialDbgPrintEx(12, Tmp_33);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    status_4 := 0;
    goto L40;

  anon92_Then:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto L128;

  L128:
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc Tmp_39;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_34;
    assume {:nonnull} Tmp_34 != 0;
    assume Tmp_34 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  L130:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_3)] != 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 88} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 89} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 90} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    call {:si_unique_call 91} vslice_dummy_var_14 := PoCallDriver(0, PIrp_2);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := 259;
    goto L1;

  anon117_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon96_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_3)] == 0;
    goto L131;

  L131:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto L150;

  L150:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto L152;

  L152:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 92} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 93} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 94} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant340, 0, 1, 1, 1);
    call {:si_unique_call 95} vslice_dummy_var_15 := PoCallDriver(0, PIrp_2);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := 259;
    goto L1;

  anon118_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon99_Then:
    status_4 := -1073741436;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := status_4;
    call {:si_unique_call 96} PoStartNextPowerIrp(0);
    Tmp_30 := strConst__li2bpl2;
    call {:si_unique_call 97} vslice_dummy_var_22 := SerialDbgPrintEx(9, Tmp_30);
    call {:si_unique_call 98} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 99} SerialIRPEpilogue(pDevExt_3);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := status_4;
    goto L1;

  anon119_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon97_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    goto L152;

  anon98_Then:
    goto L150;

  anon95_Then:
    goto L40;

  anon94_Then:
    goto L131;

  anon104_Then:
    status_4 := 0;
    goto L40;

  anon105_Then:
    goto L128;

  anon106_Then:
    goto L128;

  anon107_Then:
    goto L128;

  anon108_Then:
    goto L128;

  anon109_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon93_Then:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    goto L130;

  anon102_Then:
    Tmp_31 := strConst__li2bpl9;
    call {:si_unique_call 100} vslice_dummy_var_19 := SerialDbgPrintEx(12, Tmp_31);
    goto L40;

  anon114_Then:
    Tmp_41 := strConst__li2bpl8;
    call {:si_unique_call 101} vslice_dummy_var_17 := SerialDbgPrintEx(12, Tmp_41);
    call {:si_unique_call 102} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 103} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    call {:si_unique_call 104} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant342, 0, 1, 1, 1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 105} vslice_dummy_var_18 := PoCallDriver(0, PIrp_2);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} yogi_error != 1;
    Tmp_26 := 259;
    goto L1;

  anon115_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_43: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_2: int) returns (Tmp_43: int)
{
  var {:scalar} powerState_3: int;
  var {:pointer} Tmp_44: int;
  var {:scalar} status_5: int;
  var {:pointer} PDevExt_2: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;

  anon0:
    call {:si_unique_call 106} powerState_3 := __HAVOC_malloc(8);
    PDevExt_2 := actual_PDevExt_2;
    call {:si_unique_call 107} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_43 := -1073741436;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_43 := -1073741436;
    goto L1;

  anon16_Then:
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 108} Tmp_44 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_44 != 0;
    assume Tmp_44 > 0;
    havoc vslice_dummy_var_461;
    Mem_T.INT4[Tmp_44] := vslice_dummy_var_461;
    call {:si_unique_call 109} vslice_dummy_var_30 := sdv_InterlockedIncrement(Tmp_44);
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} Tmp_44 != 0;
    assume Tmp_44 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    havoc vslice_dummy_var_462;
    call {:si_unique_call 110} status_5 := PoRequestPowerIrp#1(vslice_dummy_var_462, 0, powerState_3, li2bplFunctionConstant348, PDevExt_2, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_5 == 259;
    status_5 := 0;
    goto L25;

  L25:
    Tmp_43 := status_5;
    goto L1;

  anon18_Then:
    assume {:partition} status_5 != 259;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_5 < 0;
    call {:si_unique_call 111} SerialIRPEpilogue(PDevExt_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L25;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    assume {:partition} 0 <= status_5;
    goto L25;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    Tmp_43 := -1073741436;
    goto L1;
}



procedure {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_3: int)
{
  var {:pointer} pDevState: int;
  var {:pointer} Tmp_48: int;
  var {:pointer} Tmp_50: int;
  var {:pointer} PDevExt_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;

  anon0:
    call {:si_unique_call 112} vslice_dummy_var_31 := __HAVOC_malloc(4);
    PDevExt_3 := actual_PDevExt_3;
    call {:si_unique_call 113} Tmp_48 := __HAVOC_malloc(124);
    call {:si_unique_call 114} Tmp_50 := __HAVOC_malloc(128);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    pDevState := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_3);
    call {:si_unique_call 115} sdv_do_paged_code_check();
    Tmp_50 := strConst__li2bpl18;
    call {:si_unique_call 116} vslice_dummy_var_32 := SerialDbgPrintEx(11, Tmp_50);
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 117} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 118} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_3 != 0;
    assume PDevExt_3 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 119} boogieTmp := corral_nondet();
    Tmp_48 := strConst__li2bpl19;
    call {:si_unique_call 120} vslice_dummy_var_33 := SerialDbgPrintEx(11, Tmp_48);
    return;
}



procedure {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD2: int, actual_Context_1: int, actual_IoStatus_1: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSystemPowerCompletion"} SerialSystemPowerCompletion(actual_PDevObj_5: int, actual_MinorFunction_1: int, actual_SD2: int, actual_Context_1: int, actual_IoStatus_1: int)
{
  var {:scalar} PowerState_2: int;
  var {:pointer} SD2: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 121} PowerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 122} vslice_dummy_var_34 := __HAVOC_malloc(4);
    SD2 := actual_SD2;
    Context_1 := actual_Context_1;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} PowerState_2 != 0;
    assume PowerState_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Context_1 != 0;
    call {:si_unique_call 123} vslice_dummy_var_35 := KeSetEvent(Context_1, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} Context_1 == 0;
    goto L1;
}



procedure {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_54: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPowerD0Completion"} SerialSetPowerD0Completion(actual_PDevObj_6: int, actual_PIrp_3: int, actual_Context_2: int) returns (Tmp_54: int)
{
  var {:pointer} SD3_1: int;
  var {:pointer} pDevExt_4: int;
  var {:scalar} sdv_3: int;
  var {:pointer} pIrpStack_2: int;
  var {:pointer} Tmp_56: int;
  var {:pointer} PDevObj_6: int;
  var {:pointer} PIrp_3: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_463: int;
  var vslice_dummy_var_464: int;

  anon0:
    call {:si_unique_call 124} sdv_3 := __HAVOC_malloc(8);
    PDevObj_6 := actual_PDevObj_6;
    PIrp_3 := actual_PIrp_3;
    call {:si_unique_call 125} Tmp_56 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_6 != 0;
    assume PDevObj_6 > 0;
    havoc pDevExt_4;
    call {:si_unique_call 126} pIrpStack_2 := sdv_IoGetCurrentIrpStackLocation(PIrp_3);
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 127} sdv_IoMarkIrpPending(0);
    goto L11;

  L11:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 128} SerialRestoreDeviceState(pDevExt_4);
    goto L16;

  L16:
    assume {:nonnull} pIrpStack_2 != 0;
    assume pIrpStack_2 > 0;
    havoc vslice_dummy_var_463;
    havoc vslice_dummy_var_464;
    call {:si_unique_call 129} SD3_1 := PoSetPowerState(0, vslice_dummy_var_463, vslice_dummy_var_464);
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3_1 != 0;
    assume SD3_1 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    call {:si_unique_call 130} PoStartNextPowerIrp(0);
    Tmp_56 := strConst__li2bpl2;
    call {:si_unique_call 131} vslice_dummy_var_36 := SerialDbgPrintEx(9, Tmp_56);
    call {:si_unique_call 132} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 133} SerialIRPEpilogue(pDevExt_4);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_54 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    goto L16;

  anon7_Then:
    goto L11;
}



procedure {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_57: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWaitWakeCompletion"} SerialWaitWakeCompletion(actual_PDevObj_7: int, actual_PIrp_4: int, actual_Context_3: int) returns (Tmp_57: int)
{
  var {:pointer} pDevExt_5: int;
  var {:pointer} PDevObj_7: int;

  anon0:
    PDevObj_7 := actual_PDevObj_7;
    assume {:nonnull} PDevObj_7 != 0;
    assume PDevObj_7 > 0;
    havoc pDevExt_5;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 134} PoStartNextPowerIrp(0);
    call {:si_unique_call 135} SerialIRPEpilogue(pDevExt_5);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_57 := 0;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_59: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == 0 || sdv_irql_previous_5 == 2 || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == 0 || sdv_irql_previous_4 == 2 || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_59: int)
{
  var {:pointer} SD2_1: int;
  var {:pointer} SD1: int;
  var {:scalar} charTime: int;
  var {:pointer} pDevExt_6: int;
  var {:pointer} Tmp_61: int;
  var {:scalar} sdv_1: int;
  var {:pointer} pIrpStack_3: int;
  var {:scalar} sdv_2: int;
  var {:pointer} PDevObj_8: int;
  var {:pointer} PIrp_5: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;

  anon0:
    call {:si_unique_call 136} charTime := __HAVOC_malloc(20);
    call {:si_unique_call 137} sdv_1 := __HAVOC_malloc(8);
    call {:si_unique_call 138} sdv_2 := __HAVOC_malloc(20);
    PDevObj_8 := actual_PDevObj_8;
    PIrp_5 := actual_PIrp_5;
    call {:si_unique_call 139} Tmp_61 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_8 != 0;
    assume PDevObj_8 > 0;
    havoc pDevExt_6;
    call {:si_unique_call 140} pIrpStack_3 := sdv_IoGetCurrentIrpStackLocation(PIrp_5);
    call {:si_unique_call 141} sdv_do_paged_code_check();
    Tmp_61 := strConst__li2bpl20;
    call {:si_unique_call 142} vslice_dummy_var_38 := SerialDbgPrintEx(6, Tmp_61);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 143} vslice_dummy_var_37 := SerialSendWaitWake(pDevExt_6);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L20;

  L20:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    havoc vslice_dummy_var_465;
    havoc vslice_dummy_var_466;
    call {:si_unique_call 144} SD1 := PoSetPowerState(0, vslice_dummy_var_465, vslice_dummy_var_466);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 145} SetDeviceIsOpened(pDevExt_6, 0, 1);
    call {:si_unique_call 146} SD2_1 := SerialGetCharTime(pDevExt_6);
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2_1 != 0;
    assume SD2_1 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} charTime != 0;
    assume charTime > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    call {:si_unique_call 147} SerialDisableUART(pDevExt_6);
    call {:si_unique_call 148} SerialDrainUART(pDevExt_6, charTime);
    call {:si_unique_call 149} SerialSaveDeviceState(pDevExt_6);
    goto L47;

  L47:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := 0;
    call {:si_unique_call 150} PoStartNextPowerIrp(0);
    call {:si_unique_call 151} sdv_IoSkipCurrentIrpStackLocation(PIrp_5);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    havoc vslice_dummy_var_467;
    call {:si_unique_call 152} Tmp_59 := SerialPoCallDriver(pDevExt_6, vslice_dummy_var_467, PIrp_5);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    call {:si_unique_call 153} SetDeviceIsOpened(pDevExt_6, 0, 0);
    goto L47;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    goto L20;
}



procedure {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_4: int)
{
  var {:pointer} pDevState_1: int;
  var {:pointer} Tmp_63: int;
  var {:pointer} Tmp_64: int;
  var {:scalar} S: int;
  var {:pointer} Tmp_76: int;
  var {:dopa} {:scalar} divisor: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} PDevExt_4: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;

  anon0:
    call {:si_unique_call 154} S := __HAVOC_malloc(8);
    call {:si_unique_call 155} divisor := __HAVOC_malloc(4);
    call {:si_unique_call 156} vslice_dummy_var_39 := __HAVOC_malloc(4);
    PDevExt_4 := actual_PDevExt_4;
    call {:si_unique_call 157} Tmp_63 := __HAVOC_malloc(128);
    call {:si_unique_call 158} Tmp_76 := __HAVOC_malloc(72);
    call {:si_unique_call 159} Tmp_82 := __HAVOC_malloc(52);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    pDevState_1 := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_4);
    Tmp_63 := strConst__li2bpl23;
    call {:si_unique_call 160} vslice_dummy_var_42 := SerialDbgPrintEx(11, Tmp_63);
    Tmp_82 := strConst__li2bpl21;
    call {:si_unique_call 161} vslice_dummy_var_43 := SerialDbgPrintEx(11, Tmp_82);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc vslice_dummy_var_468;
    havoc vslice_dummy_var_469;
    call {:si_unique_call 162} vslice_dummy_var_40 := SerialGetDivisorFromBaud(vslice_dummy_var_468, vslice_dummy_var_469, divisor);
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} divisor != 0;
    assume divisor > 0;
    call {:si_unique_call 163} vslice_dummy_var_44 := SerialSetBaud(S);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 164} vslice_dummy_var_45 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;

  L45:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L46;

  L46:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 165} vslice_dummy_var_46 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 166} vslice_dummy_var_47 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    call {:si_unique_call 167} vslice_dummy_var_48 := corral_nondet();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_76 := strConst__li2bpl22;
    call {:si_unique_call 168} vslice_dummy_var_49 := SerialDbgPrintEx(12, Tmp_76);
    call {:si_unique_call 169} SetDeviceIsOpened(PDevExt_4, 1, 0);
    assume {:nonnull} pDevState_1 != 0;
    assume pDevState_1 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon13_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 170} vslice_dummy_var_41 := corral_nondet();
    goto L46;

  anon14_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc Tmp_64;
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    goto L46;

  anon12_Then:
    goto L46;

  anon11_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L45;
}



procedure {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject: int, actual_Irp: int)
{
  var {:pointer} Tmp_86: int;
  var {:pointer} Extension_1: int;
  var {:pointer} Tmp_89: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 171} vslice_dummy_var_50 := __HAVOC_malloc(4);
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 172} Tmp_86 := __HAVOC_malloc(108);
    call {:si_unique_call 173} Tmp_89 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc Extension_1;
    Tmp_89 := strConst__li2bpl25;
    call {:si_unique_call 174} vslice_dummy_var_51 := SerialDbgPrintEx(6, Tmp_89);
    Tmp_86 := strConst__li2bpl24;
    call {:si_unique_call 175} vslice_dummy_var_52 := SerialDbgPrintEx(7, Tmp_86);
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    call {:si_unique_call 176} SerialTryToCompleteCurrent#1(Extension_1, li2bplFunctionConstant621, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp)], -1073741536, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_1), 0, 0, 0, 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartMask"} SerialStartMask(actual_Extension_2: int) returns (Tmp_90: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartMask"} SerialStartMask(actual_Extension_2: int) returns (Tmp_90: int)
{
  var {:pointer} Tmp_91: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:pointer} Tmp_92: int;
  var {:pointer} Tmp_93: int;
  var {:scalar} FirstStatus: int;
  var {:pointer} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} Tmp_100: int;
  var {:pointer} Tmp_101: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} Tmp_103: int;
  var {:pointer} Tmp_104: int;
  var {:pointer} Tmp_105: int;
  var {:pointer} IrpSp: int;
  var {:scalar} OldIrql: int;
  var {:pointer} Tmp_106: int;
  var {:pointer} NewIrp: int;
  var {:scalar} s_p_e_c_i_a_l_2: int;
  var {:pointer} sdv_82: int;
  var {:pointer} Tmp_107: int;
  var {:pointer} sdv_85: int;
  var {:pointer} Tmp_108: int;
  var {:pointer} Tmp_109: int;
  var {:pointer} Extension_2: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;
  var vslice_dummy_var_473: int;

  anon0:
    call {:si_unique_call 177} NewIrp := __HAVOC_malloc(4);
    Extension_2 := actual_Extension_2;
    call {:si_unique_call 178} Tmp_91 := __HAVOC_malloc(368);
    call {:si_unique_call 179} Tmp_92 := __HAVOC_malloc(148);
    call {:si_unique_call 180} Tmp_93 := __HAVOC_malloc(288);
    call {:si_unique_call 181} Tmp_94 := __HAVOC_malloc(80);
    call {:si_unique_call 182} Tmp_95 := __HAVOC_malloc(120);
    call {:si_unique_call 183} Tmp_96 := __HAVOC_malloc(368);
    call {:si_unique_call 184} Tmp_97 := __HAVOC_malloc(288);
    call {:si_unique_call 185} Tmp_98 := __HAVOC_malloc(368);
    call {:si_unique_call 186} Tmp_100 := __HAVOC_malloc(128);
    call {:si_unique_call 187} Tmp_102 := __HAVOC_malloc(288);
    call {:si_unique_call 188} Tmp_103 := __HAVOC_malloc(288);
    call {:si_unique_call 189} Tmp_104 := __HAVOC_malloc(160);
    call {:si_unique_call 190} Tmp_105 := __HAVOC_malloc(368);
    call {:si_unique_call 191} Tmp_108 := __HAVOC_malloc(284);
    SetFirstStatus := 0;
    Tmp_94 := strConst__li2bpl33;
    call {:si_unique_call 192} vslice_dummy_var_54 := SerialDbgPrintEx(6, Tmp_94);
    goto L11;

  L11:
    call {:si_unique_call 193} Tmp_91, s_p_e_c_i_a_l_1, Tmp_92, Tmp_93, FirstStatus, Tmp_95, SetFirstStatus, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, Tmp_102, Tmp_103, Tmp_104, Tmp_105, IrpSp, OldIrql, Tmp_106, s_p_e_c_i_a_l_2, sdv_82, Tmp_107, sdv_85, Tmp_108, Tmp_109, vslice_dummy_var_53, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69 := SerialStartMask_loop_L11(Tmp_91, s_p_e_c_i_a_l_1, Tmp_92, Tmp_93, FirstStatus, Tmp_95, SetFirstStatus, Tmp_96, Tmp_97, Tmp_98, Tmp_99, Tmp_100, Tmp_101, Tmp_102, Tmp_103, Tmp_104, Tmp_105, IrpSp, OldIrql, Tmp_106, NewIrp, s_p_e_c_i_a_l_2, sdv_82, Tmp_107, sdv_85, Tmp_108, Tmp_109, Extension_2, vslice_dummy_var_53, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69);
    goto L11_last;

  L11_last:
    Tmp_100 := strConst__li2bpl26;
    call {:si_unique_call 219} vslice_dummy_var_55 := SerialDbgPrintEx(7, Tmp_100);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_473;
    call {:si_unique_call 220} IrpSp := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_473);
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_95 := strConst__li2bpl27;
    call {:si_unique_call 194} vslice_dummy_var_56 := SerialDbgPrintEx(7, Tmp_95);
    call {:si_unique_call 195} vslice_dummy_var_53 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_106;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_106))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 196} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    Tmp_91 := strConst__li2bpl29;
    call {:si_unique_call 197} vslice_dummy_var_57 := SerialDbgPrintEx(7, Tmp_91);
    goto L37;

  L37:
    assume {:nonnull} NewIrp != 0;
    assume NewIrp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_90 := FirstStatus;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_103 := strConst__li2bpl28;
    call {:si_unique_call 198} vslice_dummy_var_58 := SerialDbgPrintEx(7, Tmp_103);
    FirstStatus := 0;
    SetFirstStatus := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 199} Tmp_101 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    Mem_T.INT4[Tmp_101] := OldIrql;
    call {:si_unique_call 200} IoAcquireCancelSpinLock(Tmp_101);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    OldIrql := Mem_T.INT4[Tmp_101];
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_99;
    assume {:nonnull} Tmp_99 != 0;
    assume Tmp_99 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    Tmp_104 := strConst__li2bpl32;
    call {:si_unique_call 201} vslice_dummy_var_62 := SerialDbgPrintEx(7, Tmp_104);
    call {:si_unique_call 202} IoReleaseCancelSpinLock(OldIrql);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_107;
    assume {:nonnull} Tmp_107 != 0;
    assume Tmp_107 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_107))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 203} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    Tmp_105 := strConst__li2bpl29;
    call {:si_unique_call 204} vslice_dummy_var_63 := SerialDbgPrintEx(7, Tmp_105);
    goto L37;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_102 := strConst__li2bpl28;
    call {:si_unique_call 205} vslice_dummy_var_64 := SerialDbgPrintEx(7, Tmp_102);
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L64;

  anon36_Then:
    Tmp_92 := strConst__li2bpl31;
    call {:si_unique_call 206} vslice_dummy_var_65 := SerialDbgPrintEx(7, Tmp_92);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_470;
    call {:si_unique_call 207} sdv_82 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_470);
    assume {:nonnull} sdv_82 != 0;
    assume sdv_82 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_471;
    call {:si_unique_call 208} vslice_dummy_var_66 := sdv_IoSetCancelRoutine(vslice_dummy_var_471, li2bplFunctionConstant619);
    s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_472;
    call {:si_unique_call 209} sdv_85 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_472);
    assume {:nonnull} sdv_85 != 0;
    assume sdv_85 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_85)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_1], s_p_e_c_i_a_l_2);
    call {:si_unique_call 210} vslice_dummy_var_67 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 211} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 0, Extension_2, OldIrql);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    Tmp_96 := strConst__li2bpl29;
    call {:si_unique_call 212} vslice_dummy_var_68 := SerialDbgPrintEx(7, Tmp_96);
    goto L37;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_97 := strConst__li2bpl28;
    call {:si_unique_call 213} vslice_dummy_var_69 := SerialDbgPrintEx(7, Tmp_97);
    FirstStatus := 259;
    SetFirstStatus := 1;
    call {:si_unique_call 214} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    goto L41;

  L41:
    Tmp_108 := strConst__li2bpl30;
    call {:si_unique_call 215} vslice_dummy_var_59 := SerialDbgPrintEx(7, Tmp_108);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_109;
    assume {:nonnull} Tmp_109 != 0;
    assume Tmp_109 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_109))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 216} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_2), NewIrp, 1, Extension_2);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    Tmp_98 := strConst__li2bpl29;
    call {:si_unique_call 217} vslice_dummy_var_60 := SerialDbgPrintEx(7, Tmp_98);
    goto L37;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus == 0;
    Tmp_93 := strConst__li2bpl28;
    call {:si_unique_call 218} vslice_dummy_var_61 := SerialDbgPrintEx(7, Tmp_93);
    FirstStatus := -1073741811;
    SetFirstStatus := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int)
{
  var {:pointer} Tmp_111: int;
  var {:scalar} OldIrql_1: int;
  var {:pointer} Tmp_112: int;
  var {:pointer} Extension_3: int;
  var {:pointer} Tmp_113: int;
  var {:pointer} Tmp_114: int;
  var {:pointer} Tmp_115: int;
  var {:pointer} Dpc_1: int;
  var {:pointer} DeferredContext_1: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 221} vslice_dummy_var_70 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredContext_1 := actual_DeferredContext_1;
    call {:si_unique_call 222} Tmp_112 := __HAVOC_malloc(92);
    call {:si_unique_call 223} Tmp_113 := __HAVOC_malloc(84);
    call {:si_unique_call 224} Tmp_114 := __HAVOC_malloc(100);
    call {:si_unique_call 225} Tmp_115 := __HAVOC_malloc(112);
    Extension_3 := DeferredContext_1;
    Tmp_114 := strConst__li2bpl37;
    call {:si_unique_call 226} vslice_dummy_var_71 := SerialDbgPrintEx(2, Tmp_114);
    Tmp_112 := strConst__li2bpl34;
    call {:si_unique_call 227} vslice_dummy_var_72 := SerialDbgPrintEx(6, Tmp_112);
    call {:si_unique_call 228} Tmp_111 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    Mem_T.INT4[Tmp_111] := OldIrql_1;
    call {:si_unique_call 229} IoAcquireCancelSpinLock(Tmp_111);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    OldIrql_1 := Mem_T.INT4[Tmp_111];
    Tmp_115 := strConst__li2bpl35;
    call {:si_unique_call 230} vslice_dummy_var_73 := SerialDbgPrintEx(7, Tmp_115);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    call {:si_unique_call 231} SerialTryToCompleteCurrent#1(Extension_3, 0, OldIrql_1, 0, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, 0, 0, 0, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 232} SerialDpcEpilogue(Extension_3, Dpc_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_113 := strConst__li2bpl36;
    call {:si_unique_call 233} vslice_dummy_var_74 := SerialDbgPrintEx(2, Tmp_113);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 234} vslice_dummy_var_75 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int)
{
  var {:pointer} Tmp_118: int;
  var {:pointer} Tmp_119: int;
  var {:scalar} OldIrql_2: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Extension_4: int;
  var {:pointer} Dpc_2: int;
  var {:pointer} DeferredContext_2: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 235} vslice_dummy_var_76 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeferredContext_2 := actual_DeferredContext_2;
    call {:si_unique_call 236} Tmp_118 := __HAVOC_malloc(104);
    call {:si_unique_call 237} Tmp_120 := __HAVOC_malloc(88);
    Extension_4 := DeferredContext_2;
    Tmp_118 := strConst__li2bpl39;
    call {:si_unique_call 238} vslice_dummy_var_77 := SerialDbgPrintEx(2, Tmp_118);
    call {:si_unique_call 239} Tmp_119 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    Mem_T.INT4[Tmp_119] := OldIrql_2;
    call {:si_unique_call 240} IoAcquireCancelSpinLock(Tmp_119);
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_119];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 241} SerialTryToCompleteCurrent#1(Extension_4, 0, OldIrql_2, 0, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_4), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_4), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_4), li2bplFunctionConstant569, li2bplFunctionConstant573, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 242} SerialDpcEpilogue(Extension_4, Dpc_2);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_120 := strConst__li2bpl38;
    call {:si_unique_call 243} vslice_dummy_var_78 := SerialDbgPrintEx(2, Tmp_120);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_79: int;

  anon0:
    call {:si_unique_call 244} vslice_dummy_var_79 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_124: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_124: int)
{
  var {:pointer} Tmp_126: int;
  var {:pointer} Tmp_127: int;
  var {:scalar} sdv_95: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} sdv_97: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} Extension_5: int;
  var {:pointer} Tmp_131: int;
  var {:pointer} Tmp_132: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_133: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 245} Tmp_126 := __HAVOC_malloc(72);
    call {:si_unique_call 246} Tmp_127 := __HAVOC_malloc(84);
    call {:si_unique_call 247} Tmp_128 := __HAVOC_malloc(72);
    call {:si_unique_call 248} Tmp_129 := __HAVOC_malloc(84);
    call {:si_unique_call 249} Tmp_130 := __HAVOC_malloc(96);
    call {:si_unique_call 250} Tmp_131 := __HAVOC_malloc(84);
    call {:si_unique_call 251} Tmp_132 := __HAVOC_malloc(84);
    call {:si_unique_call 252} Tmp_133 := __HAVOC_malloc(88);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc Extension_5;
    Tmp_133 := strConst__li2bpl45;
    call {:si_unique_call 253} vslice_dummy_var_80 := SerialDbgPrintEx(2, Tmp_133);
    call {:si_unique_call 254} status_7 := SerialIRPPrologue(Irp_1, Extension_5);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_7 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_7 != 259;
    Tmp_126 := strConst__li2bpl2;
    call {:si_unique_call 255} vslice_dummy_var_81 := SerialDbgPrintEx(9, Tmp_126);
    call {:si_unique_call 256} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 257} SerialIRPEpilogue(Extension_5);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L18;

  L18:
    Tmp_131 := strConst__li2bpl41;
    call {:si_unique_call 258} vslice_dummy_var_82 := SerialDbgPrintEx(2, Tmp_131);
    Tmp_124 := status_7;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} status_7 == 259;
    goto L18;

  anon17_Then:
    assume {:partition} status_7 == 0;
    Tmp_130 := strConst__li2bpl40;
    call {:si_unique_call 259} vslice_dummy_var_83 := SerialDbgPrintEx(9, Tmp_130);
    call {:si_unique_call 260} sdv_95 := SerialCompleteIfError(DeviceObject_1, Irp_1);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_95 != 0;
    Tmp_132 := strConst__li2bpl42;
    call {:si_unique_call 261} vslice_dummy_var_84 := SerialDbgPrintEx(2, Tmp_132);
    Tmp_124 := -1073741536;
    goto L1;

  anon19_Then:
    assume {:partition} sdv_95 == 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 262} sdv_97 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_97 != 0;
    assume sdv_97 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 263} status_7 := SerialStartOrQueue(Extension_5, Irp_1, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_5), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_5), li2bplFunctionConstant569);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    Tmp_129 := strConst__li2bpl43;
    call {:si_unique_call 264} vslice_dummy_var_85 := SerialDbgPrintEx(2, Tmp_129);
    Tmp_124 := status_7;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_1))] := 0;
    Tmp_128 := strConst__li2bpl2;
    call {:si_unique_call 265} vslice_dummy_var_86 := SerialDbgPrintEx(9, Tmp_128);
    call {:si_unique_call 266} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 267} SerialIRPEpilogue(Extension_5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    Tmp_127 := strConst__li2bpl44;
    call {:si_unique_call 268} vslice_dummy_var_87 := SerialDbgPrintEx(2, Tmp_127);
    Tmp_124 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_2: int, actual_Irp_2: int)
{
  var {:pointer} Extension_6: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 269} vslice_dummy_var_88 := __HAVOC_malloc(4);
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc Extension_6;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    call {:si_unique_call 270} SerialTryToCompleteCurrent#1(Extension_6, li2bplFunctionConstant570, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_2)], -1073741536, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_6), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_6), 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int)
{
  var {:pointer} Tmp_136: int;
  var {:scalar} OldIrql_3: int;
  var {:pointer} Extension_7: int;
  var {:pointer} Tmp_137: int;
  var {:pointer} Tmp_138: int;
  var {:pointer} Dpc_3: int;
  var {:pointer} DeferredContext_3: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;

  anon0:
    call {:si_unique_call 271} vslice_dummy_var_89 := __HAVOC_malloc(4);
    Dpc_3 := actual_Dpc_3;
    DeferredContext_3 := actual_DeferredContext_3;
    call {:si_unique_call 272} Tmp_136 := __HAVOC_malloc(84);
    call {:si_unique_call 273} Tmp_137 := __HAVOC_malloc(100);
    Extension_7 := DeferredContext_3;
    Tmp_137 := strConst__li2bpl47;
    call {:si_unique_call 274} vslice_dummy_var_90 := SerialDbgPrintEx(2, Tmp_137);
    call {:si_unique_call 275} Tmp_138 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_138 != 0;
    assume Tmp_138 > 0;
    Mem_T.INT4[Tmp_138] := OldIrql_3;
    call {:si_unique_call 276} IoAcquireCancelSpinLock(Tmp_138);
    assume {:nonnull} Tmp_138 != 0;
    assume Tmp_138 > 0;
    OldIrql_3 := Mem_T.INT4[Tmp_138];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 277} SerialTryToCompleteCurrent#1(Extension_7, 0, OldIrql_3, 0, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_7), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_7), 0, 0, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 278} SerialDpcEpilogue(Extension_7, Dpc_3);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_136 := strConst__li2bpl46;
    call {:si_unique_call 279} vslice_dummy_var_91 := SerialDbgPrintEx(2, Tmp_136);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_8: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_8: int)
{
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:pointer} Tmp_140: int;
  var {:pointer} sdv_107: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} Irp_3: int;
  var {:scalar} OldIrql_5: int;
  var {:pointer} sdv_110: int;
  var {:pointer} sdv_112: int;
  var {:scalar} CompleteCurrent_1: int;
  var {:scalar} OldIrql_6: int;
  var {:pointer} Tmp_141: int;
  var {:scalar} s_p_e_c_i_a_l_4: int;
  var {:pointer} sdv_114: int;
  var {:pointer} sdv_115: int;
  var {:pointer} sdv_116: int;
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} delta: int;
  var {:pointer} Xc: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} Tmp_144: int;
  var {:pointer} CurrentOpIrp: int;
  var {:pointer} QueueToProcess: int;
  var {:pointer} NewIrp_1: int;
  var {:scalar} CompleteCurrent: int;
  var {:pointer} Extension_8: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_477: int;

  anon0:
    call {:si_unique_call 280} vslice_dummy_var_92 := __HAVOC_malloc(4);
    call {:si_unique_call 281} delta := __HAVOC_malloc(20);
    CurrentOpIrp := actual_CurrentOpIrp;
    QueueToProcess := actual_QueueToProcess;
    NewIrp_1 := actual_NewIrp_1;
    CompleteCurrent := actual_CompleteCurrent;
    Extension_8 := actual_Extension_8;
    call {:si_unique_call 282} Tmp_140 := __HAVOC_malloc(104);
    call {:si_unique_call 283} Tmp_141 := __HAVOC_malloc(84);
    CompleteCurrent_1 := CompleteCurrent;
    Tmp_140 := strConst__li2bpl49;
    call {:si_unique_call 284} vslice_dummy_var_95 := SerialDbgPrintEx(2, Tmp_140);
    goto L8;

  L8:
    call {:si_unique_call 285} s_p_e_c_i_a_l_3, sdv_107, Irp_3, OldIrql_5, sdv_110, sdv_112, OldIrql_6, s_p_e_c_i_a_l_4, sdv_114, sdv_115, sdv_116, s_p_e_c_i_a_l_5, Tmp_143, Xc, s_p_e_c_i_a_l_6, Tmp_144, CompleteCurrent, vslice_dummy_var_94, vslice_dummy_var_97, vslice_dummy_var_98 := SerialGetNextWrite_loop_L8(s_p_e_c_i_a_l_3, sdv_107, Irp_3, OldIrql_5, sdv_110, sdv_112, CompleteCurrent_1, OldIrql_6, s_p_e_c_i_a_l_4, sdv_114, sdv_115, sdv_116, s_p_e_c_i_a_l_5, Tmp_143, delta, Xc, s_p_e_c_i_a_l_6, Tmp_144, CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_8, vslice_dummy_var_94, vslice_dummy_var_97, vslice_dummy_var_98);
    goto L8_last;

  L8_last:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_477;
    call {:si_unique_call 306} sdv_112 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_477);
    assume {:nonnull} sdv_112 != 0;
    assume sdv_112 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 286} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.INT4[Tmp_144] := OldIrql_6;
    call {:si_unique_call 287} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    OldIrql_6 := Mem_T.INT4[Tmp_144];
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_474;
    call {:si_unique_call 288} sdv_116 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_474);
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} sdv_116 != 0;
    assume sdv_116 > 0;
    call {:si_unique_call 289} IoReleaseCancelSpinLock(OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 290} SerialGetNextIrp(CurrentOpIrp, QueueToProcess, NewIrp_1, CompleteCurrent, Extension_8);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 291} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.INT4[Tmp_144] := OldIrql_4;
    call {:si_unique_call 292} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_144];
    call {:si_unique_call 293} vslice_dummy_var_93 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 294} IoReleaseCancelSpinLock(OldIrql_4);
    goto L39;

  L39:
    Tmp_141 := strConst__li2bpl48;
    call {:si_unique_call 295} vslice_dummy_var_96 := SerialDbgPrintEx(2, Tmp_141);
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    havoc vslice_dummy_var_475;
    call {:si_unique_call 296} sdv_115 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_475);
    assume {:nonnull} sdv_115 != 0;
    assume sdv_115 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L39;

  anon19_Then:
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    havoc Tmp_143;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_143))] := 0;
    CompleteCurrent := CompleteCurrent_1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc vslice_dummy_var_476;
    call {:si_unique_call 297} sdv_114 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_476);
    assume {:nonnull} sdv_114 != 0;
    assume sdv_114 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 298} Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.INT4[Tmp_144] := OldIrql_5;
    call {:si_unique_call 299} IoAcquireCancelSpinLock(Tmp_144);
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    OldIrql_5 := Mem_T.INT4[Tmp_144];
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc Irp_3;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    havoc Xc;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 300} IoReleaseCancelSpinLock(OldIrql_5);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] == 0;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_3))] := -1073741536;
    goto L64;

  anon21_Then:
    call {:si_unique_call 301} vslice_dummy_var_94 := sdv_IoSetCancelRoutine(Irp_3, li2bplFunctionConstant575);
    s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 302} sdv_110 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_110 != 0;
    assume sdv_110 > 0;
    s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_110)));
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_3], s_p_e_c_i_a_l_4);
    CompleteCurrent := 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    call {:si_unique_call 303} vslice_dummy_var_97 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    assume {:nonnull} delta != 0;
    assume delta > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    call {:si_unique_call 304} vslice_dummy_var_98 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_8), delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_8), Extension_8);
    s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 305} sdv_107 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} sdv_107 != 0;
    assume sdv_107 > 0;
    s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_107)));
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_5], s_p_e_c_i_a_l_6);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    goto L26;
}



procedure {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_3: int, actual_Irp_4: int)
{
  var {:pointer} Extension_10: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_99: int;

  anon0:
    call {:si_unique_call 307} vslice_dummy_var_99 := __HAVOC_malloc(4);
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_4 := actual_Irp_4;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc Extension_10;
    assume {:nonnull} Extension_10 != 0;
    assume Extension_10 > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    call {:si_unique_call 308} SerialTryToCompleteCurrent#1(Extension_10, li2bplFunctionConstant578, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_4)], -1073741536, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_10), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_10), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_10), li2bplFunctionConstant569, li2bplFunctionConstant573, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_155: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClose"} SerialClose(actual_DeviceObject_4: int, actual_Irp_5: int) returns (Tmp_155: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:scalar} flushCount: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:scalar} sdv_132: int;
  var {:scalar} sdv_133: int;
  var {:scalar} charTime_1: int;
  var {:scalar} pendingDPCs: int;
  var {:pointer} Tmp_158: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:scalar} tenCharDelay: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} Tmp_166: int;
  var {:scalar} sdv_154: int;
  var {:scalar} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:scalar} sdv_157: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_170: int;
  var {:scalar} Tmp_171: int;
  var {:pointer} extension: int;
  var {:scalar} sdv: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_479: int;

  anon0:
    call {:si_unique_call 309} charTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 310} tenCharDelay := __HAVOC_malloc(20);
    call {:si_unique_call 311} sdv := __HAVOC_malloc(20);
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 312} Tmp_156 := __HAVOC_malloc(80);
    call {:si_unique_call 313} Tmp_157 := __HAVOC_malloc(72);
    call {:si_unique_call 314} Tmp_158 := __HAVOC_malloc(72);
    call {:si_unique_call 315} Tmp_159 := __HAVOC_malloc(124);
    call {:si_unique_call 316} Tmp_160 := __HAVOC_malloc(128);
    call {:si_unique_call 317} Tmp_163 := __HAVOC_malloc(96);
    call {:si_unique_call 318} Tmp_164 := __HAVOC_malloc(64);
    call {:si_unique_call 319} Tmp_166 := __HAVOC_malloc(72);
    call {:si_unique_call 320} Tmp_168 := __HAVOC_malloc(76);
    call {:si_unique_call 321} Tmp_170 := __HAVOC_malloc(92);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc extension;
    call {:si_unique_call 322} ExAcquireFastMutex(0);
    call {:si_unique_call 323} status_8 := SerialIRPPrologue(Irp_5, extension);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_8 != 0;
    Tmp_159 := strConst__li2bpl52;
    call {:si_unique_call 324} vslice_dummy_var_112 := SerialDbgPrintEx(3, Tmp_159);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} status_8 == -1073741738;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    call {:si_unique_call 325} sdv_ExFreePool(0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L28;

  L28:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    status_8 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))];
    goto L25;

  L25:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} status_8 != 259;
    Tmp_166 := strConst__li2bpl2;
    call {:si_unique_call 326} vslice_dummy_var_113 := SerialDbgPrintEx(9, Tmp_166);
    call {:si_unique_call 327} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 328} SerialIRPEpilogue(extension);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 329} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[Tmp_165] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    call {:si_unique_call 330} vslice_dummy_var_114 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] := Mem_T.INT4[Tmp_165];
    goto L34;

  L34:
    call {:si_unique_call 331} ExReleaseFastMutex(0);
    Tmp_155 := status_8;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:partition} status_8 == 259;
    goto L34;

  anon60_Then:
    goto L28;

  anon49_Then:
    assume {:partition} status_8 != -1073741738;
    goto L25;

  anon47_Then:
    assume {:partition} status_8 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 1 > Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    Tmp_160 := strConst__li2bpl53;
    call {:si_unique_call 332} vslice_dummy_var_115 := SerialDbgPrintEx(0, Tmp_160);
    Tmp_170 := strConst__li2bpl54;
    call {:si_unique_call 333} vslice_dummy_var_116 := SerialDbgPrintEx(0, Tmp_170);
    call {:si_unique_call 334} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := -1073741808;
    Tmp_157 := strConst__li2bpl2;
    call {:si_unique_call 335} vslice_dummy_var_117 := SerialDbgPrintEx(9, Tmp_157);
    call {:si_unique_call 336} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 337} SerialIRPEpilogue(extension);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    Tmp_155 := -1073741808;
    goto L1;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] >= 1;
    Tmp_163 := strConst__li2bpl40;
    call {:si_unique_call 338} vslice_dummy_var_118 := SerialDbgPrintEx(9, Tmp_163);
    Tmp_164 := strConst__li2bpl55;
    call {:si_unique_call 339} vslice_dummy_var_119 := SerialDbgPrintEx(6, Tmp_164);
    call {:si_unique_call 340} structPtr888sdv := SerialGetCharTime(extension);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    call {:si_unique_call 341} SetDeviceIsOpened(extension, 0, 0);
    call {:si_unique_call 342} vslice_dummy_var_100 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    flushCount := 320;
    goto L88;

  L88:
    call {:si_unique_call 343} flushCount, sdv_132, Tmp_167, vslice_dummy_var_101 := SerialClose_loop_L88(flushCount, sdv_132, Tmp_167, extension, vslice_dummy_var_101);
    goto L88_last;

  L88_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 344} sdv_132 := corral_nondet();
    Tmp_167 := BAND(sdv_132, BOR(32, 64));
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Tmp_167 != 96;
    call {:si_unique_call 345} vslice_dummy_var_101 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    assume false;
    return;

  anon63_Then:
    assume {:partition} Tmp_167 == 96;
    goto L89;

  L89:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} flushCount != 0;
    goto L104;

  L104:
    call {:si_unique_call 346} vslice_dummy_var_102 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L109;

  L109:
    call {:si_unique_call 347} sdv_154, vslice_dummy_var_103 := SerialClose_loop_L109(sdv_154, extension, vslice_dummy_var_103);
    goto L109_last;

  L109_last:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 376} sdv_154 := corral_nondet();
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(sdv_154, 32) != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    flushCount := 320;
    goto L122;

  L122:
    call {:si_unique_call 348} flushCount, sdv_133, Tmp_171, vslice_dummy_var_104 := SerialClose_loop_L122(flushCount, sdv_133, Tmp_171, extension, vslice_dummy_var_104);
    goto L122_last;

  L122_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 349} sdv_133 := corral_nondet();
    Tmp_171 := BAND(sdv_133, BOR(32, 64));
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Tmp_171 != 96;
    call {:si_unique_call 350} vslice_dummy_var_104 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    assume false;
    return;

  anon64_Then:
    assume {:partition} Tmp_171 == 96;
    goto L123;

  L123:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 351} SerialMarkHardwareBroken(extension);
    goto L108;

  L108:
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} tenCharDelay != 0;
    assume tenCharDelay > 0;
    call {:si_unique_call 352} vslice_dummy_var_120 := KeDelayExecutionThread(0, 1, 0);
    call {:si_unique_call 353} vslice_dummy_var_105 := SerialClrDTR(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L148;

  L148:
    call {:si_unique_call 354} vslice_dummy_var_107 := SerialClose_loop_L148(extension, vslice_dummy_var_107);
    goto L148_last;

  L148_last:
    call {:si_unique_call 377} vslice_dummy_var_107 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 355} vslice_dummy_var_108 := KeSynchronizeExecution(0, li2bplFunctionConstant842, 0);
    goto L145;

  L145:
    call {:si_unique_call 356} vslice_dummy_var_106 := SerialClrRTS(extension);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 357} sdv_ExFreePool(0);
    goto L160;

  L160:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    call {:si_unique_call 358} vslice_dummy_var_109 := IoCancelIrp(0);
    goto L166;

  L166:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto L173;

  L173:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_5))] := 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    Tmp_158 := strConst__li2bpl2;
    call {:si_unique_call 359} vslice_dummy_var_121 := SerialDbgPrintEx(9, Tmp_158);
    call {:si_unique_call 360} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 361} SerialIRPEpilogue(extension);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 362} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_478;
    Mem_T.INT4[Tmp_165] := vslice_dummy_var_478;
    call {:si_unique_call 363} sdv_157 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    pendingDPCs := sdv_157;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} pendingDPCs != 0;
    Tmp_156 := strConst__li2bpl57;
    call {:si_unique_call 364} vslice_dummy_var_122 := SerialDbgPrintEx(4, Tmp_156);
    call {:si_unique_call 365} vslice_dummy_var_111 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L189;

  L189:
    Tmp_168 := strConst__li2bpl56;
    call {:si_unique_call 366} vslice_dummy_var_123 := SerialDbgPrintEx(4, Tmp_168);
    call {:si_unique_call 367} ExReleaseFastMutex(0);
    call {:si_unique_call 368} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_479;
    Mem_T.INT4[Tmp_165] := vslice_dummy_var_479;
    call {:si_unique_call 369} vslice_dummy_var_124 := sdv_InterlockedIncrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 370} Tmp_165 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[Tmp_165] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)];
    call {:si_unique_call 371} vslice_dummy_var_125 := sdv_InterlockedDecrement(Tmp_165);
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension)] := Mem_T.INT4[Tmp_165];
    call {:si_unique_call 372} MmUnlockPagableImageSection(0);
    Tmp_155 := 0;
    goto L1;

  anon68_Then:
    assume {:partition} pendingDPCs == 0;
    goto L189;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    call {:si_unique_call 373} vslice_dummy_var_110 := SerialGotoPowerState(DeviceObject_4, extension, 4);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L173;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    goto L166;

  anon65_Then:
    goto L160;

  anon58_Then:
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    assume false;
    return;

  anon57_Then:
    goto L145;

  anon56_Then:
    assume {:partition} flushCount != 0;
    goto L108;

  anon55_Then:
    assume {:partition} flushCount == 0;
    goto L123;

  anon54_Then:
    assume {:partition} BAND(sdv_154, 32) == 0;
    call {:si_unique_call 374} vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    goto anon54_Then_dummy;

  anon54_Then_dummy:
    assume false;
    return;

  anon53_Then:
    goto L108;

  anon52_Then:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 375} SerialMarkHardwareBroken(extension);
    goto L104;

  anon51_Then:
    assume {:partition} flushCount == 0;
    goto L89;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_126: int;

  anon0:
    call {:si_unique_call 378} vslice_dummy_var_126 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_175: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_5: int, actual_Irp_6: int) returns (Tmp_175: int)
{
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} status_9: int;
  var {:pointer} extension_1: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_6: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 379} Tmp_177 := __HAVOC_malloc(72);
    call {:si_unique_call 380} Tmp_178 := __HAVOC_malloc(72);
    call {:si_unique_call 381} Tmp_179 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc extension_1;
    call {:si_unique_call 382} sdv_do_paged_code_check();
    call {:si_unique_call 383} status_9 := SerialIRPPrologue(Irp_6, extension_1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_9 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_9 == -1073741738;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    status_9 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))];
    goto L18;

  L18:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_9 != 259;
    Tmp_177 := strConst__li2bpl2;
    call {:si_unique_call 384} vslice_dummy_var_127 := SerialDbgPrintEx(9, Tmp_177);
    call {:si_unique_call 385} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 386} SerialIRPEpilogue(extension_1);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  L21:
    Tmp_175 := status_9;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} status_9 == 259;
    goto L21;

  anon14_Then:
    assume {:partition} status_9 != -1073741738;
    goto L18;

  anon13_Then:
    assume {:partition} status_9 == 0;
    Tmp_179 := strConst__li2bpl40;
    call {:si_unique_call 387} vslice_dummy_var_128 := SerialDbgPrintEx(9, Tmp_179);
    call {:si_unique_call 388} SerialKillPendingIrps(DeviceObject_5);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Tmp_178 := strConst__li2bpl2;
    call {:si_unique_call 389} vslice_dummy_var_129 := SerialDbgPrintEx(9, Tmp_178);
    call {:si_unique_call 390} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 391} SerialIRPEpilogue(extension_1);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    Tmp_175 := 0;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_180: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_6: int, actual_Irp_7: int) returns (Tmp_180: int)
{
  var {:scalar} localStatus: int;
  var {:pointer} sdv_165: int;
  var {:pointer} sdv_167: int;
  var {:pointer} Tmp_181: int;
  var {:pointer} Tmp_182: int;
  var {:pointer} sdv_175: int;
  var {:scalar} sdv_176: int;
  var {:scalar} sdv_177: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} Tmp_184: int;
  var {:pointer} sdv_182: int;
  var {:pointer} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:pointer} extension_2: int;
  var {:pointer} Tmp_188: int;
  var {:scalar} checkOpen: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_482: int;

  anon0:
    call {:si_unique_call 392} checkOpen := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 393} Tmp_181 := __HAVOC_malloc(72);
    call {:si_unique_call 394} Tmp_183 := __HAVOC_malloc(72);
    call {:si_unique_call 395} Tmp_184 := __HAVOC_malloc(96);
    call {:si_unique_call 396} Tmp_185 := __HAVOC_malloc(72);
    call {:si_unique_call 397} Tmp_186 := __HAVOC_malloc(72);
    call {:si_unique_call 398} Tmp_187 := __HAVOC_malloc(84);
    call {:si_unique_call 399} Tmp_188 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc extension_2;
    call {:si_unique_call 400} sdv_do_paged_code_check();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741670;
    call {:si_unique_call 401} sdv_IoCompleteRequest(0, 0);
    Tmp_180 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon43_Then:
    call {:si_unique_call 402} ExAcquireFastMutex(0);
    call {:si_unique_call 403} localStatus := SerialIRPPrologue(Irp_7, extension_2);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} localStatus != 0;
    call {:si_unique_call 404} ExReleaseFastMutex(0);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} localStatus != 259;
    Tmp_185 := strConst__li2bpl2;
    call {:si_unique_call 405} vslice_dummy_var_133 := SerialDbgPrintEx(9, Tmp_185);
    call {:si_unique_call 406} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 407} SerialIRPEpilogue(extension_2);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    Tmp_180 := localStatus;
    goto L1;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} localStatus == 259;
    goto L32;

  anon44_Then:
    assume {:partition} localStatus == 0;
    call {:si_unique_call 408} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_182] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 409} sdv_176 := sdv_InterlockedIncrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_182];
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_176 != 1;
    call {:si_unique_call 410} ExReleaseFastMutex(0);
    call {:si_unique_call 411} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_182] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 412} vslice_dummy_var_134 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_182];
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741790;
    Tmp_183 := strConst__li2bpl2;
    call {:si_unique_call 413} vslice_dummy_var_135 := SerialDbgPrintEx(9, Tmp_183);
    call {:si_unique_call 414} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 415} SerialIRPEpilogue(extension_2);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    Tmp_180 := -1073741790;
    goto L1;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} sdv_176 == 1;
    Tmp_184 := strConst__li2bpl40;
    call {:si_unique_call 416} vslice_dummy_var_136 := SerialDbgPrintEx(9, Tmp_184);
    Tmp_187 := strConst__li2bpl58;
    call {:si_unique_call 417} vslice_dummy_var_137 := SerialDbgPrintEx(6, Tmp_187);
    call {:si_unique_call 418} sdv_175 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} sdv_175 != 0;
    assume sdv_175 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 419} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741565;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 420} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_182] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 421} vslice_dummy_var_138 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_182];
    Tmp_188 := strConst__li2bpl2;
    call {:si_unique_call 422} vslice_dummy_var_139 := SerialDbgPrintEx(9, Tmp_188);
    call {:si_unique_call 423} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 424} SerialIRPEpilogue(extension_2);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    Tmp_180 := -1073741565;
    goto L1;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 425} sdv_177 := corral_nondet();
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_177 != 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_177 != 1;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_177 == 2;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_480;
    call {:si_unique_call 426} sdv_165 := ExAllocatePoolWithTag(512, vslice_dummy_var_480, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L96;

  L96:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_481;
    call {:si_unique_call 427} sdv_167 := ExAllocatePoolWithTag(512, vslice_dummy_var_481, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto L95;

  L95:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    havoc vslice_dummy_var_482;
    call {:si_unique_call 428} sdv_182 := ExAllocatePoolWithTag(512, vslice_dummy_var_482, -666022077);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L94;

  L94:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 429} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 430} vslice_dummy_var_130 := SerialGotoPowerState(DeviceObject_6, extension_2, 1);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 431} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 432} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 433} boogieTmp := corral_nondet();
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 434} vslice_dummy_var_140 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 435} vslice_dummy_var_131 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    goto L151;

  L151:
    call {:si_unique_call 436} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    localStatus := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))];
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} localStatus >= 0;
    goto L158;

  L158:
    Tmp_181 := strConst__li2bpl2;
    call {:si_unique_call 437} vslice_dummy_var_141 := SerialDbgPrintEx(9, Tmp_181);
    call {:si_unique_call 438} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 439} SerialIRPEpilogue(extension_2);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    Tmp_180 := localStatus;
    goto L1;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:partition} 0 > localStatus;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    call {:si_unique_call 440} sdv_ExFreePool(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto L168;

  L168:
    call {:si_unique_call 441} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_182] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 442} vslice_dummy_var_142 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_182];
    goto L158;

  anon51_Then:
    goto L168;

  anon58_Then:
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 443} vslice_dummy_var_132 := KeSynchronizeExecution(0, li2bplFunctionConstant845, 0);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    goto L151;

  anon50_Then:
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    call {:si_unique_call 444} vslice_dummy_var_143 := KeSynchronizeExecution(0, li2bplFunctionConstant846, 0);
    goto L151;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    call {:si_unique_call 445} ExReleaseFastMutex(0);
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := -1073741670;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 446} Tmp_182 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[Tmp_182] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)];
    call {:si_unique_call 447} vslice_dummy_var_144 := sdv_InterlockedDecrement(Tmp_182);
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_2)] := Mem_T.INT4[Tmp_182];
    Tmp_186 := strConst__li2bpl2;
    call {:si_unique_call 448} vslice_dummy_var_145 := SerialDbgPrintEx(9, Tmp_186);
    call {:si_unique_call 449} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 450} SerialIRPEpilogue(extension_2);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} yogi_error != 1;
    Tmp_180 := -1073741670;
    goto L1;

  anon61_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    goto L94;

  anon63_Then:
    goto L94;

  anon52_Then:
    assume {:partition} sdv_177 != 2;
    goto L94;

  anon53_Then:
    assume {:partition} sdv_177 == 1;
    goto L96;

  anon48_Then:
    assume {:partition} sdv_177 == 0;
    goto L95;
}



procedure {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_11: int) returns (SD1_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_11: int) returns (SD1_1: int)
{
  var {:scalar} Tmp_189: int;
  var {:scalar} dataSize: int;
  var {:scalar} charTime_2: int;
  var {:scalar} Tmp_190: int;
  var {:scalar} Tmp_1: int;
  var {:scalar} bitTime: int;
  var {:scalar} paritySize: int;
  var {:scalar} Tmp_191: int;
  var {:scalar} tmp: int;
  var {:scalar} stopSize: int;
  var {:pointer} Extension_11: int;

  anon0:
    call {:si_unique_call 451} Tmp_1 := __HAVOC_malloc(20);
    call {:si_unique_call 452} tmp := __HAVOC_malloc(20);
    Extension_11 := actual_Extension_11;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_191;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_191 == 1;
    dataSize := 6;
    goto L15;

  L15:
    paritySize := 1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L18;

  L18:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    stopSize := 2;
    goto L21;

  L21:
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc bitTime;
    charTime_2 := bitTime + (dataSize + paritySize + stopSize) * bitTime;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    SD1_1 := Tmp_1;
    return;

  anon14_Then:
    stopSize := 1;
    goto L21;

  anon16_Then:
    paritySize := 0;
    goto L18;

  anon15_Then:
    assume {:partition} Tmp_191 != 1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_190;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_190 == 2;
    dataSize := 7;
    goto L15;

  anon17_Then:
    assume {:partition} Tmp_190 != 2;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    havoc Tmp_189;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_189 == 3;
    dataSize := 8;
    goto L15;

  anon18_Then:
    assume {:partition} Tmp_189 != 3;
    goto L15;

  anon13_Then:
    dataSize := 5;
    goto L15;
}



procedure {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_4: int)
{
  var {:scalar} sdv_188: int;
  var {:pointer} extension_3: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 453} vslice_dummy_var_146 := __HAVOC_malloc(4);
    Context_4 := actual_Context_4;
    extension_3 := Context_4;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    call {:si_unique_call 454} sdv_188 := corral_nondet();
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_5: int, actual_PDrainTime: int)
{
  var {:scalar} Tmp_199: int;
  var {:scalar} sdv_189: int;
  var {:pointer} PDevExt_5: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;

  anon0:
    call {:si_unique_call 455} vslice_dummy_var_147 := __HAVOC_malloc(4);
    PDevExt_5 := actual_PDevExt_5;
    call {:si_unique_call 456} sdv_do_paged_code_check();
    goto L6;

  L6:
    call {:si_unique_call 457} Tmp_199, sdv_189, vslice_dummy_var_148 := SerialDrainUART_loop_L6(Tmp_199, sdv_189, PDevExt_5, vslice_dummy_var_148);
    goto L6_last;

  L6_last:
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    call {:si_unique_call 459} sdv_189 := corral_nondet();
    Tmp_199 := BAND(sdv_189, BOR(32, 64));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Tmp_199 != 96;
    call {:si_unique_call 458} vslice_dummy_var_148 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Tmp_199 == 96;
    return;
}



procedure {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_12: int) returns (Tmp_203: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_12: int) returns (Tmp_203: int)
{
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:scalar} Mask: int;
  var {:pointer} Tmp_206: int;
  var {:scalar} OldIrql_8: int;
  var {:pointer} NewIrp_3: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Extension_12: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;

  anon0:
    call {:si_unique_call 460} NewIrp_3 := __HAVOC_malloc(4);
    Extension_12 := actual_Extension_12;
    goto L5;

  L5:
    call {:si_unique_call 461} Tmp_204, Tmp_205, Mask, Tmp_206, OldIrql_8, Tmp_207, Tmp_208, vslice_dummy_var_149 := SerialStartPurge_loop_L5(Tmp_204, Tmp_205, Mask, Tmp_206, OldIrql_8, NewIrp_3, Tmp_207, Tmp_208, Extension_12, vslice_dummy_var_149);
    goto L5_last;

  L5_last:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    Mask := Mem_T.INT4[Tmp_208];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(Mask, 1) != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_483;
    call {:si_unique_call 462} SerialKillAllReadsOrWrites(vslice_dummy_var_483, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_484;
    call {:si_unique_call 463} SerialKillAllReadsOrWrites(vslice_dummy_var_484, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mask, 2) != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc vslice_dummy_var_485;
    call {:si_unique_call 464} SerialKillAllReadsOrWrites(vslice_dummy_var_485, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_12));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mask, 8) != 0;
    call {:si_unique_call 465} Tmp_205 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    Mem_T.INT4[Tmp_205] := OldIrql_8;
    call {:si_unique_call 466} sdv_KeAcquireSpinLock(0, Tmp_205);
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    OldIrql_8 := Mem_T.INT4[Tmp_205];
    call {:si_unique_call 467} vslice_dummy_var_149 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 468} sdv_KeReleaseSpinLock(0, OldIrql_8);
    goto L18;

  L18:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_204;
    assume {:nonnull} Tmp_204 != 0;
    assume Tmp_204 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_204))] := 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    havoc Tmp_207;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 469} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_12), PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_12), NewIrp_3, 1, Extension_12);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_203 := 0;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} BAND(Mask, 8) == 0;
    goto L18;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} BAND(Mask, 2) == 0;
    goto L14;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} BAND(Mask, 1) == 0;
    goto L7;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_150: int;

  anon0:
    call {:si_unique_call 470} vslice_dummy_var_150 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetPendingDpcEvent"} SerialSetPendingDpcEvent(actual_Dpc_4: int, actual_PDevExtIn: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPendingDpcEvent"} SerialSetPendingDpcEvent(actual_Dpc_4: int, actual_PDevExtIn: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int)
{
  var {:pointer} PDevExt_6: int;
  var {:pointer} PDevExtIn: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 471} vslice_dummy_var_151 := __HAVOC_malloc(4);
    PDevExtIn := actual_PDevExtIn;
    PDevExt_6 := PDevExtIn;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 472} vslice_dummy_var_152 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_6), 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_213: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_7: int, actual_Irp_8: int) returns (Tmp_213: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} Tmp_214: int;
  var {:scalar} status_10: int;
  var {:pointer} extension_4: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_153: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 473} Tmp_214 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc extension_4;
    status_10 := 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 474} irpSp := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L17;

  L17:
    status_10 := -1073741536;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_8))] := -1073741536;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    Tmp_214 := strConst__li2bpl2;
    call {:si_unique_call 475} vslice_dummy_var_153 := SerialDbgPrintEx(9, Tmp_214);
    call {:si_unique_call 476} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 477} SerialIRPEpilogue(extension_4);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L8;

  L8:
    Tmp_213 := status_10;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L17;

  anon13_Then:
    goto L8;

  anon11_Then:
    goto L8;

  anon14_Then:
    goto L8;
}



procedure {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_9: int, actual_PIrp_6: int)
{
  var {:pointer} Tmp_216: int;
  var {:pointer} pDevExt_7: int;
  var {:pointer} PDevObj_9: int;
  var {:pointer} PIrp_6: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 478} vslice_dummy_var_154 := __HAVOC_malloc(4);
    PDevObj_9 := actual_PDevObj_9;
    PIrp_6 := actual_PIrp_6;
    call {:si_unique_call 479} Tmp_216 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_9 != 0;
    assume PDevObj_9 > 0;
    havoc pDevExt_7;
    call {:si_unique_call 480} vslice_dummy_var_155 := sdv_IoGetCurrentIrpStackLocation(PIrp_6);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_6))] := -1073741536;
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 481} vslice_dummy_var_156 := sdv_RemoveEntryList(0);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 482} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(PIrp_6)]);
    Tmp_216 := strConst__li2bpl2;
    call {:si_unique_call 483} vslice_dummy_var_157 := SerialDbgPrintEx(9, Tmp_216);
    call {:si_unique_call 484} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 485} SerialIRPEpilogue(pDevExt_7);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int)
{
  var {:pointer} pDevExt_8: int;
  var {:pointer} PDeferredContext: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 486} vslice_dummy_var_158 := __HAVOC_malloc(4);
    PDeferredContext := actual_PDeferredContext;
    pDevExt_8 := PDeferredContext;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    call {:si_unique_call 487} vslice_dummy_var_159 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_8), 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_13: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_221: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_13: int, actual_Irp_9: int, actual_QueueToExamine: int, actual_CurrentOpIrp_1: int, actual_Starter: int) returns (Tmp_221: int)
{
  var {:pointer} irpSp_1: int;
  var {:pointer} Tmp_222: int;
  var {:pointer} sdv_199: int;
  var {:pointer} Tmp_223: int;
  var {:pointer} sdv_201: int;
  var {:pointer} sdv_203: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} sdv_204: int;
  var {:scalar} sdv_206: int;
  var {:pointer} sdv_208: int;
  var {:pointer} Extension_13: int;
  var {:pointer} Irp_9: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;

  anon0:
    Extension_13 := actual_Extension_13;
    Irp_9 := actual_Irp_9;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    Starter := actual_Starter;
    call {:si_unique_call 488} Tmp_223 := __HAVOC_malloc(72);
    call {:si_unique_call 489} Tmp_222 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    Mem_T.INT4[Tmp_222] := oldIrql_1;
    call {:si_unique_call 490} IoAcquireCancelSpinLock(Tmp_222);
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_222];
    call {:si_unique_call 491} sdv_199 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_199 != 0;
    assume sdv_199 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 492} sdv_204 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} sdv_204 != 0;
    assume sdv_204 > 0;
    goto L18;

  L18:
    call {:si_unique_call 493} sdv_206 := sdv_IsListEmpty(0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_206 != 0;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    call {:si_unique_call 494} IoReleaseCancelSpinLock(oldIrql_1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant1125;
    call {:si_unique_call 495} Tmp_221 := SerialStartFlush(Extension_13);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon48_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant617;
    call {:si_unique_call 496} Tmp_221 := SerialStartMask(Extension_13);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant805;
    call {:si_unique_call 497} Tmp_221 := SerialStartPurge(Extension_13);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant720;
    call {:si_unique_call 498} Tmp_221 := SerialStartRead(Extension_13);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant569;
    call {:si_unique_call 499} Tmp_221 := SerialStartWrite#1(Extension_13);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L22;

  L22:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    call {:si_unique_call 500} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    call {:si_unique_call 501} IoReleaseCancelSpinLock(oldIrql_1);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    call {:si_unique_call 502} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    goto L42;

  L42:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := -1073741536;
    Tmp_223 := strConst__li2bpl2;
    call {:si_unique_call 503} vslice_dummy_var_162 := SerialDbgPrintEx(9, Tmp_223);
    call {:si_unique_call 504} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 505} SerialIRPEpilogue(Extension_13);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} yogi_error != 1;
    Tmp_221 := -1073741536;
    goto L1;

  anon49_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    goto L42;

  anon39_Then:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := 259;
    call {:si_unique_call 506} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 507} vslice_dummy_var_160 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(Irp_9))));
    call {:si_unique_call 508} vslice_dummy_var_161 := sdv_IoSetCancelRoutine(Irp_9, li2bplFunctionConstant665);
    call {:si_unique_call 509} IoReleaseCancelSpinLock(oldIrql_1);
    Tmp_221 := 259;
    goto L1;

  anon38_Then:
    assume {:partition} sdv_206 == 0;
    goto L22;

  anon37_Then:
    call {:si_unique_call 510} sdv_203 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_203 != 0;
    assume sdv_203 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 511} sdv_201 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_201 != 0;
    assume sdv_201 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto L78;

  L78:
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    goto L18;

  anon44_Then:
    call {:si_unique_call 512} sdv_208 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_208 != 0;
    assume sdv_208 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto L78;

  anon45_Then:
    goto L18;

  anon43_Then:
    goto L18;
}



procedure {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_7: int, actual_PFlags: int, actual_Value: int, actual_Set: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_7: int, actual_PFlags: int, actual_Value: int, actual_Set: int)
{
  var {:pointer} Tmp_225: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} PFlags: int;
  var {:scalar} Value: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_163: int;

  anon0:
    call {:si_unique_call 513} vslice_dummy_var_163 := __HAVOC_malloc(4);
    PFlags := actual_PFlags;
    Value := actual_Value;
    Set := actual_Set;
    call {:si_unique_call 514} Tmp_225 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    Mem_T.INT4[Tmp_225] := oldIrql_2;
    call {:si_unique_call 515} sdv_KeAcquireSpinLock(0, Tmp_225);
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_225];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BOR(Mem_T.INT4[PFlags], Value);
    goto L10;

  L10:
    call {:si_unique_call 516} sdv_KeReleaseSpinLock(0, oldIrql_2);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BAND(Mem_T.INT4[PFlags], BNOT(Value));
    goto L10;
}



procedure {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_8: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_226: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_8: int, actual_PDevObj_10: int, actual_PIrp_7: int) returns (Tmp_226: int)
{
  var {:scalar} status_11: int;
  var {:pointer} PDevExt_8: int;
  var {:pointer} PIrp_7: int;

  anon0:
    PDevExt_8 := actual_PDevExt_8;
    PIrp_7 := actual_PIrp_7;
    call {:si_unique_call 517} status_11 := PoCallDriver(0, PIrp_7);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 518} SerialIRPEpilogue(PDevExt_8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_226 := status_11;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_9: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_9: int)
{
  var {:pointer} Tmp_229: int;
  var {:scalar} pendingCnt: int;
  var {:pointer} PDevExt_9: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_486: int;

  anon0:
    call {:si_unique_call 519} vslice_dummy_var_164 := __HAVOC_malloc(4);
    PDevExt_9 := actual_PDevExt_9;
    call {:si_unique_call 520} Tmp_229 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    havoc vslice_dummy_var_486;
    Mem_T.INT4[Tmp_229] := vslice_dummy_var_486;
    call {:si_unique_call 521} pendingCnt := sdv_InterlockedDecrement(Tmp_229);
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pendingCnt == 0;
    assume {:nonnull} PDevExt_9 != 0;
    assume PDevExt_9 > 0;
    call {:si_unique_call 522} vslice_dummy_var_165 := KeSetEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(PDevExt_9), 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} pendingCnt != 0;
    goto L1;
}



procedure {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_10: int)
{
  var {:scalar} Tmp_230: int;
  var {:scalar} Tmp_233: int;
  var {:scalar} Tmp_234: int;
  var {:pointer} PDevExt_10: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;

  anon0:
    call {:si_unique_call 523} Tmp_230 := __HAVOC_malloc(20);
    call {:si_unique_call 524} vslice_dummy_var_166 := __HAVOC_malloc(4);
    call {:si_unique_call 525} Tmp_233 := __HAVOC_malloc(20);
    PDevExt_10 := actual_PDevExt_10;
    call {:si_unique_call 526} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    call {:si_unique_call 527} SerialSetDeviceFlags(PDevExt_10, Flags__SERIAL_DEVICE_EXTENSION(PDevExt_10), 4, 1);
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    havoc Tmp_234;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_233 != 0;
    assume Tmp_233 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    assume {:nonnull} PDevExt_10 != 0;
    assume PDevExt_10 > 0;
    havoc vslice_dummy_var_487;
    havoc vslice_dummy_var_488;
    call {:si_unique_call 528} SerialLogError(vslice_dummy_var_487, 0, Tmp_230, Tmp_233, 0, 0, 0, 88, 0, -1073348563, Tmp_234, vslice_dummy_var_488, 0, 0);
    call {:si_unique_call 529} IoInvalidateDeviceState(0);
    return;
}



procedure {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_11: int)
{
  var {:pointer} currentLastIrp: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} Tmp_240: int;
  var {:scalar} sdv_217: int;
  var {:pointer} pDevExt_9: int;
  var {:pointer} sdv_218: int;
  var {:scalar} cancelRoutine: int;
  var {:pointer} PDevObj_11: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_489: int;

  anon0:
    call {:si_unique_call 530} vslice_dummy_var_167 := __HAVOC_malloc(4);
    PDevObj_11 := actual_PDevObj_11;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc pDevExt_9;
    call {:si_unique_call 531} Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    Mem_T.INT4[Tmp_240] := cancelIrql;
    call {:si_unique_call 532} IoAcquireCancelSpinLock(Tmp_240);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    cancelIrql := Mem_T.INT4[Tmp_240];
    goto L10;

  L10:
    call {:si_unique_call 533} currentLastIrp, cancelIrql, Tmp_240, sdv_217, sdv_218, cancelRoutine, vslice_dummy_var_168 := SerialKillAllStalled_loop_L10(currentLastIrp, cancelIrql, Tmp_240, sdv_217, pDevExt_9, sdv_218, cancelRoutine, PDevObj_11, vslice_dummy_var_168);
    goto L10_last;

  L10_last:
    call {:si_unique_call 545} sdv_217 := sdv_IsListEmpty(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_217 == 0;
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_489;
    call {:si_unique_call 534} sdv_218 := sdv_containing_record(vslice_dummy_var_489, 88);
    currentLastIrp := sdv_218;
    call {:si_unique_call 535} vslice_dummy_var_168 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    cancelRoutine := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)];
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(currentLastIrp)] := cancelIrql;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)] := 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 536} SerialCancelCurrentWrite(PDevObj_11, currentLastIrp);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 537} Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    Mem_T.INT4[Tmp_240] := cancelIrql;
    call {:si_unique_call 538} IoAcquireCancelSpinLock(Tmp_240);
    assume {:nonnull} Tmp_240 != 0;
    assume Tmp_240 > 0;
    cancelIrql := Mem_T.INT4[Tmp_240];
    goto L32_dummy;

  L32_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 539} SerialCancelCurrentXoff(PDevObj_11, currentLastIrp);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 540} SerialCancelImmediate(PDevObj_11, currentLastIrp);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 541} SerialCancelQueued(PDevObj_11, currentLastIrp);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 542} SerialCancelWait(PDevObj_11, currentLastIrp);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 543} SerialFilterCancelQueued(PDevObj_11, currentLastIrp);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sdv_217 != 0;
    call {:si_unique_call 544} IoReleaseCancelSpinLock(cancelIrql);
    goto LM2;
}



procedure {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_11: int) returns (Tmp_242: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer: int, actual_PDevExt_11: int) returns (Tmp_242: int)
{
  var {:scalar} cancelled: int;
  var {:pointer} Timer: int;
  var {:pointer} PDevExt_11: int;
  var vslice_dummy_var_490: int;

  anon0:
    Timer := actual_Timer;
    PDevExt_11 := actual_PDevExt_11;
    call {:si_unique_call 546} cancelled := KeCancelTimer(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} cancelled != 0;
    assume {:nonnull} Timer != 0;
    assume Timer > 0;
    havoc vslice_dummy_var_490;
    call {:si_unique_call 547} SerialDpcEpilogue(PDevExt_11, vslice_dummy_var_490);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L9;

  L9:
    Tmp_242 := cancelled;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} cancelled == 0;
    goto L9;
}



procedure {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_12: int) returns (Tmp_244: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_244 == 0 || Tmp_244 == -1073741536 || Tmp_244 == 259 || Tmp_244 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_12: int) returns (Tmp_244: int)
{
  var {:pointer} Tmp_245: int;
  var {:pointer} PIrp_8: int;
  var {:pointer} PDevExt_12: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_491: int;

  anon0:
    PIrp_8 := actual_PIrp_8;
    PDevExt_12 := actual_PDevExt_12;
    call {:si_unique_call 548} Tmp_245 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    havoc vslice_dummy_var_491;
    Mem_T.INT4[Tmp_245] := vslice_dummy_var_491;
    call {:si_unique_call 549} vslice_dummy_var_169 := sdv_InterlockedIncrement(Tmp_245);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    assume {:nonnull} Tmp_245 != 0;
    assume Tmp_245 > 0;
    call {:si_unique_call 550} Tmp_244 := SerialFilterIrps(PIrp_8, PDevExt_12);
    return;
}



procedure {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_9: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_OldIrql_9;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_NextIrp: int, actual_CompleteCurrent_2: int, actual_extension_5: int, actual_OldIrql_9: int)
{
  var {:scalar} sdv_223: int;
  var {:pointer} oldIrp_1: int;
  var {:pointer} sdv_226: int;
  var {:pointer} headOfList: int;
  var {:pointer} Tmp_248: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent_2: int;
  var {:pointer} extension_5: int;
  var {:scalar} OldIrql_9: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_492: int;

  anon0:
    call {:si_unique_call 551} vslice_dummy_var_170 := __HAVOC_malloc(4);
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    NextIrp := actual_NextIrp;
    CompleteCurrent_2 := actual_CompleteCurrent_2;
    extension_5 := actual_extension_5;
    OldIrql_9 := actual_OldIrql_9;
    call {:si_unique_call 552} Tmp_248 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc oldIrp_1;
    call {:si_unique_call 553} sdv_223 := sdv_IsListEmpty(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_223 == 0;
    call {:si_unique_call 554} headOfList := RemoveHeadList(QueueToProcess_2);
    call {:si_unique_call 555} sdv_226 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_492;
    call {:si_unique_call 556} vslice_dummy_var_172 := sdv_IoSetCancelRoutine(vslice_dummy_var_492, 0);
    goto L11;

  L11:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    call {:si_unique_call 557} IoReleaseCancelSpinLock(OldIrql_9);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} CompleteCurrent_2 != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} oldIrp_1 != 0;
    Tmp_248 := strConst__li2bpl2;
    call {:si_unique_call 558} vslice_dummy_var_171 := SerialDbgPrintEx(9, Tmp_248);
    call {:si_unique_call 559} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 560} SerialIRPEpilogue(extension_5);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} oldIrp_1 == 0;
    goto L1;

  anon10_Then:
    assume {:partition} CompleteCurrent_2 == 0;
    goto L1;

  anon9_Then:
    assume {:partition} sdv_223 != 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    goto L11;
}



procedure {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_13: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_249: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_13: int, actual_PDevObj_12: int, actual_PIrp_9: int) returns (Tmp_249: int)
{
  var {:scalar} status_12: int;
  var {:pointer} PDevExt_13: int;
  var {:pointer} PDevObj_12: int;
  var {:pointer} PIrp_9: int;

  anon0:
    PDevExt_13 := actual_PDevExt_13;
    PDevObj_12 := actual_PDevObj_12;
    PIrp_9 := actual_PIrp_9;
    call {:si_unique_call 561} status_12 := sdv_IoCallDriver(PDevObj_12, PIrp_9);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 562} SerialIRPEpilogue(PDevExt_13);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_249 := status_12;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_14: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_14: int)
{
  var {:pointer} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:pointer} sdv_232: int;
  var {:pointer} Tmp_253: int;
  var {:scalar} Tmp_254: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} pIrpStack_4: int;
  var {:pointer} Tmp_255: int;
  var {:pointer} pIrp: int;
  var {:pointer} pDevObj: int;
  var {:pointer} pDrvObj: int;
  var {:pointer} pIrpLink: int;
  var {:pointer} Tmp_257: int;
  var {:pointer} PDevExt_14: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 563} vslice_dummy_var_173 := __HAVOC_malloc(4);
    PDevExt_14 := actual_PDevExt_14;
    call {:si_unique_call 564} Tmp_251 := __HAVOC_malloc(96);
    call {:si_unique_call 565} Tmp_253 := __HAVOC_malloc(124);
    call {:si_unique_call 566} Tmp_255 := __HAVOC_malloc(80);
    call {:si_unique_call 567} Tmp_257 := __HAVOC_malloc(112);
    Tmp_251 := strConst__li2bpl59;
    call {:si_unique_call 568} vslice_dummy_var_174 := SerialDbgPrintEx(2, Tmp_251);
    call {:si_unique_call 569} Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    Mem_T.INT4[Tmp_252] := oldIrql_3;
    call {:si_unique_call 570} IoAcquireCancelSpinLock(Tmp_252);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_252];
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    havoc pIrpLink;
    goto L16;

  L16:
    call {:si_unique_call 571} Tmp_252, sdv_232, Tmp_253, Tmp_254, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_257, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177 := SerialUnstallIrps_loop_L16(Tmp_252, sdv_232, Tmp_253, Tmp_254, oldIrql_3, pIrpStack_4, pIrp, pDevObj, pDrvObj, pIrpLink, Tmp_257, PDevExt_14, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177);
    goto L16_last;

  L16_last:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 572} sdv_232 := sdv_containing_record(pIrpLink, 88);
    pIrp := sdv_232;
    call {:si_unique_call 573} vslice_dummy_var_175 := sdv_RemoveEntryList(0);
    call {:si_unique_call 574} pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc pDevObj;
    assume {:nonnull} pDevObj != 0;
    assume pDevObj > 0;
    havoc pDrvObj;
    call {:si_unique_call 575} vslice_dummy_var_176 := sdv_IoSetCancelRoutine(pIrp, 0);
    call {:si_unique_call 576} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_253 := strConst__li2bpl60;
    call {:si_unique_call 577} vslice_dummy_var_177 := SerialDbgPrintEx(12, Tmp_253);
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc Tmp_254;
    assume {:nonnull} pDrvObj != 0;
    assume pDrvObj > 0;
    havoc Tmp_257;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_254 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_254 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_254 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_254 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_254 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_254 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_254 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_254 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_254 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_254 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_254 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_254 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_254 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_254 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_254 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_254 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_254 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_254 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_254 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_254 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_254 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_254 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_254 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_254 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_254 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_254 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume Tmp_254 != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume false;
    return;

  anon87_Then:
    assume Tmp_254 == 0;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257] == 0;
    goto L45;

  L45:
    call {:si_unique_call 578} Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    Mem_T.INT4[Tmp_252] := oldIrql_3;
    call {:si_unique_call 579} IoAcquireCancelSpinLock(Tmp_252);
    assume {:nonnull} Tmp_252 != 0;
    assume Tmp_252 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_252];
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    havoc pIrpLink;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon86_Then:
    assume Tmp_254 == 1;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume Tmp_254 == 2;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume Tmp_254 == 3;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume Tmp_254 == 4;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume Tmp_254 == 5;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume Tmp_254 == 6;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume Tmp_254 == 7;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume Tmp_254 == 8;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume Tmp_254 == 9;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume Tmp_254 == 10;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume Tmp_254 == 11;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume Tmp_254 == 12;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume Tmp_254 == 13;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume Tmp_254 == 14;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume Tmp_254 == 15;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume Tmp_254 == 16;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume Tmp_254 == 17;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume Tmp_254 == 18;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume Tmp_254 == 19;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume Tmp_254 == 20;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume Tmp_254 == 21;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume Tmp_254 == 22;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume Tmp_254 == 23;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume Tmp_254 == 24;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume Tmp_254 == 25;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume Tmp_254 == 26;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume Tmp_254 == 27;
    assume {:nonnull} Tmp_257 != 0;
    assume Tmp_257 > 0;
    assume Mem_T.INT4[Tmp_257 + 27 * 4] == 0;
    goto L45;

  anon59_Then:
    call {:si_unique_call 580} IoReleaseCancelSpinLock(oldIrql_3);
    Tmp_255 := strConst__li2bpl61;
    call {:si_unique_call 581} vslice_dummy_var_178 := SerialDbgPrintEx(2, Tmp_255);
    return;
}



procedure {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_8: int, actual_QueueToClean: int, actual_CurrentOpIrp_4: int)
{
  var {:pointer} currentLastIrp_1: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:scalar} cancelIrql_1: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} Tmp_262: int;
  var {:scalar} sdv_237: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} sdv_238: int;
  var {:scalar} cancelRoutine_1: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} QueueToClean: int;
  var {:pointer} CurrentOpIrp_4: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;

  anon0:
    call {:si_unique_call 582} vslice_dummy_var_179 := __HAVOC_malloc(4);
    DeviceObject_8 := actual_DeviceObject_8;
    QueueToClean := actual_QueueToClean;
    CurrentOpIrp_4 := actual_CurrentOpIrp_4;
    call {:si_unique_call 583} Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    Mem_T.INT4[Tmp_261] := cancelIrql_1;
    call {:si_unique_call 584} IoAcquireCancelSpinLock(Tmp_261);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_261];
    goto L8;

  L8:
    call {:si_unique_call 585} currentLastIrp_1, cancelIrql_1, Tmp_261, sdv_237, sdv_238, cancelRoutine_1, vslice_dummy_var_180 := SerialKillAllReadsOrWrites_loop_L8(currentLastIrp_1, cancelIrql_1, Tmp_261, sdv_237, sdv_238, cancelRoutine_1, DeviceObject_8, QueueToClean, vslice_dummy_var_180);
    goto L8_last;

  L8_last:
    call {:si_unique_call 604} sdv_237 := sdv_IsListEmpty(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_237 == 0;
    assume {:nonnull} QueueToClean != 0;
    assume QueueToClean > 0;
    havoc vslice_dummy_var_493;
    call {:si_unique_call 586} sdv_238 := sdv_containing_record(vslice_dummy_var_493, 88);
    currentLastIrp_1 := sdv_238;
    call {:si_unique_call 587} vslice_dummy_var_180 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)];
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(currentLastIrp_1)] := cancelIrql_1;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)] := 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 588} SerialCancelCurrentWrite(DeviceObject_8, currentLastIrp_1);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 589} Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    Mem_T.INT4[Tmp_261] := cancelIrql_1;
    call {:si_unique_call 590} IoAcquireCancelSpinLock(Tmp_261);
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_261];
    goto L42_dummy;

  L42_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 591} SerialCancelCurrentXoff(DeviceObject_8, currentLastIrp_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 592} SerialCancelImmediate(DeviceObject_8, currentLastIrp_1);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 593} SerialCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 594} SerialCancelWait(DeviceObject_8, currentLastIrp_1);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 595} SerialFilterCancelQueued(DeviceObject_8, currentLastIrp_1);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} sdv_237 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_259;
    assume {:nonnull} Tmp_259 != 0;
    assume Tmp_259 > 0;
    cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_259)];
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_258;
    assume {:nonnull} Tmp_258 != 0;
    assume Tmp_258 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} cancelRoutine_1 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_263;
    assume {:nonnull} Tmp_263 != 0;
    assume Tmp_263 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_263)] := 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc Tmp_262;
    assume {:nonnull} Tmp_262 != 0;
    assume Tmp_262 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(Tmp_262)] := cancelIrql_1;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant571;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_494;
    call {:si_unique_call 596} SerialCancelCurrentWrite(DeviceObject_8, vslice_dummy_var_494);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon56_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant575;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_495;
    call {:si_unique_call 597} SerialCancelCurrentXoff(DeviceObject_8, vslice_dummy_var_495);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant1086;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_496;
    call {:si_unique_call 598} SerialCancelImmediate(DeviceObject_8, vslice_dummy_var_496);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant665;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_497;
    call {:si_unique_call 599} SerialCancelQueued(DeviceObject_8, vslice_dummy_var_497);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant619;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_498;
    call {:si_unique_call 600} SerialCancelWait(DeviceObject_8, vslice_dummy_var_498);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant667;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_499;
    call {:si_unique_call 601} SerialFilterCancelQueued(DeviceObject_8, vslice_dummy_var_499);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} cancelRoutine_1 == 0;
    call {:si_unique_call 602} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;

  anon52_Then:
    call {:si_unique_call 603} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 605} vslice_dummy_var_181 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_2: int, actual_Dpc_5: int, actual_PDevExt_15: int) returns (Tmp_266: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_266 == 1 || Tmp_266 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_1: int, actual_SD1_2: int, actual_Dpc_5: int, actual_PDevExt_15: int) returns (Tmp_266: int)
{
  var {:scalar} DueTime_1: int;
  var {:scalar} set: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} SD1_2: int;
  var {:pointer} PDevExt_15: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;

  anon0:
    call {:si_unique_call 606} DueTime_1 := __HAVOC_malloc(20);
    SD1_2 := actual_SD1_2;
    PDevExt_15 := actual_PDevExt_15;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    call {:si_unique_call 607} Tmp_267 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    havoc vslice_dummy_var_500;
    Mem_T.INT4[Tmp_267] := vslice_dummy_var_500;
    call {:si_unique_call 608} vslice_dummy_var_182 := sdv_InterlockedIncrement(Tmp_267);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    call {:si_unique_call 609} set := KeSetTimer(0, DueTime_1, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} set != 0;
    call {:si_unique_call 610} Tmp_267 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    havoc vslice_dummy_var_501;
    Mem_T.INT4[Tmp_267] := vslice_dummy_var_501;
    call {:si_unique_call 611} vslice_dummy_var_183 := sdv_InterlockedDecrement(Tmp_267);
    assume {:nonnull} PDevExt_15 != 0;
    assume PDevExt_15 > 0;
    assume {:nonnull} Tmp_267 != 0;
    assume Tmp_267 > 0;
    goto L12;

  L12:
    Tmp_266 := set;
    return;

  anon3_Then:
    assume {:partition} set == 0;
    goto L12;
}



procedure {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_16: int, actual_PDpc_1: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_16: int, actual_PDpc_1: int)
{
  var {:scalar} pendingCnt_1: int;
  var {:pointer} Tmp_269: int;
  var {:pointer} PDevExt_16: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_502: int;

  anon0:
    call {:si_unique_call 612} vslice_dummy_var_184 := __HAVOC_malloc(4);
    PDevExt_16 := actual_PDevExt_16;
    call {:si_unique_call 613} Tmp_269 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    havoc vslice_dummy_var_502;
    Mem_T.INT4[Tmp_269] := vslice_dummy_var_502;
    call {:si_unique_call 614} pendingCnt_1 := sdv_InterlockedDecrement(Tmp_269);
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    assume {:nonnull} Tmp_269 != 0;
    assume Tmp_269 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pendingCnt_1 == 0;
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    call {:si_unique_call 615} vslice_dummy_var_185 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_16), 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} pendingCnt_1 != 0;
    goto L1;
}



procedure {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_5: int, actual_QueueToProcess_3: int, actual_NextIrp_1: int, actual_CompleteCurrent_3: int, actual_extension_6: int)
{
  var {:scalar} oldIrql_4: int;
  var {:pointer} Tmp_271: int;
  var {:pointer} CurrentOpIrp_5: int;
  var {:pointer} QueueToProcess_3: int;
  var {:pointer} NextIrp_1: int;
  var {:scalar} CompleteCurrent_3: int;
  var {:pointer} extension_6: int;
  var vslice_dummy_var_186: int;

  anon0:
    call {:si_unique_call 616} vslice_dummy_var_186 := __HAVOC_malloc(4);
    CurrentOpIrp_5 := actual_CurrentOpIrp_5;
    QueueToProcess_3 := actual_QueueToProcess_3;
    NextIrp_1 := actual_NextIrp_1;
    CompleteCurrent_3 := actual_CompleteCurrent_3;
    extension_6 := actual_extension_6;
    call {:si_unique_call 617} Tmp_271 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_271 != 0;
    assume Tmp_271 > 0;
    Mem_T.INT4[Tmp_271] := oldIrql_4;
    call {:si_unique_call 618} IoAcquireCancelSpinLock(Tmp_271);
    assume {:nonnull} Tmp_271 != 0;
    assume Tmp_271 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_271];
    call {:si_unique_call 619} SerialGetNextIrpLocked(CurrentOpIrp_5, QueueToProcess_3, NextIrp_1, CompleteCurrent_3, extension_6, oldIrql_4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_9: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} Tmp_274: int;
  var {:pointer} Tmp_275: int;
  var {:scalar} Tmp_276: int;
  var {:scalar} sdv_245: int;
  var {:pointer} errorLogEntry: int;
  var {:pointer} Tmp_277: int;
  var {:scalar} Tmp_279: int;
  var {:scalar} sdv_246: int;
  var {:scalar} dumpToAllocate: int;
  var {:pointer} sdv_247: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} DriverObject: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_187: int;

  anon0:
    call {:si_unique_call 620} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 621} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 622} vslice_dummy_var_187 := __HAVOC_malloc(4);
    call {:si_unique_call 623} Tmp_279 := __HAVOC_malloc(20);
    call {:si_unique_call 624} Tmp_282 := __HAVOC_malloc(20);
    DriverObject := actual_DriverObject;
    DeviceObject_9 := actual_DeviceObject_9;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    call {:si_unique_call 625} Tmp_274 := __HAVOC_malloc(4);
    call {:si_unique_call 626} Tmp_275 := __HAVOC_malloc(4);
    call {:si_unique_call 627} Tmp_277 := __HAVOC_malloc(4);
    call {:si_unique_call 628} Tmp_280 := __HAVOC_malloc(4);
    call {:si_unique_call 629} Tmp_283 := __HAVOC_malloc(4);
    dumpToAllocate := 0;
    call {:si_unique_call 630} sdv_do_paged_code_check();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Insert1 != 0;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Insert2 != 0;
    goto L16;

  L16:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} DeviceObject_9 != 0;
    goto L19;

  L19:
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    call {:si_unique_call 631} sdv_245 := SerialMemCompare(P1, 1, Tmp_282, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_245 != 0;
    dumpToAllocate := 8;
    goto L24;

  L24:
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    call {:si_unique_call 632} sdv_246 := SerialMemCompare(P2, 1, Tmp_279, 1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_246 != 0;
    dumpToAllocate := dumpToAllocate + 8;
    goto L30;

  L30:
    Tmp_276 := 48 + dumpToAllocate + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 633} sdv_247 := IoAllocateErrorLogEntry(0, Tmp_276);
    errorLogEntry := sdv_247;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} dumpToAllocate != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_277;
    call {:si_unique_call 634} sdv_RtlCopyMemory(0, 0, 8);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} dumpToAllocate > 8;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_275;
    call {:si_unique_call 635} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_283;
    ptrToFirstInsert := Tmp_283;
    goto L57;

  L57:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} LengthOfInsert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 636} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} LengthOfInsert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 637} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L59;

  L59:
    call {:si_unique_call 638} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L59;

  anon30_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L59;

  anon26_Then:
    assume {:partition} 8 >= dumpToAllocate;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_280;
    ptrToFirstInsert := Tmp_280;
    goto L57;

  anon29_Then:
    assume {:partition} dumpToAllocate == 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_274;
    ptrToFirstInsert := Tmp_274;
    goto L57;

  anon28_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon25_Then:
    assume {:partition} sdv_246 == 0;
    goto L30;

  anon24_Then:
    assume {:partition} sdv_245 == 0;
    goto L24;

  anon23_Then:
    assume {:partition} DeviceObject_9 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} Insert2 == 0;
    LengthOfInsert2 := 0;
    goto L16;

  anon21_Then:
    assume {:partition} Insert1 == 0;
    LengthOfInsert1 := 0;
    goto L14;
}



procedure {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_10: int, actual_Irp_10: int)
{
  var {:pointer} Tmp_284: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} extension_7: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 639} vslice_dummy_var_188 := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    Irp_10 := actual_Irp_10;
    call {:si_unique_call 640} Tmp_284 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc extension_7;
    call {:si_unique_call 641} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_10);
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_10))] := -1073741536;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 642} vslice_dummy_var_189 := sdv_RemoveEntryList(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 643} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_10)]);
    Tmp_284 := strConst__li2bpl2;
    call {:si_unique_call 644} vslice_dummy_var_190 := SerialDbgPrintEx(9, Tmp_284);
    call {:si_unique_call 645} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 646} SerialIRPEpilogue(extension_7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L32;

  L32:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto L18;

  anon15_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 647} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto L18;

  anon17_Then:
    goto L18;

  anon16_Then:
    goto L32;

  anon14_Then:
    goto L18;
}



procedure {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_17: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_6: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_17: int)
{
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} sdv_251: int;
  var {:pointer} sdv_252: int;
  var {:pointer} s_p_e_c_i_a_l_16: int;
  var {:scalar} s_p_e_c_i_a_l_17: int;
  var {:scalar} sdv_254: int;
  var {:pointer} sdv_255: int;
  var {:scalar} sdv_256: int;
  var {:pointer} s_p_e_c_i_a_l_18: int;
  var {:scalar} s_p_e_c_i_a_l_19: int;
  var {:scalar} s_p_e_c_i_a_l_20: int;
  var {:pointer} CurrentOpIrp_6: int;
  var {:pointer} IntervalTimer_1: int;
  var {:pointer} TotalTimer_1: int;
  var {:pointer} PDevExt_17: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;

  anon0:
    call {:si_unique_call 648} vslice_dummy_var_191 := __HAVOC_malloc(4);
    CurrentOpIrp_6 := actual_CurrentOpIrp_6;
    IntervalTimer_1 := actual_IntervalTimer_1;
    TotalTimer_1 := actual_TotalTimer_1;
    PDevExt_17 := actual_PDevExt_17;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc Tmp_288;
    assume {:nonnull} Tmp_288 != 0;
    assume Tmp_288 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_288)] != 0;
    s_p_e_c_i_a_l_17 := 2;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_503;
    call {:si_unique_call 649} sdv_251 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_503);
    assume {:nonnull} sdv_251 != 0;
    assume sdv_251 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_251)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_15] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_15], BNOT(s_p_e_c_i_a_l_17));
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_504;
    call {:si_unique_call 650} vslice_dummy_var_192 := sdv_IoSetCancelRoutine(vslice_dummy_var_504, 0);
    goto L4;

  L4:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} IntervalTimer_1 != 0;
    call {:si_unique_call 651} sdv_254 := SerialCancelTimer(IntervalTimer_1, PDevExt_17);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_254 != 0;
    s_p_e_c_i_a_l_19 := 8;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_505;
    call {:si_unique_call 652} sdv_255 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_505);
    assume {:nonnull} sdv_255 != 0;
    assume sdv_255 > 0;
    s_p_e_c_i_a_l_18 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_255)));
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_18] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_18], BNOT(s_p_e_c_i_a_l_19));
    goto L16;

  L16:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} TotalTimer_1 != 0;
    call {:si_unique_call 653} sdv_256 := SerialCancelTimer(TotalTimer_1, PDevExt_17);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_256 != 0;
    s_p_e_c_i_a_l_20 := 4;
    assume {:nonnull} CurrentOpIrp_6 != 0;
    assume CurrentOpIrp_6 > 0;
    havoc vslice_dummy_var_506;
    call {:si_unique_call 654} sdv_252 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_506);
    assume {:nonnull} sdv_252 != 0;
    assume sdv_252 > 0;
    s_p_e_c_i_a_l_16 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_252)));
    assume {:nonnull} s_p_e_c_i_a_l_16 != 0;
    assume s_p_e_c_i_a_l_16 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_16] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_16], BNOT(s_p_e_c_i_a_l_20));
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} sdv_256 == 0;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} TotalTimer_1 == 0;
    goto L1;

  anon17_Then:
    assume {:partition} sdv_254 == 0;
    goto L16;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} IntervalTimer_1 == 0;
    goto L16;

  anon19_Then:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_288)] == 0;
    goto L4;
}



procedure {:origName "SerialInsertQueueDpc"} SerialInsertQueueDpc(actual_PDpc_2: int, actual_Sarg1: int, actual_Sarg2: int, actual_PDevExt_18: int) returns (Tmp_290: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInsertQueueDpc"} SerialInsertQueueDpc(actual_PDpc_2: int, actual_Sarg1: int, actual_Sarg2: int, actual_PDevExt_18: int) returns (Tmp_290: int)
{
  var {:pointer} Tmp_291: int;
  var {:scalar} sdv_260: int;
  var {:scalar} sdv_261: int;
  var {:scalar} pendingCnt_2: int;
  var {:scalar} queued: int;
  var {:pointer} PDpc_2: int;
  var {:pointer} Sarg1: int;
  var {:pointer} Sarg2: int;
  var {:pointer} PDevExt_18: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;

  anon0:
    PDpc_2 := actual_PDpc_2;
    Sarg1 := actual_Sarg1;
    Sarg2 := actual_Sarg2;
    PDevExt_18 := actual_PDevExt_18;
    call {:si_unique_call 655} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    havoc vslice_dummy_var_507;
    Mem_T.INT4[Tmp_291] := vslice_dummy_var_507;
    call {:si_unique_call 656} vslice_dummy_var_195 := sdv_InterlockedIncrement(Tmp_291);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    call {:si_unique_call 657} queued := KeInsertQueueDpc(PDpc_2, Sarg1, Sarg2);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} queued == 0;
    call {:si_unique_call 658} Tmp_291 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    havoc vslice_dummy_var_508;
    Mem_T.INT4[Tmp_291] := vslice_dummy_var_508;
    call {:si_unique_call 659} sdv_260 := sdv_InterlockedDecrement(Tmp_291);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_291 != 0;
    assume Tmp_291 > 0;
    pendingCnt_2 := sdv_260;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pendingCnt_2 == 0;
    call {:si_unique_call 660} sdv_261 := sdv_KeGetCurrentIrql();
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 2 >= sdv_261;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 661} vslice_dummy_var_194 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_18), 0, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L13;

  L13:
    Tmp_290 := queued;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} sdv_261 > 2;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 662} vslice_dummy_var_193 := KeInsertQueueDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_18), 0, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L13;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} pendingCnt_2 != 0;
    goto L13;

  anon13_Then:
    assume {:partition} queued != 0;
    goto L13;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_19: int) returns (Tmp_292: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_292 == 0 || Tmp_292 == -1073741536 || Tmp_292 == 259 || Tmp_292 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_19: int) returns (Tmp_292: int)
{
  var {:scalar} oldIrqlFlags: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} pIrpStack_5: int;
  var {:pointer} Tmp_293: int;
  var {:pointer} PIrp_10: int;
  var {:pointer} PDevExt_19: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;

  anon0:
    PIrp_10 := actual_PIrp_10;
    PDevExt_19 := actual_PDevExt_19;
    call {:si_unique_call 663} pIrpStack_5 := sdv_IoGetCurrentIrpStackLocation(PIrp_10);
    call {:si_unique_call 664} Tmp_293 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    Mem_T.INT4[Tmp_293] := oldIrqlFlags;
    call {:si_unique_call 665} sdv_KeAcquireSpinLock(0, Tmp_293);
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    oldIrqlFlags := Mem_T.INT4[Tmp_293];
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)] != 0;
    goto L14;

  L14:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 1) != 0;
    goto L16;

  L16:
    call {:si_unique_call 666} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_292 := 0;
    goto L1;

  L1:
    return;

  anon29_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741738;
    Tmp_292 := -1073741738;
    goto L1;

  anon27_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 1) == 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 4) == 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 8) == 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 2) != 0;
    goto L27;

  L27:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 667} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_292 := 0;
    goto L1;

  anon33_Then:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 16) != 0;
    call {:si_unique_call 668} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_292 := 0;
    goto L1;

  anon35_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 16) == 0;
    goto L33;

  L33:
    call {:si_unique_call 669} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    call {:si_unique_call 670} Tmp_293 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    Mem_T.INT4[Tmp_293] := oldIrql_5;
    call {:si_unique_call 671} IoAcquireCancelSpinLock(Tmp_293);
    assume {:nonnull} Tmp_293 != 0;
    assume Tmp_293 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_293];
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 672} IoReleaseCancelSpinLock(oldIrql_5);
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741536;
    Tmp_292 := -1073741536;
    goto L1;

  anon36_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := 259;
    call {:si_unique_call 673} sdv_IoMarkIrpPending(0);
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 674} vslice_dummy_var_196 := sdv_InsertTailList(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(PDevExt_19), ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(PIrp_10))));
    call {:si_unique_call 675} vslice_dummy_var_197 := sdv_IoSetCancelRoutine(PIrp_10, li2bplFunctionConstant667);
    call {:si_unique_call 676} IoReleaseCancelSpinLock(oldIrql_5);
    Tmp_292 := 259;
    goto L1;

  anon34_Then:
    goto L33;

  anon31_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 2) == 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 16) == 0;
    call {:si_unique_call 677} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_292 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 16) != 0;
    goto L27;

  anon30_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 8) != 0;
    goto L16;

  anon28_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 4) != 0;
    goto L16;

  anon25_Then:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_19)] == 0;
    assume {:nonnull} PDevExt_19 != 0;
    assume PDevExt_19 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 4) == 0;
    call {:si_unique_call 678} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_292 := 0;
    goto L1;

  anon26_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_19)], 4) != 0;
    goto L14;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 679} vslice_dummy_var_198 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_296: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_296: int)
{
  var {:pointer} Tmp_297: int;
  var {:pointer} Tmp_298: int;
  var {:scalar} Status: int;
  var {:pointer} IrpSp_2: int;
  var {:scalar} sdv_270: int;
  var {:pointer} Tmp_300: int;
  var {:scalar} status_13: int;
  var {:pointer} Buf: int;
  var {:pointer} Tmp_301: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 680} Tmp_297 := __HAVOC_malloc(72);
    call {:si_unique_call 681} Tmp_298 := __HAVOC_malloc(96);
    call {:si_unique_call 682} Tmp_301 := __HAVOC_malloc(72);
    call {:si_unique_call 683} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_509;
    call {:si_unique_call 684} status_13 := SerialIRPPrologue(Irp_11, vslice_dummy_var_509);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_13 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_13 != 259;
    Tmp_301 := strConst__li2bpl2;
    call {:si_unique_call 685} vslice_dummy_var_199 := SerialDbgPrintEx(9, Tmp_301);
    call {:si_unique_call 686} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_510;
    call {:si_unique_call 687} SerialIRPEpilogue(vslice_dummy_var_510);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L18;

  L18:
    Tmp_296 := status_13;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} status_13 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} status_13 == 0;
    Tmp_298 := strConst__li2bpl40;
    call {:si_unique_call 688} vslice_dummy_var_200 := SerialDbgPrintEx(9, Tmp_298);
    call {:si_unique_call 689} sdv_270 := SerialCompleteIfError(DeviceObject_11, Irp_11);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_270 != 0;
    Tmp_296 := -1073741536;
    goto L1;

  anon23_Then:
    assume {:partition} sdv_270 == 0;
    call {:si_unique_call 690} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_11);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Status := 0;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Buf;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  L44:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := Status;
    Tmp_297 := strConst__li2bpl2;
    call {:si_unique_call 691} vslice_dummy_var_201 := SerialDbgPrintEx(9, Tmp_297);
    call {:si_unique_call 692} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc vslice_dummy_var_511;
    call {:si_unique_call 693} SerialIRPEpilogue(vslice_dummy_var_511);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    Tmp_296 := Status;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    Status := -1073741789;
    goto L44;

  anon29_Then:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    Status := -1073741789;
    goto L44;

  anon26_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_300;
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto L44;

  anon24_Then:
    Status := -1073741811;
    goto L44;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_302: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_12: int, actual_Irp_12: int) returns (Tmp_302: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} sdv_272: int;
  var {:pointer} Tmp_304: int;
  var {:pointer} sdv_275: int;
  var {:scalar} sdv_276: int;
  var {:pointer} Tmp_305: int;
  var {:pointer} Tmp_306: int;
  var {:pointer} DeviceObject_12: int;
  var {:pointer} Irp_12: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;
  var vslice_dummy_var_514: int;

  anon0:
    DeviceObject_12 := actual_DeviceObject_12;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 694} Tmp_304 := __HAVOC_malloc(72);
    call {:si_unique_call 695} Tmp_305 := __HAVOC_malloc(96);
    call {:si_unique_call 696} Tmp_306 := __HAVOC_malloc(72);
    call {:si_unique_call 697} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_512;
    call {:si_unique_call 698} Status_1 := SerialIRPPrologue(Irp_12, vslice_dummy_var_512);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Status_1 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Status_1 != 259;
    Tmp_304 := strConst__li2bpl2;
    call {:si_unique_call 699} vslice_dummy_var_202 := SerialDbgPrintEx(9, Tmp_304);
    call {:si_unique_call 700} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_513;
    call {:si_unique_call 701} SerialIRPEpilogue(vslice_dummy_var_513);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    Tmp_302 := Status_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} Status_1 == 259;
    goto L16;

  anon17_Then:
    assume {:partition} Status_1 == 0;
    Tmp_305 := strConst__li2bpl40;
    call {:si_unique_call 702} vslice_dummy_var_203 := SerialDbgPrintEx(9, Tmp_305);
    call {:si_unique_call 703} sdv_276 := SerialCompleteIfError(DeviceObject_12, Irp_12);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_276 != 0;
    Tmp_302 := -1073741536;
    goto L1;

  anon19_Then:
    assume {:partition} sdv_276 == 0;
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    call {:si_unique_call 704} sdv_275 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_275 != 0;
    assume sdv_275 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L39;

  L39:
    Status_1 := 0;
    goto L40;

  L40:
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_12))] := Status_1;
    Tmp_306 := strConst__li2bpl2;
    call {:si_unique_call 705} vslice_dummy_var_204 := SerialDbgPrintEx(9, Tmp_306);
    call {:si_unique_call 706} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc vslice_dummy_var_514;
    call {:si_unique_call 707} SerialIRPEpilogue(vslice_dummy_var_514);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    Tmp_302 := Status_1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    call {:si_unique_call 708} sdv_272 := sdv_IoGetCurrentIrpStackLocation(Irp_12);
    assume {:nonnull} sdv_272 != 0;
    assume sdv_272 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Status_1 := -1073741811;
    goto L40;

  anon21_Then:
    goto L39;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_307: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_307: int)
{
  var {:scalar} localStatus_1: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_309: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} sdv_278: int;
  var {:pointer} Tmp_311: int;
  var {:pointer} Tmp_312: int;
  var {:pointer} Tmp_313: int;
  var {:pointer} sdv_279: int;
  var {:pointer} Tmp_314: int;
  var {:pointer} Tmp_315: int;
  var {:scalar} totalTime: int;
  var {:scalar} os2ssreturn: int;
  var {:scalar} timeoutsForIrp: int;
  var {:scalar} updateChar: int;
  var {:scalar} setFirstStatus: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} useTotalTimer: int;
  var {:scalar} multiplierVal: int;
  var {:scalar} crunchDownToOne: int;
  var {:pointer} sdv_284: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_286: int;
  var {:scalar} constantVal: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} sdv_290: int;
  var {:scalar} controlIrql: int;
  var {:pointer} Tmp_316: int;
  var {:scalar} s_p_e_c_i_a_l_24: int;
  var {:scalar} returnWithWhatsPresent: int;
  var {:scalar} useIntervalTimer: int;
  var {:pointer} Tmp_317: int;
  var {:pointer} sdv_293: int;
  var {:scalar} firstStatus: int;
  var {:pointer} Extension_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_521: int;

  anon0:
    call {:si_unique_call 709} totalTime := __HAVOC_malloc(20);
    call {:si_unique_call 710} timeoutsForIrp := __HAVOC_malloc(20);
    call {:si_unique_call 711} updateChar := __HAVOC_malloc(12);
    call {:si_unique_call 712} newIrp_1 := __HAVOC_malloc(4);
    Extension_15 := actual_Extension_15;
    call {:si_unique_call 713} Tmp_311 := __HAVOC_malloc(84);
    call {:si_unique_call 714} Tmp_316 := __HAVOC_malloc(88);
    setFirstStatus := 0;
    Tmp_316 := strConst__li2bpl63;
    call {:si_unique_call 715} vslice_dummy_var_208 := SerialDbgPrintEx(2, Tmp_316);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto L23;

  L23:
    call {:si_unique_call 716} localStatus_1, Tmp_309, Tmp_310, sdv_278, Tmp_312, Tmp_313, Tmp_314, Tmp_315, os2ssreturn, setFirstStatus, useTotalTimer, multiplierVal, crunchDownToOne, sdv_284, oldIrql_6, sdv_286, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_317, sdv_293, firstStatus, boogieTmp, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_210 := SerialStartRead_loop_L23(localStatus_1, Tmp_309, Tmp_310, sdv_278, Tmp_312, Tmp_313, Tmp_314, Tmp_315, totalTime, os2ssreturn, timeoutsForIrp, updateChar, setFirstStatus, newIrp_1, useTotalTimer, multiplierVal, crunchDownToOne, sdv_284, oldIrql_6, sdv_286, constantVal, controlIrql, returnWithWhatsPresent, useIntervalTimer, Tmp_317, sdv_293, firstStatus, Extension_15, boogieTmp, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_210);
    goto L23_last;

  L23_last:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_521;
    call {:si_unique_call 747} sdv_284 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_521);
    assume {:nonnull} sdv_284 != 0;
    assume sdv_284 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 717} localStatus_1 := SerialResizeBuffer(Extension_15);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 718} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_15), newIrp_1, 1, Extension_15);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    Tmp_311 := strConst__li2bpl62;
    call {:si_unique_call 719} vslice_dummy_var_209 := SerialDbgPrintEx(2, Tmp_311);
    Tmp_307 := firstStatus;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon67_Then:
    goto anon67_Then_dummy;

  anon67_Then_dummy:
    assume false;
    return;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := localStatus_1;
    setFirstStatus := 1;
    goto L37;

  anon65_Then:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_515;
    call {:si_unique_call 720} sdv_286 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_515);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} sdv_286 != 0;
    assume sdv_286 > 0;
    useTotalTimer := 0;
    returnWithWhatsPresent := 0;
    os2ssreturn := 0;
    crunchDownToOne := 0;
    useIntervalTimer := 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 721} vslice_dummy_var_210 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 722} vslice_dummy_var_205 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 723} Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    Mem_T.INT4[Tmp_315] := controlIrql;
    call {:si_unique_call 724} sdv_KeAcquireSpinLock(0, Tmp_315);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    controlIrql := Mem_T.INT4[Tmp_315];
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    call {:si_unique_call 725} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    useIntervalTimer := 1;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L76;

  L76:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  L83:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} useTotalTimer != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} totalTime != 0;
    assume totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 726} Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    Mem_T.INT4[Tmp_315] := controlIrql;
    call {:si_unique_call 727} sdv_KeAcquireSpinLock(0, Tmp_315);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    controlIrql := Mem_T.INT4[Tmp_315];
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    call {:si_unique_call 728} boogieTmp := SerialGetCharsFromIntBuffer(Extension_15);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 729} vslice_dummy_var_206 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 730} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_310;
    assume {:nonnull} Tmp_310 != 0;
    assume Tmp_310 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_310))] := 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon92_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon78_Then:
    assume {:partition} returnWithWhatsPresent == 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} os2ssreturn != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_309;
    assume {:nonnull} Tmp_309 != 0;
    assume Tmp_309 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto L105;

  L105:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_516;
    call {:si_unique_call 731} sdv_293 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_516);
    assume {:nonnull} sdv_293 != 0;
    assume sdv_293 > 0;
    call {:si_unique_call 732} Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    Mem_T.INT4[Tmp_315] := oldIrql_6;
    call {:si_unique_call 733} IoAcquireCancelSpinLock(Tmp_315);
    assume {:nonnull} Tmp_315 != 0;
    assume Tmp_315 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_315];
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_312;
    assume {:nonnull} Tmp_312 != 0;
    assume Tmp_312 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 734} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 735} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_317;
    assume {:nonnull} Tmp_317 != 0;
    assume Tmp_317 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_317))] := -1073741536;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_313;
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := -1073741536;
    setFirstStatus := 1;
    goto L37;

  anon95_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon94_Then:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} crunchDownToOne != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_517;
    call {:si_unique_call 736} sdv_278 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_517);
    assume {:nonnull} sdv_278 != 0;
    assume sdv_278 > 0;
    goto L126;

  L126:
    call {:si_unique_call 737} vslice_dummy_var_207 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    call {:si_unique_call 738} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 739} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_314;
    assume {:nonnull} Tmp_314 != 0;
    assume Tmp_314 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_314))] := 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon96_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon82_Then:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} useTotalTimer != 0;
    s_p_e_c_i_a_l_22 := 4;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_518;
    call {:si_unique_call 740} sdv_279 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_518);
    assume {:nonnull} sdv_279 != 0;
    assume sdv_279 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_279)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_21], s_p_e_c_i_a_l_22);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 741} vslice_dummy_var_211 := SerialSetTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), totalTime, TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L146;

  L146:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} useIntervalTimer != 0;
    s_p_e_c_i_a_l_24 := 8;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc vslice_dummy_var_519;
    call {:si_unique_call 742} sdv_290 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_519);
    assume {:nonnull} sdv_290 != 0;
    assume sdv_290 > 0;
    s_p_e_c_i_a_l_23 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_290)));
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_23] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_23], s_p_e_c_i_a_l_24);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_308;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Tmp_308 != 0;
    assume Tmp_308 > 0;
    havoc vslice_dummy_var_520;
    call {:si_unique_call 743} vslice_dummy_var_212 := SerialSetTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), vslice_dummy_var_520, IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L158;

  L158:
    call {:si_unique_call 744} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 745} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 746} sdv_KeReleaseSpinLock(0, controlIrql);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} setFirstStatus != 0;
    goto L183;

  L183:
    Tmp_307 := firstStatus;
    goto L1;

  anon85_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 259;
    goto L183;

  anon84_Then:
    assume {:partition} useIntervalTimer == 0;
    goto L158;

  anon83_Then:
    assume {:partition} useTotalTimer == 0;
    goto L146;

  anon81_Then:
    assume {:partition} crunchDownToOne == 0;
    goto L126;

  anon93_Then:
    goto L94;

  anon80_Then:
    assume {:partition} os2ssreturn == 0;
    goto L105;

  anon79_Then:
    goto L94;

  anon77_Then:
    assume {:partition} useTotalTimer == 0;
    goto L84;

  anon76_Then:
    goto L77;

  L77:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    crunchDownToOne := 1;
    multiplierVal := 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon86_Then:
    goto L83;

  anon75_Then:
    goto L83;

  anon74_Then:
    goto L77;

  anon72_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    returnWithWhatsPresent := 1;
    goto L83;

  anon73_Then:
    goto L76;

  anon69_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto L192;

  L192:
    useTotalTimer := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon71_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L192;

  anon87_Then:
    goto L83;

  anon91_Then:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  anon70_Then:
    goto L66;

  anon68_Then:
    goto L66;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_213: int;

  anon0:
    call {:si_unique_call 748} vslice_dummy_var_213 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_320: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_320: int)
{
  var {:scalar} firstTryNumberToGet: int;
  var {:scalar} numberOfCharsMoved: int;
  var {:scalar} Tmp_322: int;
  var {:pointer} Extension_16: int;
  var {:pointer} NewBuffer: int;

  anon0:
    Extension_16 := actual_Extension_16;
    NewBuffer := actual_NewBuffer;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc numberOfCharsMoved;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} numberOfCharsMoved != 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc firstTryNumberToGet;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} firstTryNumberToGet >= numberOfCharsMoved;
    call {:si_unique_call 749} sdv_RtlMoveMemory(0, 0, numberOfCharsMoved);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  L6:
    Tmp_320 := numberOfCharsMoved;
    return;

  anon7_Then:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon9_Then:
    assume {:partition} numberOfCharsMoved > firstTryNumberToGet;
    call {:si_unique_call 750} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet);
    Tmp_322 := numberOfCharsMoved - firstTryNumberToGet;
    call {:si_unique_call 751} sdv_RtlMoveMemory(0, 0, Tmp_322);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon8_Then:
    assume {:partition} numberOfCharsMoved == 0;
    goto L6;
}



procedure {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_6: int, actual_DeferredContext_4: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_6: int, actual_DeferredContext_4: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int)
{
  var {:pointer} Tmp_324: int;
  var {:pointer} Tmp_326: int;
  var {:pointer} Tmp_327: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} extension_8: int;
  var {:pointer} Dpc_6: int;
  var {:pointer} DeferredContext_4: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;

  anon0:
    call {:si_unique_call 752} vslice_dummy_var_214 := __HAVOC_malloc(4);
    Dpc_6 := actual_Dpc_6;
    DeferredContext_4 := actual_DeferredContext_4;
    call {:si_unique_call 753} Tmp_324 := __HAVOC_malloc(100);
    call {:si_unique_call 754} Tmp_326 := __HAVOC_malloc(100);
    extension_8 := DeferredContext_4;
    Tmp_326 := strConst__li2bpl65;
    call {:si_unique_call 755} vslice_dummy_var_215 := SerialDbgPrintEx(2, Tmp_326);
    call {:si_unique_call 756} Tmp_327 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_327 != 0;
    assume Tmp_327 > 0;
    Mem_T.INT4[Tmp_327] := oldIrql_7;
    call {:si_unique_call 757} IoAcquireCancelSpinLock(Tmp_327);
    assume {:nonnull} Tmp_327 != 0;
    assume Tmp_327 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_327];
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 758} SerialTryToCompleteCurrent#1(extension_8, 0, oldIrql_7, 0, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_8), ReadQueue__SERIAL_DEVICE_EXTENSION(extension_8), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension_8), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension_8), li2bplFunctionConstant720, li2bplFunctionConstant660, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 759} SerialDpcEpilogue(extension_8, Dpc_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_324 := strConst__li2bpl64;
    call {:si_unique_call 760} vslice_dummy_var_216 := SerialDbgPrintEx(2, Tmp_324);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_328: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRead"} SerialRead(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_328: int)
{
  var {:pointer} Tmp_329: int;
  var {:pointer} Tmp_330: int;
  var {:scalar} sdv_298: int;
  var {:pointer} sdv_300: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} Tmp_334: int;
  var {:pointer} Tmp_335: int;
  var {:scalar} status_14: int;
  var {:pointer} extension_9: int;
  var {:pointer} Tmp_336: int;
  var {:pointer} Tmp_337: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 761} Tmp_329 := __HAVOC_malloc(96);
    call {:si_unique_call 762} Tmp_330 := __HAVOC_malloc(72);
    call {:si_unique_call 763} Tmp_331 := __HAVOC_malloc(80);
    call {:si_unique_call 764} Tmp_332 := __HAVOC_malloc(80);
    call {:si_unique_call 765} Tmp_334 := __HAVOC_malloc(80);
    call {:si_unique_call 766} Tmp_335 := __HAVOC_malloc(80);
    call {:si_unique_call 767} Tmp_336 := __HAVOC_malloc(84);
    call {:si_unique_call 768} Tmp_337 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc extension_9;
    Tmp_336 := strConst__li2bpl70;
    call {:si_unique_call 769} vslice_dummy_var_217 := SerialDbgPrintEx(2, Tmp_336);
    call {:si_unique_call 770} status_14 := SerialIRPPrologue(Irp_13, extension_9);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_14 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_14 != 259;
    Tmp_337 := strConst__li2bpl2;
    call {:si_unique_call 771} vslice_dummy_var_218 := SerialDbgPrintEx(9, Tmp_337);
    call {:si_unique_call 772} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 773} SerialIRPEpilogue(extension_9);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  L19:
    Tmp_331 := strConst__li2bpl66;
    call {:si_unique_call 774} vslice_dummy_var_219 := SerialDbgPrintEx(2, Tmp_331);
    Tmp_328 := status_14;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} status_14 == 259;
    goto L19;

  anon17_Then:
    assume {:partition} status_14 == 0;
    Tmp_329 := strConst__li2bpl40;
    call {:si_unique_call 775} vslice_dummy_var_220 := SerialDbgPrintEx(9, Tmp_329);
    call {:si_unique_call 776} sdv_298 := SerialCompleteIfError(DeviceObject_13, Irp_13);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_298 != 0;
    Tmp_332 := strConst__li2bpl67;
    call {:si_unique_call 777} vslice_dummy_var_221 := SerialDbgPrintEx(2, Tmp_332);
    Tmp_328 := -1073741536;
    goto L1;

  anon19_Then:
    assume {:partition} sdv_298 == 0;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 778} sdv_300 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} sdv_300 != 0;
    assume sdv_300 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} extension_9 != 0;
    assume extension_9 > 0;
    call {:si_unique_call 779} status_14 := SerialStartOrQueue(extension_9, Irp_13, ReadQueue__SERIAL_DEVICE_EXTENSION(extension_9), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_9), li2bplFunctionConstant720);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    Tmp_334 := strConst__li2bpl68;
    call {:si_unique_call 780} vslice_dummy_var_222 := SerialDbgPrintEx(2, Tmp_334);
    Tmp_328 := status_14;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_13))] := 0;
    Tmp_330 := strConst__li2bpl2;
    call {:si_unique_call 781} vslice_dummy_var_223 := SerialDbgPrintEx(9, Tmp_330);
    call {:si_unique_call 782} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 783} SerialIRPEpilogue(extension_9);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    Tmp_335 := strConst__li2bpl69;
    call {:si_unique_call 784} vslice_dummy_var_224 := SerialDbgPrintEx(2, Tmp_335);
    Tmp_328 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_338: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_338: int)
{
  var {:scalar} numberOfCharsToGet: int;
  var {:pointer} Tmp_340: int;
  var {:scalar} firstTryNumberToGet_1: int;
  var {:pointer} Tmp_341: int;
  var {:pointer} Tmp_345: int;
  var {:pointer} Tmp_346: int;
  var {:scalar} Tmp_347: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} Extension_17: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;

  anon0:
    Extension_17 := actual_Extension_17;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numberOfCharsToGet != 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc firstTryNumberToGet_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} firstTryNumberToGet_1 > numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_522;
    call {:si_unique_call 785} vslice_dummy_var_226 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_522);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_340;
    assume {:nonnull} Tmp_340 != 0;
    assume Tmp_340 > 0;
    call {:si_unique_call 786} sdv_RtlMoveMemory(0, 0, numberOfCharsToGet);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  L9:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_345;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_348;
    assume {:nonnull} Tmp_345 != 0;
    assume Tmp_345 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    Tmp_338 := numberOfCharsToGet;
    return;

  anon12_Then:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon11_Then:
    assume {:partition} numberOfCharsToGet >= firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_523;
    call {:si_unique_call 787} vslice_dummy_var_225 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_523);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_341;
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    call {:si_unique_call 788} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet_1);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_347 := numberOfCharsToGet - firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc vslice_dummy_var_524;
    call {:si_unique_call 789} vslice_dummy_var_227 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_524);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc Tmp_346;
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    call {:si_unique_call 790} sdv_RtlMoveMemory(0, 0, Tmp_347);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon9_Then:
    assume {:partition} numberOfCharsToGet == 0;
    goto L9;

  anon10_Then:
    goto L7;
}



procedure {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_349: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_349 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_349: int)
{
  var {:pointer} Tmp_350: int;
  var {:pointer} Tmp_351: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} newBuffer: int;
  var {:pointer} Tmp_352: int;
  var {:pointer} rs: int;
  var {:scalar} controlIrql_1: int;
  var {:scalar} rp: int;
  var {:pointer} Tmp_353: int;
  var {:pointer} Extension_18: int;
  var boogieTmp: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_525: int;

  anon0:
    call {:si_unique_call 791} rp := __HAVOC_malloc(20);
    Extension_18 := actual_Extension_18;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_353;
    assume {:nonnull} Tmp_353 != 0;
    assume Tmp_353 > 0;
    havoc rs;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc vslice_dummy_var_525;
    call {:si_unique_call 792} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_525);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc newBuffer;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_352;
    assume {:nonnull} Tmp_352 != 0;
    assume Tmp_352 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_351;
    assume {:nonnull} Tmp_351 != 0;
    assume Tmp_351 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_351))] := 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    call {:si_unique_call 793} Tmp_350 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    Mem_T.INT4[Tmp_350] := controlIrql_1;
    call {:si_unique_call 794} sdv_KeAcquireSpinLock(0, Tmp_350);
    assume {:nonnull} Tmp_350 != 0;
    assume Tmp_350 > 0;
    controlIrql_1 := Mem_T.INT4[Tmp_350];
    assume {:nonnull} rp != 0;
    assume rp > 0;
    call {:si_unique_call 795} boogieTmp := SerialMoveToNewIntBuffer(Extension_18, newBuffer);
    call {:si_unique_call 796} vslice_dummy_var_228 := KeSynchronizeExecution(0, li2bplFunctionConstant731, 0);
    call {:si_unique_call 797} sdv_KeReleaseSpinLock(0, controlIrql_1);
    call {:si_unique_call 798} sdv_ExFreePool(0);
    goto L20;

  L20:
    Tmp_349 := 0;
    return;

  anon3_Then:
    call {:si_unique_call 799} sdv_ExFreePool(0);
    goto L20;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_229: int;

  anon0:
    call {:si_unique_call 800} vslice_dummy_var_229 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCIsrSw"} SerialCIsrSw(actual_InterruptObject: int, actual_Context_5: int) returns (Tmp_369: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCIsrSw"} SerialCIsrSw(actual_InterruptObject: int, actual_Context_5: int) returns (Tmp_369: int)
{
  var {:pointer} csw: int;
  var {:pointer} InterruptObject: int;
  var {:pointer} Context_5: int;
  var vslice_dummy_var_526: int;

  anon0:
    InterruptObject := actual_InterruptObject;
    Context_5 := actual_Context_5;
    csw := Context_5;
    assume {:IndirectCall} true;
    assume {:nonnull} csw != 0;
    assume csw > 0;
    assume {:nonnull} csw != 0;
    assume csw > 0;
    havoc vslice_dummy_var_526;
    call {:si_unique_call 801} Tmp_369 := SerialISR(InterruptObject, vslice_dummy_var_526);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialISR"} SerialISR(actual_InterruptObject_1: int, actual_Context_6: int) returns (Tmp_371: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialISR"} SerialISR(actual_InterruptObject_1: int, actual_Context_6: int) returns (Tmp_371: int)
{
  var {:pointer} Tmp_373: int;
  var {:scalar} Tmp_376: int;
  var {:scalar} sdv_326: int;
  var {:scalar} sdv_327: int;
  var {:scalar} ReceivedChar: int;
  var {:scalar} InterruptIdReg: int;
  var {:scalar} DetectRemoval: int;
  var {:pointer} Tmp_383: int;
  var {:scalar} Tmp_384: int;
  var {:scalar} sdv_334: int;
  var {:scalar} Tmp_388: int;
  var {:scalar} sdv_335: int;
  var {:pointer} IrpSp_3: int;
  var {:scalar} Tmp_390: int;
  var {:pointer} Tmp_391: int;
  var {:scalar} Tmp_393: int;
  var {:scalar} sdv_339: int;
  var {:scalar} ServicedAnInterrupt: int;
  var {:scalar} sdv_341: int;
  var {:scalar} Tmp_394: int;
  var {:pointer} Extension_20: int;
  var {:pointer} Tmp_396: int;
  var {:scalar} sdv_344: int;
  var {:scalar} tempLSR: int;
  var {:scalar} Tmp_397: int;
  var {:scalar} pendingCnt_3: int;
  var {:scalar} amountToWrite: int;
  var {:scalar} Tmp_399: int;
  var {:scalar} sdv_353: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;

  anon0#2:
    Context_6 := actual_Context_6;
    Extension_20 := Context_6;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 802} {:si_old_unique_call 2} InterruptIdReg := corral_nondet();
    call {:si_unique_call 803} {:si_old_unique_call 3} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_527;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_527;
    call {:si_unique_call 804} {:si_old_unique_call 6} vslice_dummy_var_238 := sdv_InterlockedIncrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto anon181_Then#2, anon181_Else#2;

  anon181_Else#2:
    assume {:partition} BAND(InterruptIdReg, 1) != 0;
    ServicedAnInterrupt := 0;
    goto L20#2;

  L20#2:
    call {:si_unique_call 861} {:si_old_unique_call 511} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_532;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_532;
    call {:si_unique_call 862} {:si_old_unique_call 514} vslice_dummy_var_239 := sdv_InterlockedIncrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    call {:si_unique_call 863} {:si_old_unique_call 516} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_533;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_533;
    call {:si_unique_call 864} {:si_old_unique_call 519} pendingCnt_3 := sdv_InterlockedDecrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto anon183_Then#2, anon183_Else#2;

  anon183_Else#2:
    assume {:partition} pendingCnt_3 == 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 873} {:si_old_unique_call 547} vslice_dummy_var_230 := KeInsertQueueDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0);
    goto anon242_Then#2, anon242_Else#2;

  anon242_Else#2:
    assume {:partition} yogi_error != 1;
    goto L34#2;

  L34#2:
    Tmp_371 := ServicedAnInterrupt;
    goto LM2#2;

  LM2#2:
    return;

  anon242_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon183_Then#2:
    assume {:partition} pendingCnt_3 != 1;
    call {:si_unique_call 865} {:si_old_unique_call 522} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_534;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_534;
    call {:si_unique_call 866} {:si_old_unique_call 525} sdv_344 := sdv_InterlockedDecrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto anon184_Then#2, anon184_Else#2;

  anon184_Else#2:
    assume {:partition} sdv_344 == 0;
    call {:si_unique_call 867} {:si_old_unique_call 528} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_535;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_535;
    call {:si_unique_call 868} {:si_old_unique_call 531} vslice_dummy_var_240 := sdv_InterlockedIncrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto L20#1;

  L20#1:
    call {:si_unique_call 869} {:si_old_unique_call 533} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_536;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_536;
    call {:si_unique_call 870} {:si_old_unique_call 536} vslice_dummy_var_239 := sdv_InterlockedIncrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    call {:si_unique_call 871} {:si_old_unique_call 538} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_537;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_537;
    call {:si_unique_call 872} {:si_old_unique_call 541} pendingCnt_3 := sdv_InterlockedDecrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto anon183_Then#1, anon183_Else#2;

  anon183_Then#1:
    assume {:partition} pendingCnt_3 != 1;
    call {:si_unique_call 874} {:si_old_unique_call 549} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_538;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_538;
    call {:si_unique_call 875} {:si_old_unique_call 552} sdv_344 := sdv_InterlockedDecrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto anon184_Then#2, anon184_Else#1;

  anon184_Else#1:
    assume {:partition} sdv_344 == 0;
    call {:si_unique_call 876} {:si_old_unique_call 555} Tmp_383 := __HAVOC_malloc(4);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    havoc vslice_dummy_var_539;
    Mem_T.INT4[Tmp_383] := vslice_dummy_var_539;
    call {:si_unique_call 877} {:si_old_unique_call 558} vslice_dummy_var_240 := sdv_InterlockedIncrement(Tmp_383);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    goto L20#0;

  L20#0:
    assume false;
    return;

  anon184_Then#2:
    assume {:partition} sdv_344 != 0;
    goto L34#2;

  anon181_Then#2:
    assume {:partition} BAND(InterruptIdReg, 1) == 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon182_Then#2, anon182_Else#2;

  anon182_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon185_Then#2, anon185_Else#2;

  anon185_Else#2:
    ServicedAnInterrupt := 1;
    goto L43#2;

  L43#2:
    InterruptIdReg := BAND(InterruptIdReg, BOR(BOR(2, 4), 8));
    goto anon244_Then#2, anon244_Else#2;

  anon244_Else#2:
    assume {:partition} InterruptIdReg != 0;
    goto anon241_Then#2, anon241_Else#2;

  anon241_Else#2:
    assume {:partition} InterruptIdReg != 2;
    goto anon240_Then#2, anon240_Else#2;

  anon240_Else#2:
    assume {:partition} InterruptIdReg != 4;
    goto anon239_Then#2, anon239_Else#2;

  anon239_Else#2:
    assume {:partition} InterruptIdReg != 6;
    goto anon238_Then#2, anon238_Else#2;

  anon238_Else#2:
    assume {:partition} InterruptIdReg == 12;
    goto L55#2;

  L55#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 806} {:si_old_unique_call 21} ReceivedChar := corral_nondet();
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc ReceivedChar;
    goto anon263_Then#2, anon263_Else#2;

  anon263_Else#2:
    assume {:partition} ReceivedChar != 0;
    goto L65#2;

  L65#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon187_Then#2, anon187_Else#2;

  anon187_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon189_Then#2, anon189_Else#2;

  anon189_Else#2:
    goto L69#2;

  L69#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon191_Then#2, anon191_Else#2;

  anon191_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_399;
    goto anon264_Then#2, anon264_Else#2;

  anon264_Else#2:
    assume {:partition} Tmp_399 != 192;
    goto L80#2;

  L80#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon194_Then#2, anon194_Else#2;

  anon194_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 811} {:si_old_unique_call 79} DetectRemoval := corral_nondet();
    goto anon195_Then#2, anon195_Else#2;

  anon195_Else#2:
    assume {:partition} BAND(DetectRemoval, 48) == 0;
    goto L81#2;

  L81#2:
    call {:si_unique_call 812} {:si_old_unique_call 82} tempLSR := SerialProcessLSR(Extension_20);
    goto anon266_Then#2, anon266_Else#2;

  anon266_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon196_Then#2, anon196_Else#2;

  anon196_Else#2:
    assume {:partition} BAND(tempLSR, 1) != 0;
    goto anon197_Then#2, anon197_Else#2;

  anon197_Else#2:
    assume {:partition} BAND(tempLSR, -98) != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon198_Then#2, anon198_Else#2;

  anon198_Else#2:
    goto L55#1;

  L55#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 830} {:si_old_unique_call 256} ReceivedChar := corral_nondet();
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc ReceivedChar;
    goto anon263_Then#1, anon263_Else#1;

  anon263_Else#1:
    assume {:partition} ReceivedChar != 0;
    goto L65#1;

  L65#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon187_Then#1, anon187_Else#1;

  anon187_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon189_Then#1, anon189_Else#1;

  anon189_Else#1:
    goto L69#1;

  L69#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon191_Then#1, anon191_Else#1;

  anon191_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_399;
    goto anon264_Then#1, anon264_Else#1;

  anon264_Else#1:
    assume {:partition} Tmp_399 != 192;
    goto L80#1;

  L80#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon194_Then#1, anon194_Else#1;

  anon194_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 835} {:si_old_unique_call 314} DetectRemoval := corral_nondet();
    goto anon195_Then#1, anon195_Else#1;

  anon195_Else#1:
    assume {:partition} BAND(DetectRemoval, 48) == 0;
    goto L81#1;

  L81#1:
    call {:si_unique_call 836} {:si_old_unique_call 317} tempLSR := SerialProcessLSR(Extension_20);
    goto anon266_Then#2, anon266_Else#1;

  anon266_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon196_Then#1, anon196_Else#1;

  anon196_Else#1:
    assume {:partition} BAND(tempLSR, 1) != 0;
    goto anon197_Then#1, anon197_Else#1;

  anon197_Else#1:
    assume {:partition} BAND(tempLSR, -98) != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon198_Then#1, anon198_Else#1;

  anon198_Else#1:
    goto L55#0;

  L55#0:
    assume false;
    return;

  anon198_Then#1:
    goto L45#1;

  L45#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 838} {:si_old_unique_call 327} InterruptIdReg := corral_nondet();
    goto anon228_Then#1, anon228_Else#1;

  anon228_Else#1:
    assume {:partition} BAND(InterruptIdReg, 1) != 0;
    call {:si_unique_call 839} {:si_old_unique_call 330} sdv_334 := SerialProcessLSR(Extension_20);
    goto anon246_Then#2, anon246_Else#1;

  anon246_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon229_Then#2, anon229_Else#1;

  anon229_Else#1:
    assume {:partition} BAND(sdv_334, 32) != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon230_Then#2, anon230_Else#1;

  anon230_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon231_Then#1, anon231_Else#1;

  anon231_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon232_Then#2, anon232_Else#1;

  anon232_Else#1:
    goto L49#1;

  L49#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon247_Then#1, anon247_Else#1;

  anon247_Else#1:
    goto L126#1;

  L126#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon248_Then#1, anon248_Else#1;

  anon248_Else#1:
    call {:si_unique_call 840} {:si_old_unique_call 343} vslice_dummy_var_233 := SerialHandleModemUpdate#1(Extension_20, 1);
    goto anon249_Then#2, anon249_Else#1;

  anon249_Else#1:
    assume {:partition} yogi_error != 1;
    goto L128#1;

  L128#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon207_Then#1, anon207_Else#1;

  anon207_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon209_Then#1, anon209_Else#1;

  anon209_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_388;
    goto anon261_Then#1, anon261_Else#1;

  anon261_Else#1:
    assume {:partition} Tmp_388 == 192;
    call {:si_unique_call 841} {:si_old_unique_call 350} vslice_dummy_var_234 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 842} {:si_old_unique_call 358} sdv_326 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon262_Then#2, anon262_Else#1;

  anon262_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon210_Then#1, anon210_Else#1;

  anon210_Else#1:
    assume {:partition} sdv_326 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L150#1;

  L150#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L45#0;

  L45#0:
    assume false;
    return;

  anon210_Then#1:
    assume {:partition} sdv_326 == 0;
    goto L150#1;

  anon262_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon261_Then#1:
    assume {:partition} Tmp_388 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L150#1;

  anon209_Then#1:
    goto L132#1;

  L132#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon208_Then#1, anon208_Else#1;

  anon208_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon212_Then#1, anon212_Else#1;

  anon212_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_384;
    goto anon257_Then#1, anon257_Else#1;

  anon257_Else#1:
    assume {:partition} Tmp_384 == 192;
    call {:si_unique_call 843} {:si_old_unique_call 372} vslice_dummy_var_235 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 844} {:si_old_unique_call 380} sdv_341 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon258_Then#2, anon258_Else#1;

  anon258_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon213_Then#1, anon213_Else#1;

  anon213_Else#1:
    assume {:partition} sdv_341 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L179#1;

  L179#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon214_Then#1, anon214_Else#1;

  anon214_Else#1:
    goto L182#1;

  L182#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L45#0;

  anon214_Then#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_376;
    goto anon259_Then#1, anon259_Else#1;

  anon259_Else#1:
    assume {:partition} Tmp_376 == 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 845} {:si_old_unique_call 395} sdv_335 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon260_Then#2, anon260_Else#1;

  anon260_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon215_Then#1, anon215_Else#1;

  anon215_Else#1:
    assume {:partition} sdv_335 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L182#1;

  anon215_Then#1:
    assume {:partition} sdv_335 == 0;
    goto L182#1;

  anon260_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon259_Then#1:
    assume {:partition} Tmp_376 != 192;
    goto L182#1;

  anon213_Then#1:
    assume {:partition} sdv_341 == 0;
    goto L179#1;

  anon258_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon257_Then#1:
    assume {:partition} Tmp_384 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L179#1;

  anon212_Then#1:
    goto L161#1;

  L161#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon211_Then#1, anon211_Else#1;

  anon211_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon217_Then#1, anon217_Else#1;

  anon217_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon218_Then#1, anon218_Else#1;

  anon218_Else#1:
    goto L198#1;

  L198#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_393;
    goto anon250_Then#1, anon250_Else#1;

  anon250_Else#1:
    assume {:partition} Tmp_393 == 192;
    call {:si_unique_call 846} {:si_old_unique_call 405} vslice_dummy_var_236 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 847} {:si_old_unique_call 413} sdv_353 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon251_Then#2, anon251_Else#1;

  anon251_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon219_Then#1, anon219_Else#1;

  anon219_Else#1:
    assume {:partition} sdv_353 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L216#1;

  L216#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 848} {:si_old_unique_call 424} vslice_dummy_var_244 := SerialInsertQueueDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon252_Then#2, anon252_Else#1;

  anon252_Else#1:
    assume {:partition} yogi_error != 1;
    goto L45#0;

  anon252_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon219_Then#1:
    assume {:partition} sdv_353 == 0;
    goto L216#1;

  anon251_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon250_Then#1:
    assume {:partition} Tmp_393 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L216#1;

  anon218_Then#1:
    goto L196#1;

  L196#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon216_Then#1, anon216_Else#1;

  anon216_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon220_Then#1, anon220_Else#1;

  anon220_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon221_Then#1, anon221_Else#1;

  anon221_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_394;
    goto L232#1;

  L232#1:
    amountToWrite := Tmp_394;
    goto L233#1;

  L233#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_397;
    goto anon253_Then#1, anon253_Else#1;

  anon253_Else#1:
    assume {:partition} Tmp_397 == 192;
    call {:si_unique_call 849} {:si_old_unique_call 436} vslice_dummy_var_237 := SerialSetRTS(Extension_20);
    goto anon223_Then#1, anon223_Else#1;

  anon223_Else#1:
    assume {:partition} amountToWrite == 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L247#1;

  L247#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 850} {:si_old_unique_call 451} sdv_327 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon254_Then#2, anon254_Else#1;

  anon254_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon224_Then#1, anon224_Else#1;

  anon224_Else#1:
    assume {:partition} sdv_327 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#1;

  L251#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon255_Then#1, anon255_Else#1;

  anon255_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc vslice_dummy_var_531;
    call {:si_unique_call 851} {:si_old_unique_call 470} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_531);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon225_Then#1, anon225_Else#1;

  anon225_Else#1:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    havoc Tmp_390;
    goto L264#1;

  L264#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_373;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 852} {:si_old_unique_call 479} vslice_dummy_var_245 := SerialInsertQueueDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon256_Then#2, anon256_Else#1;

  anon256_Else#1:
    assume {:partition} yogi_error != 1;
    goto L45#0;

  anon256_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon225_Then#1:
    Tmp_390 := 1;
    goto L264#1;

  anon255_Then#1:
    goto L45#0;

  anon224_Then#1:
    assume {:partition} sdv_327 == 0;
    goto L251#1;

  anon254_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon223_Then#1:
    assume {:partition} amountToWrite != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L247#1;

  anon253_Then#1:
    assume {:partition} Tmp_397 != 192;
    goto anon222_Then#1, anon222_Else#1;

  anon222_Else#1:
    assume {:partition} amountToWrite == 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#1;

  anon222_Then#1:
    assume {:partition} amountToWrite != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#1;

  anon221_Then#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_394;
    goto L232#1;

  anon220_Then#1:
    amountToWrite := 1;
    goto L233#1;

  anon216_Then#1:
    goto L45#0;

  anon217_Then#1:
    goto L198#1;

  anon211_Then#1:
    goto L196#1;

  anon208_Then#1:
    goto L161#1;

  anon207_Then#1:
    goto L132#1;

  anon249_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon248_Then#1:
    goto L128#1;

  anon247_Then#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon206_Then#1, anon206_Else#1;

  anon206_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon226_Then#1, anon226_Else#1;

  anon226_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon227_Then#1, anon227_Else#1;

  anon227_Else#1:
    goto L126#1;

  anon227_Then#1:
    goto L45#0;

  anon226_Then#1:
    goto L126#1;

  anon206_Then#1:
    goto L126#1;

  anon232_Then#2:
    goto L20#2;

  anon231_Then#1:
    goto L49#1;

  anon230_Then#2:
    goto L20#2;

  anon229_Then#2:
    assume {:partition} BAND(sdv_334, 32) == 0;
    goto L20#2;

  anon246_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon228_Then#1:
    assume {:partition} BAND(InterruptIdReg, 1) == 0;
    goto L43#0;

  L43#0:
    assume false;
    return;

  anon197_Then#1:
    assume {:partition} BAND(tempLSR, -98) == 0;
    goto L55#0;

  anon196_Then#1:
    assume {:partition} BAND(tempLSR, 1) == 0;
    goto L45#1;

  anon266_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon195_Then#1:
    assume {:partition} BAND(DetectRemoval, 48) != 0;
    goto L45#1;

  anon194_Then#1:
    goto L81#1;

  anon264_Then#1:
    assume {:partition} Tmp_399 == 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 831} {:si_old_unique_call 277} sdv_339 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon265_Then#2, anon265_Else#1;

  anon265_Else#1:
    assume {:partition} yogi_error != 1;
    goto anon193_Then#1, anon193_Else#1;

  anon193_Else#1:
    assume {:partition} sdv_339 == 0;
    goto L80#1;

  anon193_Then#1:
    assume {:partition} sdv_339 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L80#1;

  anon265_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon191_Then#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon192_Then#1, anon192_Else#1;

  anon192_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L80#1;

  anon192_Then#1:
    goto L80#1;

  anon189_Then#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon190_Then#1, anon190_Else#1;

  anon190_Else#1:
    goto L69#1;

  anon190_Then#1:
    goto L66#1;

  L66#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon188_Then#1, anon188_Else#1;

  anon188_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon199_Then#1, anon199_Else#1;

  anon199_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L105#1;

  L105#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon200_Then#1, anon200_Else#1;

  anon200_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon202_Then#1, anon202_Else#1;

  anon202_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L107#1;

  L107#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon201_Then#1, anon201_Else#1;

  anon201_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon203_Then#1, anon203_Else#1;

  anon203_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_391;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    havoc vslice_dummy_var_530;
    Mem_T.INT4[Tmp_391] := vslice_dummy_var_530;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_396;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 832} {:si_old_unique_call 299} vslice_dummy_var_246 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon267_Then#2, anon267_Else#1;

  anon267_Else#1:
    assume {:partition} yogi_error != 1;
    goto L101#1;

  L101#1:
    call {:si_unique_call 833} {:si_old_unique_call 303} SerialPutChar#1(Extension_20, ReceivedChar);
    goto anon268_Then#2, anon268_Else#1;

  anon268_Else#1:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon204_Then#1, anon204_Else#1;

  anon204_Else#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon205_Then#1, anon205_Else#1;

  anon205_Else#1:
    call {:si_unique_call 834} {:si_old_unique_call 310} SerialPutChar#1(Extension_20, 0);
    goto anon269_Then#2, anon269_Else#1;

  anon269_Else#1:
    assume {:partition} yogi_error != 1;
    goto L80#1;

  anon269_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon205_Then#1:
    goto L80#1;

  anon204_Then#1:
    goto L80#1;

  anon268_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon267_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon203_Then#1:
    goto L101#1;

  anon201_Then#1:
    goto L101#1;

  anon202_Then#1:
    goto L107#1;

  anon200_Then#1:
    goto L107#1;

  anon199_Then#1:
    goto L105#1;

  anon188_Then#1:
    goto L101#1;

  anon187_Then#1:
    goto L66#1;

  anon263_Then#1:
    assume {:partition} ReceivedChar == 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon186_Then#1, anon186_Else#1;

  anon186_Else#1:
    goto L80#1;

  anon186_Then#1:
    goto L65#1;

  anon198_Then#2:
    goto L45#2;

  L45#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 814} {:si_old_unique_call 92} InterruptIdReg := corral_nondet();
    goto anon228_Then#2, anon228_Else#2;

  anon228_Else#2:
    assume {:partition} BAND(InterruptIdReg, 1) != 0;
    call {:si_unique_call 815} {:si_old_unique_call 95} sdv_334 := SerialProcessLSR(Extension_20);
    goto anon246_Then#2, anon246_Else#2;

  anon246_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon229_Then#2, anon229_Else#2;

  anon229_Else#2:
    assume {:partition} BAND(sdv_334, 32) != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon230_Then#2, anon230_Else#2;

  anon230_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon231_Then#2, anon231_Else#2;

  anon231_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon232_Then#2, anon232_Else#2;

  anon232_Else#2:
    goto L49#2;

  L49#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon247_Then#2, anon247_Else#2;

  anon247_Else#2:
    goto L126#2;

  L126#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon248_Then#2, anon248_Else#2;

  anon248_Else#2:
    call {:si_unique_call 816} {:si_old_unique_call 108} vslice_dummy_var_233 := SerialHandleModemUpdate#1(Extension_20, 1);
    goto anon249_Then#2, anon249_Else#2;

  anon249_Else#2:
    assume {:partition} yogi_error != 1;
    goto L128#2;

  L128#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon207_Then#2, anon207_Else#2;

  anon207_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon209_Then#2, anon209_Else#2;

  anon209_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_388;
    goto anon261_Then#2, anon261_Else#2;

  anon261_Else#2:
    assume {:partition} Tmp_388 == 192;
    call {:si_unique_call 817} {:si_old_unique_call 115} vslice_dummy_var_234 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 818} {:si_old_unique_call 123} sdv_326 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon262_Then#2, anon262_Else#2;

  anon262_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon210_Then#2, anon210_Else#2;

  anon210_Else#2:
    assume {:partition} sdv_326 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L150#2;

  L150#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L45#1;

  anon210_Then#2:
    assume {:partition} sdv_326 == 0;
    goto L150#2;

  anon261_Then#2:
    assume {:partition} Tmp_388 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L150#2;

  anon209_Then#2:
    goto L132#2;

  L132#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon208_Then#2, anon208_Else#2;

  anon208_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon212_Then#2, anon212_Else#2;

  anon212_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_384;
    goto anon257_Then#2, anon257_Else#2;

  anon257_Else#2:
    assume {:partition} Tmp_384 == 192;
    call {:si_unique_call 819} {:si_old_unique_call 137} vslice_dummy_var_235 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 820} {:si_old_unique_call 145} sdv_341 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon258_Then#2, anon258_Else#2;

  anon258_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon213_Then#2, anon213_Else#2;

  anon213_Else#2:
    assume {:partition} sdv_341 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L179#2;

  L179#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon214_Then#2, anon214_Else#2;

  anon214_Else#2:
    goto L182#2;

  L182#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L45#1;

  anon214_Then#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_376;
    goto anon259_Then#2, anon259_Else#2;

  anon259_Else#2:
    assume {:partition} Tmp_376 == 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 821} {:si_old_unique_call 160} sdv_335 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon260_Then#2, anon260_Else#2;

  anon260_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon215_Then#2, anon215_Else#2;

  anon215_Else#2:
    assume {:partition} sdv_335 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L182#2;

  anon215_Then#2:
    assume {:partition} sdv_335 == 0;
    goto L182#2;

  anon259_Then#2:
    assume {:partition} Tmp_376 != 192;
    goto L182#2;

  anon213_Then#2:
    assume {:partition} sdv_341 == 0;
    goto L179#2;

  anon257_Then#2:
    assume {:partition} Tmp_384 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L179#2;

  anon212_Then#2:
    goto L161#2;

  L161#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon211_Then#2, anon211_Else#2;

  anon211_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon217_Then#2, anon217_Else#2;

  anon217_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon218_Then#2, anon218_Else#2;

  anon218_Else#2:
    goto L198#2;

  L198#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_393;
    goto anon250_Then#2, anon250_Else#2;

  anon250_Else#2:
    assume {:partition} Tmp_393 == 192;
    call {:si_unique_call 822} {:si_old_unique_call 170} vslice_dummy_var_236 := SerialSetRTS(Extension_20);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 823} {:si_old_unique_call 178} sdv_353 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon251_Then#2, anon251_Else#2;

  anon251_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon219_Then#2, anon219_Else#2;

  anon219_Else#2:
    assume {:partition} sdv_353 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L216#2;

  L216#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 824} {:si_old_unique_call 189} vslice_dummy_var_244 := SerialInsertQueueDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon252_Then#2, anon252_Else#2;

  anon252_Else#2:
    assume {:partition} yogi_error != 1;
    goto L45#1;

  anon219_Then#2:
    assume {:partition} sdv_353 == 0;
    goto L216#2;

  anon250_Then#2:
    assume {:partition} Tmp_393 != 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L216#2;

  anon218_Then#2:
    goto L196#2;

  L196#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon216_Then#2, anon216_Else#2;

  anon216_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon220_Then#2, anon220_Else#2;

  anon220_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon221_Then#2, anon221_Else#2;

  anon221_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_394;
    goto L232#2;

  L232#2:
    amountToWrite := Tmp_394;
    goto L233#2;

  L233#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_397;
    goto anon253_Then#2, anon253_Else#2;

  anon253_Else#2:
    assume {:partition} Tmp_397 == 192;
    call {:si_unique_call 825} {:si_old_unique_call 201} vslice_dummy_var_237 := SerialSetRTS(Extension_20);
    goto anon223_Then#2, anon223_Else#2;

  anon223_Else#2:
    assume {:partition} amountToWrite == 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L247#2;

  L247#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 826} {:si_old_unique_call 216} sdv_327 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon254_Then#2, anon254_Else#2;

  anon254_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon224_Then#2, anon224_Else#2;

  anon224_Else#2:
    assume {:partition} sdv_327 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#2;

  L251#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon255_Then#2, anon255_Else#2;

  anon255_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc vslice_dummy_var_529;
    call {:si_unique_call 827} {:si_old_unique_call 235} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_529);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon225_Then#2, anon225_Else#2;

  anon225_Else#2:
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    havoc Tmp_390;
    goto L264#2;

  L264#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_373;
    assume {:nonnull} Tmp_373 != 0;
    assume Tmp_373 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 828} {:si_old_unique_call 244} vslice_dummy_var_245 := SerialInsertQueueDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon256_Then#2, anon256_Else#2;

  anon256_Else#2:
    assume {:partition} yogi_error != 1;
    goto L45#1;

  anon225_Then#2:
    Tmp_390 := 1;
    goto L264#2;

  anon255_Then#2:
    goto L45#1;

  anon224_Then#2:
    assume {:partition} sdv_327 == 0;
    goto L251#2;

  anon223_Then#2:
    assume {:partition} amountToWrite != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L247#2;

  anon253_Then#2:
    assume {:partition} Tmp_397 != 192;
    goto anon222_Then#2, anon222_Else#2;

  anon222_Else#2:
    assume {:partition} amountToWrite == 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#2;

  anon222_Then#2:
    assume {:partition} amountToWrite != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L251#2;

  anon221_Then#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_394;
    goto L232#2;

  anon220_Then#2:
    amountToWrite := 1;
    goto L233#2;

  anon216_Then#2:
    goto L45#1;

  anon217_Then#2:
    goto L198#2;

  anon211_Then#2:
    goto L196#2;

  anon208_Then#2:
    goto L161#2;

  anon207_Then#2:
    goto L132#2;

  anon248_Then#2:
    goto L128#2;

  anon247_Then#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon206_Then#2, anon206_Else#2;

  anon206_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon226_Then#2, anon226_Else#2;

  anon226_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon227_Then#2, anon227_Else#2;

  anon227_Else#2:
    goto L126#2;

  anon227_Then#2:
    goto L45#1;

  anon226_Then#2:
    goto L126#2;

  anon206_Then#2:
    goto L126#2;

  anon231_Then#2:
    goto L49#2;

  anon228_Then#2:
    assume {:partition} BAND(InterruptIdReg, 1) == 0;
    goto L43#1;

  L43#1:
    InterruptIdReg := BAND(InterruptIdReg, BOR(BOR(2, 4), 8));
    goto anon244_Then#1, anon244_Else#1;

  anon244_Else#1:
    assume {:partition} InterruptIdReg != 0;
    goto anon241_Then#1, anon241_Else#1;

  anon241_Else#1:
    assume {:partition} InterruptIdReg != 2;
    goto anon240_Then#1, anon240_Else#1;

  anon240_Else#1:
    assume {:partition} InterruptIdReg != 4;
    goto anon239_Then#1, anon239_Else#1;

  anon239_Else#1:
    assume {:partition} InterruptIdReg != 6;
    goto anon238_Then#1, anon238_Else#1;

  anon238_Else#1:
    assume {:partition} InterruptIdReg == 12;
    goto L55#1;

  anon238_Then#1:
    assume {:partition} InterruptIdReg != 12;
    goto L45#1;

  anon239_Then#1:
    assume {:partition} InterruptIdReg == 6;
    call {:si_unique_call 829} {:si_old_unique_call 253} vslice_dummy_var_232 := SerialProcessLSR(Extension_20);
    goto anon270_Then#2, anon270_Else#1;

  anon270_Else#1:
    assume {:partition} yogi_error != 1;
    goto L45#1;

  anon270_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon240_Then#1:
    assume {:partition} InterruptIdReg == 4;
    goto L55#1;

  anon241_Then#1:
    assume {:partition} InterruptIdReg == 2;
    goto L49#1;

  anon244_Then#1:
    assume {:partition} InterruptIdReg == 0;
    call {:si_unique_call 837} {:si_old_unique_call 324} vslice_dummy_var_231 := SerialHandleModemUpdate#1(Extension_20, 0);
    goto anon245_Then#2, anon245_Else#1;

  anon245_Else#1:
    assume {:partition} yogi_error != 1;
    goto L45#1;

  anon245_Then#2:
    assume {:partition} yogi_error == 1;
    goto LM2#2;

  anon197_Then#2:
    assume {:partition} BAND(tempLSR, -98) == 0;
    goto L55#1;

  anon196_Then#2:
    assume {:partition} BAND(tempLSR, 1) == 0;
    goto L45#2;

  anon195_Then#2:
    assume {:partition} BAND(DetectRemoval, 48) != 0;
    goto L45#2;

  anon194_Then#2:
    goto L81#2;

  anon264_Then#2:
    assume {:partition} Tmp_399 == 192;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 807} {:si_old_unique_call 42} sdv_339 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon265_Then#2, anon265_Else#2;

  anon265_Else#2:
    assume {:partition} yogi_error != 1;
    goto anon193_Then#2, anon193_Else#2;

  anon193_Else#2:
    assume {:partition} sdv_339 == 0;
    goto L80#2;

  anon193_Then#2:
    assume {:partition} sdv_339 != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L80#2;

  anon191_Then#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon192_Then#2, anon192_Else#2;

  anon192_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L80#2;

  anon192_Then#2:
    goto L80#2;

  anon189_Then#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon190_Then#2, anon190_Else#2;

  anon190_Else#2:
    goto L69#2;

  anon190_Then#2:
    goto L66#2;

  L66#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon188_Then#2, anon188_Else#2;

  anon188_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon199_Then#2, anon199_Else#2;

  anon199_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L105#2;

  L105#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon200_Then#2, anon200_Else#2;

  anon200_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon202_Then#2, anon202_Else#2;

  anon202_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L107#2;

  L107#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon201_Then#2, anon201_Else#2;

  anon201_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon203_Then#2, anon203_Else#2;

  anon203_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_391;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    havoc vslice_dummy_var_528;
    Mem_T.INT4[Tmp_391] := vslice_dummy_var_528;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc Tmp_396;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 808} {:si_old_unique_call 64} vslice_dummy_var_246 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_20), 0, 0, Extension_20);
    goto anon267_Then#2, anon267_Else#2;

  anon267_Else#2:
    assume {:partition} yogi_error != 1;
    goto L101#2;

  L101#2:
    call {:si_unique_call 809} {:si_old_unique_call 68} SerialPutChar#1(Extension_20, ReceivedChar);
    goto anon268_Then#2, anon268_Else#2;

  anon268_Else#2:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon204_Then#2, anon204_Else#2;

  anon204_Else#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon205_Then#2, anon205_Else#2;

  anon205_Else#2:
    call {:si_unique_call 810} {:si_old_unique_call 75} SerialPutChar#1(Extension_20, 0);
    goto anon269_Then#2, anon269_Else#2;

  anon269_Else#2:
    assume {:partition} yogi_error != 1;
    goto L80#2;

  anon205_Then#2:
    goto L80#2;

  anon204_Then#2:
    goto L80#2;

  anon203_Then#2:
    goto L101#2;

  anon201_Then#2:
    goto L101#2;

  anon202_Then#2:
    goto L107#2;

  anon200_Then#2:
    goto L107#2;

  anon199_Then#2:
    goto L105#2;

  anon188_Then#2:
    goto L101#2;

  anon187_Then#2:
    goto L66#2;

  anon263_Then#2:
    assume {:partition} ReceivedChar == 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon186_Then#2, anon186_Else#2;

  anon186_Else#2:
    goto L80#2;

  anon186_Then#2:
    goto L65#2;

  anon238_Then#2:
    assume {:partition} InterruptIdReg != 12;
    goto L45#2;

  anon239_Then#2:
    assume {:partition} InterruptIdReg == 6;
    call {:si_unique_call 805} {:si_old_unique_call 18} vslice_dummy_var_232 := SerialProcessLSR(Extension_20);
    goto anon270_Then#2, anon270_Else#2;

  anon270_Else#2:
    assume {:partition} yogi_error != 1;
    goto L45#2;

  anon240_Then#2:
    assume {:partition} InterruptIdReg == 4;
    goto L55#2;

  anon241_Then#2:
    assume {:partition} InterruptIdReg == 2;
    goto L49#2;

  anon244_Then#2:
    assume {:partition} InterruptIdReg == 0;
    call {:si_unique_call 813} {:si_old_unique_call 89} vslice_dummy_var_231 := SerialHandleModemUpdate#1(Extension_20, 0);
    goto anon245_Then#2, anon245_Else#2;

  anon245_Else#2:
    assume {:partition} yogi_error != 1;
    goto L45#2;

  anon185_Then#2:
    goto L40#2;

  L40#2:
    ServicedAnInterrupt := 1;
    goto L301#2;

  L301#2:
    InterruptIdReg := BAND(InterruptIdReg, BNOT(BOR(64, 128)));
    goto anon243_Then#2, anon243_Else#2;

  anon243_Else#2:
    assume {:partition} InterruptIdReg != 0;
    goto anon237_Then#2, anon237_Else#2;

  anon237_Else#2:
    assume {:partition} InterruptIdReg != 2;
    goto anon236_Then#2, anon236_Else#2;

  anon236_Else#2:
    assume {:partition} InterruptIdReg != 4;
    goto anon235_Then#2, anon235_Else#2;

  anon235_Else#2:
    assume {:partition} InterruptIdReg != 6;
    goto anon234_Then#2, anon234_Else#2;

  anon234_Else#2:
    assume {:partition} InterruptIdReg != 12;
    goto L312#2;

  L312#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 856} {:si_old_unique_call 494} InterruptIdReg := corral_nondet();
    goto anon233_Then#2, anon233_Else#2;

  anon233_Else#2:
    assume {:partition} BAND(InterruptIdReg, 1) == 0;
    goto L301#1;

  L301#1:
    InterruptIdReg := BAND(InterruptIdReg, BNOT(BOR(64, 128)));
    goto anon243_Then#1, anon243_Else#1;

  anon243_Else#1:
    assume {:partition} InterruptIdReg != 0;
    goto anon237_Then#1, anon237_Else#1;

  anon237_Else#1:
    assume {:partition} InterruptIdReg != 2;
    goto anon236_Then#1, anon236_Else#1;

  anon236_Else#1:
    assume {:partition} InterruptIdReg != 4;
    goto anon235_Then#1, anon235_Else#1;

  anon235_Else#1:
    assume {:partition} InterruptIdReg != 6;
    goto anon234_Then#1, anon234_Else#1;

  anon234_Else#1:
    assume {:partition} InterruptIdReg != 12;
    goto L312#1;

  L312#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 860} {:si_old_unique_call 509} InterruptIdReg := corral_nondet();
    goto anon233_Then#2, anon233_Else#1;

  anon233_Else#1:
    assume {:partition} BAND(InterruptIdReg, 1) == 0;
    goto L301#0;

  L301#0:
    assume false;
    return;

  anon233_Then#2:
    assume {:partition} BAND(InterruptIdReg, 1) != 0;
    goto L20#2;

  anon234_Then#1:
    assume {:partition} InterruptIdReg == 12;
    goto L306#1;

  L306#1:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 858} {:si_old_unique_call 505} vslice_dummy_var_242 := corral_nondet();
    goto L312#1;

  anon235_Then#1:
    assume {:partition} InterruptIdReg == 6;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 857} {:si_old_unique_call 503} vslice_dummy_var_243 := corral_nondet();
    goto L312#1;

  anon236_Then#1:
    assume {:partition} InterruptIdReg == 4;
    goto L306#1;

  anon237_Then#1:
    assume {:partition} InterruptIdReg == 2;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L312#1;

  anon243_Then#1:
    assume {:partition} InterruptIdReg == 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 859} {:si_old_unique_call 507} vslice_dummy_var_241 := corral_nondet();
    goto L312#1;

  anon234_Then#2:
    assume {:partition} InterruptIdReg == 12;
    goto L306#2;

  L306#2:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 854} {:si_old_unique_call 490} vslice_dummy_var_242 := corral_nondet();
    goto L312#2;

  anon235_Then#2:
    assume {:partition} InterruptIdReg == 6;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 853} {:si_old_unique_call 488} vslice_dummy_var_243 := corral_nondet();
    goto L312#2;

  anon236_Then#2:
    assume {:partition} InterruptIdReg == 4;
    goto L306#2;

  anon237_Then#2:
    assume {:partition} InterruptIdReg == 2;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L312#2;

  anon243_Then#2:
    assume {:partition} InterruptIdReg == 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 855} {:si_old_unique_call 492} vslice_dummy_var_241 := corral_nondet();
    goto L312#2;

  anon182_Then#2:
    goto L40#2;
}



procedure {:origName "SerialProcessLSR"} SerialProcessLSR(actual_Extension_21: int) returns (Tmp_404: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialProcessLSR"} SerialProcessLSR(actual_Extension_21: int) returns (Tmp_404: int)
{
  var {:scalar} LineStatus: int;
  var {:scalar} Tmp_408: int;
  var {:scalar} sdv_359: int;
  var {:scalar} Tmp_411: int;
  var {:scalar} sdv_361: int;
  var {:pointer} Tmp_413: int;
  var {:pointer} Tmp_415: int;
  var {:pointer} Extension_21: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_544: int;
  var vslice_dummy_var_545: int;

  anon0:
    Extension_21 := actual_Extension_21;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 878} LineStatus := corral_nondet();
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} BAND(LineStatus, 32) == 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L154;

  L154:
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} BAND(LineStatus, -98) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_540;
    call {:si_unique_call 879} SerialPutChar#1(Extension_21, vslice_dummy_var_540);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    Tmp_408 := 1;
    goto L20;

  L20:
    Tmp_411 := Tmp_408;
    call {:si_unique_call 880} SerialPutChar#1(Extension_21, Tmp_411);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 881} SerialPutChar#1(Extension_21, LineStatus);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 882} sdv_359 := corral_nondet();
    call {:si_unique_call 883} SerialPutChar#1(Extension_21, sdv_359);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} yogi_error != 1;
    goto L13;

  L13:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} BAND(LineStatus, 2) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_541;
    call {:si_unique_call 884} SerialPutChar#1(Extension_21, vslice_dummy_var_541);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} yogi_error != 1;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 885} vslice_dummy_var_248 := corral_nondet();
    goto L37;

  L37:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} BAND(LineStatus, 16) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_542;
    call {:si_unique_call 886} SerialPutChar#1(Extension_21, vslice_dummy_var_542);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 887} vslice_dummy_var_247 := SerialInsertQueueDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(Extension_21), 0, 0, Extension_21);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} BAND(LineStatus, 14) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} BAND(LineStatus, 16) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L78;

  L78:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_415;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    havoc vslice_dummy_var_543;
    Mem_T.INT4[Tmp_415] := vslice_dummy_var_543;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_413;
    assume {:nonnull} Tmp_413 != 0;
    assume Tmp_413 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 888} vslice_dummy_var_249 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_21), 0, 0, Extension_21);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} yogi_error != 1;
    goto L73;

  L73:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} BAND(LineStatus, 32) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L11;

  L11:
    Tmp_404 := LineStatus;
    goto LM2;

  LM2:
    return;

  anon95_Then:
    goto L11;

  anon88_Then:
    assume {:partition} BAND(LineStatus, 32) == 0;
    goto L11;

  anon109_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon94_Then:
    goto L73;

  anon92_Then:
    goto L73;

  anon93_Then:
    assume {:partition} BAND(LineStatus, 16) == 0;
    goto L78;

  anon90_Then:
    goto L78;

  anon91_Then:
    assume {:partition} BAND(LineStatus, 14) == 0;
    goto L75;

  anon89_Then:
    goto L75;

  anon87_Then:
    goto L73;

  anon108_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    goto L69;

  anon107_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon106_Then:
    goto L65;

  anon82_Then:
    assume {:partition} BAND(LineStatus, 16) == 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} BAND(LineStatus, 4) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_544;
    call {:si_unique_call 889} SerialPutChar#1(Extension_21, vslice_dummy_var_544);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} yogi_error != 1;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 890} vslice_dummy_var_250 := corral_nondet();
    goto L98;

  L98:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} BAND(LineStatus, 8) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_545;
    call {:si_unique_call 891} SerialPutChar#1(Extension_21, vslice_dummy_var_545);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} yogi_error != 1;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 892} vslice_dummy_var_251 := corral_nondet();
    goto L65;

  anon98_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    goto L65;

  anon113_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon112_Then:
    goto L65;

  anon96_Then:
    assume {:partition} BAND(LineStatus, 8) == 0;
    goto L65;

  anon97_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    goto L98;

  anon111_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon110_Then:
    goto L98;

  anon85_Then:
    assume {:partition} BAND(LineStatus, 4) == 0;
    goto L98;

  anon84_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    goto L37;

  anon105_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon104_Then:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} BAND(LineStatus, 1) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    call {:si_unique_call 893} sdv_361 := corral_nondet();
    call {:si_unique_call 894} SerialPutChar#1(Extension_21, sdv_361);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon114_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon83_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    goto L37;

  anon79_Then:
    assume {:partition} BAND(LineStatus, 2) == 0;
    goto L37;

  anon103_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    goto L13;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon101_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} BAND(LineStatus, 1) == 0;
    Tmp_408 := 2;
    goto L20;

  anon100_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    goto L13;

  anon99_Then:
    assume {:partition} BAND(LineStatus, -98) == 0;
    goto L11;

  anon77_Then:
    assume {:partition} BAND(LineStatus, 32) != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L154;
}



procedure {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_14: int, actual_Irp_14: int, actual_SerialSyncEventIn: int) returns (Tmp_418: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_14: int, actual_Irp_14: int, actual_SerialSyncEventIn: int) returns (Tmp_418: int)
{
  var {:pointer} SerialSyncEvent: int;
  var {:pointer} SerialSyncEventIn: int;
  var vslice_dummy_var_252: int;

  anon0:
    SerialSyncEventIn := actual_SerialSyncEventIn;
    SerialSyncEvent := SerialSyncEventIn;
    call {:si_unique_call 895} vslice_dummy_var_252 := KeSetEvent(SerialSyncEvent, 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    Tmp_418 := -1073741802;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_253: int;

  anon0:
    call {:si_unique_call 896} vslice_dummy_var_253 := __HAVOC_malloc(4);
    assume currentInstance_sdv_static_local_variable_304 == 0;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_20: int, actual_PDrvObj: int) returns (Tmp_422: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_422 == -1073741811 || Tmp_422 == -1073741808 || Tmp_422 == -1073741823 || Tmp_422 == 0 || Tmp_422 == 5 || Tmp_422 == -1073741789 || Tmp_422 == -1073741670 || Tmp_422 == -1073741772 || Tmp_422 == -1073741824;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt_20: int, actual_PDrvObj: int) returns (Tmp_422: int)
{
  var {:scalar} Tmp_423: int;
  var {:pointer} Tmp_424: int;
  var {:scalar} bufLen: int;
  var {:scalar} Tmp_425: int;
  var {:scalar} Tmp_427: int;
  var {:scalar} Tmp_428: int;
  var {:scalar} Tmp_429: int;
  var {:pointer} Tmp_430: int;
  var {:pointer} keyHandle: int;
  var {:scalar} Tmp_433: int;
  var {:pointer} Tmp_434: int;
  var {:pointer} pRegName: int;
  var {:scalar} sdv_372: int;
  var {:pointer} sdv_374: int;
  var {:scalar} Tmp_436: int;
  var {:scalar} Tmp_437: int;
  var {:scalar} Tmp_438: int;
  var {:pointer} Tmp_439: int;
  var {:scalar} Tmp_440: int;
  var {:pointer} Tmp_442: int;
  var {:scalar} Tmp_446: int;
  var {:pointer} sdv_384: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_447: int;
  var {:pointer} pDevObj_1: int;
  var {:pointer} Tmp_449: int;
  var {:pointer} Tmp_452: int;
  var {:scalar} Tmp_453: int;
  var {:pointer} Tmp_455: int;
  var {:pointer} PDevExt_20: int;
  var {:pointer} PDrvObj: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;

  anon0:
    call {:si_unique_call 897} Tmp_423 := __HAVOC_malloc(20);
    call {:si_unique_call 898} Tmp_425 := __HAVOC_malloc(20);
    call {:si_unique_call 899} Tmp_427 := __HAVOC_malloc(20);
    call {:si_unique_call 900} Tmp_428 := __HAVOC_malloc(20);
    call {:si_unique_call 901} Tmp_433 := __HAVOC_malloc(20);
    call {:si_unique_call 902} pRegName := __HAVOC_malloc(4);
    call {:si_unique_call 903} Tmp_438 := __HAVOC_malloc(20);
    call {:si_unique_call 904} Tmp_440 := __HAVOC_malloc(20);
    call {:si_unique_call 905} Tmp_446 := __HAVOC_malloc(20);
    PDevExt_20 := actual_PDevExt_20;
    PDrvObj := actual_PDrvObj;
    call {:si_unique_call 906} Tmp_424 := __HAVOC_malloc(156);
    call {:si_unique_call 907} vslice_dummy_var_259 := __HAVOC_malloc(44);
    call {:si_unique_call 908} Tmp_430 := __HAVOC_malloc(184);
    call {:si_unique_call 909} Tmp_434 := __HAVOC_malloc(64);
    call {:si_unique_call 910} Tmp_439 := __HAVOC_malloc(156);
    call {:si_unique_call 911} Tmp_442 := __HAVOC_malloc(192);
    call {:si_unique_call 912} vslice_dummy_var_260 := __HAVOC_malloc(44);
    call {:si_unique_call 913} Tmp_447 := __HAVOC_malloc(236);
    call {:si_unique_call 914} Tmp_449 := __HAVOC_malloc(100);
    call {:si_unique_call 915} Tmp_455 := __HAVOC_malloc(200);
    status_15 := 0;
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    call {:si_unique_call 916} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc pDevObj_1;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 917} status_15 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_15 != 0;
    Tmp_422 := status_15;
    goto L1;

  L1:
    return;

  anon35_Then:
    assume {:partition} status_15 == 0;
    Tmp_449 := strConst__li2bpl71;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 918} vslice_dummy_var_261 := SerialGetRegistryKeyValue(keyHandle, Tmp_449, 50, SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_20), 4);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_20)] != 0;
    call {:si_unique_call 919} vslice_dummy_var_254 := ZwClose(0);
    Tmp_422 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt_20)] == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 920} status_15 := SerialReadSymName(PDevExt_20, keyHandle, SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt_20), pRegName);
    call {:si_unique_call 921} vslice_dummy_var_255 := ZwClose(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_15 < 0;
    goto L111;

  L111:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} status_15 >= 0;
    goto L113;

  L113:
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 922} sdv_ExFreePool(0);
    goto L114;

  L114:
    Tmp_422 := status_15;
    goto L1;

  anon44_Then:
    goto L114;

  anon42_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 923} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L118;

  L118:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 924} vslice_dummy_var_257 := IoDeleteSymbolicLink(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L123;

  L123:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 925} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L128;

  L128:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 926} vslice_dummy_var_264 := RtlDeleteRegistryValue(4, 0, 0);
    goto L133;

  L133:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 927} vslice_dummy_var_258 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 928} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L137;

  L137:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 929} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L113;

  anon49_Then:
    goto L113;

  anon48_Then:
    goto L137;

  anon47_Then:
    goto L133;

  anon46_Then:
    goto L128;

  anon45_Then:
    goto L123;

  anon43_Then:
    goto L118;

  anon37_Then:
    assume {:partition} 0 <= status_15;
    bufLen := sdv_372 * 2 + 2;
    call {:si_unique_call 930} sdv_384 := ExAllocatePoolWithTag(1, bufLen, -666022077);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 931} sdv_RtlZeroMemory(0, bufLen);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 932} vslice_dummy_var_262 := corral_nondet();
    call {:si_unique_call 933} sdv_374 := ExAllocatePoolWithTag(1, 66, -666022077);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc Tmp_429;
    call {:si_unique_call 934} sdv_RtlZeroMemory(0, Tmp_429);
    call {:si_unique_call 935} vslice_dummy_var_256 := corral_nondet();
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc Tmp_452;
    call {:si_unique_call 936} sdv_RtlZeroMemory(0, 2);
    Tmp_434 := strConst__li2bpl72;
    call {:si_unique_call 937} vslice_dummy_var_263 := SerialDbgPrintEx(4, Tmp_434);
    call {:si_unique_call 938} status_15 := IoCreateSymbolicLink(0, 0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc Tmp_436;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 939} status_15 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_436);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    call {:si_unique_call 940} status_15 := IoRegisterDeviceInterface(0, 0, 0, DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt_20));
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 941} status_15 := IoSetDeviceInterfaceState(0, 1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_15 >= 0;
    goto L111;

  anon41_Then:
    assume {:partition} 0 > status_15;
    Tmp_430 := strConst__li2bpl74;
    call {:si_unique_call 942} vslice_dummy_var_265 := SerialDbgPrintEx(14, Tmp_430);
    goto L111;

  anon40_Then:
    assume {:partition} 0 > status_15;
    Tmp_455 := strConst__li2bpl73;
    call {:si_unique_call 943} vslice_dummy_var_266 := SerialDbgPrintEx(14, Tmp_455);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto L111;

  anon39_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc Tmp_437;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc vslice_dummy_var_546;
    call {:si_unique_call 944} SerialLogError(PDrvObj, pDevObj_1, Tmp_423, Tmp_440, 0, 0, 0, 53, status_15, 393221, Tmp_437, vslice_dummy_var_546, 0, 0);
    Tmp_447 := strConst__li2bpl76;
    call {:si_unique_call 945} vslice_dummy_var_267 := SerialDbgPrintEx(14, Tmp_447);
    goto L111;

  anon38_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc Tmp_453;
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    assume {:nonnull} Tmp_438 != 0;
    assume Tmp_438 > 0;
    assume {:nonnull} Tmp_438 != 0;
    assume Tmp_438 > 0;
    assume {:nonnull} Tmp_438 != 0;
    assume Tmp_438 > 0;
    assume {:nonnull} Tmp_438 != 0;
    assume Tmp_438 > 0;
    assume {:nonnull} Tmp_438 != 0;
    assume Tmp_438 > 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    havoc vslice_dummy_var_547;
    call {:si_unique_call 946} SerialLogError(PDrvObj, pDevObj_1, Tmp_438, Tmp_446, 0, 0, 0, 52, status_15, 393220, Tmp_453, vslice_dummy_var_547, 0, 0);
    Tmp_442 := strConst__li2bpl77;
    call {:si_unique_call 947} vslice_dummy_var_268 := SerialDbgPrintEx(14, Tmp_442);
    goto L111;

  anon51_Then:
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_425 != 0;
    assume Tmp_425 > 0;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    call {:si_unique_call 948} SerialLogError(PDrvObj, pDevObj_1, Tmp_433, Tmp_425, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_439 := strConst__li2bpl78;
    call {:si_unique_call 949} vslice_dummy_var_269 := SerialDbgPrintEx(14, Tmp_439);
    status_15 := -1073741670;
    goto L111;

  anon50_Then:
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    call {:si_unique_call 950} SerialLogError(PDrvObj, pDevObj_1, Tmp_427, Tmp_428, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_424 := strConst__li2bpl79;
    call {:si_unique_call 951} vslice_dummy_var_270 := SerialDbgPrintEx(14, Tmp_424);
    status_15 := -1073741670;
    goto L111;
}



procedure {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int)
{
  var {:pointer} Tmp_456: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} PListEntry: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;

  anon0:
    call {:si_unique_call 952} vslice_dummy_var_271 := __HAVOC_malloc(4);
    PListEntry := actual_PListEntry;
    call {:si_unique_call 953} Tmp_456 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    Mem_T.INT4[Tmp_456] := oldIrql_8;
    call {:si_unique_call 954} sdv_KeAcquireSpinLock(0, Tmp_456);
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_456];
    call {:si_unique_call 955} vslice_dummy_var_272 := sdv_InsertTailList(AllDevObjs__SERIAL_GLOBALS(SerialGlobals), PListEntry);
    call {:si_unique_call 956} sdv_KeReleaseSpinLock(0, oldIrql_8);
    return;
}



procedure {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_21: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_458: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_458 == -1073741811 || Tmp_458 == -1073741823 || Tmp_458 == 0 || Tmp_458 == 5 || Tmp_458 == -1073741789 || Tmp_458 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_21: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_458: int)
{
  var {:pointer} Tmp_459: int;
  var {:pointer} Tmp_460: int;
  var {:scalar} linkName: int;
  var {:scalar} Tmp_462: int;
  var {:pointer} Tmp_464: int;
  var {:pointer} sdv_391: int;
  var {:scalar} Tmp_465: int;
  var {:pointer} Tmp_466: int;
  var {:scalar} Tmp_467: int;
  var {:scalar} Tmp_468: int;
  var {:pointer} sdv_393: int;
  var {:pointer} sdv_395: int;
  var {:scalar} Tmp_469: int;
  var {:pointer} Tmp_470: int;
  var {:scalar} Tmp_471: int;
  var {:scalar} Tmp_472: int;
  var {:pointer} Tmp_473: int;
  var {:scalar} status_16: int;
  var {:pointer} pDevObj_2: int;
  var {:scalar} Tmp_475: int;
  var {:pointer} pDrvObj_1: int;
  var {:pointer} PDevExt_21: int;
  var {:pointer} hRegKey: int;
  var {:pointer} PSymName: int;
  var {:pointer} PpRegName: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;

  anon0:
    call {:si_unique_call 957} linkName := __HAVOC_malloc(12);
    call {:si_unique_call 958} Tmp_462 := __HAVOC_malloc(20);
    call {:si_unique_call 959} Tmp_469 := __HAVOC_malloc(20);
    call {:si_unique_call 960} Tmp_471 := __HAVOC_malloc(20);
    call {:si_unique_call 961} Tmp_475 := __HAVOC_malloc(20);
    PDevExt_21 := actual_PDevExt_21;
    hRegKey := actual_hRegKey;
    PSymName := actual_PSymName;
    PpRegName := actual_PpRegName;
    call {:si_unique_call 962} Tmp_459 := __HAVOC_malloc(168);
    call {:si_unique_call 963} Tmp_460 := __HAVOC_malloc(60);
    call {:si_unique_call 964} vslice_dummy_var_275 := __HAVOC_malloc(8);
    call {:si_unique_call 965} Tmp_464 := __HAVOC_malloc(148);
    call {:si_unique_call 966} Tmp_466 := __HAVOC_malloc(36);
    call {:si_unique_call 967} Tmp_470 := __HAVOC_malloc(44);
    call {:si_unique_call 968} Tmp_473 := __HAVOC_malloc(164);
    call {:si_unique_call 969} vslice_dummy_var_276 := __HAVOC_malloc(8);
    call {:si_unique_call 970} vslice_dummy_var_277 := __HAVOC_malloc(44);
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    havoc pDevObj_2;
    assume {:nonnull} pDevObj_2 != 0;
    assume pDevObj_2 > 0;
    havoc pDrvObj_1;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    call {:si_unique_call 971} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_472;
    call {:si_unique_call 972} sdv_391 := ExAllocatePoolWithTag(257, Tmp_472, -666022077);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_468;
    call {:si_unique_call 973} sdv_RtlZeroMemory(0, Tmp_468);
    call {:si_unique_call 974} sdv_395 := ExAllocatePoolWithTag(257, 258, -666022077);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    Tmp_466 := strConst__li2bpl80;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_548;
    call {:si_unique_call 975} status_16 := SerialGetRegistryKeyValue(hRegKey, Tmp_466, 18, vslice_dummy_var_548, 256);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_16 >= 0;
    goto L39;

  L39:
    call {:si_unique_call 976} vslice_dummy_var_278 := corral_nondet();
    call {:si_unique_call 977} vslice_dummy_var_279 := corral_nondet();
    call {:si_unique_call 978} vslice_dummy_var_280 := corral_nondet();
    call {:si_unique_call 979} vslice_dummy_var_273 := corral_nondet();
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_467;
    call {:si_unique_call 980} sdv_393 := ExAllocatePoolWithTag(257, Tmp_467, -666022077);
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_465;
    call {:si_unique_call 981} sdv_RtlZeroMemory(0, Tmp_465);
    call {:si_unique_call 982} vslice_dummy_var_274 := corral_nondet();
    Tmp_460 := strConst__li2bpl84;
    call {:si_unique_call 983} vslice_dummy_var_281 := SerialDbgPrintEx(4, Tmp_460);
    goto L69;

  L69:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 984} sdv_ExFreePool(0);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto L70;

  L70:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_16 >= 0;
    goto L76;

  L76:
    Tmp_458 := status_16;
    return;

  anon19_Then:
    assume {:partition} 0 > status_16;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 985} sdv_ExFreePool(0);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto L76;

  anon20_Then:
    goto L76;

  anon18_Then:
    goto L70;

  anon24_Then:
    status_16 := -1073741670;
    goto L69;

  anon17_Then:
    assume {:partition} 0 > status_16;
    Tmp_470 := strConst__li2bpl81;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_549;
    call {:si_unique_call 986} status_16 := SerialGetRegistryKeyValue(hRegKey, Tmp_470, 22, vslice_dummy_var_549, 256);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_16 < 0;
    Tmp_473 := strConst__li2bpl85;
    call {:si_unique_call 987} vslice_dummy_var_282 := SerialDbgPrintEx(14, Tmp_473);
    goto L69;

  anon21_Then:
    assume {:partition} 0 <= status_16;
    goto L39;

  anon23_Then:
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    assume {:nonnull} Tmp_462 != 0;
    assume Tmp_462 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    call {:si_unique_call 988} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_469, Tmp_462, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_464 := strConst__li2bpl86;
    call {:si_unique_call 989} vslice_dummy_var_283 := SerialDbgPrintEx(14, Tmp_464);
    status_16 := -1073741670;
    goto L69;

  anon22_Then:
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    call {:si_unique_call 990} SerialLogError(pDrvObj_1, pDevObj_2, Tmp_471, Tmp_475, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_459 := strConst__li2bpl87;
    call {:si_unique_call 991} vslice_dummy_var_284 := SerialDbgPrintEx(14, Tmp_459);
    status_16 := -1073741670;
    goto L69;
}



procedure {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_477: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_477 == -1073348588 || Tmp_477 == -1073348587 || Tmp_477 == -1073348586 || Tmp_477 == -1073348585 || Tmp_477 == -1073348584 || Tmp_477 == 0 || Tmp_477 == -1073348583 || Tmp_477 == -1073741811 || Tmp_477 == -1073741808 || Tmp_477 == -1073741823 || Tmp_477 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj_13: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_477: int)
{
  var {:dopa} {:scalar} ioResIndex: int;
  var {:pointer} Tmp_478: int;
  var {:dopa} {:scalar} isMulti: int;
  var {:scalar} interfaceType: int;
  var {:scalar} count: int;
  var {:pointer} Tmp_479: int;
  var {:scalar} Tmp_480: int;
  var {:pointer} Tmp_481: int;
  var {:pointer} Tmp_482: int;
  var {:scalar} gotIO: int;
  var {:pointer} Tmp_483: int;
  var {:scalar} Tmp_484: int;
  var {:pointer} Tmp_485: int;
  var {:pointer} pPartialTrResourceDesc: int;
  var {:pointer} pDevExt_10: int;
  var {:scalar} Tmp_486: int;
  var {:pointer} Tmp_487: int;
  var {:pointer} Tmp_488: int;
  var {:scalar} Tmp_489: int;
  var {:pointer} Tmp_490: int;
  var {:pointer} Tmp_491: int;
  var {:pointer} Tmp_492: int;
  var {:pointer} Tmp_493: int;
  var {:pointer} Tmp_494: int;
  var {:pointer} Tmp_495: int;
  var {:pointer} pFullResourceDesc: int;
  var {:scalar} Tmp_496: int;
  var {:pointer} Tmp_497: int;
  var {:pointer} Tmp_498: int;
  var {:scalar} foundOne: int;
  var {:pointer} Tmp_499: int;
  var {:pointer} Tmp_500: int;
  var {:scalar} curIoIndex: int;
  var {:scalar} gotInt: int;
  var {:pointer} Tmp_501: int;
  var {:scalar} badValue: int;
  var {:pointer} Tmp_502: int;
  var {:pointer} pPartialTrResourceList: int;
  var {:scalar} i: int;
  var {:scalar} defaultInterfaceType: int;
  var {:pointer} pPartialResourceList: int;
  var {:pointer} Tmp_503: int;
  var {:pointer} pFullTrResourceDesc: int;
  var {:pointer} Tmp_504: int;
  var {:pointer} Tmp_505: int;
  var {:pointer} Tmp_506: int;
  var {:pointer} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:pointer} keyHandle_1: int;
  var {:pointer} Tmp_509: int;
  var {:scalar} defaultClockRate: int;
  var {:scalar} Tmp_510: int;
  var {:scalar} Tmp_511: int;
  var {:scalar} Tmp_512: int;
  var {:pointer} Tmp_513: int;
  var {:pointer} Tmp_514: int;
  var {:scalar} Tmp_515: int;
  var {:pointer} Tmp_516: int;
  var {:pointer} Tmp_517: int;
  var {:pointer} Tmp_518: int;
  var {:scalar} Tmp_519: int;
  var {:pointer} sDeviceData: int;
  var {:scalar} Tmp_520: int;
  var {:scalar} gotISR: int;
  var {:pointer} Tmp_521: int;
  var {:scalar} foundIt: int;
  var {:scalar} Tmp_522: int;
  var {:scalar} Tmp_523: int;
  var {:pointer} Tmp_524: int;
  var {:pointer} Tmp_525: int;
  var {:pointer} Tmp_526: int;
  var {:scalar} Tmp_528: int;
  var {:pointer} Tmp_529: int;
  var {:pointer} Tmp_530: int;
  var {:pointer} Tmp_531: int;
  var {:scalar} status_17: int;
  var {:scalar} Tmp_532: int;
  var {:scalar} Tmp_533: int;
  var {:scalar} Tmp_534: int;
  var {:scalar} gotMem: int;
  var {:pointer} Tmp_535: int;
  var {:pointer} pPartialResourceDesc: int;
  var {:scalar} Tmp_536: int;
  var {:scalar} Tmp_537: int;
  var {:pointer} PDevObj_13: int;
  var {:pointer} PResList: int;
  var {:pointer} PTrResList: int;
  var {:pointer} PConfig: int;
  var {:pointer} PUserData: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_558: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;
  var vslice_dummy_var_571: int;
  var vslice_dummy_var_572: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;

  anon0:
    call {:si_unique_call 992} ioResIndex := __HAVOC_malloc(4);
    call {:si_unique_call 993} isMulti := __HAVOC_malloc(4);
    call {:si_unique_call 994} Tmp_484 := __HAVOC_malloc(20);
    call {:si_unique_call 995} Tmp_486 := __HAVOC_malloc(20);
    call {:si_unique_call 996} Tmp_496 := __HAVOC_malloc(20);
    call {:si_unique_call 997} Tmp_511 := __HAVOC_malloc(20);
    call {:si_unique_call 998} Tmp_512 := __HAVOC_malloc(20);
    call {:si_unique_call 999} Tmp_515 := __HAVOC_malloc(20);
    call {:si_unique_call 1000} Tmp_519 := __HAVOC_malloc(20);
    call {:si_unique_call 1001} Tmp_522 := __HAVOC_malloc(20);
    call {:si_unique_call 1002} Tmp_532 := __HAVOC_malloc(20);
    call {:si_unique_call 1003} Tmp_534 := __HAVOC_malloc(20);
    PDevObj_13 := actual_PDevObj_13;
    PResList := actual_PResList;
    PTrResList := actual_PTrResList;
    PConfig := actual_PConfig;
    PUserData := actual_PUserData;
    call {:si_unique_call 1004} Tmp_478 := __HAVOC_malloc(32);
    call {:si_unique_call 1005} Tmp_479 := __HAVOC_malloc(96);
    call {:si_unique_call 1006} Tmp_481 := __HAVOC_malloc(28);
    call {:si_unique_call 1007} Tmp_482 := __HAVOC_malloc(92);
    call {:si_unique_call 1008} Tmp_483 := __HAVOC_malloc(28);
    call {:si_unique_call 1009} Tmp_485 := __HAVOC_malloc(48);
    call {:si_unique_call 1010} Tmp_487 := __HAVOC_malloc(80);
    call {:si_unique_call 1011} Tmp_488 := __HAVOC_malloc(216);
    call {:si_unique_call 1012} Tmp_490 := __HAVOC_malloc(96);
    call {:si_unique_call 1013} Tmp_491 := __HAVOC_malloc(96);
    call {:si_unique_call 1014} Tmp_492 := __HAVOC_malloc(96);
    call {:si_unique_call 1015} Tmp_493 := __HAVOC_malloc(48);
    call {:si_unique_call 1016} Tmp_494 := __HAVOC_malloc(92);
    call {:si_unique_call 1017} Tmp_495 := __HAVOC_malloc(92);
    call {:si_unique_call 1018} Tmp_497 := __HAVOC_malloc(40);
    call {:si_unique_call 1019} Tmp_498 := __HAVOC_malloc(96);
    call {:si_unique_call 1020} Tmp_499 := __HAVOC_malloc(312);
    call {:si_unique_call 1021} Tmp_500 := __HAVOC_malloc(64);
    call {:si_unique_call 1022} Tmp_501 := __HAVOC_malloc(244);
    call {:si_unique_call 1023} Tmp_502 := __HAVOC_malloc(104);
    call {:si_unique_call 1024} Tmp_503 := __HAVOC_malloc(92);
    call {:si_unique_call 1025} Tmp_504 := __HAVOC_malloc(232);
    call {:si_unique_call 1026} Tmp_505 := __HAVOC_malloc(40);
    call {:si_unique_call 1027} Tmp_506 := __HAVOC_malloc(84);
    call {:si_unique_call 1028} Tmp_507 := __HAVOC_malloc(92);
    call {:si_unique_call 1029} Tmp_508 := __HAVOC_malloc(112);
    call {:si_unique_call 1030} Tmp_509 := __HAVOC_malloc(52);
    call {:si_unique_call 1031} Tmp_513 := __HAVOC_malloc(96);
    call {:si_unique_call 1032} Tmp_514 := __HAVOC_malloc(88);
    call {:si_unique_call 1033} Tmp_516 := __HAVOC_malloc(152);
    call {:si_unique_call 1034} Tmp_517 := __HAVOC_malloc(88);
    call {:si_unique_call 1035} Tmp_518 := __HAVOC_malloc(68);
    call {:si_unique_call 1036} Tmp_521 := __HAVOC_malloc(40);
    call {:si_unique_call 1037} Tmp_524 := __HAVOC_malloc(88);
    call {:si_unique_call 1038} Tmp_525 := __HAVOC_malloc(68);
    call {:si_unique_call 1039} Tmp_526 := __HAVOC_malloc(108);
    call {:si_unique_call 1040} Tmp_529 := __HAVOC_malloc(112);
    call {:si_unique_call 1041} Tmp_530 := __HAVOC_malloc(312);
    call {:si_unique_call 1042} Tmp_531 := __HAVOC_malloc(84);
    call {:si_unique_call 1043} Tmp_535 := __HAVOC_malloc(64);
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc pDevExt_10;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    status_17 := -1073741822;
    pFullResourceDesc := 0;
    pFullTrResourceDesc := 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    curIoIndex := 0;
    gotMem := 0;
    call {:si_unique_call 1044} sdv_do_paged_code_check();
    Tmp_508 := strConst__li2bpl88;
    call {:si_unique_call 1045} vslice_dummy_var_289 := SerialDbgPrintEx(11, Tmp_508);
    Tmp_492 := strConst__li2bpl89;
    call {:si_unique_call 1046} vslice_dummy_var_290 := SerialDbgPrintEx(12, Tmp_492);
    Tmp_526 := strConst__li2bpl90;
    call {:si_unique_call 1047} vslice_dummy_var_291 := SerialDbgPrintEx(12, Tmp_526);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} PResList != 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} PTrResList != 0;
    call {:si_unique_call 1048} status_17 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_17 >= 0;
    Tmp_500 := strConst__li2bpl91;
    call {:si_unique_call 1049} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_500, 32, isMulti, 4);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} status_17 >= 0;
    goto L73;

  L73:
    Tmp_503 := strConst__li2bpl92;
    call {:si_unique_call 1050} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_503, 46, ioResIndex, 4);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} status_17 >= 0;
    goto L79;

  L79:
    call {:si_unique_call 1051} vslice_dummy_var_285 := ZwClose(0);
    assume {:nonnull} PResList != 0;
    assume PResList > 0;
    havoc Tmp_530;
    pFullResourceDesc := Tmp_530;
    assume {:nonnull} PTrResList != 0;
    assume PTrResList > 0;
    havoc Tmp_499;
    pFullTrResourceDesc := Tmp_499;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} pFullResourceDesc != 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    pPartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullResourceDesc);
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc pPartialResourceDesc;
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := 1843200;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L95;

  L95:
    call {:si_unique_call 1052} gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem := SerialGetPortInfo_loop_L95(ioResIndex, isMulti, count, gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem, pPartialResourceDesc, PConfig);
    goto L95_last;

  L95_last:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    i := i + 1;
    goto L105_dummy;

  L105_dummy:
    assume false;
    return;

  anon171_Then:
    sDeviceData := pPartialResourceDesc;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} sDeviceData != 0;
    assume sDeviceData > 0;
    havoc vslice_dummy_var_550;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := vslice_dummy_var_550;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;

  anon132_Then:
    assume {:partition} i >= count;
    goto L85;

  L85:
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    curIoIndex := 0;
    gotMem := 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} pFullTrResourceDesc != 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    pPartialTrResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullTrResourceDesc);
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc pPartialTrResourceDesc;
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L148;

  L148:
    call {:si_unique_call 1053} gotIO, curIoIndex, gotInt, i, gotISR, gotMem := SerialGetPortInfo_loop_L148(ioResIndex, isMulti, count, gotIO, pPartialTrResourceDesc, curIoIndex, gotInt, i, gotISR, gotMem, PConfig);
    goto L148_last;

  L148_last:
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    i := i + 1;
    goto L156_dummy;

  L156_dummy:
    assume false;
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;

  anon143_Then:
    assume {:partition} i >= count;
    goto L140;

  L140:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_551;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := vslice_dummy_var_551;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_552;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_552;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_553;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_553;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_554;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_554;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := 0;
    defaultInterfaceType := 1;
    defaultClockRate := 1843200;
    interfaceType := 0;
    goto L191;

  L191:
    call {:si_unique_call 1054} interfaceType, foundOne, vslice_dummy_var_286 := SerialGetPortInfo_loop_L191(interfaceType, foundOne, vslice_dummy_var_286);
    goto L191_last;

  L191_last:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} 18 > interfaceType;
    foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} interfaceType != 0;
    call {:si_unique_call 1055} vslice_dummy_var_286 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} foundOne != 0;
    defaultInterfaceType := interfaceType;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} defaultInterfaceType == 3;
    goto L192;

  L192:
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} PUserData != 0;
    badValue := -1;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    Tmp_510 := 0;
    goto L215;

  L215:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := Tmp_510;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_489;
    goto L219;

  L219:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := Tmp_489;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_520;
    goto L223;

  L223:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := Tmp_520;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    Tmp_528 := 0;
    goto L227;

  L227:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := Tmp_528;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_523;
    goto L231;

  L231:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := Tmp_523;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    Tmp_533 := 0;
    goto L235;

  L235:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := Tmp_533;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    Tmp_480 := defaultClockRate;
    goto L239;

  L239:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := Tmp_480;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_555;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_555;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_556;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := vslice_dummy_var_556;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    Tmp_537 := 0;
    goto L245;

  L245:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := Tmp_537;
    goto L246;

  L246:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == -1;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    assume {:nonnull} Tmp_534 != 0;
    assume Tmp_534 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_557;
    havoc vslice_dummy_var_558;
    call {:si_unique_call 1056} SerialLogError(vslice_dummy_var_557, 0, vslice_dummy_var_558, Tmp_534, 0, 0, 0, 30, 0, -1073348588, 0, 0, 0, 0);
    Tmp_506 := strConst__li2bpl93;
    call {:si_unique_call 1057} vslice_dummy_var_292 := SerialDbgPrintEx(14, Tmp_506);
    status_17 := -1073348588;
    goto L263;

  L263:
    Tmp_477 := status_17;
    goto L1;

  L1:
    return;

  anon161_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != -1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 16;
    assume {:nonnull} Tmp_519 != 0;
    assume Tmp_519 > 0;
    assume {:nonnull} Tmp_519 != 0;
    assume Tmp_519 > 0;
    assume {:nonnull} Tmp_519 != 0;
    assume Tmp_519 > 0;
    assume {:nonnull} Tmp_519 != 0;
    assume Tmp_519 > 0;
    assume {:nonnull} Tmp_519 != 0;
    assume Tmp_519 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_559;
    havoc vslice_dummy_var_560;
    call {:si_unique_call 1058} SerialLogError(vslice_dummy_var_559, 0, vslice_dummy_var_560, Tmp_519, 0, 0, 0, 32, 0, -1073348587, 0, 0, 0, 0);
    Tmp_491 := strConst__li2bpl94;
    call {:si_unique_call 1059} vslice_dummy_var_293 := SerialDbgPrintEx(14, Tmp_491);
    status_17 := -1073348587;
    goto L263;

  anon165_Then:
    assume {:partition} 16 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  L251:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    foundIt := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_561;
    havoc vslice_dummy_var_562;
    call {:si_unique_call 1060} SerialLogError(vslice_dummy_var_561, 0, vslice_dummy_var_562, Tmp_515, 0, 0, 0, 34, 0, -1073348586, 0, 0, 0, 0);
    Tmp_531 := strConst__li2bpl96;
    call {:si_unique_call 1061} vslice_dummy_var_294 := SerialDbgPrintEx(14, Tmp_531);
    status_17 := -1073348586;
    goto L263;

  anon189_Then:
    call {:si_unique_call 1062} vslice_dummy_var_287 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} foundIt == 0;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_563;
    havoc vslice_dummy_var_564;
    call {:si_unique_call 1063} SerialLogError(vslice_dummy_var_563, 0, vslice_dummy_var_564, Tmp_486, 0, 0, 0, 35, 0, -1073348585, 0, 0, 0, 0);
    Tmp_504 := strConst__li2bpl97;
    call {:si_unique_call 1064} vslice_dummy_var_307 := SerialDbgPrintEx(14, Tmp_504);
    status_17 := -1073348585;
    goto L263;

  anon167_Then:
    assume {:partition} foundIt != 0;
    goto L294;

  L294:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_565;
    havoc vslice_dummy_var_566;
    call {:si_unique_call 1065} SerialLogError(vslice_dummy_var_565, 0, vslice_dummy_var_566, Tmp_532, 0, 0, 0, 36, 0, -1073348584, 0, 0, 0, 0);
    Tmp_488 := strConst__li2bpl98;
    call {:si_unique_call 1066} vslice_dummy_var_295 := SerialDbgPrintEx(14, Tmp_488);
    status_17 := -1073348584;
    goto L263;

  anon168_Then:
    goto L320;

  L320:
    status_17 := 0;
    Tmp_517 := strConst__li2bpl121;
    call {:si_unique_call 1067} vslice_dummy_var_296 := SerialDbgPrintEx(4, Tmp_517);
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    Tmp_502 := strConst__li2bpl122;
    call {:si_unique_call 1068} vslice_dummy_var_297 := SerialDbgPrintEx(4, Tmp_502);
    Tmp_487 := strConst__li2bpl99;
    call {:si_unique_call 1069} vslice_dummy_var_298 := SerialDbgPrintEx(4, Tmp_487);
    Tmp_498 := strConst__li2bpl100;
    call {:si_unique_call 1070} vslice_dummy_var_299 := SerialDbgPrintEx(4, Tmp_498);
    Tmp_479 := strConst__li2bpl101;
    call {:si_unique_call 1071} vslice_dummy_var_300 := SerialDbgPrintEx(4, Tmp_479);
    Tmp_514 := strConst__li2bpl102;
    call {:si_unique_call 1072} vslice_dummy_var_301 := SerialDbgPrintEx(4, Tmp_514);
    Tmp_495 := strConst__li2bpl103;
    call {:si_unique_call 1073} vslice_dummy_var_302 := SerialDbgPrintEx(4, Tmp_495);
    Tmp_482 := strConst__li2bpl104;
    call {:si_unique_call 1074} vslice_dummy_var_303 := SerialDbgPrintEx(4, Tmp_482);
    Tmp_513 := strConst__li2bpl105;
    call {:si_unique_call 1075} vslice_dummy_var_304 := SerialDbgPrintEx(4, Tmp_513);
    Tmp_524 := strConst__li2bpl106;
    call {:si_unique_call 1076} vslice_dummy_var_305 := SerialDbgPrintEx(4, Tmp_524);
    Tmp_518 := strConst__li2bpl107;
    call {:si_unique_call 1077} vslice_dummy_var_306 := SerialDbgPrintEx(4, Tmp_518);
    goto L263;

  anon166_Then:
    goto L320;

  anon160_Then:
    goto L294;

  anon163_Then:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 8;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_567;
    havoc vslice_dummy_var_568;
    call {:si_unique_call 1078} SerialLogError(vslice_dummy_var_567, 0, vslice_dummy_var_568, Tmp_512, 0, 0, 0, 33, 0, -1073348587, 0, 0, 0, 0);
    Tmp_490 := strConst__li2bpl94;
    call {:si_unique_call 1079} vslice_dummy_var_308 := SerialDbgPrintEx(14, Tmp_490);
    status_17 := -1073348587;
    goto L263;

  anon164_Then:
    assume {:partition} 8 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  anon162_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_569;
    havoc vslice_dummy_var_570;
    call {:si_unique_call 1080} SerialLogError(vslice_dummy_var_569, 0, vslice_dummy_var_570, Tmp_511, 0, 0, 0, 31, 0, -1073348588, 0, 0, 0, 0);
    Tmp_501 := strConst__li2bpl95;
    call {:si_unique_call 1081} vslice_dummy_var_309 := SerialDbgPrintEx(14, Tmp_501);
    status_17 := -1073348588;
    goto L263;

  anon159_Then:
    goto L251;

  anon158_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_536;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    Tmp_521 := strConst__li2bpl123;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc vslice_dummy_var_571;
    havoc vslice_dummy_var_572;
    havoc vslice_dummy_var_573;
    call {:si_unique_call 1082} SerialLogError(vslice_dummy_var_571, 0, vslice_dummy_var_572, Tmp_496, 0, 0, 0, 59, 0, -1073348583, Tmp_536, vslice_dummy_var_573, 20, Tmp_521);
    Tmp_525 := strConst__li2bpl108;
    call {:si_unique_call 1083} vslice_dummy_var_310 := SerialDbgPrintEx(14, Tmp_525);
    status_17 := -1073348583;
    goto L263;

  anon157_Then:
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    Tmp_485 := strConst__li2bpl124;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc vslice_dummy_var_574;
    havoc vslice_dummy_var_575;
    call {:si_unique_call 1084} SerialLogError(vslice_dummy_var_574, 0, vslice_dummy_var_575, Tmp_484, 0, 0, 0, 58, 0, -1073348583, 0, 0, 24, Tmp_485);
    Tmp_507 := strConst__li2bpl109;
    call {:si_unique_call 1085} vslice_dummy_var_311 := SerialDbgPrintEx(14, Tmp_507);
    status_17 := -1073348583;
    goto L263;

  anon188_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_537;
    goto L245;

  anon187_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_480;
    goto L239;

  anon186_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_533;
    goto L235;

  anon185_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_523;
    goto L231;

  anon184_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_528;
    goto L227;

  anon183_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_520;
    goto L223;

  anon182_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_489;
    goto L219;

  anon181_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_510;
    goto L215;

  anon155_Then:
    assume {:partition} PUserData == 0;
    call {:si_unique_call 1086} status_17 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} status_17 >= 0;
    Tmp_493 := strConst__li2bpl111;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1087} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_493, 24, DisablePort__CONFIG_DATA(PConfig), 4);
    Tmp_535 := strConst__li2bpl112;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1088} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_535, 32, ForceFifoEnable__CONFIG_DATA(PConfig), 4);
    Tmp_481 := strConst__li2bpl113;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1089} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_481, 14, RxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_483 := strConst__li2bpl114;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1090} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_483, 14, TxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_509 := strConst__li2bpl115;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1091} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_509, 26, MaskInverted__CONFIG_DATA(PConfig), 4);
    Tmp_494 := strConst__li2bpl116;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1092} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_494, 46, PermitShare__CONFIG_DATA(PConfig), 4);
    Tmp_505 := strConst__li2bpl117;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1093} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_505, 20, PortIndex__CONFIG_DATA(PConfig), 4);
    Tmp_478 := strConst__li2bpl118;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1094} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_478, 16, Indexed__CONFIG_DATA(PConfig), 4);
    Tmp_497 := strConst__li2bpl119;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1095} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_497, 20, ClockRate__CONFIG_DATA(PConfig), 4);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} status_17 >= 0;
    goto L425;

  L425:
    Tmp_529 := strConst__li2bpl120;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 1096} status_17 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_529, 56, TL16C550CAFC__CONFIG_DATA(PConfig), 4);
    call {:si_unique_call 1097} vslice_dummy_var_288 := ZwClose(0);
    goto L246;

  anon170_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := defaultClockRate;
    goto L425;

  anon169_Then:
    assume {:partition} 0 > status_17;
    Tmp_516 := strConst__li2bpl110;
    call {:si_unique_call 1098} vslice_dummy_var_312 := SerialDbgPrintEx(14, Tmp_516);
    goto L263;

  anon180_Then:
    assume {:partition} defaultInterfaceType != 3;
    goto L192;

  anon156_Then:
    assume {:partition} foundOne == 0;
    goto L198;

  L198:
    interfaceType := interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} interfaceType == 0;
    goto L198;

  anon154_Then:
    assume {:partition} interfaceType >= 18;
    goto L192;

  anon178_Then:
    assume {:partition} pFullTrResourceDesc == 0;
    goto L140;

  anon176_Then:
    assume {:partition} pFullResourceDesc == 0;
    goto L85;

  anon131_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    goto L79;

  anon130_Then:
    assume {:partition} 0 > status_17;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    goto L73;

  anon129_Then:
    assume {:partition} 0 > status_17;
    Tmp_477 := status_17;
    goto L1;

  anon128_Then:
    assume {:partition} PTrResList == 0;
    goto L59;

  L59:
    Tmp_477 := -1073741670;
    goto L1;

  anon127_Then:
    assume {:partition} PResList == 0;
    goto L59;
}



procedure {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_538: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_14: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_538: int)
{
  var {:pointer} Tmp_539: int;
  var {:pointer} Tmp_540: int;
  var {:pointer} Tmp_541: int;
  var {:pointer} Tmp_542: int;
  var {:scalar} Tmp_543: int;
  var {:pointer} Tmp_544: int;
  var {:scalar} allocedUserData: int;
  var {:scalar} Tmp_545: int;
  var {:scalar} Tmp_547: int;
  var {:dopa} {:scalar} powerPolicy: int;
  var {:pointer} pDevExt_11: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} Tmp_549: int;
  var {:scalar} Tmp_550: int;
  var {:pointer} pnpKey: int;
  var {:scalar} Tmp_551: int;
  var {:scalar} Tmp_552: int;
  var {:pointer} pConfig: int;
  var {:pointer} sdv_459: int;
  var {:dopa} {:scalar} powerOnClose: int;
  var {:pointer} Tmp_554: int;
  var {:pointer} sdv_462: int;
  var {:scalar} Tmp_555: int;
  var {:scalar} Tmp_556: int;
  var {:pointer} Tmp_557: int;
  var {:scalar} Tmp_558: int;
  var {:pointer} Tmp_559: int;
  var {:pointer} Tmp_560: int;
  var {:pointer} Tmp_561: int;
  var {:scalar} Tmp_562: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_563: int;
  var {:pointer} Tmp_564: int;
  var {:scalar} Tmp_565: int;
  var {:pointer} countSoFar: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} sdv_473: int;
  var {:pointer} Tmp_568: int;
  var {:pointer} Tmp_569: int;
  var {:pointer} PDevObj_14: int;
  var {:pointer} PResList_1: int;
  var {:pointer} PTrResList_1: int;
  var {:pointer} PUserData_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;
  var vslice_dummy_var_588: int;
  var vslice_dummy_var_589: int;

  anon0:
    call {:si_unique_call 1099} Tmp_547 := __HAVOC_malloc(20);
    call {:si_unique_call 1100} powerPolicy := __HAVOC_malloc(4);
    call {:si_unique_call 1101} Tmp_551 := __HAVOC_malloc(20);
    call {:si_unique_call 1102} powerOnClose := __HAVOC_malloc(4);
    call {:si_unique_call 1103} Tmp_562 := __HAVOC_malloc(20);
    PDevObj_14 := actual_PDevObj_14;
    PResList_1 := actual_PResList_1;
    PTrResList_1 := actual_PTrResList_1;
    PUserData_1 := actual_PUserData_1;
    call {:si_unique_call 1104} Tmp_539 := __HAVOC_malloc(112);
    call {:si_unique_call 1105} Tmp_540 := __HAVOC_malloc(132);
    call {:si_unique_call 1106} Tmp_541 := __HAVOC_malloc(168);
    call {:si_unique_call 1107} Tmp_542 := __HAVOC_malloc(88);
    call {:si_unique_call 1108} Tmp_544 := __HAVOC_malloc(168);
    call {:si_unique_call 1109} Tmp_548 := __HAVOC_malloc(272);
    call {:si_unique_call 1110} Tmp_554 := __HAVOC_malloc(156);
    call {:si_unique_call 1111} Tmp_559 := __HAVOC_malloc(104);
    call {:si_unique_call 1112} Tmp_560 := __HAVOC_malloc(144);
    call {:si_unique_call 1113} Tmp_561 := __HAVOC_malloc(316);
    call {:si_unique_call 1114} Tmp_563 := __HAVOC_malloc(220);
    call {:si_unique_call 1115} Tmp_564 := __HAVOC_malloc(884);
    call {:si_unique_call 1116} Tmp_566 := __HAVOC_malloc(884);
    call {:si_unique_call 1117} Tmp_569 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    havoc pDevExt_11;
    allocedUserData := 0;
    call {:si_unique_call 1118} sdv_do_paged_code_check();
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 2) != 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 1) != 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1119} SerialSetDeviceFlags(pDevExt_11, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11), 2, 0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1120} sdv_459 := ExAllocatePoolWithTag(1, 112, -666022077);
    PUserData_1 := sdv_459;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} PUserData_1 != 0;
    allocedUserData := 1;
    call {:si_unique_call 1121} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  L65:
    call {:si_unique_call 1122} sdv_462 := ExAllocatePoolWithTag(1, 128, -666022077);
    pConfig := sdv_462;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1123} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 1124} status_18 := SerialGetPortInfo(PDevObj_14, PResList_1, PTrResList_1, pConfig, PUserData_1);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} status_18 < 0;
    goto L90;

  L90:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} status_18 >= 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    Tmp_558 := 0;
    goto L101;

  L101:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_556;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    Tmp_565 := 1;
    goto L109;

  L109:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  L118:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    Tmp_543 := 1;
    goto L123;

  L123:
    Tmp_552 := Tmp_543;
    goto L124;

  L124:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_576;
    call {:si_unique_call 1125} boogieTmp := SerialReportMaxBaudRate(vslice_dummy_var_576);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1126} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    call {:si_unique_call 1127} sdv_473 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_473 != 0;
    assume sdv_473 > 0;
    countSoFar := SerialCount__CONFIGURATION_INFORMATION(sdv_473);
    assume {:nonnull} countSoFar != 0;
    assume countSoFar > 0;
    Mem_T.INT4[countSoFar] := Mem_T.INT4[countSoFar] + 1;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1128} vslice_dummy_var_321 := IoWMIRegistrationControl(0, 1);
    goto L153;

  L153:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    call {:si_unique_call 1129} SerialUnstallIrps(pDevExt_11);
    goto L154;

  L154:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1130} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), -1, 0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1131} SerialSetDeviceFlags(pDevExt_11, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 1);
    goto L164;

  L164:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 1132} sdv_ExFreePool(0);
    goto L165;

  L165:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} PUserData_1 != 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} allocedUserData != 0;
    call {:si_unique_call 1133} sdv_ExFreePool(0);
    goto L169;

  L169:
    Tmp_540 := strConst__li2bpl126;
    call {:si_unique_call 1134} vslice_dummy_var_320 := SerialDbgPrintEx(11, Tmp_540);
    Tmp_538 := status_18;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon95_Then:
    assume {:partition} allocedUserData == 0;
    goto L169;

  anon94_Then:
    assume {:partition} PUserData_1 == 0;
    goto L169;

  anon93_Then:
    assume {:partition} pConfig == 0;
    goto L165;

  anon92_Then:
    goto L154;

  anon91_Then:
    goto L153;

  anon90_Then:
    Tmp_543 := 2;
    goto L123;

  anon89_Then:
    Tmp_552 := 0;
    goto L124;

  anon111_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  anon112_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  anon113_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  anon114_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  anon121_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto L118;

  anon120_Then:
    Tmp_565 := 0;
    goto L109;

  anon119_Then:
    Tmp_558 := 1;
    goto L101;

  anon88_Then:
    assume {:partition} 0 > status_18;
    Tmp_559 := strConst__li2bpl125;
    call {:si_unique_call 1135} vslice_dummy_var_322 := SerialDbgPrintEx(4, Tmp_559);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    call {:si_unique_call 1136} SerialKillPendingIrps(PDevObj_14);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1137} SerialSetDeviceFlags(pDevExt_11, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 1);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1138} SerialSetDeviceFlags(pDevExt_11, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11), 1, 0);
    goto L164;

  anon122_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon96_Then:
    goto L164;

  anon85_Then:
    assume {:partition} 0 <= status_18;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_577;
    call {:si_unique_call 1139} status_18 := SerialGotoPowerState(vslice_dummy_var_577, pDevExt_11, 1);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} yogi_error != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} status_18 < 0;
    goto L90;

  anon87_Then:
    assume {:partition} 0 <= status_18;
    goto L81;

  L81:
    call {:si_unique_call 1140} status_18 := SerialFindInitController(PDevObj_14, pConfig);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} status_18 >= 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} pDevExt_11 != 0;
    Tmp_563 := strConst__li2bpl128;
    call {:si_unique_call 1141} vslice_dummy_var_316 := SerialDbgPrintEx(8, Tmp_563);
    goto L218;

  L218:
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} pDevExt_11 != 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    goto L222;

  L222:
    Tmp_569 := strConst__li2bpl129;
    call {:si_unique_call 1142} vslice_dummy_var_317 := SerialDbgPrintEx(8, Tmp_569);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1143} SerialAddToAllDevs(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_11));
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1144} vslice_dummy_var_318 := KeSynchronizeExecution(0, li2bplFunctionConstant522, 0);
    call {:si_unique_call 1145} vslice_dummy_var_313 := KeSynchronizeExecution(0, li2bplFunctionConstant523, 0);
    call {:si_unique_call 1146} vslice_dummy_var_314 := KeSynchronizeExecution(0, li2bplFunctionConstant524, 0);
    call {:si_unique_call 1147} vslice_dummy_var_315 := KeSynchronizeExecution(0, li2bplFunctionConstant525, 0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    Tmp_541 := strConst__li2bpl130;
    call {:si_unique_call 1148} vslice_dummy_var_319 := SerialDbgPrintEx(12, Tmp_541);
    goto L90;

  anon102_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_557;
    assume {:nonnull} Tmp_557 != 0;
    assume Tmp_557 > 0;
    havoc vslice_dummy_var_578;
    call {:si_unique_call 1149} status_18 := SerialDoExternalNaming(pDevExt_11, vslice_dummy_var_578);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} status_18 < 0;
    Tmp_560 := strConst__li2bpl131;
    call {:si_unique_call 1150} vslice_dummy_var_323 := SerialDbgPrintEx(14, Tmp_560);
    status_18 := 0;
    goto L90;

  anon103_Then:
    assume {:partition} 0 <= status_18;
    goto L90;

  anon100_Then:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    Tmp_561 := strConst__li2bpl132;
    call {:si_unique_call 1151} vslice_dummy_var_324 := SerialDbgPrintEx(8, Tmp_561);
    Tmp_566 := strConst__li2bpl133;
    call {:si_unique_call 1152} vslice_dummy_var_325 := SerialDbgPrintEx(8, Tmp_566);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_549;
    assume {:nonnull} Tmp_549 != 0;
    assume Tmp_549 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_568;
    assume {:nonnull} Tmp_568 != 0;
    assume Tmp_568 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_579;
    havoc vslice_dummy_var_580;
    havoc vslice_dummy_var_581;
    havoc vslice_dummy_var_582;
    havoc vslice_dummy_var_583;
    havoc vslice_dummy_var_584;
    havoc vslice_dummy_var_585;
    call {:si_unique_call 1153} status_18 := IoConnectInterrupt(Interrupt__SERIAL_DEVICE_EXTENSION(pDevExt_11), li2bplFunctionConstant526, vslice_dummy_var_579, 0, vslice_dummy_var_580, vslice_dummy_var_581, vslice_dummy_var_582, vslice_dummy_var_583, vslice_dummy_var_584, vslice_dummy_var_585, 0);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} yogi_error != 1;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} status_18 < 0;
    Tmp_554 := strConst__li2bpl134;
    call {:si_unique_call 1154} vslice_dummy_var_326 := SerialDbgPrintEx(14, Tmp_554);
    Tmp_564 := strConst__li2bpl133;
    call {:si_unique_call 1155} vslice_dummy_var_327 := SerialDbgPrintEx(14, Tmp_564);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_550;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_586;
    havoc vslice_dummy_var_587;
    havoc vslice_dummy_var_588;
    call {:si_unique_call 1156} SerialLogError(vslice_dummy_var_586, PDevObj_14, vslice_dummy_var_587, Tmp_551, 0, 0, 0, 1, status_18, -1073348601, Tmp_550, vslice_dummy_var_588, 0, 0);
    status_18 := -1073348601;
    goto L90;

  anon104_Then:
    assume {:partition} 0 <= status_18;
    goto L222;

  anon123_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon101_Then:
    goto L222;

  anon99_Then:
    assume {:partition} pDevExt_11 == 0;
    goto L219;

  L219:
    call {:si_unique_call 1157} SerialFinishStartDevice_loop_L219();
    goto L219_last;

  L219_last:
    goto L219_dummy;

  L219_dummy:
    assume false;
    return;

  anon98_Then:
    assume {:partition} pDevExt_11 == 0;
    Tmp_544 := strConst__li2bpl127;
    call {:si_unique_call 1158} vslice_dummy_var_328 := SerialDbgPrintEx(14, Tmp_544);
    goto L218;

  anon97_Then:
    assume {:partition} 0 > status_18;
    goto L90;

  anon118_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    goto L81;

  anon117_Then:
    assume {:partition} pConfig == 0;
    assume {:nonnull} Tmp_562 != 0;
    assume Tmp_562 > 0;
    assume {:nonnull} Tmp_562 != 0;
    assume Tmp_562 > 0;
    assume {:nonnull} Tmp_562 != 0;
    assume Tmp_562 > 0;
    assume {:nonnull} Tmp_562 != 0;
    assume Tmp_562 > 0;
    assume {:nonnull} Tmp_562 != 0;
    assume Tmp_562 > 0;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_589;
    call {:si_unique_call 1159} SerialLogError(vslice_dummy_var_589, 0, Tmp_547, Tmp_562, 0, 0, 0, 37, 0, -1073348600, 0, 0, 0, 0);
    Tmp_548 := strConst__li2bpl135;
    call {:si_unique_call 1160} vslice_dummy_var_329 := SerialDbgPrintEx(14, Tmp_548);
    status_18 := -1073741670;
    goto L90;

  anon108_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon109_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon110_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon116_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon115_Then:
    assume {:partition} PUserData_1 == 0;
    Tmp_538 := -1073741670;
    goto L1;

  anon84_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 1) == 0;
    goto L17;

  L17:
    call {:si_unique_call 1161} status_18 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} status_18 >= 0;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    Mem_T.INT4[powerPolicy] := 0;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    Mem_T.INT4[powerOnClose] := 0;
    Tmp_539 := strConst__li2bpl136;
    call {:si_unique_call 1162} vslice_dummy_var_330 := SerialGetRegistryKeyValue(pnpKey, Tmp_539, 56, powerPolicy, 4);
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} Mem_T.INT4[powerPolicy] != 0;
    Tmp_555 := 0;
    goto L312;

  L312:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    Tmp_542 := strConst__li2bpl137;
    call {:si_unique_call 1163} vslice_dummy_var_331 := SerialGetRegistryKeyValue(pnpKey, Tmp_542, 44, powerOnClose, 4);
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} Mem_T.INT4[powerOnClose] != 0;
    Tmp_545 := 1;
    goto L319;

  L319:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1164} vslice_dummy_var_332 := ZwClose(0);
    goto L65;

  anon107_Then:
    assume {:partition} Mem_T.INT4[powerOnClose] == 0;
    Tmp_545 := 0;
    goto L319;

  anon106_Then:
    assume {:partition} Mem_T.INT4[powerPolicy] == 0;
    Tmp_555 := 1;
    goto L312;

  anon105_Then:
    assume {:partition} 0 > status_18;
    goto L65;

  anon83_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 2) == 0;
    goto L17;
}



procedure {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_570: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_15: int, actual_PIrp_11: int) returns (Tmp_570: int)
{
  var {:scalar} pIdBuf: int;
  var {:scalar} sdv_476: int;
  var {:pointer} sdv_477: int;
  var {:pointer} Tmp_571: int;
  var {:dopa} {:scalar} isMulti_1: int;
  var {:pointer} sdv_482: int;
  var {:pointer} Tmp_572: int;
  var {:pointer} Tmp_573: int;
  var {:pointer} pResList: int;
  var {:pointer} Tmp_574: int;
  var {:pointer} Tmp_575: int;
  var {:pointer} Tmp_576: int;
  var {:pointer} Tmp_577: int;
  var {:pointer} Tmp_578: int;
  var {:pointer} pDevExt_12: int;
  var {:pointer} Tmp_579: int;
  var {:pointer} Tmp_581: int;
  var {:pointer} Tmp_582: int;
  var {:pointer} Tmp_583: int;
  var {:pointer} Tmp_584: int;
  var {:pointer} Tmp_585: int;
  var {:pointer} Tmp_586: int;
  var {:scalar} cap: int;
  var {:pointer} Tmp_587: int;
  var {:pointer} Tmp_588: int;
  var {:scalar} Tmp_589: int;
  var {:scalar} pnpIdStrLen: int;
  var {:scalar} pendingIRPs: int;
  var {:pointer} Tmp_590: int;
  var {:pointer} Tmp_591: int;
  var {:pointer} pQueryCapsEvent: int;
  var {:pointer} Tmp_592: int;
  var {:pointer} Tmp_593: int;
  var {:pointer} Tmp_594: int;
  var {:pointer} Tmp_595: int;
  var {:pointer} pIrpStack_6: int;
  var {:pointer} Tmp_596: int;
  var {:pointer} Tmp_597: int;
  var {:pointer} Tmp_598: int;
  var {:dopa} {:scalar} isMulti_2: int;
  var {:pointer} Tmp_599: int;
  var {:pointer} Tmp_600: int;
  var {:pointer} sdv_510: int;
  var {:pointer} pLowerDevObj_3: int;
  var {:pointer} Tmp_602: int;
  var {:pointer} Tmp_603: int;
  var {:pointer} Tmp_604: int;
  var {:pointer} Tmp_605: int;
  var {:scalar} gotInt_1: int;
  var {:pointer} Tmp_606: int;
  var {:pointer} pResDesc: int;
  var {:scalar} allocLen: int;
  var {:pointer} Tmp_607: int;
  var {:pointer} Tmp_608: int;
  var {:pointer} Tmp_609: int;
  var {:scalar} listNum: int;
  var {:pointer} Tmp_610: int;
  var {:scalar} Tmp_611: int;
  var {:pointer} Tmp_612: int;
  var {:scalar} pendingIRPs_1: int;
  var {:pointer} pReqList: int;
  var {:pointer} Tmp_613: int;
  var {:scalar} Tmp_614: int;
  var {:pointer} Tmp_615: int;
  var {:pointer} Tmp_616: int;
  var {:scalar} Tmp_617: int;
  var {:pointer} Tmp_618: int;
  var {:pointer} Tmp_619: int;
  var {:scalar} sdv_536: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} Tmp_621: int;
  var {:scalar} pendingIRPs_2: int;
  var {:pointer} Tmp_622: int;
  var {:pointer} Tmp_623: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_624: int;
  var {:pointer} Tmp_625: int;
  var {:scalar} Tmp_626: int;
  var {:scalar} Tmp_627: int;
  var {:pointer} sdv_544: int;
  var {:pointer} Tmp_628: int;
  var {:pointer} Tmp_629: int;
  var {:pointer} pnpKey_1: int;
  var {:pointer} pResFiltEvent: int;
  var {:scalar} gotISR_1: int;
  var {:pointer} Tmp_630: int;
  var {:pointer} Tmp_632: int;
  var {:scalar} curStrLen: int;
  var {:pointer} Tmp_633: int;
  var {:pointer} curStr: int;
  var {:pointer} Tmp_634: int;
  var {:pointer} Tmp_635: int;
  var {:pointer} Tmp_636: int;
  var {:pointer} Tmp_637: int;
  var {:pointer} pDevCaps: int;
  var {:pointer} Tmp_638: int;
  var {:scalar} status_19: int;
  var {:scalar} sdv_570: int;
  var {:pointer} Tmp_639: int;
  var {:pointer} Tmp_640: int;
  var {:scalar} Tmp_641: int;
  var {:pointer} pnpKey_2: int;
  var {:pointer} Tmp_642: int;
  var {:scalar} Tmp_643: int;
  var {:pointer} Tmp_644: int;
  var {:scalar} sdv_575: int;
  var {:pointer} Tmp_645: int;
  var {:pointer} Tmp_646: int;
  var {:pointer} Tmp_647: int;
  var {:pointer} Tmp_648: int;
  var {:pointer} PDevObj_15: int;
  var {:pointer} PIrp_11: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_590: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_592: int;
  var vslice_dummy_var_593: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;
  var vslice_dummy_var_597: int;

  anon0:
    call {:si_unique_call 1165} pIdBuf := __HAVOC_malloc(12);
    call {:si_unique_call 1166} isMulti_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1167} isMulti_2 := __HAVOC_malloc(4);
    PDevObj_15 := actual_PDevObj_15;
    PIrp_11 := actual_PIrp_11;
    call {:si_unique_call 1168} Tmp_571 := __HAVOC_malloc(28);
    call {:si_unique_call 1169} Tmp_572 := __HAVOC_malloc(72);
    call {:si_unique_call 1170} Tmp_573 := __HAVOC_malloc(136);
    call {:si_unique_call 1171} Tmp_574 := __HAVOC_malloc(112);
    call {:si_unique_call 1172} Tmp_575 := __HAVOC_malloc(176);
    call {:si_unique_call 1173} Tmp_576 := __HAVOC_malloc(112);
    call {:si_unique_call 1174} Tmp_577 := __HAVOC_malloc(116);
    call {:si_unique_call 1175} Tmp_578 := __HAVOC_malloc(72);
    call {:si_unique_call 1176} Tmp_579 := __HAVOC_malloc(132);
    call {:si_unique_call 1177} Tmp_581 := __HAVOC_malloc(60);
    call {:si_unique_call 1178} Tmp_582 := __HAVOC_malloc(72);
    call {:si_unique_call 1179} Tmp_583 := __HAVOC_malloc(60);
    call {:si_unique_call 1180} Tmp_584 := __HAVOC_malloc(156);
    call {:si_unique_call 1181} Tmp_585 := __HAVOC_malloc(144);
    call {:si_unique_call 1182} Tmp_586 := __HAVOC_malloc(72);
    call {:si_unique_call 1183} Tmp_587 := __HAVOC_malloc(92);
    call {:si_unique_call 1184} Tmp_588 := __HAVOC_malloc(72);
    call {:si_unique_call 1185} Tmp_590 := __HAVOC_malloc(140);
    call {:si_unique_call 1186} Tmp_591 := __HAVOC_malloc(72);
    call {:si_unique_call 1187} Tmp_592 := __HAVOC_malloc(120);
    call {:si_unique_call 1188} Tmp_593 := __HAVOC_malloc(60);
    call {:si_unique_call 1189} Tmp_594 := __HAVOC_malloc(180);
    call {:si_unique_call 1190} Tmp_595 := __HAVOC_malloc(128);
    call {:si_unique_call 1191} Tmp_596 := __HAVOC_malloc(60);
    call {:si_unique_call 1192} Tmp_598 := __HAVOC_malloc(88);
    call {:si_unique_call 1193} Tmp_599 := __HAVOC_malloc(420);
    call {:si_unique_call 1194} Tmp_600 := __HAVOC_malloc(28);
    call {:si_unique_call 1195} Tmp_602 := __HAVOC_malloc(148);
    call {:si_unique_call 1196} Tmp_603 := __HAVOC_malloc(28);
    call {:si_unique_call 1197} Tmp_604 := __HAVOC_malloc(100);
    call {:si_unique_call 1198} Tmp_605 := __HAVOC_malloc(128);
    call {:si_unique_call 1199} Tmp_606 := __HAVOC_malloc(116);
    call {:si_unique_call 1200} Tmp_607 := __HAVOC_malloc(120);
    call {:si_unique_call 1201} Tmp_608 := __HAVOC_malloc(60);
    call {:si_unique_call 1202} Tmp_609 := __HAVOC_malloc(88);
    call {:si_unique_call 1203} Tmp_610 := __HAVOC_malloc(72);
    call {:si_unique_call 1204} Tmp_612 := __HAVOC_malloc(168);
    call {:si_unique_call 1205} Tmp_613 := __HAVOC_malloc(100);
    call {:si_unique_call 1206} Tmp_615 := __HAVOC_malloc(120);
    call {:si_unique_call 1207} Tmp_616 := __HAVOC_malloc(132);
    call {:si_unique_call 1208} Tmp_618 := __HAVOC_malloc(60);
    call {:si_unique_call 1209} Tmp_619 := __HAVOC_malloc(132);
    call {:si_unique_call 1210} Tmp_620 := __HAVOC_malloc(72);
    call {:si_unique_call 1211} Tmp_622 := __HAVOC_malloc(64);
    call {:si_unique_call 1212} Tmp_623 := __HAVOC_malloc(28);
    call {:si_unique_call 1213} Tmp_624 := __HAVOC_malloc(60);
    call {:si_unique_call 1214} Tmp_625 := __HAVOC_malloc(128);
    call {:si_unique_call 1215} Tmp_628 := __HAVOC_malloc(64);
    call {:si_unique_call 1216} Tmp_629 := __HAVOC_malloc(112);
    call {:si_unique_call 1217} Tmp_630 := __HAVOC_malloc(60);
    call {:si_unique_call 1218} Tmp_632 := __HAVOC_malloc(60);
    call {:si_unique_call 1219} Tmp_633 := __HAVOC_malloc(168);
    call {:si_unique_call 1220} Tmp_634 := __HAVOC_malloc(88);
    call {:si_unique_call 1221} Tmp_635 := __HAVOC_malloc(72);
    call {:si_unique_call 1222} Tmp_636 := __HAVOC_malloc(72);
    call {:si_unique_call 1223} Tmp_637 := __HAVOC_malloc(116);
    call {:si_unique_call 1224} Tmp_638 := __HAVOC_malloc(72);
    call {:si_unique_call 1225} Tmp_639 := __HAVOC_malloc(432);
    call {:si_unique_call 1226} Tmp_640 := __HAVOC_malloc(72);
    call {:si_unique_call 1227} Tmp_642 := __HAVOC_malloc(112);
    call {:si_unique_call 1228} Tmp_644 := __HAVOC_malloc(176);
    call {:si_unique_call 1229} Tmp_645 := __HAVOC_malloc(132);
    call {:si_unique_call 1230} Tmp_646 := __HAVOC_malloc(144);
    call {:si_unique_call 1231} Tmp_647 := __HAVOC_malloc(72);
    call {:si_unique_call 1232} Tmp_648 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    havoc pDevExt_12;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc pLowerDevObj_3;
    call {:si_unique_call 1233} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1234} sdv_do_paged_code_check();
    call {:si_unique_call 1235} status_19 := SerialIRPPrologue(PIrp_11, pDevExt_12);
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} status_19 != 0;
    Tmp_647 := strConst__li2bpl2;
    call {:si_unique_call 1236} vslice_dummy_var_344 := SerialDbgPrintEx(9, Tmp_647);
    call {:si_unique_call 1237} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1238} SerialIRPEpilogue(pDevExt_12);
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon272_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon215_Then:
    assume {:partition} status_19 == 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon258_Then, anon258_Else;

  anon258_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon254_Then, anon254_Else;

  anon254_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon250_Then, anon250_Else;

  anon250_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto L270;

  L270:
    call {:si_unique_call 1239} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1240} status_19 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon292_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon249_Then:
    Tmp_645 := strConst__li2bpl147;
    call {:si_unique_call 1241} vslice_dummy_var_402 := SerialDbgPrintEx(12, Tmp_645);
    Tmp_593 := strConst__li2bpl148;
    call {:si_unique_call 1242} vslice_dummy_var_403 := SerialDbgPrintEx(12, Tmp_593);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1243} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 8, 1);
    call {:si_unique_call 1244} SerialKillPendingIrps(PDevObj_15);
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1245} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_590;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_590;
    call {:si_unique_call 1246} vslice_dummy_var_404 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1247} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_591;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_591;
    call {:si_unique_call 1248} sdv_570 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    pendingIRPs_1 := sdv_570;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    assume {:partition} pendingIRPs_1 != 0;
    call {:si_unique_call 1249} vslice_dummy_var_333 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L92;

  L92:
    call {:si_unique_call 1250} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_592;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_592;
    call {:si_unique_call 1251} vslice_dummy_var_405 := sdv_InterlockedIncrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1252} SerialDisableInterfacesResources(PDevObj_15, 0);
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1253} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1254} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon321_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon320_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon319_Then:
    assume {:partition} pendingIRPs_1 == 0;
    goto L92;

  anon318_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon250_Then:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 4) != 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    goto L109;

  L109:
    call {:si_unique_call 1255} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1256} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon317_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon217_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 4) == 0;
    goto L109;

  anon251_Then:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_613 := strConst__li2bpl174;
    call {:si_unique_call 1257} vslice_dummy_var_397 := SerialDbgPrintEx(12, Tmp_613);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    goto L129;

  L129:
    call {:si_unique_call 1258} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1259} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon306_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon220_Then:
    goto L127;

  L127:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 8) != 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1260} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1261} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon307_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon221_Then:
    call {:si_unique_call 1262} status_19 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} status_19 >= 0;
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_628 := strConst__li2bpl91;
    call {:si_unique_call 1263} status_19 := SerialGetRegistryKeyValue(pnpKey_1, Tmp_628, 32, isMulti_1, 4);
    call {:si_unique_call 1264} vslice_dummy_var_334 := ZwClose(0);
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_621 := strConst__li2bpl150;
    goto L162;

  L162:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_617 := 18;
    goto L166;

  L166:
    pnpIdStrLen := Tmp_617;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    allocLen := 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc curStr;
    goto L179;

  L179:
    call {:si_unique_call 1265} allocLen, curStrLen := SerialPnpDispatch_loop_L179(sdv_476, allocLen, curStrLen, curStr);
    goto L179_last;

  L179_last:
    curStrLen := sdv_476;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:partition} curStrLen != 0;
    allocLen := allocLen + curStrLen * 2 + 2;
    goto anon310_Else_dummy;

  anon310_Else_dummy:
    assume false;
    return;

  anon310_Then:
    assume {:partition} curStrLen == 0;
    allocLen := allocLen + 2;
    Tmp_614 := allocLen + pnpIdStrLen + 2;
    call {:si_unique_call 1266} sdv_544 := ExAllocatePoolWithTag(1, Tmp_614, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_627;
    call {:si_unique_call 1267} sdv_RtlZeroMemory(0, Tmp_627);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1268} sdv_RtlCopyMemory(0, 0, allocLen);
    call {:si_unique_call 1269} vslice_dummy_var_335 := corral_nondet();
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1270} sdv_ExFreePool(0);
    goto L208;

  L208:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1271} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1272} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon312_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon311_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    call {:si_unique_call 1273} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_648 := strConst__li2bpl2;
    call {:si_unique_call 1274} vslice_dummy_var_398 := SerialDbgPrintEx(9, Tmp_648);
    call {:si_unique_call 1275} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1276} SerialIRPEpilogue(pDevExt_12);
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := -1073741670;
    goto L1;

  anon313_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon309_Then:
    Tmp_596 := strConst__li2bpl151;
    call {:si_unique_call 1277} vslice_dummy_var_399 := SerialDbgPrintEx(12, Tmp_596);
    Tmp_641 := pnpIdStrLen + 4;
    call {:si_unique_call 1278} sdv_510 := ExAllocatePoolWithTag(1, Tmp_641, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_611;
    call {:si_unique_call 1279} sdv_RtlZeroMemory(0, Tmp_611);
    call {:si_unique_call 1280} vslice_dummy_var_336 := corral_nondet();
    goto L208;

  anon314_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Tmp_635 := strConst__li2bpl2;
    call {:si_unique_call 1281} vslice_dummy_var_400 := SerialDbgPrintEx(9, Tmp_635);
    call {:si_unique_call 1282} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1283} SerialIRPEpilogue(pDevExt_12);
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := -1073741670;
    goto L1;

  anon315_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon308_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_617 := 18;
    goto L166;

  anon223_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_621 := strConst__li2bpl149;
    goto L162;

  anon222_Then:
    assume {:partition} 0 > status_19;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_620 := strConst__li2bpl2;
    call {:si_unique_call 1284} vslice_dummy_var_401 := SerialDbgPrintEx(9, Tmp_620);
    call {:si_unique_call 1285} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1286} SerialIRPEpilogue(pDevExt_12);
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon316_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon219_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 8) == 0;
    goto L129;

  anon218_Then:
    goto L127;

  anon252_Then:
    Tmp_604 := strConst__li2bpl146;
    call {:si_unique_call 1287} vslice_dummy_var_396 := SerialDbgPrintEx(12, Tmp_604);
    goto L270;

  anon253_Then:
    Tmp_609 := strConst__li2bpl145;
    call {:si_unique_call 1288} vslice_dummy_var_395 := SerialDbgPrintEx(12, Tmp_609);
    goto L270;

  anon254_Then:
    Tmp_577 := strConst__li2bpl144;
    call {:si_unique_call 1289} vslice_dummy_var_394 := SerialDbgPrintEx(12, Tmp_577);
    goto L270;

  anon255_Then:
    Tmp_574 := strConst__li2bpl143;
    call {:si_unique_call 1290} vslice_dummy_var_393 := SerialDbgPrintEx(12, Tmp_574);
    goto L270;

  anon256_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    Mem_T.INT4[isMulti_2] := 0;
    Tmp_594 := strConst__li2bpl168;
    call {:si_unique_call 1291} vslice_dummy_var_381 := SerialDbgPrintEx(12, Tmp_594);
    Tmp_608 := strConst__li2bpl148;
    call {:si_unique_call 1292} vslice_dummy_var_382 := SerialDbgPrintEx(12, Tmp_608);
    call {:si_unique_call 1293} sdv_477 := ExAllocatePoolWithTag(512, 16, -666022077);
    pResFiltEvent := sdv_477;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:partition} pResFiltEvent != 0;
    call {:si_unique_call 1294} KeInitializeEvent(pResFiltEvent, 1, 0);
    call {:si_unique_call 1295} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1296} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pResFiltEvent, 1, 1, 1);
    call {:si_unique_call 1297} status_19 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:partition} yogi_error != 1;
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} status_19 == 259;
    call {:si_unique_call 1298} vslice_dummy_var_337 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L319;

  L319:
    call {:si_unique_call 1299} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    goto anon225_Then, anon225_Else;

  anon225_Else:
    goto L327;

  L327:
    call {:si_unique_call 1300} status_19 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:partition} status_19 >= 0;
    Tmp_622 := strConst__li2bpl91;
    call {:si_unique_call 1301} status_19 := SerialGetRegistryKeyValue(pnpKey_2, Tmp_622, 32, isMulti_2, 4);
    call {:si_unique_call 1302} vslice_dummy_var_338 := ZwClose(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_639;
    pResList := Tmp_639;
    Tmp_644 := strConst__li2bpl169;
    call {:si_unique_call 1303} vslice_dummy_var_383 := SerialDbgPrintEx(12, Tmp_644);
    listNum := 0;
    goto L346;

  L346:
    call {:si_unique_call 1304} Tmp_589, Tmp_599, Tmp_605, gotInt_1, pResDesc, listNum, Tmp_612, Tmp_616, j, gotISR_1, Tmp_637, vslice_dummy_var_384, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387 := SerialPnpDispatch_loop_L346(pResList, pDevExt_12, Tmp_589, isMulti_2, Tmp_599, pLowerDevObj_3, Tmp_605, gotInt_1, pResDesc, listNum, Tmp_612, pReqList, Tmp_616, j, gotISR_1, Tmp_637, vslice_dummy_var_384, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387);
    goto L346_last;

  L346_last:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    goto anon228_Then, anon228_Else;

  anon228_Else:
    gotISR_1 := 0;
    gotInt_1 := 0;
    Tmp_637 := strConst__li2bpl170;
    call {:si_unique_call 1305} vslice_dummy_var_384 := SerialDbgPrintEx(12, Tmp_637);
    j := 0;
    goto L354;

  L354:
    call {:si_unique_call 1306} Tmp_589, Tmp_599, Tmp_605, gotInt_1, pResDesc, Tmp_612, Tmp_616, j, gotISR_1, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387 := SerialPnpDispatch_loop_L354(pResList, pDevExt_12, Tmp_589, isMulti_2, Tmp_599, pLowerDevObj_3, Tmp_605, gotInt_1, pResDesc, Tmp_612, Tmp_616, j, gotISR_1, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387);
    goto L354_last;

  L354_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    Tmp_589 := j;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_599;
    pResDesc := Tmp_599 + Tmp_589 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto L363;

  L363:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} gotInt_1 != 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto L369;

  L369:
    j := j + 1;
    goto L369_dummy;

  L369_dummy:
    assume false;
    return;

  anon233_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} gotInt_1 == 0;
    goto L369;

  anon236_Then:
    assume {:partition} gotInt_1 != 0;
    goto L355;

  L355:
    listNum := listNum + 1;
    goto L355_dummy;

  L355_dummy:
    assume false;
    return;

  anon235_Then:
    assume {:partition} gotISR_1 != 0;
    goto L355;

  anon234_Then:
    assume {:partition} gotInt_1 == 0;
    goto L364;

  anon232_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L364;

  anon271_Then:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} gotInt_1 != 0;
    goto L363;

  anon231_Then:
    assume {:partition} gotInt_1 == 0;
    gotInt_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_616 := strConst__li2bpl172;
    call {:si_unique_call 1307} vslice_dummy_var_386 := SerialDbgPrintEx(12, Tmp_616);
    goto L363;

  anon301_Then:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    Tmp_612 := strConst__li2bpl173;
    call {:si_unique_call 1308} vslice_dummy_var_387 := SerialDbgPrintEx(12, Tmp_612);
    goto L363;

  anon300_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:partition} gotISR_1 == 0;
    gotISR_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_605 := strConst__li2bpl171;
    call {:si_unique_call 1309} vslice_dummy_var_385 := SerialDbgPrintEx(12, Tmp_605);
    goto L363;

  anon238_Then:
    assume {:partition} gotISR_1 != 0;
    goto L363;

  anon237_Then:
    goto L363;

  anon230_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L363;

  anon229_Then:
    goto L355;

  anon228_Then:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    Tmp_640 := strConst__li2bpl2;
    call {:si_unique_call 1310} vslice_dummy_var_388 := SerialDbgPrintEx(9, Tmp_640);
    call {:si_unique_call 1311} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1312} SerialIRPEpilogue(pDevExt_12);
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := 0;
    goto L1;

  anon302_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon227_Then:
    assume {:partition} 0 > status_19;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_572 := strConst__li2bpl2;
    call {:si_unique_call 1313} vslice_dummy_var_389 := SerialDbgPrintEx(9, Tmp_572);
    call {:si_unique_call 1314} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1315} SerialIRPEpilogue(pDevExt_12);
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon303_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon225_Then:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto L327;

  anon226_Then:
    Tmp_607 := strConst__li2bpl152;
    call {:si_unique_call 1316} vslice_dummy_var_390 := SerialDbgPrintEx(12, Tmp_607);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    status_19 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))];
    Tmp_588 := strConst__li2bpl2;
    call {:si_unique_call 1317} vslice_dummy_var_391 := SerialDbgPrintEx(9, Tmp_588);
    call {:si_unique_call 1318} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1319} SerialIRPEpilogue(pDevExt_12);
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon304_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon224_Then:
    assume {:partition} status_19 != 259;
    goto L319;

  anon299_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon298_Then:
    assume {:partition} pResFiltEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    Tmp_591 := strConst__li2bpl2;
    call {:si_unique_call 1320} vslice_dummy_var_392 := SerialDbgPrintEx(9, Tmp_591);
    call {:si_unique_call 1321} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1322} SerialIRPEpilogue(pDevExt_12);
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := -1073741670;
    goto L1;

  anon305_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon257_Then:
    Tmp_575 := strConst__li2bpl142;
    call {:si_unique_call 1323} vslice_dummy_var_380 := SerialDbgPrintEx(12, Tmp_575);
    goto L270;

  anon258_Then:
    Tmp_633 := strConst__li2bpl153;
    call {:si_unique_call 1324} vslice_dummy_var_376 := SerialDbgPrintEx(12, Tmp_633);
    call {:si_unique_call 1325} sdv_482 := ExAllocatePoolWithTag(512, 16, -666022077);
    pQueryCapsEvent := sdv_482;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:partition} pQueryCapsEvent != 0;
    call {:si_unique_call 1326} KeInitializeEvent(pQueryCapsEvent, 1, 0);
    call {:si_unique_call 1327} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1328} sdv_IoSetCompletionRoutine(PIrp_11, li2bplFunctionConstant515, pQueryCapsEvent, 1, 1, 1);
    call {:si_unique_call 1329} status_19 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:partition} yogi_error != 1;
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} status_19 == 259;
    call {:si_unique_call 1330} vslice_dummy_var_339 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L458;

  L458:
    call {:si_unique_call 1331} sdv_ExFreePool(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    status_19 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))];
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    goto L483;

  L483:
    Tmp_582 := strConst__li2bpl2;
    call {:si_unique_call 1332} vslice_dummy_var_378 := SerialDbgPrintEx(9, Tmp_582);
    call {:si_unique_call 1333} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1334} SerialIRPEpilogue(pDevExt_12);
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon296_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon295_Then:
    Tmp_642 := strConst__li2bpl154;
    call {:si_unique_call 1335} vslice_dummy_var_377 := SerialDbgPrintEx(12, Tmp_642);
    call {:si_unique_call 1336} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(PIrp_11);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc pDevCaps;
    cap := 2;
    goto L476;

  L476:
    call {:si_unique_call 1337} cap, Tmp_600, Tmp_623, Tmp_626, Tmp_643 := SerialPnpDispatch_loop_L476(pDevExt_12, cap, Tmp_600, Tmp_623, Tmp_626, pDevCaps, Tmp_643);
    goto L476_last;

  L476_last:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon240_Then, anon240_Else;

  anon240_Else:
    assume {:partition} 7 > cap;
    Tmp_626 := cap;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_600;
    Tmp_643 := cap;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    havoc Tmp_623;
    assume {:nonnull} Tmp_600 != 0;
    assume Tmp_600 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    Mem_T.INT4[Tmp_600 + Tmp_626 * 4] := Mem_T.INT4[Tmp_623 + Tmp_643 * 4];
    cap := cap + 1;
    goto anon240_Else_dummy;

  anon240_Else_dummy:
    assume false;
    return;

  anon240_Then:
    assume {:partition} cap >= 7;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_603;
    assume {:nonnull} Tmp_603 != 0;
    assume Tmp_603 > 0;
    Mem_T.INT4[Tmp_603] := 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_571;
    assume {:nonnull} Tmp_571 != 0;
    assume Tmp_571 > 0;
    Mem_T.INT4[Tmp_571 + 1 * 4] := 1;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto L483;

  anon239_Then:
    assume {:partition} status_19 != 259;
    goto L458;

  anon294_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon293_Then:
    assume {:partition} pQueryCapsEvent == 0;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741670;
    Tmp_586 := strConst__li2bpl2;
    call {:si_unique_call 1338} vslice_dummy_var_379 := SerialDbgPrintEx(9, Tmp_586);
    call {:si_unique_call 1339} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1340} SerialIRPEpilogue(pDevExt_12);
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := -1073741670;
    goto L1;

  anon297_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon259_Then:
    Tmp_595 := strConst__li2bpl141;
    call {:si_unique_call 1341} vslice_dummy_var_375 := SerialDbgPrintEx(12, Tmp_595);
    goto L270;

  anon260_Then:
    Tmp_584 := strConst__li2bpl140;
    call {:si_unique_call 1342} vslice_dummy_var_368 := SerialDbgPrintEx(12, Tmp_584);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    Tmp_585 := strConst__li2bpl160;
    call {:si_unique_call 1343} vslice_dummy_var_373 := SerialDbgPrintEx(12, Tmp_585);
    goto L524;

  L524:
    call {:si_unique_call 1344} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1345} status_19 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon291_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon267_Then:
    Tmp_587 := strConst__li2bpl155;
    call {:si_unique_call 1346} vslice_dummy_var_374 := SerialDbgPrintEx(12, Tmp_587);
    goto L524;

  anon268_Then:
    Tmp_625 := strConst__li2bpl159;
    call {:si_unique_call 1347} vslice_dummy_var_372 := SerialDbgPrintEx(12, Tmp_625);
    goto L524;

  anon269_Then:
    Tmp_592 := strConst__li2bpl158;
    call {:si_unique_call 1348} vslice_dummy_var_371 := SerialDbgPrintEx(12, Tmp_592);
    goto L524;

  anon270_Then:
    Tmp_619 := strConst__li2bpl157;
    call {:si_unique_call 1349} vslice_dummy_var_370 := SerialDbgPrintEx(12, Tmp_619);
    goto L524;

  anon241_Then:
    Tmp_629 := strConst__li2bpl156;
    call {:si_unique_call 1350} vslice_dummy_var_369 := SerialDbgPrintEx(12, Tmp_629);
    goto L524;

  anon261_Then:
    Tmp_590 := strConst__li2bpl139;
    call {:si_unique_call 1351} vslice_dummy_var_366 := SerialDbgPrintEx(12, Tmp_590);
    Tmp_624 := strConst__li2bpl148;
    call {:si_unique_call 1352} vslice_dummy_var_367 := SerialDbgPrintEx(12, Tmp_624);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon242_Then, anon242_Else;

  anon242_Else:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1353} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 2, 0);
    goto L541;

  L541:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1354} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1355} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon290_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon242_Then:
    goto L541;

  anon262_Then:
    Tmp_573 := strConst__li2bpl161;
    call {:si_unique_call 1356} vslice_dummy_var_360 := SerialDbgPrintEx(12, Tmp_573);
    Tmp_630 := strConst__li2bpl148;
    call {:si_unique_call 1357} vslice_dummy_var_361 := SerialDbgPrintEx(12, Tmp_630);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon243_Then, anon243_Else;

  anon243_Else:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := -1073741637;
    Tmp_579 := strConst__li2bpl167;
    call {:si_unique_call 1358} vslice_dummy_var_362 := SerialDbgPrintEx(12, Tmp_579);
    Tmp_636 := strConst__li2bpl2;
    call {:si_unique_call 1359} vslice_dummy_var_363 := SerialDbgPrintEx(9, Tmp_636);
    call {:si_unique_call 1360} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1361} SerialIRPEpilogue(pDevExt_12);
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := -1073741637;
    goto L1;

  anon286_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon243_Then:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon244_Then, anon244_Else;

  anon244_Else:
    call {:si_unique_call 1362} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1363} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon287_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon244_Then:
    call {:si_unique_call 1364} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon245_Then, anon245_Else;

  anon245_Else:
    call {:si_unique_call 1365} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 17;
    Tmp_634 := strConst__li2bpl166;
    call {:si_unique_call 1366} vslice_dummy_var_364 := SerialDbgPrintEx(12, Tmp_634);
    Tmp_578 := strConst__li2bpl2;
    call {:si_unique_call 1367} vslice_dummy_var_365 := SerialDbgPrintEx(9, Tmp_578);
    call {:si_unique_call 1368} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1369} SerialIRPEpilogue(pDevExt_12);
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := 17;
    goto L1;

  anon288_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon245_Then:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1370} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 2, 1);
    call {:si_unique_call 1371} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1372} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1373} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon289_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon263_Then:
    Tmp_576 := strConst__li2bpl162;
    call {:si_unique_call 1374} vslice_dummy_var_356 := SerialDbgPrintEx(12, Tmp_576);
    Tmp_583 := strConst__li2bpl148;
    call {:si_unique_call 1375} vslice_dummy_var_357 := SerialDbgPrintEx(12, Tmp_583);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1376} SerialSetDeviceFlags(pDevExt_12, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12), 2, 1);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1377} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 4, 1);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1378} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 2, 0);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1379} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_593;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_593;
    call {:si_unique_call 1380} vslice_dummy_var_358 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1381} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_594;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_594;
    call {:si_unique_call 1382} sdv_536 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    pendingIRPs := sdv_536;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume {:partition} pendingIRPs != 0;
    call {:si_unique_call 1383} vslice_dummy_var_340 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L643;

  L643:
    call {:si_unique_call 1384} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_595;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_595;
    call {:si_unique_call 1385} vslice_dummy_var_359 := sdv_InterlockedIncrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon246_Then, anon246_Else;

  anon246_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 1) != 0;
    call {:si_unique_call 1386} SerialReleaseResources(pDevExt_12);
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume {:partition} yogi_error != 1;
    goto L650;

  L650:
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1387} sdv_IoSkipCurrentIrpStackLocation(PIrp_11);
    call {:si_unique_call 1388} Tmp_570 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon285_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon284_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon246_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 1) == 0;
    goto L650;

  anon283_Then:
    assume {:partition} pendingIRPs == 0;
    goto L643;

  anon264_Then:
    Tmp_602 := strConst__li2bpl138;
    call {:si_unique_call 1389} vslice_dummy_var_354 := SerialDbgPrintEx(12, Tmp_602);
    Tmp_581 := strConst__li2bpl148;
    call {:si_unique_call 1390} vslice_dummy_var_355 := SerialDbgPrintEx(12, Tmp_581);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1391} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 1, 0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1392} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1393} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon282_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon265_Then:
    Tmp_615 := strConst__li2bpl163;
    call {:si_unique_call 1394} vslice_dummy_var_351 := SerialDbgPrintEx(12, Tmp_615);
    Tmp_618 := strConst__li2bpl148;
    call {:si_unique_call 1395} vslice_dummy_var_352 := SerialDbgPrintEx(12, Tmp_618);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1396} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 1, 1);
    call {:si_unique_call 1397} SerialKillPendingIrps(PDevObj_15);
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1398} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_596;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_596;
    call {:si_unique_call 1399} vslice_dummy_var_353 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1400} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_597;
    Mem_T.INT4[Tmp_597] := vslice_dummy_var_597;
    call {:si_unique_call 1401} sdv_575 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    pendingIRPs_2 := sdv_575;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume {:partition} pendingIRPs_2 != 0;
    call {:si_unique_call 1402} vslice_dummy_var_342 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L697;

  L697:
    call {:si_unique_call 1403} vslice_dummy_var_341 := SerialRemoveDevObj(PDevObj_15);
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1404} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1405} Tmp_570 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_11);
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon281_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon280_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon279_Then:
    assume {:partition} pendingIRPs_2 == 0;
    goto L697;

  anon278_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon266_Then:
    Tmp_646 := strConst__li2bpl164;
    call {:si_unique_call 1406} vslice_dummy_var_347 := SerialDbgPrintEx(12, Tmp_646);
    Tmp_632 := strConst__li2bpl148;
    call {:si_unique_call 1407} vslice_dummy_var_348 := SerialDbgPrintEx(12, Tmp_632);
    call {:si_unique_call 1408} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon247_Then, anon247_Else;

  anon247_Else:
    call {:si_unique_call 1409} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 17;
    Tmp_598 := strConst__li2bpl166;
    call {:si_unique_call 1410} vslice_dummy_var_349 := SerialDbgPrintEx(12, Tmp_598);
    Tmp_638 := strConst__li2bpl2;
    call {:si_unique_call 1411} vslice_dummy_var_350 := SerialDbgPrintEx(9, Tmp_638);
    call {:si_unique_call 1412} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1413} SerialIRPEpilogue(pDevExt_12);
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := 17;
    goto L1;

  anon276_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon247_Then:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1414} SerialSetDeviceFlags(pDevExt_12, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_12), 1, 1);
    call {:si_unique_call 1415} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := 0;
    call {:si_unique_call 1416} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_11);
    call {:si_unique_call 1417} Tmp_570 := SerialIoCallDriver(pDevExt_12, pLowerDevObj_3, PIrp_11);
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon277_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon216_Then:
    Tmp_606 := strConst__li2bpl165;
    call {:si_unique_call 1418} vslice_dummy_var_345 := SerialDbgPrintEx(12, Tmp_606);
    call {:si_unique_call 1419} MmLockPagableSectionByHandle(0);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1420} status_19 := SerialStartDevice(PDevObj_15, PIrp_11);
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon248_Then, anon248_Else;

  anon248_Else:
    goto L768;

  L768:
    call {:si_unique_call 1421} MmUnlockPagableImageSection(0);
    assume {:nonnull} PIrp_11 != 0;
    assume PIrp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_11))] := status_19;
    Tmp_610 := strConst__li2bpl2;
    call {:si_unique_call 1422} vslice_dummy_var_346 := SerialDbgPrintEx(9, Tmp_610);
    call {:si_unique_call 1423} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1424} SerialIRPEpilogue(pDevExt_12);
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume {:partition} yogi_error != 1;
    Tmp_570 := status_19;
    goto L1;

  anon274_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon248_Then:
    call {:si_unique_call 1425} vslice_dummy_var_343 := SerialGotoPowerState(PDevObj_15, pDevExt_12, 4);
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume {:partition} yogi_error != 1;
    goto L768;

  anon275_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon273_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_649: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_16: int, actual_PIrp_12: int) returns (Tmp_649: int)
{
  var {:pointer} Tmp_650: int;
  var {:pointer} pDevExt_13: int;
  var {:pointer} Tmp_651: int;
  var {:pointer} pIrpStack_7: int;
  var {:pointer} pLowerDevObj_4: int;
  var {:scalar} status_20: int;
  var {:pointer} PDevObj_16: int;
  var {:pointer} PIrp_12: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_599: int;

  anon0:
    PDevObj_16 := actual_PDevObj_16;
    PIrp_12 := actual_PIrp_12;
    call {:si_unique_call 1426} Tmp_650 := __HAVOC_malloc(112);
    call {:si_unique_call 1427} Tmp_651 := __HAVOC_malloc(112);
    call {:si_unique_call 1428} pIrpStack_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_12);
    status_20 := -1073741822;
    assume {:nonnull} PDevObj_16 != 0;
    assume PDevObj_16 > 0;
    havoc pDevExt_13;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc pLowerDevObj_4;
    call {:si_unique_call 1429} sdv_do_paged_code_check();
    Tmp_651 := strConst__li2bpl175;
    call {:si_unique_call 1430} vslice_dummy_var_407 := SerialDbgPrintEx(11, Tmp_651);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1431} KeInitializeEvent(SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_13), 1, 0);
    call {:si_unique_call 1432} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_12);
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    call {:si_unique_call 1433} sdv_IoSetCompletionRoutine(PIrp_12, li2bplFunctionConstant515, SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_13), 1, 1, 1);
    call {:si_unique_call 1434} status_20 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_12);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_20 == 259;
    call {:si_unique_call 1435} vslice_dummy_var_406 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PIrp_12 != 0;
    assume PIrp_12 > 0;
    status_20 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_12))];
    goto L34;

  L34:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_20 >= 0;
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    havoc vslice_dummy_var_598;
    havoc vslice_dummy_var_599;
    call {:si_unique_call 1436} status_20 := SerialFinishStartDevice(PDevObj_16, vslice_dummy_var_598, vslice_dummy_var_599, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    Tmp_649 := status_20;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} 0 > status_20;
    Tmp_650 := strConst__li2bpl176;
    call {:si_unique_call 1437} vslice_dummy_var_408 := SerialDbgPrintEx(14, Tmp_650);
    Tmp_649 := status_20;
    goto L1;

  anon9_Then:
    assume {:partition} status_20 != 259;
    goto L34;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_653: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_653 == 131072 || Tmp_653 == 115200 || Tmp_653 == 57344 || Tmp_653 == 57600 || Tmp_653 == 38400 || Tmp_653 == 19200 || Tmp_653 == 14400 || Tmp_653 == 9600 || Tmp_653 == 7200 || Tmp_653 == 4800 || Tmp_653 == 2400 || Tmp_653 == 1800 || Tmp_653 == 1200 || Tmp_653 == 600 || Tmp_653 == 300 || Tmp_653 == 150 || Tmp_653 == 135 || Tmp_653 == 110 || Tmp_653 == 75 || Tmp_653 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_653: int)
{
  var {:scalar} Bauds: int;

  anon0:
    Bauds := actual_Bauds;
    call {:si_unique_call 1438} sdv_do_paged_code_check();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Bauds, 65536) != 0;
    Tmp_653 := 131072;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} BAND(Bauds, 65536) == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(Bauds, 131072) != 0;
    Tmp_653 := 115200;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(Bauds, 131072) == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(Bauds, 32768) != 0;
    Tmp_653 := 57344;
    goto L1;

  anon41_Then:
    assume {:partition} BAND(Bauds, 32768) == 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(Bauds, 262144) != 0;
    Tmp_653 := 57600;
    goto L1;

  anon42_Then:
    assume {:partition} BAND(Bauds, 262144) == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(Bauds, 16384) != 0;
    Tmp_653 := 38400;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(Bauds, 16384) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(Bauds, 8192) != 0;
    Tmp_653 := 19200;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(Bauds, 8192) == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Bauds, 4096) != 0;
    Tmp_653 := 14400;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(Bauds, 4096) == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Bauds, 2048) != 0;
    Tmp_653 := 9600;
    goto L1;

  anon46_Then:
    assume {:partition} BAND(Bauds, 2048) == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Bauds, 1024) != 0;
    Tmp_653 := 7200;
    goto L1;

  anon47_Then:
    assume {:partition} BAND(Bauds, 1024) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(Bauds, 512) != 0;
    Tmp_653 := 4800;
    goto L1;

  anon48_Then:
    assume {:partition} BAND(Bauds, 512) == 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Bauds, 256) != 0;
    Tmp_653 := 2400;
    goto L1;

  anon49_Then:
    assume {:partition} BAND(Bauds, 256) == 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} BAND(Bauds, 128) != 0;
    Tmp_653 := 1800;
    goto L1;

  anon50_Then:
    assume {:partition} BAND(Bauds, 128) == 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(Bauds, 64) != 0;
    Tmp_653 := 1200;
    goto L1;

  anon51_Then:
    assume {:partition} BAND(Bauds, 64) == 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Bauds, 32) != 0;
    Tmp_653 := 600;
    goto L1;

  anon52_Then:
    assume {:partition} BAND(Bauds, 32) == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Bauds, 16) != 0;
    Tmp_653 := 300;
    goto L1;

  anon53_Then:
    assume {:partition} BAND(Bauds, 16) == 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Bauds, 8) != 0;
    Tmp_653 := 150;
    goto L1;

  anon54_Then:
    assume {:partition} BAND(Bauds, 8) == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(Bauds, 4) != 0;
    Tmp_653 := 135;
    goto L1;

  anon55_Then:
    assume {:partition} BAND(Bauds, 4) == 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(Bauds, 2) != 0;
    Tmp_653 := 110;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(Bauds, 2) == 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Bauds, 1) != 0;
    Tmp_653 := 75;
    goto L1;

  anon57_Then:
    assume {:partition} BAND(Bauds, 1) == 0;
    Tmp_653 := 0;
    goto L1;
}



procedure {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_22: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_22: int)
{
  var {:pointer} keyHandle_2: int;
  var {:scalar} Tmp_657: int;
  var {:pointer} pRegName_1: int;
  var {:pointer} Tmp_658: int;
  var {:scalar} symLinkName: int;
  var {:pointer} Tmp_659: int;
  var {:pointer} Tmp_660: int;
  var {:scalar} status_21: int;
  var {:pointer} Tmp_664: int;
  var {:scalar} Tmp_666: int;
  var {:pointer} Extension_22: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;

  anon0:
    call {:si_unique_call 1439} Tmp_657 := __HAVOC_malloc(20);
    call {:si_unique_call 1440} pRegName_1 := __HAVOC_malloc(4);
    call {:si_unique_call 1441} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 1442} vslice_dummy_var_409 := __HAVOC_malloc(4);
    Extension_22 := actual_Extension_22;
    call {:si_unique_call 1443} Tmp_658 := __HAVOC_malloc(132);
    call {:si_unique_call 1444} Tmp_660 := __HAVOC_malloc(76);
    call {:si_unique_call 1445} vslice_dummy_var_412 := __HAVOC_malloc(44);
    call {:si_unique_call 1446} Tmp_664 := __HAVOC_malloc(236);
    call {:si_unique_call 1447} sdv_do_paged_code_check();
    Tmp_664 := strConst__li2bpl177;
    call {:si_unique_call 1448} vslice_dummy_var_413 := SerialDbgPrintEx(6, Tmp_664);
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_22)] == 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 1449} status_21 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    call {:si_unique_call 1450} sdv_ExFreePool(0);
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto L17;

  L17:
    call {:si_unique_call 1451} status_21 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 1452} RtlInitUnicodeString(symLinkName, 0);
    call {:si_unique_call 1453} status_21 := SerialReadSymName(Extension_22, keyHandle_2, symLinkName, pRegName_1);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_21 != 0;
    goto L43;

  L43:
    call {:si_unique_call 1454} vslice_dummy_var_410 := ZwClose(0);
    goto L14;

  L14:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    call {:si_unique_call 1455} sdv_ExFreePool(0);
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto L56;

  L56:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    call {:si_unique_call 1456} status_21 := RtlDeleteRegistryValue(4, 0, 0);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} status_21 < 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc Tmp_666;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc Tmp_659;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    assume {:nonnull} Tmp_659 != 0;
    assume Tmp_659 > 0;
    havoc vslice_dummy_var_600;
    havoc vslice_dummy_var_601;
    havoc vslice_dummy_var_602;
    havoc vslice_dummy_var_603;
    call {:si_unique_call 1457} SerialLogError(vslice_dummy_var_600, vslice_dummy_var_601, vslice_dummy_var_602, Tmp_657, 0, 0, 0, 55, status_21, 393222, Tmp_666, vslice_dummy_var_603, 0, 0);
    Tmp_658 := strConst__li2bpl179;
    call {:si_unique_call 1458} vslice_dummy_var_414 := SerialDbgPrintEx(14, Tmp_658);
    goto L1;

  L1:
    return;

  anon33_Then:
    assume {:partition} 0 <= status_21;
    goto L1;

  anon32_Then:
    goto L1;

  anon31_Then:
    goto L1;

  anon25_Then:
    goto L56;

  anon29_Then:
    assume {:partition} status_21 == 0;
    Tmp_660 := strConst__li2bpl178;
    call {:si_unique_call 1459} vslice_dummy_var_415 := SerialDbgPrintEx(4, Tmp_660);
    call {:si_unique_call 1460} vslice_dummy_var_411 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 1461} sdv_ExFreePool(0);
    assume {:nonnull} pRegName_1 != 0;
    assume pRegName_1 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1462} sdv_ExFreePool(0);
    goto L43;

  anon30_Then:
    goto L43;

  anon28_Then:
    assume {:partition} status_21 != 0;
    goto L14;

  anon27_Then:
    goto L17;

  anon26_Then:
    goto L14;

  anon24_Then:
    goto L14;

  anon23_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_22)] != 0;
    goto L1;
}



procedure {:origName "_sdv_init21"} _sdv_init21();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init21"} _sdv_init21()
{
  var vslice_dummy_var_416: int;

  anon0:
    call {:si_unique_call 1463} vslice_dummy_var_416 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartTimerLowerRTS"} SerialStartTimerLowerRTS(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartTimerLowerRTS"} SerialStartTimerLowerRTS(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int)
{
  var {:pointer} structPtr888CharTime: int;
  var {:pointer} Tmp_669: int;
  var {:pointer} Tmp_670: int;
  var {:scalar} OldIrql_10: int;
  var {:scalar} sdv_597: int;
  var {:pointer} Extension_23: int;
  var {:scalar} CharTime: int;
  var {:pointer} Tmp_671: int;
  var {:pointer} Dpc_7: int;
  var {:pointer} DeferredContext_5: int;
  var vslice_dummy_var_417: int;
  var vslice_dummy_var_418: int;
  var vslice_dummy_var_419: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_421: int;

  anon0:
    call {:si_unique_call 1464} vslice_dummy_var_417 := __HAVOC_malloc(20);
    call {:si_unique_call 1465} CharTime := __HAVOC_malloc(20);
    call {:si_unique_call 1466} vslice_dummy_var_418 := __HAVOC_malloc(4);
    Dpc_7 := actual_Dpc_7;
    DeferredContext_5 := actual_DeferredContext_5;
    call {:si_unique_call 1467} Tmp_669 := __HAVOC_malloc(108);
    call {:si_unique_call 1468} Tmp_670 := __HAVOC_malloc(124);
    Extension_23 := DeferredContext_5;
    Tmp_670 := strConst__li2bpl181;
    call {:si_unique_call 1469} vslice_dummy_var_420 := SerialDbgPrintEx(2, Tmp_670);
    call {:si_unique_call 1470} Tmp_671 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    Mem_T.INT4[Tmp_671] := OldIrql_10;
    call {:si_unique_call 1471} sdv_KeAcquireSpinLock(0, Tmp_671);
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    OldIrql_10 := Mem_T.INT4[Tmp_671];
    call {:si_unique_call 1472} structPtr888CharTime := SerialGetCharTime(Extension_23);
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} structPtr888CharTime != 0;
    assume structPtr888CharTime > 0;
    call {:si_unique_call 1473} sdv_KeReleaseSpinLock(0, OldIrql_10);
    assume {:nonnull} CharTime != 0;
    assume CharTime > 0;
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    call {:si_unique_call 1474} sdv_597 := SerialSetTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(Extension_23), CharTime, PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_23), Extension_23);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_597 != 0;
    call {:si_unique_call 1475} vslice_dummy_var_419 := KeSynchronizeExecution(0, li2bplFunctionConstant900, 0);
    goto L25;

  L25:
    call {:si_unique_call 1476} SerialDpcEpilogue(Extension_23, Dpc_7);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_669 := strConst__li2bpl180;
    call {:si_unique_call 1477} vslice_dummy_var_421 := SerialDbgPrintEx(2, Tmp_669);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} sdv_597 == 0;
    goto L25;
}



procedure {:origName "SerialSetRTS"} SerialSetRTS(actual_Context_7: int) returns (Tmp_673: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_673 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetRTS"} SerialSetRTS(actual_Context_7: int) returns (Tmp_673: int)
{
  var {:pointer} Tmp_675: int;
  var {:pointer} Extension_24: int;
  var {:scalar} ModemControl: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_422: int;

  anon0:
    Context_7 := actual_Context_7;
    call {:si_unique_call 1478} Tmp_675 := __HAVOC_malloc(80);
    Extension_24 := Context_7;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 1479} ModemControl := corral_nondet();
    ModemControl := BOR(ModemControl, 2);
    Tmp_675 := strConst__li2bpl182;
    call {:si_unique_call 1480} vslice_dummy_var_422 := SerialDbgPrintEx(13, Tmp_675);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    Tmp_673 := 0;
    return;
}



procedure {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_8: int) returns (Tmp_678: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_678 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_8: int) returns (Tmp_678: int)
{
  var {:pointer} Tmp_679: int;
  var {:pointer} Extension_25: int;
  var {:scalar} ModemControl_1: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_423: int;

  anon0:
    Context_8 := actual_Context_8;
    call {:si_unique_call 1481} Tmp_679 := __HAVOC_malloc(84);
    Extension_25 := Context_8;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 1482} ModemControl_1 := corral_nondet();
    ModemControl_1 := BAND(ModemControl_1, BNOT(2));
    Tmp_679 := strConst__li2bpl183;
    call {:si_unique_call 1483} vslice_dummy_var_423 := SerialDbgPrintEx(13, Tmp_679);
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_678 := 0;
    return;
}



procedure {:origName "SerialProdXonXoff"} SerialProdXonXoff(actual_Extension_26: int, actual_SendXon: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialProdXonXoff"} SerialProdXonXoff(actual_Extension_26: int, actual_SendXon: int)
{
  var {:pointer} Extension_26: int;
  var {:scalar} SendXon: int;
  var vslice_dummy_var_424: int;

  anon0:
    call {:si_unique_call 1484} vslice_dummy_var_424 := __HAVOC_malloc(4);
    Extension_26 := actual_Extension_26;
    SendXon := actual_SendXon;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L5;

  L5:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} SendXon != 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} SendXon == 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L1;

  anon9_Then:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L5;

  anon12_Then:
    goto L5;

  anon10_Then:
    goto L5;
}



procedure {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_9: int) returns (Tmp_687: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_687 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_9: int) returns (Tmp_687: int)
{
  var {:pointer} Extension_27: int;
  var {:scalar} ModemControl_2: int;
  var {:pointer} Tmp_691: int;
  var {:pointer} Context_9: int;
  var vslice_dummy_var_425: int;

  anon0:
    Context_9 := actual_Context_9;
    call {:si_unique_call 1485} Tmp_691 := __HAVOC_malloc(84);
    Extension_27 := Context_9;
    assume {:nonnull} Extension_27 != 0;
    assume Extension_27 > 0;
    call {:si_unique_call 1486} ModemControl_2 := corral_nondet();
    ModemControl_2 := BAND(ModemControl_2, BNOT(1));
    Tmp_691 := strConst__li2bpl184;
    call {:si_unique_call 1487} vslice_dummy_var_425 := SerialDbgPrintEx(13, Tmp_691);
    assume {:nonnull} Extension_27 != 0;
    assume Extension_27 > 0;
    Tmp_687 := 0;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_426: int;

  anon0:
    call {:si_unique_call 1488} vslice_dummy_var_426 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init24"} _sdv_init24();
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init24"} _sdv_init24()
{

  anon0:
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller: int, actual_KeSetEvent_1: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller: int, actual_KeSetEvent_1: int)
{
  var {:pointer} caller: int;
  var {:scalar} KeSetEvent_1: int;

  anon0:
    caller := actual_caller;
    KeSetEvent_1 := actual_KeSetEvent_1;
    call {:si_unique_call 1489} SLIC_ERROR_ROUTINE(strConst__li2bpl185);
    return;
}



procedure {:origName "SLIC_KeSetEvent_entry"} {:osmodel} SLIC_KeSetEvent_entry(actual_caller_1: int, actual_KeSetEvent_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_KeSetEvent_entry"} {:osmodel} SLIC_KeSetEvent_entry(actual_caller_1: int, actual_KeSetEvent_2: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} KeSetEvent_2: int;

  anon0:
    caller_1 := actual_caller_1;
    KeSetEvent_2 := actual_KeSetEvent_2;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} KeSetEvent_2 != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_irql_current == 2;
    call {:si_unique_call 1490} SLIC_ABORT_1_1(caller_1, KeSetEvent_2);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume {:partition} sdv_irql_current != 2;
    goto L2;

  anon17_Then:
    assume {:partition} KeSetEvent_2 == 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 1491} SLIC_ABORT_1_0(caller_1, KeSetEvent_2);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} sdv_irql_current == 2;
    goto L2;

  anon19_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L2;

  anon15_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L2;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_1_1"} SLIC_ABORT_1_1(actual_caller_2: int, actual_KeSetEvent_3: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_1"} SLIC_ABORT_1_1(actual_caller_2: int, actual_KeSetEvent_3: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} KeSetEvent_3: int;

  anon0:
    caller_2 := actual_caller_2;
    KeSetEvent_3 := actual_KeSetEvent_3;
    call {:si_unique_call 1492} SLIC_ERROR_ROUTINE(strConst__li2bpl186);
    return;
}



procedure {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_10: int) returns (Tmp_704: int);
  free ensures {:va_keep} Tmp_704 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetBaud"} SerialSetBaud(actual_Context_10: int) returns (Tmp_704: int)
{
  var {:pointer} Tmp_711: int;
  var {:pointer} Tmp_714: int;
  var {:scalar} Appropriate: int;
  var {:pointer} Extension_29: int;
  var {:scalar} LineControl: int;
  var {:pointer} Address: int;
  var {:scalar} Divisor: int;
  var {:pointer} Context_10: int;
  var vslice_dummy_var_427: int;

  anon0:
    Context_10 := actual_Context_10;
    Tmp_714 := Context_10;
    assume {:nonnull} Tmp_714 != 0;
    assume Tmp_714 > 0;
    havoc Extension_29;
    Tmp_711 := Context_10;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    havoc Appropriate;
    assume {:nonnull} Extension_29 != 0;
    assume Extension_29 > 0;
    havoc Address;
    Divisor := Appropriate;
    call {:si_unique_call 1493} LineControl := corral_nondet();
    call {:si_unique_call 1494} vslice_dummy_var_427 := corral_nondet();
    Tmp_704 := 0;
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_428: int;

  anon0:
    call {:si_unique_call 1495} vslice_dummy_var_428 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_719: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_719: int)
{
  var {:scalar} Tmp_720: int;
  var {:pointer} Tmp_721: int;
  var {:scalar} Tmp_722: int;
  var {:dopa} {:scalar} AppropriateDivisor: int;
  var {:pointer} NewChars: int;
  var {:pointer} Tmp_723: int;
  var {:pointer} Tmp_724: int;
  var {:pointer} Tmp_725: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} NewTimeouts: int;
  var {:scalar} Mask_1: int;
  var {:pointer} escapeChar: int;
  var {:pointer} Tmp_727: int;
  var {:scalar} Tmp_728: int;
  var {:scalar} Tmp_729: int;
  var {:scalar} S_1: int;
  var {:scalar} Tmp_730: int;
  var {:pointer} Lc: int;
  var {:pointer} Tmp_731: int;
  var {:scalar} Tmp_732: int;
  var {:pointer} Tmp_733: int;
  var {:scalar} Status_2: int;
  var {:scalar} prologueStatus: int;
  var {:pointer} Tmp_734: int;
  var {:scalar} sdv_627: int;
  var {:pointer} Tmp_735: int;
  var {:scalar} S_2: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} Rs: int;
  var {:pointer} Br: int;
  var {:pointer} Tmp_737: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} IrpSp_4: int;
  var {:pointer} HandFlow: int;
  var {:scalar} OldIrql_11: int;
  var {:scalar} Tmp_740: int;
  var {:pointer} Tmp_741: int;
  var {:scalar} Tmp_742: int;
  var {:scalar} Tmp_743: int;
  var {:scalar} LData: int;
  var {:pointer} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:scalar} Tmp_746: int;
  var {:scalar} S_3: int;
  var {:scalar} Tmp_747: int;
  var {:pointer} Tmp_748: int;
  var {:pointer} Tmp_749: int;
  var {:pointer} Extension_30: int;
  var {:scalar} LParity: int;
  var {:scalar} sdv_641: int;
  var {:pointer} Tmp_750: int;
  var {:scalar} S_4: int;
  var {:scalar} ModemControl_3: int;
  var {:scalar} Mask_2: int;
  var {:scalar} Tmp_751: int;
  var {:scalar} Tmp_752: int;
  var {:scalar} NewMask: int;
  var {:pointer} Xc_1: int;
  var {:scalar} Tmp_753: int;
  var {:scalar} LStop: int;
  var {:scalar} S_5: int;
  var {:scalar} BaudRate: int;
  var {:scalar} S_6: int;
  var {:scalar} S_7: int;
  var {:pointer} Tmp_754: int;
  var {:pointer} Lc_1: int;
  var {:pointer} Tmp_755: int;
  var {:scalar} S_8: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_606: int;
  var vslice_dummy_var_607: int;
  var vslice_dummy_var_608: int;
  var vslice_dummy_var_609: int;
  var vslice_dummy_var_610: int;
  var vslice_dummy_var_611: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_614: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_616: int;

  anon0:
    call {:si_unique_call 1496} AppropriateDivisor := __HAVOC_malloc(4);
    call {:si_unique_call 1497} S_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1498} S_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1499} S_3 := __HAVOC_malloc(8);
    call {:si_unique_call 1500} S_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1501} S_5 := __HAVOC_malloc(8);
    call {:si_unique_call 1502} S_6 := __HAVOC_malloc(8);
    call {:si_unique_call 1503} S_7 := __HAVOC_malloc(8);
    call {:si_unique_call 1504} S_8 := __HAVOC_malloc(8);
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 1505} Tmp_725 := __HAVOC_malloc(124);
    call {:si_unique_call 1506} Tmp_727 := __HAVOC_malloc(96);
    call {:si_unique_call 1507} Tmp_731 := __HAVOC_malloc(148);
    call {:si_unique_call 1508} Tmp_733 := __HAVOC_malloc(148);
    call {:si_unique_call 1509} Tmp_738 := __HAVOC_malloc(72);
    call {:si_unique_call 1510} Tmp_741 := __HAVOC_malloc(72);
    call {:si_unique_call 1511} Tmp_744 := __HAVOC_malloc(128);
    call {:si_unique_call 1512} Tmp_748 := __HAVOC_malloc(140);
    call {:si_unique_call 1513} Tmp_749 := __HAVOC_malloc(136);
    call {:si_unique_call 1514} Tmp_755 := __HAVOC_malloc(68);
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc Extension_30;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon437_Then, anon437_Else;

  anon437_Else:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741808;
    call {:si_unique_call 1515} sdv_IoCompleteRequest(0, 0);
    Tmp_719 := -1073741808;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon437_Then:
    call {:si_unique_call 1516} prologueStatus := SerialIRPPrologue(Irp_15, Extension_30);
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:partition} prologueStatus != 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:partition} prologueStatus != 259;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := prologueStatus;
    Tmp_741 := strConst__li2bpl2;
    call {:si_unique_call 1517} vslice_dummy_var_443 := SerialDbgPrintEx(9, Tmp_741);
    call {:si_unique_call 1518} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1519} SerialIRPEpilogue(Extension_30);
    goto anon438_Then, anon438_Else;

  anon438_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  L24:
    Tmp_719 := prologueStatus;
    goto L1;

  anon438_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon322_Then:
    assume {:partition} prologueStatus == 259;
    goto L24;

  anon321_Then:
    assume {:partition} prologueStatus == 0;
    Tmp_727 := strConst__li2bpl40;
    call {:si_unique_call 1520} vslice_dummy_var_444 := SerialDbgPrintEx(9, Tmp_727);
    call {:si_unique_call 1521} sdv_641 := SerialCompleteIfError(DeviceObject_15, Irp_15);
    goto anon439_Then, anon439_Else;

  anon439_Else:
    assume {:partition} yogi_error != 1;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:partition} sdv_641 != 0;
    Tmp_719 := -1073741536;
    goto L1;

  anon323_Then:
    assume {:partition} sdv_641 == 0;
    call {:si_unique_call 1522} IrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Status_2 := 0;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon440_Then, anon440_Else;

  anon440_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon427_Then, anon427_Else;

  anon427_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon426_Then, anon426_Else;

  anon426_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon425_Then, anon425_Else;

  anon425_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon424_Then, anon424_Else;

  anon424_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon423_Then, anon423_Else;

  anon423_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon422_Then, anon422_Else;

  anon422_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon421_Then, anon421_Else;

  anon421_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon420_Then, anon420_Else;

  anon420_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon419_Then, anon419_Else;

  anon419_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon418_Then, anon418_Else;

  anon418_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon417_Then, anon417_Else;

  anon417_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon416_Then, anon416_Else;

  anon416_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon415_Then, anon415_Else;

  anon415_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon414_Then, anon414_Else;

  anon414_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon413_Then, anon413_Else;

  anon413_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon412_Then, anon412_Else;

  anon412_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon411_Then, anon411_Else;

  anon411_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon410_Then, anon410_Else;

  anon410_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon409_Then, anon409_Else;

  anon409_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon408_Then, anon408_Else;

  anon408_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon407_Then, anon407_Else;

  anon407_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon406_Then, anon406_Else;

  anon406_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon405_Then, anon405_Else;

  anon405_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon404_Then, anon404_Else;

  anon404_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon403_Then, anon403_Else;

  anon403_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon402_Then, anon402_Else;

  anon402_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon401_Then, anon401_Else;

  anon401_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon400_Then, anon400_Else;

  anon400_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon399_Then, anon399_Else;

  anon399_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon398_Then, anon398_Else;

  anon398_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon397_Then, anon397_Else;

  anon397_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon396_Then, anon396_Else;

  anon396_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon395_Then, anon395_Else;

  anon395_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon394_Then, anon394_Else;

  anon394_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon393_Then, anon393_Else;

  anon393_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon392_Then, anon392_Else;

  anon392_Else:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    Status_2 := -1073741789;
    goto L95;

  L95:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := Status_2;
    Tmp_738 := strConst__li2bpl2;
    call {:si_unique_call 1523} vslice_dummy_var_445 := SerialDbgPrintEx(9, Tmp_738);
    call {:si_unique_call 1524} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1525} SerialIRPEpilogue(Extension_30);
    goto anon441_Then, anon441_Else;

  anon441_Else:
    assume {:partition} yogi_error != 1;
    Tmp_719 := Status_2;
    goto L1;

  anon441_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon336_Then:
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon479_Then, anon479_Else;

  anon479_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_604;
    call {:si_unique_call 1526} Status_2 := SerialGotoPowerState(vslice_dummy_var_604, Extension_30, 1);
    goto anon480_Then, anon480_Else;

  anon480_Else:
    assume {:partition} yogi_error != 1;
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:partition} Status_2 >= 0;
    goto L108;

  L108:
    call {:si_unique_call 1527} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1528} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    call {:si_unique_call 1529} vslice_dummy_var_432 := KeSynchronizeExecution(0, li2bplFunctionConstant985, 0);
    call {:si_unique_call 1530} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon337_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon480_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon479_Then:
    goto L108;

  anon392_Then:
    Status_2 := -1073741811;
    goto L95;

  anon393_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    Status_2 := -1073741789;
    goto L95;

  anon338_Then:
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon477_Then, anon477_Else;

  anon477_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_605;
    call {:si_unique_call 1531} Status_2 := SerialGotoPowerState(vslice_dummy_var_605, Extension_30, 1);
    goto anon478_Then, anon478_Else;

  anon478_Else:
    assume {:partition} yogi_error != 1;
    goto anon339_Then, anon339_Else;

  anon339_Else:
    assume {:partition} Status_2 >= 0;
    goto L130;

  L130:
    call {:si_unique_call 1532} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1533} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    call {:si_unique_call 1534} vslice_dummy_var_433 := KeSynchronizeExecution(0, li2bplFunctionConstant983, 0);
    call {:si_unique_call 1535} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon339_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon478_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon477_Then:
    goto L130;

  anon394_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    Status_2 := -1073741789;
    goto L95;

  anon340_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    call {:si_unique_call 1536} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1537} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    call {:si_unique_call 1538} vslice_dummy_var_434 := KeSynchronizeExecution(0, li2bplFunctionConstant984, 0);
    call {:si_unique_call 1539} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon395_Then:
    call {:si_unique_call 1540} vslice_dummy_var_431 := KeSynchronizeExecution(0, li2bplFunctionConstant844, 0);
    goto L95;

  anon396_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    Status_2 := -1073741789;
    goto L95;

  anon335_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    call {:si_unique_call 1541} vslice_dummy_var_456 := KeSynchronizeExecution(0, li2bplFunctionConstant978, 0);
    goto L95;

  anon397_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    Status_2 := -1073741789;
    goto L95;

  anon334_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_745;
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := 0;
    goto L95;

  anon398_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc escapeChar;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon476_Then, anon476_Else;

  anon476_Else:
    Status_2 := -1073741789;
    goto L95;

  anon476_Then:
    call {:si_unique_call 1542} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1543} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:partition} Mem_T.INT4[escapeChar] != 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    goto L190;

  L190:
    Status_2 := -1073741811;
    call {:si_unique_call 1544} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon342_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    goto L190;

  anon344_Then:
    goto L185;

  L185:
    call {:si_unique_call 1545} vslice_dummy_var_435 := KeSynchronizeExecution(0, li2bplFunctionConstant987, 0);
    call {:si_unique_call 1546} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon343_Then:
    goto L190;

  anon341_Then:
    assume {:partition} Mem_T.INT4[escapeChar] == 0;
    goto L185;

  anon399_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    Status_2 := -1073741789;
    goto L95;

  anon345_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1547} sdv_627 := corral_nondet();
    ModemControl_3 := sdv_627;
    ModemControl_3 := BAND(ModemControl_3, BOR(1, 2));
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_737;
    assume {:nonnull} Tmp_737 != 0;
    assume Tmp_737 > 0;
    Mem_T.INT4[Tmp_737] := ModemControl_3;
    goto L95;

  anon400_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon333_Then, anon333_Else;

  anon333_Else:
    Status_2 := -1073741789;
    goto L95;

  anon333_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Tmp_724 := AssociatedIrp__IRP(Irp_15);
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    havoc vslice_dummy_var_606;
    call {:si_unique_call 1548} SerialGetProperties(Extension_30, vslice_dummy_var_606);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    goto L95;

  anon401_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Xc_1;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon474_Then, anon474_Else;

  anon474_Else:
    Status_2 := -1073741789;
    goto L95;

  anon474_Then:
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    goto anon346_Then, anon346_Else;

  anon346_Else:
    Status_2 := -1073741811;
    goto L95;

  anon346_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1549} Tmp_719 := SerialStartOrQueue(Extension_30, Irp_15, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_30), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_30), li2bplFunctionConstant569);
    goto anon475_Then, anon475_Else;

  anon475_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon475_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon402_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon347_Then, anon347_Else;

  anon347_Else:
    Status_2 := -1073741789;
    goto L95;

  anon347_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    call {:si_unique_call 1550} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1551} IoAcquireCancelSpinLock(Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    call {:si_unique_call 1552} vslice_dummy_var_436 := KeSynchronizeExecution(0, li2bplFunctionConstant986, 0);
    call {:si_unique_call 1553} IoReleaseCancelSpinLock(OldIrql_11);
    goto L95;

  anon403_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    Status_2 := -1073741789;
    goto L95;

  anon348_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    call {:si_unique_call 1554} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1555} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    call {:si_unique_call 1556} vslice_dummy_var_437 := KeSynchronizeExecution(0, li2bplFunctionConstant982, 0);
    call {:si_unique_call 1557} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon404_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc HandFlow;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon472_Then, anon472_Else;

  anon472_Else:
    Status_2 := -1073741789;
    goto L95;

  anon472_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    Status_2 := -1073741811;
    goto L95;

  anon349_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    Status_2 := -1073741811;
    goto L95;

  anon350_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    havoc Tmp_746;
    goto anon473_Then, anon473_Else;

  anon473_Else:
    assume {:partition} Tmp_746 == 3;
    Status_2 := -1073741811;
    goto L95;

  anon473_Then:
    assume {:partition} Tmp_746 != 3;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    goto L282;

  L282:
    Status_2 := -1073741811;
    goto L95;

  anon351_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon352_Then, anon352_Else;

  anon352_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    goto L286;

  L286:
    Status_2 := -1073741811;
    goto L95;

  anon353_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    call {:si_unique_call 1558} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1559} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon356_Then, anon356_Else;

  anon356_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 1560} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon356_Then:
    goto L294;

  L294:
    call {:si_unique_call 1561} vslice_dummy_var_438 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    call {:si_unique_call 1562} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon355_Then:
    goto L294;

  anon354_Then:
    goto L286;

  anon352_Then:
    goto L282;

  anon405_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    Status_2 := -1073741789;
    goto L95;

  anon332_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1563} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1564} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_735;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    call {:si_unique_call 1565} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon406_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc NewChars;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon471_Then, anon471_Else;

  anon471_Else:
    Status_2 := -1073741789;
    goto L95;

  anon471_Then:
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    call {:si_unique_call 1566} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1567} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    goto L332;

  L332:
    Status_2 := -1073741811;
    call {:si_unique_call 1568} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon358_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon359_Then, anon359_Else;

  anon359_Else:
    goto L332;

  anon359_Then:
    goto L329;

  L329:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    call {:si_unique_call 1569} vslice_dummy_var_455 := KeSynchronizeExecution(0, li2bplFunctionConstant979, 0);
    call {:si_unique_call 1570} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon357_Then:
    goto L329;

  anon407_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon331_Then, anon331_Else;

  anon331_Else:
    Status_2 := -1073741789;
    goto L95;

  anon331_Then:
    call {:si_unique_call 1571} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1572} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_736;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1573} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon408_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Lc_1;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon463_Then, anon463_Else;

  anon463_Else:
    Status_2 := -1073741789;
    goto L95;

  anon463_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    havoc vslice_dummy_var_607;
    call {:si_unique_call 1574} sdv_RtlZeroMemory(0, vslice_dummy_var_607);
    call {:si_unique_call 1575} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1576} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_752;
    goto anon464_Then, anon464_Else;

  anon464_Else:
    assume {:partition} Tmp_752 == 1;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  L372:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_742;
    goto anon465_Then, anon465_Else;

  anon465_Else:
    assume {:partition} Tmp_742 == 8;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  L378:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  L383:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1577} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon363_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon362_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon465_Then:
    assume {:partition} Tmp_742 != 8;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_728;
    goto anon466_Then, anon466_Else;

  anon466_Else:
    assume {:partition} Tmp_728 == 24;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon466_Then:
    assume {:partition} Tmp_728 != 24;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_729;
    goto anon467_Then, anon467_Else;

  anon467_Else:
    assume {:partition} Tmp_729 == 40;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon467_Then:
    assume {:partition} Tmp_729 != 40;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_732;
    goto anon468_Then, anon468_Else;

  anon468_Else:
    assume {:partition} Tmp_732 == 56;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon468_Then:
    assume {:partition} Tmp_732 != 56;
    goto L378;

  anon361_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon464_Then:
    assume {:partition} Tmp_752 != 1;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_753;
    goto anon469_Then, anon469_Else;

  anon469_Else:
    assume {:partition} Tmp_753 == 2;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon469_Then:
    assume {:partition} Tmp_753 != 2;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_730;
    goto anon470_Then, anon470_Else;

  anon470_Else:
    assume {:partition} Tmp_730 == 3;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon470_Then:
    assume {:partition} Tmp_730 != 3;
    goto L372;

  anon360_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon409_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Br;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon462_Then, anon462_Else;

  anon462_Else:
    Status_2 := -1073741789;
    goto L95;

  anon462_Then:
    call {:si_unique_call 1578} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1579} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Br != 0;
    assume Br > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1580} sdv_KeReleaseSpinLock(0, OldIrql_11);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto L95;

  anon410_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon364_Then, anon364_Else;

  anon364_Else:
    Status_2 := -1073741789;
    goto L95;

  anon364_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_726;
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    Mask_1 := Mem_T.INT4[Tmp_726];
    goto anon460_Then, anon460_Else;

  anon460_Else:
    assume {:partition} Mask_1 != 0;
    goto anon365_Then, anon365_Else;

  anon365_Else:
    assume {:partition} BAND(Mask_1, -16) == 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1581} Tmp_719 := SerialStartOrQueue(Extension_30, Irp_15, PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_30), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_30), li2bplFunctionConstant805);
    goto anon461_Then, anon461_Else;

  anon461_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon461_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon365_Then:
    assume {:partition} BAND(Mask_1, -16) != 0;
    goto L419;

  L419:
    Status_2 := -1073741811;
    goto L95;

  anon460_Then:
    assume {:partition} Mask_1 == 0;
    goto L419;

  anon411_Then:
    Tmp_748 := strConst__li2bpl187;
    call {:si_unique_call 1582} vslice_dummy_var_452 := SerialDbgPrintEx(9, Tmp_748);
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon366_Then, anon366_Else;

  anon366_Else:
    Tmp_744 := strConst__li2bpl189;
    call {:si_unique_call 1583} vslice_dummy_var_453 := SerialDbgPrintEx(6, Tmp_744);
    Status_2 := -1073741789;
    goto L95;

  anon366_Then:
    Tmp_733 := strConst__li2bpl188;
    call {:si_unique_call 1584} vslice_dummy_var_454 := SerialDbgPrintEx(9, Tmp_733);
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1585} Tmp_719 := SerialStartOrQueue(Extension_30, Irp_15, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_30), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_30), li2bplFunctionConstant617);
    goto anon459_Then, anon459_Else;

  anon459_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon459_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon412_Then:
    Tmp_749 := strConst__li2bpl190;
    call {:si_unique_call 1586} vslice_dummy_var_448 := SerialDbgPrintEx(9, Tmp_749);
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    Tmp_725 := strConst__li2bpl191;
    call {:si_unique_call 1587} vslice_dummy_var_449 := SerialDbgPrintEx(6, Tmp_725);
    Status_2 := -1073741789;
    goto L95;

  anon367_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_754;
    assume {:nonnull} Tmp_754 != 0;
    assume Tmp_754 > 0;
    NewMask := Mem_T.INT4[Tmp_754];
    goto anon457_Then, anon457_Else;

  anon457_Else:
    assume {:partition} BAND(NewMask, -8192) != 0;
    Tmp_755 := strConst__li2bpl193;
    call {:si_unique_call 1588} vslice_dummy_var_450 := SerialDbgPrintEx(6, Tmp_755);
    Status_2 := -1073741811;
    goto L95;

  anon457_Then:
    assume {:partition} BAND(NewMask, -8192) == 0;
    Tmp_731 := strConst__li2bpl192;
    call {:si_unique_call 1589} vslice_dummy_var_451 := SerialDbgPrintEx(9, Tmp_731);
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1590} Tmp_719 := SerialStartOrQueue(Extension_30, Irp_15, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_30), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_30), li2bplFunctionConstant617);
    goto anon458_Then, anon458_Else;

  anon458_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon458_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon413_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    Status_2 := -1073741789;
    goto L95;

  anon330_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_734;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_734 != 0;
    assume Tmp_734 > 0;
    havoc vslice_dummy_var_608;
    Mem_T.INT4[Tmp_734] := vslice_dummy_var_608;
    goto L95;

  anon414_Then:
    call {:si_unique_call 1591} vslice_dummy_var_430 := KeSynchronizeExecution(0, li2bplFunctionConstant894, 0);
    goto L95;

  anon415_Then:
    call {:si_unique_call 1592} vslice_dummy_var_429 := KeSynchronizeExecution(0, li2bplFunctionConstant893, 0);
    goto L95;

  anon416_Then:
    goto L58;

  L58:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_609;
    call {:si_unique_call 1593} Status_2 := SerialGotoPowerState(vslice_dummy_var_609, Extension_30, 1);
    goto anon454_Then, anon454_Else;

  anon454_Else:
    assume {:partition} yogi_error != 1;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    assume {:partition} Status_2 >= 0;
    goto L469;

  L469:
    call {:si_unique_call 1594} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1595} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_720;
    goto anon455_Then, anon455_Else;

  anon455_Else:
    assume {:partition} Tmp_720 == 128;
    goto L481;

  L481:
    Status_2 := -1073741811;
    goto L482;

  L482:
    call {:si_unique_call 1596} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon455_Then:
    assume {:partition} Tmp_720 != 128;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_751;
    goto anon456_Then, anon456_Else;

  anon456_Else:
    assume {:partition} Tmp_751 != 192;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon369_Then, anon369_Else;

  anon369_Else:
    Tmp_740 := li2bplFunctionConstant889;
    goto L490;

  L490:
    call {:si_unique_call 1597} vslice_dummy_var_439 := KeSynchronizeExecution(0, Tmp_740, 0);
    goto L482;

  anon369_Then:
    Tmp_740 := li2bplFunctionConstant524;
    goto L490;

  anon456_Then:
    assume {:partition} Tmp_751 == 192;
    goto L481;

  anon368_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon454_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon329_Then:
    goto L469;

  anon417_Then:
    goto L58;

  anon418_Then:
    goto L95;

  anon419_Then:
    goto L56;

  L56:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_610;
    call {:si_unique_call 1598} Status_2 := SerialGotoPowerState(vslice_dummy_var_610, Extension_30, 1);
    goto anon452_Then, anon452_Else;

  anon452_Else:
    assume {:partition} yogi_error != 1;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:partition} Status_2 >= 0;
    goto L493;

  L493:
    call {:si_unique_call 1599} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1600} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_743;
    goto anon453_Then, anon453_Else;

  anon453_Else:
    assume {:partition} Tmp_743 == 2;
    Status_2 := -1073741811;
    goto L506;

  L506:
    call {:si_unique_call 1601} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon453_Then:
    assume {:partition} Tmp_743 != 2;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon371_Then, anon371_Else;

  anon371_Else:
    Tmp_747 := li2bplFunctionConstant888;
    goto L512;

  L512:
    call {:si_unique_call 1602} vslice_dummy_var_440 := KeSynchronizeExecution(0, Tmp_747, 0);
    goto L506;

  anon371_Then:
    Tmp_747 := li2bplFunctionConstant525;
    goto L512;

  anon370_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon452_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon328_Then:
    goto L493;

  anon420_Then:
    goto L56;

  anon421_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    Status_2 := -1073741789;
    goto L95;

  anon327_Then:
    call {:si_unique_call 1603} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1604} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_723;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Tmp_723 != 0;
    assume Tmp_723 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 1605} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon422_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc NewTimeouts;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon451_Then, anon451_Else;

  anon451_Else:
    Status_2 := -1073741789;
    goto L95;

  anon451_Then:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon372_Then, anon372_Else;

  anon372_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    Status_2 := -1073741811;
    goto L95;

  anon374_Then:
    goto L531;

  L531:
    call {:si_unique_call 1606} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1607} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    call {:si_unique_call 1608} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon373_Then:
    goto L531;

  anon372_Then:
    goto L531;

  anon423_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    Status_2 := -1073741789;
    goto L95;

  anon326_Then:
    call {:si_unique_call 1609} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1610} IoAcquireCancelSpinLock(Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 1611} IoReleaseCancelSpinLock(OldIrql_11);
    goto L95;

  anon375_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    call {:si_unique_call 1612} IoReleaseCancelSpinLock(OldIrql_11);
    Status_2 := -1073741536;
    goto L95;

  anon376_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1613} IoReleaseCancelSpinLock(OldIrql_11);
    call {:si_unique_call 1614} SerialStartImmediate(Extension_30);
    goto anon450_Then, anon450_Else;

  anon450_Else:
    assume {:partition} yogi_error != 1;
    Tmp_719 := 259;
    goto L1;

  anon450_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon424_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_611;
    call {:si_unique_call 1615} Status_2 := SerialGotoPowerState(vslice_dummy_var_611, Extension_30, 1);
    goto anon449_Then, anon449_Else;

  anon449_Else:
    assume {:partition} yogi_error != 1;
    goto anon377_Then, anon377_Else;

  anon377_Else:
    assume {:partition} Status_2 >= 0;
    goto L572;

  L572:
    call {:si_unique_call 1616} vslice_dummy_var_441 := KeSynchronizeExecution(0, li2bplFunctionConstant849, 0);
    goto L95;

  anon377_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon449_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon325_Then:
    goto L572;

  anon425_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_612;
    call {:si_unique_call 1617} Status_2 := SerialGotoPowerState(vslice_dummy_var_612, Extension_30, 1);
    goto anon448_Then, anon448_Else;

  anon448_Else:
    assume {:partition} yogi_error != 1;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    assume {:partition} Status_2 >= 0;
    goto L582;

  L582:
    call {:si_unique_call 1618} vslice_dummy_var_442 := KeSynchronizeExecution(0, li2bplFunctionConstant892, 0);
    goto L95;

  anon378_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon448_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon324_Then:
    goto L582;

  anon426_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Lc;
    Mask_2 := 255;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon445_Then, anon445_Else;

  anon445_Else:
    Status_2 := -1073741789;
    goto L95;

  anon445_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_613;
    call {:si_unique_call 1619} Status_2 := SerialGotoPowerState(vslice_dummy_var_613, Extension_30, 1);
    goto anon446_Then, anon446_Else;

  anon446_Else:
    assume {:partition} yogi_error != 1;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:partition} Status_2 >= 0;
    goto L602;

  L602:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon430_Then, anon430_Else;

  anon430_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon429_Then, anon429_Else;

  anon429_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon428_Then, anon428_Else;

  anon428_Else:
    LData := 3;
    goto L615;

  L615:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon447_Then, anon447_Else;

  anon447_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon434_Then, anon434_Else;

  anon434_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon433_Then, anon433_Else;

  anon433_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon432_Then, anon432_Else;

  anon432_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon431_Then, anon431_Else;

  anon431_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LParity := 56;
    goto L625;

  L625:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon382_Then, anon382_Else;

  anon382_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon436_Then, anon436_Else;

  anon436_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon435_Then, anon435_Else;

  anon435_Else:
    goto anon384_Then, anon384_Else;

  anon384_Else:
    assume {:partition} LData != 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LStop := 4;
    goto L634;

  L634:
    call {:si_unique_call 1620} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1621} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc Tmp_722;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1622} vslice_dummy_var_447 := KeSynchronizeExecution(0, li2bplFunctionConstant981, 0);
    call {:si_unique_call 1623} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon384_Then:
    assume {:partition} LData == 0;
    Status_2 := -1073741811;
    goto L95;

  anon435_Then:
    Status_2 := -1073741811;
    goto L95;

  anon436_Then:
    goto anon383_Then, anon383_Else;

  anon383_Else:
    assume {:partition} LData != 0;
    Status_2 := -1073741811;
    goto L95;

  anon383_Then:
    assume {:partition} LData == 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LStop := 4;
    goto L634;

  anon382_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LStop := 0;
    goto L634;

  anon431_Then:
    Status_2 := -1073741811;
    goto L95;

  anon432_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LParity := 40;
    goto L625;

  anon433_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LParity := 24;
    goto L625;

  anon434_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LParity := 8;
    goto L625;

  anon447_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    LParity := 0;
    goto L625;

  anon428_Then:
    Status_2 := -1073741811;
    goto L95;

  anon429_Then:
    LData := 2;
    Mask_2 := 127;
    goto L615;

  anon430_Then:
    LData := 1;
    Mask_2 := 63;
    goto L615;

  anon380_Then:
    LData := 0;
    Mask_2 := 31;
    goto L615;

  anon381_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon446_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon379_Then:
    goto L602;

  anon427_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Rs;
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon443_Then, anon443_Else;

  anon443_Else:
    Status_2 := -1073741789;
    goto L95;

  anon443_Then:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    goto anon385_Then, anon385_Else;

  anon385_Else:
    Status_2 := 0;
    goto L95;

  anon385_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    havoc vslice_dummy_var_614;
    call {:si_unique_call 1624} boogieTmp := sdv_ExAllocatePoolWithQuotaTag(512, vslice_dummy_var_614, -666022077);
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon386_Then, anon386_Else;

  anon386_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 1625} Tmp_719 := SerialStartOrQueue(Extension_30, Irp_15, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_30), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_30), li2bplFunctionConstant720);
    goto anon444_Then, anon444_Else;

  anon444_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon444_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon386_Then:
    goto L95;

  anon440_Then:
    assume {:nonnull} IrpSp_4 != 0;
    assume IrpSp_4 > 0;
    goto anon387_Then, anon387_Else;

  anon387_Else:
    Status_2 := -1073741789;
    goto L95;

  anon387_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc Tmp_721;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    havoc BaudRate;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_615;
    call {:si_unique_call 1626} Status_2 := SerialGetDivisorFromBaud(vslice_dummy_var_615, BaudRate, AppropriateDivisor);
    goto anon388_Then, anon388_Else;

  anon388_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    goto anon389_Then, anon389_Else;

  anon389_Else:
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    havoc vslice_dummy_var_616;
    call {:si_unique_call 1627} Status_2 := SerialGotoPowerState(vslice_dummy_var_616, Extension_30, 1);
    goto anon442_Then, anon442_Else;

  anon442_Else:
    assume {:partition} yogi_error != 1;
    goto anon390_Then, anon390_Else;

  anon390_Else:
    assume {:partition} Status_2 >= 0;
    goto L705;

  L705:
    call {:si_unique_call 1628} Tmp_750 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    Mem_T.INT4[Tmp_750] := OldIrql_11;
    call {:si_unique_call 1629} sdv_KeAcquireSpinLock(0, Tmp_750);
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_750];
    goto anon391_Then, anon391_Else;

  anon391_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    assume {:nonnull} AppropriateDivisor != 0;
    assume AppropriateDivisor > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    call {:si_unique_call 1630} vslice_dummy_var_446 := KeSynchronizeExecution(0, li2bplFunctionConstant980, 0);
    goto L716;

  L716:
    call {:si_unique_call 1631} sdv_KeReleaseSpinLock(0, OldIrql_11);
    goto L95;

  anon391_Then:
    assume {:partition} 0 > Status_2;
    goto L716;

  anon390_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon442_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon389_Then:
    goto L705;

  anon388_Then:
    assume {:partition} 0 > Status_2;
    goto L705;

  anon439_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_756: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_17: int, actual_PIrp_13: int) returns (Tmp_756: int)
{
  var {:scalar} Tmp_757: int;
  var {:scalar} basic: int;
  var {:pointer} Tmp_758: int;
  var {:pointer} pBasic: int;
  var {:pointer} Tmp_759: int;
  var {:pointer} pDevExt_14: int;
  var {:scalar} prologueStatus_1: int;
  var {:scalar} S_9: int;
  var {:scalar} cap_1: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Tmp_761: int;
  var {:scalar} OldIrql_12: int;
  var {:pointer} Tmp_763: int;
  var {:pointer} pIrpStack_8: int;
  var {:scalar} sdv_665: int;
  var {:scalar} Tmp_765: int;
  var {:scalar} status_22: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} PDevObj_17: int;
  var {:pointer} PIrp_13: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;

  anon0:
    call {:si_unique_call 1632} basic := __HAVOC_malloc(44);
    call {:si_unique_call 1633} S_9 := __HAVOC_malloc(8);
    PDevObj_17 := actual_PDevObj_17;
    PIrp_13 := actual_PIrp_13;
    call {:si_unique_call 1634} Tmp_758 := __HAVOC_malloc(72);
    call {:si_unique_call 1635} Tmp_760 := __HAVOC_malloc(28);
    call {:si_unique_call 1636} Tmp_761 := __HAVOC_malloc(96);
    call {:si_unique_call 1637} Tmp_763 := __HAVOC_malloc(28);
    call {:si_unique_call 1638} Tmp_769 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_17 != 0;
    assume PDevObj_17 > 0;
    havoc pDevExt_14;
    call {:si_unique_call 1639} prologueStatus_1 := SerialIRPPrologue(PIrp_13, pDevExt_14);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} prologueStatus_1 != 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} prologueStatus_1 != 259;
    Tmp_769 := strConst__li2bpl2;
    call {:si_unique_call 1640} vslice_dummy_var_458 := SerialDbgPrintEx(9, Tmp_769);
    call {:si_unique_call 1641} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1642} SerialIRPEpilogue(pDevExt_14);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  L19:
    Tmp_756 := prologueStatus_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} prologueStatus_1 == 259;
    goto L19;

  anon39_Then:
    assume {:partition} prologueStatus_1 == 0;
    Tmp_761 := strConst__li2bpl40;
    call {:si_unique_call 1643} vslice_dummy_var_459 := SerialDbgPrintEx(9, Tmp_761);
    call {:si_unique_call 1644} sdv_665 := SerialCompleteIfError(PDevObj_17, PIrp_13);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_665 != 0;
    Tmp_756 := -1073741536;
    goto L1;

  anon41_Then:
    assume {:partition} sdv_665 == 0;
    call {:si_unique_call 1645} pIrpStack_8 := sdv_IoGetCurrentIrpStackLocation(PIrp_13);
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    status_22 := 0;
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L48;

  L48:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    status_22 := -1073741789;
    goto L56;

  L56:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_13))] := status_22;
    Tmp_758 := strConst__li2bpl2;
    call {:si_unique_call 1646} vslice_dummy_var_460 := SerialDbgPrintEx(9, Tmp_758);
    call {:si_unique_call 1647} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1648} SerialIRPEpilogue(pDevExt_14);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    Tmp_756 := status_22;
    goto L1;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    call {:si_unique_call 1649} sdv_RtlZeroMemory(0, 44);
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    call {:si_unique_call 1650} sdv_RtlCopyMemory(0, 0, 20);
    call {:si_unique_call 1651} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    pBasic := basic;
    goto L80;

  L80:
    call {:si_unique_call 1652} Tmp_759 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    Mem_T.INT4[Tmp_759] := OldIrql_12;
    call {:si_unique_call 1653} sdv_KeAcquireSpinLock(0, Tmp_759);
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    OldIrql_12 := Mem_T.INT4[Tmp_759];
    call {:si_unique_call 1654} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    call {:si_unique_call 1655} vslice_dummy_var_461 := KeSynchronizeExecution(0, li2bplFunctionConstant891, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1656} vslice_dummy_var_462 := corral_nondet();
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L108;

  L108:
    call {:si_unique_call 1657} sdv_KeReleaseSpinLock(0, OldIrql_12);
    goto L56;

  anon45_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L108;

  anon42_Then:
    assume {:nonnull} pIrpStack_8 != 0;
    assume pIrpStack_8 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    status_22 := -1073741789;
    goto L56;

  anon43_Then:
    assume {:nonnull} PIrp_13 != 0;
    assume PIrp_13 > 0;
    havoc pBasic;
    goto L80;

  anon48_Then:
    status_22 := -1073741811;
    goto L56;

  anon49_Then:
    goto L48;

  anon50_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 1658} vslice_dummy_var_457 := IoCancelIrp(0);
    goto L121;

  L121:
    status_22 := 0;
    goto L56;

  anon57_Then:
    goto L121;

  anon53_Then:
    cap_1 := 2;
    goto L126;

  L126:
    call {:si_unique_call 1659} Tmp_757, cap_1, Tmp_760, Tmp_763, Tmp_765 := SerialInternalIoControl_loop_L126(Tmp_757, pDevExt_14, cap_1, Tmp_760, Tmp_763, Tmp_765);
    goto L126_last;

  L126_last:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} 7 > cap_1;
    Tmp_757 := cap_1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_763;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.INT4[Tmp_763 + Tmp_757 * 4] >= 1;
    Tmp_765 := cap_1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_760;
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L129;

  L129:
    cap_1 := cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    assume false;
    return;

  anon55_Then:
    goto L127;

  L127:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 7 > cap_1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    status_22 := 0;
    goto L56;

  anon47_Then:
    assume {:partition} cap_1 >= 7;
    status_22 := -1073741637;
    goto L56;

  anon54_Then:
    assume {:partition} 1 > Mem_T.INT4[Tmp_763 + Tmp_757 * 4];
    goto L129;

  anon46_Then:
    assume {:partition} cap_1 >= 7;
    goto L127;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_31: int, actual_Properties: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_31: int, actual_Properties: int)
{
  var {:pointer} Extension_31: int;
  var {:pointer} Properties: int;
  var vslice_dummy_var_463: int;

  anon0:
    call {:si_unique_call 1660} vslice_dummy_var_463 := __HAVOC_malloc(4);
    Extension_31 := actual_Extension_31;
    Properties := actual_Properties;
    call {:si_unique_call 1661} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    return;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_464: int;

  anon0:
    call {:si_unique_call 1662} vslice_dummy_var_464 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_774: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_774: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt_15: int;
  var {:scalar} status_23: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_617: int;
  var vslice_dummy_var_618: int;

  anon0:
    call {:si_unique_call 1663} disposition := __HAVOC_malloc(4);
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_16 := actual_Irp_16;
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc pDevExt_15;
    call {:si_unique_call 1664} sdv_do_paged_code_check();
    call {:si_unique_call 1665} status_23 := WmiSystemControl(0, 0, Irp_16, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L22;

  L22:
    call {:si_unique_call 1666} sdv_IoSkipCurrentIrpStackLocation(Irp_16);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    havoc vslice_dummy_var_617;
    call {:si_unique_call 1667} status_23 := sdv_IoCallDriver(vslice_dummy_var_617, Irp_16);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  L30:
    Tmp_774 := status_23;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 1668} sdv_IoSkipCurrentIrpStackLocation(Irp_16);
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    havoc vslice_dummy_var_618;
    call {:si_unique_call 1669} status_23 := sdv_IoCallDriver(vslice_dummy_var_618, Irp_16);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L22;

  anon16_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    call {:si_unique_call 1670} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon13_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L30;
}



procedure {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_776: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_776 == -1073741811 || Tmp_776 == -1073741823 || Tmp_776 == 0 || Tmp_776 == 5 || Tmp_776 == -1073741789 || Tmp_776 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_776: int)
{
  var {:pointer} fullInfo: int;
  var {:scalar} length: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:pointer} sdv_671: int;
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} KeyNameStringLength: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_465: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_619: int;

  anon0:
    call {:si_unique_call 1671} keyName := __HAVOC_malloc(12);
    KeyNameString := actual_KeyNameString;
    KeyNameStringLength := actual_KeyNameStringLength;
    DataLength := actual_DataLength;
    call {:si_unique_call 1672} Tmp_779 := __HAVOC_malloc(124);
    call {:si_unique_call 1673} Tmp_780 := __HAVOC_malloc(132);
    ntStatus := -1073741670;
    call {:si_unique_call 1674} sdv_do_paged_code_check();
    Tmp_780 := strConst__li2bpl194;
    call {:si_unique_call 1675} vslice_dummy_var_465 := SerialDbgPrintEx(2, Tmp_780);
    call {:si_unique_call 1676} RtlInitUnicodeString(keyName, KeyNameString);
    length := 24 + KeyNameStringLength + DataLength;
    call {:si_unique_call 1677} sdv_671 := ExAllocatePoolWithTag(1, length, -666022077);
    fullInfo := sdv_671;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 1678} Tmp_778 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_778 != 0;
    assume Tmp_778 > 0;
    Mem_T.INT4[Tmp_778] := length;
    call {:si_unique_call 1679} ntStatus := ZwQueryValueKey(0, 0, 1, 0, length, Tmp_778);
    assume {:nonnull} Tmp_778 != 0;
    assume Tmp_778 > 0;
    length := Mem_T.INT4[Tmp_778];
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ntStatus >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_619;
    call {:si_unique_call 1680} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_619);
    goto L31;

  L31:
    call {:si_unique_call 1681} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_779 := strConst__li2bpl195;
    call {:si_unique_call 1682} vslice_dummy_var_466 := SerialDbgPrintEx(2, Tmp_779);
    Tmp_776 := ntStatus;
    return;

  anon8_Then:
    goto L31;

  anon7_Then:
    assume {:partition} 0 > ntStatus;
    goto L31;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L23;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_467: int;

  anon0:
    call {:si_unique_call 1683} vslice_dummy_var_467 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_468: int;

  anon0:
    call {:si_unique_call 1684} vslice_dummy_var_468 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_686: int, actual_sdv_687: int) returns (Tmp_793: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_686: int, actual_sdv_687: int) returns (Tmp_793: int)
{
  var {:scalar} sdv_688: int;

  anon0:
    call {:si_unique_call 1685} Tmp_793 := __HAVOC_malloc(4);
    call {:si_unique_call 1686} sdv_688 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_793 != 0;
    assume Tmp_793 > 0;
    assume {:nonnull} sdv_688 != 0;
    assume sdv_688 > 0;
    Mem_T.INT4[Tmp_793] := Mem_T.INT4[sdv_688];
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_469: int;

  anon0:
    call {:si_unique_call 1687} vslice_dummy_var_469 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_803: int);
  free ensures {:va_keep} Tmp_803 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_803: int)
{

  anon0:
    Tmp_803 := 0;
    return;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead: int)
{
  var {:pointer} ListHead: int;
  var vslice_dummy_var_470: int;

  anon0:
    call {:si_unique_call 1688} vslice_dummy_var_470 := __HAVOC_malloc(4);
    ListHead := actual_ListHead;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    assume {:nonnull} ListHead != 0;
    assume ListHead > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_807: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_1: int) returns (Tmp_807: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry: int;
  var {:pointer} ListHead_1: int;

  anon0:
    ListHead_1 := actual_ListHead_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc Entry;
    assume {:nonnull} Entry != 0;
    assume Entry > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1689} FatalListEntryError(ListHead_1, Entry, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_807 := Entry;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_471: int;

  anon0:
    call {:si_unique_call 1690} vslice_dummy_var_471 := __HAVOC_malloc(4);
    call {:si_unique_call 1691} RtlFailFast(3);
    return;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_472: int;

  anon0:
    call {:si_unique_call 1692} vslice_dummy_var_472 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_813: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_18: int) returns (Tmp_813: int)
{
  var {:pointer} pDevExt_16: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} Tmp_819: int;
  var {:pointer} PDevObj_18: int;
  var vslice_dummy_var_473: int;
  var vslice_dummy_var_474: int;

  anon0:
    PDevObj_18 := actual_PDevObj_18;
    call {:si_unique_call 1693} Tmp_816 := __HAVOC_malloc(96);
    call {:si_unique_call 1694} Tmp_819 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_18 != 0;
    assume PDevObj_18 > 0;
    havoc pDevExt_16;
    call {:si_unique_call 1695} sdv_do_paged_code_check();
    Tmp_819 := strConst__li2bpl196;
    call {:si_unique_call 1696} vslice_dummy_var_473 := SerialDbgPrintEx(2, Tmp_819);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_16)], 8) != 0;
    goto L15;

  L15:
    call {:si_unique_call 1697} IoDetachDevice(0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1698} sdv_ExFreePool(0);
    goto L19;

  L19:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1699} sdv_ExFreePool(0);
    goto L23;

  L23:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1700} sdv_ExFreePool(0);
    goto L27;

  L27:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 1701} sdv_ExFreePool(0);
    goto L31;

  L31:
    call {:si_unique_call 1702} IoDeleteDevice(0);
    Tmp_816 := strConst__li2bpl197;
    call {:si_unique_call 1703} vslice_dummy_var_474 := SerialDbgPrintEx(2, Tmp_816);
    Tmp_813 := 0;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    goto L31;

  anon16_Then:
    goto L27;

  anon15_Then:
    goto L23;

  anon14_Then:
    goto L19;

  anon13_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_16)], 8) == 0;
    call {:si_unique_call 1704} SerialDisableInterfacesResources(PDevObj_18, 1);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_19: int)
{
  var {:pointer} Tmp_821: int;
  var {:pointer} Tmp_822: int;
  var {:pointer} pDevExt_17: int;
  var {:pointer} Tmp_823: int;
  var {:pointer} Tmp_825: int;
  var {:pointer} Tmp_826: int;
  var {:scalar} cancelRoutine_2: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} Tmp_827: int;
  var {:pointer} Tmp_828: int;
  var {:pointer} PDevObj_19: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_477: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_620: int;
  var vslice_dummy_var_621: int;
  var vslice_dummy_var_622: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_624: int;
  var vslice_dummy_var_625: int;

  anon0:
    call {:si_unique_call 1705} vslice_dummy_var_475 := __HAVOC_malloc(4);
    PDevObj_19 := actual_PDevObj_19;
    call {:si_unique_call 1706} Tmp_825 := __HAVOC_malloc(112);
    call {:si_unique_call 1707} Tmp_826 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_19 != 0;
    assume PDevObj_19 > 0;
    havoc pDevExt_17;
    Tmp_825 := strConst__li2bpl199;
    call {:si_unique_call 1708} vslice_dummy_var_477 := SerialDbgPrintEx(2, Tmp_825);
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    call {:si_unique_call 1709} SerialKillAllReadsOrWrites(PDevObj_19, WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_17), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(pDevExt_17));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    call {:si_unique_call 1710} SerialKillAllReadsOrWrites(PDevObj_19, ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_17), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(pDevExt_17));
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    call {:si_unique_call 1711} SerialKillAllReadsOrWrites(PDevObj_19, PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_17), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(pDevExt_17));
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    call {:si_unique_call 1712} SerialKillAllReadsOrWrites(PDevObj_19, MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_17), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(pDevExt_17));
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1713} Tmp_823 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_823 != 0;
    assume Tmp_823 > 0;
    Mem_T.INT4[Tmp_823] := oldIrql_9;
    call {:si_unique_call 1714} IoAcquireCancelSpinLock(Tmp_823);
    assume {:nonnull} Tmp_823 != 0;
    assume Tmp_823 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_823];
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_827;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    cancelRoutine_2 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_827)];
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_822;
    assume {:nonnull} Tmp_822 != 0;
    assume Tmp_822 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} cancelRoutine_2 != 0;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_828;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(Tmp_828)] := oldIrql_9;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc Tmp_821;
    assume {:nonnull} Tmp_821 != 0;
    assume Tmp_821 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_821)] := 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant571;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_620;
    call {:si_unique_call 1715} SerialCancelCurrentWrite(PDevObj_19, vslice_dummy_var_620);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 1716} vslice_dummy_var_476 := IoCancelIrp(0);
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    goto L41;

  L41:
    call {:si_unique_call 1717} SerialKillAllStalled(PDevObj_19);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    Tmp_826 := strConst__li2bpl198;
    call {:si_unique_call 1718} vslice_dummy_var_478 := SerialDbgPrintEx(2, Tmp_826);
    goto LM2;

  LM2:
    return;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L41;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant575;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_621;
    call {:si_unique_call 1719} SerialCancelCurrentXoff(PDevObj_19, vslice_dummy_var_621);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant1086;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_622;
    call {:si_unique_call 1720} SerialCancelImmediate(PDevObj_19, vslice_dummy_var_622);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant665;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_623;
    call {:si_unique_call 1721} SerialCancelQueued(PDevObj_19, vslice_dummy_var_623);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant619;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_624;
    call {:si_unique_call 1722} SerialCancelWait(PDevObj_19, vslice_dummy_var_624);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant667;
    assume {:nonnull} pDevExt_17 != 0;
    assume pDevExt_17 > 0;
    havoc vslice_dummy_var_625;
    call {:si_unique_call 1723} SerialFilterCancelQueued(PDevObj_19, vslice_dummy_var_625);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} cancelRoutine_2 == 0;
    call {:si_unique_call 1724} IoReleaseCancelSpinLock(oldIrql_9);
    goto L40;

  anon39_Then:
    call {:si_unique_call 1725} IoReleaseCancelSpinLock(oldIrql_9);
    goto L40;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_829: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType: int, actual_BusNumber: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_829: int)
{
  var {:scalar} IoAddress: int;
  var {:scalar} Tmp_830: int;
  var {:scalar} Tmp_831: int;
  var {:pointer} address: int;
  var {:pointer} structPtr888IoAddress: int;
  var {:scalar} NumberOfBytes: int;
  var {:scalar} AddressSpace: int;
  var {:pointer} MappedAddress: int;

  anon0:
    call {:si_unique_call 1726} IoAddress := __HAVOC_malloc(20);
    call {:si_unique_call 1727} Tmp_830 := __HAVOC_malloc(20);
    structPtr888IoAddress := actual_structPtr888IoAddress;
    NumberOfBytes := actual_NumberOfBytes;
    AddressSpace := actual_AddressSpace;
    MappedAddress := actual_MappedAddress;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    call {:si_unique_call 1728} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} AddressSpace != 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    havoc address;
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := 0;
    goto L12;

  L12:
    Tmp_829 := address;
    return;

  anon5_Then:
    assume {:partition} AddressSpace == 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    call {:si_unique_call 1729} address := MmMapIoSpace(Tmp_830, NumberOfBytes, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} address != 0;
    Tmp_831 := 1;
    goto L20;

  L20:
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := Tmp_831;
    goto L12;

  anon6_Then:
    assume {:partition} address == 0;
    Tmp_831 := 0;
    goto L20;
}



procedure {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_22: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_833: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_833 == -1073741670 || Tmp_833 == 0 || Tmp_833 == -1073741709 || Tmp_833 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_22: int, actual_PConfigData: int, actual_PDevObj_20: int) returns (Tmp_833: int)
{
  var {:pointer} Tmp_834: int;
  var {:pointer} Tmp_835: int;
  var {:pointer} Tmp_837: int;
  var {:pointer} Tmp_838: int;
  var {:pointer} pNewExt: int;
  var {:scalar} status_24: int;
  var {:pointer} pDispatch: int;
  var {:pointer} Tmp_839: int;
  var {:pointer} Tmp_840: int;
  var {:pointer} PDevExt_22: int;
  var {:pointer} PConfigData: int;
  var {:pointer} PDevObj_20: int;
  var boogieTmp: int;
  var vslice_dummy_var_479: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_482: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;

  anon0:
    PDevExt_22 := actual_PDevExt_22;
    PConfigData := actual_PConfigData;
    PDevObj_20 := actual_PDevObj_20;
    call {:si_unique_call 1730} Tmp_835 := __HAVOC_malloc(116);
    call {:si_unique_call 1731} Tmp_837 := __HAVOC_malloc(136);
    call {:si_unique_call 1732} Tmp_838 := __HAVOC_malloc(116);
    call {:si_unique_call 1733} Tmp_839 := __HAVOC_malloc(116);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc pNewExt;
    call {:si_unique_call 1734} sdv_do_paged_code_check();
    Tmp_837 := strConst__li2bpl200;
    call {:si_unique_call 1735} vslice_dummy_var_480 := SerialDbgPrintEx(2, Tmp_837);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    call {:si_unique_call 1736} status_24 := SerialInitOneController(PDevObj_20, PConfigData);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    call {:si_unique_call 1737} boogieTmp := ExAllocatePoolWithTag(512, 76, -666022077);
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    havoc pDispatch;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pDispatch != 0;
    call {:si_unique_call 1738} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 1739} vslice_dummy_var_479 := KeSynchronizeExecution(0, li2bplFunctionConstant1036, 0);
    goto L26;

  L26:
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_834;
    assume {:nonnull} Tmp_834 != 0;
    assume Tmp_834 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    havoc Tmp_840;
    assume {:nonnull} Tmp_840 != 0;
    assume Tmp_840 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} PDevExt_22 != 0;
    assume PDevExt_22 > 0;
    assume {:nonnull} PDevObj_20 != 0;
    assume PDevObj_20 > 0;
    call {:si_unique_call 1740} vslice_dummy_var_481 := KeSynchronizeExecution(0, li2bplFunctionConstant1037, 0);
    Tmp_838 := strConst__li2bpl202;
    call {:si_unique_call 1741} vslice_dummy_var_482 := SerialDbgPrintEx(2, Tmp_838);
    Tmp_833 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} pDispatch == 0;
    status_24 := -1073741670;
    Tmp_835 := strConst__li2bpl203;
    call {:si_unique_call 1742} vslice_dummy_var_483 := SerialDbgPrintEx(2, Tmp_835);
    Tmp_833 := status_24;
    goto L1;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} 0 > status_24;
    Tmp_839 := strConst__li2bpl201;
    call {:si_unique_call 1743} vslice_dummy_var_484 := SerialDbgPrintEx(2, Tmp_839);
    Tmp_833 := status_24;
    goto L1;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_485: int;

  anon0:
    call {:si_unique_call 1744} vslice_dummy_var_485 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_23: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_23: int)
{
  var {:scalar} i_1: int;
  var {:pointer} Tmp_843: int;
  var {:scalar} sdv_712: int;
  var {:scalar} sdv_713: int;
  var {:scalar} sdv_714: int;
  var {:scalar} sdv_716: int;
  var {:scalar} sdv_717: int;
  var {:scalar} sdv_718: int;
  var {:scalar} sdv_719: int;
  var {:pointer} Tmp_844: int;
  var {:scalar} sdv_721: int;
  var {:pointer} Tmp_845: int;
  var {:scalar} sdv_725: int;
  var {:scalar} Tmp_846: int;
  var {:scalar} sdv_732: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} Tmp_847: int;
  var {:pointer} Tmp_848: int;
  var {:scalar} sdv_737: int;
  var {:scalar} sdv_739: int;
  var {:pointer} Tmp_849: int;
  var {:scalar} sdv_743: int;
  var {:pointer} Tmp_850: int;
  var {:pointer} PDevExt_23: int;
  var vslice_dummy_var_486: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;
  var vslice_dummy_var_502: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_626: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;
  var vslice_dummy_var_630: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_634: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_637: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_640: int;

  anon0:
    call {:si_unique_call 1745} vslice_dummy_var_486 := __HAVOC_malloc(4);
    PDevExt_23 := actual_PDevExt_23;
    call {:si_unique_call 1746} Tmp_843 := __HAVOC_malloc(152);
    call {:si_unique_call 1747} Tmp_844 := __HAVOC_malloc(64);
    call {:si_unique_call 1748} Tmp_847 := __HAVOC_malloc(100);
    call {:si_unique_call 1749} Tmp_848 := __HAVOC_malloc(132);
    call {:si_unique_call 1750} Tmp_849 := __HAVOC_malloc(116);
    Tmp_849 := strConst__li2bpl204;
    call {:si_unique_call 1751} vslice_dummy_var_495 := SerialDbgPrintEx(2, Tmp_849);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 1752} vslice_dummy_var_487 := KeSynchronizeExecution(0, li2bplFunctionConstant1030, 0);
    call {:si_unique_call 1753} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    Mem_T.INT4[Tmp_845] := oldIrql_10;
    call {:si_unique_call 1754} sdv_KeAcquireSpinLock(0, Tmp_845);
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_845];
    call {:si_unique_call 1755} vslice_dummy_var_488 := sdv_RemoveEntryList(0);
    call {:si_unique_call 1756} sdv_KeReleaseSpinLock(0, oldIrql_10);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1757} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(PDevExt_23));
    goto L8;

  L8:
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    Tmp_843 := strConst__li2bpl205;
    call {:si_unique_call 1758} vslice_dummy_var_496 := SerialDbgPrintEx(12, Tmp_843);
    call {:si_unique_call 1759} IoDisconnectInterrupt(0);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    call {:si_unique_call 1760} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto L24;

  L24:
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    i_1 := 0;
    goto L42;

  L42:
    call {:si_unique_call 1761} i_1, Tmp_844, Tmp_846, Tmp_850 := SerialReleaseResources_loop_L42(i_1, Tmp_844, Tmp_846, Tmp_850, PDevExt_23);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} 16 > i_1;
    Tmp_846 := i_1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    havoc Tmp_850;
    assume {:nonnull} Tmp_850 != 0;
    assume Tmp_850 > 0;
    havoc Tmp_844;
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    i_1 := i_1 + 1;
    goto anon78_Else_dummy;

  anon78_Else_dummy:
    assume false;
    return;

  anon78_Then:
    goto L43;

  L43:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} i_1 == 16;
    Tmp_848 := strConst__li2bpl206;
    call {:si_unique_call 1762} vslice_dummy_var_497 := SerialDbgPrintEx(12, Tmp_848);
    call {:si_unique_call 1763} sdv_ExFreePool(0);
    goto L37;

  L37:
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1764} vslice_dummy_var_489 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1765} vslice_dummy_var_490 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1766} vslice_dummy_var_491 := SerialCancelTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1767} vslice_dummy_var_492 := SerialCancelTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1768} vslice_dummy_var_493 := SerialCancelTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    call {:si_unique_call 1769} vslice_dummy_var_494 := SerialCancelTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(PDevExt_23), PDevExt_23);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1770} sdv_714 := KeRemoveQueueDpc(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_714 != 0;
    call {:si_unique_call 1771} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_626;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_626;
    call {:si_unique_call 1772} vslice_dummy_var_498 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L72;

  L72:
    call {:si_unique_call 1773} sdv_717 := KeRemoveQueueDpc(0);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_717 != 0;
    call {:si_unique_call 1774} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_627;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_627;
    call {:si_unique_call 1775} vslice_dummy_var_499 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L79;

  L79:
    call {:si_unique_call 1776} sdv_739 := KeRemoveQueueDpc(0);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_739 != 0;
    call {:si_unique_call 1777} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_628;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_628;
    call {:si_unique_call 1778} vslice_dummy_var_500 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L86;

  L86:
    call {:si_unique_call 1779} sdv_713 := KeRemoveQueueDpc(0);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_713 != 0;
    call {:si_unique_call 1780} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_629;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_629;
    call {:si_unique_call 1781} vslice_dummy_var_501 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L93;

  L93:
    call {:si_unique_call 1782} sdv_732 := KeRemoveQueueDpc(0);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_732 != 0;
    call {:si_unique_call 1783} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_630;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_630;
    call {:si_unique_call 1784} vslice_dummy_var_502 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L100;

  L100:
    call {:si_unique_call 1785} sdv_719 := KeRemoveQueueDpc(0);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} sdv_719 != 0;
    call {:si_unique_call 1786} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_631;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_631;
    call {:si_unique_call 1787} vslice_dummy_var_503 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L107;

  L107:
    call {:si_unique_call 1788} sdv_721 := KeRemoveQueueDpc(0);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_721 != 0;
    call {:si_unique_call 1789} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_632;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_632;
    call {:si_unique_call 1790} vslice_dummy_var_504 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L114;

  L114:
    call {:si_unique_call 1791} sdv_716 := KeRemoveQueueDpc(0);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_716 != 0;
    call {:si_unique_call 1792} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_633;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_633;
    call {:si_unique_call 1793} vslice_dummy_var_505 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L121;

  L121:
    call {:si_unique_call 1794} sdv_743 := KeRemoveQueueDpc(0);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_743 != 0;
    call {:si_unique_call 1795} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_634;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_634;
    call {:si_unique_call 1796} vslice_dummy_var_506 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L128;

  L128:
    call {:si_unique_call 1797} sdv_725 := KeRemoveQueueDpc(0);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_725 != 0;
    call {:si_unique_call 1798} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_635;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_635;
    call {:si_unique_call 1799} vslice_dummy_var_507 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L135;

  L135:
    call {:si_unique_call 1800} sdv_712 := KeRemoveQueueDpc(0);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_712 != 0;
    call {:si_unique_call 1801} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_636;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_636;
    call {:si_unique_call 1802} vslice_dummy_var_508 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L142;

  L142:
    call {:si_unique_call 1803} sdv_737 := KeRemoveQueueDpc(0);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_737 != 0;
    call {:si_unique_call 1804} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_637;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_637;
    call {:si_unique_call 1805} vslice_dummy_var_509 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L149;

  L149:
    call {:si_unique_call 1806} sdv_718 := KeRemoveQueueDpc(0);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} sdv_718 != 0;
    call {:si_unique_call 1807} Tmp_845 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc vslice_dummy_var_638;
    Mem_T.INT4[Tmp_845] := vslice_dummy_var_638;
    call {:si_unique_call 1808} vslice_dummy_var_510 := sdv_InterlockedDecrement(Tmp_845);
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    goto L156;

  L156:
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_23)] != 0;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    havoc vslice_dummy_var_639;
    call {:si_unique_call 1809} MmUnmapIoSpace(0, vslice_dummy_var_639);
    goto L160;

  L160:
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_23)] != 0;
    assume {:nonnull} PDevExt_23 != 0;
    assume PDevExt_23 > 0;
    havoc vslice_dummy_var_640;
    call {:si_unique_call 1810} MmUnmapIoSpace(0, vslice_dummy_var_640);
    goto L164;

  L164:
    Tmp_847 := strConst__li2bpl207;
    call {:si_unique_call 1811} vslice_dummy_var_511 := SerialDbgPrintEx(2, Tmp_847);
    goto LM2;

  LM2:
    return;

  anon76_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_23)] == 0;
    goto L164;

  anon75_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_23)] == 0;
    goto L160;

  anon74_Then:
    assume {:partition} sdv_718 == 0;
    goto L156;

  anon73_Then:
    assume {:partition} sdv_737 == 0;
    goto L149;

  anon72_Then:
    assume {:partition} sdv_712 == 0;
    goto L142;

  anon71_Then:
    assume {:partition} sdv_725 == 0;
    goto L135;

  anon70_Then:
    assume {:partition} sdv_743 == 0;
    goto L128;

  anon69_Then:
    assume {:partition} sdv_716 == 0;
    goto L121;

  anon68_Then:
    assume {:partition} sdv_721 == 0;
    goto L114;

  anon67_Then:
    assume {:partition} sdv_719 == 0;
    goto L107;

  anon66_Then:
    assume {:partition} sdv_732 == 0;
    goto L100;

  anon65_Then:
    assume {:partition} sdv_713 == 0;
    goto L93;

  anon64_Then:
    assume {:partition} sdv_739 == 0;
    goto L86;

  anon63_Then:
    assume {:partition} sdv_717 == 0;
    goto L79;

  anon62_Then:
    assume {:partition} sdv_714 == 0;
    goto L72;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} i_1 != 16;
    goto L37;

  anon60_Then:
    assume {:partition} i_1 >= 16;
    goto L43;

  anon59_Then:
    goto L37;

  anon77_Then:
    goto L24;

  anon58_Then:
    goto L24;

  anon57_Then:
    goto L8;
}



procedure {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_852: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_852 == -1073741810 || Tmp_852 == -1073741670 || Tmp_852 == 0 || Tmp_852 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_21: int, actual_PConfig_1: int) returns (Tmp_852: int)
{
  var {:scalar} sdv_747: int;
  var {:pointer} sdv_748: int;
  var {:pointer} Tmp_853: int;
  var {:pointer} Tmp_854: int;
  var {:pointer} Tmp_855: int;
  var {:pointer} Tmp_856: int;
  var {:scalar} sdv_752: int;
  var {:scalar} sdv_753: int;
  var {:pointer} sdv_754: int;
  var {:scalar} sdv_755: int;
  var {:scalar} Tmp_857: int;
  var {:scalar} Tmp_858: int;
  var {:scalar} sdv_758: int;
  var {:scalar} Tmp_859: int;
  var {:pointer} Tmp_860: int;
  var {:pointer} pCurDevObj: int;
  var {:pointer} sdv_759: int;
  var {:pointer} sdv_760: int;
  var {:scalar} Tmp_861: int;
  var {:scalar} Tmp_862: int;
  var {:pointer} pDevExt_18: int;
  var {:scalar} Tmp_863: int;
  var {:scalar} Tmp_864: int;
  var {:scalar} Tmp_865: int;
  var {:scalar} sdv_762: int;
  var {:pointer} Tmp_866: int;
  var {:scalar} sdv_765: int;
  var {:scalar} sdv_767: int;
  var {:scalar} Tmp_867: int;
  var {:pointer} sdv_770: int;
  var {:pointer} Tmp_868: int;
  var {:scalar} Tmp_869: int;
  var {:pointer} pExtension: int;
  var {:scalar} oldIrql_11: int;
  var {:scalar} sdv_772: int;
  var {:scalar} Tmp_870: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_873: int;
  var {:scalar} Tmp_874: int;
  var {:scalar} sdv_773: int;
  var {:pointer} sdv_775: int;
  var {:scalar} sdv_776: int;
  var {:pointer} Tmp_875: int;
  var {:pointer} Tmp_876: int;
  var {:pointer} Tmp_877: int;
  var {:scalar} sdv_779: int;
  var {:scalar} Tmp_878: int;
  var {:scalar} Tmp_879: int;
  var {:scalar} sdv_781: int;
  var {:pointer} Tmp_880: int;
  var {:scalar} status_25: int;
  var {:scalar} sdv_782: int;
  var {:scalar} serialPhysicalMax: int;
  var {:pointer} Tmp_881: int;
  var {:scalar} Tmp_882: int;
  var {:scalar} Tmp_883: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} Tmp_885: int;
  var {:scalar} Tmp_886: int;
  var {:scalar} sdv_785: int;
  var {:scalar} sdv_786: int;
  var {:scalar} Tmp_887: int;
  var {:pointer} PDevObj_21: int;
  var {:pointer} PConfig_1: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;
  var vslice_dummy_var_514: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_526: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_641: int;
  var vslice_dummy_var_642: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_644: int;
  var vslice_dummy_var_645: int;
  var vslice_dummy_var_646: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_652: int;
  var vslice_dummy_var_653: int;
  var vslice_dummy_var_654: int;
  var vslice_dummy_var_655: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;
  var vslice_dummy_var_658: int;
  var vslice_dummy_var_659: int;
  var vslice_dummy_var_660: int;
  var vslice_dummy_var_661: int;
  var vslice_dummy_var_662: int;
  var vslice_dummy_var_663: int;
  var vslice_dummy_var_664: int;
  var vslice_dummy_var_665: int;
  var vslice_dummy_var_666: int;
  var vslice_dummy_var_667: int;
  var vslice_dummy_var_668: int;
  var vslice_dummy_var_669: int;
  var vslice_dummy_var_670: int;
  var vslice_dummy_var_671: int;
  var vslice_dummy_var_672: int;
  var vslice_dummy_var_673: int;
  var vslice_dummy_var_674: int;
  var vslice_dummy_var_675: int;
  var vslice_dummy_var_676: int;
  var vslice_dummy_var_677: int;
  var vslice_dummy_var_678: int;
  var vslice_dummy_var_679: int;
  var vslice_dummy_var_680: int;
  var vslice_dummy_var_681: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_686: int;
  var vslice_dummy_var_687: int;
  var vslice_dummy_var_688: int;
  var vslice_dummy_var_689: int;
  var vslice_dummy_var_690: int;
  var vslice_dummy_var_691: int;
  var vslice_dummy_var_692: int;
  var vslice_dummy_var_693: int;
  var vslice_dummy_var_694: int;
  var vslice_dummy_var_695: int;
  var vslice_dummy_var_696: int;
  var vslice_dummy_var_697: int;
  var vslice_dummy_var_698: int;
  var vslice_dummy_var_699: int;
  var vslice_dummy_var_700: int;
  var vslice_dummy_var_701: int;
  var vslice_dummy_var_702: int;
  var vslice_dummy_var_703: int;
  var vslice_dummy_var_704: int;
  var vslice_dummy_var_705: int;
  var vslice_dummy_var_706: int;
  var vslice_dummy_var_707: int;
  var vslice_dummy_var_708: int;

  anon0:
    call {:si_unique_call 1812} Tmp_861 := __HAVOC_malloc(20);
    call {:si_unique_call 1813} Tmp_863 := __HAVOC_malloc(20);
    call {:si_unique_call 1814} Tmp_867 := __HAVOC_malloc(20);
    call {:si_unique_call 1815} Tmp_874 := __HAVOC_malloc(20);
    call {:si_unique_call 1816} Tmp_878 := __HAVOC_malloc(20);
    call {:si_unique_call 1817} serialPhysicalMax := __HAVOC_malloc(20);
    call {:si_unique_call 1818} Tmp_883 := __HAVOC_malloc(20);
    call {:si_unique_call 1819} Tmp_887 := __HAVOC_malloc(20);
    PDevObj_21 := actual_PDevObj_21;
    PConfig_1 := actual_PConfig_1;
    call {:si_unique_call 1820} Tmp_853 := __HAVOC_malloc(140);
    call {:si_unique_call 1821} Tmp_854 := __HAVOC_malloc(60);
    call {:si_unique_call 1822} Tmp_855 := __HAVOC_malloc(304);
    call {:si_unique_call 1823} Tmp_856 := __HAVOC_malloc(312);
    call {:si_unique_call 1824} Tmp_866 := __HAVOC_malloc(336);
    call {:si_unique_call 1825} Tmp_871 := __HAVOC_malloc(300);
    call {:si_unique_call 1826} Tmp_872 := __HAVOC_malloc(408);
    call {:si_unique_call 1827} Tmp_873 := __HAVOC_malloc(744);
    call {:si_unique_call 1828} Tmp_875 := __HAVOC_malloc(116);
    call {:si_unique_call 1829} Tmp_876 := __HAVOC_malloc(132);
    call {:si_unique_call 1830} Tmp_877 := __HAVOC_malloc(732);
    call {:si_unique_call 1831} Tmp_880 := __HAVOC_malloc(436);
    call {:si_unique_call 1832} Tmp_881 := __HAVOC_malloc(440);
    call {:si_unique_call 1833} Tmp_884 := __HAVOC_malloc(180);
    call {:si_unique_call 1834} Tmp_885 := __HAVOC_malloc(444);
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    havoc pDevExt_18;
    Tmp_853 := strConst__li2bpl221;
    call {:si_unique_call 1835} vslice_dummy_var_513 := SerialDbgPrintEx(2, Tmp_853);
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Tmp_877 := strConst__li2bpl222;
    call {:si_unique_call 1836} vslice_dummy_var_514 := SerialDbgPrintEx(4, Tmp_877);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_641;
    havoc vslice_dummy_var_642;
    call {:si_unique_call 1837} sdv_772 := SerialMemCompare(vslice_dummy_var_641, vslice_dummy_var_642, serialPhysicalMax, 0);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_772 != 2;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_870;
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc vslice_dummy_var_643;
    havoc vslice_dummy_var_644;
    havoc vslice_dummy_var_645;
    call {:si_unique_call 1838} SerialLogError(vslice_dummy_var_643, 0, vslice_dummy_var_644, Tmp_863, 0, 0, 0, 43, 0, -1073348582, Tmp_870, vslice_dummy_var_645, 0, 0);
    Tmp_856 := strConst__li2bpl208;
    call {:si_unique_call 1839} vslice_dummy_var_515 := SerialDbgPrintEx(1, Tmp_856);
    Tmp_852 := -1073741810;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:partition} sdv_772 == 2;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_646;
    havoc vslice_dummy_var_647;
    call {:si_unique_call 1840} sdv_773 := SerialMemCompare(vslice_dummy_var_646, vslice_dummy_var_647, serialPhysicalMax, 0);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_773 != 2;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_864;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc vslice_dummy_var_648;
    havoc vslice_dummy_var_649;
    havoc vslice_dummy_var_650;
    call {:si_unique_call 1841} SerialLogError(vslice_dummy_var_648, 0, vslice_dummy_var_649, Tmp_887, 0, 0, 0, 44, 0, -1073348581, Tmp_864, vslice_dummy_var_650, 0, 0);
    Tmp_855 := strConst__li2bpl209;
    call {:si_unique_call 1842} vslice_dummy_var_516 := SerialDbgPrintEx(1, Tmp_855);
    Tmp_852 := -1073741810;
    goto L1;

  anon78_Then:
    assume {:partition} sdv_773 == 2;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_651;
    havoc vslice_dummy_var_652;
    call {:si_unique_call 1843} sdv_781 := SerialMemCompare(vslice_dummy_var_651, vslice_dummy_var_652, Tmp_883, 0);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} sdv_781 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_653;
    havoc vslice_dummy_var_654;
    havoc vslice_dummy_var_655;
    havoc vslice_dummy_var_656;
    call {:si_unique_call 1844} sdv_767 := SerialMemCompare(vslice_dummy_var_653, vslice_dummy_var_654, vslice_dummy_var_655, vslice_dummy_var_656);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_767 != 2;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_886;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc vslice_dummy_var_657;
    havoc vslice_dummy_var_658;
    havoc vslice_dummy_var_659;
    havoc vslice_dummy_var_660;
    call {:si_unique_call 1845} SerialLogError(vslice_dummy_var_657, 0, vslice_dummy_var_658, vslice_dummy_var_659, 0, 0, 0, 45, 0, -1073348580, Tmp_886, vslice_dummy_var_660, 0, 0);
    Tmp_866 := strConst__li2bpl210;
    call {:si_unique_call 1846} vslice_dummy_var_517 := SerialDbgPrintEx(1, Tmp_866);
    Tmp_852 := -1073741810;
    goto L1;

  anon80_Then:
    assume {:partition} sdv_767 == 2;
    goto L53;

  L53:
    call {:si_unique_call 1847} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1848} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    call {:si_unique_call 1849} sdv_785 := sdv_IsListEmpty(0);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_785 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L75;

  L75:
    call {:si_unique_call 1850} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto L78;

  L78:
    call {:si_unique_call 1851} sdv_752, sdv_753, sdv_758, Tmp_860, pCurDevObj, sdv_760, sdv_762, sdv_765, pExtension, oldIrql_11, Tmp_873, sdv_776, sdv_779, vslice_dummy_var_518 := SerialFindInitController_loop_L78(sdv_752, sdv_753, sdv_758, Tmp_860, pCurDevObj, sdv_760, sdv_762, sdv_765, Tmp_867, pExtension, oldIrql_11, Tmp_873, Tmp_874, sdv_776, sdv_779, Tmp_878, PConfig_1, vslice_dummy_var_518);
    goto L78_last;

  L78_last:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_873 := strConst__li2bpl211;
    call {:si_unique_call 1852} vslice_dummy_var_518 := SerialDbgPrintEx(4, Tmp_873);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_661;
    havoc vslice_dummy_var_662;
    havoc vslice_dummy_var_663;
    havoc vslice_dummy_var_664;
    call {:si_unique_call 1853} sdv_753 := SerialMemCompare(vslice_dummy_var_661, vslice_dummy_var_662, vslice_dummy_var_663, vslice_dummy_var_664);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_753 != 2;
    Tmp_872 := strConst__li2bpl212;
    call {:si_unique_call 1854} vslice_dummy_var_519 := SerialDbgPrintEx(1, Tmp_872);
    Tmp_852 := -1073741810;
    goto L1;

  anon87_Then:
    assume {:partition} sdv_753 == 2;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_665;
    havoc vslice_dummy_var_666;
    call {:si_unique_call 1855} sdv_776 := SerialMemCompare(vslice_dummy_var_665, vslice_dummy_var_666, Tmp_867, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_776 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_667;
    havoc vslice_dummy_var_668;
    havoc vslice_dummy_var_669;
    havoc vslice_dummy_var_670;
    call {:si_unique_call 1856} sdv_779 := SerialMemCompare(vslice_dummy_var_667, vslice_dummy_var_668, vslice_dummy_var_669, vslice_dummy_var_670);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_779 != 2;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_857;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_882;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_671;
    havoc vslice_dummy_var_672;
    havoc vslice_dummy_var_673;
    havoc vslice_dummy_var_674;
    havoc vslice_dummy_var_675;
    call {:si_unique_call 1857} SerialLogError(vslice_dummy_var_671, 0, vslice_dummy_var_672, vslice_dummy_var_673, 0, 0, 0, 47, 0, -1073348578, Tmp_882, vslice_dummy_var_674, Tmp_857, vslice_dummy_var_675);
    Tmp_881 := strConst__li2bpl213;
    call {:si_unique_call 1858} vslice_dummy_var_520 := SerialDbgPrintEx(1, Tmp_881);
    Tmp_852 := -1073741810;
    goto L1;

  anon89_Then:
    assume {:partition} sdv_779 == 2;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_676;
    havoc vslice_dummy_var_677;
    call {:si_unique_call 1859} sdv_752 := SerialMemCompare(vslice_dummy_var_676, vslice_dummy_var_677, Tmp_874, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_752 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_678;
    havoc vslice_dummy_var_679;
    havoc vslice_dummy_var_680;
    havoc vslice_dummy_var_681;
    call {:si_unique_call 1860} sdv_762 := SerialMemCompare(vslice_dummy_var_678, vslice_dummy_var_679, vslice_dummy_var_680, vslice_dummy_var_681);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_762 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_879;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_862;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_682;
    havoc vslice_dummy_var_683;
    havoc vslice_dummy_var_684;
    havoc vslice_dummy_var_685;
    havoc vslice_dummy_var_686;
    call {:si_unique_call 1861} SerialLogError(vslice_dummy_var_682, 0, vslice_dummy_var_683, vslice_dummy_var_684, 0, 0, 0, 48, 0, -1073348577, Tmp_862, vslice_dummy_var_685, Tmp_879, vslice_dummy_var_686);
    Tmp_880 := strConst__li2bpl214;
    call {:si_unique_call 1862} vslice_dummy_var_521 := SerialDbgPrintEx(1, Tmp_880);
    Tmp_852 := -1073741810;
    goto L1;

  anon91_Then:
    assume {:partition} sdv_762 != 1;
    goto L105;

  L105:
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_687;
    havoc vslice_dummy_var_688;
    call {:si_unique_call 1863} sdv_765 := SerialMemCompare(vslice_dummy_var_687, vslice_dummy_var_688, Tmp_878, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_765 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_689;
    havoc vslice_dummy_var_690;
    havoc vslice_dummy_var_691;
    havoc vslice_dummy_var_692;
    call {:si_unique_call 1864} sdv_758 := SerialMemCompare(vslice_dummy_var_689, vslice_dummy_var_690, vslice_dummy_var_691, vslice_dummy_var_692);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_758 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_869;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_859;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_693;
    havoc vslice_dummy_var_694;
    havoc vslice_dummy_var_695;
    havoc vslice_dummy_var_696;
    havoc vslice_dummy_var_697;
    call {:si_unique_call 1865} SerialLogError(vslice_dummy_var_693, 0, vslice_dummy_var_694, vslice_dummy_var_695, 0, 0, 0, 49, 0, -1073348576, Tmp_859, vslice_dummy_var_696, Tmp_869, vslice_dummy_var_697);
    Tmp_885 := strConst__li2bpl215;
    call {:si_unique_call 1866} vslice_dummy_var_522 := SerialDbgPrintEx(1, Tmp_885);
    Tmp_852 := -1073741810;
    goto L1;

  anon93_Then:
    assume {:partition} sdv_758 != 1;
    goto L84;

  L84:
    call {:si_unique_call 1867} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1868} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    call {:si_unique_call 1869} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 1870} sdv_760 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_760;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    assume false;
    return;

  anon92_Then:
    assume {:partition} sdv_765 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} sdv_752 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} sdv_776 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;

  anon83_Then:
    goto L79;

  L79:
    call {:si_unique_call 1871} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1872} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    call {:si_unique_call 1873} sdv_786 := sdv_IsListEmpty(0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_786 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L170;

  L170:
    call {:si_unique_call 1874} sdv_KeReleaseSpinLock(0, oldIrql_11);
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_698;
    havoc vslice_dummy_var_699;
    call {:si_unique_call 1875} sdv_755 := SerialMemCompare(vslice_dummy_var_698, vslice_dummy_var_699, Tmp_861, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_755 != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto L182;

  L182:
    call {:si_unique_call 1876} Tmp_860, pCurDevObj, sdv_770, pExtension, oldIrql_11, sdv_782 := SerialFindInitController_loop_L182(Tmp_860, pCurDevObj, sdv_770, pExtension, oldIrql_11, sdv_782, PConfig_1);
    goto L182_last;

  L182_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_700;
    havoc vslice_dummy_var_701;
    havoc vslice_dummy_var_702;
    havoc vslice_dummy_var_703;
    call {:si_unique_call 1877} sdv_782 := SerialMemCompare(vslice_dummy_var_700, vslice_dummy_var_701, vslice_dummy_var_702, vslice_dummy_var_703);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_782 == 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L194;

  L194:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_865;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    havoc Tmp_858;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_21 != 0;
    assume PDevObj_21 > 0;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_704;
    havoc vslice_dummy_var_705;
    havoc vslice_dummy_var_706;
    havoc vslice_dummy_var_707;
    havoc vslice_dummy_var_708;
    call {:si_unique_call 1878} SerialLogError(vslice_dummy_var_704, 0, vslice_dummy_var_705, vslice_dummy_var_706, 0, 0, 0, 50, 0, -1073348575, Tmp_858, vslice_dummy_var_707, Tmp_865, vslice_dummy_var_708);
    Tmp_871 := strConst__li2bpl217;
    call {:si_unique_call 1879} vslice_dummy_var_525 := SerialDbgPrintEx(1, Tmp_871);
    Tmp_852 := -1073741810;
    goto L1;

  anon102_Then:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_875 := strConst__li2bpl218;
    call {:si_unique_call 1880} vslice_dummy_var_526 := SerialDbgPrintEx(4, Tmp_875);
    Tmp_854 := strConst__li2bpl219;
    call {:si_unique_call 1881} vslice_dummy_var_527 := SerialDbgPrintEx(4, Tmp_854);
    call {:si_unique_call 1882} status_25 := SerialInitMultiPort(pExtension, PConfig_1, PDevObj_21);
    Tmp_852 := status_25;
    goto L1;

  anon103_Then:
    goto L194;

  anon101_Then:
    assume {:partition} sdv_782 != 0;
    goto L183;

  L183:
    call {:si_unique_call 1883} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1884} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 1885} sdv_770 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_770;
    goto L216;

  L216:
    call {:si_unique_call 1886} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    assume false;
    return;

  anon105_Then:
    goto L178;

  L178:
    Tmp_884 := strConst__li2bpl216;
    call {:si_unique_call 1887} vslice_dummy_var_523 := SerialDbgPrintEx(4, Tmp_884);
    call {:si_unique_call 1888} status_25 := SerialInitOneController(PDevObj_21, PConfig_1);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} status_25 >= 0;
    call {:si_unique_call 1889} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1890} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    call {:si_unique_call 1891} sdv_747 := sdv_IsListEmpty(0);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_747 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L241;

  L241:
    call {:si_unique_call 1892} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto L246;

  L246:
    call {:si_unique_call 1893} Tmp_860, pCurDevObj, sdv_759, pExtension, oldIrql_11 := SerialFindInitController_loop_L246(Tmp_860, pCurDevObj, sdv_759, pExtension, oldIrql_11, PConfig_1);
    goto L246_last;

  L246_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    call {:si_unique_call 1894} sdv_ExFreePool(0);
    Tmp_876 := strConst__li2bpl220;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_868;
    call {:si_unique_call 1895} vslice_dummy_var_524 := SerialDbgPrintEx(4, Tmp_876);
    call {:si_unique_call 1896} vslice_dummy_var_512 := KeSynchronizeExecution(0, li2bplFunctionConstant1048, 0);
    Tmp_852 := 0;
    goto L1;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 1897} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := oldIrql_11;
    call {:si_unique_call 1898} sdv_KeAcquireSpinLock(0, Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_860];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 1899} sdv_759 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_759;
    goto L264;

  L264:
    call {:si_unique_call 1900} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    goto L245;

  L245:
    Tmp_852 := 0;
    goto L1;

  anon111_Then:
    goto L245;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;

  anon108_Then:
    goto L245;

  anon107_Then:
    assume {:partition} sdv_747 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1901} sdv_754 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_754;
    goto L241;

  anon106_Then:
    assume {:partition} 0 > status_25;
    Tmp_852 := status_25;
    goto L1;

  anon104_Then:
    goto L178;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;

  anon97_Then:
    goto L178;

  anon96_Then:
    assume {:partition} sdv_755 == 0;
    goto L178;

  anon95_Then:
    assume {:partition} sdv_786 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1902} sdv_775 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_775;
    goto L170;

  anon82_Then:
    goto L79;

  anon81_Then:
    assume {:partition} sdv_785 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1903} sdv_748 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_748;
    goto L75;

  anon79_Then:
    assume {:partition} sdv_781 == 0;
    goto L53;
}



procedure {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_888: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_888 == -1073741811 || Tmp_888 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_888: int)
{
  var {:scalar} maxRemain: int;
  var {:scalar} maxRemain80: int;
  var {:scalar} remainder: int;
  var {:scalar} maxRemain30: int;
  var {:scalar} maxRemain42: int;
  var {:scalar} maxRemain18: int;
  var {:scalar} calculatedDivisor: int;
  var {:scalar} status_26: int;
  var {:scalar} denominator: int;
  var {:scalar} ClockRate: int;
  var {:scalar} DesiredBaud: int;
  var {:pointer} AppropriateDivisor_1: int;

  anon0:
    ClockRate := actual_ClockRate;
    DesiredBaud := actual_DesiredBaud;
    AppropriateDivisor_1 := actual_AppropriateDivisor_1;
    status_26 := 0;
    maxRemain18 := 18432;
    maxRemain30 := 30720;
    maxRemain42 := 42336;
    maxRemain80 := 80000;
    denominator := DesiredBaud * 16;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} 0 >= DesiredBaud;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  L21:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] == -1;
    status_26 := -1073741811;
    goto L22;

  L22:
    Tmp_888 := status_26;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] != -1;
    goto L22;

  anon74_Then:
    assume {:partition} DesiredBaud > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} DesiredBaud > denominator;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  anon51_Then:
    assume {:partition} denominator >= DesiredBaud;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} ClockRate == 1843200;
    maxRemain := maxRemain18;
    goto L28;

  L28:
    calculatedDivisor := INTDIV(ClockRate, denominator);
    remainder := INTMOD(ClockRate, denominator);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} remainder * 2 > ClockRate;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} DesiredBaud != 110;
    calculatedDivisor := calculatedDivisor + 1;
    goto L31;

  L31:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} DesiredBaud >= 9600;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} remainder >= maxRemain;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClockRate > remainder + maxRemain;
    calculatedDivisor := -1;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} denominator > ClockRate;
    calculatedDivisor := -1;
    goto L38;

  L38:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ClockRate == 1843200;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 2;
    goto L42;

  L42:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := calculatedDivisor;
    goto L21;

  anon62_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon60_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} ClockRate == 3072000;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 13;
    goto L42;

  anon64_Then:
    assume {:partition} DesiredBaud != 14400;
    goto L42;

  anon61_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClockRate == 4233600;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} DesiredBaud == 9600;
    calculatedDivisor := 28;
    goto L42;

  anon66_Then:
    assume {:partition} DesiredBaud != 9600;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 18;
    goto L42;

  anon67_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} DesiredBaud == 19200;
    calculatedDivisor := 14;
    goto L42;

  anon68_Then:
    assume {:partition} DesiredBaud != 19200;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} DesiredBaud == 38400;
    calculatedDivisor := 7;
    goto L42;

  anon69_Then:
    assume {:partition} DesiredBaud != 38400;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 5;
    goto L42;

  anon70_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon63_Then:
    assume {:partition} ClockRate != 4233600;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ClockRate == 8000000;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 35;
    goto L42;

  anon71_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 9;
    goto L42;

  anon72_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon65_Then:
    assume {:partition} ClockRate != 8000000;
    goto L42;

  anon57_Then:
    assume {:partition} ClockRate >= denominator;
    goto L38;

  anon59_Then:
    assume {:partition} remainder + maxRemain >= ClockRate;
    goto L34;

  anon58_Then:
    assume {:partition} maxRemain > remainder;
    goto L34;

  anon55_Then:
    assume {:partition} 9600 > DesiredBaud;
    goto L34;

  anon56_Then:
    assume {:partition} DesiredBaud == 110;
    goto L31;

  anon75_Then:
    assume {:partition} ClockRate >= remainder * 2;
    goto L31;

  anon53_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} ClockRate == 3072000;
    maxRemain := maxRemain30;
    goto L28;

  anon54_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ClockRate == 4233600;
    maxRemain := maxRemain42;
    goto L28;

  anon73_Then:
    assume {:partition} ClockRate != 4233600;
    maxRemain := maxRemain80;
    goto L28;
}



procedure {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_22: int, actual_DisableUART: int)
{
  var {:pointer} Tmp_890: int;
  var {:pointer} Tmp_891: int;
  var {:pointer} pDevExt_19: int;
  var {:pointer} sdv_788: int;
  var {:pointer} Tmp_895: int;
  var {:pointer} countSoFar_1: int;
  var {:pointer} PDevObj_22: int;
  var {:scalar} DisableUART: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;

  anon0:
    call {:si_unique_call 1904} vslice_dummy_var_528 := __HAVOC_malloc(4);
    PDevObj_22 := actual_PDevObj_22;
    DisableUART := actual_DisableUART;
    call {:si_unique_call 1905} Tmp_891 := __HAVOC_malloc(136);
    call {:si_unique_call 1906} Tmp_895 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj_22 != 0;
    assume PDevObj_22 > 0;
    havoc pDevExt_19;
    call {:si_unique_call 1907} sdv_do_paged_code_check();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DisableUART != 0;
    Tmp_890 := strConst__li2bpl224;
    goto L11;

  L11:
    Tmp_891 := strConst__li2bpl225;
    call {:si_unique_call 1908} vslice_dummy_var_530 := SerialDbgPrintEx(2, Tmp_891);
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_19)], 1) != 0;
    call {:si_unique_call 1909} sdv_788 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_788 != 0;
    assume sdv_788 > 0;
    countSoFar_1 := SerialCount__CONFIGURATION_INFORMATION(sdv_788);
    assume {:nonnull} countSoFar_1 != 0;
    assume countSoFar_1 > 0;
    Mem_T.INT4[countSoFar_1] := Mem_T.INT4[countSoFar_1] - 1;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_19)], 2) != 0;
    goto L26;

  L26:
    call {:si_unique_call 1910} vslice_dummy_var_529 := IoWMIRegistrationControl(0, 2);
    goto L15;

  L15:
    call {:si_unique_call 1911} SerialUndoExternalNaming(pDevExt_19);
    Tmp_895 := strConst__li2bpl226;
    call {:si_unique_call 1912} vslice_dummy_var_531 := SerialDbgPrintEx(2, Tmp_895);
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_19)], 2) == 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} DisableUART != 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    goto L29;

  L29:
    call {:si_unique_call 1913} SerialReleaseResources(pDevExt_19);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L26;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} DisableUART == 0;
    goto L29;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_19)], 1) == 0;
    goto L15;

  anon11_Then:
    assume {:partition} DisableUART == 0;
    Tmp_890 := strConst__li2bpl223;
    goto L11;
}



procedure {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_896: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_896 == 0 || Tmp_896 == 2 || Tmp_896 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_896: int)
{
  var {:scalar} A: int;
  var {:scalar} B: int;
  var {:scalar} b: int;
  var {:scalar} higher: int;
  var {:scalar} lowerSpan: int;
  var {:scalar} lower: int;
  var {:scalar} a: int;
  var {:pointer} structPtr888A: int;
  var {:scalar} SpanOfA: int;
  var {:pointer} structPtr888B: int;
  var {:scalar} SpanOfB: int;

  anon0:
    call {:si_unique_call 1914} A := __HAVOC_malloc(20);
    call {:si_unique_call 1915} B := __HAVOC_malloc(20);
    call {:si_unique_call 1916} b := __HAVOC_malloc(20);
    call {:si_unique_call 1917} higher := __HAVOC_malloc(20);
    call {:si_unique_call 1918} lower := __HAVOC_malloc(20);
    call {:si_unique_call 1919} a := __HAVOC_malloc(20);
    structPtr888A := actual_structPtr888A;
    SpanOfA := actual_SpanOfA;
    structPtr888B := actual_structPtr888B;
    SpanOfB := actual_SpanOfB;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    call {:si_unique_call 1920} sdv_do_paged_code_check();
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_896 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfB;
    goto L20;

  L20:
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_896 := 2;
    goto L1;

  anon8_Then:
    Tmp_896 := 1;
    goto L1;

  anon7_Then:
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b != 0;
    assume b > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfA;
    goto L20;
}



procedure {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_32: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_898: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_898 == 0 || Tmp_898 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_32: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_898: int)
{
  var {:scalar} oldLCRContents: int;
  var {:pointer} Tmp_902: int;
  var {:pointer} PDivisor: int;
  var {:pointer} Tmp_909: int;
  var {:scalar} regContents: int;
  var {:scalar} Lsb: int;
  var {:scalar} Tmp_915: int;
  var {:scalar} value1: int;
  var {:dopa} {:scalar} value2: int;
  var {:scalar} returnValue: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} Tmp_919: int;
  var {:scalar} sdv_796: int;
  var {:scalar} sdv_798: int;
  var {:scalar} Tmp_922: int;
  var {:scalar} LineControl_1: int;
  var {:pointer} Address_1: int;
  var {:scalar} Tmp_924: int;
  var {:pointer} Tmp_925: int;
  var {:pointer} Tmp_926: int;
  var {:pointer} Tmp_932: int;
  var {:pointer} Extension_32: int;
  var {:pointer} InsertString: int;
  var {:scalar} ForceFifo: int;
  var {:scalar} LogFifo: int;
  var boogieTmp: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_709: int;
  var vslice_dummy_var_710: int;
  var vslice_dummy_var_711: int;
  var vslice_dummy_var_712: int;
  var vslice_dummy_var_713: int;
  var vslice_dummy_var_714: int;
  var vslice_dummy_var_715: int;
  var vslice_dummy_var_716: int;

  anon0:
    call {:si_unique_call 1921} Tmp_915 := __HAVOC_malloc(20);
    call {:si_unique_call 1922} value2 := __HAVOC_malloc(4);
    call {:si_unique_call 1923} Tmp_922 := __HAVOC_malloc(20);
    Extension_32 := actual_Extension_32;
    InsertString := actual_InsertString;
    ForceFifo := actual_ForceFifo;
    LogFifo := actual_LogFifo;
    call {:si_unique_call 1924} Tmp_925 := __HAVOC_malloc(148);
    returnValue := 1;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1925} oldLCRContents := corral_nondet();
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1926} vslice_dummy_var_533 := corral_nondet();
    call {:si_unique_call 1927} Tmp_926 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    Mem_T.INT4[Tmp_926] := oldIrql_12;
    call {:si_unique_call 1928} sdv_KeRaiseIrql(30, Tmp_926);
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    oldIrql_12 := Mem_T.INT4[Tmp_926];
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1929} sdv_796 := corral_nondet();
    value1 := sdv_796;
    call {:si_unique_call 1930} value1 := corral_nondet();
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1931} sdv_798 := corral_nondet();
    value1 := BOR(value1, sdv_798);
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Address_1;
    PDivisor := value2;
    call {:si_unique_call 1932} LineControl_1 := corral_nondet();
    call {:si_unique_call 1933} Lsb := corral_nondet();
    call {:si_unique_call 1934} vslice_dummy_var_534 := corral_nondet();
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    Mem_T.INT4[PDivisor] := Lsb;
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    call {:si_unique_call 1935} boogieTmp := corral_nondet();
    Mem_T.INT4[PDivisor] := boogieTmp;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1936} sdv_KeLowerIrql(oldIrql_12);
    assume {:nonnull} value2 != 0;
    assume value2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} value1 == Mem_T.INT4[value2];
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_919;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_932;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_932 != 0;
    assume Tmp_932 > 0;
    havoc vslice_dummy_var_709;
    havoc vslice_dummy_var_710;
    havoc vslice_dummy_var_711;
    havoc vslice_dummy_var_712;
    call {:si_unique_call 1937} SerialLogError(vslice_dummy_var_709, vslice_dummy_var_710, vslice_dummy_var_711, Tmp_922, 0, 0, 0, 62, 0, -1073348572, Tmp_919, vslice_dummy_var_712, 0, 0);
    returnValue := 0;
    goto L89;

  L89:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} returnValue != 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1938} regContents := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(regContents, 192) != 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    call {:si_unique_call 1939} vslice_dummy_var_535 := corral_nondet();
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto L116;

  L116:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ForceFifo != 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L133;

  L133:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} LogFifo != 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_924;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Tmp_915 != 0;
    assume Tmp_915 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_902;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_902 != 0;
    assume Tmp_902 > 0;
    havoc vslice_dummy_var_713;
    havoc vslice_dummy_var_714;
    havoc vslice_dummy_var_715;
    havoc vslice_dummy_var_716;
    call {:si_unique_call 1940} SerialLogError(vslice_dummy_var_713, vslice_dummy_var_714, vslice_dummy_var_715, Tmp_915, 0, 0, 0, 15, 0, -1073348606, Tmp_924, vslice_dummy_var_716, 0, 0);
    goto L136;

  L136:
    Tmp_925 := strConst__li2bpl227;
    call {:si_unique_call 1941} vslice_dummy_var_536 := SerialDbgPrintEx(4, Tmp_925);
    goto L134;

  L134:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L97;

  L97:
    Tmp_898 := returnValue;
    return;

  anon29_Then:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1942} vslice_dummy_var_532 := corral_nondet();
    goto L97;

  anon30_Then:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_909;
    assume {:nonnull} Tmp_909 != 0;
    assume Tmp_909 > 0;
    goto L97;

  anon27_Then:
    goto L97;

  anon28_Then:
    assume {:partition} LogFifo == 0;
    goto L136;

  anon26_Then:
    goto L134;

  anon25_Then:
    goto L131;

  L131:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto L133;

  anon24_Then:
    assume {:partition} ForceFifo == 0;
    goto L131;

  anon23_Then:
    assume {:partition} BAND(regContents, 192) == 0;
    goto L116;

  anon22_Then:
    assume {:partition} returnValue == 0;
    goto L97;

  anon21_Then:
    assume {:partition} value1 != Mem_T.INT4[value2];
    goto L89;
}



procedure {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_934: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_934 == -1073741670 || Tmp_934 == -1073741709 || Tmp_934 == -1073741810 || Tmp_934 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_23: int, actual_PConfigData_1: int) returns (Tmp_934: int)
{
  var {:pointer} pDevExt_20: int;
  var {:scalar} status_27: int;
  var {:pointer} PDevObj_23: int;
  var {:pointer} PConfigData_1: int;

  anon0:
    PDevObj_23 := actual_PDevObj_23;
    PConfigData_1 := actual_PConfigData_1;
    call {:si_unique_call 1943} sdv_do_paged_code_check();
    call {:si_unique_call 1944} status_27 := SerialInitController(PDevObj_23, PConfigData_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_27 >= 0;
    assume {:nonnull} PDevObj_23 != 0;
    assume PDevObj_23 > 0;
    havoc pDevExt_20;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    assume {:nonnull} pDevExt_20 != 0;
    assume pDevExt_20 > 0;
    goto L13;

  L13:
    Tmp_934 := status_27;
    return;

  anon3_Then:
    assume {:partition} 0 > status_27;
    goto L13;
}



procedure {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_936: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_936 == -1073741670 || Tmp_936 == -1073741709 || Tmp_936 == -1073741810 || Tmp_936 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitController"} SerialInitController(actual_PDevObj_24: int, actual_PConfigData_2: int) returns (Tmp_936: int)
{
  var {:scalar} sdv_802: int;
  var {:scalar} sdv_803: int;
  var {:scalar} sdv_804: int;
  var {:scalar} sdv_805: int;
  var {:scalar} sdv_806: int;
  var {:scalar} sdv_808: int;
  var {:scalar} sdv_809: int;
  var {:scalar} sdv_810: int;
  var {:scalar} sdv_811: int;
  var {:scalar} sdv_812: int;
  var {:scalar} sdv_813: int;
  var {:scalar} sdv_814: int;
  var {:scalar} sdv_815: int;
  var {:scalar} Tmp_937: int;
  var {:scalar} sdv_816: int;
  var {:scalar} Tmp_938: int;
  var {:scalar} sdv_817: int;
  var {:scalar} sdv_818: int;
  var {:pointer} Tmp_939: int;
  var {:pointer} Tmp_940: int;
  var {:pointer} pDevExt_21: int;
  var {:dopa} {:scalar} junk: int;
  var {:scalar} sdv_820: int;
  var {:scalar} sdv_821: int;
  var {:pointer} sdv_822: int;
  var {:pointer} Tmp_941: int;
  var {:scalar} Tmp_942: int;
  var {:scalar} sdv_823: int;
  var {:scalar} Tmp_943: int;
  var {:scalar} sdv_824: int;
  var {:scalar} sdv_826: int;
  var {:scalar} sdv_827: int;
  var {:pointer} Tmp_944: int;
  var {:scalar} sdv_829: int;
  var {:scalar} sdv_831: int;
  var {:scalar} Tmp_945: int;
  var {:pointer} sdv_833: int;
  var {:pointer} sdv_834: int;
  var {:scalar} sdv_835: int;
  var {:scalar} sdv_836: int;
  var {:scalar} Tmp_947: int;
  var {:scalar} sdv_837: int;
  var {:pointer} Tmp_948: int;
  var {:scalar} sdv_838: int;
  var {:scalar} sdv_839: int;
  var {:scalar} sdv_840: int;
  var {:scalar} Tmp_949: int;
  var {:scalar} sdv_841: int;
  var {:pointer} Tmp_950: int;
  var {:scalar} sdv_843: int;
  var {:scalar} Tmp_951: int;
  var {:scalar} sdv_844: int;
  var {:scalar} status_28: int;
  var {:scalar} sdv_845: int;
  var {:scalar} allocedISRSw: int;
  var {:scalar} sdv_846: int;
  var {:scalar} sdv_847: int;
  var {:pointer} Tmp_952: int;
  var {:scalar} Tmp_953: int;
  var {:scalar} sdv_848: int;
  var {:pointer} Tmp_954: int;
  var {:scalar} sdv_849: int;
  var {:pointer} Tmp_955: int;
  var {:scalar} sdv_851: int;
  var {:scalar} Tmp_957: int;
  var {:pointer} PDevObj_24: int;
  var {:pointer} PConfigData_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_544: int;
  var vslice_dummy_var_717: int;
  var vslice_dummy_var_718: int;
  var vslice_dummy_var_719: int;
  var vslice_dummy_var_720: int;
  var vslice_dummy_var_721: int;
  var vslice_dummy_var_722: int;
  var vslice_dummy_var_723: int;
  var vslice_dummy_var_724: int;
  var vslice_dummy_var_725: int;
  var vslice_dummy_var_726: int;
  var vslice_dummy_var_727: int;
  var vslice_dummy_var_728: int;
  var vslice_dummy_var_729: int;
  var vslice_dummy_var_730: int;
  var vslice_dummy_var_731: int;
  var vslice_dummy_var_732: int;
  var vslice_dummy_var_733: int;
  var vslice_dummy_var_734: int;
  var vslice_dummy_var_735: int;
  var vslice_dummy_var_736: int;
  var vslice_dummy_var_737: int;
  var vslice_dummy_var_738: int;
  var vslice_dummy_var_739: int;
  var vslice_dummy_var_740: int;
  var vslice_dummy_var_741: int;
  var vslice_dummy_var_742: int;
  var vslice_dummy_var_743: int;
  var vslice_dummy_var_744: int;
  var vslice_dummy_var_745: int;
  var vslice_dummy_var_746: int;
  var vslice_dummy_var_747: int;
  var vslice_dummy_var_748: int;
  var vslice_dummy_var_749: int;
  var vslice_dummy_var_750: int;
  var vslice_dummy_var_751: int;
  var vslice_dummy_var_752: int;
  var vslice_dummy_var_753: int;
  var vslice_dummy_var_754: int;
  var vslice_dummy_var_755: int;
  var vslice_dummy_var_756: int;
  var vslice_dummy_var_757: int;
  var vslice_dummy_var_758: int;
  var vslice_dummy_var_759: int;
  var vslice_dummy_var_760: int;

  anon0:
    call {:si_unique_call 1945} junk := __HAVOC_malloc(4);
    call {:si_unique_call 1946} Tmp_943 := __HAVOC_malloc(20);
    call {:si_unique_call 1947} Tmp_947 := __HAVOC_malloc(20);
    call {:si_unique_call 1948} Tmp_951 := __HAVOC_malloc(20);
    call {:si_unique_call 1949} Tmp_953 := __HAVOC_malloc(20);
    PDevObj_24 := actual_PDevObj_24;
    PConfigData_2 := actual_PConfigData_2;
    call {:si_unique_call 1950} Tmp_939 := __HAVOC_malloc(204);
    call {:si_unique_call 1951} Tmp_940 := __HAVOC_malloc(136);
    call {:si_unique_call 1952} Tmp_941 := __HAVOC_malloc(140);
    call {:si_unique_call 1953} Tmp_944 := __HAVOC_malloc(184);
    call {:si_unique_call 1954} Tmp_948 := __HAVOC_malloc(180);
    call {:si_unique_call 1955} Tmp_952 := __HAVOC_malloc(840);
    call {:si_unique_call 1956} Tmp_954 := __HAVOC_malloc(196);
    call {:si_unique_call 1957} Tmp_955 := __HAVOC_malloc(204);
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    havoc pDevExt_21;
    status_28 := 0;
    allocedISRSw := 0;
    call {:si_unique_call 1958} sdv_do_paged_code_check();
    Tmp_944 := strConst__li2bpl228;
    call {:si_unique_call 1959} vslice_dummy_var_537 := SerialDbgPrintEx(4, Tmp_944);
    assume {:nonnull} KdComPortInUse != 0;
    assume KdComPortInUse > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    Tmp_948 := strConst__li2bpl229;
    call {:si_unique_call 1960} vslice_dummy_var_538 := SerialDbgPrintEx(0, Tmp_948);
    Tmp_940 := strConst__li2bpl230;
    call {:si_unique_call 1961} vslice_dummy_var_539 := SerialDbgPrintEx(0, Tmp_940);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc Tmp_957;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_717;
    havoc vslice_dummy_var_718;
    havoc vslice_dummy_var_719;
    call {:si_unique_call 1962} SerialLogError(vslice_dummy_var_717, 0, vslice_dummy_var_718, Tmp_947, 0, 0, 0, 3, 0, -1073348607, Tmp_957, vslice_dummy_var_719, 0, 0);
    Tmp_936 := -1073741670;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto L36;

  L36:
    call {:si_unique_call 1963} KeInitializeTimer(0);
    call {:si_unique_call 1964} KeInitializeTimer(0);
    call {:si_unique_call 1965} KeInitializeTimer(0);
    call {:si_unique_call 1966} KeInitializeTimer(0);
    call {:si_unique_call 1967} KeInitializeTimer(0);
    call {:si_unique_call 1968} KeInitializeTimer(0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1969} KeInitializeDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant577, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1970} KeInitializeDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant723, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1971} KeInitializeDpc(TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant726, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1972} KeInitializeDpc(IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant728, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1973} KeInitializeDpc(TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant579, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1974} KeInitializeDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant1040, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1975} KeInitializeDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant1041, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1976} KeInitializeDpc(TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant1042, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1977} KeInitializeDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant622, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1978} KeInitializeDpc(XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant581, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1979} KeInitializeDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant580, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1980} KeInitializeDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant899, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1981} KeInitializeDpc(PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant901, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1982} KeInitializeDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant678, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1983} KeInitializeDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_21), li2bplFunctionConstant673, 0);
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_938;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_720;
    havoc vslice_dummy_var_721;
    havoc vslice_dummy_var_722;
    havoc vslice_dummy_var_723;
    call {:si_unique_call 1984} sdv_833 := SerialGetMappedAddress(vslice_dummy_var_720, vslice_dummy_var_721, vslice_dummy_var_722, vslice_dummy_var_723, Tmp_938, UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21));
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_937;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_724;
    havoc vslice_dummy_var_725;
    havoc vslice_dummy_var_726;
    havoc vslice_dummy_var_727;
    call {:si_unique_call 1985} sdv_822 := SerialGetMappedAddress(vslice_dummy_var_724, vslice_dummy_var_725, vslice_dummy_var_726, vslice_dummy_var_727, Tmp_937, UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_21));
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L113;

  L113:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L154;

  L154:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 4;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 8;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 14;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L174;

  L174:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} 1 > Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)];
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L177;

  L177:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_728;
    call {:si_unique_call 1986} sdv_827 := SerialDoesPortExist(pDevExt_21, DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_21), Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfigData_2)], vslice_dummy_var_728);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} sdv_827 != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] != 0;
    Tmp_954 := strConst__li2bpl233;
    call {:si_unique_call 1987} vslice_dummy_var_540 := SerialDbgPrintEx(3, Tmp_954);
    status_28 := -1073741810;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc Tmp_949;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_729;
    havoc vslice_dummy_var_730;
    havoc vslice_dummy_var_731;
    call {:si_unique_call 1988} SerialLogError(vslice_dummy_var_729, PDevObj_24, vslice_dummy_var_730, Tmp_951, 0, 0, 0, 57, 0, -1073348574, Tmp_949, vslice_dummy_var_731, 0, 0);
    goto L139;

  L139:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_28 >= 0;
    goto L141;

  L141:
    Tmp_936 := status_28;
    goto L1;

  anon81_Then:
    assume {:partition} 0 > status_28;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} allocedISRSw != 0;
    call {:si_unique_call 1989} sdv_ExFreePool(0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L142;

  L142:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] != 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_732;
    call {:si_unique_call 1990} MmUnmapIoSpace(0, vslice_dummy_var_732);
    goto L147;

  L147:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_21)] != 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_733;
    call {:si_unique_call 1991} MmUnmapIoSpace(0, vslice_dummy_var_733);
    goto L141;

  anon84_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_21)] == 0;
    goto L141;

  anon83_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] == 0;
    goto L147;

  anon82_Then:
    assume {:partition} allocedISRSw == 0;
    goto L142;

  anon87_Then:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1992} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1993} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    call {:si_unique_call 1994} boogieTmp := corral_nondet();
    Tmp_952 := strConst__li2bpl235;
    call {:si_unique_call 1995} vslice_dummy_var_541 := SerialDbgPrintEx(4, Tmp_952);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_734;
    call {:si_unique_call 1996} sdv_810 := SerialGetDivisorFromBaud(vslice_dummy_var_734, 75, junk);
    call {:si_unique_call 1997} sdv_815 := sdv_NT_ERROR(sdv_810);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_815 != 0;
    goto L218;

  L218:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_735;
    call {:si_unique_call 1998} sdv_836 := SerialGetDivisorFromBaud(vslice_dummy_var_735, 110, junk);
    call {:si_unique_call 1999} sdv_840 := sdv_NT_ERROR(sdv_836);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_840 != 0;
    goto L226;

  L226:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_736;
    call {:si_unique_call 2000} sdv_845 := SerialGetDivisorFromBaud(vslice_dummy_var_736, 135, junk);
    call {:si_unique_call 2001} sdv_809 := sdv_NT_ERROR(sdv_845);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_809 != 0;
    goto L234;

  L234:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_737;
    call {:si_unique_call 2002} sdv_820 := SerialGetDivisorFromBaud(vslice_dummy_var_737, 150, junk);
    call {:si_unique_call 2003} sdv_831 := sdv_NT_ERROR(sdv_820);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_831 != 0;
    goto L242;

  L242:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_738;
    call {:si_unique_call 2004} sdv_823 := SerialGetDivisorFromBaud(vslice_dummy_var_738, 300, junk);
    call {:si_unique_call 2005} sdv_816 := sdv_NT_ERROR(sdv_823);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_816 != 0;
    goto L250;

  L250:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_739;
    call {:si_unique_call 2006} sdv_847 := SerialGetDivisorFromBaud(vslice_dummy_var_739, 600, junk);
    call {:si_unique_call 2007} sdv_818 := sdv_NT_ERROR(sdv_847);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_818 != 0;
    goto L258;

  L258:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_740;
    call {:si_unique_call 2008} sdv_851 := SerialGetDivisorFromBaud(vslice_dummy_var_740, 1200, junk);
    call {:si_unique_call 2009} sdv_813 := sdv_NT_ERROR(sdv_851);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_813 != 0;
    goto L266;

  L266:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_741;
    call {:si_unique_call 2010} sdv_838 := SerialGetDivisorFromBaud(vslice_dummy_var_741, 1800, junk);
    call {:si_unique_call 2011} sdv_844 := sdv_NT_ERROR(sdv_838);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_844 != 0;
    goto L274;

  L274:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_742;
    call {:si_unique_call 2012} sdv_804 := SerialGetDivisorFromBaud(vslice_dummy_var_742, 2400, junk);
    call {:si_unique_call 2013} sdv_821 := sdv_NT_ERROR(sdv_804);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_821 != 0;
    goto L282;

  L282:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_743;
    call {:si_unique_call 2014} sdv_841 := SerialGetDivisorFromBaud(vslice_dummy_var_743, 4800, junk);
    call {:si_unique_call 2015} sdv_808 := sdv_NT_ERROR(sdv_841);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_808 != 0;
    goto L290;

  L290:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_744;
    call {:si_unique_call 2016} sdv_829 := SerialGetDivisorFromBaud(vslice_dummy_var_744, 7200, junk);
    call {:si_unique_call 2017} sdv_837 := sdv_NT_ERROR(sdv_829);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} sdv_837 != 0;
    goto L298;

  L298:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_745;
    call {:si_unique_call 2018} sdv_802 := SerialGetDivisorFromBaud(vslice_dummy_var_745, 9600, junk);
    call {:si_unique_call 2019} sdv_814 := sdv_NT_ERROR(sdv_802);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_814 != 0;
    goto L306;

  L306:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_746;
    call {:si_unique_call 2020} sdv_806 := SerialGetDivisorFromBaud(vslice_dummy_var_746, 14400, junk);
    call {:si_unique_call 2021} sdv_817 := sdv_NT_ERROR(sdv_806);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_817 != 0;
    goto L314;

  L314:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_747;
    call {:si_unique_call 2022} sdv_812 := SerialGetDivisorFromBaud(vslice_dummy_var_747, 19200, junk);
    call {:si_unique_call 2023} sdv_835 := sdv_NT_ERROR(sdv_812);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_835 != 0;
    goto L322;

  L322:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_748;
    call {:si_unique_call 2024} sdv_803 := SerialGetDivisorFromBaud(vslice_dummy_var_748, 38400, junk);
    call {:si_unique_call 2025} sdv_805 := sdv_NT_ERROR(sdv_803);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} sdv_805 != 0;
    goto L330;

  L330:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_749;
    call {:si_unique_call 2026} sdv_848 := SerialGetDivisorFromBaud(vslice_dummy_var_749, 56000, junk);
    call {:si_unique_call 2027} sdv_811 := sdv_NT_ERROR(sdv_848);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_811 != 0;
    goto L338;

  L338:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_750;
    call {:si_unique_call 2028} sdv_846 := SerialGetDivisorFromBaud(vslice_dummy_var_750, 57600, junk);
    call {:si_unique_call 2029} sdv_826 := sdv_NT_ERROR(sdv_846);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} sdv_826 != 0;
    goto L346;

  L346:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_751;
    call {:si_unique_call 2030} sdv_843 := SerialGetDivisorFromBaud(vslice_dummy_var_751, 115200, junk);
    call {:si_unique_call 2031} sdv_849 := sdv_NT_ERROR(sdv_843);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_849 != 0;
    goto L354;

  L354:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_752;
    call {:si_unique_call 2032} sdv_824 := SerialGetDivisorFromBaud(vslice_dummy_var_752, 128000, junk);
    call {:si_unique_call 2033} sdv_839 := sdv_NT_ERROR(sdv_824);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} sdv_839 != 0;
    goto L362;

  L362:
    call {:si_unique_call 2034} SetDeviceIsOpened(pDevExt_21, 0, 0);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L139;

  anon106_Then:
    assume {:partition} sdv_839 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L362;

  anon105_Then:
    assume {:partition} sdv_849 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L354;

  anon104_Then:
    assume {:partition} sdv_826 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L346;

  anon103_Then:
    assume {:partition} sdv_811 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L338;

  anon102_Then:
    assume {:partition} sdv_805 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L330;

  anon101_Then:
    assume {:partition} sdv_835 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L322;

  anon100_Then:
    assume {:partition} sdv_817 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L314;

  anon99_Then:
    assume {:partition} sdv_814 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L306;

  anon98_Then:
    assume {:partition} sdv_837 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L298;

  anon97_Then:
    assume {:partition} sdv_808 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L290;

  anon96_Then:
    assume {:partition} sdv_821 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L282;

  anon95_Then:
    assume {:partition} sdv_844 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L274;

  anon94_Then:
    assume {:partition} sdv_813 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L266;

  anon93_Then:
    assume {:partition} sdv_818 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L258;

  anon92_Then:
    assume {:partition} sdv_816 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L250;

  anon91_Then:
    assume {:partition} sdv_831 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L242;

  anon90_Then:
    assume {:partition} sdv_809 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L234;

  anon89_Then:
    assume {:partition} sdv_840 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L226;

  anon88_Then:
    assume {:partition} sdv_815 == 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L218;

  anon86_Then:
    assume {:partition} sdv_827 == 0;
    Tmp_941 := strConst__li2bpl232;
    call {:si_unique_call 2035} vslice_dummy_var_542 := SerialDbgPrintEx(1, Tmp_941);
    status_28 := -1073741810;
    goto L139;

  anon85_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)] >= 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L177;

  anon107_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 14;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L174;

  anon108_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 8;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L174;

  anon109_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 4;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L174;

  anon113_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 1;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto L174;

  anon79_Then:
    goto L154;

  anon112_Then:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc Tmp_945;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    assume {:nonnull} Tmp_943 != 0;
    assume Tmp_943 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_753;
    havoc vslice_dummy_var_754;
    havoc vslice_dummy_var_755;
    call {:si_unique_call 2036} SerialLogError(vslice_dummy_var_753, PDevObj_24, vslice_dummy_var_754, Tmp_943, 0, 0, 0, 8, 0, -1073348598, Tmp_945, vslice_dummy_var_755, 0, 0);
    Tmp_939 := strConst__li2bpl231;
    call {:si_unique_call 2037} vslice_dummy_var_543 := SerialDbgPrintEx(1, Tmp_939);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc vslice_dummy_var_756;
    call {:si_unique_call 2038} MmUnmapIoSpace(0, vslice_dummy_var_756);
    goto L131;

  L131:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] := 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_21)] := 0;
    status_28 := -1073741709;
    goto L139;

  anon80_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] == 0;
    goto L131;

  anon111_Then:
    goto L113;

  anon110_Then:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc Tmp_942;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_24 != 0;
    assume PDevObj_24 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc vslice_dummy_var_757;
    havoc vslice_dummy_var_758;
    havoc vslice_dummy_var_759;
    havoc vslice_dummy_var_760;
    call {:si_unique_call 2039} SerialLogError(vslice_dummy_var_757, vslice_dummy_var_758, vslice_dummy_var_759, Tmp_953, 0, 0, 0, 7, 0, -1073348598, Tmp_942, vslice_dummy_var_760, 0, 0);
    Tmp_955 := strConst__li2bpl234;
    call {:si_unique_call 2040} vslice_dummy_var_544 := SerialDbgPrintEx(1, Tmp_955);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_21)] := 0;
    status_28 := -1073741709;
    goto L139;

  anon78_Then:
    call {:si_unique_call 2041} sdv_834 := ExAllocatePoolWithTag(512, 16, -666022077);
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_21 != 0;
    assume pDevExt_21 > 0;
    havoc Tmp_950;
    assume {:nonnull} Tmp_950 != 0;
    assume Tmp_950 > 0;
    call {:si_unique_call 2042} InitializeListHead(SharerList__SERIAL_CISR_SW(Tmp_950));
    allocedISRSw := 1;
    goto L36;

  anon114_Then:
    Tmp_936 := -1073741670;
    goto L1;
}



procedure {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_958: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_958: int)
{
  var {:pointer} Tmp_959: int;
  var {:pointer} Tmp_960: int;
  var {:pointer} Tmp_961: int;
  var {:pointer} Tmp_962: int;
  var {:pointer} Tmp_963: int;
  var {:pointer} Extension_33: int;
  var {:scalar} sdv_859: int;
  var {:scalar} status_29: int;
  var {:pointer} Tmp_965: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_545: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;
  var vslice_dummy_var_550: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 2043} Tmp_959 := __HAVOC_malloc(84);
    call {:si_unique_call 2044} Tmp_960 := __HAVOC_malloc(72);
    call {:si_unique_call 2045} Tmp_961 := __HAVOC_malloc(88);
    call {:si_unique_call 2046} Tmp_962 := __HAVOC_malloc(84);
    call {:si_unique_call 2047} Tmp_963 := __HAVOC_malloc(84);
    call {:si_unique_call 2048} Tmp_965 := __HAVOC_malloc(96);
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc Extension_33;
    call {:si_unique_call 2049} sdv_do_paged_code_check();
    Tmp_965 := strConst__li2bpl40;
    call {:si_unique_call 2050} vslice_dummy_var_545 := SerialDbgPrintEx(9, Tmp_965);
    Tmp_961 := strConst__li2bpl236;
    call {:si_unique_call 2051} vslice_dummy_var_546 := SerialDbgPrintEx(2, Tmp_961);
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    call {:si_unique_call 2052} status_29 := SerialIRPPrologue(Irp_17, Extension_33);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_29 != 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_17))] := status_29;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_29 >= 0;
    goto L29;

  L29:
    Tmp_963 := strConst__li2bpl237;
    call {:si_unique_call 2053} vslice_dummy_var_547 := SerialDbgPrintEx(2, Tmp_963);
    Tmp_958 := status_29;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} 0 > status_29;
    Tmp_960 := strConst__li2bpl2;
    call {:si_unique_call 2054} vslice_dummy_var_548 := SerialDbgPrintEx(9, Tmp_960);
    call {:si_unique_call 2055} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2056} SerialIRPEpilogue(Extension_33);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} status_29 == 0;
    call {:si_unique_call 2057} sdv_859 := SerialCompleteIfError(DeviceObject_17, Irp_17);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_859 != 0;
    Tmp_959 := strConst__li2bpl238;
    call {:si_unique_call 2058} vslice_dummy_var_549 := SerialDbgPrintEx(2, Tmp_959);
    Tmp_958 := -1073741536;
    goto L1;

  anon14_Then:
    assume {:partition} sdv_859 == 0;
    assume {:nonnull} Extension_33 != 0;
    assume Extension_33 > 0;
    call {:si_unique_call 2059} status_29 := SerialStartOrQueue(Extension_33, Irp_17, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_33), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_33), li2bplFunctionConstant1125);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    Tmp_962 := strConst__li2bpl239;
    call {:si_unique_call 2060} vslice_dummy_var_550 := SerialDbgPrintEx(2, Tmp_962);
    Tmp_958 := status_29;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_551: int;

  anon0:
    call {:si_unique_call 2061} vslice_dummy_var_551 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_34: int) returns (Tmp_968: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_34: int) returns (Tmp_968: int)
{
  var {:pointer} NewIrp_4: int;
  var {:pointer} Tmp_970: int;
  var {:pointer} Extension_34: int;
  var vslice_dummy_var_552: int;

  anon0:
    call {:si_unique_call 2062} NewIrp_4 := __HAVOC_malloc(4);
    Extension_34 := actual_Extension_34;
    call {:si_unique_call 2063} sdv_do_paged_code_check();
    assume {:nonnull} Extension_34 != 0;
    assume Extension_34 > 0;
    havoc Tmp_970;
    assume {:nonnull} Tmp_970 != 0;
    assume Tmp_970 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_970))] := 0;
    assume {:nonnull} Extension_34 != 0;
    assume Extension_34 > 0;
    call {:si_unique_call 2064} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_34), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_34), NewIrp_4, 1, Extension_34);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_4 != 0;
    assume NewIrp_4 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 2065} vslice_dummy_var_552 := SerialStartWrite#1(Extension_34);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    Tmp_968 := 0;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    goto L12;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_18: int, actual_Irp_18: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_18: int, actual_Irp_18: int)
{
  var {:pointer} Extension_35: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_553: int;

  anon0:
    call {:si_unique_call 2066} vslice_dummy_var_553 := __HAVOC_malloc(4);
    DeviceObject_18 := actual_DeviceObject_18;
    Irp_18 := actual_Irp_18;
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc Extension_35;
    assume {:nonnull} Extension_35 != 0;
    assume Extension_35 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    call {:si_unique_call 2067} SerialTryToCompleteCurrent#1(Extension_35, li2bplFunctionConstant1089, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_18)], -1073741536, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_35), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_35), 0, li2bplFunctionConstant1088, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_554: int;

  anon0:
    call {:si_unique_call 2068} vslice_dummy_var_554 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_36: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_36: int)
{
  var {:pointer} Tmp_975: int;
  var {:pointer} s_p_e_c_i_a_l_25: int;
  var {:pointer} Tmp_976: int;
  var {:scalar} TotalTime_1: int;
  var {:pointer} Tmp_977: int;
  var {:pointer} sdv_863: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} sdv_864: int;
  var {:pointer} sdv_866: int;
  var {:scalar} OldIrql_13: int;
  var {:scalar} s_p_e_c_i_a_l_26: int;
  var {:pointer} Tmp_978: int;
  var {:pointer} s_p_e_c_i_a_l_27: int;
  var {:pointer} OldIrp: int;
  var {:pointer} Tmp_979: int;
  var {:scalar} s_p_e_c_i_a_l_28: int;
  var {:pointer} Tmp_980: int;
  var {:scalar} Timeouts_1: int;
  var {:pointer} Extension_36: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_558: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_761: int;
  var vslice_dummy_var_762: int;
  var vslice_dummy_var_763: int;
  var vslice_dummy_var_764: int;

  anon0:
    call {:si_unique_call 2069} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2070} Timeouts_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2071} vslice_dummy_var_555 := __HAVOC_malloc(4);
    Extension_36 := actual_Extension_36;
    call {:si_unique_call 2072} Tmp_975 := __HAVOC_malloc(108);
    call {:si_unique_call 2073} Tmp_976 := __HAVOC_malloc(92);
    call {:si_unique_call 2074} Tmp_977 := __HAVOC_malloc(72);
    Tmp_975 := strConst__li2bpl240;
    call {:si_unique_call 2075} vslice_dummy_var_559 := SerialDbgPrintEx(2, Tmp_975);
    UseATimer_1 := 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc Tmp_980;
    assume {:nonnull} Tmp_980 != 0;
    assume Tmp_980 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_980))] := 259;
    call {:si_unique_call 2076} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2077} Tmp_978 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    Mem_T.INT4[Tmp_978] := OldIrql_13;
    call {:si_unique_call 2078} sdv_KeAcquireSpinLock(0, Tmp_978);
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    OldIrql_13 := Mem_T.INT4[Tmp_978];
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2079} sdv_KeReleaseSpinLock(0, OldIrql_13);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L24;

  L24:
    UseATimer_1 := 1;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L28;

  L28:
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc vslice_dummy_var_761;
    call {:si_unique_call 2080} sdv_866 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_761);
    assume {:nonnull} sdv_866 != 0;
    assume sdv_866 > 0;
    call {:si_unique_call 2081} Tmp_978 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    Mem_T.INT4[Tmp_978] := OldIrql_13;
    call {:si_unique_call 2082} IoAcquireCancelSpinLock(Tmp_978);
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    OldIrql_13 := Mem_T.INT4[Tmp_978];
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc Tmp_979;
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc OldIrp;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    call {:si_unique_call 2083} IoReleaseCancelSpinLock(OldIrql_13);
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(OldIrp))] := -1073741536;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Tmp_977 := strConst__li2bpl2;
    call {:si_unique_call 2084} vslice_dummy_var_560 := SerialDbgPrintEx(9, Tmp_977);
    call {:si_unique_call 2085} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2086} SerialIRPEpilogue(Extension_36);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L56;

  L56:
    Tmp_976 := strConst__li2bpl241;
    call {:si_unique_call 2087} vslice_dummy_var_561 := SerialDbgPrintEx(2, Tmp_976);
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc vslice_dummy_var_762;
    call {:si_unique_call 2088} vslice_dummy_var_556 := sdv_IoSetCancelRoutine(vslice_dummy_var_762, li2bplFunctionConstant1086);
    s_p_e_c_i_a_l_26 := 2;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc vslice_dummy_var_763;
    call {:si_unique_call 2089} sdv_863 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_763);
    assume {:nonnull} sdv_863 != 0;
    assume sdv_863 > 0;
    s_p_e_c_i_a_l_25 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_863)));
    assume {:nonnull} s_p_e_c_i_a_l_25 != 0;
    assume s_p_e_c_i_a_l_25 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_25] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_25], s_p_e_c_i_a_l_26);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    call {:si_unique_call 2090} vslice_dummy_var_558 := SerialSetTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_36), TotalTime_1, TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_36), Extension_36);
    s_p_e_c_i_a_l_28 := 4;
    assume {:nonnull} Extension_36 != 0;
    assume Extension_36 > 0;
    havoc vslice_dummy_var_764;
    call {:si_unique_call 2091} sdv_864 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_764);
    assume {:nonnull} sdv_864 != 0;
    assume sdv_864 > 0;
    s_p_e_c_i_a_l_27 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_864)));
    assume {:nonnull} s_p_e_c_i_a_l_27 != 0;
    assume s_p_e_c_i_a_l_27 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_27] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_27], s_p_e_c_i_a_l_28);
    goto L68;

  L68:
    call {:si_unique_call 2092} vslice_dummy_var_557 := KeSynchronizeExecution(0, li2bplFunctionConstant1087, 0);
    call {:si_unique_call 2093} IoReleaseCancelSpinLock(OldIrql_13);
    goto L56;

  anon15_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L68;

  anon11_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L28;

  anon12_Then:
    goto L24;
}



procedure {:origName "SerialCompleteImmediate"} SerialCompleteImmediate(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteImmediate"} SerialCompleteImmediate(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int)
{
  var {:scalar} OldIrql_14: int;
  var {:pointer} Tmp_983: int;
  var {:pointer} Extension_37: int;
  var {:pointer} Tmp_984: int;
  var {:pointer} Tmp_985: int;
  var {:pointer} Dpc_8: int;
  var {:pointer} DeferredContext_6: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;

  anon0:
    call {:si_unique_call 2094} vslice_dummy_var_562 := __HAVOC_malloc(4);
    Dpc_8 := actual_Dpc_8;
    DeferredContext_6 := actual_DeferredContext_6;
    call {:si_unique_call 2095} Tmp_984 := __HAVOC_malloc(104);
    call {:si_unique_call 2096} Tmp_985 := __HAVOC_malloc(120);
    Extension_37 := DeferredContext_6;
    Tmp_985 := strConst__li2bpl243;
    call {:si_unique_call 2097} vslice_dummy_var_563 := SerialDbgPrintEx(2, Tmp_985);
    call {:si_unique_call 2098} Tmp_983 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    Mem_T.INT4[Tmp_983] := OldIrql_14;
    call {:si_unique_call 2099} IoAcquireCancelSpinLock(Tmp_983);
    assume {:nonnull} Tmp_983 != 0;
    assume Tmp_983 > 0;
    OldIrql_14 := Mem_T.INT4[Tmp_983];
    assume {:nonnull} Extension_37 != 0;
    assume Extension_37 > 0;
    call {:si_unique_call 2100} SerialTryToCompleteCurrent#1(Extension_37, 0, OldIrql_14, 0, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_37), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_37), 0, li2bplFunctionConstant1088, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2101} SerialDpcEpilogue(Extension_37, Dpc_8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_984 := strConst__li2bpl242;
    call {:si_unique_call 2102} vslice_dummy_var_564 := SerialDbgPrintEx(2, Tmp_984);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_38: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp_7: int, actual_QueueToProcess_4: int, actual_NewIrp_5: int, actual_CompleteCurrent_4: int, actual_Extension_38: int)
{
  var {:pointer} Tmp_986: int;
  var {:pointer} Tmp_987: int;
  var {:scalar} OldIrql_15: int;
  var {:pointer} OldIrp_1: int;
  var {:pointer} CurrentOpIrp_7: int;
  var {:pointer} NewIrp_5: int;
  var {:pointer} Extension_38: int;
  var vslice_dummy_var_565: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;

  anon0:
    call {:si_unique_call 2103} vslice_dummy_var_565 := __HAVOC_malloc(4);
    CurrentOpIrp_7 := actual_CurrentOpIrp_7;
    NewIrp_5 := actual_NewIrp_5;
    Extension_38 := actual_Extension_38;
    call {:si_unique_call 2104} Tmp_987 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc OldIrp_1;
    call {:si_unique_call 2105} Tmp_986 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    Mem_T.INT4[Tmp_986] := OldIrql_15;
    call {:si_unique_call 2106} IoAcquireCancelSpinLock(Tmp_986);
    assume {:nonnull} Tmp_986 != 0;
    assume Tmp_986 > 0;
    OldIrql_15 := Mem_T.INT4[Tmp_986];
    assume {:nonnull} Extension_38 != 0;
    assume Extension_38 > 0;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    assume {:nonnull} NewIrp_5 != 0;
    assume NewIrp_5 > 0;
    call {:si_unique_call 2107} vslice_dummy_var_566 := KeSynchronizeExecution(0, li2bplFunctionConstant574, 0);
    call {:si_unique_call 2108} IoReleaseCancelSpinLock(OldIrql_15);
    Tmp_987 := strConst__li2bpl2;
    call {:si_unique_call 2109} vslice_dummy_var_567 := SerialDbgPrintEx(9, Tmp_987);
    call {:si_unique_call 2110} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2111} SerialIRPEpilogue(Extension_38);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_568: int;

  anon0:
    call {:si_unique_call 2112} vslice_dummy_var_568 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_991: int);
  free ensures {:va_keep} Tmp_991 == actual_Address_2;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_2: int, actual_FieldOffset: int) returns (Tmp_991: int)
{
  var {:pointer} record: int;
  var {:pointer} Address_2: int;

  anon0:
    Address_2 := actual_Address_2;
    record := Address_2;
    Tmp_991 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_569: int;

  anon0:
    call {:si_unique_call 2113} vslice_dummy_var_569 := __HAVOC_malloc(4);
    p := actual_p;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := sdv_irql_previous;
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_570: int;

  anon0:
    call {:si_unique_call 2114} vslice_dummy_var_570 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_9: int) returns (Tmp_997: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_997 == 1 || Tmp_997 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Dpc_9: int) returns (Tmp_997: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 2115} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_997 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_997 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_999: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_999: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_999 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_999 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_999 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_10: int, actual_DeferredRoutine: int, actual_DeferredContext_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_10: int, actual_DeferredRoutine: int, actual_DeferredContext_7: int)
{
  var {:pointer} Dpc_10: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_571: int;

  anon0:
    call {:si_unique_call 2116} vslice_dummy_var_571 := __HAVOC_malloc(4);
    Dpc_10 := actual_Dpc_10;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_10 != 0;
    assume Dpc_10 > 0;
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_572: int;

  anon0:
    call {:si_unique_call 2117} vslice_dummy_var_572 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1005: int);
  modifies Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_1005: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    r := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)];
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)] := CancelRoutine;
    Tmp_1005 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_573: int;

  anon0:
    call {:si_unique_call 2118} vslice_dummy_var_573 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_574: int;

  anon0:
    call {:si_unique_call 2119} vslice_dummy_var_574 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_575: int;

  anon0:
    call {:si_unique_call 2120} vslice_dummy_var_575 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_1013: int);
  free ensures {:va_keep} Tmp_1013 == 1 || Tmp_1013 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_1013: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1013 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1013 := 0;
    goto L1;
}



procedure {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines(actual_ki: int, actual_pv1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines(actual_ki: int, actual_pv1: int)
{
  var {:pointer} ki: int;
  var {:pointer} pv1: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;

  anon0:
    call {:si_unique_call 2121} vslice_dummy_var_576 := __HAVOC_malloc(4);
    ki := actual_ki;
    pv1 := actual_pv1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 4;
    call {:si_unique_call 2122} vslice_dummy_var_577 := SerialCIsrSw(ki, pv1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_578: int;

  anon0:
    call {:si_unique_call 2123} vslice_dummy_var_578 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := -1073741637;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_11: int) returns (Tmp_1019: int);
  free ensures {:va_keep} Tmp_1019 == 1 || Tmp_1019 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_11: int) returns (Tmp_1019: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1019 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1019 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_1021: int);
  free ensures {:va_keep} Tmp_1021 == 0 || Tmp_1021 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_1021: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1021 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1021 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;

  anon0:
    call {:si_unique_call 2124} vslice_dummy_var_579 := __HAVOC_malloc(4);
    call {:si_unique_call 2125} sdv_stub_driver_init();
    call {:si_unique_call 2126} vslice_dummy_var_580 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_1025: int);
  free ensures {:va_keep} Tmp_1025 == 0 || Tmp_1025 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_1025: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1025 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1025 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_1027: int);
  free ensures {:va_keep} Tmp_1027 == 0 || Tmp_1027 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_1027: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1027 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1027 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_1029: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_1029: int)
{
  var {:pointer} sdv_888: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2127} sdv_888 := __HAVOC_malloc(1);
    Tmp_1029 := sdv_888;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1029 := 0;
    goto L1;
}



procedure {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_1031: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag: int) returns (Tmp_1031: int)
{
  var {:pointer} sdv_890: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2128} sdv_890 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_1031 := sdv_890;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1031 := 0;
    goto L1;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_19: int, actual_Irp_19: int) returns (Tmp_1033: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_19: int, actual_Irp_19: int) returns (Tmp_1033: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_30: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;
  var vslice_dummy_var_765: int;
  var vslice_dummy_var_766: int;
  var vslice_dummy_var_767: int;
  var vslice_dummy_var_768: int;

  anon0:
    call {:si_unique_call 2129} completion := __HAVOC_malloc(4);
    Irp_19 := actual_Irp_19;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_30 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := 259;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_1033 := status_30;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_765;
    call {:si_unique_call 2130} vslice_dummy_var_581 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_765, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := -1073741823;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_766;
    call {:si_unique_call 2131} vslice_dummy_var_584 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_766, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := -1073741536;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_767;
    call {:si_unique_call 2132} vslice_dummy_var_582 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_767, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_19;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_768;
    call {:si_unique_call 2133} vslice_dummy_var_583 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_19, vslice_dummy_var_768, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_19;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_19;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_19;
    goto L45;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_20: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_1035: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_1035 == 0 || Tmp_1035 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_20: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_1035: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 2134} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_1035 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 2135} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 2136} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 2137} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_21: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_21: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 2138} State := __HAVOC_malloc(8);
    call {:si_unique_call 2139} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 2140} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_585: int;

  anon0:
    call {:si_unique_call 2141} vslice_dummy_var_585 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := new;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    Mem_T.INT4[p_1] := sdv_irql_previous;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_1040: int);
  free ensures {:va_keep} Tmp_1040 == 1 || Tmp_1040 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_3: int) returns (Tmp_1040: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1040 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1040 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_586: int;

  anon0:
    call {:si_unique_call 2142} vslice_dummy_var_586 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_11: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_11: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_11: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_587: int;

  anon0:
    call {:si_unique_call 2143} vslice_dummy_var_587 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_11 := actual_Context_11;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 2144} irpSp_4 := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_588: int;

  anon0:
    call {:si_unique_call 2145} vslice_dummy_var_588 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 1;
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_1048: int);
  free ensures {:va_keep} Tmp_1048 == 1 || Tmp_1048 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry_1: int) returns (Tmp_1048: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1048 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1048 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_1050: int);
  free ensures {:va_keep} Tmp_1050 == 0 || Tmp_1050 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_1050: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1050 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1050 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_20: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_20: int)
{
  var vslice_dummy_var_589: int;

  anon0:
    call {:si_unique_call 2146} vslice_dummy_var_589 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_1054: int);
  free ensures {:va_keep} Tmp_1054 == 258 || Tmp_1054 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_1054: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1054 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1054 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_1054 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_22: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_22: int)
{
  var vslice_dummy_var_590: int;

  anon0:
    call {:si_unique_call 2147} vslice_dummy_var_590 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_1058: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_1058: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;
  var {:scalar} Wait: int;

  anon0:
    Event := actual_Event;
    Wait := actual_Wait;
    call {:si_unique_call 2148} SLIC_KeSetEvent_entry(strConst__li2bpl244, Wait);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_1058 := OldState;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_1062: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_1062: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_1062;
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_591: int;

  anon0:
    call {:si_unique_call 2149} vslice_dummy_var_591 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int)
{
  var {:pointer} kdpc: int;
  var {:pointer} pDpcContext: int;
  var vslice_dummy_var_592: int;

  anon0:
    call {:si_unique_call 2150} vslice_dummy_var_592 := __HAVOC_malloc(4);
    kdpc := actual_kdpc;
    pDpcContext := actual_pDpcContext;
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2151} SerialCommError(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L4;

  L4:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2152} SerialCompleteImmediate(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L20;

  L20:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2153} SerialCompleteRead(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L36;

  L36:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2154} SerialCompleteWait(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L52;

  L52:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2155} SerialCompleteWrite(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L68;

  L68:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2156} SerialCompleteXoff(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L84;

  L84:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2157} SerialSetPendingDpcEvent(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L100;

  L100:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2158} SerialStartTimerLowerRTS(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L116;

  L116:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2159} SerialUnlockPages(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    goto L1;

  anon70_Then:
    goto L1;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L116;

  anon68_Then:
    goto L116;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    goto L100;

  anon66_Then:
    goto L100;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L84;

  anon64_Then:
    goto L84;

  anon77_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    goto L68;

  anon62_Then:
    goto L68;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L52;

  anon60_Then:
    goto L52;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    goto L36;

  anon58_Then:
    goto L36;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L20;

  anon56_Then:
    goto L20;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    goto L4;

  anon55_Then:
    goto L4;
}



procedure {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_power_completion_begin"} {:osmodel} sdv_stub_power_completion_begin()
{
  var vslice_dummy_var_593: int;

  anon0:
    call {:si_unique_call 2160} vslice_dummy_var_593 := __HAVOC_malloc(4);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    goto L1;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_1070: int);
  free ensures {:va_keep} Tmp_1070 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_1070: int)
{

  anon0:
    Tmp_1070 := sdv_irql_current;
    return;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_1074: int, dup_assertVar: bool);
  modifies alloc, yogi_error, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_1074: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_1075: int;
  var {:scalar} Tmp_1077: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var SerialGlobals__Loc: int;
  var SerialPhysicalZero__Loc: int;
  var SerialPhysicalZero_1__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var driverDefaults__Loc: int;
  var SerialPortNameGuid__Loc: int;
  var SerailPortPerfGuid__Loc: int;
  var SerialPortPropertiesGuid__Loc: int;
  var SerialPortHWGuid__Loc: int;
  var SerialPortCommGuid__Loc: int;
  var SerialPhysicalZero_2__Loc: int;
  var SerialPhysicalZero_3__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var vslice_dummy_var_769: int;
  var vslice_dummy_var_770: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 2161} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 2162} SerialGlobals__Loc := __HAVOC_malloc_or_null(28);
    assume SerialGlobals__Loc == SerialGlobals;
    assume SerialGlobals != 0;
    call {:si_unique_call 2163} SerialPhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero__Loc == SerialPhysicalZero;
    assume SerialPhysicalZero != 0;
    call {:si_unique_call 2164} SerialPhysicalZero_1__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_1__Loc == SerialPhysicalZero_1;
    assume SerialPhysicalZero_1 != 0;
    call {:si_unique_call 2165} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 2166} driverDefaults__Loc := __HAVOC_malloc_or_null(88);
    assume driverDefaults__Loc == driverDefaults;
    assume driverDefaults != 0;
    call {:si_unique_call 2167} SerialPortNameGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortNameGuid__Loc == SerialPortNameGuid;
    assume SerialPortNameGuid != 0;
    call {:si_unique_call 2168} SerailPortPerfGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerailPortPerfGuid__Loc == SerailPortPerfGuid;
    assume SerailPortPerfGuid != 0;
    call {:si_unique_call 2169} SerialPortPropertiesGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortPropertiesGuid__Loc == SerialPortPropertiesGuid;
    assume SerialPortPropertiesGuid != 0;
    call {:si_unique_call 2170} SerialPortHWGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortHWGuid__Loc == SerialPortHWGuid;
    assume SerialPortHWGuid != 0;
    call {:si_unique_call 2171} SerialPortCommGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortCommGuid__Loc == SerialPortCommGuid;
    assume SerialPortCommGuid != 0;
    call {:si_unique_call 2172} SerialPhysicalZero_2__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_2__Loc == SerialPhysicalZero_2;
    assume SerialPhysicalZero_2 != 0;
    call {:si_unique_call 2173} SerialPhysicalZero_3__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_3__Loc == SerialPhysicalZero_3;
    assume SerialPhysicalZero_3 != 0;
    call {:si_unique_call 2174} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 2175} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 2176} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2177} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 2178} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2179} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2180} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 2181} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 2182} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 2183} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 2184} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 2185} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2186} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 2187} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 2188} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 2189} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 2190} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 2191} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 2192} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 2193} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 2194} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 2195} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 2196} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 2197} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 2198} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 2199} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 2200} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 2201} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 2202} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 2203} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 2204} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 2205} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 2206} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 2207} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 2208} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 2209} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 2210} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 2211} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 2212} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 2213} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 2214} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdComPortInUse == boogieTmp;
    call {:si_unique_call 2215} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 2216} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2217} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 2218} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 2219} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 2220} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 2221} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 2222} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 2223} vslice_dummy_var_769 := __HAVOC_malloc(60);
    call {:si_unique_call 2224} vslice_dummy_var_770 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 2225} corralExtraInit();
    call {:si_unique_call 2226} corralExplainErrorInit();
    call {:si_unique_call 2227} _sdv_init24();
    call {:si_unique_call 2228} _sdv_init22();
    call {:si_unique_call 2229} _sdv_init18();
    call {:si_unique_call 2230} _sdv_init19();
    call {:si_unique_call 2231} _sdv_init17();
    call {:si_unique_call 2232} _sdv_init1();
    call {:si_unique_call 2233} _sdv_init4();
    call {:si_unique_call 2234} _sdv_init5();
    call {:si_unique_call 2235} _sdv_init3();
    call {:si_unique_call 2236} _sdv_init16();
    call {:si_unique_call 2237} _sdv_init14();
    call {:si_unique_call 2238} _sdv_init21();
    call {:si_unique_call 2239} _sdv_init6();
    call {:si_unique_call 2240} _sdv_init15();
    call {:si_unique_call 2241} _sdv_init10();
    call {:si_unique_call 2242} _sdv_init11();
    call {:si_unique_call 2243} _sdv_init9();
    call {:si_unique_call 2244} _sdv_init12();
    call {:si_unique_call 2245} _sdv_init13();
    call {:si_unique_call 2246} _sdv_init7();
    call {:si_unique_call 2247} _sdv_init8();
    call {:si_unique_call 2248} _sdv_init2();
    call {:si_unique_call 2249} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_1077 := 0;
    goto L47;

  L47:
    assume Tmp_1077 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_1075 := 0;
    goto L51;

  L51:
    assume Tmp_1075 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 2250} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L45;

  L45:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L45;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_1075 := 1;
    goto L51;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_1077 := 1;
    goto L47;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_1078: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_1078: int)
{
  var {:pointer} sdv_906: int;

  anon0:
    call {:si_unique_call 2251} sdv_906 := __HAVOC_malloc(1);
    Tmp_1078 := sdv_906;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_594: int;

  anon0:
    call {:si_unique_call 2252} vslice_dummy_var_594 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_22: int) returns (Tmp_1082: int);
  free ensures {:va_keep} Tmp_1082 == 0 || Tmp_1082 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_22: int) returns (Tmp_1082: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1082 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1082 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1084: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_1084: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_1084 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_595: int;

  anon0:
    call {:si_unique_call 2253} vslice_dummy_var_595 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_596: int;

  anon0:
    call {:si_unique_call 2254} vslice_dummy_var_596 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_597: int;

  anon0:
    call {:si_unique_call 2255} vslice_dummy_var_597 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_598: int;

  anon0:
    call {:si_unique_call 2256} vslice_dummy_var_598 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_599: int;

  anon0:
    call {:si_unique_call 2257} vslice_dummy_var_599 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_NewIrql;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_600: int;

  anon0:
    call {:si_unique_call 2258} vslice_dummy_var_600 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    sdv_irql_current := NewIrql;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_1: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_14: int) returns (Tmp_1100: int);
  free ensures {:va_keep} Tmp_1100 == 0 || Tmp_1100 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType_1: int, actual_BusNumber_1: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_14: int) returns (Tmp_1100: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1100 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1100 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_601: int;

  anon0:
    call {:si_unique_call 2259} vslice_dummy_var_601 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_602: int;

  anon0:
    call {:si_unique_call 2260} vslice_dummy_var_602 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_2: int)
{
  var vslice_dummy_var_603: int;

  anon0:
    call {:si_unique_call 2261} vslice_dummy_var_603 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_1108: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_1108: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor: int;
  var {:scalar} sdv_917: int;
  var {:scalar} Tmp_1110: int;
  var {:scalar} status_32: int;
  var {:scalar} Tmp_1111: int;
  var {:pointer} po: int;
  var {:pointer} pirp_12: int;

  anon0:
    po := actual_po;
    pirp_12 := actual_pirp_12;
    status_32 := 0;
    minor := sdv_917;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 2262} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_12)] := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2263} sdv_stub_dispatch_begin();
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    Tmp_1111 := 0;
    goto L220;

  L220:
    assume Tmp_1111 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L66;

  L66:
    call {:si_unique_call 2264} status_32 := SerialPnpDispatch(po, pirp_12);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 2265} sdv_stub_dispatch_end(status_32, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_1108 := status_32;
    goto LM2;

  LM2:
    return;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    goto L66;

  anon73_Then:
    Tmp_1111 := 1;
    goto L220;

  anon71_Then:
    goto L61;

  anon101_Then:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_1110 := 0;
    goto L226;

  L226:
    assume Tmp_1110 != 0;
    goto L60;

  anon70_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_1110 := 1;
    goto L226;

  anon74_Then:
    call {:si_unique_call 2266} status_32 := sdv_DoNothing();
    goto L72;

  anon75_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2267} status_32 := SerialSystemControlDispatch(po, pirp_12);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon100_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2268} sdv_SetPowerIrpMinorFunction(pirp_12);
    call {:si_unique_call 2269} status_32 := SerialPowerDispatch(po, pirp_12);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2270} status_32 := SerialCleanup(po, pirp_12);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon98_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    call {:si_unique_call 2271} status_32 := sdv_DoNothing();
    goto L72;

  anon79_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2272} status_32 := sdv_DoNothing();
    goto L72;

  anon80_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2273} status_32 := SerialInternalIoControl(po, pirp_12);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon81_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2274} status_32 := SerialIoControl(po, pirp_12);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon82_Then:
    call {:si_unique_call 2275} status_32 := sdv_DoNothing();
    goto L72;

  anon83_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2276} status_32 := SerialFlush(po, pirp_12);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2277} status_32 := SerialSetInformationFile(po, pirp_12);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon85_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2278} status_32 := SerialQueryInformationFile(po, pirp_12);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2279} status_32 := SerialWrite(po, pirp_12);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon87_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2280} status_32 := SerialRead(po, pirp_12);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2281} status_32 := SerialClose(po, pirp_12);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 2282} status_32 := SerialCreateOpen(po, pirp_12);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_1112: int);
  free ensures {:va_keep} Tmp_1112 == -1073741823 || Tmp_1112 == -1073741808 || Tmp_1112 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_1112: int)
{
  var {:scalar} Tmp_1114: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1112 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_1112 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1114 := 0;
    goto L22;

  L22:
    assume Tmp_1114 != 0;
    Tmp_1112 := 0;
    goto L1;

  anon8_Then:
    Tmp_1114 := 1;
    goto L22;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int)
{
  var {:scalar} new_2: int;
  var vslice_dummy_var_604: int;

  anon0:
    call {:si_unique_call 2283} vslice_dummy_var_604 := __HAVOC_malloc(4);
    new_2 := actual_new_2;
    sdv_irql_current := new_2;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_605: int;

  anon0:
    call {:si_unique_call 2284} vslice_dummy_var_605 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_606: int;

  anon0:
    call {:si_unique_call 2285} vslice_dummy_var_606 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_1121: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1121 == -1073741811 || Tmp_1121 == -1073741823 || Tmp_1121 == 0 || Tmp_1121 == 5 || Tmp_1121 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_1121: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_929: int;
  var {:scalar} Length_3: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_3 := actual_Length_3;
    ResultLength := actual_ResultLength;
    L := sdv_929;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_1121 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_1121 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_3 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1121 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_3 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_3;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1121 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_3 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_1121 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_3;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_1123: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_3: int, actual_CacheType: int) returns (Tmp_1123: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 2286} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_1123 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_607: int;

  anon0:
    call {:si_unique_call 2287} vslice_dummy_var_607 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1127: int);
  free ensures {:va_keep} Tmp_1127 == 1 || Tmp_1127 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_1127: int)
{
  var {:scalar} b_1: int;

  anon0:
    call {:si_unique_call 2288} b_1 := OneOfTwoBOOLEAN();
    Tmp_1127 := b_1;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_608: int;

  anon0:
    call {:si_unique_call 2289} vslice_dummy_var_608 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_609: int;

  anon0:
    call {:si_unique_call 2290} vslice_dummy_var_609 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1135: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_1135: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_1135 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "_sdv_init22"} {:osmodel} _sdv_init22();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init22"} {:osmodel} _sdv_init22()
{
  var vslice_dummy_var_610: int;

  anon0:
    call {:si_unique_call 2291} vslice_dummy_var_610 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant1246;
    assume sdv_io_dpc == li2bplFunctionConstant1249;
    assume sdv_p_devobj_top == sdv_devobj_top;
    Mem_T.INT4[sdv_MmMapIoSpace_int] := 0;
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_611: int;

  anon0:
    call {:si_unique_call 2292} vslice_dummy_var_611 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1141: int);
  free ensures {:va_keep} Tmp_1141 == 1 || Tmp_1141 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead_2: int) returns (Tmp_1141: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1141 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1141 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_23: int) returns (Tmp_1143: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_23: int) returns (Tmp_1143: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_33: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_614: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_771: int;
  var vslice_dummy_var_772: int;
  var vslice_dummy_var_773: int;
  var vslice_dummy_var_774: int;

  anon0:
    call {:si_unique_call 2293} completion_1 := __HAVOC_malloc(4);
    Irp_23 := actual_Irp_23;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_33 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 259;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_1143 := status_33;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_771;
    call {:si_unique_call 2294} vslice_dummy_var_612 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_771, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741823;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_772;
    call {:si_unique_call 2295} vslice_dummy_var_615 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_772, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741536;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_773;
    call {:si_unique_call 2296} vslice_dummy_var_613 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_773, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_774;
    call {:si_unique_call 2297} vslice_dummy_var_614 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_774, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L45;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject_2: int)
{
  var vslice_dummy_var_616: int;

  anon0:
    call {:si_unique_call 2298} vslice_dummy_var_616 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_24: int, actual_Context_15: int, actual_Completion: int) returns (Tmp_1147: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_24: int, actual_Context_15: int, actual_Completion: int) returns (Tmp_1147: int)
{
  var {:scalar} Status_3: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_24: int;
  var {:pointer} Context_15: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_24 := actual_Irp_24;
    Context_15 := actual_Context_15;
    Completion := actual_Completion;
    call {:si_unique_call 2299} irpsp := sdv_IoGetNextIrpStackLocation(Irp_24);
    Status_3 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2300} Status_3 := SerialFinishSystemPower(DeviceObject_26, Irp_24, Context_15);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2301} Status_3 := SerialSetPowerD0Completion(DeviceObject_26, Irp_24, Context_15);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2302} Status_3 := SerialSyncCompletion(DeviceObject_26, Irp_24, Context_15);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 2303} Status_3 := SerialWaitWakeCompletion(DeviceObject_26, Irp_24, Context_15);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    Tmp_1147 := Status_3;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    goto L62;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    goto L45;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L28;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    goto L11;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_1: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_617: int;

  anon0:
    call {:si_unique_call 2304} vslice_dummy_var_617 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_1 := actual_Type_1;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int)
{
  var vslice_dummy_var_618: int;

  anon0:
    call {:si_unique_call 2305} vslice_dummy_var_618 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_25: int) returns (Tmp_1153: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == 2 || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_current) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_25: int) returns (Tmp_1153: int)
{
  var {:pointer} Irp_25: int;

  anon0:
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 2306} Tmp_1153 := IofCallDriver(0, Irp_25);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int)
{
  var {:pointer} p_3: int;
  var vslice_dummy_var_619: int;

  anon0:
    call {:si_unique_call 2307} vslice_dummy_var_619 := __HAVOC_malloc(4);
    p_3 := actual_p_3;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p_3 != 0;
    assume p_3 > 0;
    Mem_T.INT4[p_3] := sdv_irql_previous;
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1157: int);
  free ensures {:va_keep} Tmp_1157 == 0 || Tmp_1157 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_1157: int)
{
  var {:scalar} choice_13: int;
  var {:scalar} Tmp_1159: int;
  var {:scalar} Status_4: int;

  anon0:
    Status_4 := actual_Status_4;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_4;
    Tmp_1157 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_4 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_13 != 0;
    Tmp_1159 := 1;
    goto L14;

  L14:
    Tmp_1157 := Tmp_1159;
    goto L1;

  anon8_Then:
    assume {:partition} choice_13 == 0;
    Tmp_1159 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L9;
}



procedure {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc(actual_Dpc_12: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_1160: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc(actual_Dpc_12: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_1160: int)
{
  var {:pointer} Dpc_12: int;
  var vslice_dummy_var_775: int;
  var vslice_dummy_var_776: int;

  anon0:
    Dpc_12 := actual_Dpc_12;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1160 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    havoc vslice_dummy_var_775;
    havoc vslice_dummy_var_776;
    call {:si_unique_call 2308} sdv_RunKeDpcRoutines(vslice_dummy_var_775, vslice_dummy_var_776, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1160 := 1;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1162: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_4: int, actual_Tag_1: int) returns (Tmp_1162: int)
{
  var {:pointer} sdv_946: int;
  var {:scalar} NumberOfBytes_4: int;

  anon0:
    NumberOfBytes_4 := actual_NumberOfBytes_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 2309} sdv_946 := __HAVOC_malloc(NumberOfBytes_4);
    Tmp_1162 := sdv_946;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1162 := 0;
    goto L1;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1164: int);
  free ensures {:va_keep} Tmp_1164 == 0 || Tmp_1164 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1164: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1164 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1164 := -1073741823;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1166: int);
  free ensures {:va_keep} Tmp_1166 == -1073741772 || Tmp_1166 == -1073741824 || Tmp_1166 == -1073741789 || Tmp_1166 == -1073741670 || Tmp_1166 == -1073741808 || Tmp_1166 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1166: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1166 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_1166 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_1166 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_1166 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_1166 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_1166 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_3: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1168: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_3: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1168: int)
{
  var {:pointer} InterruptObject_3: int;
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    InterruptObject_3 := actual_InterruptObject_3;
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_1168 := -1073741811;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    Tmp_1168 := -1073741670;
    goto L1;

  anon8_Then:
    call {:si_unique_call 2310} sdv_RunISRRoutines(InterruptObject_3, ServiceContext);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1168 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_620: int;

  anon0:
    call {:si_unique_call 2311} vslice_dummy_var_620 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_621: int;

  anon0:
    call {:si_unique_call 2312} vslice_dummy_var_621 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1174: int);
  free ensures {:va_keep} Tmp_1174 == -1073741811 || Tmp_1174 == -1073741808 || Tmp_1174 == -1073741823 || Tmp_1174 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_1174: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1174 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1174 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1174 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1174 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_1176: int);
  free ensures {:va_keep} Tmp_1176 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_1176: int)
{

  anon0:
    Tmp_1176 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1178: int);
  free ensures {:va_keep} Tmp_1178 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1178: int)
{

  anon0:
    Tmp_1178 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_1180: int);
  free ensures {:va_keep} Tmp_1180 == -1073741823 || Tmp_1180 == -1073741811 || Tmp_1180 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_1180: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1180 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1180 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1180 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_622: int;

  anon0:
    call {:si_unique_call 2313} vslice_dummy_var_622 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    assume (forall x: int :: { Mem_T.CancelRoutine__IRP[x] } Mem_T.CancelRoutine__IRP[x] <= 0 || Mem_T.CancelRoutine__IRP[x] > 1249);
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddressSpace__CONFIG_DATA"} {:fieldname "AddressSpace"} AddressSpace__CONFIG_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__SERIAL_DEVICE_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.Affinity__CONFIG_DATA"} {:fieldname "Affinity"} Affinity__CONFIG_DATA(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_45"} {:fieldname "Affinity"} Affinity_unnamed_tag_45(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_40"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_40(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_42(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_3"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BaseIOAddress__SERIAL_WMI_HW_DATA"} {:fieldname "BaseIOAddress"} BaseIOAddress__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.BaudClock__CM_SERIAL_DEVICE_DATA"} {:fieldname "BaudClock"} BaudClock__CM_SERIAL_DEVICE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BaudRate__SERIAL_BAUD_RATE"} {:fieldname "BaudRate"} BaudRate__SERIAL_BAUD_RATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BitsPerByte__SERIAL_WMI_COMM_DATA"} {:fieldname "BitsPerByte"} BitsPerByte__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BreakChar__SERIAL_CHARS"} {:fieldname "BreakChar"} BreakChar__SERIAL_CHARS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BufferOverrunErrorCount__SERIALPERF_STATS"} {:fieldname "BufferOverrunErrorCount"} BufferOverrunErrorCount__SERIALPERF_STATS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BufferSizePt8__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSizePt8"} BufferSizePt8__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.BufferSize__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSize"} BufferSize__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CONFIG_DATA"} {:fieldname "BusNumber"} BusNumber__CONFIG_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__SERIAL_DEVICE_EXTENSION"} {:fieldname "BusNumber"} BusNumber__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.CIsrSw__SERIAL_DEVICE_EXTENSION"} {:fieldname "CIsrSw"} CIsrSw__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2644
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CharsCopied__SERIAL_UPDATE_CHAR"} {:fieldname "CharsCopied"} CharsCopied__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "CharsInInterruptBuffer"} CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ClockRate"} ClockRate__CONFIG_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.ClockRate__SERIAL_DEVICE_EXTENSION"} {:fieldname "ClockRate"} ClockRate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 424
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommErrorDpc"} CommErrorDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 872
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommWaitDpc"} CommWaitDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 916
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteImmediateDpc"} CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 960
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteReadDpc"} CompleteReadDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 696
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteWriteDpc"} CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Completed__SERIAL_UPDATE_CHAR"} {:fieldname "Completed"} Completed__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.Context__SERIAL_CISR_SW"} {:fieldname "Context"} Context__SERIAL_CISR_SW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ControlHandShake__SERIAL_HANDFLOW"} {:fieldname "ControlHandShake"} ControlHandShake__SERIAL_HANDFLOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__CONFIG_DATA"} {:fieldname "Controller"} Controller__CONFIG_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__SERIAL_DEVICE_EXTENSION"} {:fieldname "Controller"} Controller__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOfTryingToLowerRTS"} CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 408
}

function {:inline true} {:fieldmap "Mem_T.CountOnLastRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOnLastRead"} CountOnLastRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 392
}

function {:inline true} {:fieldmap "Mem_T.CountSinceXoff__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountSinceXoff"} CountSinceXoff__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 404
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Counter__SERIAL_XOFF_COUNTER"} {:fieldname "Counter"} Counter__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSerialCommEntry"} CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 640
}

function {:inline true} {:fieldmap "Mem_T.CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSymbolicLink"} CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 636
}

function {:inline true} {:fieldmap "Mem_T.CurrentBaud__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentBaud"} CurrentBaud__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentCharSlot"} CurrentCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentImmediateIrp"} CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskIrp"} CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPurgeIrp"} CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentReadIrp"} CurrentReadIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.CurrentRxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentRxQueue"} CurrentRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentTxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentTxQueue"} CurrentTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWaitIrp"} CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWriteIrp"} CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentXoffIrp"} CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.CutOverAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "CutOverAmount"} CutOverAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__SERIAL_IOCTL_SYNC"} {:fieldname "Data"} Data__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceClassSymbolicName"} DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2632
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DeviceIsOpened__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceIsOpened"} DeviceIsOpened__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 524
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DevicePNPAccept"} DevicePNPAccept__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2652
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateMap__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceStateMap"} DeviceStateMap__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2996
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_DEVICE_STATE"} {:fieldname "DeviceState"} DeviceState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2980
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3548
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__CONFIG_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.DisablePort__SERIAL_USER_DATA"} {:fieldname "DisablePort"} DisablePort__SERIAL_USER_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DosName"} DosName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DpcCount__SERIAL_DEVICE_EXTENSION"} {:fieldname "DpcCount"} DpcCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3756
}

function {:inline true} {:fieldmap "Mem_T.Dpc__KTIMER"} {:fieldname "Dpc"} Dpc__KTIMER(x: int) : int
{
  x + 184
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DriverObject"} DriverObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2472
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EmptiedTransmit__SERIAL_DEVICE_EXTENSION"} {:fieldname "EmptiedTransmit"} EmptiedTransmit__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 544
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EofChar__SERIAL_CHARS"} {:fieldname "EofChar"} EofChar__SERIAL_CHARS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ErrorChar__SERIAL_CHARS"} {:fieldname "ErrorChar"} ErrorChar__SERIAL_CHARS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ErrorWord__SERIAL_DEVICE_EXTENSION"} {:fieldname "ErrorWord"} ErrorWord__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.EscapeChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "EscapeChar"} EscapeChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.EventChar__SERIAL_CHARS"} {:fieldname "EventChar"} EventChar__SERIAL_CHARS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_CHECK_OPEN"} {:fieldname "Extension"} Extension__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_IOCTL_SYNC"} {:fieldname "Extension"} Extension__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_RESIZE_PARAMS"} {:fieldname "Extension"} Extension__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_UPDATE_CHAR"} {:fieldname "Extension"} Extension__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extensions__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "Extensions"} Extensions__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FifoPresent__SERIAL_DEVICE_EXTENSION"} {:fieldname "FifoPresent"} FifoPresent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_15"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstReadableChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "FirstReadableChar"} FirstReadableChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Flags"} Flags__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2816
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FlowReplace__SERIAL_HANDFLOW"} {:fieldname "FlowReplace"} FlowReplace__SERIAL_HANDFLOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnableDefault__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnableDefault"} ForceFIFOEnableDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnable__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnable"} ForceFIFOEnable__SERIAL_USER_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "ForceFifoEnableDefault"} ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnable"} ForceFifoEnable__CONFIG_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.FrameErrorCount__SERIALPERF_STATS"} {:fieldname "FrameErrorCount"} FrameErrorCount__SERIALPERF_STATS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_HANDFLOW"} {:fieldname "HandFlow"} HandFlow__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HandFlow__SERIAL_DEVICE_EXTENSION"} {:fieldname "HandFlow"} HandFlow__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "HistoryMask"} HistoryMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.HoldingEmpty__SERIAL_DEVICE_EXTENSION"} {:fieldname "HoldingEmpty"} HoldingEmpty__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.IER__SERIAL_DEVICE_STATE"} {:fieldname "IER"} IER__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ImmediateTotalTimer"} ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1888
}

function {:inline true} {:fieldmap "Mem_T.InSize__SERIAL_QUEUE_SIZE"} {:fieldname "InSize"} InSize__SERIAL_QUEUE_SIZE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Indexed"} Indexed__CONFIG_DATA(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.Indexed__SERIAL_DEVICE_EXTENSION"} {:fieldname "Indexed"} Indexed__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CONFIG_DATA"} {:fieldname "InterfaceType"} InterfaceType__CONFIG_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__CONFIG_DATA"} {:fieldname "InterruptMode"} InterruptMode__CONFIG_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptReadBuffer"} InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.InterruptShareable__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptShareable"} InterruptShareable__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__CONFIG_DATA"} {:fieldname "InterruptStatus"} InterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptStatus"} InterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.InterruptType__SERIAL_WMI_HW_DATA"} {:fieldname "InterruptType"} InterruptType__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_43"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_43(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IntervalReadTimeoutDpc"} IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.IntervalTimeToUse__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTimeToUse"} IntervalTimeToUse__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.IntervalTime__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTime"} IntervalTime__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._IO_STATUS_BLOCK"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IrpMaskLocation__SERIAL_DEVICE_EXTENSION"} {:fieldname "IrpMaskLocation"} IrpMaskLocation__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.IrqAffinityMask__SERIAL_WMI_HW_DATA"} {:fieldname "IrqAffinityMask"} IrqAffinityMask__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IrqLevel__SERIAL_WMI_HW_DATA"} {:fieldname "IrqLevel"} IrqLevel__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IrqNumber__SERIAL_WMI_HW_DATA"} {:fieldname "IrqNumber"} IrqNumber__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IrqVector__SERIAL_WMI_HW_DATA"} {:fieldname "IrqVector"} IrqVector__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Irql__SERIAL_DEVICE_EXTENSION"} {:fieldname "Irql"} Irql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T.IsBusy__SERIAL_WMI_COMM_DATA"} {:fieldname "IsBusy"} IsBusy__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IsrFunc__SERIAL_CISR_SW"} {:fieldname "IsrFunc"} IsrFunc__SERIAL_CISR_SW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IsrUnlockPagesDpc"} IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.IsrWaitMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "IsrWaitMask"} IsrWaitMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.LCR__SERIAL_DEVICE_STATE"} {:fieldname "LCR"} LCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LastCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "LastCharSlot"} LastCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_44"} {:fieldname "Length"} Length_unnamed_tag_44(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_45"} {:fieldname "Level"} Level_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LineControl__SERIAL_DEVICE_EXTENSION"} {:fieldname "LineControl"} LineControl__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_7(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LogFifoDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "LogFifoDefault"} LogFifoDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LogFifo__CONFIG_DATA"} {:fieldname "LogFifo"} LogFifo__CONFIG_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "LongIntervalAmount"} LongIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "LowerDeviceObject"} LowerDeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2464
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "LowerRTSTimer"} LowerRTSTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2272
}

function {:inline true} {:fieldmap "Mem_T.MCR__SERIAL_DEVICE_STATE"} {:fieldname "MCR"} MCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__CONFIG_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_USER_DATA"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_USER_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskQueue"} MaskQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.MaxBaud__SERIAL_COMMPROP"} {:fieldname "MaxBaud"} MaxBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.MaxRxQueue__SERIAL_COMMPROP"} {:fieldname "MaxRxQueue"} MaxRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MaxTxQueue__SERIAL_COMMPROP"} {:fieldname "MaxTxQueue"} MaxTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumBaudRate"} MaximumBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumInputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumInputBufferSize"} MaximumInputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumOutputBufferSize"} MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_43"} {:fieldname "Memory"} Memory_unnamed_tag_43(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NewBufferSize__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBufferSize"} NewBufferSize__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NewBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBuffer"} NewBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewDevicePowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewDevicePowerState"} NewDevicePowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3924
}

function {:inline true} {:fieldmap "Mem_T.NewExtension__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewExtension"} NewExtension__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.NewMaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewMaskInverted"} NewMaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.NewPortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewPortIndex"} NewPortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.NumberMoved__SERIAL_RESIZE_PARAMS"} {:fieldname "NumberMoved"} NumberMoved__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberNeededForRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "NumberNeededForRead"} NumberNeededForRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ObjectDirectory"} ObjectDirectory__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.OldBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "OldBuffer"} OldBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "OpenCount"} OpenCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2820
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalController"} OriginalController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalInterruptStatus"} OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__CONFIG_DATA"} {:fieldname "OriginalIrql"} OriginalIrql__CONFIG_DATA(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalIrql"} OriginalIrql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__CONFIG_DATA"} {:fieldname "OriginalVector"} OriginalVector__CONFIG_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalVector"} OriginalVector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.OurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsrContext"} OurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.OurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsr"} OurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_6"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION"} {:fieldname "OwnsPowerPolicy"} OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3532
}

function {:inline true} {:fieldmap "Mem_T.PDevObj__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PDevObj"} PDevObj__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PNPState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PNPState"} PNPState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2812
}

function {:inline true} {:fieldmap "Mem_T.PSIrp__SERIAL_POWER_COMPLETION_CONTEXT"} {:fieldname "PSIrp"} PSIrp__SERIAL_POWER_COMPLETION_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketVersion__SERIAL_COMMPROP"} {:fieldname "PacketVersion"} PacketVersion__SERIAL_COMMPROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParityCheckEnable__SERIAL_WMI_COMM_DATA"} {:fieldname "ParityCheckEnable"} ParityCheckEnable__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ParityErrorCount__SERIALPERF_STATS"} {:fieldname "ParityErrorCount"} ParityErrorCount__SERIALPERF_STATS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_LINE_CONTROL"} {:fieldname "Parity"} Parity__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_WMI_COMM_DATA"} {:fieldname "Parity"} Parity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pdo__SERIAL_DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3552
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingDpcEvent"} PendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3760
}

function {:inline true} {:fieldmap "Mem_T.PendingIRPCnt__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingIRPCnt"} PendingIRPCnt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2648
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingIRPEvent"} PendingIRPEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2656
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingWakeIrp__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingWakeIrp"} PendingWakeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3560
}

function {:inline true} {:fieldmap "Mem_T.PerfStats__SERIAL_DEVICE_EXTENSION"} {:fieldname "PerfStats"} PerfStats__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "PerhapsLowerRTSDpc"} PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1180
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_USER_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShare"} PermitShare__CONFIG_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.PermitShare__SERIAL_DEVICE_EXTENSION"} {:fieldname "PermitShare"} PermitShare__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__CONFIG_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__CONFIG_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PortIndex"} PortIndex__CONFIG_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.PortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortIndex"} PortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortOnAMultiportCard"} PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 548
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_43"} {:fieldname "Port"} Port_unnamed_tag_43(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_57"} {:fieldname "Port"} Port_unnamed_tag_57(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerD0Event"} PowerD0Event__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3024
}

function {:inline true} {:fieldmap "Mem_T.PowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PowerState"} PowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2468
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.ProvCapabilities__SERIAL_COMMPROP"} {:fieldname "ProvCapabilities"} ProvCapabilities__SERIAL_COMMPROP(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PurgeQueue"} PurgeQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "RXHolding"} RXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ReadBufferBase__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadBufferBase"} ReadBufferBase__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.ReadByIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadByIsr"} ReadByIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 396
}

function {:inline true} {:fieldmap "Mem_T.ReadIntervalTimeout__SERIAL_TIMEOUTS"} {:fieldname "ReadIntervalTimeout"} ReadIntervalTimeout__SERIAL_TIMEOUTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ReadQueue"} ReadQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestIntervalTimer"} ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1504
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestTotalTimer"} ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1312
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutConstant"} ReadTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutMultiplier"} ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.ReceivedCount__SERIALPERF_STATS"} {:fieldname "ReceivedCount"} ReceivedCount__SERIALPERF_STATS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Reopen__SERIAL_DEVICE_STATE"} {:fieldname "Reopen"} Reopen__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RetainPowerOnClose__SERIAL_DEVICE_EXTENSION"} {:fieldname "RetainPowerOnClose"} RetainPowerOnClose__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3536
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_USER_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__CONFIG_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.RxFIFO__SERIAL_USER_DATA"} {:fieldname "RxFIFO"} RxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.RxFifoTrigger__SERIAL_DEVICE_EXTENSION"} {:fieldname "RxFifoTrigger"} RxFifoTrigger__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.RxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "RxFifo"} RxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SendWaitWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendWaitWake"} SendWaitWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3556
}

function {:inline true} {:fieldmap "Mem_T.SendXoffChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXoffChar"} SendXoffChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.SendXonChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXonChar"} SendXonChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SerialCount"} SerialCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SerialOverrunErrorCount__SERIALPERF_STATS"} {:fieldname "SerialOverrunErrorCount"} SerialOverrunErrorCount__SERIALPERF_STATS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "SerialStartEvent"} SerialStartEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2824
}

function {:inline true} {:fieldmap "Mem_T.ServiceMask__SERIAL_COMMPROP"} {:fieldname "ServiceMask"} ServiceMask__SERIAL_COMMPROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SetPendingDpcEvent"} SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1268
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SettableBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableBaudRate"} SettableBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SettableBaud__SERIAL_COMMPROP"} {:fieldname "SettableBaud"} SettableBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SettableDataBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableDataBits"} SettableDataBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.SettableData__SERIAL_COMMPROP"} {:fieldname "SettableData"} SettableData__SERIAL_COMMPROP(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SettableFlowControl__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableFlowControl"} SettableFlowControl__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SettableParams__SERIAL_COMMPROP"} {:fieldname "SettableParams"} SettableParams__SERIAL_COMMPROP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SettableParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParityCheck"} SettableParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SettableParity__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParity"} SettableParity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SettableStopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableStopBits"} SettableStopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.SettableStopParity__SERIAL_COMMPROP"} {:fieldname "SettableStopParity"} SettableStopParity__SERIAL_COMMPROP(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SharerList"} SharerList__SERIAL_CISR_SW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "ShortIntervalAmount"} ShortIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SkipNaming"} SkipNaming__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3916
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__CONFIG_DATA"} {:fieldname "SpanOfController"} SpanOfController__CONFIG_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__CONFIG_DATA"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.SpecialChars__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpecialChars"} SpecialChars__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "StalledIrpQueue"} StalledIrpQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3180
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "StartTimerLowerRTSDpc"} StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1136
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_44"} {:fieldname "Start"} Start_unnamed_tag_44(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatusOfOpen__SERIAL_CHECK_OPEN"} {:fieldname "StatusOfOpen"} StatusOfOpen__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_LINE_CONTROL"} {:fieldname "StopBits"} StopBits__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "StopBits"} StopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Support16BitMode__SERIAL_WMI_COMM_DATA"} {:fieldname "Support16BitMode"} Support16BitMode__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SupportDTRDSR__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportDTRDSR"} SupportDTRDSR__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportIntervalTimeouts"} SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.SupportParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportParityCheck"} SupportParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.SupportRTSCTS__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportRTSCTS"} SupportRTSCTS__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.SupportXonXoff__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportXonXoff"} SupportXonXoff__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.SupportedBauds__SERIAL_DEVICE_EXTENSION"} {:fieldname "SupportedBauds"} SupportedBauds__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SymbolicLinkName"} SymbolicLinkName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_3"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_3(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3544
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__CONFIG_DATA(x: int) : int
{
  x + 168
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_DEVICE_EXTENSION"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3920
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_USER_DATA"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_USER_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.TXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "TXHolding"} TXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__SERIAL_XOFF_COUNTER"} {:fieldname "Timeout"} Timeout__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Timeouts__SERIAL_DEVICE_EXTENSION"} {:fieldname "Timeouts"} Timeouts__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsrContext"} TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsr"} TopLevelOurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TotalCharsQueued__SERIAL_DEVICE_EXTENSION"} {:fieldname "TotalCharsQueued"} TotalCharsQueued__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalImmediateTimeoutDpc"} TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1004
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalReadTimeoutDpc"} TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalWriteTimeoutDpc"} TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 828
}

function {:inline true} {:fieldmap "Mem_T.TrController__CONFIG_DATA"} {:fieldname "TrController"} TrController__CONFIG_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TrInterruptStatus__CONFIG_DATA"} {:fieldname "TrInterruptStatus"} TrInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.TrIrql__CONFIG_DATA"} {:fieldname "TrIrql"} TrIrql__CONFIG_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.TrVector__CONFIG_DATA"} {:fieldname "TrVector"} TrVector__CONFIG_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.TransmitImmediate__SERIAL_DEVICE_EXTENSION"} {:fieldname "TransmitImmediate"} TransmitImmediate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 540
}

function {:inline true} {:fieldmap "Mem_T.TransmittedCount__SERIALPERF_STATS"} {:fieldname "TransmittedCount"} TransmittedCount__SERIALPERF_STATS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_USER_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__CONFIG_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.TxFIFO__SERIAL_USER_DATA"} {:fieldname "TxFIFO"} TxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.TxFifoAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "TxFifoAmount"} TxFifoAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 428
}

function {:inline true} {:fieldmap "Mem_T.TxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "TxFifo"} TxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_22"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_22(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UartRemovalDetect__SERIAL_DEVICE_EXTENSION"} {:fieldname "UartRemovalDetect"} UartRemovalDetect__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3932
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapRegisters"} UnMapRegisters__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapStatus"} UnMapStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsablePortMask__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "UsablePortMask"} UsablePortMask__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserClockRate__SERIAL_USER_DATA"} {:fieldname "UserClockRate"} UserClockRate__SERIAL_USER_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.UserIndexed__SERIAL_USER_DATA"} {:fieldname "UserIndexed"} UserIndexed__SERIAL_USER_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserPortIndex__SERIAL_USER_DATA"} {:fieldname "UserPortIndex"} UserPortIndex__SERIAL_USER_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.ValidDataMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "ValidDataMask"} ValidDataMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Vector__SERIAL_DEVICE_EXTENSION"} {:fieldname "Vector"} Vector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_45"} {:fieldname "Vector"} Vector_unnamed_tag_45(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.WmiCommData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiCommData"} WmiCommData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3608
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiHwData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiHwData"} WmiHwData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3708
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WmiIdentifier"} WmiIdentifier__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiLibInfo"} WmiLibInfo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3564
}

function {:inline true} {:fieldmap "Mem_T.WmiPerfData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiPerfData"} WmiPerfData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3732
}

function {:inline true} {:fieldmap "Mem_T.WordLength__SERIAL_LINE_CONTROL"} {:fieldname "WordLength"} WordLength__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.WriteCurrentChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "WriteCurrentChar"} WriteCurrentChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 320
}

function {:inline true} {:fieldmap "Mem_T.WriteLength__SERIAL_DEVICE_EXTENSION"} {:fieldname "WriteLength"} WriteLength__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 316
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WriteQueue"} WriteQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "WriteRequestTotalTimer"} WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1696
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutMultiplier"} WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.XoffChar__SERIAL_CHARS"} {:fieldname "XoffChar"} XoffChar__SERIAL_CHARS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XoffCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffCharacter"} XoffCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountCompleteDpc"} XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1092
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountTimeoutDpc"} XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1048
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "XoffCountTimer"} XoffCountTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2080
}

function {:inline true} {:fieldmap "Mem_T.XoffLimit__SERIAL_HANDFLOW"} {:fieldname "XoffLimit"} XoffLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.XoffXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffXmitThreshold"} XoffXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XonChar__SERIAL_CHARS"} {:fieldname "XonChar"} XonChar__SERIAL_CHARS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XonCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XonCharacter"} XonCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XonLimit__SERIAL_HANDFLOW"} {:fieldname "XonLimit"} XonLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XonXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XonXmitThreshold"} XonXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string " The default interrupt read buffer size is: %d\n------  The XoffLimit is                         : %d\n------  The XonLimit is                          : %d\n------  The pt 8 size is                         : %d\n"} unique strConst__li2bpl235: int;

const {:string "%x irp was already marked as cancelled\n"} unique strConst__li2bpl32: int;

const {:string "%x was the first irp processed by this\n------- invocation of startmask\n"} unique strConst__li2bpl28: int;

const {:string "%x will become the current wait irp\n"} unique strConst__li2bpl31: int;

const {:string "*PNP0501"} unique strConst__li2bpl149: int;

const {:string "*PNP0502"} unique strConst__li2bpl150: int;

const {:string "------- BusRelations Query\n"} unique strConst__li2bpl156: int;

const {:string "------- EjectionRelations Query\n"} unique strConst__li2bpl157: int;

const {:string "------- PowerRelations Query\n"} unique strConst__li2bpl158: int;

const {:string "------- RemovalRelations Query\n"} unique strConst__li2bpl159: int;

const {:string "------- TargetDeviceRelation Query\n"} unique strConst__li2bpl160: int;

const {:string "------- Unknown Query\n"} unique strConst__li2bpl155: int;

const {:string "------- failing; multiport node\n"} unique strConst__li2bpl167: int;

const {:string "<SerialCommError\n"} unique strConst__li2bpl0: int;

const {:string "<SerialCompleteImmediate\n"} unique strConst__li2bpl242: int;

const {:string "<SerialCompleteRead(%X)\n"} unique strConst__li2bpl64: int;

const {:string "<SerialCompleteWait\n"} unique strConst__li2bpl36: int;

const {:string "<SerialCompleteWrite\n"} unique strConst__li2bpl38: int;

const {:string "<SerialCompleteXoff\n"} unique strConst__li2bpl46: int;

const {:string "<SerialDisableInterfaces\n"} unique strConst__li2bpl226: int;

const {:string "<SerialFlush (1) %X\n"} unique strConst__li2bpl238: int;

const {:string "<SerialFlush (2) %X\n"} unique strConst__li2bpl239: int;

const {:string "<SerialFlush (3) %X\n"} unique strConst__li2bpl237: int;

const {:string "<SerialGetNextWrite\n"} unique strConst__li2bpl48: int;

const {:string "<SerialGetRegistryKeyValue %X\n"} unique strConst__li2bpl195: int;

const {:string "<SerialInitMultiPort (1) %X\n"} unique strConst__li2bpl201: int;

const {:string "<SerialInitMultiPort (2) %X\n"} unique strConst__li2bpl203: int;

const {:string "<SerialInitMultiPort (3) %X\n"} unique strConst__li2bpl202: int;

const {:string "<SerialKillPendingIrps\n"} unique strConst__li2bpl198: int;

const {:string "<SerialRead (1) %X\n"} unique strConst__li2bpl66: int;

const {:string "<SerialRead (2) %X\n"} unique strConst__li2bpl67: int;

const {:string "<SerialRead (3) %X\n"} unique strConst__li2bpl68: int;

const {:string "<SerialRead (4) %X\n"} unique strConst__li2bpl69: int;

const {:string "<SerialReleaseResources\n"} unique strConst__li2bpl207: int;

const {:string "<SerialRemoveDevObj %X\n"} unique strConst__li2bpl197: int;

const {:string "<SerialStartImmediate\n"} unique strConst__li2bpl241: int;

const {:string "<SerialStartRead %X\n"} unique strConst__li2bpl62: int;

const {:string "<SerialStartTimerLowerRTS\n"} unique strConst__li2bpl180: int;

const {:string "<SerialStartWrite %X\n"} unique strConst__li2bpl50: int;

const {:string "<SerialUnstallIrps\n"} unique strConst__li2bpl61: int;

const {:string "<SerialWrite (1) %X\n"} unique strConst__li2bpl41: int;

const {:string "<SerialWrite (2) %X\n"} unique strConst__li2bpl42: int;

const {:string "<SerialWrite (3) %X\n"} unique strConst__li2bpl43: int;

const {:string "<SerialWrite (4) %X\n"} unique strConst__li2bpl44: int;

const {:string ">SerialCommError(%X)\n"} unique strConst__li2bpl1: int;

const {:string ">SerialCompleteImmediate(%X)\n"} unique strConst__li2bpl243: int;

const {:string ">SerialCompleteRead(%X)\n"} unique strConst__li2bpl65: int;

const {:string ">SerialCompleteWait(%X)\n"} unique strConst__li2bpl37: int;

const {:string ">SerialCompleteWrite(%X)\n"} unique strConst__li2bpl39: int;

const {:string ">SerialCompleteXoff(%X)\n"} unique strConst__li2bpl47: int;

const {:string ">SerialDisableInterfaces(%X, %s)\n"} unique strConst__li2bpl225: int;

const {:string ">SerialFindInitController(%X, %X)\n"} unique strConst__li2bpl221: int;

const {:string ">SerialFlush(%X, %X)\n"} unique strConst__li2bpl236: int;

const {:string ">SerialGetNextWrite(XXX)\n"} unique strConst__li2bpl49: int;

const {:string ">SerialGetRegistryKeyValue(XXX)\n"} unique strConst__li2bpl194: int;

const {:string ">SerialInitMultiPort(%X, %X, %X)\n"} unique strConst__li2bpl200: int;

const {:string ">SerialKillPendingIrps(%X)\n"} unique strConst__li2bpl199: int;

const {:string ">SerialRead(%X, %X)\n"} unique strConst__li2bpl70: int;

const {:string ">SerialReleaseResources(%X)\n"} unique strConst__li2bpl204: int;

const {:string ">SerialRemoveDevObj(%X)\n"} unique strConst__li2bpl196: int;

const {:string ">SerialStartImmediate(%X)\n"} unique strConst__li2bpl240: int;

const {:string ">SerialStartRead(%X)\n"} unique strConst__li2bpl63: int;

const {:string ">SerialStartTimerLowerRTS(%X)\n"} unique strConst__li2bpl181: int;

const {:string ">SerialStartWrite(%X)\n"} unique strConst__li2bpl51: int;

const {:string ">SerialUnstallIrps(%X)\n"} unique strConst__li2bpl59: int;

const {:string ">SerialWrite(%X, %X)\n"} unique strConst__li2bpl45: int;

const {:string "About to connect to interrupt for port %wZ\n------- address of extension is %x\n"} unique strConst__li2bpl132: int;

const {:string "Aha! It is a multiport node\n"} unique strConst__li2bpl218: int;

const {:string "Aha! It is a standalone node or first multi\n"} unique strConst__li2bpl216: int;

const {:string "Already in requested power state\n"} unique strConst__li2bpl14: int;

const {:string "Attempting to init %wZ\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n------- Interrupt Mode is %d\n"} unique strConst__li2bpl222: int;

const {:string "Becoming sharer: %08X %08X %08X\n"} unique strConst__li2bpl220: int;

const {:string "Bogus port address %x\n"} unique strConst__li2bpl109: int;

const {:string "Bogus port index %x\n"} unique strConst__li2bpl93: int;

const {:string "Bogus vector %x\n"} unique strConst__li2bpl108: int;

const {:string "Calling next driver\n"} unique strConst__li2bpl7: int;

const {:string "Can't filter NULL resources!\n"} unique strConst__li2bpl152: int;

const {:string "Canceling wait for irp %x\n"} unique strConst__li2bpl24: int;

const {:string "Cleaning up failed start\n"} unique strConst__li2bpl125: int;

const {:string "Clearing DTR for %x\n"} unique strConst__li2bpl184: int;

const {:string "Clearing Rts for %x\n"} unique strConst__li2bpl183: int;

const {:string "ClockRate"} unique strConst__li2bpl119: int;

const {:string "Close open count bad for: 0x%x\n"} unique strConst__li2bpl53: int;

const {:string "Close prologue failed for: %x\n"} unique strConst__li2bpl52: int;

const {:string "Com AddressSpace: %x\n"} unique strConst__li2bpl102: int;

const {:string "Com Indexed: %x\n"} unique strConst__li2bpl107: int;

const {:string "Com InterfaceType: %x\n"} unique strConst__li2bpl104: int;

const {:string "Com Interrupt Status: %x\n"} unique strConst__li2bpl122: int;

const {:string "Com InterruptMode: %x\n"} unique strConst__li2bpl103: int;

const {:string "Com OriginalIrql: %x\n"} unique strConst__li2bpl106: int;

const {:string "Com OriginalVector: %x\n"} unique strConst__li2bpl105: int;

const {:string "Com Port BusNumber: %x\n"} unique strConst__li2bpl101: int;

const {:string "Com Port ClockRate: %x\n"} unique strConst__li2bpl100: int;

const {:string "Com Port Index: %x\n"} unique strConst__li2bpl99: int;

const {:string "Com Port address: %x\n"} unique strConst__li2bpl121: int;

const {:string "Comparing it to %wZ\n------- already in the device list\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n"} unique strConst__li2bpl211: int;

const {:string "Complete Irp: %X\n"} unique strConst__li2bpl2: int;

const {:string "Completing wait for irp %x\n"} unique strConst__li2bpl35: int;

const {:string "Configuration error for %wZ\n------- Same multiport - different interrupts\n"} unique strConst__li2bpl217: int;

const {:string "Connected interrupt %08X\n"} unique strConst__li2bpl129: int;

const {:string "Could not map memory for device registers for %wZ\n"} unique strConst__li2bpl234: int;

const {:string "Could not map memory for interrupt status for %wZ\n"} unique strConst__li2bpl231: int;

const {:string "Couldn't allocate memory for Dos name\n"} unique strConst__li2bpl78: int;

const {:string "Couldn't allocate memory for WMI name\n"} unique strConst__li2bpl79: int;

const {:string "Couldn't allocate memory for buffer\n"} unique strConst__li2bpl86: int;

const {:string "Couldn't allocate memory for device name\n"} unique strConst__li2bpl87: int;

const {:string "Couldn't allocate memory for the\n------  user configuration record\n"} unique strConst__li2bpl135: int;

const {:string "Couldn't connect to interrupt for %wZ\n"} unique strConst__li2bpl134: int;

const {:string "Couldn't create the device map entry\n------- for port %wZ\n"} unique strConst__li2bpl76: int;

const {:string "Couldn't create the symbolic link\nfor port %wZ\n"} unique strConst__li2bpl77: int;

const {:string "Couldn't delete value entry %wZ\n"} unique strConst__li2bpl179: int;

const {:string "Couldn't register class association\nfor port %wZ\n"} unique strConst__li2bpl73: int;

const {:string "Couldn't set class association\n for port %wZ\n"} unique strConst__li2bpl74: int;

const {:string "Count: %x  Addr: 0x%x\n"} unique strConst__li2bpl54: int;

const {:string "DPC's drained: %x\n"} unique strConst__li2bpl56: int;

const {:string "Deleting Link %wZ\n"} unique strConst__li2bpl178: int;

const {:string "DevicePowerState\n"} unique strConst__li2bpl13: int;

const {:string "DisablePort"} unique strConst__li2bpl111: int;

const {:string "Dispatch entry for: %x\n"} unique strConst__li2bpl40: int;

const {:string "DoesPortExist test failed for %wZ\n"} unique strConst__li2bpl232: int;

const {:string "DosDevices"} unique strConst__li2bpl83: int;

const {:string "DosName is %wZ\n"} unique strConst__li2bpl72: int;

const {:string "Draining DPC's: %x\n"} unique strConst__li2bpl57: int;

const {:string "EnablePowerManagement"} unique strConst__li2bpl137: int;

const {:string "Enter SerialRestoreDeviceState\n"} unique strConst__li2bpl23: int;

const {:string "Entering SerialSaveDeviceState\n"} unique strConst__li2bpl18: int;

const {:string "Error in config record for %wZ\n------  registers wrap around physical memory\n"} unique strConst__li2bpl208: int;

const {:string "Error in config record for %wZ\n------  status wraps around physical memory\n"} unique strConst__li2bpl209: int;

const {:string "Error in config record for %wZ\n------- Interrupt status overlaps regular registers\n"} unique strConst__li2bpl210: int;

const {:string "Error in config record for %wZ\n------- Register address overlaps with\n------- previous serial device\n"} unique strConst__li2bpl212: int;

const {:string "Error in config record for %wZ\n------- register address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl215: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial device registers\n"} unique strConst__li2bpl213: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl214: int;

const {:string "External Naming Failed - Status %x\n"} unique strConst__li2bpl131: int;

const {:string "FALSE"} unique strConst__li2bpl223: int;

const {:string "Fifo's detected at port address: %x\n"} unique strConst__li2bpl227: int;

const {:string "ForceFifoEnable"} unique strConst__li2bpl112: int;

const {:string "Getting PortName/Identifier failed - %x\n"} unique strConst__li2bpl85: int;

const {:string "Globally sharing interrupt for device %x\n"} unique strConst__li2bpl173: int;

const {:string "Going to power state D0\n"} unique strConst__li2bpl15: int;

const {:string "Going to power state D3\n"} unique strConst__li2bpl16: int;

const {:string "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl138: int;

const {:string "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n"} unique strConst__li2bpl139: int;

const {:string "Got IRP_MN_EJECT Irp\n"} unique strConst__li2bpl145: int;

const {:string "Got IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl168: int;

const {:string "Got IRP_MN_POWER_SEQUENCE Irp\n"} unique strConst__li2bpl9: int;

const {:string "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n"} unique strConst__li2bpl153: int;

const {:string "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n"} unique strConst__li2bpl140: int;

const {:string "Got IRP_MN_QUERY_ID Irp\n"} unique strConst__li2bpl174: int;

const {:string "Got IRP_MN_QUERY_INTERFACE Irp\n"} unique strConst__li2bpl141: int;

const {:string "Got IRP_MN_QUERY_POWER Irp\n"} unique strConst__li2bpl11: int;

const {:string "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl164: int;

const {:string "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl142: int;

const {:string "Got IRP_MN_QUERY_STOP_DEVICE Irp\n"} unique strConst__li2bpl161: int;

const {:string "Got IRP_MN_READ_CONFIG Irp\n"} unique strConst__li2bpl143: int;

const {:string "Got IRP_MN_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl163: int;

const {:string "Got IRP_MN_SET_LOCK Irp\n"} unique strConst__li2bpl146: int;

const {:string "Got IRP_MN_SET_POWER Irp\n"} unique strConst__li2bpl10: int;

const {:string "Got IRP_MN_START_DEVICE Irp\n"} unique strConst__li2bpl165: int;

const {:string "Got IRP_MN_STOP_DEVICE Irp\n"} unique strConst__li2bpl162: int;

const {:string "Got IRP_MN_SURPRISE_REMOVAL Irp\n"} unique strConst__li2bpl147: int;

const {:string "Got IRP_MN_WAIT_WAKE Irp\n"} unique strConst__li2bpl8: int;

const {:string "Got IRP_MN_WRITE_CONFIG Irp\n"} unique strConst__li2bpl144: int;

const {:string "ID is sole ID\n"} unique strConst__li2bpl151: int;

const {:string "Identifier"} unique strConst__li2bpl81: int;

const {:string "In Ioctl processing for set mask\n"} unique strConst__li2bpl190: int;

const {:string "In Ioctl processing for wait mask\n"} unique strConst__li2bpl187: int;

const {:string "In SerialCancelWait\n"} unique strConst__li2bpl25: int;

const {:string "In SerialClose\n"} unique strConst__li2bpl55: int;

const {:string "In SerialCompleteWait\n"} unique strConst__li2bpl34: int;

const {:string "In SerialCreateOpen\n"} unique strConst__li2bpl58: int;

const {:string "In SerialGotoPowerState\n"} unique strConst__li2bpl3: int;

const {:string "In SerialSetPowerD0\n"} unique strConst__li2bpl5: int;

const {:string "In SerialSetPowerD3\n"} unique strConst__li2bpl20: int;

const {:string "In SerialStartMask\n"} unique strConst__li2bpl33: int;

const {:string "In SerialUndoExternalNaming for\nextension: %x of port %wZ\n"} unique strConst__li2bpl177: int;

const {:string "Indexed"} unique strConst__li2bpl118: int;

const {:string "Initializing for configuration record of %wZ\n"} unique strConst__li2bpl228: int;

const {:string "Interrupt"} unique strConst__li2bpl123: int;

const {:string "Invalid Bus type %x\n"} unique strConst__li2bpl96: int;

const {:string "Invalid size fo the buffer %d\n"} unique strConst__li2bpl191: int;

const {:string "Invalid size for the buffer %d\n"} unique strConst__li2bpl189: int;

const {:string "IoConnectInterrupt Args:\nInterrupt           %x\nOurIsr              %x\nOurIsrContext       %x\nNULL\nVector              %x\nIrql                %x\nInterruptMode       %x\nInterruptShareable  %x\nProcessorAffinity   %x\nFALSE\n"} unique strConst__li2bpl133: int;

const {:string "IoOpenDeviceRegistryKey failed - %x \n"} unique strConst__li2bpl110: int;

const {:string "KeSetEvent should only be called at IRQL <= APC_LEVEL when Wait is set to TRUE."} unique strConst__li2bpl186: int;

const {:string "KeSetEvent should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl185: int;

const {:string "Kernel debugger is using port at address %X\n"} unique strConst__li2bpl229: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix\n"} unique strConst__li2bpl98: int;

const {:string "Leaving SerialGotoPowerState\n"} unique strConst__li2bpl4: int;

const {:string "Leaving SerialSaveDeviceState\n"} unique strConst__li2bpl19: int;

const {:string "List has %x lists (including alternatives)\n"} unique strConst__li2bpl169: int;

const {:string "List has %x resources in it\n"} unique strConst__li2bpl170: int;

const {:string "Mapping power capabilities\n"} unique strConst__li2bpl154: int;

const {:string "MaskInverted"} unique strConst__li2bpl115: int;

const {:string "Matched to %x\n"} unique strConst__li2bpl219: int;

const {:string "MultiportDevice"} unique strConst__li2bpl91: int;

const {:string "Not doing external naming -- state is %x\n"} unique strConst__li2bpl130: int;

const {:string "PDevExt: %x\n"} unique strConst__li2bpl21: int;

const {:string "Perhaps another mask irp was found in the queue\n------- %x/%x <- values should be the same\n"} unique strConst__li2bpl29: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %x\n"} unique strConst__li2bpl95: int;

const {:string "PortAddress"} unique strConst__li2bpl124: int;

const {:string "PortIndex"} unique strConst__li2bpl117: int;

const {:string "PortName"} unique strConst__li2bpl80: int;

const {:string "Read name %wZ\n"} unique strConst__li2bpl84: int;

const {:string "Release - disconnecting interrupt %X\n"} unique strConst__li2bpl205: int;

const {:string "Release - freeing multi context\n"} unique strConst__li2bpl206: int;

const {:string "Reopening device\n"} unique strConst__li2bpl22: int;

const {:string "RxFIFO"} unique strConst__li2bpl113: int;

const {:string "SERIAL - %x is a SETMASK irp\n"} unique strConst__li2bpl27: int;

const {:string "SERIALCOMM"} unique strConst__li2bpl75: int;

const {:string "STARTMASK - CurrentMaskIrp: %x\n"} unique strConst__li2bpl26: int;

const {:string "Serial driver will not load port\n"} unique strConst__li2bpl230: int;

const {:string "SerialFinishStartDevice got NULL pDevExt\n"} unique strConst__li2bpl127: int;

const {:string "SerialIoResourcesIndex"} unique strConst__li2bpl92: int;

const {:string "SerialRelinquishPowerPolicy"} unique strConst__li2bpl136: int;

const {:string "SerialSkipExternalNaming"} unique strConst__li2bpl71: int;

const {:string "SetPowerD0 has IRP %x\n"} unique strConst__li2bpl6: int;

const {:string "Setting Rts for %x\n"} unique strConst__li2bpl182: int;

const {:string "Share System Interrupt"} unique strConst__li2bpl116: int;

const {:string "Sharing I/O port for device %x\n"} unique strConst__li2bpl171: int;

const {:string "Sharing interrupt for device %x\n"} unique strConst__li2bpl172: int;

const {:string "Starting or queuing set mask irp %x\n"} unique strConst__li2bpl192: int;

const {:string "Starting or queuing wait mask irp%x\n"} unique strConst__li2bpl188: int;

const {:string "SystemPowerState\n"} unique strConst__li2bpl17: int;

const {:string "TL16C550C Auto Flow Control"} unique strConst__li2bpl120: int;

const {:string "TR resource pointer is %x\n"} unique strConst__li2bpl90: int;

const {:string "TRUE"} unique strConst__li2bpl224: int;

const {:string "There aren't that many of those\nbusses on this system,%x\n"} unique strConst__li2bpl97: int;

const {:string "TxFIFO"} unique strConst__li2bpl114: int;

const {:string "UNKNOWN PowerState\n"} unique strConst__li2bpl12: int;

const {:string "Unknown mask %x\n"} unique strConst__li2bpl193: int;

const {:string "Unstalling Irp 0x%x with 0x%x\n"} unique strConst__li2bpl60: int;

const {:string "WaitIrp is invalid\n------- IsrWaitMask: %x\n------- CurrentWaitIrp: %x\n"} unique strConst__li2bpl30: int;

const {:string "\\"} unique strConst__li2bpl82: int;

const {:string "callee"} unique strConst__li2bpl244: int;

const {:string "disabled port %wZ as requested in configuration\n"} unique strConst__li2bpl233: int;

const {:string "entering SerialGetPortInfo\n"} unique strConst__li2bpl88: int;

const {:string "entering SerialStartDevice\n"} unique strConst__li2bpl175: int;

const {:string "error with IoCallDriver %x\n"} unique strConst__li2bpl176: int;

const {:string "failing; device open\n"} unique strConst__li2bpl166: int;

const {:string "for device %x\n"} unique strConst__li2bpl148: int;

const {:string "leaving SerialFinishStartDevice\n"} unique strConst__li2bpl126: int;

const {:string "pDevExt: Interrupt %x\n-------               OurIsr %x\n"} unique strConst__li2bpl128: int;

const {:string "port index to large %x\n"} unique strConst__li2bpl94: int;

const {:string "resource pointer is %x\n"} unique strConst__li2bpl89: int;

const {:allocated} li2bplFunctionConstant1030: int;

axiom li2bplFunctionConstant1030 == 1030;

const {:allocated} li2bplFunctionConstant1036: int;

axiom li2bplFunctionConstant1036 == 1036;

const {:allocated} li2bplFunctionConstant1037: int;

axiom li2bplFunctionConstant1037 == 1037;

const {:allocated} li2bplFunctionConstant1040: int;

axiom li2bplFunctionConstant1040 == 1040;

const {:allocated} li2bplFunctionConstant1041: int;

axiom li2bplFunctionConstant1041 == 1041;

const {:allocated} li2bplFunctionConstant1042: int;

axiom li2bplFunctionConstant1042 == 1042;

const {:allocated} li2bplFunctionConstant1048: int;

axiom li2bplFunctionConstant1048 == 1048;

const {:allocated} li2bplFunctionConstant1086: int;

axiom li2bplFunctionConstant1086 == 1086;

const {:allocated} li2bplFunctionConstant1087: int;

axiom li2bplFunctionConstant1087 == 1087;

const {:allocated} li2bplFunctionConstant1088: int;

axiom li2bplFunctionConstant1088 == 1088;

const {:allocated} li2bplFunctionConstant1089: int;

axiom li2bplFunctionConstant1089 == 1089;

const {:allocated} li2bplFunctionConstant1125: int;

axiom li2bplFunctionConstant1125 == 1125;

const {:allocated} li2bplFunctionConstant1244: int;

axiom li2bplFunctionConstant1244 == 1244;

const {:allocated} li2bplFunctionConstant1246: int;

axiom li2bplFunctionConstant1246 == 1246;

const {:allocated} li2bplFunctionConstant1249: int;

axiom li2bplFunctionConstant1249 == 1249;

const {:allocated} li2bplFunctionConstant336: int;

axiom li2bplFunctionConstant336 == 336;

const {:allocated} li2bplFunctionConstant339: int;

axiom li2bplFunctionConstant339 == 339;

const {:allocated} li2bplFunctionConstant340: int;

axiom li2bplFunctionConstant340 == 340;

const {:allocated} li2bplFunctionConstant342: int;

axiom li2bplFunctionConstant342 == 342;

const {:allocated} li2bplFunctionConstant343: int;

axiom li2bplFunctionConstant343 == 343;

const {:allocated} li2bplFunctionConstant348: int;

axiom li2bplFunctionConstant348 == 348;

const {:allocated} li2bplFunctionConstant393: int;

axiom li2bplFunctionConstant393 == 393;

const {:allocated} li2bplFunctionConstant394: int;

axiom li2bplFunctionConstant394 == 394;

const {:allocated} li2bplFunctionConstant395: int;

axiom li2bplFunctionConstant395 == 395;

const {:allocated} li2bplFunctionConstant396: int;

axiom li2bplFunctionConstant396 == 396;

const {:allocated} li2bplFunctionConstant438: int;

axiom li2bplFunctionConstant438 == 438;

const {:allocated} li2bplFunctionConstant515: int;

axiom li2bplFunctionConstant515 == 515;

const {:allocated} li2bplFunctionConstant522: int;

axiom li2bplFunctionConstant522 == 522;

const {:allocated} li2bplFunctionConstant523: int;

axiom li2bplFunctionConstant523 == 523;

const {:allocated} li2bplFunctionConstant524: int;

axiom li2bplFunctionConstant524 == 524;

const {:allocated} li2bplFunctionConstant525: int;

axiom li2bplFunctionConstant525 == 525;

const {:allocated} li2bplFunctionConstant526: int;

axiom li2bplFunctionConstant526 == 526;

const {:allocated} li2bplFunctionConstant569: int;

axiom li2bplFunctionConstant569 == 569;

const {:allocated} li2bplFunctionConstant570: int;

axiom li2bplFunctionConstant570 == 570;

const {:allocated} li2bplFunctionConstant571: int;

axiom li2bplFunctionConstant571 == 571;

const {:allocated} li2bplFunctionConstant572: int;

axiom li2bplFunctionConstant572 == 572;

const {:allocated} li2bplFunctionConstant573: int;

axiom li2bplFunctionConstant573 == 573;

const {:allocated} li2bplFunctionConstant574: int;

axiom li2bplFunctionConstant574 == 574;

const {:allocated} li2bplFunctionConstant575: int;

axiom li2bplFunctionConstant575 == 575;

const {:allocated} li2bplFunctionConstant576: int;

axiom li2bplFunctionConstant576 == 576;

const {:allocated} li2bplFunctionConstant577: int;

axiom li2bplFunctionConstant577 == 577;

const {:allocated} li2bplFunctionConstant578: int;

axiom li2bplFunctionConstant578 == 578;

const {:allocated} li2bplFunctionConstant579: int;

axiom li2bplFunctionConstant579 == 579;

const {:allocated} li2bplFunctionConstant580: int;

axiom li2bplFunctionConstant580 == 580;

const {:allocated} li2bplFunctionConstant581: int;

axiom li2bplFunctionConstant581 == 581;

const {:allocated} li2bplFunctionConstant617: int;

axiom li2bplFunctionConstant617 == 617;

const {:allocated} li2bplFunctionConstant618: int;

axiom li2bplFunctionConstant618 == 618;

const {:allocated} li2bplFunctionConstant619: int;

axiom li2bplFunctionConstant619 == 619;

const {:allocated} li2bplFunctionConstant620: int;

axiom li2bplFunctionConstant620 == 620;

const {:allocated} li2bplFunctionConstant621: int;

axiom li2bplFunctionConstant621 == 621;

const {:allocated} li2bplFunctionConstant622: int;

axiom li2bplFunctionConstant622 == 622;

const {:allocated} li2bplFunctionConstant660: int;

axiom li2bplFunctionConstant660 == 660;

const {:allocated} li2bplFunctionConstant665: int;

axiom li2bplFunctionConstant665 == 665;

const {:allocated} li2bplFunctionConstant667: int;

axiom li2bplFunctionConstant667 == 667;

const {:allocated} li2bplFunctionConstant673: int;

axiom li2bplFunctionConstant673 == 673;

const {:allocated} li2bplFunctionConstant678: int;

axiom li2bplFunctionConstant678 == 678;

const {:allocated} li2bplFunctionConstant720: int;

axiom li2bplFunctionConstant720 == 720;

const {:allocated} li2bplFunctionConstant721: int;

axiom li2bplFunctionConstant721 == 721;

const {:allocated} li2bplFunctionConstant722: int;

axiom li2bplFunctionConstant722 == 722;

const {:allocated} li2bplFunctionConstant723: int;

axiom li2bplFunctionConstant723 == 723;

const {:allocated} li2bplFunctionConstant726: int;

axiom li2bplFunctionConstant726 == 726;

const {:allocated} li2bplFunctionConstant728: int;

axiom li2bplFunctionConstant728 == 728;

const {:allocated} li2bplFunctionConstant731: int;

axiom li2bplFunctionConstant731 == 731;

const {:allocated} li2bplFunctionConstant805: int;

axiom li2bplFunctionConstant805 == 805;

const {:allocated} li2bplFunctionConstant806: int;

axiom li2bplFunctionConstant806 == 806;

const {:allocated} li2bplFunctionConstant842: int;

axiom li2bplFunctionConstant842 == 842;

const {:allocated} li2bplFunctionConstant844: int;

axiom li2bplFunctionConstant844 == 844;

const {:allocated} li2bplFunctionConstant845: int;

axiom li2bplFunctionConstant845 == 845;

const {:allocated} li2bplFunctionConstant846: int;

axiom li2bplFunctionConstant846 == 846;

const {:allocated} li2bplFunctionConstant849: int;

axiom li2bplFunctionConstant849 == 849;

const {:allocated} li2bplFunctionConstant888: int;

axiom li2bplFunctionConstant888 == 888;

const {:allocated} li2bplFunctionConstant889: int;

axiom li2bplFunctionConstant889 == 889;

const {:allocated} li2bplFunctionConstant891: int;

axiom li2bplFunctionConstant891 == 891;

const {:allocated} li2bplFunctionConstant892: int;

axiom li2bplFunctionConstant892 == 892;

const {:allocated} li2bplFunctionConstant893: int;

axiom li2bplFunctionConstant893 == 893;

const {:allocated} li2bplFunctionConstant894: int;

axiom li2bplFunctionConstant894 == 894;

const {:allocated} li2bplFunctionConstant899: int;

axiom li2bplFunctionConstant899 == 899;

const {:allocated} li2bplFunctionConstant900: int;

axiom li2bplFunctionConstant900 == 900;

const {:allocated} li2bplFunctionConstant901: int;

axiom li2bplFunctionConstant901 == 901;

const {:allocated} li2bplFunctionConstant940: int;

axiom li2bplFunctionConstant940 == 940;

const {:allocated} li2bplFunctionConstant978: int;

axiom li2bplFunctionConstant978 == 978;

const {:allocated} li2bplFunctionConstant979: int;

axiom li2bplFunctionConstant979 == 979;

const {:allocated} li2bplFunctionConstant980: int;

axiom li2bplFunctionConstant980 == 980;

const {:allocated} li2bplFunctionConstant981: int;

axiom li2bplFunctionConstant981 == 981;

const {:allocated} li2bplFunctionConstant982: int;

axiom li2bplFunctionConstant982 == 982;

const {:allocated} li2bplFunctionConstant983: int;

axiom li2bplFunctionConstant983 == 983;

const {:allocated} li2bplFunctionConstant984: int;

axiom li2bplFunctionConstant984 == 984;

const {:allocated} li2bplFunctionConstant985: int;

axiom li2bplFunctionConstant985 == 985;

const {:allocated} li2bplFunctionConstant986: int;

axiom li2bplFunctionConstant986 == 986;

const {:allocated} li2bplFunctionConstant987: int;

axiom li2bplFunctionConstant987 == 987;

implementation {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_9: int) returns (Tmp_145: int)
{
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_148: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_122: int;
  var {:pointer} Tmp_149: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_123: int;
  var {:pointer} sdv_124: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_125: int;
  var {:scalar} Tmp_151: int;
  var {:pointer} sdv_127: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_9: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_624: int;
  var vslice_dummy_var_625: int;
  var vslice_dummy_var_626: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_777: int;
  var vslice_dummy_var_778: int;
  var vslice_dummy_var_779: int;
  var vslice_dummy_var_780: int;
  var vslice_dummy_var_781: int;
  var vslice_dummy_var_782: int;
  var vslice_dummy_var_783: int;

  anon0:
    call {:si_unique_call 2314} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2315} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2316} Timeouts := __HAVOC_malloc(20);
    Extension_9 := actual_Extension_9;
    call {:si_unique_call 2317} Tmp_148 := __HAVOC_malloc(88);
    call {:si_unique_call 2318} Tmp_149 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_149 := strConst__li2bpl51;
    call {:si_unique_call 2319} vslice_dummy_var_626 := SerialDbgPrintEx(2, Tmp_149);
    goto L14;

  L14:
    call {:si_unique_call 2320} Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_123, Tmp_150, s_p_e_c_i_a_l_9, sdv_125, Tmp_151, sdv_127, Tmp_152 := SerialStartWrite#0_loop_L14(Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_123, NewIrp_2, Tmp_150, s_p_e_c_i_a_l_9, sdv_125, Tmp_151, sdv_127, Tmp_152, Timeouts, Extension_9);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2343} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2344} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_777;
    call {:si_unique_call 2321} sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_777);
    assume {:nonnull} sdv_123 != 0;
    assume sdv_123 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_778;
    call {:si_unique_call 2322} sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_778);
    assume {:nonnull} sdv_125 != 0;
    assume sdv_125 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_125)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_9);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2323} SerialTryToCompleteCurrent#0(Extension_9, li2bplFunctionConstant570, OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, 16);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2324} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2325} sdv_KeAcquireSpinLock(0, Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2326} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_779;
    call {:si_unique_call 2327} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_779);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_780;
    call {:si_unique_call 2328} sdv_127 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_780);
    assume {:nonnull} sdv_127 != 0;
    assume sdv_127 > 0;
    call {:si_unique_call 2329} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2330} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2331} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_150;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_150))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2332} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), NewIrp_2, 1, Extension_9);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto L79;

  L79:
    Tmp_148 := strConst__li2bpl50;
    call {:si_unique_call 2333} vslice_dummy_var_627 := SerialDbgPrintEx(2, Tmp_148);
    Tmp_145 := FirstStatus_1;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon33_Then:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_781;
    call {:si_unique_call 2334} vslice_dummy_var_623 := sdv_IoSetCancelRoutine(vslice_dummy_var_781, li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_782;
    call {:si_unique_call 2335} sdv_122 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_782);
    assume {:nonnull} sdv_122 != 0;
    assume sdv_122 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_122)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2336} vslice_dummy_var_625 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_9), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_9), Extension_9);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_783;
    call {:si_unique_call 2337} sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_783);
    assume {:nonnull} sdv_124 != 0;
    assume sdv_124 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_8] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_8], s_p_e_c_i_a_l_12);
    goto L99;

  L99:
    call {:si_unique_call 2338} vslice_dummy_var_624 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2339} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2340} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon32_Then:
    Tmp_151 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    call {:si_unique_call 2341} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  anon25_Then:
    call {:si_unique_call 2342} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_9: int) returns (Tmp_145: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_9: int) returns (Tmp_145: int)
{
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} FirstStatus_1: int;
  var {:scalar} TotalTime: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_148: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} UseATimer: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} sdv_122: int;
  var {:pointer} Tmp_149: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_123: int;
  var {:pointer} sdv_124: int;
  var {:pointer} NewIrp_2: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} s_p_e_c_i_a_l_9: int;
  var {:pointer} sdv_125: int;
  var {:scalar} Tmp_151: int;
  var {:pointer} sdv_127: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:scalar} Timeouts: int;
  var {:scalar} s_p_e_c_i_a_l_12: int;
  var {:pointer} Extension_9: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;
  var vslice_dummy_var_630: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;
  var vslice_dummy_var_784: int;
  var vslice_dummy_var_785: int;
  var vslice_dummy_var_786: int;
  var vslice_dummy_var_787: int;
  var vslice_dummy_var_788: int;
  var vslice_dummy_var_789: int;
  var vslice_dummy_var_790: int;

  anon0:
    call {:si_unique_call 2345} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2346} NewIrp_2 := __HAVOC_malloc(4);
    call {:si_unique_call 2347} Timeouts := __HAVOC_malloc(20);
    Extension_9 := actual_Extension_9;
    call {:si_unique_call 2348} Tmp_148 := __HAVOC_malloc(88);
    call {:si_unique_call 2349} Tmp_149 := __HAVOC_malloc(92);
    SetFirstStatus_1 := 0;
    Tmp_149 := strConst__li2bpl51;
    call {:si_unique_call 2350} vslice_dummy_var_631 := SerialDbgPrintEx(2, Tmp_149);
    goto L14;

  L14:
    call {:si_unique_call 2351} Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_123, Tmp_150, s_p_e_c_i_a_l_9, sdv_125, Tmp_151, sdv_127, Tmp_152 := SerialStartWrite#1_loop_L14(Tmp_146, Tmp_147, s_p_e_c_i_a_l_7, FirstStatus_1, TotalTime, SetFirstStatus_1, UseATimer, IrpSp_1, OldIrql_7, sdv_123, NewIrp_2, Tmp_150, s_p_e_c_i_a_l_9, sdv_125, Tmp_151, sdv_127, Tmp_152, Timeouts, Extension_9);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2374} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2375} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_784;
    call {:si_unique_call 2352} sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_784);
    assume {:nonnull} sdv_123 != 0;
    assume sdv_123 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_785;
    call {:si_unique_call 2353} sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_785);
    assume {:nonnull} sdv_125 != 0;
    assume sdv_125 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_125)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_9);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2354} SerialTryToCompleteCurrent#1(Extension_9, li2bplFunctionConstant570, OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_9), 0, 0, 16);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    UseATimer := 0;
    call {:si_unique_call 2355} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2356} sdv_KeAcquireSpinLock(0, Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 2357} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_786;
    call {:si_unique_call 2358} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_786);
    UseATimer := 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_787;
    call {:si_unique_call 2359} sdv_127 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_787);
    assume {:nonnull} sdv_127 != 0;
    assume sdv_127 > 0;
    call {:si_unique_call 2360} Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147] := OldIrql_7;
    call {:si_unique_call 2361} IoAcquireCancelSpinLock(Tmp_147);
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_147];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 2362} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc Tmp_150;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_150))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2363} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), NewIrp_2, 1, Extension_9);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto L79;

  L79:
    Tmp_148 := strConst__li2bpl50;
    call {:si_unique_call 2364} vslice_dummy_var_632 := SerialDbgPrintEx(2, Tmp_148);
    Tmp_145 := FirstStatus_1;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L75;

  anon33_Then:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_788;
    call {:si_unique_call 2365} vslice_dummy_var_628 := sdv_IoSetCancelRoutine(vslice_dummy_var_788, li2bplFunctionConstant571);
    s_p_e_c_i_a_l_11 := 2;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_789;
    call {:si_unique_call 2366} sdv_122 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_789);
    assume {:nonnull} sdv_122 != 0;
    assume sdv_122 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_122)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_11);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 2367} vslice_dummy_var_630 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_9), TotalTime, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_9), Extension_9);
    s_p_e_c_i_a_l_12 := 4;
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    havoc vslice_dummy_var_790;
    call {:si_unique_call 2368} sdv_124 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_790);
    assume {:nonnull} sdv_124 != 0;
    assume sdv_124 > 0;
    s_p_e_c_i_a_l_8 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_124)));
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_8] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_8], s_p_e_c_i_a_l_12);
    goto L99;

  L99:
    call {:si_unique_call 2369} vslice_dummy_var_629 := KeSynchronizeExecution(0, li2bplFunctionConstant572, 0);
    call {:si_unique_call 2370} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    call {:si_unique_call 2371} sdv_IoMarkIrpPending(0);
    SetFirstStatus_1 := 1;
    FirstStatus_1 := 259;
    goto L87;

  anon32_Then:
    Tmp_151 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    call {:si_unique_call 2372} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  anon25_Then:
    call {:si_unique_call 2373} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_9: int) returns (Tmp_145: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_235: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_212: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_214: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Extension_14: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_634: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_791: int;
  var vslice_dummy_var_792: int;

  anon0:
    call {:si_unique_call 2376} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2377} vslice_dummy_var_633 := __HAVOC_malloc(4);
    Extension_14 := actual_Extension_14;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2378} Tmp_238 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_791;
    call {:si_unique_call 2379} sdv_212 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_791);
    assume {:nonnull} sdv_212 != 0;
    assume sdv_212 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_212)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_13] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_13], BNOT(s_p_e_c_i_a_l_14));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2380} vslice_dummy_var_634 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2381} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_14);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_792;
    call {:si_unique_call 2382} sdv_214 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_792);
    assume {:nonnull} sdv_214 != 0;
    assume sdv_214 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_235;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_235))] := StatusToUse;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_239;
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    goto L28;

  L28:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2383} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_238 := strConst__li2bpl2;
    call {:si_unique_call 2384} vslice_dummy_var_636 := SerialDbgPrintEx(9, Tmp_238);
    call {:si_unique_call 2385} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2386} SerialIRPEpilogue(Extension_14);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    call {:si_unique_call 2387} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2388} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 2389} vslice_dummy_var_635 := SerialStartRead(Extension_14);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    assume false;
    return;

  anon34_Then:
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 2390} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 2391} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon31_Then:
    call {:si_unique_call 2392} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_235: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:pointer} sdv_212: int;
  var {:pointer} newIrp: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} sdv_214: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Extension_14: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_637: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_640: int;
  var vslice_dummy_var_641: int;
  var vslice_dummy_var_793: int;
  var vslice_dummy_var_794: int;

  anon0:
    call {:si_unique_call 2393} newIrp := __HAVOC_malloc(4);
    call {:si_unique_call 2394} vslice_dummy_var_637 := __HAVOC_malloc(4);
    Extension_14 := actual_Extension_14;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    QueueToProcess_1 := actual_QueueToProcess_1;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2395} Tmp_238 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_14 := RefType;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_793;
    call {:si_unique_call 2396} sdv_212 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_793);
    assume {:nonnull} sdv_212 != 0;
    assume sdv_212 > 0;
    s_p_e_c_i_a_l_13 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_212)));
    assume {:nonnull} s_p_e_c_i_a_l_13 != 0;
    assume s_p_e_c_i_a_l_13 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_13] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_13], BNOT(s_p_e_c_i_a_l_14));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2397} vslice_dummy_var_638 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2398} SerialRundownIrpRefs(CurrentOpIrp_2, IntervalTimer, TotalTimer, Extension_14);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc vslice_dummy_var_794;
    call {:si_unique_call 2399} sdv_214 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_794);
    assume {:nonnull} sdv_214 != 0;
    assume sdv_214 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_235;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_235))] := StatusToUse;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc Tmp_239;
    assume {:nonnull} Tmp_239 != 0;
    assume Tmp_239 > 0;
    goto L28;

  L28:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2400} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_238 := strConst__li2bpl2;
    call {:si_unique_call 2401} vslice_dummy_var_641 := SerialDbgPrintEx(9, Tmp_238);
    call {:si_unique_call 2402} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2403} SerialIRPEpilogue(Extension_14);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    call {:si_unique_call 2404} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant1088;
    call {:si_unique_call 2405} SerialGetNextImmediate(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant720;
    call {:si_unique_call 2406} vslice_dummy_var_640 := SerialStartRead(Extension_14);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant569;
    call {:si_unique_call 2407} vslice_dummy_var_639 := SerialStartWrite#0(Extension_14);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant660;
    call {:si_unique_call 2408} SerialGetNextIrp(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant573;
    call {:si_unique_call 2409} SerialGetNextWrite(CurrentOpIrp_2, QueueToProcess_1, newIrp, 1, Extension_14);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon31_Then:
    call {:si_unique_call 2410} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_14: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_2: int, actual_QueueToProcess_1: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWakeCompletion"} SerialWakeCompletion#0(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_3: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} powerState_1: int;
  var {:scalar} status_2: int;
  var {:pointer} SD3: int;
  var {:pointer} Context: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_642: int;

  anon0:
    call {:si_unique_call 2411} PowerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2412} vslice_dummy_var_642 := __HAVOC_malloc(4);
    call {:si_unique_call 2413} powerState_1 := __HAVOC_malloc(8);
    SD3 := actual_SD3;
    Context := actual_Context;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    pDevExt_1 := Context;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    status_2 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus)];
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume false;
    return;

  anon7_Then:
    assume {:partition} 0 > status_2;
    goto L9;

  L9:
    call {:si_unique_call 2414} SerialIRPEpilogue(pDevExt_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialWakeCompletion"} SerialWakeCompletion#0(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWakeCompletion"} SerialWakeCompletion#1(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int)
{
  var {:scalar} PowerState_3: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} powerState_1: int;
  var {:scalar} status_2: int;
  var {:pointer} SD3: int;
  var {:pointer} Context: int;
  var {:pointer} IoStatus: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_644: int;
  var vslice_dummy_var_795: int;

  anon0:
    call {:si_unique_call 2415} PowerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 2416} vslice_dummy_var_643 := __HAVOC_malloc(4);
    call {:si_unique_call 2417} powerState_1 := __HAVOC_malloc(8);
    SD3 := actual_SD3;
    Context := actual_Context;
    IoStatus := actual_IoStatus;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} PowerState_3 != 0;
    assume PowerState_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    pDevExt_1 := Context;
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    status_2 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus)];
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_795;
    call {:si_unique_call 2418} vslice_dummy_var_644 := PoRequestPowerIrp#0(vslice_dummy_var_795, 2, powerState_1, 0, 0, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L9;

  L9:
    call {:si_unique_call 2419} SerialIRPEpilogue(pDevExt_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_2;
    goto L9;
}



procedure {:origName "SerialWakeCompletion"} SerialWakeCompletion#1(actual_PDevObj_2: int, actual_MinorFunction: int, actual_SD3: int, actual_Context: int, actual_IoStatus: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_12: int, actual_Irp_21: int) returns (Tmp_1072: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} SD1_3: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_12: int;
  var vslice_dummy_var_645: int;

  anon0:
    call {:si_unique_call 2420} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_23 := actual_DeviceObject_23;
    MinorFunction_2 := actual_MinorFunction_2;
    SD1_3 := actual_SD1_3;
    CompletionFunction := actual_CompletionFunction;
    Context_12 := actual_Context_12;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1072 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2421} vslice_dummy_var_645 := sdv_RunPowerCompletionRoutines#0(DeviceObject_23, MinorFunction_2, PowerState_1, Context_12, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1072 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1072 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#0(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_12: int, actual_Irp_21: int) returns (Tmp_1072: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_12: int, actual_Irp_21: int) returns (Tmp_1072: int)
{
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} SD1_3: int;
  var {:scalar} CompletionFunction: int;
  var {:pointer} Context_12: int;
  var vslice_dummy_var_646: int;

  anon0:
    call {:si_unique_call 2422} PowerState_1 := __HAVOC_malloc(8);
    DeviceObject_23 := actual_DeviceObject_23;
    MinorFunction_2 := actual_MinorFunction_2;
    SD1_3 := actual_SD1_3;
    CompletionFunction := actual_CompletionFunction;
    Context_12 := actual_Context_12;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1072 := -1073741584;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 2423} vslice_dummy_var_646 := sdv_RunPowerCompletionRoutines#1(DeviceObject_23, MinorFunction_2, PowerState_1, Context_12, IoStatus__IRP(sdv_power_irp), CompletionFunction);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1072 := 259;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_1072 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon14_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp#1(actual_DeviceObject_23: int, actual_MinorFunction_2: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_12: int, actual_Irp_21: int) returns (Tmp_1072: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_13: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_1086: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_24: int;
  var {:scalar} MinorFunction_3: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_13: int;
  var {:pointer} IoStatus_2: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2424} PowerState := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    MinorFunction_3 := actual_MinorFunction_3;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_13 := actual_Context_13;
    IoStatus_2 := actual_IoStatus_2;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant336;
    call {:si_unique_call 2425} sdv_stub_power_completion_begin();
    call {:si_unique_call 2426} SerialSystemPowerCompletion(DeviceObject_24, MinorFunction_3, PowerState, Context_13, IoStatus_2);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant348;
    call {:si_unique_call 2427} sdv_stub_power_completion_begin();
    call {:si_unique_call 2428} SerialWakeCompletion#0(DeviceObject_24, MinorFunction_3, PowerState, Context_13, IoStatus_2);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    Tmp_1086 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant348;
    goto L19;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant336;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#0(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_13: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_1086: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_13: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_1086: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} DeviceObject_24: int;
  var {:scalar} MinorFunction_3: int;
  var {:pointer} structPtr888PowerState: int;
  var {:pointer} Context_13: int;
  var {:pointer} IoStatus_2: int;
  var {:scalar} CompletionFunction_1: int;

  anon0:
    call {:si_unique_call 2429} PowerState := __HAVOC_malloc(8);
    DeviceObject_24 := actual_DeviceObject_24;
    MinorFunction_3 := actual_MinorFunction_3;
    structPtr888PowerState := actual_structPtr888PowerState;
    Context_13 := actual_Context_13;
    IoStatus_2 := actual_IoStatus_2;
    CompletionFunction_1 := actual_CompletionFunction_1;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant336;
    call {:si_unique_call 2430} sdv_stub_power_completion_begin();
    call {:si_unique_call 2431} SerialSystemPowerCompletion(DeviceObject_24, MinorFunction_3, PowerState, Context_13, IoStatus_2);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L6;

  L6:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} CompletionFunction_1 == li2bplFunctionConstant348;
    call {:si_unique_call 2432} sdv_stub_power_completion_begin();
    call {:si_unique_call 2433} SerialWakeCompletion#1(DeviceObject_24, MinorFunction_3, PowerState, Context_13, IoStatus_2);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    CompletionFunction_2 := 1;
    goto L19;

  L19:
    Tmp_1086 := CompletionFunction_2;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant348;
    goto L19;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} CompletionFunction_1 != li2bplFunctionConstant336;
    goto L6;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines#1(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_Context_13: int, actual_IoStatus_2: int, actual_CompletionFunction_1: int) returns (Tmp_1086: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0 || sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPutChar"} SerialPutChar#0(actual_Extension_19: int, actual_CharToPut: int)
{
  var {:pointer} Tmp_356: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:pointer} Tmp_359: int;
  var {:pointer} Tmp_360: int;
  var {:pointer} Tmp_361: int;
  var {:scalar} Tmp_363: int;
  var {:pointer} sdv_318: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:scalar} Tmp_368: int;
  var {:pointer} Extension_19: int;
  var {:scalar} CharToPut: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_652: int;
  var vslice_dummy_var_653: int;
  var vslice_dummy_var_654: int;
  var vslice_dummy_var_796: int;
  var vslice_dummy_var_797: int;
  var vslice_dummy_var_798: int;
  var vslice_dummy_var_799: int;

  anon0:
    call {:si_unique_call 2434} vslice_dummy_var_647 := __HAVOC_malloc(4);
    Extension_19 := actual_Extension_19;
    CharToPut := actual_CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 2435} vslice_dummy_var_648 := SerialHandleModemUpdate#0(Extension_19, 0);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto L4;

  L4:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_360;
    assume {:nonnull} Tmp_360 != 0;
    assume Tmp_360 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_360))] := 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_364;
    assume {:nonnull} Tmp_364 != 0;
    assume Tmp_364 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2436} vslice_dummy_var_654 := SerialInsertQueueDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L10;

  L10:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_359;
    assume {:nonnull} Tmp_359 != 0;
    assume Tmp_359 > 0;
    Mem_T.INT4[Tmp_359] := CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_796;
    call {:si_unique_call 2437} sdv_318 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_796);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_356;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} sdv_318 != 0;
    assume sdv_318 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2438} vslice_dummy_var_650 := SerialInsertQueueDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon60_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_368;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} Tmp_368 == 2;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2439} vslice_dummy_var_653 := SerialClrDTR(Extension_19);
    goto L36;

  L36:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_363;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Tmp_363 == 128;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2440} vslice_dummy_var_652 := SerialClrRTS(Extension_19);
    goto L44;

  L44:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2441} SerialProdXonXoff(Extension_19, 0);
    goto L51;

  L51:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_358;
    assume {:nonnull} Tmp_358 != 0;
    assume Tmp_358 > 0;
    Mem_T.INT4[Tmp_358] := CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_366;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_366 != 0;
    assume Tmp_366 > 0;
    havoc vslice_dummy_var_797;
    Mem_T.INT4[Tmp_366] := vslice_dummy_var_797;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_367;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2442} vslice_dummy_var_651 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L62;

  L62:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon69_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    goto L62;

  anon70_Then:
    goto L62;

  anon79_Then:
    goto L62;

  anon66_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_361;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_361 != 0;
    assume Tmp_361 > 0;
    havoc vslice_dummy_var_798;
    Mem_T.INT4[Tmp_361] := vslice_dummy_var_798;
    goto L78;

  L78:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2443} vslice_dummy_var_649 := SerialInsertQueueDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L1;

  anon72_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_357;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_357 != 0;
    assume Tmp_357 > 0;
    havoc vslice_dummy_var_799;
    Mem_T.INT4[Tmp_357] := vslice_dummy_var_799;
    goto L78;

  anon82_Then:
    goto L78;

  anon68_Then:
    goto L51;

  anon67_Then:
    goto L51;

  anon63_Then:
    goto L51;

  anon65_Then:
    goto L44;

  anon64_Then:
    goto L44;

  anon78_Then:
    assume {:partition} Tmp_363 != 128;
    goto L44;

  anon62_Then:
    goto L36;

  anon61_Then:
    goto L36;

  anon77_Then:
    assume {:partition} Tmp_368 != 2;
    goto L36;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    goto L10;

  anon58_Then:
    goto L10;

  anon59_Then:
    goto L1;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    goto L4;
}



procedure {:origName "SerialPutChar"} SerialPutChar#0(actual_Extension_19: int, actual_CharToPut: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPutChar"} SerialPutChar#1(actual_Extension_19: int, actual_CharToPut: int)
{
  var {:pointer} Tmp_356: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:pointer} Tmp_359: int;
  var {:pointer} Tmp_360: int;
  var {:pointer} Tmp_361: int;
  var {:scalar} Tmp_363: int;
  var {:pointer} sdv_318: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:scalar} Tmp_368: int;
  var {:pointer} Extension_19: int;
  var {:scalar} CharToPut: int;
  var vslice_dummy_var_655: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;
  var vslice_dummy_var_658: int;
  var vslice_dummy_var_659: int;
  var vslice_dummy_var_660: int;
  var vslice_dummy_var_661: int;
  var vslice_dummy_var_662: int;
  var vslice_dummy_var_800: int;
  var vslice_dummy_var_801: int;
  var vslice_dummy_var_802: int;
  var vslice_dummy_var_803: int;

  anon0:
    call {:si_unique_call 2444} vslice_dummy_var_655 := __HAVOC_malloc(4);
    Extension_19 := actual_Extension_19;
    CharToPut := actual_CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 2445} vslice_dummy_var_656 := SerialHandleModemUpdate#1(Extension_19, 0);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto L4;

  L4:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_360;
    assume {:nonnull} Tmp_360 != 0;
    assume Tmp_360 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_360))] := 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_364;
    assume {:nonnull} Tmp_364 != 0;
    assume Tmp_364 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2446} vslice_dummy_var_662 := SerialInsertQueueDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L10;

  L10:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_359;
    assume {:nonnull} Tmp_359 != 0;
    assume Tmp_359 > 0;
    Mem_T.INT4[Tmp_359] := CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_800;
    call {:si_unique_call 2447} sdv_318 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_800);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_356;
    assume {:nonnull} Tmp_356 != 0;
    assume Tmp_356 > 0;
    assume {:nonnull} sdv_318 != 0;
    assume sdv_318 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2448} vslice_dummy_var_658 := SerialInsertQueueDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon60_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_368;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} Tmp_368 == 2;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2449} vslice_dummy_var_661 := SerialClrDTR(Extension_19);
    goto L36;

  L36:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_363;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Tmp_363 == 128;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2450} vslice_dummy_var_660 := SerialClrRTS(Extension_19);
    goto L44;

  L44:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2451} SerialProdXonXoff(Extension_19, 0);
    goto L51;

  L51:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_358;
    assume {:nonnull} Tmp_358 != 0;
    assume Tmp_358 > 0;
    Mem_T.INT4[Tmp_358] := CharToPut;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_366;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_366 != 0;
    assume Tmp_366 > 0;
    havoc vslice_dummy_var_801;
    Mem_T.INT4[Tmp_366] := vslice_dummy_var_801;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_367;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2452} vslice_dummy_var_659 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L62;

  L62:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon69_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L1;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    goto L62;

  anon70_Then:
    goto L62;

  anon79_Then:
    goto L62;

  anon66_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_361;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_361 != 0;
    assume Tmp_361 > 0;
    havoc vslice_dummy_var_802;
    Mem_T.INT4[Tmp_361] := vslice_dummy_var_802;
    goto L78;

  L78:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2453} vslice_dummy_var_657 := SerialInsertQueueDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, Extension_19);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L1;

  anon72_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_357;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_357 != 0;
    assume Tmp_357 > 0;
    havoc vslice_dummy_var_803;
    Mem_T.INT4[Tmp_357] := vslice_dummy_var_803;
    goto L78;

  anon82_Then:
    goto L78;

  anon68_Then:
    goto L51;

  anon67_Then:
    goto L51;

  anon63_Then:
    goto L51;

  anon65_Then:
    goto L44;

  anon64_Then:
    goto L44;

  anon78_Then:
    assume {:partition} Tmp_363 != 128;
    goto L44;

  anon62_Then:
    goto L36;

  anon61_Then:
    goto L36;

  anon77_Then:
    assume {:partition} Tmp_368 != 2;
    goto L36;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    goto L10;

  anon58_Then:
    goto L10;

  anon59_Then:
    goto L1;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    goto L4;
}



procedure {:origName "SerialPutChar"} SerialPutChar#1(actual_Extension_19: int, actual_CharToPut: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialHandleModemUpdate"} SerialHandleModemUpdate#0(actual_Extension_28: int, actual_DoingTX: int) returns (Tmp_692: int)
{
  var {:scalar} ModemStatus: int;
  var {:pointer} Tmp_695: int;
  var {:scalar} OldTXHolding: int;
  var {:scalar} sdv_608: int;
  var {:scalar} Tmp_700: int;
  var {:pointer} Tmp_701: int;
  var {:pointer} Extension_28: int;
  var {:scalar} DoingTX: int;
  var vslice_dummy_var_663: int;
  var vslice_dummy_var_804: int;

  anon0:
    Extension_28 := actual_Extension_28;
    DoingTX := actual_DoingTX;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc OldTXHolding;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2454} ModemStatus := corral_nondet();
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} BAND(ModemStatus, 15) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume false;
    return;

  anon95_Then:
    assume {:partition} BAND(ModemStatus, 15) == 0;
    goto L12;

  L12:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} BAND(ModemStatus, 32) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  L27:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} BAND(ModemStatus, 1) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L30;

  L30:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} BAND(ModemStatus, 2) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L33;

  L33:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} BAND(ModemStatus, 4) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L36;

  L36:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} BAND(ModemStatus, 8) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L39;

  L39:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_695;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    havoc vslice_dummy_var_804;
    Mem_T.INT4[Tmp_695] := vslice_dummy_var_804;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_701;
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2455} vslice_dummy_var_663 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_28), 0, 0, Extension_28);
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  L28:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} BAND(ModemStatus, 16) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  L56:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} BAND(ModemStatus, 32) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  L61:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} BAND(ModemStatus, 128) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  L66:
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} OldTXHolding != 0;
    goto L68;

  L68:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} DoingTX != 0;
    goto L70;

  L70:
    Tmp_692 := ModemStatus;
    goto LM2;

  LM2:
    return;

  anon118_Then:
    assume {:partition} DoingTX == 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} OldTXHolding != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    goto L75;

  L75:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L70;

  anon124_Then:
    goto L70;

  anon122_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    goto L75;

  anon123_Then:
    goto L70;

  anon121_Then:
    goto L70;

  anon120_Then:
    goto L70;

  anon119_Then:
    assume {:partition} OldTXHolding == 0;
    goto L70;

  anon116_Then:
    assume {:partition} OldTXHolding == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_700;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} Tmp_700 == 192;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2456} sdv_608 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_28), 0, 0, Extension_28);
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} yogi_error != 1;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} sdv_608 != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L68;

  anon125_Then:
    assume {:partition} sdv_608 == 0;
    goto L68;

  anon137_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon136_Then:
    assume {:partition} Tmp_700 != 192;
    goto L68;

  anon117_Then:
    goto L68;

  anon115_Then:
    assume {:partition} BAND(ModemStatus, 128) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  anon114_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  anon113_Then:
    assume {:partition} BAND(ModemStatus, 32) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  anon112_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  anon111_Then:
    assume {:partition} BAND(ModemStatus, 16) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  anon110_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  anon98_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} DoingTX == 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} OldTXHolding != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    goto L98;

  L98:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L70;

  anon131_Then:
    goto L70;

  anon129_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    goto L98;

  anon130_Then:
    goto L70;

  anon128_Then:
    goto L70;

  anon127_Then:
    goto L70;

  anon126_Then:
    assume {:partition} OldTXHolding == 0;
    goto L70;

  anon138_Then:
    assume {:partition} DoingTX != 0;
    goto L70;

  anon109_Then:
    goto L70;

  anon135_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    goto L28;

  anon106_Then:
    goto L28;

  anon107_Then:
    assume {:partition} BAND(ModemStatus, 8) == 0;
    goto L39;

  anon104_Then:
    goto L39;

  anon105_Then:
    assume {:partition} BAND(ModemStatus, 4) == 0;
    goto L36;

  anon102_Then:
    goto L36;

  anon103_Then:
    assume {:partition} BAND(ModemStatus, 2) == 0;
    goto L33;

  anon100_Then:
    goto L33;

  anon101_Then:
    assume {:partition} BAND(ModemStatus, 1) == 0;
    goto L30;

  anon99_Then:
    goto L30;

  anon97_Then:
    goto L28;

  anon96_Then:
    assume {:partition} BAND(ModemStatus, 32) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  anon94_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  anon93_Then:
    goto L12;
}



procedure {:origName "SerialHandleModemUpdate"} SerialHandleModemUpdate#0(actual_Extension_28: int, actual_DoingTX: int) returns (Tmp_692: int);
  modifies Mem_T.INT4, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialHandleModemUpdate"} SerialHandleModemUpdate#1(actual_Extension_28: int, actual_DoingTX: int) returns (Tmp_692: int)
{
  var {:scalar} ModemStatus: int;
  var {:pointer} Tmp_695: int;
  var {:scalar} OldTXHolding: int;
  var {:scalar} sdv_608: int;
  var {:scalar} Tmp_700: int;
  var {:pointer} Tmp_701: int;
  var {:pointer} Extension_28: int;
  var {:scalar} DoingTX: int;
  var vslice_dummy_var_664: int;
  var vslice_dummy_var_805: int;
  var vslice_dummy_var_806: int;

  anon0:
    Extension_28 := actual_Extension_28;
    DoingTX := actual_DoingTX;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc OldTXHolding;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2457} ModemStatus := corral_nondet();
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} BAND(ModemStatus, 15) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc vslice_dummy_var_805;
    call {:si_unique_call 2458} SerialPutChar#0(Extension_28, vslice_dummy_var_805);
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2459} SerialPutChar#0(Extension_28, 3);
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2460} SerialPutChar#0(Extension_28, ModemStatus);
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} BAND(ModemStatus, 32) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  L27:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} BAND(ModemStatus, 1) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L30;

  L30:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} BAND(ModemStatus, 2) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L33;

  L33:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} BAND(ModemStatus, 4) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L36;

  L36:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} BAND(ModemStatus, 8) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L39;

  L39:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_695;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    havoc vslice_dummy_var_806;
    Mem_T.INT4[Tmp_695] := vslice_dummy_var_806;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_701;
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2461} vslice_dummy_var_664 := SerialInsertQueueDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(Extension_28), 0, 0, Extension_28);
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  L28:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} BAND(ModemStatus, 16) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  L56:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} BAND(ModemStatus, 32) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  L61:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} BAND(ModemStatus, 128) != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  L66:
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} OldTXHolding != 0;
    goto L68;

  L68:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} DoingTX != 0;
    goto L70;

  L70:
    Tmp_692 := ModemStatus;
    goto LM2;

  LM2:
    return;

  anon118_Then:
    assume {:partition} DoingTX == 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} OldTXHolding != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    goto L75;

  L75:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L70;

  anon124_Then:
    goto L70;

  anon122_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    goto L75;

  anon123_Then:
    goto L70;

  anon121_Then:
    goto L70;

  anon120_Then:
    goto L70;

  anon119_Then:
    assume {:partition} OldTXHolding == 0;
    goto L70;

  anon116_Then:
    assume {:partition} OldTXHolding == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc Tmp_700;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} Tmp_700 == 192;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    call {:si_unique_call 2462} sdv_608 := SerialInsertQueueDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(Extension_28), 0, 0, Extension_28);
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} yogi_error != 1;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} sdv_608 != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L68;

  anon125_Then:
    assume {:partition} sdv_608 == 0;
    goto L68;

  anon137_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon136_Then:
    assume {:partition} Tmp_700 != 192;
    goto L68;

  anon117_Then:
    goto L68;

  anon115_Then:
    assume {:partition} BAND(ModemStatus, 128) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  anon114_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L66;

  anon113_Then:
    assume {:partition} BAND(ModemStatus, 32) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  anon112_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L61;

  anon111_Then:
    assume {:partition} BAND(ModemStatus, 16) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  anon110_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L56;

  anon98_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} DoingTX == 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} OldTXHolding != 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    goto L98;

  L98:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L70;

  anon131_Then:
    goto L70;

  anon129_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    goto L98;

  anon130_Then:
    goto L70;

  anon128_Then:
    goto L70;

  anon127_Then:
    goto L70;

  anon126_Then:
    assume {:partition} OldTXHolding == 0;
    goto L70;

  anon138_Then:
    assume {:partition} DoingTX != 0;
    goto L70;

  anon109_Then:
    goto L70;

  anon135_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    goto L28;

  anon106_Then:
    goto L28;

  anon107_Then:
    assume {:partition} BAND(ModemStatus, 8) == 0;
    goto L39;

  anon104_Then:
    goto L39;

  anon105_Then:
    assume {:partition} BAND(ModemStatus, 4) == 0;
    goto L36;

  anon102_Then:
    goto L36;

  anon103_Then:
    assume {:partition} BAND(ModemStatus, 2) == 0;
    goto L33;

  anon100_Then:
    goto L33;

  anon101_Then:
    assume {:partition} BAND(ModemStatus, 1) == 0;
    goto L30;

  anon99_Then:
    goto L30;

  anon97_Then:
    goto L28;

  anon96_Then:
    assume {:partition} BAND(ModemStatus, 32) == 0;
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  anon94_Then:
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    goto L27;

  anon134_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon133_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon132_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon95_Then:
    assume {:partition} BAND(ModemStatus, 15) == 0;
    goto L12;

  anon93_Then:
    goto L12;
}



procedure {:origName "SerialHandleModemUpdate"} SerialHandleModemUpdate#1(actual_Extension_28: int, actual_DoingTX: int) returns (Tmp_692: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation SerialStartMask_loop_L11(in_Tmp_91: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_92: int, in_Tmp_93: int, in_FirstStatus: int, in_Tmp_95: int, in_SetFirstStatus: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_Tmp_102: int, in_Tmp_103: int, in_Tmp_104: int, in_Tmp_105: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_106: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_82: int, in_Tmp_107: int, in_sdv_85: int, in_Tmp_108: int, in_Tmp_109: int, in_Extension_2: int, in_vslice_dummy_var_53: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_56: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int, in_vslice_dummy_var_67: int, in_vslice_dummy_var_68: int, in_vslice_dummy_var_69: int) returns (out_Tmp_91: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_92: int, out_Tmp_93: int, out_FirstStatus: int, out_Tmp_95: int, out_SetFirstStatus: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_102: int, out_Tmp_103: int, out_Tmp_104: int, out_Tmp_105: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_106: int, out_s_p_e_c_i_a_l_2: int, out_sdv_82: int, out_Tmp_107: int, out_sdv_85: int, out_Tmp_108: int, out_Tmp_109: int, out_vslice_dummy_var_53: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_56: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int, out_vslice_dummy_var_67: int, out_vslice_dummy_var_68: int, out_vslice_dummy_var_69: int)
{
  var vslice_dummy_var_807: int;
  var vslice_dummy_var_808: int;
  var vslice_dummy_var_809: int;
  var vslice_dummy_var_810: int;

  entry:
    out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, out_s_p_e_c_i_a_l_2, out_sdv_82, out_Tmp_107, out_sdv_85, out_Tmp_108, out_Tmp_109, out_vslice_dummy_var_53, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69 := in_Tmp_91, in_s_p_e_c_i_a_l_1, in_Tmp_92, in_Tmp_93, in_FirstStatus, in_Tmp_95, in_SetFirstStatus, in_Tmp_96, in_Tmp_97, in_Tmp_98, in_Tmp_99, in_Tmp_100, in_Tmp_101, in_Tmp_102, in_Tmp_103, in_Tmp_104, in_Tmp_105, in_IrpSp, in_OldIrql, in_Tmp_106, in_s_p_e_c_i_a_l_2, in_sdv_82, in_Tmp_107, in_sdv_85, in_Tmp_108, in_Tmp_109, in_vslice_dummy_var_53, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69;
    goto L11, exit;

  exit:
    return;

  L11:
    out_Tmp_100 := strConst__li2bpl26;
    call {:si_unique_call 2463} out_vslice_dummy_var_55 := SerialDbgPrintEx(7, out_Tmp_100);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_807;
    call {:si_unique_call 2464} out_IrpSp := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_807);
    assume {:nonnull} out_IrpSp != 0;
    assume out_IrpSp > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    out_Tmp_95 := strConst__li2bpl27;
    call {:si_unique_call 2488} out_vslice_dummy_var_56 := SerialDbgPrintEx(7, out_Tmp_95);
    call {:si_unique_call 2489} out_vslice_dummy_var_53 := KeSynchronizeExecution(0, li2bplFunctionConstant618, 0);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_106;
    assume {:nonnull} out_Tmp_106 != 0;
    assume out_Tmp_106 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_106))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L31;

  L31:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 2486} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_91 := strConst__li2bpl29;
    call {:si_unique_call 2465} out_vslice_dummy_var_57 := SerialDbgPrintEx(7, out_Tmp_91);
    goto L37;

  L37:
    assume {:nonnull} in_NewIrp != 0;
    assume in_NewIrp > 0;
    goto anon29_Then;

  anon29_Then:
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    call {:si_unique_call 2490} {:si_old_unique_call 1} out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, out_s_p_e_c_i_a_l_2, out_sdv_82, out_Tmp_107, out_sdv_85, out_Tmp_108, out_Tmp_109, out_vslice_dummy_var_53, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69 := SerialStartMask_loop_L11(out_Tmp_91, out_s_p_e_c_i_a_l_1, out_Tmp_92, out_Tmp_93, out_FirstStatus, out_Tmp_95, out_SetFirstStatus, out_Tmp_96, out_Tmp_97, out_Tmp_98, out_Tmp_99, out_Tmp_100, out_Tmp_101, out_Tmp_102, out_Tmp_103, out_Tmp_104, out_Tmp_105, out_IrpSp, out_OldIrql, out_Tmp_106, in_NewIrp, out_s_p_e_c_i_a_l_2, out_sdv_82, out_Tmp_107, out_sdv_85, out_Tmp_108, out_Tmp_109, in_Extension_2, out_vslice_dummy_var_53, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69);
    return;

  anon32_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_103 := strConst__li2bpl28;
    call {:si_unique_call 2487} out_vslice_dummy_var_58 := SerialDbgPrintEx(7, out_Tmp_103);
    out_FirstStatus := 0;
    out_SetFirstStatus := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2480} out_Tmp_101 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_101 != 0;
    assume out_Tmp_101 > 0;
    Mem_T.INT4[out_Tmp_101] := out_OldIrql;
    call {:si_unique_call 2481} IoAcquireCancelSpinLock(out_Tmp_101);
    assume {:nonnull} out_Tmp_101 != 0;
    assume out_Tmp_101 > 0;
    out_OldIrql := Mem_T.INT4[out_Tmp_101];
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_99;
    assume {:nonnull} out_Tmp_99 != 0;
    assume out_Tmp_99 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    out_Tmp_104 := strConst__li2bpl32;
    call {:si_unique_call 2484} out_vslice_dummy_var_62 := SerialDbgPrintEx(7, out_Tmp_104);
    call {:si_unique_call 2485} IoReleaseCancelSpinLock(out_OldIrql);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_107;
    assume {:nonnull} out_Tmp_107 != 0;
    assume out_Tmp_107 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_107))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L64;

  L64:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 2482} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    goto anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_105 := strConst__li2bpl29;
    call {:si_unique_call 2466} out_vslice_dummy_var_63 := SerialDbgPrintEx(7, out_Tmp_105);
    goto L37;

  anon37_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_102 := strConst__li2bpl28;
    call {:si_unique_call 2483} out_vslice_dummy_var_64 := SerialDbgPrintEx(7, out_Tmp_102);
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L64;

  anon36_Then:
    out_Tmp_92 := strConst__li2bpl31;
    call {:si_unique_call 2479} out_vslice_dummy_var_65 := SerialDbgPrintEx(7, out_Tmp_92);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L76;

  L76:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_808;
    call {:si_unique_call 2472} out_sdv_82 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_808);
    assume {:nonnull} out_sdv_82 != 0;
    assume out_sdv_82 > 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_809;
    call {:si_unique_call 2473} out_vslice_dummy_var_66 := sdv_IoSetCancelRoutine(vslice_dummy_var_809, li2bplFunctionConstant619);
    out_s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc vslice_dummy_var_810;
    call {:si_unique_call 2474} out_sdv_85 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_810);
    assume {:nonnull} out_sdv_85 != 0;
    assume out_sdv_85 > 0;
    out_s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_85)));
    assume {:nonnull} out_s_p_e_c_i_a_l_1 != 0;
    assume out_s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_1], out_s_p_e_c_i_a_l_2);
    call {:si_unique_call 2475} out_vslice_dummy_var_67 := KeSynchronizeExecution(0, li2bplFunctionConstant620, 0);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 2476} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 0, in_Extension_2, out_OldIrql);
    goto anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_96 := strConst__li2bpl29;
    call {:si_unique_call 2467} out_vslice_dummy_var_68 := SerialDbgPrintEx(7, out_Tmp_96);
    goto L37;

  anon31_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_97 := strConst__li2bpl28;
    call {:si_unique_call 2477} out_vslice_dummy_var_69 := SerialDbgPrintEx(7, out_Tmp_97);
    out_FirstStatus := 259;
    out_SetFirstStatus := 1;
    call {:si_unique_call 2478} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    goto L41;

  L41:
    out_Tmp_108 := strConst__li2bpl30;
    call {:si_unique_call 2471} out_vslice_dummy_var_59 := SerialDbgPrintEx(7, out_Tmp_108);
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    havoc out_Tmp_109;
    assume {:nonnull} out_Tmp_109 != 0;
    assume out_Tmp_109 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_109))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L112;

  L112:
    assume {:nonnull} in_Extension_2 != 0;
    assume in_Extension_2 > 0;
    call {:si_unique_call 2469} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_2), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_2), in_NewIrp, 1, in_Extension_2);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_98 := strConst__li2bpl29;
    call {:si_unique_call 2468} out_vslice_dummy_var_60 := SerialDbgPrintEx(7, out_Tmp_98);
    goto L37;

  anon34_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_Tmp_93 := strConst__li2bpl28;
    call {:si_unique_call 2470} out_vslice_dummy_var_61 := SerialDbgPrintEx(7, out_Tmp_93);
    out_FirstStatus := -1073741811;
    out_SetFirstStatus := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:LoopProcedure} SerialStartMask_loop_L11(in_Tmp_91: int, in_s_p_e_c_i_a_l_1: int, in_Tmp_92: int, in_Tmp_93: int, in_FirstStatus: int, in_Tmp_95: int, in_SetFirstStatus: int, in_Tmp_96: int, in_Tmp_97: int, in_Tmp_98: int, in_Tmp_99: int, in_Tmp_100: int, in_Tmp_101: int, in_Tmp_102: int, in_Tmp_103: int, in_Tmp_104: int, in_Tmp_105: int, in_IrpSp: int, in_OldIrql: int, in_Tmp_106: int, in_NewIrp: int, in_s_p_e_c_i_a_l_2: int, in_sdv_82: int, in_Tmp_107: int, in_sdv_85: int, in_Tmp_108: int, in_Tmp_109: int, in_Extension_2: int, in_vslice_dummy_var_53: int, in_vslice_dummy_var_55: int, in_vslice_dummy_var_56: int, in_vslice_dummy_var_57: int, in_vslice_dummy_var_58: int, in_vslice_dummy_var_59: int, in_vslice_dummy_var_60: int, in_vslice_dummy_var_61: int, in_vslice_dummy_var_62: int, in_vslice_dummy_var_63: int, in_vslice_dummy_var_64: int, in_vslice_dummy_var_65: int, in_vslice_dummy_var_66: int, in_vslice_dummy_var_67: int, in_vslice_dummy_var_68: int, in_vslice_dummy_var_69: int) returns (out_Tmp_91: int, out_s_p_e_c_i_a_l_1: int, out_Tmp_92: int, out_Tmp_93: int, out_FirstStatus: int, out_Tmp_95: int, out_SetFirstStatus: int, out_Tmp_96: int, out_Tmp_97: int, out_Tmp_98: int, out_Tmp_99: int, out_Tmp_100: int, out_Tmp_101: int, out_Tmp_102: int, out_Tmp_103: int, out_Tmp_104: int, out_Tmp_105: int, out_IrpSp: int, out_OldIrql: int, out_Tmp_106: int, out_s_p_e_c_i_a_l_2: int, out_sdv_82: int, out_Tmp_107: int, out_sdv_85: int, out_Tmp_108: int, out_Tmp_109: int, out_vslice_dummy_var_53: int, out_vslice_dummy_var_55: int, out_vslice_dummy_var_56: int, out_vslice_dummy_var_57: int, out_vslice_dummy_var_58: int, out_vslice_dummy_var_59: int, out_vslice_dummy_var_60: int, out_vslice_dummy_var_61: int, out_vslice_dummy_var_62: int, out_vslice_dummy_var_63: int, out_vslice_dummy_var_64: int, out_vslice_dummy_var_65: int, out_vslice_dummy_var_66: int, out_vslice_dummy_var_67: int, out_vslice_dummy_var_68: int, out_vslice_dummy_var_69: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_FirstStatus == 0 || out_FirstStatus == -1073741536 || out_FirstStatus == 259 || out_FirstStatus == -1073741811 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_2 == 2 || out_s_p_e_c_i_a_l_2 == in_s_p_e_c_i_a_l_2;
  free ensures {:va_keep} out_vslice_dummy_var_53 == 1 || out_vslice_dummy_var_53 == 0 || out_vslice_dummy_var_53 == in_vslice_dummy_var_53;
  free ensures {:va_keep} out_vslice_dummy_var_55 == 0 || out_vslice_dummy_var_55 == in_vslice_dummy_var_55;
  free ensures {:va_keep} out_vslice_dummy_var_56 == 0 || out_vslice_dummy_var_56 == in_vslice_dummy_var_56;
  free ensures {:va_keep} out_vslice_dummy_var_57 == 0 || out_vslice_dummy_var_57 == in_vslice_dummy_var_57;
  free ensures {:va_keep} out_vslice_dummy_var_58 == 0 || out_vslice_dummy_var_58 == in_vslice_dummy_var_58;
  free ensures {:va_keep} out_vslice_dummy_var_59 == 0 || out_vslice_dummy_var_59 == in_vslice_dummy_var_59;
  free ensures {:va_keep} out_vslice_dummy_var_60 == 0 || out_vslice_dummy_var_60 == in_vslice_dummy_var_60;
  free ensures {:va_keep} out_vslice_dummy_var_61 == 0 || out_vslice_dummy_var_61 == in_vslice_dummy_var_61;
  free ensures {:va_keep} out_vslice_dummy_var_62 == 0 || out_vslice_dummy_var_62 == in_vslice_dummy_var_62;
  free ensures {:va_keep} out_vslice_dummy_var_63 == 0 || out_vslice_dummy_var_63 == in_vslice_dummy_var_63;
  free ensures {:va_keep} out_vslice_dummy_var_64 == 0 || out_vslice_dummy_var_64 == in_vslice_dummy_var_64;
  free ensures {:va_keep} out_vslice_dummy_var_65 == 0 || out_vslice_dummy_var_65 == in_vslice_dummy_var_65;
  free ensures {:va_keep} out_vslice_dummy_var_67 == 1 || out_vslice_dummy_var_67 == 0 || out_vslice_dummy_var_67 == in_vslice_dummy_var_67;
  free ensures {:va_keep} out_vslice_dummy_var_68 == 0 || out_vslice_dummy_var_68 == in_vslice_dummy_var_68;
  free ensures {:va_keep} out_vslice_dummy_var_69 == 0 || out_vslice_dummy_var_69 == in_vslice_dummy_var_69;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_107: int, in_Irp_3: int, in_OldIrql_5: int, in_sdv_110: int, in_sdv_112: int, in_CompleteCurrent_1: int, in_OldIrql_6: int, in_s_p_e_c_i_a_l_4: int, in_sdv_114: int, in_sdv_115: int, in_sdv_116: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_143: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_144: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_8: int, in_vslice_dummy_var_94: int, in_vslice_dummy_var_97: int, in_vslice_dummy_var_98: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_107: int, out_Irp_3: int, out_OldIrql_5: int, out_sdv_110: int, out_sdv_112: int, out_OldIrql_6: int, out_s_p_e_c_i_a_l_4: int, out_sdv_114: int, out_sdv_115: int, out_sdv_116: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_143: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_144: int, out_CompleteCurrent: int, out_vslice_dummy_var_94: int, out_vslice_dummy_var_97: int, out_vslice_dummy_var_98: int)
{
  var vslice_dummy_var_811: int;
  var vslice_dummy_var_812: int;
  var vslice_dummy_var_813: int;
  var vslice_dummy_var_814: int;

  entry:
    out_s_p_e_c_i_a_l_3, out_sdv_107, out_Irp_3, out_OldIrql_5, out_sdv_110, out_sdv_112, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_114, out_sdv_115, out_sdv_116, out_s_p_e_c_i_a_l_5, out_Tmp_143, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, out_CompleteCurrent, out_vslice_dummy_var_94, out_vslice_dummy_var_97, out_vslice_dummy_var_98 := in_s_p_e_c_i_a_l_3, in_sdv_107, in_Irp_3, in_OldIrql_5, in_sdv_110, in_sdv_112, in_OldIrql_6, in_s_p_e_c_i_a_l_4, in_sdv_114, in_sdv_115, in_sdv_116, in_s_p_e_c_i_a_l_5, in_Tmp_143, in_Xc, in_s_p_e_c_i_a_l_6, in_Tmp_144, in_CompleteCurrent, in_vslice_dummy_var_94, in_vslice_dummy_var_97, in_vslice_dummy_var_98;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_811;
    call {:si_unique_call 2491} out_sdv_112 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_811);
    assume {:nonnull} out_sdv_112 != 0;
    assume out_sdv_112 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 2494} out_Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    Mem_T.INT4[out_Tmp_144] := out_OldIrql_6;
    call {:si_unique_call 2495} IoAcquireCancelSpinLock(out_Tmp_144);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    out_OldIrql_6 := Mem_T.INT4[out_Tmp_144];
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_813;
    call {:si_unique_call 2496} out_sdv_116 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_813);
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    assume {:nonnull} out_sdv_116 != 0;
    assume out_sdv_116 > 0;
    call {:si_unique_call 2497} IoReleaseCancelSpinLock(out_OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 2493} SerialGetNextIrp(in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_8);
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    goto anon18_Then;

  anon18_Then:
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    havoc vslice_dummy_var_812;
    call {:si_unique_call 2492} out_sdv_115 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_812);
    assume {:nonnull} out_sdv_115 != 0;
    assume out_sdv_115 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:nonnull} in_NewIrp_1 != 0;
    assume in_NewIrp_1 > 0;
    havoc out_Tmp_143;
    assume {:nonnull} out_Tmp_143 != 0;
    assume out_Tmp_143 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_143))] := 0;
    out_CompleteCurrent := in_CompleteCurrent_1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2507} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_3, out_sdv_107, out_Irp_3, out_OldIrql_5, out_sdv_110, out_sdv_112, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_114, out_sdv_115, out_sdv_116, out_s_p_e_c_i_a_l_5, out_Tmp_143, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, out_CompleteCurrent, out_vslice_dummy_var_94, out_vslice_dummy_var_97, out_vslice_dummy_var_98 := SerialGetNextWrite_loop_L8(out_s_p_e_c_i_a_l_3, out_sdv_107, out_Irp_3, out_OldIrql_5, out_sdv_110, out_sdv_112, in_CompleteCurrent_1, out_OldIrql_6, out_s_p_e_c_i_a_l_4, out_sdv_114, out_sdv_115, out_sdv_116, out_s_p_e_c_i_a_l_5, out_Tmp_143, in_delta, out_Xc, out_s_p_e_c_i_a_l_6, out_Tmp_144, in_CurrentOpIrp, in_QueueToProcess, in_NewIrp_1, out_CompleteCurrent, in_Extension_8, out_vslice_dummy_var_94, out_vslice_dummy_var_97, out_vslice_dummy_var_98);
    return;

  anon17_Then:
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc vslice_dummy_var_814;
    call {:si_unique_call 2499} out_sdv_114 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_814);
    assume {:nonnull} out_sdv_114 != 0;
    assume out_sdv_114 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 2505} out_Tmp_144 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    Mem_T.INT4[out_Tmp_144] := out_OldIrql_5;
    call {:si_unique_call 2506} IoAcquireCancelSpinLock(out_Tmp_144);
    assume {:nonnull} out_Tmp_144 != 0;
    assume out_Tmp_144 > 0;
    out_OldIrql_5 := Mem_T.INT4[out_Tmp_144];
    assume {:nonnull} in_CurrentOpIrp != 0;
    assume in_CurrentOpIrp > 0;
    havoc out_Irp_3;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    havoc out_Xc;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 2498} IoReleaseCancelSpinLock(out_OldIrql_5);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] == 0;
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_3))] := -1073741536;
    goto L64;

  anon21_Then:
    call {:si_unique_call 2502} out_vslice_dummy_var_94 := sdv_IoSetCancelRoutine(out_Irp_3, li2bplFunctionConstant575);
    out_s_p_e_c_i_a_l_4 := 2;
    call {:si_unique_call 2503} out_sdv_110 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_110 != 0;
    assume out_sdv_110 > 0;
    out_s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_110)));
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_3], out_s_p_e_c_i_a_l_4);
    out_CompleteCurrent := 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    call {:si_unique_call 2504} out_vslice_dummy_var_97 := KeSynchronizeExecution(0, li2bplFunctionConstant576, 0);
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} out_Xc != 0;
    assume out_Xc > 0;
    assume {:nonnull} in_delta != 0;
    assume in_delta > 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    call {:si_unique_call 2500} out_vslice_dummy_var_98 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_8), in_delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(in_Extension_8), in_Extension_8);
    out_s_p_e_c_i_a_l_6 := 4;
    call {:si_unique_call 2501} out_sdv_107 := sdv_IoGetCurrentIrpStackLocation(out_Irp_3);
    assume {:nonnull} out_sdv_107 != 0;
    assume out_sdv_107 > 0;
    out_s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_107)));
    assume {:nonnull} out_s_p_e_c_i_a_l_5 != 0;
    assume out_s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_5], out_s_p_e_c_i_a_l_6);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    goto L26;
}



procedure {:LoopProcedure} SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_3: int, in_sdv_107: int, in_Irp_3: int, in_OldIrql_5: int, in_sdv_110: int, in_sdv_112: int, in_CompleteCurrent_1: int, in_OldIrql_6: int, in_s_p_e_c_i_a_l_4: int, in_sdv_114: int, in_sdv_115: int, in_sdv_116: int, in_s_p_e_c_i_a_l_5: int, in_Tmp_143: int, in_delta: int, in_Xc: int, in_s_p_e_c_i_a_l_6: int, in_Tmp_144: int, in_CurrentOpIrp: int, in_QueueToProcess: int, in_NewIrp_1: int, in_CompleteCurrent: int, in_Extension_8: int, in_vslice_dummy_var_94: int, in_vslice_dummy_var_97: int, in_vslice_dummy_var_98: int) returns (out_s_p_e_c_i_a_l_3: int, out_sdv_107: int, out_Irp_3: int, out_OldIrql_5: int, out_sdv_110: int, out_sdv_112: int, out_OldIrql_6: int, out_s_p_e_c_i_a_l_4: int, out_sdv_114: int, out_sdv_115: int, out_sdv_116: int, out_s_p_e_c_i_a_l_5: int, out_Tmp_143: int, out_Xc: int, out_s_p_e_c_i_a_l_6: int, out_Tmp_144: int, out_CompleteCurrent: int, out_vslice_dummy_var_94: int, out_vslice_dummy_var_97: int, out_vslice_dummy_var_98: int);
  modifies Mem_T.INT4, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_s_p_e_c_i_a_l_4 == 2 || out_s_p_e_c_i_a_l_4 == in_s_p_e_c_i_a_l_4;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_6 == 4 || out_s_p_e_c_i_a_l_6 == in_s_p_e_c_i_a_l_6;
  free ensures {:va_keep} out_CompleteCurrent == in_CompleteCurrent || out_CompleteCurrent == in_CompleteCurrent_1;
  free ensures {:va_keep} out_vslice_dummy_var_97 == 1 || out_vslice_dummy_var_97 == 0 || out_vslice_dummy_var_97 == in_vslice_dummy_var_97;
  free ensures {:va_keep} out_vslice_dummy_var_98 == 1 || out_vslice_dummy_var_98 == 0 || out_vslice_dummy_var_98 == in_vslice_dummy_var_98;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L122(in_flushCount: int, in_sdv_133: int, in_Tmp_171: int, in_extension: int, in_vslice_dummy_var_104: int) returns (out_flushCount: int, out_sdv_133: int, out_Tmp_171: int, out_vslice_dummy_var_104: int)
{

  entry:
    out_flushCount, out_sdv_133, out_Tmp_171, out_vslice_dummy_var_104 := in_flushCount, in_sdv_133, in_Tmp_171, in_vslice_dummy_var_104;
    goto L122, exit;

  exit:
    return;

  L122:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon55_Else;

  anon55_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2509} out_sdv_133 := corral_nondet();
    out_Tmp_171 := BAND(out_sdv_133, BOR(32, 64));
    goto anon64_Else;

  anon64_Else:
    assume {:partition} out_Tmp_171 != 96;
    call {:si_unique_call 2508} out_vslice_dummy_var_104 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L122(in_flushCount: int, in_sdv_133: int, in_Tmp_171: int, in_extension: int, in_vslice_dummy_var_104: int) returns (out_flushCount: int, out_sdv_133: int, out_Tmp_171: int, out_vslice_dummy_var_104: int);
  free ensures {:va_keep} out_vslice_dummy_var_104 == 0 || out_vslice_dummy_var_104 == -1073741823 || out_vslice_dummy_var_104 == in_vslice_dummy_var_104;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L109(in_sdv_154: int, in_extension: int, in_vslice_dummy_var_103: int) returns (out_sdv_154: int, out_vslice_dummy_var_103: int)
{

  entry:
    out_sdv_154, out_vslice_dummy_var_103 := in_sdv_154, in_vslice_dummy_var_103;
    goto L109, exit;

  exit:
    return;

  L109:
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2510} out_sdv_154 := corral_nondet();
    goto anon54_Then;

  anon54_Then:
    assume {:partition} BAND(out_sdv_154, 32) == 0;
    call {:si_unique_call 2511} out_vslice_dummy_var_103 := KeDelayExecutionThread(0, 0, 0);
    goto anon54_Then_dummy;

  anon54_Then_dummy:
    call {:si_unique_call 2512} {:si_old_unique_call 1} out_sdv_154, out_vslice_dummy_var_103 := SerialClose_loop_L109(out_sdv_154, in_extension, out_vslice_dummy_var_103);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L109(in_sdv_154: int, in_extension: int, in_vslice_dummy_var_103: int) returns (out_sdv_154: int, out_vslice_dummy_var_103: int);
  free ensures {:va_keep} out_vslice_dummy_var_103 == 0 || out_vslice_dummy_var_103 == -1073741823 || out_vslice_dummy_var_103 == in_vslice_dummy_var_103;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_107: int) returns (out_vslice_dummy_var_107: int)
{

  entry:
    out_vslice_dummy_var_107 := in_vslice_dummy_var_107;
    goto L148, exit;

  exit:
    return;

  L148:
    call {:si_unique_call 2513} out_vslice_dummy_var_107 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    goto anon58_Then;

  anon58_Then:
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    call {:si_unique_call 2514} {:si_old_unique_call 1} out_vslice_dummy_var_107 := SerialClose_loop_L148(in_extension, out_vslice_dummy_var_107);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L148(in_extension: int, in_vslice_dummy_var_107: int) returns (out_vslice_dummy_var_107: int);
  free ensures {:va_keep} out_vslice_dummy_var_107 == 0 || out_vslice_dummy_var_107 == -1073741823 || out_vslice_dummy_var_107 == in_vslice_dummy_var_107;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L88(in_flushCount: int, in_sdv_132: int, in_Tmp_167: int, in_extension: int, in_vslice_dummy_var_101: int) returns (out_flushCount: int, out_sdv_132: int, out_Tmp_167: int, out_vslice_dummy_var_101: int)
{

  entry:
    out_flushCount, out_sdv_132, out_Tmp_167, out_vslice_dummy_var_101 := in_flushCount, in_sdv_132, in_Tmp_167, in_vslice_dummy_var_101;
    goto L88, exit;

  exit:
    return;

  L88:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension != 0;
    assume in_extension > 0;
    call {:si_unique_call 2516} out_sdv_132 := corral_nondet();
    out_Tmp_167 := BAND(out_sdv_132, BOR(32, 64));
    goto anon63_Else;

  anon63_Else:
    assume {:partition} out_Tmp_167 != 96;
    call {:si_unique_call 2515} out_vslice_dummy_var_101 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon63_Else_dummy;

  anon63_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L88(in_flushCount: int, in_sdv_132: int, in_Tmp_167: int, in_extension: int, in_vslice_dummy_var_101: int) returns (out_flushCount: int, out_sdv_132: int, out_Tmp_167: int, out_vslice_dummy_var_101: int);
  free ensures {:va_keep} out_vslice_dummy_var_101 == 0 || out_vslice_dummy_var_101 == -1073741823 || out_vslice_dummy_var_101 == in_vslice_dummy_var_101;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialDrainUART_loop_L6(in_Tmp_199: int, in_sdv_189: int, in_PDevExt_5: int, in_vslice_dummy_var_148: int) returns (out_Tmp_199: int, out_sdv_189: int, out_vslice_dummy_var_148: int)
{

  entry:
    out_Tmp_199, out_sdv_189, out_vslice_dummy_var_148 := in_Tmp_199, in_sdv_189, in_vslice_dummy_var_148;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_PDevExt_5 != 0;
    assume in_PDevExt_5 > 0;
    call {:si_unique_call 2517} out_sdv_189 := corral_nondet();
    out_Tmp_199 := BAND(out_sdv_189, BOR(32, 64));
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Tmp_199 != 96;
    call {:si_unique_call 2518} out_vslice_dummy_var_148 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2519} {:si_old_unique_call 1} out_Tmp_199, out_sdv_189, out_vslice_dummy_var_148 := SerialDrainUART_loop_L6(out_Tmp_199, out_sdv_189, in_PDevExt_5, out_vslice_dummy_var_148);
    return;
}



procedure {:LoopProcedure} SerialDrainUART_loop_L6(in_Tmp_199: int, in_sdv_189: int, in_PDevExt_5: int, in_vslice_dummy_var_148: int) returns (out_Tmp_199: int, out_sdv_189: int, out_vslice_dummy_var_148: int);
  free ensures {:va_keep} out_vslice_dummy_var_148 == 0 || out_vslice_dummy_var_148 == -1073741823 || out_vslice_dummy_var_148 == in_vslice_dummy_var_148;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartPurge_loop_L5(in_Tmp_204: int, in_Tmp_205: int, in_Mask: int, in_Tmp_206: int, in_OldIrql_8: int, in_NewIrp_3: int, in_Tmp_207: int, in_Tmp_208: int, in_Extension_12: int, in_vslice_dummy_var_149: int) returns (out_Tmp_204: int, out_Tmp_205: int, out_Mask: int, out_Tmp_206: int, out_OldIrql_8: int, out_Tmp_207: int, out_Tmp_208: int, out_vslice_dummy_var_149: int)
{
  var vslice_dummy_var_815: int;
  var vslice_dummy_var_816: int;
  var vslice_dummy_var_817: int;

  entry:
    out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, out_Tmp_207, out_Tmp_208, out_vslice_dummy_var_149 := in_Tmp_204, in_Tmp_205, in_Mask, in_Tmp_206, in_OldIrql_8, in_Tmp_207, in_Tmp_208, in_vslice_dummy_var_149;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_206;
    assume {:nonnull} out_Tmp_206 != 0;
    assume out_Tmp_206 > 0;
    havoc out_Tmp_208;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    out_Mask := Mem_T.INT4[out_Tmp_208];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_Mask, 1) != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_816;
    call {:si_unique_call 2526} SerialKillAllReadsOrWrites(vslice_dummy_var_816, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_815;
    call {:si_unique_call 2525} SerialKillAllReadsOrWrites(vslice_dummy_var_815, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(out_Mask, 2) != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc vslice_dummy_var_817;
    call {:si_unique_call 2527} SerialKillAllReadsOrWrites(vslice_dummy_var_817, ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12));
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(out_Mask, 8) != 0;
    call {:si_unique_call 2521} out_Tmp_205 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_205 != 0;
    assume out_Tmp_205 > 0;
    Mem_T.INT4[out_Tmp_205] := out_OldIrql_8;
    call {:si_unique_call 2522} sdv_KeAcquireSpinLock(0, out_Tmp_205);
    assume {:nonnull} out_Tmp_205 != 0;
    assume out_Tmp_205 > 0;
    out_OldIrql_8 := Mem_T.INT4[out_Tmp_205];
    call {:si_unique_call 2523} out_vslice_dummy_var_149 := KeSynchronizeExecution(0, li2bplFunctionConstant806, 0);
    call {:si_unique_call 2524} sdv_KeReleaseSpinLock(0, out_OldIrql_8);
    goto L18;

  L18:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_204;
    assume {:nonnull} out_Tmp_204 != 0;
    assume out_Tmp_204 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_204))] := 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    havoc out_Tmp_207;
    assume {:nonnull} out_Tmp_207 != 0;
    assume out_Tmp_207 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2520} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12), PurgeQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), in_NewIrp_3, 1, in_Extension_12);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon19_Then;

  anon19_Then:
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2528} {:si_old_unique_call 1} out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, out_Tmp_207, out_Tmp_208, out_vslice_dummy_var_149 := SerialStartPurge_loop_L5(out_Tmp_204, out_Tmp_205, out_Mask, out_Tmp_206, out_OldIrql_8, in_NewIrp_3, out_Tmp_207, out_Tmp_208, in_Extension_12, out_vslice_dummy_var_149);
    return;

  anon18_Then:
    assume {:partition} BAND(out_Mask, 8) == 0;
    goto L18;

  anon17_Then:
    assume {:partition} BAND(out_Mask, 2) == 0;
    goto L14;

  anon20_Then:
    assume {:partition} BAND(out_Mask, 1) == 0;
    goto L7;
}



procedure {:LoopProcedure} SerialStartPurge_loop_L5(in_Tmp_204: int, in_Tmp_205: int, in_Mask: int, in_Tmp_206: int, in_OldIrql_8: int, in_NewIrp_3: int, in_Tmp_207: int, in_Tmp_208: int, in_Extension_12: int, in_vslice_dummy_var_149: int) returns (out_Tmp_204: int, out_Tmp_205: int, out_Mask: int, out_Tmp_206: int, out_OldIrql_8: int, out_Tmp_207: int, out_Tmp_208: int, out_vslice_dummy_var_149: int);
  modifies Mem_T.INT4, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_vslice_dummy_var_149 == 1 || out_vslice_dummy_var_149 == 0 || out_vslice_dummy_var_149 == in_vslice_dummy_var_149;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_240: int, in_sdv_217: int, in_pDevExt_9: int, in_sdv_218: int, in_cancelRoutine: int, in_PDevObj_11: int, in_vslice_dummy_var_168: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_240: int, out_sdv_217: int, out_sdv_218: int, out_cancelRoutine: int, out_vslice_dummy_var_168: int)
{
  var vslice_dummy_var_818: int;

  entry:
    out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_217, out_sdv_218, out_cancelRoutine, out_vslice_dummy_var_168 := in_currentLastIrp, in_cancelIrql, in_Tmp_240, in_sdv_217, in_sdv_218, in_cancelRoutine, in_vslice_dummy_var_168;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2529} out_sdv_217 := sdv_IsListEmpty(0);
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_217 == 0;
    assume {:nonnull} in_pDevExt_9 != 0;
    assume in_pDevExt_9 > 0;
    havoc vslice_dummy_var_818;
    call {:si_unique_call 2533} out_sdv_218 := sdv_containing_record(vslice_dummy_var_818, 88);
    out_currentLastIrp := out_sdv_218;
    call {:si_unique_call 2534} out_vslice_dummy_var_168 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    out_cancelRoutine := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)];
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_currentLastIrp)] := out_cancelIrql;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)] := 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant571;
    call {:si_unique_call 2539} SerialCancelCurrentWrite(in_PDevObj_11, out_currentLastIrp);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 2530} out_Tmp_240 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_240 != 0;
    assume out_Tmp_240 > 0;
    Mem_T.INT4[out_Tmp_240] := out_cancelIrql;
    call {:si_unique_call 2531} IoAcquireCancelSpinLock(out_Tmp_240);
    assume {:nonnull} out_Tmp_240 != 0;
    assume out_Tmp_240 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_240];
    goto L32_dummy;

  L32_dummy:
    call {:si_unique_call 2540} {:si_old_unique_call 1} out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_217, out_sdv_218, out_cancelRoutine, out_vslice_dummy_var_168 := SerialKillAllStalled_loop_L10(out_currentLastIrp, out_cancelIrql, out_Tmp_240, out_sdv_217, in_pDevExt_9, out_sdv_218, out_cancelRoutine, in_PDevObj_11, out_vslice_dummy_var_168);
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant575;
    call {:si_unique_call 2538} SerialCancelCurrentXoff(in_PDevObj_11, out_currentLastIrp);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon28_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant1086;
    call {:si_unique_call 2537} SerialCancelImmediate(in_PDevObj_11, out_currentLastIrp);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon27_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant665;
    call {:si_unique_call 2536} SerialCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon26_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant619;
    call {:si_unique_call 2535} SerialCancelWait(in_PDevObj_11, out_currentLastIrp);
    goto anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon30_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine == li2bplFunctionConstant667;
    call {:si_unique_call 2532} SerialFilterCancelQueued(in_PDevObj_11, out_currentLastIrp);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;
}



procedure {:LoopProcedure} SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_Tmp_240: int, in_sdv_217: int, in_pDevExt_9: int, in_sdv_218: int, in_cancelRoutine: int, in_PDevObj_11: int, in_vslice_dummy_var_168: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_Tmp_240: int, out_sdv_217: int, out_sdv_218: int, out_cancelRoutine: int, out_vslice_dummy_var_168: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} out_sdv_217 == 1 || out_sdv_217 == 0 || out_sdv_217 == in_sdv_217;
  free ensures {:va_keep} out_vslice_dummy_var_168 == 1 || out_vslice_dummy_var_168 == 0 || out_vslice_dummy_var_168 == in_vslice_dummy_var_168;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialUnstallIrps_loop_L16(in_Tmp_252: int, in_sdv_232: int, in_Tmp_253: int, in_Tmp_254: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_257: int, in_PDevExt_14: int, in_vslice_dummy_var_175: int, in_vslice_dummy_var_176: int, in_vslice_dummy_var_177: int) returns (out_Tmp_252: int, out_sdv_232: int, out_Tmp_253: int, out_Tmp_254: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_257: int, out_vslice_dummy_var_175: int, out_vslice_dummy_var_176: int, out_vslice_dummy_var_177: int)
{

  entry:
    out_Tmp_252, out_sdv_232, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177 := in_Tmp_252, in_sdv_232, in_Tmp_253, in_Tmp_254, in_oldIrql_3, in_pIrpStack_4, in_pIrp, in_pDevObj, in_pDrvObj, in_pIrpLink, in_Tmp_257, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon59_Else;

  anon59_Else:
    call {:si_unique_call 2543} out_sdv_232 := sdv_containing_record(out_pIrpLink, 88);
    out_pIrp := out_sdv_232;
    call {:si_unique_call 2544} out_vslice_dummy_var_175 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2545} out_pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(out_pIrp);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    havoc out_pDevObj;
    assume {:nonnull} out_pDevObj != 0;
    assume out_pDevObj > 0;
    havoc out_pDrvObj;
    call {:si_unique_call 2546} out_vslice_dummy_var_176 := sdv_IoSetCancelRoutine(out_pIrp, 0);
    call {:si_unique_call 2547} IoReleaseCancelSpinLock(out_oldIrql_3);
    out_Tmp_253 := strConst__li2bpl60;
    call {:si_unique_call 2548} out_vslice_dummy_var_177 := SerialDbgPrintEx(12, out_Tmp_253);
    assume {:nonnull} out_pIrpStack_4 != 0;
    assume out_pIrpStack_4 > 0;
    havoc out_Tmp_254;
    assume {:nonnull} out_pDrvObj != 0;
    assume out_pDrvObj > 0;
    havoc out_Tmp_257;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume out_Tmp_254 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume out_Tmp_254 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume out_Tmp_254 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume out_Tmp_254 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume out_Tmp_254 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume out_Tmp_254 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume out_Tmp_254 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume out_Tmp_254 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume out_Tmp_254 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume out_Tmp_254 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume out_Tmp_254 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume out_Tmp_254 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume out_Tmp_254 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume out_Tmp_254 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume out_Tmp_254 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume out_Tmp_254 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume out_Tmp_254 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume out_Tmp_254 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume out_Tmp_254 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume out_Tmp_254 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume out_Tmp_254 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume out_Tmp_254 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume out_Tmp_254 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume out_Tmp_254 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume out_Tmp_254 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume out_Tmp_254 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume out_Tmp_254 != 1;
    goto anon87_Then;

  anon87_Then:
    assume out_Tmp_254 == 0;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257] == 0;
    goto L45;

  L45:
    call {:si_unique_call 2541} out_Tmp_252 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_252 != 0;
    assume out_Tmp_252 > 0;
    Mem_T.INT4[out_Tmp_252] := out_oldIrql_3;
    call {:si_unique_call 2542} IoAcquireCancelSpinLock(out_Tmp_252);
    assume {:nonnull} out_Tmp_252 != 0;
    assume out_Tmp_252 > 0;
    out_oldIrql_3 := Mem_T.INT4[out_Tmp_252];
    assume {:nonnull} in_PDevExt_14 != 0;
    assume in_PDevExt_14 > 0;
    havoc out_pIrpLink;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 2549} {:si_old_unique_call 1} out_Tmp_252, out_sdv_232, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177 := SerialUnstallIrps_loop_L16(out_Tmp_252, out_sdv_232, out_Tmp_253, out_Tmp_254, out_oldIrql_3, out_pIrpStack_4, out_pIrp, out_pDevObj, out_pDrvObj, out_pIrpLink, out_Tmp_257, in_PDevExt_14, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177);
    return;

  anon86_Then:
    assume out_Tmp_254 == 1;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume out_Tmp_254 == 2;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume out_Tmp_254 == 3;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume out_Tmp_254 == 4;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume out_Tmp_254 == 5;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume out_Tmp_254 == 6;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume out_Tmp_254 == 7;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume out_Tmp_254 == 8;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume out_Tmp_254 == 9;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume out_Tmp_254 == 10;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume out_Tmp_254 == 11;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume out_Tmp_254 == 12;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume out_Tmp_254 == 13;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume out_Tmp_254 == 14;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume out_Tmp_254 == 15;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume out_Tmp_254 == 16;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume out_Tmp_254 == 17;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume out_Tmp_254 == 18;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume out_Tmp_254 == 19;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume out_Tmp_254 == 20;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume out_Tmp_254 == 21;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume out_Tmp_254 == 22;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume out_Tmp_254 == 23;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume out_Tmp_254 == 24;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume out_Tmp_254 == 25;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume out_Tmp_254 == 26;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume out_Tmp_254 == 27;
    assume {:nonnull} out_Tmp_257 != 0;
    assume out_Tmp_257 > 0;
    assume Mem_T.INT4[out_Tmp_257 + 27 * 4] == 0;
    goto L45;
}



procedure {:LoopProcedure} SerialUnstallIrps_loop_L16(in_Tmp_252: int, in_sdv_232: int, in_Tmp_253: int, in_Tmp_254: int, in_oldIrql_3: int, in_pIrpStack_4: int, in_pIrp: int, in_pDevObj: int, in_pDrvObj: int, in_pIrpLink: int, in_Tmp_257: int, in_PDevExt_14: int, in_vslice_dummy_var_175: int, in_vslice_dummy_var_176: int, in_vslice_dummy_var_177: int) returns (out_Tmp_252: int, out_sdv_232: int, out_Tmp_253: int, out_Tmp_254: int, out_oldIrql_3: int, out_pIrpStack_4: int, out_pIrp: int, out_pDevObj: int, out_pDrvObj: int, out_pIrpLink: int, out_Tmp_257: int, out_vslice_dummy_var_175: int, out_vslice_dummy_var_176: int, out_vslice_dummy_var_177: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_vslice_dummy_var_175 == 1 || out_vslice_dummy_var_175 == 0 || out_vslice_dummy_var_175 == in_vslice_dummy_var_175;
  free ensures {:va_keep} out_vslice_dummy_var_177 == 0 || out_vslice_dummy_var_177 == in_vslice_dummy_var_177;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_261: int, in_sdv_237: int, in_sdv_238: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int, in_vslice_dummy_var_180: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_261: int, out_sdv_237: int, out_sdv_238: int, out_cancelRoutine_1: int, out_vslice_dummy_var_180: int)
{
  var vslice_dummy_var_819: int;

  entry:
    out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_237, out_sdv_238, out_cancelRoutine_1, out_vslice_dummy_var_180 := in_currentLastIrp_1, in_cancelIrql_1, in_Tmp_261, in_sdv_237, in_sdv_238, in_cancelRoutine_1, in_vslice_dummy_var_180;
    goto L8, exit;

  exit:
    return;

  L8:
    call {:si_unique_call 2550} out_sdv_237 := sdv_IsListEmpty(0);
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_sdv_237 == 0;
    assume {:nonnull} in_QueueToClean != 0;
    assume in_QueueToClean > 0;
    havoc vslice_dummy_var_819;
    call {:si_unique_call 2554} out_sdv_238 := sdv_containing_record(vslice_dummy_var_819, 88);
    out_currentLastIrp_1 := out_sdv_238;
    call {:si_unique_call 2555} out_vslice_dummy_var_180 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    out_cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)];
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_currentLastIrp_1)] := out_cancelIrql_1;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)] := 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant571;
    call {:si_unique_call 2560} SerialCancelCurrentWrite(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 2551} out_Tmp_261 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_261 != 0;
    assume out_Tmp_261 > 0;
    Mem_T.INT4[out_Tmp_261] := out_cancelIrql_1;
    call {:si_unique_call 2552} IoAcquireCancelSpinLock(out_Tmp_261);
    assume {:nonnull} out_Tmp_261 != 0;
    assume out_Tmp_261 > 0;
    out_cancelIrql_1 := Mem_T.INT4[out_Tmp_261];
    goto L42_dummy;

  L42_dummy:
    call {:si_unique_call 2561} {:si_old_unique_call 1} out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_237, out_sdv_238, out_cancelRoutine_1, out_vslice_dummy_var_180 := SerialKillAllReadsOrWrites_loop_L8(out_currentLastIrp_1, out_cancelIrql_1, out_Tmp_261, out_sdv_237, out_sdv_238, out_cancelRoutine_1, in_DeviceObject_8, in_QueueToClean, out_vslice_dummy_var_180);
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant575;
    call {:si_unique_call 2559} SerialCancelCurrentXoff(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon59_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant1086;
    call {:si_unique_call 2558} SerialCancelImmediate(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon58_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant665;
    call {:si_unique_call 2557} SerialCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon57_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant619;
    call {:si_unique_call 2556} SerialCancelWait(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon69_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant667;
    call {:si_unique_call 2553} SerialFilterCancelQueued(in_DeviceObject_8, out_currentLastIrp_1);
    goto anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;
}



procedure {:LoopProcedure} SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_Tmp_261: int, in_sdv_237: int, in_sdv_238: int, in_cancelRoutine_1: int, in_DeviceObject_8: int, in_QueueToClean: int, in_vslice_dummy_var_180: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_Tmp_261: int, out_sdv_237: int, out_sdv_238: int, out_cancelRoutine_1: int, out_vslice_dummy_var_180: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} out_sdv_237 == 1 || out_sdv_237 == 0 || out_sdv_237 == in_sdv_237;
  free ensures {:va_keep} out_vslice_dummy_var_180 == 1 || out_vslice_dummy_var_180 == 0 || out_vslice_dummy_var_180 == in_vslice_dummy_var_180;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_309: int, in_Tmp_310: int, in_sdv_278: int, in_Tmp_312: int, in_Tmp_313: int, in_Tmp_314: int, in_Tmp_315: int, in_totalTime: int, in_os2ssreturn: int, in_timeoutsForIrp: int, in_updateChar: int, in_setFirstStatus: int, in_newIrp_1: int, in_useTotalTimer: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_284: int, in_oldIrql_6: int, in_sdv_286: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_317: int, in_sdv_293: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int, in_vslice_dummy_var_207: int, in_vslice_dummy_var_210: int) returns (out_localStatus_1: int, out_Tmp_309: int, out_Tmp_310: int, out_sdv_278: int, out_Tmp_312: int, out_Tmp_313: int, out_Tmp_314: int, out_Tmp_315: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_284: int, out_oldIrql_6: int, out_sdv_286: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_317: int, out_sdv_293: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int, out_vslice_dummy_var_207: int, out_vslice_dummy_var_210: int)
{
  var vslice_dummy_var_820: int;
  var vslice_dummy_var_821: int;
  var vslice_dummy_var_822: int;
  var vslice_dummy_var_823: int;

  entry:
    out_localStatus_1, out_Tmp_309, out_Tmp_310, out_sdv_278, out_Tmp_312, out_Tmp_313, out_Tmp_314, out_Tmp_315, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_284, out_oldIrql_6, out_sdv_286, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_317, out_sdv_293, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_210 := in_localStatus_1, in_Tmp_309, in_Tmp_310, in_sdv_278, in_Tmp_312, in_Tmp_313, in_Tmp_314, in_Tmp_315, in_os2ssreturn, in_setFirstStatus, in_useTotalTimer, in_multiplierVal, in_crunchDownToOne, in_sdv_284, in_oldIrql_6, in_sdv_286, in_constantVal, in_controlIrql, in_returnWithWhatsPresent, in_useIntervalTimer, in_Tmp_317, in_sdv_293, in_firstStatus, in_boogieTmp, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_210;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_820;
    call {:si_unique_call 2562} out_sdv_284 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_820);
    assume {:nonnull} out_sdv_284 != 0;
    assume out_sdv_284 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 2584} out_localStatus_1 := SerialResizeBuffer(in_Extension_15);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2563} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_newIrp_1, 1, in_Extension_15);
    goto anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_newIrp_1 != 0;
    assume in_newIrp_1 > 0;
    goto anon67_Then;

  anon67_Then:
    goto anon67_Then_dummy;

  anon67_Then_dummy:
    call {:si_unique_call 2585} {:si_old_unique_call 1} out_localStatus_1, out_Tmp_309, out_Tmp_310, out_sdv_278, out_Tmp_312, out_Tmp_313, out_Tmp_314, out_Tmp_315, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_284, out_oldIrql_6, out_sdv_286, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_317, out_sdv_293, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_210 := SerialStartRead_loop_L23(out_localStatus_1, out_Tmp_309, out_Tmp_310, out_sdv_278, out_Tmp_312, out_Tmp_313, out_Tmp_314, out_Tmp_315, in_totalTime, out_os2ssreturn, in_timeoutsForIrp, in_updateChar, out_setFirstStatus, in_newIrp_1, out_useTotalTimer, out_multiplierVal, out_crunchDownToOne, out_sdv_284, out_oldIrql_6, out_sdv_286, out_constantVal, out_controlIrql, out_returnWithWhatsPresent, out_useIntervalTimer, out_Tmp_317, out_sdv_293, out_firstStatus, in_Extension_15, out_boogieTmp, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_210);
    return;

  anon66_Then:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := out_localStatus_1;
    out_setFirstStatus := 1;
    goto L37;

  anon65_Then:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_823;
    call {:si_unique_call 2578} out_sdv_286 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_823);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} out_sdv_286 != 0;
    assume out_sdv_286 > 0;
    out_useTotalTimer := 0;
    out_returnWithWhatsPresent := 0;
    out_os2ssreturn := 0;
    out_crunchDownToOne := 0;
    out_useIntervalTimer := 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2579} out_vslice_dummy_var_210 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    goto anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2577} out_vslice_dummy_var_205 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    goto anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2574} out_Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    Mem_T.INT4[out_Tmp_315] := out_controlIrql;
    call {:si_unique_call 2575} sdv_KeAcquireSpinLock(0, out_Tmp_315);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_315];
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    call {:si_unique_call 2576} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    out_useIntervalTimer := 1;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L76;

  L76:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  L83:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_useTotalTimer != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_totalTime != 0;
    assume in_totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 2571} out_Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    Mem_T.INT4[out_Tmp_315] := out_controlIrql;
    call {:si_unique_call 2572} sdv_KeAcquireSpinLock(0, out_Tmp_315);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_315];
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    call {:si_unique_call 2573} out_boogieTmp := SerialGetCharsFromIntBuffer(in_Extension_15);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} out_returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 2582} out_vslice_dummy_var_206 := KeSynchronizeExecution(0, li2bplFunctionConstant721, 0);
    call {:si_unique_call 2583} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_310;
    assume {:nonnull} out_Tmp_310 != 0;
    assume out_Tmp_310 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_310))] := 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon92_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon78_Then:
    assume {:partition} out_returnWithWhatsPresent == 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_os2ssreturn != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_309;
    assume {:nonnull} out_Tmp_309 != 0;
    assume out_Tmp_309 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto L105;

  L105:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_822;
    call {:si_unique_call 2568} out_sdv_293 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_822);
    assume {:nonnull} out_sdv_293 != 0;
    assume out_sdv_293 > 0;
    call {:si_unique_call 2569} out_Tmp_315 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    Mem_T.INT4[out_Tmp_315] := out_oldIrql_6;
    call {:si_unique_call 2570} IoAcquireCancelSpinLock(out_Tmp_315);
    assume {:nonnull} out_Tmp_315 != 0;
    assume out_Tmp_315 > 0;
    out_oldIrql_6 := Mem_T.INT4[out_Tmp_315];
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_312;
    assume {:nonnull} out_Tmp_312 != 0;
    assume out_Tmp_312 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 2580} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2581} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_317;
    assume {:nonnull} out_Tmp_317 != 0;
    assume out_Tmp_317 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_317))] := -1073741536;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_313;
    assume {:nonnull} out_Tmp_313 != 0;
    assume out_Tmp_313 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := -1073741536;
    out_setFirstStatus := 1;
    goto L37;

  anon95_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon94_Then:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} out_crunchDownToOne != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc vslice_dummy_var_821;
    call {:si_unique_call 2567} out_sdv_278 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_821);
    assume {:nonnull} out_sdv_278 != 0;
    assume out_sdv_278 > 0;
    goto L126;

  L126:
    call {:si_unique_call 2566} out_vslice_dummy_var_207 := KeSynchronizeExecution(0, li2bplFunctionConstant722, 0);
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    goto anon82_Else;

  anon82_Else:
    call {:si_unique_call 2564} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2565} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    havoc out_Tmp_314;
    assume {:nonnull} out_Tmp_314 != 0;
    assume out_Tmp_314 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_314))] := 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon96_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon81_Then:
    assume {:partition} out_crunchDownToOne == 0;
    goto L126;

  anon93_Then:
    goto L94;

  anon80_Then:
    assume {:partition} out_os2ssreturn == 0;
    goto L105;

  anon79_Then:
    goto L94;

  anon77_Then:
    assume {:partition} out_useTotalTimer == 0;
    goto L84;

  anon76_Then:
    goto L77;

  L77:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    out_crunchDownToOne := 1;
    out_multiplierVal := 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon86_Then:
    goto L83;

  anon75_Then:
    goto L83;

  anon74_Then:
    goto L77;

  anon72_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    out_returnWithWhatsPresent := 1;
    goto L83;

  anon73_Then:
    goto L76;

  anon69_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto L192;

  L192:
    out_useTotalTimer := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon71_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L192;

  anon87_Then:
    goto L83;

  anon91_Then:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  anon70_Then:
    goto L66;

  anon68_Then:
    goto L66;
}



procedure {:LoopProcedure} SerialStartRead_loop_L23(in_localStatus_1: int, in_Tmp_309: int, in_Tmp_310: int, in_sdv_278: int, in_Tmp_312: int, in_Tmp_313: int, in_Tmp_314: int, in_Tmp_315: int, in_totalTime: int, in_os2ssreturn: int, in_timeoutsForIrp: int, in_updateChar: int, in_setFirstStatus: int, in_newIrp_1: int, in_useTotalTimer: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_284: int, in_oldIrql_6: int, in_sdv_286: int, in_constantVal: int, in_controlIrql: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_Tmp_317: int, in_sdv_293: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_205: int, in_vslice_dummy_var_206: int, in_vslice_dummy_var_207: int, in_vslice_dummy_var_210: int) returns (out_localStatus_1: int, out_Tmp_309: int, out_Tmp_310: int, out_sdv_278: int, out_Tmp_312: int, out_Tmp_313: int, out_Tmp_314: int, out_Tmp_315: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_284: int, out_oldIrql_6: int, out_sdv_286: int, out_constantVal: int, out_controlIrql: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_Tmp_317: int, out_sdv_293: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_205: int, out_vslice_dummy_var_206: int, out_vslice_dummy_var_207: int, out_vslice_dummy_var_210: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_localStatus_1 == 0 || out_localStatus_1 == in_localStatus_1;
  free ensures {:va_keep} out_os2ssreturn == 0 || out_os2ssreturn == 1 || out_os2ssreturn == in_os2ssreturn;
  free ensures {:va_keep} out_setFirstStatus == 1 || out_setFirstStatus == in_setFirstStatus;
  free ensures {:va_keep} out_useTotalTimer == 0 || out_useTotalTimer == 1 || out_useTotalTimer == in_useTotalTimer;
  free ensures {:va_keep} out_crunchDownToOne == 0 || out_crunchDownToOne == 1 || out_crunchDownToOne == in_crunchDownToOne;
  free ensures {:va_keep} out_returnWithWhatsPresent == 1 || out_returnWithWhatsPresent == 0 || out_returnWithWhatsPresent == in_returnWithWhatsPresent;
  free ensures {:va_keep} out_useIntervalTimer == 1 || out_useIntervalTimer == 0 || out_useIntervalTimer == in_useIntervalTimer;
  free ensures {:va_keep} out_firstStatus == 0 || out_firstStatus == -1073741536 || out_firstStatus == in_firstStatus;
  free ensures {:va_keep} out_vslice_dummy_var_206 == 1 || out_vslice_dummy_var_206 == 0 || out_vslice_dummy_var_206 == in_vslice_dummy_var_206;
  free ensures {:va_keep} out_vslice_dummy_var_207 == 1 || out_vslice_dummy_var_207 == 0 || out_vslice_dummy_var_207 == in_vslice_dummy_var_207;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int)
{
  var vslice_dummy_var_824: int;

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_sDeviceData, in_gotISR, in_gotMem;
    goto L95, exit;

  exit:
    return;

  L95:
    goto anon132_Else;

  anon132_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    goto L105;

  L105:
    out_i := out_i + 1;
    goto L105_dummy;

  L105_dummy:
    call {:si_unique_call 2586} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L95(in_ioResIndex, in_isMulti, in_count, out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem, in_pPartialResourceDesc, in_PConfig);
    return;

  anon171_Then:
    out_sDeviceData := in_pPartialResourceDesc;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} out_sDeviceData != 0;
    assume out_sDeviceData > 0;
    havoc vslice_dummy_var_824;
    Mem_T.INT4[ClockRate__CONFIG_DATA(in_PConfig)] := vslice_dummy_var_824;
    goto L105;

  anon172_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} out_gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} out_gotMem != 0;
    goto L105;

  anon173_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon177_Then:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} out_gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} out_gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_sDeviceData == in_sDeviceData || out_sDeviceData == in_pPartialResourceDesc;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_gotISR, in_gotMem;
    goto L148, exit;

  exit:
    return;

  L148:
    goto anon143_Else;

  anon143_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    goto L156;

  L156:
    out_i := out_i + 1;
    goto L156_dummy;

  L156_dummy:
    call {:si_unique_call 2587} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L148(in_ioResIndex, in_isMulti, in_count, out_gotIO, in_pPartialTrResourceDesc, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem, in_PConfig);
    return;

  anon174_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} out_gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon175_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} out_gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} out_gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int);
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_286: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_286: int)
{

  entry:
    out_interfaceType, out_foundOne, out_vslice_dummy_var_286 := in_interfaceType, in_foundOne, in_vslice_dummy_var_286;
    goto L191, exit;

  exit:
    return;

  L191:
    assume {:CounterLoop 18} {:Counter "interfaceType"} true;
    goto anon154_Else;

  anon154_Else:
    assume {:partition} 18 > out_interfaceType;
    out_foundOne := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} out_interfaceType != 0;
    call {:si_unique_call 2588} out_vslice_dummy_var_286 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant438, 0);
    goto anon156_Then;

  anon156_Then:
    assume {:partition} out_foundOne == 0;
    goto L198;

  L198:
    out_interfaceType := out_interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    havoc out_interfaceType;
    return;

  anon179_Then:
    assume {:partition} out_interfaceType == 0;
    goto L198;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_286: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_286: int);
  free ensures {:va_keep} out_foundOne == 0 || out_foundOne == in_foundOne;
  free ensures {:va_keep} out_vslice_dummy_var_286 == 0 || out_vslice_dummy_var_286 == -1073741823 || out_vslice_dummy_var_286 == in_vslice_dummy_var_286;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFinishStartDevice_loop_L219()
{

  entry:
    goto L219, exit;

  exit:
    return;

  L219:
    goto L219_dummy;

  L219_dummy:
    call {:si_unique_call 2589} {:si_old_unique_call 1} SerialFinishStartDevice_loop_L219();
    return;
}



procedure {:LoopProcedure} SerialFinishStartDevice_loop_L219();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L179(in_sdv_476: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int)
{

  entry:
    out_allocLen, out_curStrLen := in_allocLen, in_curStrLen;
    goto L179, exit;

  exit:
    return;

  L179:
    out_curStrLen := in_sdv_476;
    goto anon310_Else;

  anon310_Else:
    assume {:partition} out_curStrLen != 0;
    out_allocLen := out_allocLen + out_curStrLen * 2 + 2;
    goto anon310_Else_dummy;

  anon310_Else_dummy:
    havoc out_allocLen;
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L179(in_sdv_476: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int);
  free ensures {:va_keep} out_curStrLen == in_sdv_476 || out_curStrLen == in_curStrLen;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_12: int, in_Tmp_589: int, in_isMulti_2: int, in_Tmp_599: int, in_pLowerDevObj_3: int, in_Tmp_605: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_612: int, in_Tmp_616: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_385: int, in_vslice_dummy_var_386: int, in_vslice_dummy_var_387: int) returns (out_Tmp_589: int, out_Tmp_599: int, out_Tmp_605: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_612: int, out_Tmp_616: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_385: int, out_vslice_dummy_var_386: int, out_vslice_dummy_var_387: int)
{

  entry:
    out_Tmp_589, out_Tmp_599, out_Tmp_605, out_gotInt_1, out_pResDesc, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387 := in_Tmp_589, in_Tmp_599, in_Tmp_605, in_gotInt_1, in_pResDesc, in_Tmp_612, in_Tmp_616, in_j, in_gotISR_1, in_vslice_dummy_var_385, in_vslice_dummy_var_386, in_vslice_dummy_var_387;
    goto L354, exit;

  exit:
    return;

  L354:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon229_Else;

  anon229_Else:
    out_Tmp_589 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_599;
    out_pResDesc := out_Tmp_599 + out_Tmp_589 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon235_Else;

  anon235_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    goto L369_dummy;

  L369_dummy:
    call {:si_unique_call 2593} {:si_old_unique_call 1} out_Tmp_589, out_Tmp_599, out_Tmp_605, out_gotInt_1, out_pResDesc, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_12, out_Tmp_589, in_isMulti_2, out_Tmp_599, in_pLowerDevObj_3, out_Tmp_605, out_gotInt_1, out_pResDesc, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387);
    return;

  anon233_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon236_Else;

  anon236_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon234_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon232_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon271_Then:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon231_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_616 := strConst__li2bpl172;
    call {:si_unique_call 2590} out_vslice_dummy_var_386 := SerialDbgPrintEx(12, out_Tmp_616);
    goto L363;

  anon301_Then:
    assume {:nonnull} in_pDevExt_12 != 0;
    assume in_pDevExt_12 > 0;
    out_Tmp_612 := strConst__li2bpl173;
    call {:si_unique_call 2591} out_vslice_dummy_var_387 := SerialDbgPrintEx(12, out_Tmp_612);
    goto L363;

  anon300_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_605 := strConst__li2bpl171;
    call {:si_unique_call 2592} out_vslice_dummy_var_385 := SerialDbgPrintEx(12, out_Tmp_605);
    goto L363;

  anon238_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon237_Then:
    goto L363;

  anon230_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_12: int, in_Tmp_589: int, in_isMulti_2: int, in_Tmp_599: int, in_pLowerDevObj_3: int, in_Tmp_605: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_612: int, in_Tmp_616: int, in_j: int, in_gotISR_1: int, in_vslice_dummy_var_385: int, in_vslice_dummy_var_386: int, in_vslice_dummy_var_387: int) returns (out_Tmp_589: int, out_Tmp_599: int, out_Tmp_605: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_612: int, out_Tmp_616: int, out_j: int, out_gotISR_1: int, out_vslice_dummy_var_385: int, out_vslice_dummy_var_386: int, out_vslice_dummy_var_387: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_385 == 0 || out_vslice_dummy_var_385 == in_vslice_dummy_var_385;
  free ensures {:va_keep} out_vslice_dummy_var_386 == 0 || out_vslice_dummy_var_386 == in_vslice_dummy_var_386;
  free ensures {:va_keep} out_vslice_dummy_var_387 == 0 || out_vslice_dummy_var_387 == in_vslice_dummy_var_387;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_12: int, in_Tmp_589: int, in_isMulti_2: int, in_Tmp_599: int, in_pLowerDevObj_3: int, in_Tmp_605: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_612: int, in_pReqList: int, in_Tmp_616: int, in_j: int, in_gotISR_1: int, in_Tmp_637: int, in_vslice_dummy_var_384: int, in_vslice_dummy_var_385: int, in_vslice_dummy_var_386: int, in_vslice_dummy_var_387: int) returns (out_Tmp_589: int, out_Tmp_599: int, out_Tmp_605: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_612: int, out_Tmp_616: int, out_j: int, out_gotISR_1: int, out_Tmp_637: int, out_vslice_dummy_var_384: int, out_vslice_dummy_var_385: int, out_vslice_dummy_var_386: int, out_vslice_dummy_var_387: int)
{

  entry:
    out_Tmp_589, out_Tmp_599, out_Tmp_605, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_Tmp_637, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387 := in_Tmp_589, in_Tmp_599, in_Tmp_605, in_gotInt_1, in_pResDesc, in_listNum, in_Tmp_612, in_Tmp_616, in_j, in_gotISR_1, in_Tmp_637, in_vslice_dummy_var_384, in_vslice_dummy_var_385, in_vslice_dummy_var_386, in_vslice_dummy_var_387;
    goto L346, exit;

  exit:
    return;

  L346:
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    goto anon228_Else;

  anon228_Else:
    out_gotISR_1 := 0;
    out_gotInt_1 := 0;
    out_Tmp_637 := strConst__li2bpl170;
    call {:si_unique_call 2595} out_vslice_dummy_var_384 := SerialDbgPrintEx(12, out_Tmp_637);
    out_j := 0;
    goto L354;

  L354:
    call {:si_unique_call 2594} out_Tmp_589, out_Tmp_599, out_Tmp_605, out_gotInt_1, out_pResDesc, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_12, out_Tmp_589, in_isMulti_2, out_Tmp_599, in_pLowerDevObj_3, out_Tmp_605, out_gotInt_1, out_pResDesc, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387);
    goto L354_last;

  L354_last:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    out_Tmp_589 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_599;
    out_pResDesc := out_Tmp_599 + out_Tmp_589 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    assume false;
    return;

  anon233_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon236_Then:
    assume {:partition} out_gotInt_1 != 0;
    goto L355;

  L355:
    out_listNum := out_listNum + 1;
    goto L355_dummy;

  L355_dummy:
    call {:si_unique_call 2599} {:si_old_unique_call 1} out_Tmp_589, out_Tmp_599, out_Tmp_605, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_612, out_Tmp_616, out_j, out_gotISR_1, out_Tmp_637, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387 := SerialPnpDispatch_loop_L346(in_pResList, in_pDevExt_12, out_Tmp_589, in_isMulti_2, out_Tmp_599, in_pLowerDevObj_3, out_Tmp_605, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_612, in_pReqList, out_Tmp_616, out_j, out_gotISR_1, out_Tmp_637, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387);
    return;

  anon235_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L355;

  anon234_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon232_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon271_Then:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon231_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_616 := strConst__li2bpl172;
    call {:si_unique_call 2596} out_vslice_dummy_var_386 := SerialDbgPrintEx(12, out_Tmp_616);
    goto L363;

  anon301_Then:
    assume {:nonnull} in_pDevExt_12 != 0;
    assume in_pDevExt_12 > 0;
    out_Tmp_612 := strConst__li2bpl173;
    call {:si_unique_call 2597} out_vslice_dummy_var_387 := SerialDbgPrintEx(12, out_Tmp_612);
    goto L363;

  anon300_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_605 := strConst__li2bpl171;
    call {:si_unique_call 2598} out_vslice_dummy_var_385 := SerialDbgPrintEx(12, out_Tmp_605);
    goto L363;

  anon238_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon237_Then:
    goto L363;

  anon230_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;

  anon229_Then:
    goto L355;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_12: int, in_Tmp_589: int, in_isMulti_2: int, in_Tmp_599: int, in_pLowerDevObj_3: int, in_Tmp_605: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_Tmp_612: int, in_pReqList: int, in_Tmp_616: int, in_j: int, in_gotISR_1: int, in_Tmp_637: int, in_vslice_dummy_var_384: int, in_vslice_dummy_var_385: int, in_vslice_dummy_var_386: int, in_vslice_dummy_var_387: int) returns (out_Tmp_589: int, out_Tmp_599: int, out_Tmp_605: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_612: int, out_Tmp_616: int, out_j: int, out_gotISR_1: int, out_Tmp_637: int, out_vslice_dummy_var_384: int, out_vslice_dummy_var_385: int, out_vslice_dummy_var_386: int, out_vslice_dummy_var_387: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == 0 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == 0 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_384 == 0 || out_vslice_dummy_var_384 == in_vslice_dummy_var_384;
  free ensures {:va_keep} out_vslice_dummy_var_385 == 0 || out_vslice_dummy_var_385 == in_vslice_dummy_var_385;
  free ensures {:va_keep} out_vslice_dummy_var_386 == 0 || out_vslice_dummy_var_386 == in_vslice_dummy_var_386;
  free ensures {:va_keep} out_vslice_dummy_var_387 == 0 || out_vslice_dummy_var_387 == in_vslice_dummy_var_387;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 5} SerialPnpDispatch_loop_L476(in_pDevExt_12: int, in_cap: int, in_Tmp_600: int, in_Tmp_623: int, in_Tmp_626: int, in_pDevCaps: int, in_Tmp_643: int) returns (out_cap: int, out_Tmp_600: int, out_Tmp_623: int, out_Tmp_626: int, out_Tmp_643: int)
{

  entry:
    out_cap, out_Tmp_600, out_Tmp_623, out_Tmp_626, out_Tmp_643 := in_cap, in_Tmp_600, in_Tmp_623, in_Tmp_626, in_Tmp_643;
    goto L476, exit;

  exit:
    return;

  L476:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon240_Else;

  anon240_Else:
    assume {:partition} 7 > out_cap;
    out_Tmp_626 := out_cap;
    assume {:nonnull} in_pDevExt_12 != 0;
    assume in_pDevExt_12 > 0;
    havoc out_Tmp_600;
    out_Tmp_643 := out_cap;
    assume {:nonnull} in_pDevCaps != 0;
    assume in_pDevCaps > 0;
    havoc out_Tmp_623;
    assume {:nonnull} out_Tmp_600 != 0;
    assume out_Tmp_600 > 0;
    assume {:nonnull} out_Tmp_623 != 0;
    assume out_Tmp_623 > 0;
    Mem_T.INT4[out_Tmp_600 + out_Tmp_626 * 4] := Mem_T.INT4[out_Tmp_623 + out_Tmp_643 * 4];
    out_cap := out_cap + 1;
    goto anon240_Else_dummy;

  anon240_Else_dummy:
    call {:si_unique_call 2600} {:si_old_unique_call 1} out_cap, out_Tmp_600, out_Tmp_623, out_Tmp_626, out_Tmp_643 := SerialPnpDispatch_loop_L476(in_pDevExt_12, out_cap, out_Tmp_600, out_Tmp_623, out_Tmp_626, in_pDevCaps, out_Tmp_643);
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L476(in_pDevExt_12: int, in_cap: int, in_Tmp_600: int, in_Tmp_623: int, in_Tmp_626: int, in_pDevCaps: int, in_Tmp_643: int) returns (out_cap: int, out_Tmp_600: int, out_Tmp_623: int, out_Tmp_626: int, out_Tmp_643: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialInternalIoControl_loop_L126(in_Tmp_757: int, in_pDevExt_14: int, in_cap_1: int, in_Tmp_760: int, in_Tmp_763: int, in_Tmp_765: int) returns (out_Tmp_757: int, out_cap_1: int, out_Tmp_760: int, out_Tmp_763: int, out_Tmp_765: int)
{

  entry:
    out_Tmp_757, out_cap_1, out_Tmp_760, out_Tmp_763, out_Tmp_765 := in_Tmp_757, in_cap_1, in_Tmp_760, in_Tmp_763, in_Tmp_765;
    goto L126, exit;

  exit:
    return;

  L126:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon46_Else;

  anon46_Else:
    assume {:partition} 7 > out_cap_1;
    out_Tmp_757 := out_cap_1;
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    havoc out_Tmp_763;
    assume {:nonnull} out_Tmp_763 != 0;
    assume out_Tmp_763 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_763 + out_Tmp_757 * 4] >= 1;
    out_Tmp_765 := out_cap_1;
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    havoc out_Tmp_760;
    assume {:nonnull} out_Tmp_760 != 0;
    assume out_Tmp_760 > 0;
    assume {:nonnull} in_pDevExt_14 != 0;
    assume in_pDevExt_14 > 0;
    goto anon55_Else;

  anon55_Else:
    goto L129;

  L129:
    out_cap_1 := out_cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    havoc out_cap_1;
    return;

  anon54_Then:
    assume {:partition} 1 > Mem_T.INT4[out_Tmp_763 + out_Tmp_757 * 4];
    goto L129;
}



procedure {:LoopProcedure} SerialInternalIoControl_loop_L126(in_Tmp_757: int, in_pDevExt_14: int, in_cap_1: int, in_Tmp_760: int, in_Tmp_763: int, in_Tmp_765: int) returns (out_Tmp_757: int, out_cap_1: int, out_Tmp_760: int, out_Tmp_763: int, out_Tmp_765: int);
  free ensures {:va_keep} out_Tmp_757 == in_cap_1 || out_Tmp_757 == in_Tmp_757;
  free ensures {:va_keep} out_Tmp_765 == in_cap_1 || out_Tmp_765 == in_Tmp_765;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_844: int, in_Tmp_846: int, in_Tmp_850: int, in_PDevExt_23: int) returns (out_i_1: int, out_Tmp_844: int, out_Tmp_846: int, out_Tmp_850: int)
{

  entry:
    out_i_1, out_Tmp_844, out_Tmp_846, out_Tmp_850 := in_i_1, in_Tmp_844, in_Tmp_846, in_Tmp_850;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon60_Else;

  anon60_Else:
    assume {:partition} 16 > out_i_1;
    out_Tmp_846 := out_i_1;
    assume {:nonnull} in_PDevExt_23 != 0;
    assume in_PDevExt_23 > 0;
    havoc out_Tmp_850;
    assume {:nonnull} out_Tmp_850 != 0;
    assume out_Tmp_850 > 0;
    havoc out_Tmp_844;
    assume {:nonnull} out_Tmp_844 != 0;
    assume out_Tmp_844 > 0;
    goto anon78_Else;

  anon78_Else:
    out_i_1 := out_i_1 + 1;
    goto anon78_Else_dummy;

  anon78_Else_dummy:
    havoc out_i_1;
    return;
}



procedure {:LoopProcedure} SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_844: int, in_Tmp_846: int, in_Tmp_850: int, in_PDevExt_23: int) returns (out_i_1: int, out_Tmp_844: int, out_Tmp_846: int, out_Tmp_850: int);
  free ensures {:va_keep} out_Tmp_846 == in_i_1 || out_Tmp_846 == in_Tmp_846;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L182(in_Tmp_860: int, in_pCurDevObj: int, in_sdv_770: int, in_pExtension: int, in_oldIrql_11: int, in_sdv_782: int, in_PConfig_1: int) returns (out_Tmp_860: int, out_pCurDevObj: int, out_sdv_770: int, out_pExtension: int, out_oldIrql_11: int, out_sdv_782: int)
{
  var vslice_dummy_var_825: int;
  var vslice_dummy_var_826: int;
  var vslice_dummy_var_827: int;
  var vslice_dummy_var_828: int;

  entry:
    out_Tmp_860, out_pCurDevObj, out_sdv_770, out_pExtension, out_oldIrql_11, out_sdv_782 := in_Tmp_860, in_pCurDevObj, in_sdv_770, in_pExtension, in_oldIrql_11, in_sdv_782;
    goto L182, exit;

  exit:
    return;

  L182:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_825;
    havoc vslice_dummy_var_826;
    havoc vslice_dummy_var_827;
    havoc vslice_dummy_var_828;
    call {:si_unique_call 2605} out_sdv_782 := SerialMemCompare(vslice_dummy_var_825, vslice_dummy_var_826, vslice_dummy_var_827, vslice_dummy_var_828);
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_sdv_782 != 0;
    goto L183;

  L183:
    call {:si_unique_call 2603} out_Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    Mem_T.INT4[out_Tmp_860] := out_oldIrql_11;
    call {:si_unique_call 2604} sdv_KeAcquireSpinLock(0, out_Tmp_860);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    out_oldIrql_11 := Mem_T.INT4[out_Tmp_860];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 2602} out_sdv_770 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_770;
    goto L216;

  L216:
    call {:si_unique_call 2601} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon104_Else;

  anon104_Else:
    goto anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    call {:si_unique_call 2606} {:si_old_unique_call 1} out_Tmp_860, out_pCurDevObj, out_sdv_770, out_pExtension, out_oldIrql_11, out_sdv_782 := SerialFindInitController_loop_L182(out_Tmp_860, out_pCurDevObj, out_sdv_770, out_pExtension, out_oldIrql_11, out_sdv_782, in_PConfig_1);
    return;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L182(in_Tmp_860: int, in_pCurDevObj: int, in_sdv_770: int, in_pExtension: int, in_oldIrql_11: int, in_sdv_782: int, in_PConfig_1: int) returns (out_Tmp_860: int, out_pCurDevObj: int, out_sdv_770: int, out_pExtension: int, out_oldIrql_11: int, out_sdv_782: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_782 == 0 || out_sdv_782 == 2 || out_sdv_782 == 1 || out_sdv_782 == in_sdv_782;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L246(in_Tmp_860: int, in_pCurDevObj: int, in_sdv_759: int, in_pExtension: int, in_oldIrql_11: int, in_PConfig_1: int) returns (out_Tmp_860: int, out_pCurDevObj: int, out_sdv_759: int, out_pExtension: int, out_oldIrql_11: int)
{

  entry:
    out_Tmp_860, out_pCurDevObj, out_sdv_759, out_pExtension, out_oldIrql_11 := in_Tmp_860, in_pCurDevObj, in_sdv_759, in_pExtension, in_oldIrql_11;
    goto L246, exit;

  exit:
    return;

  L246:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon110_Then;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 2609} out_Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    Mem_T.INT4[out_Tmp_860] := out_oldIrql_11;
    call {:si_unique_call 2610} sdv_KeAcquireSpinLock(0, out_Tmp_860);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    out_oldIrql_11 := Mem_T.INT4[out_Tmp_860];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 2608} out_sdv_759 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_759;
    goto L264;

  L264:
    call {:si_unique_call 2607} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon111_Else;

  anon111_Else:
    goto anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    call {:si_unique_call 2611} {:si_old_unique_call 1} out_Tmp_860, out_pCurDevObj, out_sdv_759, out_pExtension, out_oldIrql_11 := SerialFindInitController_loop_L246(out_Tmp_860, out_pCurDevObj, out_sdv_759, out_pExtension, out_oldIrql_11, in_PConfig_1);
    return;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L246(in_Tmp_860: int, in_pCurDevObj: int, in_sdv_759: int, in_pExtension: int, in_oldIrql_11: int, in_PConfig_1: int) returns (out_Tmp_860: int, out_pCurDevObj: int, out_sdv_759: int, out_pExtension: int, out_oldIrql_11: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L78(in_sdv_752: int, in_sdv_753: int, in_sdv_758: int, in_Tmp_860: int, in_pCurDevObj: int, in_sdv_760: int, in_sdv_762: int, in_sdv_765: int, in_Tmp_867: int, in_pExtension: int, in_oldIrql_11: int, in_Tmp_873: int, in_Tmp_874: int, in_sdv_776: int, in_sdv_779: int, in_Tmp_878: int, in_PConfig_1: int, in_vslice_dummy_var_518: int) returns (out_sdv_752: int, out_sdv_753: int, out_sdv_758: int, out_Tmp_860: int, out_pCurDevObj: int, out_sdv_760: int, out_sdv_762: int, out_sdv_765: int, out_pExtension: int, out_oldIrql_11: int, out_Tmp_873: int, out_sdv_776: int, out_sdv_779: int, out_vslice_dummy_var_518: int)
{
  var vslice_dummy_var_829: int;
  var vslice_dummy_var_830: int;
  var vslice_dummy_var_831: int;
  var vslice_dummy_var_832: int;
  var vslice_dummy_var_833: int;
  var vslice_dummy_var_834: int;
  var vslice_dummy_var_835: int;
  var vslice_dummy_var_836: int;
  var vslice_dummy_var_837: int;
  var vslice_dummy_var_838: int;
  var vslice_dummy_var_839: int;
  var vslice_dummy_var_840: int;
  var vslice_dummy_var_841: int;
  var vslice_dummy_var_842: int;
  var vslice_dummy_var_843: int;
  var vslice_dummy_var_844: int;
  var vslice_dummy_var_845: int;
  var vslice_dummy_var_846: int;
  var vslice_dummy_var_847: int;
  var vslice_dummy_var_848: int;
  var vslice_dummy_var_849: int;
  var vslice_dummy_var_850: int;

  entry:
    out_sdv_752, out_sdv_753, out_sdv_758, out_Tmp_860, out_pCurDevObj, out_sdv_760, out_sdv_762, out_sdv_765, out_pExtension, out_oldIrql_11, out_Tmp_873, out_sdv_776, out_sdv_779, out_vslice_dummy_var_518 := in_sdv_752, in_sdv_753, in_sdv_758, in_Tmp_860, in_pCurDevObj, in_sdv_760, in_sdv_762, in_sdv_765, in_pExtension, in_oldIrql_11, in_Tmp_873, in_sdv_776, in_sdv_779, in_vslice_dummy_var_518;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon82_Else;

  anon82_Else:
    goto anon83_Else;

  anon83_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_Tmp_873 := strConst__li2bpl211;
    call {:si_unique_call 2618} out_vslice_dummy_var_518 := SerialDbgPrintEx(4, out_Tmp_873);
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_833;
    havoc vslice_dummy_var_834;
    havoc vslice_dummy_var_835;
    havoc vslice_dummy_var_836;
    call {:si_unique_call 2619} out_sdv_753 := SerialMemCompare(vslice_dummy_var_833, vslice_dummy_var_834, vslice_dummy_var_835, vslice_dummy_var_836);
    goto anon87_Then;

  anon87_Then:
    assume {:partition} out_sdv_753 == 2;
    assume {:nonnull} in_Tmp_867 != 0;
    assume in_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_867 != 0;
    assume in_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_867 != 0;
    assume in_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_867 != 0;
    assume in_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_867 != 0;
    assume in_Tmp_867 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_831;
    havoc vslice_dummy_var_832;
    call {:si_unique_call 2617} out_sdv_776 := SerialMemCompare(vslice_dummy_var_831, vslice_dummy_var_832, in_Tmp_867, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_sdv_776 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_839;
    havoc vslice_dummy_var_840;
    havoc vslice_dummy_var_841;
    havoc vslice_dummy_var_842;
    call {:si_unique_call 2621} out_sdv_779 := SerialMemCompare(vslice_dummy_var_839, vslice_dummy_var_840, vslice_dummy_var_841, vslice_dummy_var_842);
    goto anon89_Then;

  anon89_Then:
    assume {:partition} out_sdv_779 == 2;
    assume {:nonnull} in_Tmp_874 != 0;
    assume in_Tmp_874 > 0;
    assume {:nonnull} in_Tmp_874 != 0;
    assume in_Tmp_874 > 0;
    assume {:nonnull} in_Tmp_874 != 0;
    assume in_Tmp_874 > 0;
    assume {:nonnull} in_Tmp_874 != 0;
    assume in_Tmp_874 > 0;
    assume {:nonnull} in_Tmp_874 != 0;
    assume in_Tmp_874 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_837;
    havoc vslice_dummy_var_838;
    call {:si_unique_call 2620} out_sdv_752 := SerialMemCompare(vslice_dummy_var_837, vslice_dummy_var_838, in_Tmp_874, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_sdv_752 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_843;
    havoc vslice_dummy_var_844;
    havoc vslice_dummy_var_845;
    havoc vslice_dummy_var_846;
    call {:si_unique_call 2622} out_sdv_762 := SerialMemCompare(vslice_dummy_var_843, vslice_dummy_var_844, vslice_dummy_var_845, vslice_dummy_var_846);
    goto anon91_Then;

  anon91_Then:
    assume {:partition} out_sdv_762 != 1;
    goto L105;

  L105:
    assume {:nonnull} in_Tmp_878 != 0;
    assume in_Tmp_878 > 0;
    assume {:nonnull} in_Tmp_878 != 0;
    assume in_Tmp_878 > 0;
    assume {:nonnull} in_Tmp_878 != 0;
    assume in_Tmp_878 > 0;
    assume {:nonnull} in_Tmp_878 != 0;
    assume in_Tmp_878 > 0;
    assume {:nonnull} in_Tmp_878 != 0;
    assume in_Tmp_878 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_829;
    havoc vslice_dummy_var_830;
    call {:si_unique_call 2616} out_sdv_765 := SerialMemCompare(vslice_dummy_var_829, vslice_dummy_var_830, in_Tmp_878, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_sdv_765 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_847;
    havoc vslice_dummy_var_848;
    havoc vslice_dummy_var_849;
    havoc vslice_dummy_var_850;
    call {:si_unique_call 2623} out_sdv_758 := SerialMemCompare(vslice_dummy_var_847, vslice_dummy_var_848, vslice_dummy_var_849, vslice_dummy_var_850);
    goto anon93_Then;

  anon93_Then:
    assume {:partition} out_sdv_758 != 1;
    goto L84;

  L84:
    call {:si_unique_call 2613} out_Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    Mem_T.INT4[out_Tmp_860] := out_oldIrql_11;
    call {:si_unique_call 2614} sdv_KeAcquireSpinLock(0, out_Tmp_860);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    out_oldIrql_11 := Mem_T.INT4[out_Tmp_860];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    call {:si_unique_call 2615} sdv_KeReleaseSpinLock(0, out_oldIrql_11);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 2612} out_sdv_760 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_760;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2624} {:si_old_unique_call 1} out_sdv_752, out_sdv_753, out_sdv_758, out_Tmp_860, out_pCurDevObj, out_sdv_760, out_sdv_762, out_sdv_765, out_pExtension, out_oldIrql_11, out_Tmp_873, out_sdv_776, out_sdv_779, out_vslice_dummy_var_518 := SerialFindInitController_loop_L78(out_sdv_752, out_sdv_753, out_sdv_758, out_Tmp_860, out_pCurDevObj, out_sdv_760, out_sdv_762, out_sdv_765, in_Tmp_867, out_pExtension, out_oldIrql_11, out_Tmp_873, in_Tmp_874, out_sdv_776, out_sdv_779, in_Tmp_878, in_PConfig_1, out_vslice_dummy_var_518);
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    goto L_BAF_0;

  anon92_Then:
    assume {:partition} out_sdv_765 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} out_sdv_752 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} out_sdv_776 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L78(in_sdv_752: int, in_sdv_753: int, in_sdv_758: int, in_Tmp_860: int, in_pCurDevObj: int, in_sdv_760: int, in_sdv_762: int, in_sdv_765: int, in_Tmp_867: int, in_pExtension: int, in_oldIrql_11: int, in_Tmp_873: int, in_Tmp_874: int, in_sdv_776: int, in_sdv_779: int, in_Tmp_878: int, in_PConfig_1: int, in_vslice_dummy_var_518: int) returns (out_sdv_752: int, out_sdv_753: int, out_sdv_758: int, out_Tmp_860: int, out_pCurDevObj: int, out_sdv_760: int, out_sdv_762: int, out_sdv_765: int, out_pExtension: int, out_oldIrql_11: int, out_Tmp_873: int, out_sdv_776: int, out_sdv_779: int, out_vslice_dummy_var_518: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_752 == 0 || out_sdv_752 == 2 || out_sdv_752 == 1 || out_sdv_752 == in_sdv_752;
  free ensures {:va_keep} out_sdv_753 == 0 || out_sdv_753 == 2 || out_sdv_753 == 1 || out_sdv_753 == in_sdv_753;
  free ensures {:va_keep} out_sdv_758 == 0 || out_sdv_758 == 2 || out_sdv_758 == 1 || out_sdv_758 == in_sdv_758;
  free ensures {:va_keep} out_sdv_762 == 0 || out_sdv_762 == 2 || out_sdv_762 == 1 || out_sdv_762 == in_sdv_762;
  free ensures {:va_keep} out_sdv_765 == 0 || out_sdv_765 == 2 || out_sdv_765 == 1 || out_sdv_765 == in_sdv_765;
  free ensures {:va_keep} out_sdv_776 == 0 || out_sdv_776 == 2 || out_sdv_776 == 1 || out_sdv_776 == in_sdv_776;
  free ensures {:va_keep} out_sdv_779 == 0 || out_sdv_779 == 2 || out_sdv_779 == 1 || out_sdv_779 == in_sdv_779;
  free ensures {:va_keep} out_vslice_dummy_var_518 == 0 || out_vslice_dummy_var_518 == in_vslice_dummy_var_518;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartWrite#0_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_123: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_125: int, in_Tmp_151: int, in_sdv_127: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_123: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_125: int, out_Tmp_151: int, out_sdv_127: int, out_Tmp_152: int)
{
  var vslice_dummy_var_851: int;
  var vslice_dummy_var_852: int;
  var vslice_dummy_var_853: int;
  var vslice_dummy_var_854: int;

  entry:
    out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152 := in_Tmp_146, in_Tmp_147, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_OldIrql_7, in_sdv_123, in_Tmp_150, in_s_p_e_c_i_a_l_9, in_sdv_125, in_Tmp_151, in_sdv_127, in_Tmp_152;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2625} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2626} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_852;
    call {:si_unique_call 2637} out_sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_852);
    assume {:nonnull} out_sdv_123 != 0;
    assume out_sdv_123 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_853;
    call {:si_unique_call 2638} out_sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_853);
    assume {:nonnull} out_sdv_125 != 0;
    assume out_sdv_125 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_125)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_9);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_152;
    assume {:nonnull} out_Tmp_152 != 0;
    assume out_Tmp_152 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 2639} SerialTryToCompleteCurrent#0(in_Extension_9, li2bplFunctionConstant570, out_OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, 16);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 2632} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2633} sdv_KeAcquireSpinLock(0, out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 2634} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_854;
    call {:si_unique_call 2640} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_854);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_851;
    call {:si_unique_call 2629} out_sdv_127 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_851);
    assume {:nonnull} out_sdv_127 != 0;
    assume out_sdv_127 > 0;
    call {:si_unique_call 2630} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2631} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_146;
    assume {:nonnull} out_Tmp_146 != 0;
    assume out_Tmp_146 > 0;
    goto anon33_Else;

  anon33_Else:
    call {:si_unique_call 2628} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_150;
    assume {:nonnull} out_Tmp_150 != 0;
    assume out_Tmp_150 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_150))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 2627} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_9), in_NewIrp_2, 1, in_Extension_9);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon30_Then;

  anon30_Then:
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2641} {:si_old_unique_call 1} out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152 := SerialStartWrite#0_loop_L14(out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, in_NewIrp_2, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152, in_Timeouts, in_Extension_9);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon32_Then:
    out_Tmp_151 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon26_Then:
    call {:si_unique_call 2635} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  anon25_Then:
    call {:si_unique_call 2636} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#0_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_123: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_125: int, in_Tmp_151: int, in_sdv_127: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_123: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_125: int, out_Tmp_151: int, out_sdv_127: int, out_Tmp_152: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartWrite#1_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_123: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_125: int, in_Tmp_151: int, in_sdv_127: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_123: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_125: int, out_Tmp_151: int, out_sdv_127: int, out_Tmp_152: int)
{
  var vslice_dummy_var_855: int;
  var vslice_dummy_var_856: int;
  var vslice_dummy_var_857: int;
  var vslice_dummy_var_858: int;

  entry:
    out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152 := in_Tmp_146, in_Tmp_147, in_s_p_e_c_i_a_l_7, in_FirstStatus_1, in_SetFirstStatus_1, in_UseATimer, in_IrpSp_1, in_OldIrql_7, in_sdv_123, in_Tmp_150, in_s_p_e_c_i_a_l_9, in_sdv_125, in_Tmp_151, in_sdv_127, in_Tmp_152;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2642} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2643} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_856;
    call {:si_unique_call 2654} out_sdv_123 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_856);
    assume {:nonnull} out_sdv_123 != 0;
    assume out_sdv_123 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    out_s_p_e_c_i_a_l_9 := 16;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_857;
    call {:si_unique_call 2655} out_sdv_125 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_857);
    assume {:nonnull} out_sdv_125 != 0;
    assume out_sdv_125 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_125)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_9);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_152;
    assume {:nonnull} out_Tmp_152 != 0;
    assume out_Tmp_152 > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 2656} SerialTryToCompleteCurrent#1(in_Extension_9, li2bplFunctionConstant570, out_OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_9), 0, 0, 16);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    out_UseATimer := 0;
    call {:si_unique_call 2649} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2650} sdv_KeAcquireSpinLock(0, out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    call {:si_unique_call 2651} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_858;
    call {:si_unique_call 2657} out_IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_858);
    out_UseATimer := 1;
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} out_IrpSp_1 != 0;
    assume out_IrpSp_1 > 0;
    havoc out_Tmp_151;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    assume {:nonnull} in_TotalTime != 0;
    assume in_TotalTime > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc vslice_dummy_var_855;
    call {:si_unique_call 2646} out_sdv_127 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_855);
    assume {:nonnull} out_sdv_127 != 0;
    assume out_sdv_127 > 0;
    call {:si_unique_call 2647} out_Tmp_147 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    Mem_T.INT4[out_Tmp_147] := out_OldIrql_7;
    call {:si_unique_call 2648} IoAcquireCancelSpinLock(out_Tmp_147);
    assume {:nonnull} out_Tmp_147 != 0;
    assume out_Tmp_147 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_147];
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_146;
    assume {:nonnull} out_Tmp_146 != 0;
    assume out_Tmp_146 > 0;
    goto anon33_Else;

  anon33_Else:
    call {:si_unique_call 2645} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    havoc out_Tmp_150;
    assume {:nonnull} out_Tmp_150 != 0;
    assume out_Tmp_150 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_150))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_9 != 0;
    assume in_Extension_9 > 0;
    call {:si_unique_call 2644} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_9), in_NewIrp_2, 1, in_Extension_9);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon30_Then;

  anon30_Then:
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2658} {:si_old_unique_call 1} out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152 := SerialStartWrite#1_loop_L14(out_Tmp_146, out_Tmp_147, out_s_p_e_c_i_a_l_7, out_FirstStatus_1, in_TotalTime, out_SetFirstStatus_1, out_UseATimer, out_IrpSp_1, out_OldIrql_7, out_sdv_123, in_NewIrp_2, out_Tmp_150, out_s_p_e_c_i_a_l_9, out_sdv_125, out_Tmp_151, out_sdv_127, out_Tmp_152, in_Timeouts, in_Extension_9);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L75;

  anon32_Then:
    out_Tmp_151 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts != 0;
    assume in_Timeouts > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon26_Then:
    call {:si_unique_call 2652} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  anon25_Then:
    call {:si_unique_call 2653} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#1_loop_L14(in_Tmp_146: int, in_Tmp_147: int, in_s_p_e_c_i_a_l_7: int, in_FirstStatus_1: int, in_TotalTime: int, in_SetFirstStatus_1: int, in_UseATimer: int, in_IrpSp_1: int, in_OldIrql_7: int, in_sdv_123: int, in_NewIrp_2: int, in_Tmp_150: int, in_s_p_e_c_i_a_l_9: int, in_sdv_125: int, in_Tmp_151: int, in_sdv_127: int, in_Tmp_152: int, in_Timeouts: int, in_Extension_9: int) returns (out_Tmp_146: int, out_Tmp_147: int, out_s_p_e_c_i_a_l_7: int, out_FirstStatus_1: int, out_SetFirstStatus_1: int, out_UseATimer: int, out_IrpSp_1: int, out_OldIrql_7: int, out_sdv_123: int, out_Tmp_150: int, out_s_p_e_c_i_a_l_9: int, out_sdv_125: int, out_Tmp_151: int, out_sdv_127: int, out_Tmp_152: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_UseATimer == 0 || out_UseATimer == 1 || out_UseATimer == in_UseATimer;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_9 == 16 || out_s_p_e_c_i_a_l_9 == in_s_p_e_c_i_a_l_9;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_1074: int, dup_assertVar: bool);
  modifies alloc, yogi_error, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_1074: int, dup_assertVar: bool)
{

  start:
    call Tmp_1074, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


