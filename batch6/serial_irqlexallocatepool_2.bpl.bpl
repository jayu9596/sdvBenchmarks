var {:scalar} alloc: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} yogi_error: int;

var {:scalar} Mem_T.CancelIrql__IRP: [int]int;

var {:scalar} Mem_T.CancelRoutine__IRP: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const SerialGlobals: int;

const SerialPhysicalZero: int;

const GUID_DEVINTERFACE_COMPORT: int;

const driverDefaults: int;

const SerialPhysicalZero_1: int;

const SerialPortNameGuid: int;

const SerailPortPerfGuid: int;

const SerialPortPropertiesGuid: int;

const SerialPortHWGuid: int;

const SerialPortCommGuid: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_kdpc: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const KdComPortInUse: int;

const SerialPhysicalZero_2: int;

const SerialPhysicalZero_3: int;

const sdv_cancelFptr: int;

procedure {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_2 == 0 || Tmp_2 == -1073741536 || Tmp_2 == 259 || Tmp_2 == -1073741738 || Tmp_2 == -1073741789 || Tmp_2 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_2: int)
{
  var {:pointer} Tmp_3: int;
  var {:scalar} Status: int;
  var {:pointer} IrpSp: int;
  var {:pointer} Tmp_4: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} sdv_10: int;
  var {:pointer} Tmp_6: int;
  var {:scalar} status: int;
  var {:pointer} Buf: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 0} Tmp_4 := __HAVOC_malloc(72);
    call {:si_unique_call 1} Tmp_5 := __HAVOC_malloc(72);
    call {:si_unique_call 2} Tmp_6 := __HAVOC_malloc(96);
    call {:si_unique_call 3} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_682;
    call {:si_unique_call 4} status := SerialIRPPrologue(Irp, vslice_dummy_var_682);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status != 259;
    Tmp_4 := strConst__li2bpl1;
    call {:si_unique_call 5} vslice_dummy_var_0 := SerialDbgPrintEx(9, Tmp_4);
    call {:si_unique_call 6} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_683;
    call {:si_unique_call 7} SerialIRPEpilogue(vslice_dummy_var_683);
    goto L18;

  L18:
    Tmp_2 := status;
    goto L1;

  L1:
    return;

  anon16_Then:
    assume {:partition} status == 259;
    goto L18;

  anon15_Then:
    assume {:partition} status == 0;
    Tmp_6 := strConst__li2bpl0;
    call {:si_unique_call 8} vslice_dummy_var_1 := SerialDbgPrintEx(9, Tmp_6);
    call {:si_unique_call 9} sdv_10 := SerialCompleteIfError(DeviceObject, Irp);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_10 != 0;
    Tmp_2 := -1073741536;
    goto L1;

  anon17_Then:
    assume {:partition} sdv_10 == 0;
    call {:si_unique_call 10} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp);
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Status := 0;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc Buf;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    Mem_T.INT4[LowPart__LUID(EndOfFile__FILE_STANDARD_INFORMATION(Buf))] := Mem_T.INT4[LowPart__LUID(AllocationSize__FILE_STANDARD_INFORMATION(Buf))];
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(EndOfFile__FILE_STANDARD_INFORMATION(Buf)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(AllocationSize__FILE_STANDARD_INFORMATION(Buf)))];
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto L44;

  L44:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := Status;
    Tmp_5 := strConst__li2bpl1;
    call {:si_unique_call 11} vslice_dummy_var_2 := SerialDbgPrintEx(9, Tmp_5);
    call {:si_unique_call 12} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_684;
    call {:si_unique_call 13} SerialIRPEpilogue(vslice_dummy_var_684);
    Tmp_2 := Status;
    goto L1;

  anon19_Then:
    Status := -1073741789;
    goto L44;

  anon21_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    Status := -1073741789;
    goto L44;

  anon20_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc Tmp_3;
    assume {:nonnull} Tmp_3 != 0;
    assume Tmp_3 > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto L44;

  anon18_Then:
    Status := -1073741811;
    goto L44;
}



procedure {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_8: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_8 == 0 || Tmp_8 == -1073741536 || Tmp_8 == 259 || Tmp_8 == -1073741738 || Tmp_8 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_8: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} sdv_12: int;
  var {:pointer} Tmp_10: int;
  var {:pointer} Tmp_11: int;
  var {:pointer} sdv_15: int;
  var {:scalar} sdv_16: int;
  var {:pointer} Tmp_12: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_686: int;
  var vslice_dummy_var_687: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 14} Tmp_10 := __HAVOC_malloc(72);
    call {:si_unique_call 15} Tmp_11 := __HAVOC_malloc(72);
    call {:si_unique_call 16} Tmp_12 := __HAVOC_malloc(96);
    call {:si_unique_call 17} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_685;
    call {:si_unique_call 18} Status_1 := SerialIRPPrologue(Irp_1, vslice_dummy_var_685);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Status_1 != 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Status_1 != 259;
    Tmp_11 := strConst__li2bpl1;
    call {:si_unique_call 19} vslice_dummy_var_3 := SerialDbgPrintEx(9, Tmp_11);
    call {:si_unique_call 20} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_686;
    call {:si_unique_call 21} SerialIRPEpilogue(vslice_dummy_var_686);
    goto L16;

  L16:
    Tmp_8 := Status_1;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} Status_1 == 259;
    goto L16;

  anon11_Then:
    assume {:partition} Status_1 == 0;
    Tmp_12 := strConst__li2bpl0;
    call {:si_unique_call 22} vslice_dummy_var_4 := SerialDbgPrintEx(9, Tmp_12);
    call {:si_unique_call 23} sdv_16 := SerialCompleteIfError(DeviceObject_1, Irp_1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_16 != 0;
    Tmp_8 := -1073741536;
    goto L1;

  anon13_Then:
    assume {:partition} sdv_16 == 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 24} sdv_15 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_15 != 0;
    assume sdv_15 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L39;

  L39:
    Status_1 := 0;
    goto L40;

  L40:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_1))] := Status_1;
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 25} vslice_dummy_var_5 := SerialDbgPrintEx(9, Tmp_10);
    call {:si_unique_call 26} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_687;
    call {:si_unique_call 27} SerialIRPEpilogue(vslice_dummy_var_687);
    Tmp_8 := Status_1;
    goto L1;

  anon14_Then:
    call {:si_unique_call 28} sdv_12 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_12 != 0;
    assume sdv_12 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Status_1 := -1073741811;
    goto L40;

  anon15_Then:
    goto L39;
}



procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 29} vslice_dummy_var_6 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 30} vslice_dummy_var_7 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_17: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_17: int)
{
  var {:pointer} Tmp_18: int;
  var {:pointer} Tmp_19: int;
  var {:pointer} Tmp_20: int;
  var {:pointer} Tmp_21: int;
  var {:pointer} Extension: int;
  var {:scalar} sdv_25: int;
  var {:scalar} status_1: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 31} Tmp_18 := __HAVOC_malloc(84);
    call {:si_unique_call 32} Tmp_19 := __HAVOC_malloc(84);
    call {:si_unique_call 33} Tmp_20 := __HAVOC_malloc(72);
    call {:si_unique_call 34} Tmp_21 := __HAVOC_malloc(88);
    call {:si_unique_call 35} Tmp_22 := __HAVOC_malloc(96);
    call {:si_unique_call 36} Tmp_24 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc Extension;
    call {:si_unique_call 37} sdv_do_paged_code_check();
    Tmp_22 := strConst__li2bpl0;
    call {:si_unique_call 38} vslice_dummy_var_8 := SerialDbgPrintEx(9, Tmp_22);
    Tmp_21 := strConst__li2bpl3;
    call {:si_unique_call 39} vslice_dummy_var_9 := SerialDbgPrintEx(2, Tmp_21);
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    call {:si_unique_call 40} status_1 := SerialIRPPrologue(Irp_2, Extension);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_1 != 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := status_1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_1 >= 0;
    goto L29;

  L29:
    Tmp_18 := strConst__li2bpl4;
    call {:si_unique_call 41} vslice_dummy_var_10 := SerialDbgPrintEx(2, Tmp_18);
    Tmp_17 := status_1;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} 0 > status_1;
    Tmp_20 := strConst__li2bpl1;
    call {:si_unique_call 42} vslice_dummy_var_11 := SerialDbgPrintEx(9, Tmp_20);
    call {:si_unique_call 43} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 44} SerialIRPEpilogue(Extension);
    goto L29;

  anon7_Then:
    assume {:partition} status_1 == 0;
    call {:si_unique_call 45} sdv_25 := SerialCompleteIfError(DeviceObject_2, Irp_2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_25 != 0;
    Tmp_24 := strConst__li2bpl5;
    call {:si_unique_call 46} vslice_dummy_var_12 := SerialDbgPrintEx(2, Tmp_24);
    Tmp_17 := -1073741536;
    goto L1;

  anon8_Then:
    assume {:partition} sdv_25 == 0;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    call {:si_unique_call 47} status_1 := SerialStartOrQueue(Extension, Irp_2, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension), li2bplFunctionConstant124);
    Tmp_19 := strConst__li2bpl6;
    call {:si_unique_call 48} vslice_dummy_var_13 := SerialDbgPrintEx(2, Tmp_19);
    Tmp_17 := status_1;
    goto L1;
}



procedure {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_1: int) returns (Tmp_25: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_25 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_1: int) returns (Tmp_25: int)
{
  var {:pointer} NewIrp: int;
  var {:pointer} Tmp_26: int;
  var {:pointer} Extension_1: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 49} NewIrp := __HAVOC_malloc(4);
    Extension_1 := actual_Extension_1;
    call {:si_unique_call 50} sdv_do_paged_code_check();
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    havoc Tmp_26;
    assume {:nonnull} Tmp_26 != 0;
    assume Tmp_26 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_26))] := 0;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 51} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_1), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 1, Extension_1);
    assume {:nonnull} NewIrp != 0;
    assume NewIrp > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 52} vslice_dummy_var_14 := SerialStartWrite#1(Extension_1);
    goto L12;

  L12:
    Tmp_25 := 0;
    return;

  anon3_Then:
    goto L12;
}



procedure {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_28: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_28: int)
{
  var {:pointer} Tmp_29: int;
  var {:pointer} Tmp_30: int;
  var {:pointer} Tmp_31: int;
  var {:pointer} fullInfo: int;
  var {:scalar} length: int;
  var {:pointer} sdv_29: int;
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} KeyNameStringLength: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_688: int;

  anon0:
    call {:si_unique_call 53} keyName := __HAVOC_malloc(12);
    KeyNameString := actual_KeyNameString;
    KeyNameStringLength := actual_KeyNameStringLength;
    DataLength := actual_DataLength;
    call {:si_unique_call 54} Tmp_30 := __HAVOC_malloc(124);
    call {:si_unique_call 55} Tmp_31 := __HAVOC_malloc(132);
    ntStatus := -1073741670;
    call {:si_unique_call 56} sdv_do_paged_code_check();
    Tmp_31 := strConst__li2bpl7;
    call {:si_unique_call 57} vslice_dummy_var_15 := SerialDbgPrintEx(2, Tmp_31);
    call {:si_unique_call 58} RtlInitUnicodeString(keyName, KeyNameString);
    length := 24 + KeyNameStringLength + DataLength;
    call {:si_unique_call 59} sdv_29 := ExAllocatePoolWithTag(1, length, -666022077);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    fullInfo := sdv_29;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 60} Tmp_29 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_29 != 0;
    assume Tmp_29 > 0;
    Mem_T.INT4[Tmp_29] := length;
    call {:si_unique_call 61} ntStatus := ZwQueryValueKey(0, 0, 1, 0, length, Tmp_29);
    assume {:nonnull} Tmp_29 != 0;
    assume Tmp_29 > 0;
    length := Mem_T.INT4[Tmp_29];
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ntStatus >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_688;
    call {:si_unique_call 62} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_688);
    goto L31;

  L31:
    call {:si_unique_call 63} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_30 := strConst__li2bpl8;
    call {:si_unique_call 64} vslice_dummy_var_16 := SerialDbgPrintEx(2, Tmp_30);
    Tmp_28 := ntStatus;
    goto LM2;

  LM2:
    return;

  anon10_Then:
    goto L31;

  anon9_Then:
    assume {:partition} 0 > ntStatus;
    goto L31;

  anon12_Then:
    assume {:partition} fullInfo == 0;
    goto L23;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialPutRegistryKeyValue"} SerialPutRegistryKeyValue(actual_Handle_1: int, actual_PKeyNameString: int, actual_KeyNameStringLength_1: int, actual_Dtype: int, actual_PData: int, actual_DataLength_1: int) returns (Tmp_33: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPutRegistryKeyValue"} SerialPutRegistryKeyValue(actual_Handle_1: int, actual_PKeyNameString: int, actual_KeyNameStringLength_1: int, actual_Dtype: int, actual_PData: int, actual_DataLength_1: int) returns (Tmp_33: int)
{
  var {:scalar} Tmp_35: int;
  var {:pointer} Tmp_36: int;
  var {:pointer} sdv_33: int;
  var {:pointer} Tmp_37: int;
  var {:scalar} status_2: int;
  var {:scalar} keyname: int;
  var {:scalar} KeyNameStringLength_1: int;
  var {:scalar} Dtype: int;
  var {:scalar} DataLength_1: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;

  anon0:
    call {:si_unique_call 65} keyname := __HAVOC_malloc(12);
    KeyNameStringLength_1 := actual_KeyNameStringLength_1;
    Dtype := actual_Dtype;
    DataLength_1 := actual_DataLength_1;
    call {:si_unique_call 66} Tmp_36 := __HAVOC_malloc(124);
    call {:si_unique_call 67} Tmp_37 := __HAVOC_malloc(132);
    call {:si_unique_call 68} sdv_do_paged_code_check();
    Tmp_37 := strConst__li2bpl9;
    call {:si_unique_call 69} vslice_dummy_var_18 := SerialDbgPrintEx(2, Tmp_37);
    call {:si_unique_call 70} RtlInitUnicodeString(keyname, 0);
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    havoc Tmp_35;
    call {:si_unique_call 71} sdv_33 := ExAllocatePoolWithTag(1, Tmp_35, -666022077);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    assume {:nonnull} keyname != 0;
    assume keyname > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 72} vslice_dummy_var_17 := corral_nondet();
    call {:si_unique_call 73} status_2 := ZwSetValueKey(0, 0, 0, Dtype, 0, DataLength_1);
    call {:si_unique_call 74} sdv_ExFreePool(0);
    Tmp_36 := strConst__li2bpl10;
    call {:si_unique_call 75} vslice_dummy_var_19 := SerialDbgPrintEx(2, Tmp_36);
    Tmp_33 := status_2;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon6_Then:
    Tmp_33 := -1073741670;
    goto L1;

  anon5_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 76} vslice_dummy_var_20 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialGetConfigDefaults"} SerialGetConfigDefaults(actual_DriverDefaultsPtr: int, actual_RegistryPath: int) returns (Tmp_40: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetConfigDefaults"} SerialGetConfigDefaults(actual_DriverDefaultsPtr: int, actual_RegistryPath: int) returns (Tmp_40: int)
{
  var {:pointer} paramTable: int;
  var {:scalar} Tmp_43: int;
  var {:dopa} {:scalar} DbgDefault: int;
  var {:pointer} sdv_37: int;
  var {:scalar} Status_2: int;
  var {:dopa} {:scalar} DetectDefault: int;
  var {:scalar} Tmp_46: int;
  var {:dopa} {:scalar} notThereDefault: int;
  var {:scalar} Tmp_50: int;
  var {:pointer} path: int;
  var {:dopa} {:scalar} zero: int;
  var {:pointer} DriverDefaultsPtr: int;
  var {:pointer} RegistryPath: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 77} DbgDefault := __HAVOC_malloc(4);
    call {:si_unique_call 78} DetectDefault := __HAVOC_malloc(4);
    call {:si_unique_call 79} notThereDefault := __HAVOC_malloc(4);
    call {:si_unique_call 80} zero := __HAVOC_malloc(4);
    DriverDefaultsPtr := actual_DriverDefaultsPtr;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 81} paramTable := __HAVOC_malloc(252);
    call {:si_unique_call 82} vslice_dummy_var_21 := __HAVOC_malloc(28);
    call {:si_unique_call 83} vslice_dummy_var_22 := __HAVOC_malloc(64);
    call {:si_unique_call 84} vslice_dummy_var_23 := __HAVOC_malloc(48);
    call {:si_unique_call 85} vslice_dummy_var_24 := __HAVOC_malloc(32);
    call {:si_unique_call 86} vslice_dummy_var_25 := __HAVOC_malloc(28);
    Status_2 := 0;
    assume {:nonnull} zero != 0;
    assume zero > 0;
    Mem_T.INT4[zero] := 0;
    assume {:nonnull} DbgDefault != 0;
    assume DbgDefault > 0;
    Mem_T.INT4[DbgDefault] := 0;
    assume {:nonnull} DetectDefault != 0;
    assume DetectDefault > 0;
    Mem_T.INT4[DetectDefault] := 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    Mem_T.INT4[notThereDefault] := 1234567;
    call {:si_unique_call 87} sdv_do_paged_code_check();
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_50;
    call {:si_unique_call 88} sdv_37 := ExAllocatePoolWithTag(1, Tmp_50, -666022077);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    path := sdv_37;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} path != 0;
    call {:si_unique_call 89} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 90} sdv_RtlZeroMemory(0, 252);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_46;
    call {:si_unique_call 91} sdv_RtlZeroMemory(0, Tmp_46);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_43;
    call {:si_unique_call 92} sdv_RtlMoveMemory(0, 0, Tmp_43);
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    call {:si_unique_call 93} Status_2 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Status_2 >= 0;
    goto L95;

  L95:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.INT4[ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] == Mem_T.INT4[notThereDefault];
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 1;
    call {:si_unique_call 94} vslice_dummy_var_26 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L96;

  L96:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[RxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] == Mem_T.INT4[notThereDefault];
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[RxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 8;
    call {:si_unique_call 95} vslice_dummy_var_27 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L101;

  L101:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[TxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] == Mem_T.INT4[notThereDefault];
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[TxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 14;
    call {:si_unique_call 96} vslice_dummy_var_28 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L106;

  L106:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[PermitShareDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] == Mem_T.INT4[notThereDefault];
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[PermitShareDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 0;
    call {:si_unique_call 97} vslice_dummy_var_29 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    goto L111;

  L111:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    assume {:nonnull} notThereDefault != 0;
    assume notThereDefault > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[LogFifoDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] == Mem_T.INT4[notThereDefault];
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[LogFifoDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 0;
    call {:si_unique_call 98} vslice_dummy_var_30 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[LogFifoDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 1;
    goto L116;

  L116:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} path != 0;
    call {:si_unique_call 99} sdv_ExFreePool(0);
    goto L122;

  L122:
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Tmp_40 := Status_2;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon25_Then:
    assume {:partition} path == 0;
    goto L122;

  anon24_Then:
    assume {:partition} Mem_T.INT4[LogFifoDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] != Mem_T.INT4[notThereDefault];
    goto L116;

  anon23_Then:
    assume {:partition} Mem_T.INT4[PermitShareDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] != Mem_T.INT4[notThereDefault];
    goto L111;

  anon22_Then:
    assume {:partition} Mem_T.INT4[TxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] != Mem_T.INT4[notThereDefault];
    goto L106;

  anon21_Then:
    assume {:partition} Mem_T.INT4[RxFIFODefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] != Mem_T.INT4[notThereDefault];
    goto L101;

  anon20_Then:
    assume {:partition} Mem_T.INT4[ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] != Mem_T.INT4[notThereDefault];
    goto L96;

  anon19_Then:
    assume {:partition} 0 > Status_2;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[ShouldBreakOnEntry__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[DebugLevel__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 0;
    assume {:nonnull} DriverDefaultsPtr != 0;
    assume DriverDefaultsPtr > 0;
    Mem_T.INT4[UartRemovalDetect__SERIAL_FIRMWARE_DATA(DriverDefaultsPtr)] := 0;
    goto L95;

  anon27_Then:
    assume {:partition} path == 0;
    Status_2 := -1073741670;
    Tmp_40 := Status_2;
    goto L1;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 100} vslice_dummy_var_31 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_3: int, actual_Irp_3: int, actual_SerialSyncEventIn: int) returns (Tmp_54: int);
  free ensures {:va_keep} Tmp_54 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_3: int, actual_Irp_3: int, actual_SerialSyncEventIn: int) returns (Tmp_54: int)
{
  var {:pointer} SerialSyncEvent: int;
  var {:pointer} SerialSyncEventIn: int;
  var vslice_dummy_var_32: int;

  anon0:
    SerialSyncEventIn := actual_SerialSyncEventIn;
    SerialSyncEvent := SerialSyncEventIn;
    call {:si_unique_call 101} vslice_dummy_var_32 := KeSetEvent(SerialSyncEvent, 0, 0);
    Tmp_54 := -1073741802;
    return;
}



procedure {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt: int, actual_PDrvObj: int) returns (Tmp_56: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt: int, actual_PDrvObj: int) returns (Tmp_56: int)
{
  var {:pointer} Tmp_57: int;
  var {:scalar} bufLen: int;
  var {:scalar} Tmp_58: int;
  var {:pointer} keyHandle: int;
  var {:pointer} Tmp_59: int;
  var {:pointer} Tmp_60: int;
  var {:pointer} Tmp_62: int;
  var {:scalar} Tmp_64: int;
  var {:scalar} Tmp_65: int;
  var {:pointer} Tmp_66: int;
  var {:scalar} Tmp_67: int;
  var {:scalar} Tmp_69: int;
  var {:pointer} pRegName: int;
  var {:scalar} sdv_52: int;
  var {:scalar} Tmp_71: int;
  var {:pointer} sdv_54: int;
  var {:scalar} Tmp_74: int;
  var {:pointer} Tmp_76: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} Tmp_79: int;
  var {:pointer} sdv_64: int;
  var {:scalar} status_3: int;
  var {:pointer} Tmp_83: int;
  var {:pointer} pDevObj: int;
  var {:scalar} Tmp_84: int;
  var {:scalar} Tmp_85: int;
  var {:scalar} Tmp_87: int;
  var {:pointer} Tmp_88: int;
  var {:scalar} Tmp_89: int;
  var {:pointer} PDevExt: int;
  var {:pointer} PDrvObj: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_689: int;
  var vslice_dummy_var_690: int;

  anon0:
    call {:si_unique_call 102} Tmp_65 := __HAVOC_malloc(20);
    call {:si_unique_call 103} Tmp_69 := __HAVOC_malloc(20);
    call {:si_unique_call 104} pRegName := __HAVOC_malloc(4);
    call {:si_unique_call 105} Tmp_71 := __HAVOC_malloc(20);
    call {:si_unique_call 106} Tmp_74 := __HAVOC_malloc(20);
    call {:si_unique_call 107} Tmp_79 := __HAVOC_malloc(20);
    call {:si_unique_call 108} Tmp_85 := __HAVOC_malloc(20);
    call {:si_unique_call 109} Tmp_87 := __HAVOC_malloc(20);
    call {:si_unique_call 110} Tmp_89 := __HAVOC_malloc(20);
    PDevExt := actual_PDevExt;
    PDrvObj := actual_PDrvObj;
    call {:si_unique_call 111} Tmp_57 := __HAVOC_malloc(184);
    call {:si_unique_call 112} Tmp_59 := __HAVOC_malloc(64);
    call {:si_unique_call 113} Tmp_60 := __HAVOC_malloc(236);
    call {:si_unique_call 114} Tmp_62 := __HAVOC_malloc(156);
    call {:si_unique_call 115} Tmp_66 := __HAVOC_malloc(156);
    call {:si_unique_call 116} vslice_dummy_var_38 := __HAVOC_malloc(44);
    call {:si_unique_call 117} Tmp_76 := __HAVOC_malloc(100);
    call {:si_unique_call 118} vslice_dummy_var_39 := __HAVOC_malloc(44);
    call {:si_unique_call 119} Tmp_83 := __HAVOC_malloc(192);
    call {:si_unique_call 120} Tmp_88 := __HAVOC_malloc(200);
    status_3 := 0;
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    call {:si_unique_call 121} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc pDevObj;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 122} status_3 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_3 != 0;
    Tmp_56 := status_3;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon43_Then:
    assume {:partition} status_3 == 0;
    Tmp_76 := strConst__li2bpl19;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 123} vslice_dummy_var_40 := SerialGetRegistryKeyValue(keyHandle, Tmp_76, 50, SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt), 4);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt)] != 0;
    call {:si_unique_call 124} vslice_dummy_var_33 := ZwClose(0);
    Tmp_56 := 0;
    goto L1;

  anon44_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt)] == 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 125} status_3 := SerialReadSymName(PDevExt, keyHandle, SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt), pRegName);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 126} vslice_dummy_var_34 := ZwClose(0);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_3 < 0;
    goto L111;

  L111:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} status_3 >= 0;
    goto L113;

  L113:
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    call {:si_unique_call 127} sdv_ExFreePool(0);
    goto L114;

  L114:
    Tmp_56 := status_3;
    goto L1;

  anon52_Then:
    goto L114;

  anon50_Then:
    assume {:partition} 0 > status_3;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 128} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L118;

  L118:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    call {:si_unique_call 129} vslice_dummy_var_36 := IoDeleteSymbolicLink(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L123;

  L123:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 130} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L128;

  L128:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 131} vslice_dummy_var_43 := RtlDeleteRegistryValue(4, 0, 0);
    goto L133;

  L133:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    call {:si_unique_call 132} vslice_dummy_var_37 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 133} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L137;

  L137:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 134} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L113;

  anon57_Then:
    goto L113;

  anon56_Then:
    goto L137;

  anon55_Then:
    goto L133;

  anon54_Then:
    goto L128;

  anon53_Then:
    goto L123;

  anon51_Then:
    goto L118;

  anon45_Then:
    assume {:partition} 0 <= status_3;
    bufLen := sdv_52 * 2 + 2;
    call {:si_unique_call 135} sdv_64 := ExAllocatePoolWithTag(1, bufLen, -666022077);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    call {:si_unique_call 136} sdv_RtlZeroMemory(0, bufLen);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 137} vslice_dummy_var_41 := corral_nondet();
    call {:si_unique_call 138} sdv_54 := ExAllocatePoolWithTag(1, 66, -666022077);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_67;
    call {:si_unique_call 139} sdv_RtlZeroMemory(0, Tmp_67);
    call {:si_unique_call 140} vslice_dummy_var_35 := corral_nondet();
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_77;
    call {:si_unique_call 141} sdv_RtlZeroMemory(0, 2);
    Tmp_59 := strConst__li2bpl20;
    call {:si_unique_call 142} vslice_dummy_var_42 := SerialDbgPrintEx(4, Tmp_59);
    call {:si_unique_call 143} status_3 := IoCreateSymbolicLink(0, 0);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} status_3 >= 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_84;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 144} status_3 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_84);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_3 >= 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 145} status_3 := IoRegisterDeviceInterface(0, 0, 0, DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt));
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_3 >= 0;
    call {:si_unique_call 146} status_3 := IoSetDeviceInterfaceState(0, 1);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} status_3 >= 0;
    goto L111;

  anon49_Then:
    assume {:partition} 0 > status_3;
    Tmp_57 := strConst__li2bpl22;
    call {:si_unique_call 147} vslice_dummy_var_44 := SerialDbgPrintEx(14, Tmp_57);
    goto L111;

  anon48_Then:
    assume {:partition} 0 > status_3;
    Tmp_88 := strConst__li2bpl21;
    call {:si_unique_call 148} vslice_dummy_var_45 := SerialDbgPrintEx(14, Tmp_88);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L111;

  anon47_Then:
    assume {:partition} 0 > status_3;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_64;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_74)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_74))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    assume {:nonnull} Tmp_89 != 0;
    assume Tmp_89 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_89)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_89 != 0;
    assume Tmp_89 > 0;
    assume {:nonnull} Tmp_89 != 0;
    assume Tmp_89 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_89))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_89 != 0;
    assume Tmp_89 > 0;
    assume {:nonnull} Tmp_89 != 0;
    assume Tmp_89 > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc vslice_dummy_var_689;
    call {:si_unique_call 149} SerialLogError(PDrvObj, pDevObj, Tmp_89, Tmp_74, 0, 0, 0, 53, status_3, 393221, Tmp_64, vslice_dummy_var_689, 0, 0);
    Tmp_60 := strConst__li2bpl24;
    call {:si_unique_call 150} vslice_dummy_var_46 := SerialDbgPrintEx(14, Tmp_60);
    goto L111;

  anon46_Then:
    assume {:partition} 0 > status_3;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_58;
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_65)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_65))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_87)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_87))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc vslice_dummy_var_690;
    call {:si_unique_call 151} SerialLogError(PDrvObj, pDevObj, Tmp_87, Tmp_65, 0, 0, 0, 52, status_3, 393220, Tmp_58, vslice_dummy_var_690, 0, 0);
    Tmp_83 := strConst__li2bpl25;
    call {:si_unique_call 152} vslice_dummy_var_47 := SerialDbgPrintEx(14, Tmp_83);
    goto L111;

  anon63_Then:
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_79)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_79))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_85)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_85))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    call {:si_unique_call 153} SerialLogError(PDrvObj, pDevObj, Tmp_85, Tmp_79, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_62 := strConst__li2bpl26;
    call {:si_unique_call 154} vslice_dummy_var_48 := SerialDbgPrintEx(14, Tmp_62);
    status_3 := -1073741670;
    goto L111;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_71)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_71))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_69)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_69))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    assume {:nonnull} Tmp_69 != 0;
    assume Tmp_69 > 0;
    call {:si_unique_call 155} SerialLogError(PDrvObj, pDevObj, Tmp_69, Tmp_71, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_66 := strConst__li2bpl27;
    call {:si_unique_call 156} vslice_dummy_var_49 := SerialDbgPrintEx(14, Tmp_66);
    status_3 := -1073741670;
    goto L111;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCreateDevObj"} SerialCreateDevObj(actual_DriverObject: int, actual_NewDeviceObject: int) returns (Tmp_90: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCreateDevObj"} SerialCreateDevObj(actual_DriverObject: int, actual_NewDeviceObject: int) returns (Tmp_90: int)
{
  var {:scalar} instanceStr: int;
  var {:pointer} Tmp_91: int;
  var {:pointer} deviceObject: int;
  var {:scalar} Tmp_92: int;
  var {:pointer} Tmp_93: int;
  var {:pointer} instanceNumberBuffer: int;
  var {:scalar} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:pointer} pDevExt: int;
  var {:scalar} deviceObjName: int;
  var {:scalar} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:scalar} Tmp_98: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} sdv_74: int;
  var {:pointer} sdv_75: int;
  var {:scalar} Tmp_101: int;
  var {:scalar} Tmp_102: int;
  var {:pointer} Tmp_103: int;
  var {:scalar} Tmp_104: int;
  var {:pointer} Tmp_105: int;
  var {:scalar} Tmp_106: int;
  var {:scalar} status_4: int;
  var {:scalar} Tmp_108: int;
  var {:scalar} Tmp_109: int;
  var {:pointer} Tmp_110: int;
  var {:pointer} DriverObject: int;
  var {:pointer} NewDeviceObject: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_691: int;
  var vslice_dummy_var_692: int;

  anon0:
    call {:si_unique_call 157} instanceStr := __HAVOC_malloc(12);
    call {:si_unique_call 158} deviceObject := __HAVOC_malloc(4);
    call {:si_unique_call 159} deviceObjName := __HAVOC_malloc(12);
    call {:si_unique_call 160} Tmp_96 := __HAVOC_malloc(20);
    call {:si_unique_call 161} Tmp_98 := __HAVOC_malloc(20);
    call {:si_unique_call 162} Tmp_102 := __HAVOC_malloc(20);
    call {:si_unique_call 163} Tmp_106 := __HAVOC_malloc(20);
    DriverObject := actual_DriverObject;
    NewDeviceObject := actual_NewDeviceObject;
    call {:si_unique_call 164} Tmp_91 := __HAVOC_malloc(180);
    call {:si_unique_call 165} Tmp_93 := __HAVOC_malloc(168);
    call {:si_unique_call 166} instanceNumberBuffer := __HAVOC_malloc(80);
    call {:si_unique_call 167} Tmp_95 := __HAVOC_malloc(164);
    call {:si_unique_call 168} Tmp_99 := __HAVOC_malloc(156);
    call {:si_unique_call 169} Tmp_103 := __HAVOC_malloc(100);
    call {:si_unique_call 170} Tmp_105 := __HAVOC_malloc(104);
    call {:si_unique_call 171} vslice_dummy_var_52 := __HAVOC_malloc(60);
    call {:si_unique_call 172} Tmp_110 := __HAVOC_malloc(104);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    status_4 := 0;
    call {:si_unique_call 173} sdv_do_paged_code_check();
    Tmp_103 := strConst__li2bpl28;
    call {:si_unique_call 174} vslice_dummy_var_53 := SerialDbgPrintEx(11, Tmp_103);
    call {:si_unique_call 175} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_108;
    call {:si_unique_call 176} sdv_75 := ExAllocatePoolWithTag(1, Tmp_108, -666022077);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_101;
    call {:si_unique_call 177} sdv_RtlZeroMemory(0, Tmp_101);
    call {:si_unique_call 178} vslice_dummy_var_54 := corral_nondet();
    call {:si_unique_call 179} RtlInitUnicodeString(instanceStr, 0);
    assume {:nonnull} instanceStr != 0;
    assume instanceStr > 0;
    assume {:nonnull} instanceStr != 0;
    assume instanceStr > 0;
    havoc Tmp_109;
    Tmp_94 := Tmp_109;
    call {:si_unique_call 180} vslice_dummy_var_55 := RtlIntegerToUnicodeString(Tmp_94, 10, 0);
    call {:si_unique_call 181} vslice_dummy_var_50 := corral_nondet();
    call {:si_unique_call 182} status_4 := IoCreateDevice(0, 1656, 0, 27, 256, 1, deviceObject);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_4 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc pDevExt;
    call {:si_unique_call 183} sdv_RtlZeroMemory(0, 1656);
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    havoc Tmp_92;
    call {:si_unique_call 184} sdv_74 := ExAllocatePoolWithTag(1, Tmp_92, -666022077);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc Tmp_104;
    call {:si_unique_call 185} sdv_RtlZeroMemory(0, Tmp_104);
    call {:si_unique_call 186} vslice_dummy_var_51 := corral_nondet();
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 187} InitializeListHead(CommonInterruptObject__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 188} InitializeListHead(TopLevelSharers__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 189} InitializeListHead(MultiportSiblings__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 190} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 191} InitializeListHead(ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 192} InitializeListHead(WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 193} InitializeListHead(MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 194} InitializeListHead(PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt));
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 195} InitializeListHead(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(pDevExt));
    call {:si_unique_call 196} sdv_ExInitializeFastMutex(0);
    call {:si_unique_call 197} sdv_ExInitializeFastMutex(0);
    call {:si_unique_call 198} Tmp_97 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_691;
    Mem_T.INT4[Tmp_97] := vslice_dummy_var_691;
    call {:si_unique_call 199} sdv_KeInitializeSpinLock(Tmp_97);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 200} Tmp_97 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_692;
    Mem_T.INT4[Tmp_97] := vslice_dummy_var_692;
    call {:si_unique_call 201} sdv_KeInitializeSpinLock(Tmp_97);
    assume {:nonnull} Tmp_97 != 0;
    assume Tmp_97 > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 202} KeInitializeEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(pDevExt), 1, 0);
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 203} KeInitializeEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt), 1, 0);
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 204} KeInitializeEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt), 1, 0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} NewDeviceObject != 0;
    assume NewDeviceObject > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 205} sdv_ExFreePool(0);
    Tmp_110 := strConst__li2bpl31;
    call {:si_unique_call 206} vslice_dummy_var_56 := SerialDbgPrintEx(11, Tmp_110);
    Tmp_90 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_106)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_106))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_96)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_96))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    assume {:nonnull} Tmp_96 != 0;
    assume Tmp_96 > 0;
    call {:si_unique_call 207} SerialLogError(DriverObject, 0, Tmp_96, Tmp_106, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_95 := strConst__li2bpl32;
    call {:si_unique_call 208} vslice_dummy_var_57 := SerialDbgPrintEx(14, Tmp_95);
    status_4 := -1073741670;
    goto L154;

  L154:
    Tmp_99 := strConst__li2bpl33;
    call {:si_unique_call 209} vslice_dummy_var_58 := SerialDbgPrintEx(14, Tmp_99);
    assume {:nonnull} deviceObjName != 0;
    assume deviceObjName > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 210} sdv_ExFreePool(0);
    goto L158;

  L158:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    call {:si_unique_call 211} sdv_ExFreePool(0);
    goto L164;

  L164:
    call {:si_unique_call 212} IoDeleteDevice(0);
    goto L162;

  L162:
    assume {:nonnull} NewDeviceObject != 0;
    assume NewDeviceObject > 0;
    Tmp_105 := strConst__li2bpl31;
    call {:si_unique_call 213} vslice_dummy_var_59 := SerialDbgPrintEx(11, Tmp_105);
    Tmp_90 := status_4;
    goto L1;

  anon20_Then:
    goto L164;

  anon19_Then:
    goto L162;

  anon18_Then:
    goto L158;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} 0 > status_4;
    Tmp_91 := strConst__li2bpl30;
    call {:si_unique_call 214} vslice_dummy_var_60 := SerialDbgPrintEx(14, Tmp_91);
    goto L154;

  anon22_Then:
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_102)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_102))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_98)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_98))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    assume {:nonnull} Tmp_98 != 0;
    assume Tmp_98 > 0;
    call {:si_unique_call 215} SerialLogError(DriverObject, 0, Tmp_98, Tmp_102, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_93 := strConst__li2bpl34;
    call {:si_unique_call 216} vslice_dummy_var_61 := SerialDbgPrintEx(14, Tmp_93);
    Tmp_90 := -1073741670;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int)
{
  var {:pointer} Tmp_111: int;
  var {:scalar} oldIrql: int;
  var {:pointer} PListEntry: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;

  anon0:
    call {:si_unique_call 217} vslice_dummy_var_62 := __HAVOC_malloc(4);
    PListEntry := actual_PListEntry;
    call {:si_unique_call 218} Tmp_111 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    Mem_T.INT4[Tmp_111] := oldIrql;
    call {:si_unique_call 219} sdv_KeAcquireSpinLock(0, Tmp_111);
    assume {:nonnull} Tmp_111 != 0;
    assume Tmp_111 > 0;
    oldIrql := Mem_T.INT4[Tmp_111];
    call {:si_unique_call 220} vslice_dummy_var_63 := sdv_InsertTailList(AllDevObjs__SERIAL_GLOBALS(SerialGlobals), PListEntry);
    call {:si_unique_call 221} sdv_KeReleaseSpinLock(0, oldIrql);
    return;
}



procedure {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_1: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_113: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_1: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_113: int)
{
  var {:scalar} Tmp_114: int;
  var {:scalar} Tmp_116: int;
  var {:scalar} linkName: int;
  var {:pointer} Tmp_117: int;
  var {:pointer} sdv_85: int;
  var {:scalar} Tmp_120: int;
  var {:scalar} Tmp_121: int;
  var {:pointer} Tmp_122: int;
  var {:scalar} Tmp_123: int;
  var {:pointer} sdv_87: int;
  var {:scalar} Tmp_124: int;
  var {:pointer} sdv_89: int;
  var {:scalar} Tmp_125: int;
  var {:pointer} Tmp_126: int;
  var {:pointer} Tmp_127: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:scalar} status_5: int;
  var {:pointer} pDevObj_1: int;
  var {:pointer} pDrvObj: int;
  var {:scalar} Tmp_131: int;
  var {:pointer} PDevExt_1: int;
  var {:pointer} hRegKey: int;
  var {:pointer} PSymName: int;
  var {:pointer} PpRegName: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_693: int;
  var vslice_dummy_var_694: int;

  anon0:
    call {:si_unique_call 222} Tmp_114 := __HAVOC_malloc(20);
    call {:si_unique_call 223} Tmp_116 := __HAVOC_malloc(20);
    call {:si_unique_call 224} linkName := __HAVOC_malloc(12);
    call {:si_unique_call 225} Tmp_124 := __HAVOC_malloc(20);
    call {:si_unique_call 226} Tmp_131 := __HAVOC_malloc(20);
    PDevExt_1 := actual_PDevExt_1;
    hRegKey := actual_hRegKey;
    PSymName := actual_PSymName;
    PpRegName := actual_PpRegName;
    call {:si_unique_call 227} vslice_dummy_var_66 := __HAVOC_malloc(8);
    call {:si_unique_call 228} Tmp_117 := __HAVOC_malloc(168);
    call {:si_unique_call 229} vslice_dummy_var_67 := __HAVOC_malloc(44);
    call {:si_unique_call 230} Tmp_122 := __HAVOC_malloc(164);
    call {:si_unique_call 231} Tmp_126 := __HAVOC_malloc(148);
    call {:si_unique_call 232} Tmp_127 := __HAVOC_malloc(36);
    call {:si_unique_call 233} Tmp_128 := __HAVOC_malloc(44);
    call {:si_unique_call 234} Tmp_129 := __HAVOC_malloc(60);
    call {:si_unique_call 235} vslice_dummy_var_68 := __HAVOC_malloc(8);
    assume {:nonnull} PDevExt_1 != 0;
    assume PDevExt_1 > 0;
    havoc pDevObj_1;
    assume {:nonnull} pDevObj_1 != 0;
    assume pDevObj_1 > 0;
    havoc pDrvObj;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    call {:si_unique_call 236} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_121;
    call {:si_unique_call 237} sdv_85 := ExAllocatePoolWithTag(257, Tmp_121, -666022077);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_120;
    call {:si_unique_call 238} sdv_RtlZeroMemory(0, Tmp_120);
    call {:si_unique_call 239} sdv_89 := ExAllocatePoolWithTag(257, 258, -666022077);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    Tmp_127 := strConst__li2bpl35;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_693;
    call {:si_unique_call 240} status_5 := SerialGetRegistryKeyValue(hRegKey, Tmp_127, 18, vslice_dummy_var_693, 256);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_5 >= 0;
    goto L39;

  L39:
    call {:si_unique_call 241} vslice_dummy_var_69 := corral_nondet();
    call {:si_unique_call 242} vslice_dummy_var_70 := corral_nondet();
    call {:si_unique_call 243} vslice_dummy_var_71 := corral_nondet();
    call {:si_unique_call 244} vslice_dummy_var_64 := corral_nondet();
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_123;
    call {:si_unique_call 245} sdv_87 := ExAllocatePoolWithTag(257, Tmp_123, -666022077);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_125;
    call {:si_unique_call 246} sdv_RtlZeroMemory(0, Tmp_125);
    call {:si_unique_call 247} vslice_dummy_var_65 := corral_nondet();
    Tmp_129 := strConst__li2bpl39;
    call {:si_unique_call 248} vslice_dummy_var_72 := SerialDbgPrintEx(4, Tmp_129);
    goto L69;

  L69:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 249} sdv_ExFreePool(0);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto L70;

  L70:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_5 >= 0;
    goto L76;

  L76:
    Tmp_113 := status_5;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} 0 > status_5;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 250} sdv_ExFreePool(0);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto L76;

  anon30_Then:
    goto L76;

  anon28_Then:
    goto L70;

  anon38_Then:
    status_5 := -1073741670;
    goto L69;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} 0 > status_5;
    Tmp_128 := strConst__li2bpl36;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_694;
    call {:si_unique_call 251} status_5 := SerialGetRegistryKeyValue(hRegKey, Tmp_128, 22, vslice_dummy_var_694, 256);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_5 < 0;
    Tmp_122 := strConst__li2bpl40;
    call {:si_unique_call 252} vslice_dummy_var_73 := SerialDbgPrintEx(14, Tmp_122);
    goto L69;

  anon31_Then:
    assume {:partition} 0 <= status_5;
    goto L39;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_124)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_124))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    assume {:nonnull} Tmp_114 != 0;
    assume Tmp_114 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_114)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_114 != 0;
    assume Tmp_114 > 0;
    assume {:nonnull} Tmp_114 != 0;
    assume Tmp_114 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_114))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_114 != 0;
    assume Tmp_114 > 0;
    assume {:nonnull} Tmp_114 != 0;
    assume Tmp_114 > 0;
    call {:si_unique_call 253} SerialLogError(pDrvObj, pDevObj_1, Tmp_114, Tmp_124, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_126 := strConst__li2bpl41;
    call {:si_unique_call 254} vslice_dummy_var_74 := SerialDbgPrintEx(14, Tmp_126);
    status_5 := -1073741670;
    goto L69;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_131)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_131))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    assume {:nonnull} Tmp_131 != 0;
    assume Tmp_131 > 0;
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_116)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_116))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    assume {:nonnull} Tmp_116 != 0;
    assume Tmp_116 > 0;
    call {:si_unique_call 255} SerialLogError(pDrvObj, pDevObj_1, Tmp_116, Tmp_131, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_117 := strConst__li2bpl34;
    call {:si_unique_call 256} vslice_dummy_var_75 := SerialDbgPrintEx(14, Tmp_117);
    status_5 := -1073741670;
    goto L69;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_132: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_132: int)
{
  var {:dopa} {:scalar} ioResIndex: int;
  var {:dopa} {:scalar} isMulti: int;
  var {:scalar} interfaceType: int;
  var {:scalar} count: int;
  var {:pointer} Tmp_133: int;
  var {:scalar} gotIO: int;
  var {:scalar} Tmp_134: int;
  var {:pointer} Tmp_135: int;
  var {:pointer} Tmp_136: int;
  var {:pointer} pPartialTrResourceDesc: int;
  var {:pointer} pDevExt_1: int;
  var {:pointer} Tmp_137: int;
  var {:pointer} Tmp_138: int;
  var {:scalar} Tmp_139: int;
  var {:pointer} Tmp_140: int;
  var {:scalar} Tmp_141: int;
  var {:scalar} Tmp_142: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} Tmp_144: int;
  var {:pointer} pFullResourceDesc: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:scalar} Tmp_148: int;
  var {:pointer} Tmp_149: int;
  var {:scalar} Tmp_150: int;
  var {:scalar} foundOne: int;
  var {:scalar} curIoIndex: int;
  var {:pointer} Tmp_151: int;
  var {:pointer} Tmp_152: int;
  var {:scalar} gotInt: int;
  var {:scalar} badValue: int;
  var {:pointer} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:pointer} pPartialTrResourceList: int;
  var {:pointer} Tmp_155: int;
  var {:scalar} i: int;
  var {:scalar} defaultInterfaceType: int;
  var {:pointer} pPartialResourceList: int;
  var {:pointer} pFullTrResourceDesc: int;
  var {:pointer} Tmp_156: int;
  var {:scalar} Tmp_157: int;
  var {:pointer} Tmp_158: int;
  var {:pointer} Tmp_159: int;
  var {:scalar} Tmp_160: int;
  var {:scalar} Tmp_161: int;
  var {:scalar} Tmp_162: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} keyHandle_1: int;
  var {:pointer} Tmp_164: int;
  var {:scalar} defaultClockRate: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Tmp_169: int;
  var {:scalar} Tmp_170: int;
  var {:scalar} Tmp_171: int;
  var {:pointer} Tmp_172: int;
  var {:pointer} sDeviceData: int;
  var {:pointer} Tmp_173: int;
  var {:scalar} gotISR: int;
  var {:pointer} Tmp_174: int;
  var {:pointer} Tmp_175: int;
  var {:pointer} Tmp_177: int;
  var {:scalar} foundIt: int;
  var {:scalar} Tmp_178: int;
  var {:pointer} Tmp_179: int;
  var {:scalar} Tmp_180: int;
  var {:pointer} Tmp_181: int;
  var {:scalar} Tmp_182: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} Tmp_184: int;
  var {:scalar} status_6: int;
  var {:scalar} Tmp_185: int;
  var {:scalar} Tmp_186: int;
  var {:scalar} Tmp_187: int;
  var {:pointer} Tmp_188: int;
  var {:scalar} gotMem: int;
  var {:pointer} Tmp_189: int;
  var {:pointer} Tmp_190: int;
  var {:pointer} pPartialResourceDesc: int;
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} PDevObj: int;
  var {:pointer} PResList: int;
  var {:pointer} PTrResList: int;
  var {:pointer} PConfig: int;
  var {:pointer} PUserData: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_695: int;
  var vslice_dummy_var_696: int;
  var vslice_dummy_var_697: int;
  var vslice_dummy_var_698: int;
  var vslice_dummy_var_699: int;
  var vslice_dummy_var_700: int;
  var vslice_dummy_var_701: int;
  var vslice_dummy_var_702: int;
  var vslice_dummy_var_703: int;
  var vslice_dummy_var_704: int;
  var vslice_dummy_var_705: int;
  var vslice_dummy_var_706: int;
  var vslice_dummy_var_707: int;
  var vslice_dummy_var_708: int;
  var vslice_dummy_var_709: int;
  var vslice_dummy_var_710: int;
  var vslice_dummy_var_711: int;
  var vslice_dummy_var_712: int;
  var vslice_dummy_var_713: int;
  var vslice_dummy_var_714: int;
  var vslice_dummy_var_715: int;

  anon0:
    call {:si_unique_call 257} ioResIndex := __HAVOC_malloc(4);
    call {:si_unique_call 258} isMulti := __HAVOC_malloc(4);
    call {:si_unique_call 259} Tmp_139 := __HAVOC_malloc(20);
    call {:si_unique_call 260} Tmp_141 := __HAVOC_malloc(20);
    call {:si_unique_call 261} Tmp_144 := __HAVOC_malloc(20);
    call {:si_unique_call 262} Tmp_150 := __HAVOC_malloc(20);
    call {:si_unique_call 263} Tmp_157 := __HAVOC_malloc(20);
    call {:si_unique_call 264} Tmp_161 := __HAVOC_malloc(20);
    call {:si_unique_call 265} Tmp_171 := __HAVOC_malloc(20);
    call {:si_unique_call 266} Tmp_185 := __HAVOC_malloc(20);
    call {:si_unique_call 267} Tmp_186 := __HAVOC_malloc(20);
    call {:si_unique_call 268} Tmp_187 := __HAVOC_malloc(20);
    PDevObj := actual_PDevObj;
    PResList := actual_PResList;
    PTrResList := actual_PTrResList;
    PConfig := actual_PConfig;
    PUserData := actual_PUserData;
    call {:si_unique_call 269} Tmp_133 := __HAVOC_malloc(32);
    call {:si_unique_call 270} Tmp_135 := __HAVOC_malloc(48);
    call {:si_unique_call 271} Tmp_136 := __HAVOC_malloc(40);
    call {:si_unique_call 272} Tmp_137 := __HAVOC_malloc(40);
    call {:si_unique_call 273} Tmp_138 := __HAVOC_malloc(52);
    call {:si_unique_call 274} Tmp_140 := __HAVOC_malloc(244);
    call {:si_unique_call 275} Tmp_143 := __HAVOC_malloc(96);
    call {:si_unique_call 276} Tmp_145 := __HAVOC_malloc(112);
    call {:si_unique_call 277} Tmp_146 := __HAVOC_malloc(88);
    call {:si_unique_call 278} Tmp_147 := __HAVOC_malloc(92);
    call {:si_unique_call 279} Tmp_149 := __HAVOC_malloc(88);
    call {:si_unique_call 280} Tmp_151 := __HAVOC_malloc(96);
    call {:si_unique_call 281} Tmp_152 := __HAVOC_malloc(64);
    call {:si_unique_call 282} Tmp_153 := __HAVOC_malloc(96);
    call {:si_unique_call 283} Tmp_154 := __HAVOC_malloc(40);
    call {:si_unique_call 284} Tmp_155 := __HAVOC_malloc(96);
    call {:si_unique_call 285} Tmp_156 := __HAVOC_malloc(152);
    call {:si_unique_call 286} Tmp_158 := __HAVOC_malloc(216);
    call {:si_unique_call 287} Tmp_159 := __HAVOC_malloc(88);
    call {:si_unique_call 288} Tmp_163 := __HAVOC_malloc(92);
    call {:si_unique_call 289} Tmp_164 := __HAVOC_malloc(92);
    call {:si_unique_call 290} Tmp_165 := __HAVOC_malloc(84);
    call {:si_unique_call 291} Tmp_166 := __HAVOC_malloc(232);
    call {:si_unique_call 292} Tmp_167 := __HAVOC_malloc(28);
    call {:si_unique_call 293} Tmp_168 := __HAVOC_malloc(264);
    call {:si_unique_call 294} Tmp_169 := __HAVOC_malloc(96);
    call {:si_unique_call 295} Tmp_172 := __HAVOC_malloc(92);
    call {:si_unique_call 296} Tmp_173 := __HAVOC_malloc(112);
    call {:si_unique_call 297} Tmp_174 := __HAVOC_malloc(68);
    call {:si_unique_call 298} Tmp_175 := __HAVOC_malloc(80);
    call {:si_unique_call 299} Tmp_177 := __HAVOC_malloc(96);
    call {:si_unique_call 300} Tmp_179 := __HAVOC_malloc(264);
    call {:si_unique_call 301} Tmp_181 := __HAVOC_malloc(28);
    call {:si_unique_call 302} Tmp_183 := __HAVOC_malloc(48);
    call {:si_unique_call 303} Tmp_184 := __HAVOC_malloc(108);
    call {:si_unique_call 304} Tmp_188 := __HAVOC_malloc(92);
    call {:si_unique_call 305} Tmp_189 := __HAVOC_malloc(64);
    call {:si_unique_call 306} Tmp_190 := __HAVOC_malloc(84);
    call {:si_unique_call 307} Tmp_191 := __HAVOC_malloc(68);
    call {:si_unique_call 308} Tmp_192 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc pDevExt_1;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    status_6 := -1073741822;
    pFullResourceDesc := 0;
    pFullTrResourceDesc := 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    curIoIndex := 0;
    gotMem := 0;
    call {:si_unique_call 309} sdv_do_paged_code_check();
    Tmp_173 := strConst__li2bpl42;
    call {:si_unique_call 310} vslice_dummy_var_80 := SerialDbgPrintEx(11, Tmp_173);
    Tmp_169 := strConst__li2bpl43;
    call {:si_unique_call 311} vslice_dummy_var_81 := SerialDbgPrintEx(12, Tmp_169);
    Tmp_184 := strConst__li2bpl44;
    call {:si_unique_call 312} vslice_dummy_var_82 := SerialDbgPrintEx(12, Tmp_184);
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} PResList != 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} PTrResList != 0;
    call {:si_unique_call 313} status_6 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} status_6 >= 0;
    Tmp_189 := strConst__li2bpl45;
    call {:si_unique_call 314} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_189, 32, isMulti, 4);
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:partition} yogi_error != 1;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} status_6 >= 0;
    goto L73;

  L73:
    Tmp_188 := strConst__li2bpl46;
    call {:si_unique_call 315} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_188, 46, ioResIndex, 4);
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:partition} yogi_error != 1;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} status_6 >= 0;
    goto L79;

  L79:
    call {:si_unique_call 316} vslice_dummy_var_76 := ZwClose(0);
    assume {:nonnull} PResList != 0;
    assume PResList > 0;
    havoc Tmp_179;
    pFullResourceDesc := Tmp_179;
    assume {:nonnull} PTrResList != 0;
    assume PTrResList > 0;
    havoc Tmp_168;
    pFullTrResourceDesc := Tmp_168;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:partition} pFullResourceDesc != 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    pPartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullResourceDesc);
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc pPartialResourceDesc;
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := 1843200;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(InterruptStatus__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L95;

  L95:
    call {:si_unique_call 317} gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem := SerialGetPortInfo_loop_L95(ioResIndex, isMulti, count, gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem, pPartialResourceDesc, PConfig);
    goto L95_last;

  L95_last:
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    goto L105;

  L105:
    i := i + 1;
    goto L105_dummy;

  L105_dummy:
    assume false;
    return;

  anon196_Then:
    sDeviceData := pPartialResourceDesc;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} sDeviceData != 0;
    assume sDeviceData > 0;
    havoc vslice_dummy_var_695;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := vslice_dummy_var_695;
    goto L105;

  anon197_Then:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} gotMem == 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Controller__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon162_Then:
    goto L105;

  anon161_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon160_Then:
    assume {:partition} gotMem != 0;
    goto L105;

  anon198_Then:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon204_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon159_Then:
    assume {:partition} gotInt != 0;
    goto L105;

  anon157_Then:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(InterruptStatus__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon165_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L105;

  anon164_Then:
    assume {:partition} gotISR != 0;
    goto L121;

  L121:
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Controller__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon166_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L105;

  anon163_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon158_Then:
    goto L121;

  anon156_Then:
    assume {:partition} i >= count;
    goto L85;

  L85:
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    curIoIndex := 0;
    gotMem := 0;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} pFullTrResourceDesc != 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    pPartialTrResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullTrResourceDesc);
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc pPartialTrResourceDesc;
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[LowPart__LUID(TrInterruptStatus__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrInterruptStatus__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L148;

  L148:
    call {:si_unique_call 318} gotIO, curIoIndex, gotInt, i, gotISR, gotMem := SerialGetPortInfo_loop_L148(ioResIndex, isMulti, count, gotIO, pPartialTrResourceDesc, curIoIndex, gotInt, i, gotISR, gotMem, PConfig);
    goto L148_last;

  L148_last:
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    goto L156;

  L156:
    i := i + 1;
    goto L156_dummy;

  L156_dummy:
    assume false;
    return;

  anon199_Then:
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} gotMem != 0;
    goto L156;

  anon171_Then:
    assume {:partition} gotMem == 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrController__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrController__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L156;

  anon173_Then:
    goto L156;

  anon172_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon200_Then:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon170_Then:
    assume {:partition} gotInt != 0;
    goto L156;

  anon168_Then:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrInterruptStatus__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrInterruptStatus__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon176_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L156;

  anon175_Then:
    assume {:partition} gotISR != 0;
    goto L167;

  L167:
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrController__CONFIG_DATA(PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrController__CONFIG_DATA(PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartialTrResourceDesc)))))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon177_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L156;

  anon174_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon169_Then:
    goto L167;

  anon167_Then:
    assume {:partition} i >= count;
    goto L140;

  L140:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := Mem_T.INT4[ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(driverDefaults)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := Mem_T.INT4[RxFIFODefault__SERIAL_FIRMWARE_DATA(driverDefaults)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := Mem_T.INT4[TxFIFODefault__SERIAL_FIRMWARE_DATA(driverDefaults)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := Mem_T.INT4[PermitShareDefault__SERIAL_FIRMWARE_DATA(driverDefaults)];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := 0;
    defaultInterfaceType := 1;
    defaultClockRate := 1843200;
    interfaceType := 0;
    goto L191;

  L191:
    call {:si_unique_call 319} interfaceType, foundOne, vslice_dummy_var_77 := SerialGetPortInfo_loop_L191(interfaceType, foundOne, vslice_dummy_var_77);
    goto L191_last;

  L191_last:
    assume {:CounterLoop 17} {:Counter "interfaceType"} true;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} 17 > interfaceType;
    foundOne := 0;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} interfaceType != 0;
    call {:si_unique_call 320} vslice_dummy_var_77 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} foundOne != 0;
    defaultInterfaceType := interfaceType;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} defaultInterfaceType == 3;
    goto L192;

  L192:
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} PUserData != 0;
    badValue := -1;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData)] == badValue;
    Tmp_162 := 0;
    goto L215;

  L215:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := Tmp_162;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} Mem_T.INT4[ForceFIFOEnable__SERIAL_USER_DATA(PUserData)] == badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_180;
    goto L219;

  L219:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := Tmp_180;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData)] == badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_170;
    goto L223;

  L223:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := Tmp_170;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData)] == badValue;
    Tmp_178 := 0;
    goto L227;

  L227:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := Tmp_178;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData)] == badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_134;
    goto L231;

  L231:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := Tmp_134;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} Mem_T.INT4[MaskInverted__SERIAL_USER_DATA(PUserData)] == badValue;
    Tmp_142 := 0;
    goto L235;

  L235:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := Tmp_142;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData)] == badValue;
    Tmp_148 := defaultClockRate;
    goto L239;

  L239:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := Tmp_148;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_696;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_696;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData)];
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    Tmp_160 := 0;
    goto L245;

  L245:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := Tmp_160;
    goto L246;

  L246:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(PConfig))] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfig))] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == -1;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_185)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_185))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_697;
    havoc vslice_dummy_var_698;
    call {:si_unique_call 321} SerialLogError(vslice_dummy_var_697, 0, vslice_dummy_var_698, Tmp_185, 0, 0, 0, 30, 0, -1073348588, 0, 0, 0, 0);
    Tmp_190 := strConst__li2bpl47;
    call {:si_unique_call 322} vslice_dummy_var_83 := SerialDbgPrintEx(14, Tmp_190);
    status_6 := -1073348588;
    goto L263;

  L263:
    Tmp_132 := status_6;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon185_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != -1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 16;
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_161)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_161))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_699;
    havoc vslice_dummy_var_700;
    call {:si_unique_call 323} SerialLogError(vslice_dummy_var_699, 0, vslice_dummy_var_700, Tmp_161, 0, 0, 0, 32, 0, -1073348587, 0, 0, 0, 0);
    Tmp_177 := strConst__li2bpl48;
    call {:si_unique_call 324} vslice_dummy_var_84 := SerialDbgPrintEx(14, Tmp_177);
    status_6 := -1073348587;
    goto L263;

  anon189_Then:
    assume {:partition} 16 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  L251:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_187)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_187))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_701;
    havoc vslice_dummy_var_702;
    call {:si_unique_call 325} SerialLogError(vslice_dummy_var_701, 0, vslice_dummy_var_702, Tmp_187, 0, 0, 0, 34, 0, -1073348586, 0, 0, 0, 0);
    Tmp_165 := strConst__li2bpl50;
    call {:si_unique_call 326} vslice_dummy_var_85 := SerialDbgPrintEx(14, Tmp_165);
    status_6 := -1073348586;
    goto L263;

  anon191_Then:
    call {:si_unique_call 327} vslice_dummy_var_78 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} foundIt == 0;
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_141)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_141))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_703;
    havoc vslice_dummy_var_704;
    call {:si_unique_call 328} SerialLogError(vslice_dummy_var_703, 0, vslice_dummy_var_704, Tmp_141, 0, 0, 0, 35, 0, -1073348585, 0, 0, 0, 0);
    Tmp_166 := strConst__li2bpl51;
    call {:si_unique_call 329} vslice_dummy_var_98 := SerialDbgPrintEx(14, Tmp_166);
    status_6 := -1073348585;
    goto L263;

  anon192_Then:
    assume {:partition} foundIt != 0;
    goto L294;

  L294:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_139)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_139))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_705;
    havoc vslice_dummy_var_706;
    call {:si_unique_call 330} SerialLogError(vslice_dummy_var_705, 0, vslice_dummy_var_706, Tmp_139, 0, 0, 0, 36, 0, -1073348584, 0, 0, 0, 0);
    Tmp_158 := strConst__li2bpl52;
    call {:si_unique_call 331} vslice_dummy_var_86 := SerialDbgPrintEx(14, Tmp_158);
    status_6 := -1073348584;
    goto L263;

  anon193_Then:
    goto L319;

  L319:
    status_6 := 0;
    Tmp_149 := strConst__li2bpl72;
    call {:si_unique_call 332} vslice_dummy_var_87 := SerialDbgPrintEx(4, Tmp_149);
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_171)] := Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfig))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_171))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(InterruptStatus__CONFIG_DATA(PConfig)))];
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    Tmp_192 := strConst__li2bpl73;
    call {:si_unique_call 333} vslice_dummy_var_88 := SerialDbgPrintEx(4, Tmp_192);
    Tmp_175 := strConst__li2bpl53;
    call {:si_unique_call 334} vslice_dummy_var_89 := SerialDbgPrintEx(4, Tmp_175);
    Tmp_153 := strConst__li2bpl54;
    call {:si_unique_call 335} vslice_dummy_var_90 := SerialDbgPrintEx(4, Tmp_153);
    Tmp_151 := strConst__li2bpl55;
    call {:si_unique_call 336} vslice_dummy_var_91 := SerialDbgPrintEx(4, Tmp_151);
    Tmp_159 := strConst__li2bpl56;
    call {:si_unique_call 337} vslice_dummy_var_92 := SerialDbgPrintEx(4, Tmp_159);
    Tmp_147 := strConst__li2bpl57;
    call {:si_unique_call 338} vslice_dummy_var_93 := SerialDbgPrintEx(4, Tmp_147);
    Tmp_164 := strConst__li2bpl58;
    call {:si_unique_call 339} vslice_dummy_var_94 := SerialDbgPrintEx(4, Tmp_164);
    Tmp_143 := strConst__li2bpl59;
    call {:si_unique_call 340} vslice_dummy_var_95 := SerialDbgPrintEx(4, Tmp_143);
    Tmp_146 := strConst__li2bpl60;
    call {:si_unique_call 341} vslice_dummy_var_96 := SerialDbgPrintEx(4, Tmp_146);
    Tmp_174 := strConst__li2bpl61;
    call {:si_unique_call 342} vslice_dummy_var_97 := SerialDbgPrintEx(4, Tmp_174);
    goto L263;

  anon190_Then:
    goto L319;

  anon184_Then:
    goto L294;

  anon187_Then:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 8;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_157)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_157))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_707;
    havoc vslice_dummy_var_708;
    call {:si_unique_call 343} SerialLogError(vslice_dummy_var_707, 0, vslice_dummy_var_708, Tmp_157, 0, 0, 0, 33, 0, -1073348587, 0, 0, 0, 0);
    Tmp_155 := strConst__li2bpl48;
    call {:si_unique_call 344} vslice_dummy_var_99 := SerialDbgPrintEx(14, Tmp_155);
    status_6 := -1073348587;
    goto L263;

  anon188_Then:
    assume {:partition} 8 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  anon186_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_150)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_150))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_709;
    havoc vslice_dummy_var_710;
    call {:si_unique_call 345} SerialLogError(vslice_dummy_var_709, 0, vslice_dummy_var_710, Tmp_150, 0, 0, 0, 31, 0, -1073348588, 0, 0, 0, 0);
    Tmp_140 := strConst__li2bpl49;
    call {:si_unique_call 346} vslice_dummy_var_100 := SerialDbgPrintEx(14, Tmp_140);
    status_6 := -1073348588;
    goto L263;

  anon183_Then:
    assume {:partition} Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfig))] == 0;
    goto L251;

  anon182_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_182;
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_186)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_186))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    Tmp_154 := strConst__li2bpl74;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_711;
    havoc vslice_dummy_var_712;
    havoc vslice_dummy_var_713;
    call {:si_unique_call 347} SerialLogError(vslice_dummy_var_711, 0, vslice_dummy_var_712, Tmp_186, 0, 0, 0, 59, 0, -1073348583, Tmp_182, vslice_dummy_var_713, 20, Tmp_154);
    Tmp_191 := strConst__li2bpl62;
    call {:si_unique_call 348} vslice_dummy_var_101 := SerialDbgPrintEx(14, Tmp_191);
    status_6 := -1073348583;
    goto L263;

  anon181_Then:
    assume {:partition} Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(PConfig))] == 0;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_144)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_144))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    Tmp_183 := strConst__li2bpl75;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc vslice_dummy_var_714;
    havoc vslice_dummy_var_715;
    call {:si_unique_call 349} SerialLogError(vslice_dummy_var_714, 0, vslice_dummy_var_715, Tmp_144, 0, 0, 0, 58, 0, -1073348583, 0, 0, 26, Tmp_183);
    Tmp_163 := strConst__li2bpl63;
    call {:si_unique_call 350} vslice_dummy_var_102 := SerialDbgPrintEx(14, Tmp_163);
    status_6 := -1073348583;
    goto L263;

  anon215_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_160;
    goto L245;

  anon214_Then:
    assume {:partition} Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_148 := Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData)];
    goto L239;

  anon213_Then:
    assume {:partition} Mem_T.INT4[MaskInverted__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_142 := Mem_T.INT4[MaskInverted__SERIAL_USER_DATA(PUserData)];
    goto L235;

  anon212_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_134 := Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData)];
    goto L231;

  anon211_Then:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_178 := Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData)];
    goto L227;

  anon210_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_170 := Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData)];
    goto L223;

  anon209_Then:
    assume {:partition} Mem_T.INT4[ForceFIFOEnable__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_180 := Mem_T.INT4[ForceFIFOEnable__SERIAL_USER_DATA(PUserData)];
    goto L219;

  anon208_Then:
    assume {:partition} Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData)] != badValue;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    Tmp_162 := Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData)];
    goto L215;

  anon179_Then:
    assume {:partition} PUserData == 0;
    call {:si_unique_call 351} status_6 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} status_6 >= 0;
    Tmp_135 := strConst__li2bpl65;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 352} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_135, 24, DisablePort__CONFIG_DATA(PConfig), 4);
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} yogi_error != 1;
    Tmp_152 := strConst__li2bpl13;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 353} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_152, 32, ForceFifoEnable__CONFIG_DATA(PConfig), 4);
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} yogi_error != 1;
    Tmp_167 := strConst__li2bpl14;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 354} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_167, 14, RxFIFO__CONFIG_DATA(PConfig), 4);
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} yogi_error != 1;
    Tmp_181 := strConst__li2bpl15;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 355} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_181, 14, TxFIFO__CONFIG_DATA(PConfig), 4);
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} yogi_error != 1;
    Tmp_138 := strConst__li2bpl66;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 356} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_138, 26, MaskInverted__CONFIG_DATA(PConfig), 4);
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} yogi_error != 1;
    Tmp_172 := strConst__li2bpl67;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 357} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_172, 46, PermitShare__CONFIG_DATA(PConfig), 4);
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} yogi_error != 1;
    Tmp_136 := strConst__li2bpl68;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 358} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_136, 20, PortIndex__CONFIG_DATA(PConfig), 4);
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} yogi_error != 1;
    Tmp_133 := strConst__li2bpl69;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 359} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_133, 16, Indexed__CONFIG_DATA(PConfig), 4);
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} yogi_error != 1;
    Tmp_137 := strConst__li2bpl70;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 360} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_137, 20, ClockRate__CONFIG_DATA(PConfig), 4);
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} yogi_error != 1;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} status_6 >= 0;
    goto L424;

  L424:
    Tmp_145 := strConst__li2bpl71;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 361} status_6 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_145, 56, TL16C550CAFC__CONFIG_DATA(PConfig), 4);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 362} vslice_dummy_var_79 := ZwClose(0);
    goto L246;

  anon225_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon195_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := defaultClockRate;
    goto L424;

  anon224_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon223_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon222_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon221_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon220_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon219_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon218_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon217_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon216_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon194_Then:
    assume {:partition} 0 > status_6;
    Tmp_156 := strConst__li2bpl64;
    call {:si_unique_call 363} vslice_dummy_var_103 := SerialDbgPrintEx(14, Tmp_156);
    goto L263;

  anon207_Then:
    assume {:partition} defaultInterfaceType != 3;
    goto L192;

  anon180_Then:
    assume {:partition} foundOne == 0;
    goto L198;

  L198:
    interfaceType := interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    assume false;
    return;

  anon206_Then:
    assume {:partition} interfaceType == 0;
    goto L198;

  anon178_Then:
    assume {:partition} interfaceType >= 17;
    goto L192;

  anon205_Then:
    assume {:partition} pFullTrResourceDesc == 0;
    goto L140;

  anon203_Then:
    assume {:partition} pFullResourceDesc == 0;
    goto L85;

  anon155_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    goto L79;

  anon202_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon154_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    goto L73;

  anon201_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon153_Then:
    assume {:partition} 0 > status_6;
    Tmp_132 := status_6;
    goto L1;

  anon152_Then:
    assume {:partition} PTrResList == 0;
    goto L59;

  L59:
    Tmp_132 := -1073741670;
    goto L1;

  anon151_Then:
    assume {:partition} PResList == 0;
    goto L59;
}



procedure {:origName "SerialAddDevice"} SerialAddDevice(actual_DriverObject_1: int, actual_PPdo: int) returns (Tmp_193: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialAddDevice"} SerialAddDevice(actual_DriverObject_1: int, actual_PPdo: int) returns (Tmp_193: int)
{
  var {:pointer} pDevExt_2: int;
  var {:pointer} Tmp_194: int;
  var {:pointer} pNewDevObj: int;
  var {:pointer} pLowerDevObj_2: int;
  var {:pointer} Tmp_196: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_197: int;
  var {:pointer} Tmp_198: int;
  var {:pointer} DriverObject_1: int;
  var {:pointer} PPdo: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;

  anon0:
    call {:si_unique_call 364} pNewDevObj := __HAVOC_malloc(4);
    DriverObject_1 := actual_DriverObject_1;
    PPdo := actual_PPdo;
    call {:si_unique_call 365} Tmp_194 := __HAVOC_malloc(216);
    call {:si_unique_call 366} Tmp_196 := __HAVOC_malloc(260);
    call {:si_unique_call 367} Tmp_197 := __HAVOC_malloc(92);
    call {:si_unique_call 368} Tmp_198 := __HAVOC_malloc(152);
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    pLowerDevObj_2 := 0;
    call {:si_unique_call 369} sdv_do_paged_code_check();
    Tmp_198 := strConst__li2bpl76;
    call {:si_unique_call 370} vslice_dummy_var_104 := SerialDbgPrintEx(11, Tmp_198);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} PPdo != 0;
    call {:si_unique_call 371} status_7 := SerialCreateDevObj(DriverObject_1, pNewDevObj);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_7 >= 0;
    call {:si_unique_call 372} pLowerDevObj_2 := IoAttachDeviceToDeviceStack(0, PPdo);
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    havoc pDevExt_2;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pNewDevObj != 0;
    assume pNewDevObj > 0;
    Tmp_197 := strConst__li2bpl79;
    call {:si_unique_call 373} vslice_dummy_var_105 := SerialDbgPrintEx(11, Tmp_197);
    Tmp_193 := status_7;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 > status_7;
    Tmp_194 := strConst__li2bpl78;
    call {:si_unique_call 374} vslice_dummy_var_106 := SerialDbgPrintEx(14, Tmp_194);
    Tmp_193 := status_7;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} PPdo == 0;
    Tmp_196 := strConst__li2bpl77;
    call {:si_unique_call 375} vslice_dummy_var_107 := SerialDbgPrintEx(14, Tmp_196);
    Tmp_193 := 26;
    goto L1;
}



procedure {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_1: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_199: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_1: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_199: int)
{
  var {:pointer} Tmp_200: int;
  var {:scalar} Tmp_201: int;
  var {:scalar} Tmp_202: int;
  var {:scalar} Tmp_203: int;
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:scalar} allocedUserData: int;
  var {:pointer} Tmp_206: int;
  var {:dopa} {:scalar} powerPolicy: int;
  var {:scalar} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Tmp_209: int;
  var {:pointer} pDevExt_3: int;
  var {:scalar} Tmp_210: int;
  var {:scalar} Tmp_211: int;
  var {:pointer} Tmp_212: int;
  var {:pointer} pnpKey: int;
  var {:scalar} Tmp_213: int;
  var {:pointer} Tmp_214: int;
  var {:pointer} Tmp_215: int;
  var {:pointer} pConfig: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} sdv_159: int;
  var {:dopa} {:scalar} powerOnClose: int;
  var {:pointer} sdv_162: int;
  var {:pointer} Tmp_218: int;
  var {:pointer} Tmp_219: int;
  var {:pointer} Tmp_220: int;
  var {:scalar} status_8: int;
  var {:pointer} countSoFar: int;
  var {:scalar} Tmp_223: int;
  var {:pointer} Tmp_224: int;
  var {:pointer} sdv_173: int;
  var {:scalar} Tmp_225: int;
  var {:scalar} Tmp_226: int;
  var {:pointer} Tmp_227: int;
  var {:pointer} Tmp_228: int;
  var {:scalar} Tmp_229: int;
  var {:pointer} Tmp_230: int;
  var {:pointer} PDevObj_1: int;
  var {:pointer} PResList_1: int;
  var {:pointer} PTrResList_1: int;
  var {:pointer} PUserData_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_716: int;
  var vslice_dummy_var_717: int;
  var vslice_dummy_var_718: int;
  var vslice_dummy_var_719: int;
  var vslice_dummy_var_720: int;
  var vslice_dummy_var_721: int;
  var vslice_dummy_var_722: int;
  var vslice_dummy_var_723: int;
  var vslice_dummy_var_724: int;
  var vslice_dummy_var_725: int;
  var vslice_dummy_var_726: int;
  var vslice_dummy_var_727: int;
  var vslice_dummy_var_728: int;
  var vslice_dummy_var_729: int;
  var vslice_dummy_var_730: int;
  var vslice_dummy_var_731: int;

  anon0:
    call {:si_unique_call 376} Tmp_201 := __HAVOC_malloc(20);
    call {:si_unique_call 377} powerPolicy := __HAVOC_malloc(4);
    call {:si_unique_call 378} Tmp_210 := __HAVOC_malloc(20);
    call {:si_unique_call 379} powerOnClose := __HAVOC_malloc(4);
    call {:si_unique_call 380} Tmp_225 := __HAVOC_malloc(20);
    PDevObj_1 := actual_PDevObj_1;
    PResList_1 := actual_PResList_1;
    PTrResList_1 := actual_PTrResList_1;
    PUserData_1 := actual_PUserData_1;
    call {:si_unique_call 381} Tmp_204 := __HAVOC_malloc(316);
    call {:si_unique_call 382} Tmp_205 := __HAVOC_malloc(112);
    call {:si_unique_call 383} Tmp_209 := __HAVOC_malloc(168);
    call {:si_unique_call 384} Tmp_212 := __HAVOC_malloc(144);
    call {:si_unique_call 385} Tmp_214 := __HAVOC_malloc(156);
    call {:si_unique_call 386} Tmp_215 := __HAVOC_malloc(104);
    call {:si_unique_call 387} Tmp_216 := __HAVOC_malloc(88);
    call {:si_unique_call 388} Tmp_218 := __HAVOC_malloc(132);
    call {:si_unique_call 389} Tmp_219 := __HAVOC_malloc(884);
    call {:si_unique_call 390} Tmp_220 := __HAVOC_malloc(884);
    call {:si_unique_call 391} Tmp_224 := __HAVOC_malloc(220);
    call {:si_unique_call 392} Tmp_227 := __HAVOC_malloc(104);
    call {:si_unique_call 393} Tmp_228 := __HAVOC_malloc(272);
    call {:si_unique_call 394} Tmp_230 := __HAVOC_malloc(168);
    assume {:nonnull} PDevObj_1 != 0;
    assume PDevObj_1 > 0;
    havoc pDevExt_3;
    allocedUserData := 0;
    call {:si_unique_call 395} sdv_do_paged_code_check();
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3)], 2) != 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3)], 1) != 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 396} SerialSetDeviceFlags(pDevExt_3, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3), 2, 0);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    Mem_T.INT4[LowPart__LUID(OriginalController__SERIAL_DEVICE_EXTENSION(pDevExt_3))] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(OriginalController__SERIAL_DEVICE_EXTENSION(pDevExt_3)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    Mem_T.INT4[LowPart__LUID(OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(pDevExt_3))] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(pDevExt_3)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 397} sdv_159 := ExAllocatePoolWithTag(1, 112, -666022077);
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} yogi_error != 1;
    PUserData_1 := sdv_159;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} PUserData_1 != 0;
    allocedUserData := 1;
    call {:si_unique_call 398} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData_1)] := 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_716;
    Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData_1)] := vslice_dummy_var_716;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_717;
    Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData_1)] := vslice_dummy_var_717;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_1)] := 14;
    goto L65;

  L65:
    call {:si_unique_call 399} sdv_162 := ExAllocatePoolWithTag(1, 128, -666022077);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} yogi_error != 1;
    pConfig := sdv_162;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 400} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 401} status_8 := SerialGetPortInfo(PDevObj_1, PResList_1, PTrResList_1, pConfig, PUserData_1);
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} yogi_error != 1;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} status_8 < 0;
    goto L90;

  L90:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} status_8 >= 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    Tmp_229 := 0;
    goto L101;

  L101:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_226;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    Tmp_203 := 1;
    goto L109;

  L109:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  L118:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    Tmp_207 := 1;
    goto L123;

  L123:
    Tmp_213 := Tmp_207;
    goto L124;

  L124:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_718;
    call {:si_unique_call 402} boogieTmp := SerialReportMaxBaudRate(vslice_dummy_var_718);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 403} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    call {:si_unique_call 404} sdv_173 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_173 != 0;
    assume sdv_173 > 0;
    countSoFar := SerialCount__CONFIGURATION_INFORMATION(sdv_173);
    assume {:nonnull} countSoFar != 0;
    assume countSoFar > 0;
    Mem_T.INT4[countSoFar] := Mem_T.INT4[countSoFar] + 1;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 405} vslice_dummy_var_116 := IoWMIRegistrationControl(0, 1);
    goto L153;

  L153:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    call {:si_unique_call 406} SerialUnstallIrps(pDevExt_3);
    goto L154;

  L154:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 407} SerialSetDeviceFlags(pDevExt_3, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_3), -1, 0);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 408} SerialSetDeviceFlags(pDevExt_3, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3), 1, 1);
    goto L164;

  L164:
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 409} sdv_ExFreePool(0);
    goto L165;

  L165:
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} PUserData_1 != 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} allocedUserData != 0;
    call {:si_unique_call 410} sdv_ExFreePool(0);
    goto L169;

  L169:
    Tmp_218 := strConst__li2bpl81;
    call {:si_unique_call 411} vslice_dummy_var_115 := SerialDbgPrintEx(11, Tmp_218);
    Tmp_199 := status_8;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon101_Then:
    assume {:partition} allocedUserData == 0;
    goto L169;

  anon100_Then:
    assume {:partition} PUserData_1 == 0;
    goto L169;

  anon99_Then:
    assume {:partition} pConfig == 0;
    goto L165;

  anon98_Then:
    goto L154;

  anon97_Then:
    goto L153;

  anon96_Then:
    Tmp_207 := 2;
    goto L123;

  anon95_Then:
    Tmp_213 := 0;
    goto L124;

  anon116_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  anon117_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  anon118_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  anon119_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  anon129_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto L118;

  anon128_Then:
    Tmp_203 := 0;
    goto L109;

  anon127_Then:
    Tmp_229 := 1;
    goto L101;

  anon94_Then:
    assume {:partition} 0 > status_8;
    Tmp_227 := strConst__li2bpl80;
    call {:si_unique_call 412} vslice_dummy_var_117 := SerialDbgPrintEx(4, Tmp_227);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    call {:si_unique_call 413} SerialKillPendingIrps(PDevObj_1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 414} SerialSetDeviceFlags(pDevExt_3, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_3), 1, 1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 415} SerialSetDeviceFlags(pDevExt_3, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3), 1, 0);
    goto L164;

  anon102_Then:
    goto L164;

  anon91_Then:
    assume {:partition} 0 <= status_8;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_719;
    call {:si_unique_call 416} status_8 := SerialGotoPowerState(vslice_dummy_var_719, pDevExt_3, 1);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} status_8 < 0;
    goto L90;

  anon93_Then:
    assume {:partition} 0 <= status_8;
    goto L81;

  L81:
    call {:si_unique_call 417} status_8 := SerialFindInitController(PDevObj_1, pConfig);
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} yogi_error != 1;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} status_8 >= 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} pDevExt_3 != 0;
    Tmp_224 := strConst__li2bpl83;
    call {:si_unique_call 418} vslice_dummy_var_111 := SerialDbgPrintEx(8, Tmp_224);
    goto L218;

  L218:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto L220;

  L220:
    Tmp_215 := strConst__li2bpl84;
    call {:si_unique_call 419} vslice_dummy_var_112 := SerialDbgPrintEx(8, Tmp_215);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 420} SerialAddToAllDevs(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_3));
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 421} vslice_dummy_var_113 := KeSynchronizeExecution(0, li2bplFunctionConstant248, 0);
    call {:si_unique_call 422} vslice_dummy_var_108 := KeSynchronizeExecution(0, li2bplFunctionConstant249, 0);
    call {:si_unique_call 423} vslice_dummy_var_109 := KeSynchronizeExecution(0, li2bplFunctionConstant250, 0);
    call {:si_unique_call 424} vslice_dummy_var_110 := KeSynchronizeExecution(0, li2bplFunctionConstant251, 0);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    Tmp_209 := strConst__li2bpl85;
    call {:si_unique_call 425} vslice_dummy_var_114 := SerialDbgPrintEx(12, Tmp_209);
    goto L90;

  anon107_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_200;
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    havoc vslice_dummy_var_720;
    call {:si_unique_call 426} status_8 := SerialDoExternalNaming(pDevExt_3, vslice_dummy_var_720);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} yogi_error != 1;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} status_8 < 0;
    Tmp_212 := strConst__li2bpl86;
    call {:si_unique_call 427} vslice_dummy_var_118 := SerialDbgPrintEx(14, Tmp_212);
    status_8 := 0;
    goto L90;

  anon108_Then:
    assume {:partition} 0 <= status_8;
    goto L90;

  anon130_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon105_Then:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    Tmp_204 := strConst__li2bpl87;
    call {:si_unique_call 428} vslice_dummy_var_119 := SerialDbgPrintEx(8, Tmp_204);
    Tmp_219 := strConst__li2bpl88;
    call {:si_unique_call 429} vslice_dummy_var_120 := SerialDbgPrintEx(8, Tmp_219);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_721;
    havoc vslice_dummy_var_722;
    havoc vslice_dummy_var_723;
    havoc vslice_dummy_var_724;
    havoc vslice_dummy_var_725;
    havoc vslice_dummy_var_726;
    havoc vslice_dummy_var_727;
    call {:si_unique_call 430} status_8 := IoConnectInterrupt(0, li2bplFunctionConstant252, vslice_dummy_var_721, 0, vslice_dummy_var_722, vslice_dummy_var_723, vslice_dummy_var_724, vslice_dummy_var_725, vslice_dummy_var_726, vslice_dummy_var_727, 0);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} status_8 < 0;
    Tmp_214 := strConst__li2bpl89;
    call {:si_unique_call 431} vslice_dummy_var_121 := SerialDbgPrintEx(14, Tmp_214);
    Tmp_220 := strConst__li2bpl88;
    call {:si_unique_call 432} vslice_dummy_var_122 := SerialDbgPrintEx(14, Tmp_220);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc Tmp_223;
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_225)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_225))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    assume {:nonnull} PDevObj_1 != 0;
    assume PDevObj_1 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_728;
    havoc vslice_dummy_var_729;
    havoc vslice_dummy_var_730;
    call {:si_unique_call 433} SerialLogError(vslice_dummy_var_728, PDevObj_1, vslice_dummy_var_729, Tmp_225, 0, 0, 0, 1, status_8, -1073348601, Tmp_223, vslice_dummy_var_730, 0, 0);
    status_8 := -1073348601;
    goto L90;

  anon109_Then:
    assume {:partition} 0 <= status_8;
    goto L220;

  anon106_Then:
    goto L220;

  anon104_Then:
    assume {:partition} pDevExt_3 == 0;
    Tmp_230 := strConst__li2bpl82;
    call {:si_unique_call 434} vslice_dummy_var_123 := SerialDbgPrintEx(14, Tmp_230);
    goto L218;

  anon103_Then:
    assume {:partition} 0 > status_8;
    goto L90;

  anon126_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    goto L81;

  anon125_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon124_Then:
    assume {:partition} pConfig == 0;
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_201)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_201))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_210)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_210))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc vslice_dummy_var_731;
    call {:si_unique_call 435} SerialLogError(vslice_dummy_var_731, 0, Tmp_210, Tmp_201, 0, 0, 0, 37, 0, -1073348600, 0, 0, 0, 0);
    Tmp_228 := strConst__li2bpl90;
    call {:si_unique_call 436} vslice_dummy_var_124 := SerialDbgPrintEx(14, Tmp_228);
    status_8 := -1073741670;
    goto L90;

  anon123_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon113_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_1)] := 1;
    goto L65;

  anon114_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_1)] := 8;
    goto L65;

  anon115_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_1)] := 4;
    goto L65;

  anon122_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_1)] := 1;
    goto L65;

  anon121_Then:
    assume {:partition} PUserData_1 == 0;
    Tmp_199 := -1073741670;
    goto L1;

  anon120_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon90_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3)], 1) == 0;
    goto L17;

  L17:
    call {:si_unique_call 437} status_8 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} status_8 >= 0;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    Mem_T.INT4[powerPolicy] := 0;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    Mem_T.INT4[powerOnClose] := 0;
    Tmp_205 := strConst__li2bpl91;
    call {:si_unique_call 438} vslice_dummy_var_125 := SerialGetRegistryKeyValue(pnpKey, Tmp_205, 56, powerPolicy, 4);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} Mem_T.INT4[powerPolicy] != 0;
    Tmp_211 := 0;
    goto L310;

  L310:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    Tmp_216 := strConst__li2bpl92;
    call {:si_unique_call 439} vslice_dummy_var_126 := SerialGetRegistryKeyValue(pnpKey, Tmp_216, 44, powerOnClose, 4);
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} Mem_T.INT4[powerOnClose] != 0;
    Tmp_202 := 1;
    goto L317;

  L317:
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 440} vslice_dummy_var_127 := ZwClose(0);
    goto L65;

  anon112_Then:
    assume {:partition} Mem_T.INT4[powerOnClose] == 0;
    Tmp_202 := 0;
    goto L317;

  anon132_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon111_Then:
    assume {:partition} Mem_T.INT4[powerPolicy] == 0;
    Tmp_211 := 1;
    goto L310;

  anon131_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon110_Then:
    assume {:partition} 0 > status_8;
    goto L65;

  anon89_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_3)], 2) == 0;
    goto L17;
}



procedure {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_2: int, actual_PIrp: int) returns (Tmp_231: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_2: int, actual_PIrp: int) returns (Tmp_231: int)
{
  var {:scalar} pIdBuf: int;
  var {:scalar} sdv_176: int;
  var {:pointer} sdv_177: int;
  var {:pointer} sdv_181: int;
  var {:dopa} {:scalar} isMulti_1: int;
  var {:pointer} pResList: int;
  var {:pointer} Tmp_232: int;
  var {:pointer} Tmp_233: int;
  var {:scalar} Tmp_234: int;
  var {:pointer} pDevExt_4: int;
  var {:pointer} Tmp_235: int;
  var {:pointer} Tmp_236: int;
  var {:pointer} Tmp_237: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Tmp_240: int;
  var {:pointer} Tmp_241: int;
  var {:pointer} Tmp_242: int;
  var {:pointer} Tmp_243: int;
  var {:scalar} Tmp_244: int;
  var {:pointer} Tmp_245: int;
  var {:scalar} cap: int;
  var {:pointer} Tmp_246: int;
  var {:pointer} Tmp_247: int;
  var {:scalar} Tmp_248: int;
  var {:pointer} Tmp_249: int;
  var {:scalar} pnpIdStrLen: int;
  var {:scalar} pendingIRPs: int;
  var {:pointer} pQueryCapsEvent: int;
  var {:pointer} Tmp_250: int;
  var {:pointer} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:pointer} Tmp_253: int;
  var {:pointer} pIrpStack: int;
  var {:pointer} Tmp_254: int;
  var {:dopa} {:scalar} isMulti_2: int;
  var {:pointer} Tmp_255: int;
  var {:pointer} sdv_210: int;
  var {:pointer} Tmp_256: int;
  var {:pointer} pLowerDevObj_3: int;
  var {:scalar} Tmp_257: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:scalar} gotInt_1: int;
  var {:pointer} Tmp_262: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} pResDesc: int;
  var {:pointer} Tmp_266: int;
  var {:pointer} Tmp_267: int;
  var {:scalar} allocLen: int;
  var {:pointer} Tmp_268: int;
  var {:pointer} Tmp_269: int;
  var {:scalar} Tmp_270: int;
  var {:pointer} Tmp_271: int;
  var {:scalar} Tmp_272: int;
  var {:scalar} listNum: int;
  var {:pointer} Tmp_274: int;
  var {:pointer} Tmp_275: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} Tmp_277: int;
  var {:pointer} Tmp_278: int;
  var {:pointer} Tmp_279: int;
  var {:scalar} pendingIRPs_1: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} pReqList: int;
  var {:pointer} Tmp_281: int;
  var {:pointer} Tmp_282: int;
  var {:pointer} Tmp_283: int;
  var {:pointer} Tmp_284: int;
  var {:pointer} Tmp_285: int;
  var {:scalar} sdv_237: int;
  var {:scalar} pendingIRPs_2: int;
  var {:pointer} Tmp_286: int;
  var {:pointer} Tmp_287: int;
  var {:pointer} Tmp_288: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_289: int;
  var {:pointer} Tmp_290: int;
  var {:pointer} sdv_243: int;
  var {:pointer} pnpKey_1: int;
  var {:pointer} pResFiltEvent: int;
  var {:pointer} Tmp_291: int;
  var {:scalar} gotISR_1: int;
  var {:scalar} Tmp_292: int;
  var {:pointer} Tmp_293: int;
  var {:pointer} Tmp_294: int;
  var {:pointer} Tmp_295: int;
  var {:pointer} Tmp_296: int;
  var {:scalar} curStrLen: int;
  var {:pointer} curStr: int;
  var {:pointer} Tmp_298: int;
  var {:scalar} Tmp_299: int;
  var {:pointer} Tmp_300: int;
  var {:pointer} pDevCaps: int;
  var {:pointer} Tmp_302: int;
  var {:pointer} Tmp_303: int;
  var {:scalar} sdv_270: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_304: int;
  var {:pointer} Tmp_305: int;
  var {:pointer} pnpKey_2: int;
  var {:pointer} Tmp_306: int;
  var {:scalar} sdv_275: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_309: int;
  var {:pointer} PDevObj_2: int;
  var {:pointer} PIrp: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_732: int;
  var vslice_dummy_var_733: int;
  var vslice_dummy_var_734: int;
  var vslice_dummy_var_735: int;
  var vslice_dummy_var_736: int;
  var vslice_dummy_var_737: int;
  var vslice_dummy_var_738: int;
  var vslice_dummy_var_739: int;

  anon0:
    call {:si_unique_call 441} pIdBuf := __HAVOC_malloc(12);
    call {:si_unique_call 442} isMulti_1 := __HAVOC_malloc(4);
    call {:si_unique_call 443} isMulti_2 := __HAVOC_malloc(4);
    PDevObj_2 := actual_PDevObj_2;
    PIrp := actual_PIrp;
    call {:si_unique_call 444} Tmp_232 := __HAVOC_malloc(144);
    call {:si_unique_call 445} Tmp_233 := __HAVOC_malloc(148);
    call {:si_unique_call 446} Tmp_235 := __HAVOC_malloc(64);
    call {:si_unique_call 447} Tmp_236 := __HAVOC_malloc(72);
    call {:si_unique_call 448} Tmp_237 := __HAVOC_malloc(112);
    call {:si_unique_call 449} Tmp_239 := __HAVOC_malloc(100);
    call {:si_unique_call 450} Tmp_240 := __HAVOC_malloc(112);
    call {:si_unique_call 451} Tmp_241 := __HAVOC_malloc(72);
    call {:si_unique_call 452} Tmp_242 := __HAVOC_malloc(132);
    call {:si_unique_call 453} Tmp_243 := __HAVOC_malloc(180);
    call {:si_unique_call 454} Tmp_245 := __HAVOC_malloc(116);
    call {:si_unique_call 455} Tmp_246 := __HAVOC_malloc(60);
    call {:si_unique_call 456} Tmp_247 := __HAVOC_malloc(380);
    call {:si_unique_call 457} Tmp_249 := __HAVOC_malloc(128);
    call {:si_unique_call 458} Tmp_250 := __HAVOC_malloc(28);
    call {:si_unique_call 459} Tmp_251 := __HAVOC_malloc(88);
    call {:si_unique_call 460} Tmp_252 := __HAVOC_malloc(72);
    call {:si_unique_call 461} Tmp_253 := __HAVOC_malloc(72);
    call {:si_unique_call 462} Tmp_254 := __HAVOC_malloc(120);
    call {:si_unique_call 463} Tmp_255 := __HAVOC_malloc(60);
    call {:si_unique_call 464} Tmp_256 := __HAVOC_malloc(60);
    call {:si_unique_call 465} Tmp_258 := __HAVOC_malloc(60);
    call {:si_unique_call 466} Tmp_259 := __HAVOC_malloc(116);
    call {:si_unique_call 467} Tmp_260 := __HAVOC_malloc(112);
    call {:si_unique_call 468} Tmp_261 := __HAVOC_malloc(392);
    call {:si_unique_call 469} Tmp_262 := __HAVOC_malloc(72);
    call {:si_unique_call 470} Tmp_263 := __HAVOC_malloc(72);
    call {:si_unique_call 471} Tmp_264 := __HAVOC_malloc(28);
    call {:si_unique_call 472} Tmp_265 := __HAVOC_malloc(28);
    call {:si_unique_call 473} Tmp_266 := __HAVOC_malloc(92);
    call {:si_unique_call 474} Tmp_267 := __HAVOC_malloc(120);
    call {:si_unique_call 475} Tmp_268 := __HAVOC_malloc(88);
    call {:si_unique_call 476} Tmp_269 := __HAVOC_malloc(72);
    call {:si_unique_call 477} Tmp_271 := __HAVOC_malloc(72);
    call {:si_unique_call 478} Tmp_274 := __HAVOC_malloc(72);
    call {:si_unique_call 479} Tmp_276 := __HAVOC_malloc(72);
    call {:si_unique_call 480} Tmp_277 := __HAVOC_malloc(64);
    call {:si_unique_call 481} Tmp_278 := __HAVOC_malloc(72);
    call {:si_unique_call 482} Tmp_279 := __HAVOC_malloc(28);
    call {:si_unique_call 483} Tmp_280 := __HAVOC_malloc(60);
    call {:si_unique_call 484} Tmp_281 := __HAVOC_malloc(60);
    call {:si_unique_call 485} Tmp_282 := __HAVOC_malloc(168);
    call {:si_unique_call 486} Tmp_283 := __HAVOC_malloc(72);
    call {:si_unique_call 487} Tmp_284 := __HAVOC_malloc(100);
    call {:si_unique_call 488} Tmp_285 := __HAVOC_malloc(132);
    call {:si_unique_call 489} Tmp_286 := __HAVOC_malloc(88);
    call {:si_unique_call 490} Tmp_287 := __HAVOC_malloc(60);
    call {:si_unique_call 491} Tmp_288 := __HAVOC_malloc(128);
    call {:si_unique_call 492} Tmp_289 := __HAVOC_malloc(116);
    call {:si_unique_call 493} Tmp_290 := __HAVOC_malloc(60);
    call {:si_unique_call 494} Tmp_291 := __HAVOC_malloc(128);
    call {:si_unique_call 495} Tmp_293 := __HAVOC_malloc(136);
    call {:si_unique_call 496} Tmp_294 := __HAVOC_malloc(72);
    call {:si_unique_call 497} Tmp_295 := __HAVOC_malloc(72);
    call {:si_unique_call 498} Tmp_296 := __HAVOC_malloc(168);
    call {:si_unique_call 499} Tmp_298 := __HAVOC_malloc(60);
    call {:si_unique_call 500} Tmp_300 := __HAVOC_malloc(132);
    call {:si_unique_call 501} Tmp_302 := __HAVOC_malloc(176);
    call {:si_unique_call 502} Tmp_303 := __HAVOC_malloc(176);
    call {:si_unique_call 503} Tmp_304 := __HAVOC_malloc(144);
    call {:si_unique_call 504} Tmp_305 := __HAVOC_malloc(132);
    call {:si_unique_call 505} Tmp_306 := __HAVOC_malloc(140);
    call {:si_unique_call 506} Tmp_307 := __HAVOC_malloc(156);
    call {:si_unique_call 507} Tmp_308 := __HAVOC_malloc(112);
    call {:si_unique_call 508} Tmp_309 := __HAVOC_malloc(120);
    assume {:nonnull} PDevObj_2 != 0;
    assume PDevObj_2 > 0;
    havoc pDevExt_4;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc pLowerDevObj_3;
    call {:si_unique_call 509} pIrpStack := sdv_IoGetCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 510} sdv_do_paged_code_check();
    call {:si_unique_call 511} status_9 := SerialIRPPrologue(PIrp, pDevExt_4);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} status_9 != 0;
    Tmp_236 := strConst__li2bpl1;
    call {:si_unique_call 512} vslice_dummy_var_139 := SerialDbgPrintEx(9, Tmp_236);
    call {:si_unique_call 513} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 514} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon159_Then:
    assume {:partition} status_9 == 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    goto L270;

  L270:
    call {:si_unique_call 515} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 516} status_9 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    Tmp_231 := status_9;
    goto L1;

  anon193_Then:
    Tmp_300 := strConst__li2bpl102;
    call {:si_unique_call 517} vslice_dummy_var_197 := SerialDbgPrintEx(12, Tmp_300);
    Tmp_281 := strConst__li2bpl103;
    call {:si_unique_call 518} vslice_dummy_var_198 := SerialDbgPrintEx(12, Tmp_281);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 519} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 8, 1);
    call {:si_unique_call 520} SerialKillPendingIrps(PDevObj_2);
    call {:si_unique_call 521} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_732;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_732;
    call {:si_unique_call 522} vslice_dummy_var_199 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 523} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_733;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_733;
    call {:si_unique_call 524} sdv_270 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    pendingIRPs_1 := sdv_270;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} pendingIRPs_1 != 0;
    call {:si_unique_call 525} vslice_dummy_var_128 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L92;

  L92:
    call {:si_unique_call 526} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_734;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_734;
    call {:si_unique_call 527} vslice_dummy_var_200 := sdv_InterlockedIncrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 528} SerialDisableInterfacesResources(PDevObj_2, 0);
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 529} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 530} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon237_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon236_Then:
    assume {:partition} pendingIRPs_1 == 0;
    goto L92;

  anon194_Then:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 4) != 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    goto L109;

  L109:
    call {:si_unique_call 531} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 532} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon161_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 4) == 0;
    goto L109;

  anon195_Then:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_239 := strConst__li2bpl129;
    call {:si_unique_call 533} vslice_dummy_var_192 := SerialDbgPrintEx(12, Tmp_239);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    goto L129;

  L129:
    call {:si_unique_call 534} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 535} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon164_Then:
    goto L127;

  L127:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 8) != 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 536} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 537} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon165_Then:
    call {:si_unique_call 538} status_9 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} status_9 >= 0;
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_277 := strConst__li2bpl45;
    call {:si_unique_call 539} status_9 := SerialGetRegistryKeyValue(pnpKey_1, Tmp_277, 32, isMulti_1, 4);
    goto anon228_Then, anon228_Else;

  anon228_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 540} vslice_dummy_var_129 := ZwClose(0);
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_238 := strConst__li2bpl105;
    goto L162;

  L162:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_257 := 18;
    goto L166;

  L166:
    pnpIdStrLen := Tmp_257;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    allocLen := 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    havoc curStr;
    goto L179;

  L179:
    call {:si_unique_call 541} allocLen, curStrLen := SerialPnpDispatch_loop_L179(sdv_176, allocLen, curStrLen, curStr);
    goto L179_last;

  L179_last:
    curStrLen := sdv_176;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} curStrLen != 0;
    allocLen := allocLen + curStrLen * 2 + 2;
    goto anon231_Else_dummy;

  anon231_Else_dummy:
    assume false;
    return;

  anon231_Then:
    assume {:partition} curStrLen == 0;
    allocLen := allocLen + 2;
    Tmp_292 := allocLen + pnpIdStrLen + 2;
    call {:si_unique_call 542} sdv_243 := ExAllocatePoolWithTag(1, Tmp_292, -666022077);
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_248;
    call {:si_unique_call 543} sdv_RtlZeroMemory(0, Tmp_248);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 544} sdv_RtlCopyMemory(0, 0, allocLen);
    call {:si_unique_call 545} vslice_dummy_var_130 := corral_nondet();
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 546} sdv_ExFreePool(0);
    goto L208;

  L208:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 547} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 548} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon233_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 549} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Tmp_276 := strConst__li2bpl1;
    call {:si_unique_call 550} vslice_dummy_var_193 := SerialDbgPrintEx(9, Tmp_276);
    call {:si_unique_call 551} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 552} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := -1073741670;
    goto L1;

  anon232_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon230_Then:
    Tmp_255 := strConst__li2bpl106;
    call {:si_unique_call 553} vslice_dummy_var_194 := SerialDbgPrintEx(12, Tmp_255);
    Tmp_270 := pnpIdStrLen + 4;
    call {:si_unique_call 554} sdv_210 := ExAllocatePoolWithTag(1, Tmp_270, -666022077);
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_272;
    call {:si_unique_call 555} sdv_RtlZeroMemory(0, Tmp_272);
    call {:si_unique_call 556} vslice_dummy_var_131 := corral_nondet();
    goto L208;

  anon235_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Tmp_271 := strConst__li2bpl1;
    call {:si_unique_call 557} vslice_dummy_var_195 := SerialDbgPrintEx(9, Tmp_271);
    call {:si_unique_call 558} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 559} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := -1073741670;
    goto L1;

  anon234_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon229_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_257 := 18;
    goto L166;

  anon167_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_238 := strConst__li2bpl104;
    goto L162;

  anon228_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon166_Then:
    assume {:partition} 0 > status_9;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_9;
    Tmp_241 := strConst__li2bpl1;
    call {:si_unique_call 560} vslice_dummy_var_196 := SerialDbgPrintEx(9, Tmp_241);
    call {:si_unique_call 561} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 562} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  anon163_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 8) == 0;
    goto L129;

  anon162_Then:
    goto L127;

  anon196_Then:
    Tmp_284 := strConst__li2bpl101;
    call {:si_unique_call 563} vslice_dummy_var_191 := SerialDbgPrintEx(12, Tmp_284);
    goto L270;

  anon197_Then:
    Tmp_268 := strConst__li2bpl100;
    call {:si_unique_call 564} vslice_dummy_var_190 := SerialDbgPrintEx(12, Tmp_268);
    goto L270;

  anon198_Then:
    Tmp_259 := strConst__li2bpl99;
    call {:si_unique_call 565} vslice_dummy_var_189 := SerialDbgPrintEx(12, Tmp_259);
    goto L270;

  anon199_Then:
    Tmp_240 := strConst__li2bpl98;
    call {:si_unique_call 566} vslice_dummy_var_188 := SerialDbgPrintEx(12, Tmp_240);
    goto L270;

  anon200_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    Mem_T.INT4[isMulti_2] := 0;
    Tmp_243 := strConst__li2bpl123;
    call {:si_unique_call 567} vslice_dummy_var_176 := SerialDbgPrintEx(12, Tmp_243);
    Tmp_290 := strConst__li2bpl103;
    call {:si_unique_call 568} vslice_dummy_var_177 := SerialDbgPrintEx(12, Tmp_290);
    call {:si_unique_call 569} sdv_177 := ExAllocatePoolWithTag(0, 16, -666022077);
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} yogi_error != 1;
    pResFiltEvent := sdv_177;
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume {:partition} pResFiltEvent != 0;
    call {:si_unique_call 570} KeInitializeEvent(pResFiltEvent, 1, 0);
    call {:si_unique_call 571} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 572} sdv_IoSetCompletionRoutine(PIrp, li2bplFunctionConstant237, pResFiltEvent, 1, 1, 1);
    call {:si_unique_call 573} status_9 := sdv_IoCallDriver(pLowerDevObj_3, PIrp);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} status_9 == 259;
    call {:si_unique_call 574} vslice_dummy_var_132 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L319;

  L319:
    call {:si_unique_call 575} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    goto L327;

  L327:
    call {:si_unique_call 576} status_9 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} status_9 >= 0;
    Tmp_235 := strConst__li2bpl45;
    call {:si_unique_call 577} status_9 := SerialGetRegistryKeyValue(pnpKey_2, Tmp_235, 32, isMulti_2, 4);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 578} vslice_dummy_var_133 := ZwClose(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_261;
    pResList := Tmp_261;
    Tmp_303 := strConst__li2bpl124;
    call {:si_unique_call 579} vslice_dummy_var_178 := SerialDbgPrintEx(12, Tmp_303);
    listNum := 0;
    goto L346;

  L346:
    call {:si_unique_call 580} Tmp_244, Tmp_245, Tmp_247, gotInt_1, pResDesc, listNum, Tmp_282, Tmp_285, j, Tmp_291, gotISR_1, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182 := SerialPnpDispatch_loop_L346(pResList, pDevExt_4, Tmp_244, Tmp_245, Tmp_247, isMulti_2, pLowerDevObj_3, gotInt_1, pResDesc, listNum, pReqList, Tmp_282, Tmp_285, j, Tmp_291, gotISR_1, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182);
    goto L346_last;

  L346_last:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    gotISR_1 := 0;
    gotInt_1 := 0;
    Tmp_245 := strConst__li2bpl125;
    call {:si_unique_call 581} vslice_dummy_var_179 := SerialDbgPrintEx(12, Tmp_245);
    j := 0;
    goto L354;

  L354:
    call {:si_unique_call 582} Tmp_244, Tmp_247, gotInt_1, pResDesc, Tmp_282, Tmp_285, j, Tmp_291, gotISR_1, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182 := SerialPnpDispatch_loop_L354(pResList, pDevExt_4, Tmp_244, Tmp_247, isMulti_2, pLowerDevObj_3, gotInt_1, pResDesc, Tmp_282, Tmp_285, j, Tmp_291, gotISR_1, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182);
    goto L354_last;

  L354_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    Tmp_244 := j;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_247;
    pResDesc := Tmp_247 + Tmp_244 * 380;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    goto L363;

  L363:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} gotInt_1 != 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto L369;

  L369:
    j := j + 1;
    goto L369_dummy;

  L369_dummy:
    assume false;
    return;

  anon177_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} gotInt_1 == 0;
    goto L369;

  anon180_Then:
    assume {:partition} gotInt_1 != 0;
    goto L355;

  L355:
    listNum := listNum + 1;
    goto L355_dummy;

  L355_dummy:
    assume false;
    return;

  anon179_Then:
    assume {:partition} gotISR_1 != 0;
    goto L355;

  anon178_Then:
    assume {:partition} gotInt_1 == 0;
    goto L364;

  anon176_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L364;

  anon215_Then:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} gotInt_1 != 0;
    goto L363;

  anon175_Then:
    assume {:partition} gotInt_1 == 0;
    gotInt_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_285 := strConst__li2bpl127;
    call {:si_unique_call 583} vslice_dummy_var_181 := SerialDbgPrintEx(12, Tmp_285);
    goto L363;

  anon227_Then:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    Tmp_282 := strConst__li2bpl128;
    call {:si_unique_call 584} vslice_dummy_var_182 := SerialDbgPrintEx(12, Tmp_282);
    goto L363;

  anon226_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} gotISR_1 == 0;
    gotISR_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_291 := strConst__li2bpl126;
    call {:si_unique_call 585} vslice_dummy_var_180 := SerialDbgPrintEx(12, Tmp_291);
    goto L363;

  anon182_Then:
    assume {:partition} gotISR_1 != 0;
    goto L363;

  anon181_Then:
    goto L363;

  anon174_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L363;

  anon173_Then:
    goto L355;

  anon172_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    Tmp_295 := strConst__li2bpl1;
    call {:si_unique_call 586} vslice_dummy_var_183 := SerialDbgPrintEx(9, Tmp_295);
    call {:si_unique_call 587} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 588} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := 0;
    goto L1;

  anon225_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon171_Then:
    assume {:partition} 0 > status_9;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_9;
    Tmp_252 := strConst__li2bpl1;
    call {:si_unique_call 589} vslice_dummy_var_184 := SerialDbgPrintEx(9, Tmp_252);
    call {:si_unique_call 590} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 591} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  anon169_Then:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto L327;

  anon170_Then:
    Tmp_254 := strConst__li2bpl107;
    call {:si_unique_call 592} vslice_dummy_var_185 := SerialDbgPrintEx(12, Tmp_254);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status_9 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    Tmp_253 := strConst__li2bpl1;
    call {:si_unique_call 593} vslice_dummy_var_186 := SerialDbgPrintEx(9, Tmp_253);
    call {:si_unique_call 594} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 595} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  anon168_Then:
    assume {:partition} status_9 != 259;
    goto L319;

  anon224_Then:
    assume {:partition} pResFiltEvent == 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    Tmp_294 := strConst__li2bpl1;
    call {:si_unique_call 596} vslice_dummy_var_187 := SerialDbgPrintEx(9, Tmp_294);
    call {:si_unique_call 597} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 598} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := -1073741670;
    goto L1;

  anon223_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon201_Then:
    Tmp_302 := strConst__li2bpl97;
    call {:si_unique_call 599} vslice_dummy_var_175 := SerialDbgPrintEx(12, Tmp_302);
    goto L270;

  anon202_Then:
    Tmp_296 := strConst__li2bpl108;
    call {:si_unique_call 600} vslice_dummy_var_171 := SerialDbgPrintEx(12, Tmp_296);
    call {:si_unique_call 601} sdv_181 := ExAllocatePoolWithTag(0, 16, -666022077);
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} yogi_error != 1;
    pQueryCapsEvent := sdv_181;
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} pQueryCapsEvent != 0;
    call {:si_unique_call 602} KeInitializeEvent(pQueryCapsEvent, 1, 0);
    call {:si_unique_call 603} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 604} sdv_IoSetCompletionRoutine(PIrp, li2bplFunctionConstant237, pQueryCapsEvent, 1, 1, 1);
    call {:si_unique_call 605} status_9 := sdv_IoCallDriver(pLowerDevObj_3, PIrp);
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} status_9 == 259;
    call {:si_unique_call 606} vslice_dummy_var_134 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L458;

  L458:
    call {:si_unique_call 607} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status_9 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon222_Then, anon222_Else;

  anon222_Else:
    goto L483;

  L483:
    Tmp_278 := strConst__li2bpl1;
    call {:si_unique_call 608} vslice_dummy_var_173 := SerialDbgPrintEx(9, Tmp_278);
    call {:si_unique_call 609} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 610} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  anon222_Then:
    Tmp_308 := strConst__li2bpl109;
    call {:si_unique_call 611} vslice_dummy_var_172 := SerialDbgPrintEx(12, Tmp_308);
    call {:si_unique_call 612} pIrpStack := sdv_IoGetCurrentIrpStackLocation(PIrp);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    havoc pDevCaps;
    cap := 2;
    goto L476;

  L476:
    call {:si_unique_call 613} Tmp_234, cap, Tmp_265, Tmp_279, Tmp_299 := SerialPnpDispatch_loop_L476(Tmp_234, pDevExt_4, cap, Tmp_265, Tmp_279, Tmp_299, pDevCaps);
    goto L476_last;

  L476_last:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} 7 > cap;
    Tmp_299 := cap;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc Tmp_279;
    Tmp_234 := cap;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    havoc Tmp_265;
    assume {:nonnull} Tmp_265 != 0;
    assume Tmp_265 > 0;
    assume {:nonnull} Tmp_279 != 0;
    assume Tmp_279 > 0;
    Mem_T.INT4[Tmp_279 + Tmp_299 * 4] := Mem_T.INT4[Tmp_265 + Tmp_234 * 4];
    cap := cap + 1;
    goto anon184_Else_dummy;

  anon184_Else_dummy:
    assume false;
    return;

  anon184_Then:
    assume {:partition} cap >= 7;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc Tmp_264;
    assume {:nonnull} Tmp_264 != 0;
    assume Tmp_264 > 0;
    Mem_T.INT4[Tmp_264] := 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc Tmp_250;
    assume {:nonnull} Tmp_250 != 0;
    assume Tmp_250 > 0;
    Mem_T.INT4[Tmp_250 + 1 * 4] := 1;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto L483;

  anon183_Then:
    assume {:partition} status_9 != 259;
    goto L458;

  anon221_Then:
    assume {:partition} pQueryCapsEvent == 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    Tmp_262 := strConst__li2bpl1;
    call {:si_unique_call 614} vslice_dummy_var_174 := SerialDbgPrintEx(9, Tmp_262);
    call {:si_unique_call 615} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 616} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := -1073741670;
    goto L1;

  anon220_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon203_Then:
    Tmp_288 := strConst__li2bpl96;
    call {:si_unique_call 617} vslice_dummy_var_170 := SerialDbgPrintEx(12, Tmp_288);
    goto L270;

  anon204_Then:
    Tmp_307 := strConst__li2bpl95;
    call {:si_unique_call 618} vslice_dummy_var_163 := SerialDbgPrintEx(12, Tmp_307);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    Tmp_304 := strConst__li2bpl115;
    call {:si_unique_call 619} vslice_dummy_var_168 := SerialDbgPrintEx(12, Tmp_304);
    goto L524;

  L524:
    call {:si_unique_call 620} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 621} status_9 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    Tmp_231 := status_9;
    goto L1;

  anon211_Then:
    Tmp_266 := strConst__li2bpl110;
    call {:si_unique_call 622} vslice_dummy_var_169 := SerialDbgPrintEx(12, Tmp_266);
    goto L524;

  anon212_Then:
    Tmp_249 := strConst__li2bpl114;
    call {:si_unique_call 623} vslice_dummy_var_167 := SerialDbgPrintEx(12, Tmp_249);
    goto L524;

  anon213_Then:
    Tmp_267 := strConst__li2bpl113;
    call {:si_unique_call 624} vslice_dummy_var_166 := SerialDbgPrintEx(12, Tmp_267);
    goto L524;

  anon214_Then:
    Tmp_242 := strConst__li2bpl112;
    call {:si_unique_call 625} vslice_dummy_var_165 := SerialDbgPrintEx(12, Tmp_242);
    goto L524;

  anon185_Then:
    Tmp_237 := strConst__li2bpl111;
    call {:si_unique_call 626} vslice_dummy_var_164 := SerialDbgPrintEx(12, Tmp_237);
    goto L524;

  anon205_Then:
    Tmp_306 := strConst__li2bpl94;
    call {:si_unique_call 627} vslice_dummy_var_161 := SerialDbgPrintEx(12, Tmp_306);
    Tmp_280 := strConst__li2bpl103;
    call {:si_unique_call 628} vslice_dummy_var_162 := SerialDbgPrintEx(12, Tmp_280);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 629} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 2, 0);
    goto L541;

  L541:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 630} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 631} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon186_Then:
    goto L541;

  anon206_Then:
    Tmp_293 := strConst__li2bpl116;
    call {:si_unique_call 632} vslice_dummy_var_155 := SerialDbgPrintEx(12, Tmp_293);
    Tmp_256 := strConst__li2bpl103;
    call {:si_unique_call 633} vslice_dummy_var_156 := SerialDbgPrintEx(12, Tmp_256);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741637;
    Tmp_305 := strConst__li2bpl122;
    call {:si_unique_call 634} vslice_dummy_var_157 := SerialDbgPrintEx(12, Tmp_305);
    Tmp_274 := strConst__li2bpl1;
    call {:si_unique_call 635} vslice_dummy_var_158 := SerialDbgPrintEx(9, Tmp_274);
    call {:si_unique_call 636} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 637} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := -1073741637;
    goto L1;

  anon187_Then:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    call {:si_unique_call 638} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 639} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon188_Then:
    call {:si_unique_call 640} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    call {:si_unique_call 641} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 17;
    Tmp_251 := strConst__li2bpl121;
    call {:si_unique_call 642} vslice_dummy_var_159 := SerialDbgPrintEx(12, Tmp_251);
    Tmp_269 := strConst__li2bpl1;
    call {:si_unique_call 643} vslice_dummy_var_160 := SerialDbgPrintEx(9, Tmp_269);
    call {:si_unique_call 644} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 645} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := 17;
    goto L1;

  anon189_Then:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 646} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 2, 1);
    call {:si_unique_call 647} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 648} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 649} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon207_Then:
    Tmp_260 := strConst__li2bpl117;
    call {:si_unique_call 650} vslice_dummy_var_151 := SerialDbgPrintEx(12, Tmp_260);
    Tmp_287 := strConst__li2bpl103;
    call {:si_unique_call 651} vslice_dummy_var_152 := SerialDbgPrintEx(12, Tmp_287);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 652} SerialSetDeviceFlags(pDevExt_4, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4), 2, 1);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 653} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 4, 1);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 654} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 2, 0);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 655} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_735;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_735;
    call {:si_unique_call 656} vslice_dummy_var_153 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 657} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_736;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_736;
    call {:si_unique_call 658} sdv_237 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    pendingIRPs := sdv_237;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} pendingIRPs != 0;
    call {:si_unique_call 659} vslice_dummy_var_135 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L643;

  L643:
    call {:si_unique_call 660} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_737;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_737;
    call {:si_unique_call 661} vslice_dummy_var_154 := sdv_InterlockedIncrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 1) != 0;
    call {:si_unique_call 662} SerialReleaseResources(pDevExt_4);
    goto L650;

  L650:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 663} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 664} Tmp_231 := sdv_IoCallDriver(pLowerDevObj_3, PIrp);
    goto L1;

  anon190_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_4)], 1) == 0;
    goto L650;

  anon219_Then:
    assume {:partition} pendingIRPs == 0;
    goto L643;

  anon208_Then:
    Tmp_233 := strConst__li2bpl93;
    call {:si_unique_call 665} vslice_dummy_var_149 := SerialDbgPrintEx(12, Tmp_233);
    Tmp_246 := strConst__li2bpl103;
    call {:si_unique_call 666} vslice_dummy_var_150 := SerialDbgPrintEx(12, Tmp_246);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 667} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 1, 0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 668} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 669} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon209_Then:
    Tmp_309 := strConst__li2bpl118;
    call {:si_unique_call 670} vslice_dummy_var_146 := SerialDbgPrintEx(12, Tmp_309);
    Tmp_258 := strConst__li2bpl103;
    call {:si_unique_call 671} vslice_dummy_var_147 := SerialDbgPrintEx(12, Tmp_258);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 672} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 1, 1);
    call {:si_unique_call 673} SerialKillPendingIrps(PDevObj_2);
    call {:si_unique_call 674} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_738;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_738;
    call {:si_unique_call 675} vslice_dummy_var_148 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 676} Tmp_275 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    havoc vslice_dummy_var_739;
    Mem_T.INT4[Tmp_275] := vslice_dummy_var_739;
    call {:si_unique_call 677} sdv_275 := sdv_InterlockedDecrement(Tmp_275);
    assume {:nonnull} Tmp_275 != 0;
    assume Tmp_275 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    pendingIRPs_2 := sdv_275;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} pendingIRPs_2 != 0;
    call {:si_unique_call 678} vslice_dummy_var_137 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L697;

  L697:
    call {:si_unique_call 679} vslice_dummy_var_136 := SerialRemoveDevObj(PDevObj_2);
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 680} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 681} Tmp_231 := sdv_IoCallDriver(pLowerDevObj_3, PIrp);
    goto L1;

  anon218_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon217_Then:
    assume {:partition} pendingIRPs_2 == 0;
    goto L697;

  anon210_Then:
    Tmp_232 := strConst__li2bpl119;
    call {:si_unique_call 682} vslice_dummy_var_142 := SerialDbgPrintEx(12, Tmp_232);
    Tmp_298 := strConst__li2bpl103;
    call {:si_unique_call 683} vslice_dummy_var_143 := SerialDbgPrintEx(12, Tmp_298);
    call {:si_unique_call 684} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    call {:si_unique_call 685} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 17;
    Tmp_286 := strConst__li2bpl121;
    call {:si_unique_call 686} vslice_dummy_var_144 := SerialDbgPrintEx(12, Tmp_286);
    Tmp_283 := strConst__li2bpl1;
    call {:si_unique_call 687} vslice_dummy_var_145 := SerialDbgPrintEx(9, Tmp_283);
    call {:si_unique_call 688} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 689} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := 17;
    goto L1;

  anon191_Then:
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 690} SerialSetDeviceFlags(pDevExt_4, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_4), 1, 1);
    call {:si_unique_call 691} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 692} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 693} Tmp_231 := SerialIoCallDriver(pDevExt_4, pLowerDevObj_3, PIrp);
    goto L1;

  anon160_Then:
    Tmp_289 := strConst__li2bpl120;
    call {:si_unique_call 694} vslice_dummy_var_140 := SerialDbgPrintEx(12, Tmp_289);
    call {:si_unique_call 695} MmLockPagableSectionByHandle(0);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 696} status_9 := SerialStartDevice(PDevObj_2, PIrp);
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    goto L768;

  L768:
    call {:si_unique_call 697} MmUnlockPagableImageSection(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_9;
    Tmp_263 := strConst__li2bpl1;
    call {:si_unique_call 698} vslice_dummy_var_141 := SerialDbgPrintEx(9, Tmp_263);
    call {:si_unique_call 699} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 700} SerialIRPEpilogue(pDevExt_4);
    Tmp_231 := status_9;
    goto L1;

  anon192_Then:
    call {:si_unique_call 701} vslice_dummy_var_138 := SerialGotoPowerState(PDevObj_2, pDevExt_4, 4);
    goto L768;

  anon216_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_310: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_310: int)
{
  var {:pointer} pDevExt_5: int;
  var {:pointer} Tmp_311: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} pLowerDevObj_4: int;
  var {:pointer} Tmp_313: int;
  var {:scalar} status_10: int;
  var {:pointer} PDevObj_3: int;
  var {:pointer} PIrp_1: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_740: int;
  var vslice_dummy_var_741: int;

  anon0:
    PDevObj_3 := actual_PDevObj_3;
    PIrp_1 := actual_PIrp_1;
    call {:si_unique_call 702} Tmp_311 := __HAVOC_malloc(112);
    call {:si_unique_call 703} Tmp_313 := __HAVOC_malloc(112);
    call {:si_unique_call 704} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(PIrp_1);
    status_10 := -1073741822;
    assume {:nonnull} PDevObj_3 != 0;
    assume PDevObj_3 > 0;
    havoc pDevExt_5;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    havoc pLowerDevObj_4;
    call {:si_unique_call 705} sdv_do_paged_code_check();
    Tmp_311 := strConst__li2bpl130;
    call {:si_unique_call 706} vslice_dummy_var_202 := SerialDbgPrintEx(11, Tmp_311);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 707} KeInitializeEvent(SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_5), 1, 0);
    call {:si_unique_call 708} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_1);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 709} sdv_IoSetCompletionRoutine(PIrp_1, li2bplFunctionConstant237, SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_5), 1, 1, 1);
    call {:si_unique_call 710} status_10 := sdv_IoCallDriver(pLowerDevObj_4, PIrp_1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_10 == 259;
    call {:si_unique_call 711} vslice_dummy_var_201 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PIrp_1 != 0;
    assume PIrp_1 > 0;
    status_10 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_1))];
    goto L34;

  L34:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_10 >= 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc vslice_dummy_var_740;
    havoc vslice_dummy_var_741;
    call {:si_unique_call 712} status_10 := SerialFinishStartDevice(PDevObj_3, vslice_dummy_var_740, vslice_dummy_var_741, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_310 := status_10;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} 0 > status_10;
    Tmp_313 := strConst__li2bpl131;
    call {:si_unique_call 713} vslice_dummy_var_203 := SerialDbgPrintEx(14, Tmp_313);
    Tmp_310 := status_10;
    goto L1;

  anon7_Then:
    assume {:partition} status_10 != 259;
    goto L34;
}



procedure {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_314: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_314 == 131072 || Tmp_314 == 115200 || Tmp_314 == 57344 || Tmp_314 == 57600 || Tmp_314 == 38400 || Tmp_314 == 19200 || Tmp_314 == 14400 || Tmp_314 == 9600 || Tmp_314 == 7200 || Tmp_314 == 4800 || Tmp_314 == 2400 || Tmp_314 == 1800 || Tmp_314 == 1200 || Tmp_314 == 600 || Tmp_314 == 300 || Tmp_314 == 150 || Tmp_314 == 135 || Tmp_314 == 110 || Tmp_314 == 75 || Tmp_314 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_314: int)
{
  var {:scalar} Bauds: int;

  anon0:
    Bauds := actual_Bauds;
    call {:si_unique_call 714} sdv_do_paged_code_check();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Bauds, 65536) != 0;
    Tmp_314 := 131072;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} BAND(Bauds, 65536) == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(Bauds, 131072) != 0;
    Tmp_314 := 115200;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(Bauds, 131072) == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(Bauds, 32768) != 0;
    Tmp_314 := 57344;
    goto L1;

  anon41_Then:
    assume {:partition} BAND(Bauds, 32768) == 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(Bauds, 262144) != 0;
    Tmp_314 := 57600;
    goto L1;

  anon42_Then:
    assume {:partition} BAND(Bauds, 262144) == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(Bauds, 16384) != 0;
    Tmp_314 := 38400;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(Bauds, 16384) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(Bauds, 8192) != 0;
    Tmp_314 := 19200;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(Bauds, 8192) == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Bauds, 4096) != 0;
    Tmp_314 := 14400;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(Bauds, 4096) == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Bauds, 2048) != 0;
    Tmp_314 := 9600;
    goto L1;

  anon46_Then:
    assume {:partition} BAND(Bauds, 2048) == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Bauds, 1024) != 0;
    Tmp_314 := 7200;
    goto L1;

  anon47_Then:
    assume {:partition} BAND(Bauds, 1024) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(Bauds, 512) != 0;
    Tmp_314 := 4800;
    goto L1;

  anon48_Then:
    assume {:partition} BAND(Bauds, 512) == 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Bauds, 256) != 0;
    Tmp_314 := 2400;
    goto L1;

  anon49_Then:
    assume {:partition} BAND(Bauds, 256) == 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} BAND(Bauds, 128) != 0;
    Tmp_314 := 1800;
    goto L1;

  anon50_Then:
    assume {:partition} BAND(Bauds, 128) == 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(Bauds, 64) != 0;
    Tmp_314 := 1200;
    goto L1;

  anon51_Then:
    assume {:partition} BAND(Bauds, 64) == 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Bauds, 32) != 0;
    Tmp_314 := 600;
    goto L1;

  anon52_Then:
    assume {:partition} BAND(Bauds, 32) == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Bauds, 16) != 0;
    Tmp_314 := 300;
    goto L1;

  anon53_Then:
    assume {:partition} BAND(Bauds, 16) == 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Bauds, 8) != 0;
    Tmp_314 := 150;
    goto L1;

  anon54_Then:
    assume {:partition} BAND(Bauds, 8) == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(Bauds, 4) != 0;
    Tmp_314 := 135;
    goto L1;

  anon55_Then:
    assume {:partition} BAND(Bauds, 4) == 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(Bauds, 2) != 0;
    Tmp_314 := 110;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(Bauds, 2) == 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Bauds, 1) != 0;
    Tmp_314 := 75;
    goto L1;

  anon57_Then:
    assume {:partition} BAND(Bauds, 1) == 0;
    Tmp_314 := 0;
    goto L1;
}



procedure {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_2: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_2: int)
{
  var {:scalar} Tmp_316: int;
  var {:pointer} keyHandle_2: int;
  var {:pointer} pRegName_1: int;
  var {:scalar} symLinkName: int;
  var {:pointer} Tmp_318: int;
  var {:pointer} Tmp_320: int;
  var {:pointer} Tmp_321: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_324: int;
  var {:scalar} Tmp_326: int;
  var {:pointer} Extension_2: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_742: int;
  var vslice_dummy_var_743: int;
  var vslice_dummy_var_744: int;
  var vslice_dummy_var_745: int;

  anon0:
    call {:si_unique_call 715} pRegName_1 := __HAVOC_malloc(4);
    call {:si_unique_call 716} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 717} Tmp_326 := __HAVOC_malloc(20);
    call {:si_unique_call 718} vslice_dummy_var_204 := __HAVOC_malloc(4);
    Extension_2 := actual_Extension_2;
    call {:si_unique_call 719} Tmp_318 := __HAVOC_malloc(236);
    call {:si_unique_call 720} Tmp_320 := __HAVOC_malloc(132);
    call {:si_unique_call 721} Tmp_321 := __HAVOC_malloc(76);
    call {:si_unique_call 722} vslice_dummy_var_207 := __HAVOC_malloc(44);
    call {:si_unique_call 723} sdv_do_paged_code_check();
    Tmp_318 := strConst__li2bpl132;
    call {:si_unique_call 724} vslice_dummy_var_208 := SerialDbgPrintEx(6, Tmp_318);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_2)] == 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 725} status_11 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 726} sdv_ExFreePool(0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto L17;

  L17:
    call {:si_unique_call 727} status_11 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_11 == 0;
    call {:si_unique_call 728} RtlInitUnicodeString(symLinkName, 0);
    call {:si_unique_call 729} status_11 := SerialReadSymName(Extension_2, keyHandle_2, symLinkName, pRegName_1);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_11 != 0;
    goto L43;

  L43:
    call {:si_unique_call 730} vslice_dummy_var_205 := ZwClose(0);
    goto L14;

  L14:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 731} sdv_ExFreePool(0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto L55;

  L55:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 732} status_11 := RtlDeleteRegistryValue(4, 0, 0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status_11 < 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_316;
    assume {:nonnull} Tmp_326 != 0;
    assume Tmp_326 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_326)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero)];
    assume {:nonnull} Tmp_326 != 0;
    assume Tmp_326 > 0;
    assume {:nonnull} Tmp_326 != 0;
    assume Tmp_326 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_326))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero))];
    assume {:nonnull} Tmp_326 != 0;
    assume Tmp_326 > 0;
    assume {:nonnull} Tmp_326 != 0;
    assume Tmp_326 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_324;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Tmp_324 != 0;
    assume Tmp_324 > 0;
    havoc vslice_dummy_var_742;
    havoc vslice_dummy_var_743;
    havoc vslice_dummy_var_744;
    havoc vslice_dummy_var_745;
    call {:si_unique_call 733} SerialLogError(vslice_dummy_var_742, vslice_dummy_var_743, vslice_dummy_var_744, Tmp_326, 0, 0, 0, 55, status_11, 393222, Tmp_316, vslice_dummy_var_745, 0, 0);
    Tmp_320 := strConst__li2bpl134;
    call {:si_unique_call 734} vslice_dummy_var_209 := SerialDbgPrintEx(14, Tmp_320);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon32_Then:
    assume {:partition} 0 <= status_11;
    goto L1;

  anon31_Then:
    goto L1;

  anon30_Then:
    goto L1;

  anon25_Then:
    goto L55;

  anon29_Then:
    assume {:partition} status_11 == 0;
    Tmp_321 := strConst__li2bpl133;
    call {:si_unique_call 735} vslice_dummy_var_210 := SerialDbgPrintEx(4, Tmp_321);
    call {:si_unique_call 736} vslice_dummy_var_206 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 737} sdv_ExFreePool(0);
    call {:si_unique_call 738} sdv_ExFreePool(0);
    goto L43;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} status_11 != 0;
    goto L14;

  anon27_Then:
    goto L17;

  anon26_Then:
    goto L14;

  anon24_Then:
    goto L14;

  anon23_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_2)] != 0;
    goto L1;
}



procedure {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_4: int, actual_Irp_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_4: int, actual_Irp_4: int)
{
  var {:pointer} Extension_3: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_211: int;

  anon0:
    call {:si_unique_call 739} vslice_dummy_var_211 := __HAVOC_malloc(4);
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_4 := actual_Irp_4;
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc Extension_3;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    call {:si_unique_call 740} SerialTryToCompleteCurrent#1(Extension_3, li2bplFunctionConstant356, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_4)], -1073741536, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_3), 0, li2bplFunctionConstant354, 2);
    return;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_212: int;

  anon0:
    call {:si_unique_call 741} vslice_dummy_var_212 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_4: int)
{
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} TotalTime: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} Tmp_333: int;
  var {:pointer} sdv_296: int;
  var {:scalar} UseATimer: int;
  var {:pointer} sdv_297: int;
  var {:scalar} OldIrql: int;
  var {:pointer} sdv_299: int;
  var {:pointer} Tmp_334: int;
  var {:scalar} s_p_e_c_i_a_l_2: int;
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:pointer} OldIrp: int;
  var {:pointer} Tmp_336: int;
  var {:pointer} Tmp_337: int;
  var {:scalar} s_p_e_c_i_a_l_4: int;
  var {:scalar} Timeouts: int;
  var {:pointer} Tmp_338: int;
  var {:pointer} Extension_4: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_746: int;
  var vslice_dummy_var_747: int;
  var vslice_dummy_var_748: int;
  var vslice_dummy_var_749: int;

  anon0:
    call {:si_unique_call 742} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 743} vslice_dummy_var_213 := __HAVOC_malloc(4);
    call {:si_unique_call 744} Timeouts := __HAVOC_malloc(20);
    Extension_4 := actual_Extension_4;
    call {:si_unique_call 745} Tmp_334 := __HAVOC_malloc(92);
    call {:si_unique_call 746} Tmp_336 := __HAVOC_malloc(108);
    call {:si_unique_call 747} Tmp_337 := __HAVOC_malloc(72);
    Tmp_336 := strConst__li2bpl135;
    call {:si_unique_call 748} vslice_dummy_var_217 := SerialDbgPrintEx(2, Tmp_336);
    UseATimer := 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_333;
    assume {:nonnull} Tmp_333 != 0;
    assume Tmp_333 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_333))] := 259;
    call {:si_unique_call 749} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 750} Tmp_338 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    Mem_T.INT4[Tmp_338] := OldIrql;
    call {:si_unique_call 751} sdv_KeAcquireSpinLock(0, Tmp_338);
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    OldIrql := Mem_T.INT4[Tmp_338];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 752} sdv_KeReleaseSpinLock(0, OldIrql);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L24;

  L24:
    UseATimer := 1;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L28;

  L28:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_746;
    call {:si_unique_call 753} sdv_299 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_746);
    assume {:nonnull} sdv_299 != 0;
    assume sdv_299 > 0;
    call {:si_unique_call 754} Tmp_338 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    Mem_T.INT4[Tmp_338] := OldIrql;
    call {:si_unique_call 755} IoAcquireCancelSpinLock(Tmp_338);
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    OldIrql := Mem_T.INT4[Tmp_338];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_332;
    assume {:nonnull} Tmp_332 != 0;
    assume Tmp_332 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc OldIrp;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 756} IoReleaseCancelSpinLock(OldIrql);
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(OldIrp))] := -1073741536;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Tmp_337 := strConst__li2bpl1;
    call {:si_unique_call 757} vslice_dummy_var_218 := SerialDbgPrintEx(9, Tmp_337);
    call {:si_unique_call 758} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 759} SerialIRPEpilogue(Extension_4);
    goto L56;

  L56:
    Tmp_334 := strConst__li2bpl136;
    call {:si_unique_call 760} vslice_dummy_var_219 := SerialDbgPrintEx(2, Tmp_334);
    return;

  anon11_Then:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_747;
    call {:si_unique_call 761} vslice_dummy_var_214 := sdv_IoSetCancelRoutine(vslice_dummy_var_747, li2bplFunctionConstant351);
    s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_748;
    call {:si_unique_call 762} sdv_296 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_748);
    assume {:nonnull} sdv_296 != 0;
    assume sdv_296 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_296)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_1], s_p_e_c_i_a_l_2);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 763} vslice_dummy_var_216 := SerialSetTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_4), TotalTime, TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_4), Extension_4);
    s_p_e_c_i_a_l_4 := 4;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_749;
    call {:si_unique_call 764} sdv_297 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_749);
    assume {:nonnull} sdv_297 != 0;
    assume sdv_297 > 0;
    s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_297)));
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_3], s_p_e_c_i_a_l_4);
    goto L68;

  L68:
    call {:si_unique_call 765} vslice_dummy_var_215 := KeSynchronizeExecution(0, li2bplFunctionConstant352, 0);
    call {:si_unique_call 766} IoReleaseCancelSpinLock(OldIrql);
    goto L56;

  anon12_Then:
    assume {:partition} UseATimer == 0;
    goto L68;

  anon9_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto L28;

  anon10_Then:
    goto L24;
}



procedure {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_5: int)
{
  var {:scalar} OldIrql_1: int;
  var {:pointer} OldIrp_1: int;
  var {:pointer} Tmp_340: int;
  var {:pointer} Tmp_341: int;
  var {:pointer} CurrentOpIrp: int;
  var {:pointer} NewIrp_1: int;
  var {:pointer} Extension_5: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;

  anon0:
    call {:si_unique_call 767} vslice_dummy_var_220 := __HAVOC_malloc(4);
    CurrentOpIrp := actual_CurrentOpIrp;
    NewIrp_1 := actual_NewIrp_1;
    Extension_5 := actual_Extension_5;
    call {:si_unique_call 768} Tmp_340 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    havoc OldIrp_1;
    call {:si_unique_call 769} Tmp_341 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    Mem_T.INT4[Tmp_341] := OldIrql_1;
    call {:si_unique_call 770} IoAcquireCancelSpinLock(Tmp_341);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    OldIrql_1 := Mem_T.INT4[Tmp_341];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    call {:si_unique_call 771} vslice_dummy_var_221 := KeSynchronizeExecution(0, li2bplFunctionConstant217, 0);
    call {:si_unique_call 772} IoReleaseCancelSpinLock(OldIrql_1);
    Tmp_340 := strConst__li2bpl1;
    call {:si_unique_call 773} vslice_dummy_var_222 := SerialDbgPrintEx(9, Tmp_340);
    call {:si_unique_call 774} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 775} SerialIRPEpilogue(Extension_5);
    return;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_223: int;

  anon0:
    call {:si_unique_call 776} vslice_dummy_var_223 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialBuildResourceList"} SerialBuildResourceList(actual_PResourceList: int, actual_PPartialCount: int, actual_PUserData_2: int) returns (Tmp_344: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_344 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialBuildResourceList"} SerialBuildResourceList(actual_PResourceList: int, actual_PPartialCount: int, actual_PUserData_2: int) returns (Tmp_344: int)
{
  var {:scalar} Tmp_345: int;
  var {:scalar} countOfPartials: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Tmp_347: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:pointer} pPartial: int;
  var {:scalar} status_12: int;
  var {:pointer} Tmp_350: int;
  var {:pointer} Tmp_352: int;
  var {:pointer} Tmp_353: int;
  var {:pointer} Tmp_354: int;
  var {:pointer} PResourceList: int;
  var {:pointer} PPartialCount: int;
  var {:pointer} PUserData_2: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;

  anon0:
    PResourceList := actual_PResourceList;
    PPartialCount := actual_PPartialCount;
    PUserData_2 := actual_PUserData_2;
    call {:si_unique_call 777} Tmp_346 := __HAVOC_malloc(104);
    call {:si_unique_call 778} Tmp_347 := __HAVOC_malloc(264);
    call {:si_unique_call 779} Tmp_348 := __HAVOC_malloc(264);
    call {:si_unique_call 780} Tmp_349 := __HAVOC_malloc(264);
    call {:si_unique_call 781} Tmp_350 := __HAVOC_malloc(124);
    call {:si_unique_call 782} Tmp_352 := __HAVOC_malloc(124);
    call {:si_unique_call 783} Tmp_353 := __HAVOC_malloc(244);
    call {:si_unique_call 784} Tmp_354 := __HAVOC_malloc(264);
    status_12 := 0;
    call {:si_unique_call 785} sdv_do_paged_code_check();
    Tmp_350 := strConst__li2bpl137;
    call {:si_unique_call 786} vslice_dummy_var_224 := SerialDbgPrintEx(11, Tmp_350);
    Tmp_346 := strConst__li2bpl138;
    call {:si_unique_call 787} vslice_dummy_var_225 := SerialDbgPrintEx(4, Tmp_346);
    assume {:nonnull} PPartialCount != 0;
    assume PPartialCount > 0;
    Mem_T.INT4[PPartialCount] := 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_2))] != 0;
    Tmp_345 := 3;
    goto L20;

  L20:
    countOfPartials := Tmp_345;
    call {:si_unique_call 788} sdv_RtlZeroMemory(0, 68);
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_348;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_349;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} Tmp_349 != 0;
    assume Tmp_349 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_354;
    assume {:nonnull} Tmp_354 != 0;
    assume Tmp_354 > 0;
    assume {:nonnull} PResourceList != 0;
    assume PResourceList > 0;
    havoc Tmp_347;
    assume {:nonnull} Tmp_347 != 0;
    assume Tmp_347 > 0;
    havoc Tmp_353;
    pPartial := Tmp_353;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartial))))] := Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_2))];
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartial)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserPort__SERIAL_USER_DATA(PUserData_2)))];
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_2)] == 1;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L40;

  L40:
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_2)] != 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L44;

  L44:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} countOfPartials == 3;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartial))))] := Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_2))];
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(pPartial)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserInterruptStatus__SERIAL_USER_DATA(PUserData_2)))];
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L45;

  L45:
    assume {:nonnull} PPartialCount != 0;
    assume PPartialCount > 0;
    Mem_T.INT4[PPartialCount] := countOfPartials;
    Tmp_352 := strConst__li2bpl139;
    call {:si_unique_call 789} vslice_dummy_var_226 := SerialDbgPrintEx(11, Tmp_352);
    Tmp_344 := status_12;
    return;

  anon9_Then:
    assume {:partition} countOfPartials != 3;
    goto L45;

  anon12_Then:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_2)] == 0;
    assume {:nonnull} PUserData_2 != 0;
    assume PUserData_2 > 0;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L44;

  anon11_Then:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_2)] != 1;
    assume {:nonnull} pPartial != 0;
    assume pPartial > 0;
    goto L40;

  anon10_Then:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_2))] == 0;
    Tmp_345 := 2;
    goto L20;
}



procedure {:origName "SerialMigrateLegacyRegistry"} SerialMigrateLegacyRegistry(actual_PPdo_1: int, actual_PUserData_3: int, actual_IsMulti: int) returns (Tmp_355: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMigrateLegacyRegistry"} SerialMigrateLegacyRegistry(actual_PPdo_1: int, actual_PUserData_3: int, actual_IsMulti: int) returns (Tmp_355: int)
{
  var {:scalar} pnpNameBuf: int;
  var {:pointer} Tmp_356: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:pointer} Tmp_359: int;
  var {:pointer} Tmp_360: int;
  var {:pointer} Tmp_361: int;
  var {:dopa} {:scalar} isMultiport: int;
  var {:pointer} Tmp_362: int;
  var {:pointer} Tmp_363: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Tmp_365: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} pnpKey_3: int;
  var {:pointer} Tmp_368: int;
  var {:pointer} Tmp_369: int;
  var {:pointer} Tmp_370: int;
  var {:pointer} Tmp_371: int;
  var {:pointer} sdv_326: int;
  var {:pointer} Tmp_373: int;
  var {:pointer} Tmp_374: int;
  var {:scalar} Tmp_375: int;
  var {:pointer} Tmp_376: int;
  var {:scalar} Tmp_377: int;
  var {:scalar} Tmp_379: int;
  var {:pointer} Tmp_380: int;
  var {:pointer} Tmp_381: int;
  var {:scalar} status_13: int;
  var {:pointer} Tmp_382: int;
  var {:pointer} Tmp_383: int;
  var {:pointer} Tmp_384: int;
  var {:pointer} PPdo_1: int;
  var {:pointer} PUserData_3: int;
  var {:scalar} IsMulti: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_750: int;
  var vslice_dummy_var_751: int;
  var vslice_dummy_var_752: int;

  anon0:
    call {:si_unique_call 790} pnpNameBuf := __HAVOC_malloc(12);
    call {:si_unique_call 791} isMultiport := __HAVOC_malloc(4);
    call {:si_unique_call 792} Tmp_379 := __HAVOC_malloc(20);
    PPdo_1 := actual_PPdo_1;
    PUserData_3 := actual_PUserData_3;
    IsMulti := actual_IsMulti;
    call {:si_unique_call 793} Tmp_356 := __HAVOC_malloc(112);
    call {:si_unique_call 794} Tmp_357 := __HAVOC_malloc(64);
    call {:si_unique_call 795} Tmp_358 := __HAVOC_malloc(136);
    call {:si_unique_call 796} Tmp_359 := __HAVOC_malloc(140);
    call {:si_unique_call 797} Tmp_360 := __HAVOC_malloc(32);
    call {:si_unique_call 798} Tmp_361 := __HAVOC_malloc(28);
    call {:si_unique_call 799} Tmp_362 := __HAVOC_malloc(48);
    call {:si_unique_call 800} Tmp_363 := __HAVOC_malloc(64);
    call {:si_unique_call 801} Tmp_364 := __HAVOC_malloc(120);
    call {:si_unique_call 802} Tmp_365 := __HAVOC_malloc(100);
    call {:si_unique_call 803} Tmp_366 := __HAVOC_malloc(104);
    call {:si_unique_call 804} Tmp_367 := __HAVOC_malloc(36);
    call {:si_unique_call 805} Tmp_368 := __HAVOC_malloc(172);
    call {:si_unique_call 806} Tmp_369 := __HAVOC_malloc(100);
    call {:si_unique_call 807} Tmp_370 := __HAVOC_malloc(108);
    call {:si_unique_call 808} Tmp_371 := __HAVOC_malloc(112);
    call {:si_unique_call 809} Tmp_373 := __HAVOC_malloc(156);
    call {:si_unique_call 810} Tmp_374 := __HAVOC_malloc(100);
    call {:si_unique_call 811} Tmp_376 := __HAVOC_malloc(52);
    call {:si_unique_call 812} Tmp_380 := __HAVOC_malloc(28);
    call {:si_unique_call 813} Tmp_381 := __HAVOC_malloc(40);
    call {:si_unique_call 814} Tmp_382 := __HAVOC_malloc(156);
    call {:si_unique_call 815} Tmp_383 := __HAVOC_malloc(124);
    call {:si_unique_call 816} Tmp_384 := __HAVOC_malloc(40);
    assume {:nonnull} isMultiport != 0;
    assume isMultiport > 0;
    Mem_T.INT4[isMultiport] := 1;
    call {:si_unique_call 817} sdv_do_paged_code_check();
    Tmp_359 := strConst__li2bpl140;
    call {:si_unique_call 818} vslice_dummy_var_229 := SerialDbgPrintEx(11, Tmp_359);
    call {:si_unique_call 819} status_13 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_13 >= 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    call {:si_unique_call 820} sdv_326 := ExAllocatePoolWithTag(1, 514, -666022077);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    havoc Tmp_377;
    call {:si_unique_call 821} sdv_RtlZeroMemory(0, Tmp_377);
    call {:si_unique_call 822} vslice_dummy_var_227 := corral_nondet();
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    call {:si_unique_call 823} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    havoc Tmp_375;
    Tmp_367 := strConst__li2bpl35;
    assume {:nonnull} pnpNameBuf != 0;
    assume pnpNameBuf > 0;
    havoc vslice_dummy_var_750;
    call {:si_unique_call 824} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_367, 18, 1, vslice_dummy_var_750, Tmp_375);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 825} sdv_ExFreePool(0);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} status_13 >= 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} IsMulti != 0;
    Tmp_363 := strConst__li2bpl45;
    call {:si_unique_call 826} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_363, 32, 4, isMultiport, 4);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} status_13 < 0;
    Tmp_365 := strConst__li2bpl143;
    call {:si_unique_call 827} vslice_dummy_var_239 := SerialDbgPrintEx(14, Tmp_365);
    goto L66;

  L66:
    call {:si_unique_call 828} vslice_dummy_var_228 := ZwClose(0);
    Tmp_382 := strConst__li2bpl144;
    call {:si_unique_call 829} vslice_dummy_var_230 := SerialDbgPrintEx(11, Tmp_382);
    Tmp_355 := status_13;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon69_Then:
    assume {:partition} 0 <= status_13;
    goto L56;

  L56:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_3)] != 0;
    Tmp_381 := strConst__li2bpl68;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 830} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_381, 20, 4, UserPortIndex__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} status_13 < 0;
    Tmp_371 := strConst__li2bpl145;
    call {:si_unique_call 831} vslice_dummy_var_238 := SerialDbgPrintEx(14, Tmp_371);
    goto L66;

  anon71_Then:
    assume {:partition} 0 <= status_13;
    goto L73;

  L73:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_384 := strConst__li2bpl70;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 832} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_384, 20, 4, UserClockRate__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} status_13 < 0;
    Tmp_356 := strConst__li2bpl146;
    call {:si_unique_call 833} vslice_dummy_var_237 := SerialDbgPrintEx(14, Tmp_356);
    goto L66;

  anon73_Then:
    assume {:partition} 0 <= status_13;
    goto L83;

  L83:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_360 := strConst__li2bpl69;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 834} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_360, 16, 4, UserIndexed__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} status_13 < 0;
    Tmp_366 := strConst__li2bpl147;
    call {:si_unique_call 835} vslice_dummy_var_236 := SerialDbgPrintEx(14, Tmp_366);
    goto L66;

  anon75_Then:
    assume {:partition} 0 <= status_13;
    goto L93;

  L93:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_362 := strConst__li2bpl65;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 836} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_362, 24, 4, DisablePort__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} status_13 < 0;
    Tmp_364 := strConst__li2bpl148;
    call {:si_unique_call 837} vslice_dummy_var_235 := SerialDbgPrintEx(14, Tmp_364);
    goto L66;

  anon77_Then:
    assume {:partition} 0 <= status_13;
    goto L103;

  L103:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} Mem_T.INT4[ForceFIFOEnable__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_357 := strConst__li2bpl13;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 838} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_357, 32, 4, ForceFIFOEnable__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} status_13 < 0;
    Tmp_358 := strConst__li2bpl149;
    call {:si_unique_call 839} vslice_dummy_var_234 := SerialDbgPrintEx(14, Tmp_358);
    goto L66;

  anon79_Then:
    assume {:partition} 0 <= status_13;
    goto L113;

  L113:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_361 := strConst__li2bpl14;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 840} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_361, 14, 4, RxFIFO__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_13 < 0;
    Tmp_374 := strConst__li2bpl150;
    call {:si_unique_call 841} vslice_dummy_var_233 := SerialDbgPrintEx(14, Tmp_374);
    goto L66;

  anon81_Then:
    assume {:partition} 0 <= status_13;
    goto L123;

  L123:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_380 := strConst__li2bpl15;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 842} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_380, 14, 4, TxFIFO__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_13 < 0;
    Tmp_369 := strConst__li2bpl151;
    call {:si_unique_call 843} vslice_dummy_var_232 := SerialDbgPrintEx(14, Tmp_369);
    goto L66;

  anon83_Then:
    assume {:partition} 0 <= status_13;
    goto L133;

  L133:
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Mem_T.INT4[MaskInverted__SERIAL_USER_DATA(PUserData_3)] != -1;
    Tmp_376 := strConst__li2bpl66;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    call {:si_unique_call 844} status_13 := SerialPutRegistryKeyValue(pnpKey_3, Tmp_376, 26, 4, MaskInverted__SERIAL_USER_DATA(PUserData_3), 4);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} status_13 < 0;
    Tmp_383 := strConst__li2bpl152;
    call {:si_unique_call 845} vslice_dummy_var_231 := SerialDbgPrintEx(14, Tmp_383);
    goto L66;

  anon84_Then:
    assume {:partition} 0 <= status_13;
    goto L66;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon82_Then:
    assume {:partition} Mem_T.INT4[MaskInverted__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L66;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L133;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L123;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    assume {:partition} Mem_T.INT4[ForceFIFOEnable__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L113;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:partition} Mem_T.INT4[DisablePort__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L103;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L93;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    assume {:partition} Mem_T.INT4[UserClockRate__SERIAL_USER_DATA(PUserData_3)] == -1;
    goto L83;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_3)] == 0;
    goto L73;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume {:partition} IsMulti == 0;
    goto L56;

  anon66_Then:
    assume {:partition} 0 > status_13;
    Tmp_370 := strConst__li2bpl142;
    call {:si_unique_call 846} vslice_dummy_var_240 := SerialDbgPrintEx(14, Tmp_370);
    goto L66;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_379)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_379))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    assume {:nonnull} PPdo_1 != 0;
    assume PPdo_1 > 0;
    assume {:nonnull} PUserData_3 != 0;
    assume PUserData_3 > 0;
    havoc vslice_dummy_var_751;
    havoc vslice_dummy_var_752;
    call {:si_unique_call 847} SerialLogError(vslice_dummy_var_751, 0, vslice_dummy_var_752, Tmp_379, 0, 0, 0, 63, 0, -1073348600, 0, 0, 0, 0);
    Tmp_368 := strConst__li2bpl153;
    call {:si_unique_call 848} vslice_dummy_var_241 := SerialDbgPrintEx(14, Tmp_368);
    status_13 := -1073741670;
    goto L66;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon65_Then:
    assume {:partition} 0 > status_13;
    Tmp_373 := strConst__li2bpl141;
    call {:si_unique_call 849} vslice_dummy_var_242 := SerialDbgPrintEx(11, Tmp_373);
    Tmp_355 := status_13;
    goto L1;
}



procedure {:origName "SerialEnumerateLegacy"} SerialEnumerateLegacy(actual_DriverObject_2: int, actual_RegistryPath_1: int, actual_DriverDefaultsPtr_1: int) returns (Tmp_385: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialEnumerateLegacy"} SerialEnumerateLegacy(actual_DriverObject_2: int, actual_RegistryPath_1: int, actual_DriverDefaultsPtr_1: int) returns (Tmp_385: int)
{
  var {:pointer} Tmp_386: int;
  var {:pointer} Tmp_387: int;
  var {:scalar} Tmp_388: int;
  var {:scalar} interfaceType_1: int;
  var {:scalar} sdv_342: int;
  var {:pointer} Tmp_389: int;
  var {:pointer} Tmp_390: int;
  var {:dopa} {:scalar} countOfPartials_1: int;
  var {:dopa} {:scalar} defaultInterruptMode_1: int;
  var {:scalar} Tmp_391: int;
  var {:scalar} Tmp_392: int;
  var {:pointer} Tmp_393: int;
  var {:scalar} Tmp_394: int;
  var {:scalar} Tmp_395: int;
  var {:pointer} Tmp_396: int;
  var {:scalar} Tmp_397: int;
  var {:scalar} Tmp_398: int;
  var {:pointer} sdv_348: int;
  var {:scalar} Tmp_399: int;
  var {:pointer} trResourceList: int;
  var {:pointer} sdv_349: int;
  var {:pointer} Tmp_400: int;
  var {:scalar} Tmp_401: int;
  var {:pointer} sdv_350: int;
  var {:scalar} Tmp_402: int;
  var {:scalar} Tmp_403: int;
  var {:pointer} lowerDevice: int;
  var {:pointer} Tmp_404: int;
  var {:pointer} sdv_352: int;
  var {:scalar} Tmp_405: int;
  var {:pointer} Tmp_406: int;
  var {:scalar} actuallyReturned: int;
  var {:scalar} Tmp_409: int;
  var {:pointer} Tmp_410: int;
  var {:scalar} Tmp_411: int;
  var {:scalar} Tmp_412: int;
  var {:scalar} Tmp_413: int;
  var {:pointer} sdv_358: int;
  var {:scalar} foundOne_1: int;
  var {:scalar} Tmp_414: int;
  var {:scalar} PnPID: int;
  var {:scalar} Tmp_415: int;
  var {:scalar} Tmp_416: int;
  var {:pointer} Tmp_417: int;
  var {:dopa} {:scalar} badValue_1: int;
  var {:pointer} deviceExtension: int;
  var {:pointer} Tmp_418: int;
  var {:pointer} countSoFar_1: int;
  var {:scalar} Tmp_419: int;
  var {:scalar} Tmp_420: int;
  var {:scalar} Tmp_421: int;
  var {:scalar} Tmp_422: int;
  var {:scalar} Tmp_423: int;
  var {:scalar} Tmp_424: int;
  var {:scalar} Tmp_425: int;
  var {:scalar} i_1: int;
  var {:dopa} {:scalar} defaultInterfaceType_1: int;
  var {:scalar} Tmp_427: int;
  var {:pointer} newDevObj: int;
  var {:pointer} Tmp_429: int;
  var {:pointer} userSubKey: int;
  var {:scalar} Tmp_431: int;
  var {:pointer} sdv_369: int;
  var {:pointer} Tmp_432: int;
  var {:pointer} Tmp_433: int;
  var {:pointer} pRequiredList: int;
  var {:scalar} Tmp_434: int;
  var {:pointer} Tmp_436: int;
  var {:pointer} Tmp_437: int;
  var {:scalar} Tmp_438: int;
  var {:scalar} Tmp_439: int;
  var {:pointer} resourceList: int;
  var {:scalar} Tmp_440: int;
  var {:pointer} Tmp_441: int;
  var {:pointer} Tmp_442: int;
  var {:pointer} sdv_374: int;
  var {:pointer} Tmp_443: int;
  var {:pointer} Tmp_444: int;
  var {:pointer} sdv_377: int;
  var {:scalar} Tmp_445: int;
  var {:pointer} Tmp_446: int;
  var {:scalar} Tmp_447: int;
  var {:scalar} legacyKeys: int;
  var {:dopa} {:scalar} legacyDiscovered: int;
  var {:pointer} parameters: int;
  var {:scalar} Tmp_448: int;
  var {:dopa} {:scalar} defaultAddressSpace: int;
  var {:pointer} parametersKey: int;
  var {:pointer} sdv_380: int;
  var {:scalar} status_14: int;
  var {:scalar} sdv_382: int;
  var {:scalar} parametersPath: int;
  var {:pointer} newPdo: int;
  var {:dopa} {:scalar} brokenStatus: int;
  var {:pointer} Tmp_449: int;
  var {:pointer} sdv_383: int;
  var {:pointer} Tmp_451: int;
  var {:scalar} userData: int;
  var {:pointer} Tmp_452: int;
  var {:dopa} {:scalar} zero_2: int;
  var {:scalar} Tmp_453: int;
  var {:pointer} DriverObject_2: int;
  var {:pointer} RegistryPath_1: int;
  var {:pointer} DriverDefaultsPtr_1: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_753: int;
  var vslice_dummy_var_754: int;
  var vslice_dummy_var_755: int;
  var vslice_dummy_var_756: int;
  var vslice_dummy_var_757: int;
  var vslice_dummy_var_758: int;
  var vslice_dummy_var_759: int;
  var vslice_dummy_var_760: int;

  anon0:
    call {:si_unique_call 850} countOfPartials_1 := __HAVOC_malloc(4);
    call {:si_unique_call 851} defaultInterruptMode_1 := __HAVOC_malloc(4);
    call {:si_unique_call 852} Tmp_391 := __HAVOC_malloc(20);
    call {:si_unique_call 853} Tmp_392 := __HAVOC_malloc(20);
    call {:si_unique_call 854} Tmp_395 := __HAVOC_malloc(20);
    call {:si_unique_call 855} Tmp_397 := __HAVOC_malloc(20);
    call {:si_unique_call 856} Tmp_398 := __HAVOC_malloc(20);
    call {:si_unique_call 857} Tmp_399 := __HAVOC_malloc(20);
    call {:si_unique_call 858} Tmp_401 := __HAVOC_malloc(20);
    call {:si_unique_call 859} Tmp_402 := __HAVOC_malloc(20);
    call {:si_unique_call 860} Tmp_403 := __HAVOC_malloc(20);
    call {:si_unique_call 861} Tmp_409 := __HAVOC_malloc(20);
    call {:si_unique_call 862} Tmp_411 := __HAVOC_malloc(20);
    call {:si_unique_call 863} Tmp_412 := __HAVOC_malloc(20);
    call {:si_unique_call 864} Tmp_414 := __HAVOC_malloc(20);
    call {:si_unique_call 865} PnPID := __HAVOC_malloc(12);
    call {:si_unique_call 866} Tmp_415 := __HAVOC_malloc(20);
    call {:si_unique_call 867} badValue_1 := __HAVOC_malloc(4);
    call {:si_unique_call 868} Tmp_419 := __HAVOC_malloc(20);
    call {:si_unique_call 869} Tmp_421 := __HAVOC_malloc(20);
    call {:si_unique_call 870} Tmp_422 := __HAVOC_malloc(20);
    call {:si_unique_call 871} Tmp_424 := __HAVOC_malloc(20);
    call {:si_unique_call 872} defaultInterfaceType_1 := __HAVOC_malloc(4);
    call {:si_unique_call 873} Tmp_427 := __HAVOC_malloc(20);
    call {:si_unique_call 874} newDevObj := __HAVOC_malloc(4);
    call {:si_unique_call 875} vslice_dummy_var_243 := __HAVOC_malloc(24);
    call {:si_unique_call 876} Tmp_431 := __HAVOC_malloc(20);
    call {:si_unique_call 877} Tmp_434 := __HAVOC_malloc(20);
    call {:si_unique_call 878} Tmp_439 := __HAVOC_malloc(20);
    call {:si_unique_call 879} Tmp_440 := __HAVOC_malloc(20);
    call {:si_unique_call 880} Tmp_445 := __HAVOC_malloc(20);
    call {:si_unique_call 881} legacyKeys := __HAVOC_malloc(12);
    call {:si_unique_call 882} legacyDiscovered := __HAVOC_malloc(4);
    call {:si_unique_call 883} Tmp_448 := __HAVOC_malloc(20);
    call {:si_unique_call 884} defaultAddressSpace := __HAVOC_malloc(4);
    call {:si_unique_call 885} parametersKey := __HAVOC_malloc(4);
    call {:si_unique_call 886} parametersPath := __HAVOC_malloc(12);
    call {:si_unique_call 887} brokenStatus := __HAVOC_malloc(4);
    call {:si_unique_call 888} userData := __HAVOC_malloc(136);
    call {:si_unique_call 889} zero_2 := __HAVOC_malloc(4);
    call {:si_unique_call 890} Tmp_453 := __HAVOC_malloc(20);
    DriverObject_2 := actual_DriverObject_2;
    RegistryPath_1 := actual_RegistryPath_1;
    DriverDefaultsPtr_1 := actual_DriverDefaultsPtr_1;
    call {:si_unique_call 891} Tmp_386 := __HAVOC_malloc(220);
    call {:si_unique_call 892} Tmp_387 := __HAVOC_malloc(4);
    call {:si_unique_call 893} Tmp_389 := __HAVOC_malloc(328);
    call {:si_unique_call 894} Tmp_390 := __HAVOC_malloc(224);
    call {:si_unique_call 895} Tmp_393 := __HAVOC_malloc(4);
    call {:si_unique_call 896} Tmp_396 := __HAVOC_malloc(300);
    call {:si_unique_call 897} Tmp_400 := __HAVOC_malloc(184);
    call {:si_unique_call 898} Tmp_404 := __HAVOC_malloc(240);
    call {:si_unique_call 899} vslice_dummy_var_249 := __HAVOC_malloc(8);
    call {:si_unique_call 900} vslice_dummy_var_250 := __HAVOC_malloc(68);
    call {:si_unique_call 901} Tmp_410 := __HAVOC_malloc(148);
    call {:si_unique_call 902} Tmp_417 := __HAVOC_malloc(184);
    call {:si_unique_call 903} Tmp_418 := __HAVOC_malloc(116);
    call {:si_unique_call 904} vslice_dummy_var_251 := __HAVOC_malloc(44);
    call {:si_unique_call 905} Tmp_432 := __HAVOC_malloc(4);
    call {:si_unique_call 906} Tmp_433 := __HAVOC_malloc(4);
    call {:si_unique_call 907} vslice_dummy_var_252 := __HAVOC_malloc(8);
    call {:si_unique_call 908} Tmp_436 := __HAVOC_malloc(4);
    call {:si_unique_call 909} Tmp_441 := __HAVOC_malloc(272);
    call {:si_unique_call 910} Tmp_442 := __HAVOC_malloc(256);
    call {:si_unique_call 911} Tmp_443 := __HAVOC_malloc(116);
    call {:si_unique_call 912} Tmp_444 := __HAVOC_malloc(232);
    call {:si_unique_call 913} Tmp_451 := __HAVOC_malloc(4);
    call {:si_unique_call 914} Tmp_452 := __HAVOC_malloc(220);
    parameters := 0;
    call {:si_unique_call 915} sdv_369 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_369 != 0;
    assume sdv_369 > 0;
    countSoFar_1 := SerialCount__CONFIGURATION_INFORMATION(sdv_369);
    assume {:nonnull} zero_2 != 0;
    assume zero_2 > 0;
    Mem_T.INT4[zero_2] := 0;
    assume {:nonnull} badValue_1 != 0;
    assume badValue_1 > 0;
    Mem_T.INT4[badValue_1] := -1;
    assume {:nonnull} defaultAddressSpace != 0;
    assume defaultAddressSpace > 0;
    Mem_T.INT4[defaultAddressSpace] := 1;
    userSubKey := 0;
    resourceList := 0;
    trResourceList := 0;
    pRequiredList := 0;
    call {:si_unique_call 916} sdv_do_paged_code_check();
    Tmp_443 := strConst__li2bpl154;
    call {:si_unique_call 917} vslice_dummy_var_253 := SerialDbgPrintEx(11, Tmp_443);
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} DriverDefaultsPtr_1 != 0;
    assume DriverDefaultsPtr_1 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    Mem_T.INT4[defaultInterfaceType_1] := 1;
    assume {:nonnull} defaultInterruptMode_1 != 0;
    assume defaultInterruptMode_1 > 0;
    Mem_T.INT4[defaultInterruptMode_1] := 1;
    interfaceType_1 := 0;
    goto L63;

  L63:
    call {:si_unique_call 918} interfaceType_1, foundOne_1, vslice_dummy_var_244 := SerialEnumerateLegacy_loop_L63(interfaceType_1, foundOne_1, vslice_dummy_var_244);
    goto L63_last;

  L63_last:
    assume {:CounterLoop 17} {:Counter "interfaceType_1"} true;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} 17 > interfaceType_1;
    foundOne_1 := 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} interfaceType_1 != 0;
    call {:si_unique_call 919} vslice_dummy_var_244 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} foundOne_1 != 0;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    Mem_T.INT4[defaultInterfaceType_1] := interfaceType_1;
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} Mem_T.INT4[defaultInterfaceType_1] == 3;
    assume {:nonnull} defaultInterruptMode_1 != 0;
    assume defaultInterruptMode_1 > 0;
    Mem_T.INT4[defaultInterruptMode_1] := 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto L64;

  L64:
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    call {:si_unique_call 920} sdv_352 := ExAllocatePoolWithTag(1, 616, -666022077);
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} yogi_error != 1;
    parameters := sdv_352;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} parameters != 0;
    call {:si_unique_call 921} sdv_RtlZeroMemory(0, 616);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 922} RtlInitUnicodeString(UserSymbolicLink__SERIAL_USER_DATA(userData), 0);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 923} sdv_377 := ExAllocatePoolWithTag(1, 514, -666022077);
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    call {:si_unique_call 924} RtlInitUnicodeString(PnPID, 0);
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    call {:si_unique_call 925} sdv_348 := ExAllocatePoolWithTag(1, 514, -666022077);
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    call {:si_unique_call 926} RtlInitUnicodeString(legacyKeys, 0);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    call {:si_unique_call 927} sdv_358 := ExAllocatePoolWithTag(1, 514, -666022077);
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    call {:si_unique_call 928} sdv_350 := ExAllocatePoolWithTag(1, 68, -666022077);
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} yogi_error != 1;
    resourceList := sdv_350;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} resourceList != 0;
    call {:si_unique_call 929} sdv_349 := ExAllocatePoolWithTag(1, 68, -666022077);
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} yogi_error != 1;
    trResourceList := sdv_349;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} trResourceList != 0;
    call {:si_unique_call 930} sdv_383 := ExAllocatePoolWithTag(1, 136, -666022077);
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} yogi_error != 1;
    pRequiredList := sdv_383;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} pRequiredList != 0;
    call {:si_unique_call 931} RtlInitUnicodeString(parametersPath, 0);
    assume {:nonnull} RegistryPath_1 != 0;
    assume RegistryPath_1 > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_394;
    call {:si_unique_call 932} sdv_374 := ExAllocatePoolWithTag(1, Tmp_394, -666022077);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_447;
    call {:si_unique_call 933} sdv_RtlZeroMemory(0, Tmp_447);
    call {:si_unique_call 934} vslice_dummy_var_245 := corral_nondet();
    call {:si_unique_call 935} vslice_dummy_var_254 := corral_nondet();
    call {:si_unique_call 936} vslice_dummy_var_255 := corral_nondet();
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    havoc Tmp_388;
    call {:si_unique_call 937} sdv_RtlZeroMemory(0, Tmp_388);
    call {:si_unique_call 938} vslice_dummy_var_246 := corral_nondet();
    call {:si_unique_call 939} sdv_380 := ExAllocatePoolWithTag(1, 536, -666022077);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} yogi_error != 1;
    userSubKey := sdv_380;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} userSubKey != 0;
    call {:si_unique_call 940} sdv_InitializeObjectAttributes(0, 0, 576, 0, 0);
    call {:si_unique_call 941} sdv_342 := ZwOpenKey(parametersKey, 33554432, 0);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} sdv_342 >= 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    i_1 := 0;
    goto L312;

  L312:
    call {:si_unique_call 942} Tmp_386, Tmp_387, Tmp_393, lowerDevice, Tmp_405, Tmp_406, actuallyReturned, Tmp_410, Tmp_413, Tmp_416, deviceExtension, Tmp_420, Tmp_423, Tmp_425, i_1, Tmp_429, Tmp_432, Tmp_433, Tmp_436, Tmp_437, Tmp_438, Tmp_442, Tmp_444, Tmp_446, status_14, sdv_382, newPdo, Tmp_449, Tmp_451, Tmp_452, vslice_dummy_var_248, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264 := SerialEnumerateLegacy_loop_L312(Tmp_386, Tmp_387, countOfPartials_1, Tmp_392, Tmp_393, Tmp_395, Tmp_398, Tmp_399, trResourceList, lowerDevice, Tmp_405, Tmp_406, actuallyReturned, Tmp_409, Tmp_410, Tmp_411, Tmp_413, PnPID, Tmp_415, Tmp_416, deviceExtension, countSoFar_1, Tmp_420, Tmp_422, Tmp_423, Tmp_425, i_1, defaultInterfaceType_1, newDevObj, Tmp_429, userSubKey, Tmp_432, Tmp_433, pRequiredList, Tmp_436, Tmp_437, Tmp_438, resourceList, Tmp_442, Tmp_444, Tmp_446, legacyKeys, legacyDiscovered, parameters, Tmp_448, status_14, sdv_382, parametersPath, newPdo, brokenStatus, Tmp_449, Tmp_451, userData, Tmp_452, DriverObject_2, vslice_dummy_var_248, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264);
    goto L312_last;

  L312_last:
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    call {:si_unique_call 1005} Tmp_446 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    Mem_T.INT4[Tmp_446] := actuallyReturned;
    call {:si_unique_call 1006} status_14 := ZwEnumerateKey(0, i_1, 0, 0, 534, Tmp_446);
    assume {:nonnull} Tmp_446 != 0;
    assume Tmp_446 > 0;
    actuallyReturned := Mem_T.INT4[Tmp_446];
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} status_14 != 26;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} status_14 == 5;
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_415)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_415))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_422)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_422))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    call {:si_unique_call 943} SerialLogError(DriverObject_2, 0, Tmp_422, Tmp_415, 0, 0, 0, 84, 0, -1073348589, 0, 0, 0, 0);
    Tmp_386 := strConst__li2bpl156;
    call {:si_unique_call 944} vslice_dummy_var_257 := SerialDbgPrintEx(14, Tmp_386);
    i_1 := i_1 + 1;
    goto anon113_Else_dummy;

  anon113_Else_dummy:
    assume false;
    return;

  anon113_Then:
    assume {:partition} status_14 != 5;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_433;
    call {:si_unique_call 945} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_432;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    call {:si_unique_call 946} sdv_RtlZeroMemory(0, 8);
    call {:si_unique_call 947} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc Tmp_416;
    call {:si_unique_call 948} sdv_RtlZeroMemory(0, Tmp_416);
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 949} status_14 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    i_1 := i_1 + 1;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    assume false;
    return;

  anon116_Then:
    assume {:nonnull} legacyDiscovered != 0;
    assume legacyDiscovered > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Mem_T.INT4[legacyDiscovered] != 0;
    i_1 := i_1 + 1;
    goto anon117_Else_dummy;

  anon117_Else_dummy:
    assume false;
    return;

  anon117_Then:
    assume {:partition} Mem_T.INT4[legacyDiscovered] == 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    call {:si_unique_call 950} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} brokenStatus != 0;
    assume brokenStatus > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[brokenStatus] != 0;
    assume {:nonnull} brokenStatus != 0;
    assume brokenStatus > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(userData))] := Mem_T.INT4[brokenStatus];
    goto L367;

  L367:
    assume {:nonnull} defaultInterfaceType_1 != 0;
    assume defaultInterfaceType_1 > 0;
    call {:si_unique_call 951} sdv_382 := SerialIsUserDataValid(DriverObject_2, userSubKey, parameters, Mem_T.INT4[defaultInterfaceType_1], userData);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} sdv_382 != 0;
    call {:si_unique_call 952} status_14 := SerialBuildResourceList(resourceList, countOfPartials_1, userData);
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    call {:si_unique_call 953} status_14 := SerialTranslateResourceList(DriverObject_2, userSubKey, trResourceList, resourceList, Mem_T.INT4[countOfPartials_1], userData);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    call {:si_unique_call 954} status_14 := SerialBuildRequirementsList(pRequiredList, Mem_T.INT4[countOfPartials_1], userData);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} status_14 >= 0;
    newPdo := 0;
    call {:si_unique_call 955} status_14 := IoReportDetectedDevice(0, -1, -1, -1, 0, 0, 0, 0);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} status_14 >= 0;
    assume {:nonnull} countOfPartials_1 != 0;
    assume countOfPartials_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[countOfPartials_1] == 3;
    Tmp_425 := 1;
    goto L401;

  L401:
    Tmp_420 := Tmp_425;
    call {:si_unique_call 956} status_14 := SerialMigrateLegacyRegistry(newPdo, userData, Tmp_420);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} yogi_error != 1;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} status_14 >= 0;
    call {:si_unique_call 957} status_14 := SerialCreateDevObj(DriverObject_2, newDevObj);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} yogi_error != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} status_14 >= 0;
    call {:si_unique_call 958} lowerDevice := IoAttachDeviceToDeviceStack(0, newPdo);
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc deviceExtension;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(deviceExtension)] := BOR(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(deviceExtension)], 8);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    call {:si_unique_call 959} MmLockPagableSectionByHandle(0);
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc vslice_dummy_var_753;
    call {:si_unique_call 960} status_14 := SerialFinishStartDevice(vslice_dummy_var_753, resourceList, trResourceList, userData);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 961} MmUnlockPagableImageSection(0);
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} status_14 >= 0;
    call {:si_unique_call 962} vslice_dummy_var_258 := corral_nondet();
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_387;
    call {:si_unique_call 963} vslice_dummy_var_259 := corral_nondet();
    call {:si_unique_call 964} status_14 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    havoc Tmp_423;
    call {:si_unique_call 965} sdv_RtlZeroMemory(0, Tmp_423);
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    call {:si_unique_call 966} vslice_dummy_var_260 := corral_nondet();
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_14 >= 0;
    goto L458;

  L458:
    i_1 := i_1 + 1;
    assume {:nonnull} countSoFar_1 != 0;
    assume countSoFar_1 > 0;
    Mem_T.INT4[countSoFar_1] := Mem_T.INT4[countSoFar_1] + 1;
    goto L458_dummy;

  L458_dummy:
    assume false;
    return;

  anon129_Then:
    assume {:partition} 0 > status_14;
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_409)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_409))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    assume {:nonnull} Tmp_409 != 0;
    assume Tmp_409 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_754;
    call {:si_unique_call 967} SerialLogError(DriverObject_2, 0, vslice_dummy_var_754, Tmp_409, 0, 0, 0, 88, 0, -1073348567, 0, 0, 0, 0);
    Tmp_444 := strConst__li2bpl158;
    call {:si_unique_call 968} vslice_dummy_var_261 := SerialDbgPrintEx(14, Tmp_444);
    goto L458;

  anon128_Then:
    assume {:partition} 0 > status_14;
    assume {:nonnull} newDevObj != 0;
    assume newDevObj > 0;
    havoc vslice_dummy_var_755;
    call {:si_unique_call 969} vslice_dummy_var_248 := SerialRemoveDevObj(vslice_dummy_var_755);
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} yogi_error != 1;
    i_1 := i_1 + 1;
    goto anon162_Else_dummy;

  anon162_Else_dummy:
    assume false;
    return;

  anon162_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon161_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon127_Then:
    assume {:partition} 0 > status_14;
    i_1 := i_1 + 1;
    goto anon127_Then_dummy;

  anon127_Then_dummy:
    assume false;
    return;

  anon160_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon126_Then:
    assume {:partition} 0 > status_14;
    i_1 := i_1 + 1;
    goto anon126_Then_dummy;

  anon126_Then_dummy:
    assume false;
    return;

  anon159_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon125_Then:
    assume {:partition} Mem_T.INT4[countOfPartials_1] != 3;
    Tmp_425 := 0;
    goto L401;

  anon123_Then:
    assume {:partition} 0 > status_14;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} status_14 == -1073741670;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_393;
    Tmp_437 := Tmp_393;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_438;
    assume {:nonnull} Tmp_448 != 0;
    assume Tmp_448 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_448)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_448 != 0;
    assume Tmp_448 > 0;
    assume {:nonnull} Tmp_448 != 0;
    assume Tmp_448 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_448))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_448 != 0;
    assume Tmp_448 > 0;
    assume {:nonnull} Tmp_448 != 0;
    assume Tmp_448 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_756;
    call {:si_unique_call 970} SerialLogError(DriverObject_2, 0, vslice_dummy_var_756, Tmp_448, 0, 0, 0, 89, status_14, -1073348564, Tmp_438, Tmp_437, 0, 0);
    goto L477;

  L477:
    Tmp_410 := strConst__li2bpl159;
    call {:si_unique_call 971} vslice_dummy_var_262 := SerialDbgPrintEx(14, Tmp_410);
    i_1 := i_1 + 1;
    goto L477_dummy;

  L477_dummy:
    assume false;
    return;

  anon124_Then:
    assume {:partition} status_14 != -1073741670;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_436;
    Tmp_406 := Tmp_436;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_413;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_392)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_392))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_757;
    call {:si_unique_call 972} SerialLogError(DriverObject_2, 0, vslice_dummy_var_757, Tmp_392, 0, 0, 0, 87, status_14, -1073348568, Tmp_413, Tmp_406, 0, 0);
    goto L477;

  anon122_Then:
    assume {:partition} 0 > status_14;
    i_1 := i_1 + 1;
    goto anon122_Then_dummy;

  anon122_Then_dummy:
    assume false;
    return;

  anon121_Then:
    assume {:partition} 0 > status_14;
    i_1 := i_1 + 1;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    assume false;
    return;

  anon120_Then:
    assume {:partition} 0 > status_14;
    i_1 := i_1 + 1;
    goto anon120_Then_dummy;

  anon120_Then_dummy:
    assume false;
    return;

  anon119_Then:
    assume {:partition} sdv_382 == 0;
    i_1 := i_1 + 1;
    goto anon119_Then_dummy;

  anon119_Then_dummy:
    assume false;
    return;

  anon118_Then:
    assume {:partition} Mem_T.INT4[brokenStatus] == 0;
    goto L367;

  anon115_Then:
    assume {:partition} 0 > status_14;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_451;
    Tmp_429 := Tmp_451;
    assume {:nonnull} userSubKey != 0;
    assume userSubKey > 0;
    havoc Tmp_405;
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_398)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_398))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_399)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_399))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    call {:si_unique_call 973} SerialLogError(DriverObject_2, 0, Tmp_399, Tmp_398, 0, 0, 0, 86, 0, -1073348583, Tmp_405, Tmp_429, 0, 0);
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    havoc Tmp_449;
    Tmp_452 := strConst__li2bpl177;
    call {:si_unique_call 974} vslice_dummy_var_263 := SerialDbgPrintEx(14, Tmp_452);
    i_1 := i_1 + 1;
    goto anon115_Then_dummy;

  anon115_Then_dummy:
    assume false;
    return;

  anon114_Then:
    assume {:partition} 0 > status_14;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_395)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_395))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_411)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_411))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    assume {:nonnull} Tmp_411 != 0;
    assume Tmp_411 > 0;
    call {:si_unique_call 975} SerialLogError(DriverObject_2, 0, Tmp_411, Tmp_395, 0, 0, 0, 85, 0, -1073348589, 0, 0, 0, 0);
    Tmp_442 := strConst__li2bpl160;
    call {:si_unique_call 976} vslice_dummy_var_264 := SerialDbgPrintEx(14, Tmp_442);
    i_1 := i_1 + 1;
    goto anon114_Then_dummy;

  anon114_Then_dummy:
    assume false;
    return;

  anon112_Then:
    assume {:partition} status_14 == 26;
    call {:si_unique_call 977} vslice_dummy_var_247 := ZwClose(0);
    goto L512;

  L512:
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} userSubKey != 0;
    call {:si_unique_call 978} sdv_ExFreePool(0);
    goto L513;

  L513:
    assume {:nonnull} PnPID != 0;
    assume PnPID > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    call {:si_unique_call 979} sdv_ExFreePool(0);
    goto L517;

  L517:
    assume {:nonnull} legacyKeys != 0;
    assume legacyKeys > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    call {:si_unique_call 980} sdv_ExFreePool(0);
    goto L521;

  L521:
    assume {:nonnull} userData != 0;
    assume userData > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    call {:si_unique_call 981} sdv_ExFreePool(0);
    goto L525;

  L525:
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    call {:si_unique_call 982} sdv_ExFreePool(0);
    goto L529;

  L529:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} parameters != 0;
    call {:si_unique_call 983} sdv_ExFreePool(0);
    goto L533;

  L533:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} resourceList != 0;
    call {:si_unique_call 984} sdv_ExFreePool(0);
    goto L537;

  L537:
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} trResourceList != 0;
    call {:si_unique_call 985} sdv_ExFreePool(0);
    goto L541;

  L541:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} pRequiredList != 0;
    call {:si_unique_call 986} sdv_ExFreePool(0);
    goto L545;

  L545:
    Tmp_418 := strConst__li2bpl161;
    call {:si_unique_call 987} vslice_dummy_var_256 := SerialDbgPrintEx(11, Tmp_418);
    Tmp_385 := 0;
    goto LM2;

  anon138_Then:
    assume {:partition} pRequiredList == 0;
    goto L545;

  anon137_Then:
    assume {:partition} trResourceList == 0;
    goto L541;

  anon136_Then:
    assume {:partition} resourceList == 0;
    goto L537;

  anon135_Then:
    assume {:partition} parameters == 0;
    goto L533;

  anon134_Then:
    goto L529;

  anon133_Then:
    goto L525;

  anon132_Then:
    goto L521;

  anon131_Then:
    goto L517;

  anon130_Then:
    assume {:partition} userSubKey == 0;
    goto L513;

  anon111_Then:
    assume {:partition} 0 > sdv_342;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_434)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_434))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_439)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_439))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    call {:si_unique_call 988} SerialLogError(DriverObject_2, 0, Tmp_439, Tmp_434, 0, 0, 0, 83, 0, -1073348590, 0, 0, 0, 0);
    Tmp_400 := strConst__li2bpl162;
    call {:si_unique_call 989} vslice_dummy_var_265 := SerialDbgPrintEx(14, Tmp_400);
    goto L512;

  anon158_Then:
    assume {:partition} userSubKey == 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_403)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_403))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_391)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_391))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    call {:si_unique_call 990} SerialLogError(DriverObject_2, 0, Tmp_391, Tmp_403, 0, 0, 0, 82, 0, -1073348600, 0, 0, 0, 0);
    Tmp_389 := strConst__li2bpl163;
    call {:si_unique_call 991} vslice_dummy_var_266 := SerialDbgPrintEx(14, Tmp_389);
    goto L512;

  anon157_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon156_Then:
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_427)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_427))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_453)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_453))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    call {:si_unique_call 992} SerialLogError(DriverObject_2, 0, Tmp_453, Tmp_427, 0, 0, 0, 81, 0, -1073348600, 0, 0, 0, 0);
    Tmp_390 := strConst__li2bpl164;
    call {:si_unique_call 993} vslice_dummy_var_267 := SerialDbgPrintEx(14, Tmp_390);
    goto L512;

  anon155_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon154_Then:
    assume {:partition} pRequiredList == 0;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_431)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_431))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_758;
    call {:si_unique_call 994} SerialLogError(DriverObject_2, 0, vslice_dummy_var_758, Tmp_431, 0, 0, 0, 80, 0, -1073348600, 0, 0, 0, 0);
    goto L512;

  anon153_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon152_Then:
    assume {:partition} trResourceList == 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_397)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_397))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} Tmp_397 != 0;
    assume Tmp_397 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_759;
    call {:si_unique_call 995} SerialLogError(DriverObject_2, 0, vslice_dummy_var_759, Tmp_397, 0, 0, 0, 79, 0, -1073348600, 0, 0, 0, 0);
    goto L512;

  anon151_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon150_Then:
    assume {:partition} resourceList == 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_445)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_445))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    assume {:nonnull} userData != 0;
    assume userData > 0;
    havoc vslice_dummy_var_760;
    call {:si_unique_call 996} SerialLogError(DriverObject_2, 0, vslice_dummy_var_760, Tmp_445, 0, 0, 0, 78, 0, -1073348600, 0, 0, 0, 0);
    goto L512;

  anon149_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon148_Then:
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_401)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_401))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_419)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_419))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    call {:si_unique_call 997} SerialLogError(DriverObject_2, 0, Tmp_419, Tmp_401, 0, 0, 0, 77, 0, -1073348600, 0, 0, 0, 0);
    Tmp_417 := strConst__li2bpl165;
    call {:si_unique_call 998} vslice_dummy_var_268 := SerialDbgPrintEx(14, Tmp_417);
    goto L512;

  anon147_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon146_Then:
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_424)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_424))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_402)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_402))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    call {:si_unique_call 999} SerialLogError(DriverObject_2, 0, Tmp_402, Tmp_424, 0, 0, 0, 76, 0, -1073348600, 0, 0, 0, 0);
    Tmp_441 := strConst__li2bpl166;
    call {:si_unique_call 1000} vslice_dummy_var_269 := SerialDbgPrintEx(14, Tmp_441);
    goto L512;

  anon145_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon144_Then:
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_414)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_414))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_412)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_412))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    call {:si_unique_call 1001} SerialLogError(DriverObject_2, 0, Tmp_412, Tmp_414, 0, 0, 0, 75, 0, -1073348600, 0, 0, 0, 0);
    Tmp_396 := strConst__li2bpl167;
    call {:si_unique_call 1002} vslice_dummy_var_270 := SerialDbgPrintEx(14, Tmp_396);
    goto L512;

  anon143_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon142_Then:
    assume {:partition} parameters == 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_440)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_440))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_421)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_421))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    call {:si_unique_call 1003} SerialLogError(DriverObject_2, 0, Tmp_421, Tmp_440, 0, 0, 0, 74, 0, -1073348600, 0, 0, 0, 0);
    Tmp_404 := strConst__li2bpl168;
    call {:si_unique_call 1004} vslice_dummy_var_271 := SerialDbgPrintEx(14, Tmp_404);
    goto L512;

  anon141_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon140_Then:
    assume {:partition} Mem_T.INT4[defaultInterfaceType_1] != 3;
    goto L64;

  anon110_Then:
    assume {:partition} foundOne_1 == 0;
    goto L70;

  L70:
    interfaceType_1 := interfaceType_1 + 1;
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon139_Then:
    assume {:partition} interfaceType_1 == 0;
    goto L70;

  anon109_Then:
    assume {:partition} interfaceType_1 >= 17;
    goto L64;
}



procedure {:origName "SerialTranslateResourceList"} SerialTranslateResourceList(actual_DriverObject_3: int, actual_UserSubKey: int, actual_PTrResourceList: int, actual_PResourceList_1: int, actual_PartialCount: int, actual_PUserData_4: int) returns (Tmp_454: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_454 == 0 || Tmp_454 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialTranslateResourceList"} SerialTranslateResourceList(actual_DriverObject_3: int, actual_UserSubKey: int, actual_PTrResourceList: int, actual_PResourceList_1: int, actual_PartialCount: int, actual_PUserData_4: int) returns (Tmp_454: int)
{
  var {:scalar} Tmp_455: int;
  var {:pointer} Tmp_456: int;
  var {:pointer} Tmp_457: int;
  var {:scalar} Tmp_458: int;
  var {:scalar} Tmp_459: int;
  var {:scalar} Tmp_460: int;
  var {:scalar} outAddrSpace: int;
  var {:scalar} Tmp_461: int;
  var {:pointer} Tmp_462: int;
  var {:pointer} Tmp_463: int;
  var {:scalar} outPhysAddr: int;
  var {:pointer} Tmp_464: int;
  var {:pointer} Tmp_465: int;
  var {:pointer} Tmp_466: int;
  var {:pointer} Tmp_467: int;
  var {:pointer} Tmp_468: int;
  var {:scalar} Tmp_469: int;
  var {:pointer} Tmp_470: int;
  var {:pointer} Tmp_471: int;
  var {:pointer} Tmp_472: int;
  var {:pointer} Tmp_473: int;
  var {:scalar} Tmp_474: int;
  var {:pointer} Tmp_475: int;
  var {:pointer} Tmp_476: int;
  var {:pointer} Tmp_477: int;
  var {:pointer} Tmp_478: int;
  var {:scalar} outIrql: int;
  var {:pointer} Tmp_479: int;
  var {:scalar} Tmp_480: int;
  var {:scalar} sdv_387: int;
  var {:pointer} Tmp_481: int;
  var {:scalar} Tmp_482: int;
  var {:scalar} outAffinity: int;
  var {:scalar} Tmp_483: int;
  var {:pointer} Tmp_484: int;
  var {:scalar} sdv_388: int;
  var {:scalar} Tmp_485: int;
  var {:pointer} Tmp_486: int;
  var {:scalar} Tmp_487: int;
  var {:pointer} Tmp_488: int;
  var {:pointer} Tmp_489: int;
  var {:scalar} sdv_390: int;
  var {:scalar} Tmp_490: int;
  var {:pointer} Tmp_491: int;
  var {:pointer} Tmp_492: int;
  var {:pointer} Tmp_493: int;
  var {:scalar} Tmp_494: int;
  var {:scalar} Tmp_495: int;
  var {:pointer} Tmp_496: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_497: int;
  var {:pointer} Tmp_498: int;
  var {:pointer} Tmp_499: int;
  var {:pointer} Tmp_500: int;
  var {:pointer} Tmp_501: int;
  var {:pointer} Tmp_502: int;
  var {:pointer} Tmp_503: int;
  var {:scalar} Tmp_504: int;
  var {:pointer} Tmp_506: int;
  var {:pointer} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:pointer} Tmp_509: int;
  var {:pointer} Tmp_510: int;
  var {:pointer} Tmp_511: int;
  var {:pointer} Tmp_512: int;
  var {:pointer} DriverObject_3: int;
  var {:pointer} UserSubKey: int;
  var {:pointer} PTrResourceList: int;
  var {:scalar} PartialCount: int;
  var {:pointer} PUserData_4: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_761: int;
  var vslice_dummy_var_762: int;
  var vslice_dummy_var_763: int;

  anon0:
    call {:si_unique_call 1007} Tmp_455 := __HAVOC_malloc(20);
    call {:si_unique_call 1008} Tmp_458 := __HAVOC_malloc(20);
    call {:si_unique_call 1009} outPhysAddr := __HAVOC_malloc(20);
    call {:si_unique_call 1010} Tmp_469 := __HAVOC_malloc(20);
    call {:si_unique_call 1011} Tmp_483 := __HAVOC_malloc(20);
    call {:si_unique_call 1012} Tmp_485 := __HAVOC_malloc(20);
    call {:si_unique_call 1013} Tmp_494 := __HAVOC_malloc(20);
    call {:si_unique_call 1014} Tmp_495 := __HAVOC_malloc(20);
    DriverObject_3 := actual_DriverObject_3;
    UserSubKey := actual_UserSubKey;
    PTrResourceList := actual_PTrResourceList;
    PartialCount := actual_PartialCount;
    PUserData_4 := actual_PUserData_4;
    call {:si_unique_call 1015} Tmp_456 := __HAVOC_malloc(244);
    call {:si_unique_call 1016} Tmp_457 := __HAVOC_malloc(264);
    call {:si_unique_call 1017} Tmp_462 := __HAVOC_malloc(140);
    call {:si_unique_call 1018} Tmp_463 := __HAVOC_malloc(264);
    call {:si_unique_call 1019} Tmp_464 := __HAVOC_malloc(264);
    call {:si_unique_call 1020} Tmp_465 := __HAVOC_malloc(4);
    call {:si_unique_call 1021} Tmp_466 := __HAVOC_malloc(244);
    call {:si_unique_call 1022} Tmp_467 := __HAVOC_malloc(140);
    call {:si_unique_call 1023} Tmp_468 := __HAVOC_malloc(264);
    call {:si_unique_call 1024} Tmp_470 := __HAVOC_malloc(264);
    call {:si_unique_call 1025} Tmp_471 := __HAVOC_malloc(264);
    call {:si_unique_call 1026} Tmp_472 := __HAVOC_malloc(244);
    call {:si_unique_call 1027} Tmp_473 := __HAVOC_malloc(264);
    call {:si_unique_call 1028} Tmp_475 := __HAVOC_malloc(576);
    call {:si_unique_call 1029} Tmp_476 := __HAVOC_malloc(244);
    call {:si_unique_call 1030} Tmp_477 := __HAVOC_malloc(264);
    call {:si_unique_call 1031} Tmp_478 := __HAVOC_malloc(244);
    call {:si_unique_call 1032} Tmp_479 := __HAVOC_malloc(244);
    call {:si_unique_call 1033} Tmp_481 := __HAVOC_malloc(264);
    call {:si_unique_call 1034} Tmp_484 := __HAVOC_malloc(244);
    call {:si_unique_call 1035} Tmp_486 := __HAVOC_malloc(264);
    call {:si_unique_call 1036} Tmp_488 := __HAVOC_malloc(264);
    call {:si_unique_call 1037} Tmp_489 := __HAVOC_malloc(244);
    call {:si_unique_call 1038} Tmp_491 := __HAVOC_malloc(264);
    call {:si_unique_call 1039} Tmp_493 := __HAVOC_malloc(264);
    call {:si_unique_call 1040} Tmp_496 := __HAVOC_malloc(244);
    call {:si_unique_call 1041} Tmp_497 := __HAVOC_malloc(244);
    call {:si_unique_call 1042} Tmp_499 := __HAVOC_malloc(576);
    call {:si_unique_call 1043} Tmp_500 := __HAVOC_malloc(264);
    call {:si_unique_call 1044} Tmp_501 := __HAVOC_malloc(244);
    call {:si_unique_call 1045} Tmp_502 := __HAVOC_malloc(64);
    call {:si_unique_call 1046} Tmp_503 := __HAVOC_malloc(244);
    call {:si_unique_call 1047} Tmp_506 := __HAVOC_malloc(264);
    call {:si_unique_call 1048} Tmp_507 := __HAVOC_malloc(4);
    call {:si_unique_call 1049} Tmp_508 := __HAVOC_malloc(4);
    call {:si_unique_call 1050} Tmp_510 := __HAVOC_malloc(244);
    call {:si_unique_call 1051} Tmp_511 := __HAVOC_malloc(244);
    call {:si_unique_call 1052} Tmp_512 := __HAVOC_malloc(244);
    outAffinity := -1;
    status_15 := 0;
    call {:si_unique_call 1053} sdv_do_paged_code_check();
    Tmp_467 := strConst__li2bpl178;
    call {:si_unique_call 1054} vslice_dummy_var_272 := SerialDbgPrintEx(11, Tmp_467);
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)] != 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    Tmp_480 := Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)];
    goto L19;

  L19:
    outIrql := Tmp_480;
    call {:si_unique_call 1055} sdv_RtlCopyMemory(0, 0, 68);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_457;
    assume {:nonnull} Tmp_457 != 0;
    assume Tmp_457 > 0;
    havoc Tmp_478;
    assume {:nonnull} Tmp_478 != 0;
    assume Tmp_478 > 0;
    havoc outAddrSpace;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_470;
    assume {:nonnull} Tmp_470 != 0;
    assume Tmp_470 > 0;
    havoc Tmp_510;
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(outPhysAddr)] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_510))))];
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(outPhysAddr))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_510)))))];
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_510 != 0;
    assume Tmp_510 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_494 != 0;
    assume Tmp_494 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_494)] := Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_4))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_494 != 0;
    assume Tmp_494 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_494 != 0;
    assume Tmp_494 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_494))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserPort__SERIAL_USER_DATA(PUserData_4)))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_494 != 0;
    assume Tmp_494 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_494 != 0;
    assume Tmp_494 > 0;
    call {:si_unique_call 1056} sdv_387 := corral_nondet();
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_387 != 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_493;
    assume {:nonnull} Tmp_493 != 0;
    assume Tmp_493 > 0;
    havoc Tmp_479;
    assume {:nonnull} Tmp_479 != 0;
    assume Tmp_479 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_464;
    assume {:nonnull} Tmp_464 != 0;
    assume Tmp_464 > 0;
    havoc Tmp_496;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_496))))] := Mem_T.INT4[LowPart__LUID(outPhysAddr)];
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_496)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(outPhysAddr))];
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_496 != 0;
    assume Tmp_496 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)] != 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    Tmp_487 := Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)];
    goto L36;

  L36:
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    call {:si_unique_call 1057} sdv_388 := HalGetInterruptVector(Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_4)], Mem_T.INT4[UserBusNumber__SERIAL_USER_DATA(PUserData_4)], Tmp_487, Mem_T.INT4[UserVector__SERIAL_USER_DATA(PUserData_4)], 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_463;
    assume {:nonnull} Tmp_463 != 0;
    assume Tmp_463 > 0;
    havoc Tmp_503;
    assume {:nonnull} Tmp_503 != 0;
    assume Tmp_503 > 0;
    assume {:nonnull} Tmp_503 != 0;
    assume Tmp_503 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_491;
    assume {:nonnull} Tmp_491 != 0;
    assume Tmp_491 > 0;
    havoc Tmp_466;
    assume {:nonnull} Tmp_466 != 0;
    assume Tmp_466 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_477;
    assume {:nonnull} Tmp_477 != 0;
    assume Tmp_477 > 0;
    havoc Tmp_511;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_473;
    assume {:nonnull} Tmp_473 != 0;
    assume Tmp_473 > 0;
    havoc Tmp_456;
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    havoc outAddrSpace;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_471;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    havoc Tmp_497;
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(outPhysAddr)] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_497 + 2 * 244))))];
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(outPhysAddr))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_497 + 2 * 244)))))];
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_497 != 0;
    assume Tmp_497 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} PartialCount == 3;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_455 != 0;
    assume Tmp_455 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_455)] := Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_4))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_455 != 0;
    assume Tmp_455 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_455 != 0;
    assume Tmp_455 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_455))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserInterruptStatus__SERIAL_USER_DATA(PUserData_4)))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_455 != 0;
    assume Tmp_455 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_455 != 0;
    assume Tmp_455 > 0;
    call {:si_unique_call 1058} sdv_390 := corral_nondet();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_390 != 0;
    Tmp_502 := strConst__li2bpl179;
    call {:si_unique_call 1059} vslice_dummy_var_273 := SerialDbgPrintEx(4, Tmp_502);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_506;
    assume {:nonnull} Tmp_506 != 0;
    assume Tmp_506 > 0;
    havoc Tmp_472;
    assume {:nonnull} Tmp_472 != 0;
    assume Tmp_472 > 0;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_488;
    assume {:nonnull} Tmp_488 != 0;
    assume Tmp_488 > 0;
    havoc Tmp_489;
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_489 + 2 * 244))))] := Mem_T.INT4[LowPart__LUID(outPhysAddr)];
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(Tmp_489 + 2 * 244)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(outPhysAddr))];
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    assume {:nonnull} Tmp_489 != 0;
    assume Tmp_489 > 0;
    assume {:nonnull} outPhysAddr != 0;
    assume outPhysAddr > 0;
    goto L46;

  L46:
    Tmp_462 := strConst__li2bpl178;
    call {:si_unique_call 1060} vslice_dummy_var_274 := SerialDbgPrintEx(11, Tmp_462);
    Tmp_454 := status_15;
    return;

  anon15_Then:
    assume {:partition} sdv_390 == 0;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_465;
    Tmp_509 := Tmp_465;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_460;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_483)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_483))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} Tmp_483 != 0;
    assume Tmp_483 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_761;
    call {:si_unique_call 1061} SerialLogError(DriverObject_3, 0, vslice_dummy_var_761, Tmp_483, 0, 0, 0, 62, 0, -1073348569, Tmp_460, Tmp_509, 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_486;
    assume {:nonnull} Tmp_486 != 0;
    assume Tmp_486 > 0;
    havoc Tmp_512;
    assume {:nonnull} Tmp_512 != 0;
    assume Tmp_512 > 0;
    havoc Tmp_474;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_468;
    assume {:nonnull} Tmp_468 != 0;
    assume Tmp_468 > 0;
    havoc Tmp_501;
    assume {:nonnull} Tmp_501 != 0;
    assume Tmp_501 > 0;
    havoc Tmp_504;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_469)] := Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_4))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_469))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserInterruptStatus__SERIAL_USER_DATA(PUserData_4)))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    Tmp_499 := strConst__li2bpl180;
    call {:si_unique_call 1062} vslice_dummy_var_275 := SerialDbgPrintEx(14, Tmp_499);
    status_15 := -1073741709;
    goto L46;

  anon18_Then:
    assume {:partition} PartialCount != 3;
    goto L46;

  anon17_Then:
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_507;
    Tmp_498 := Tmp_507;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_461;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_495)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_495))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} Tmp_495 != 0;
    assume Tmp_495 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_762;
    call {:si_unique_call 1063} SerialLogError(DriverObject_3, 0, vslice_dummy_var_762, Tmp_495, 0, 0, 0, 61, 0, -1073348570, Tmp_461, Tmp_498, 0, 0);
    status_15 := -1073741709;
    goto L46;

  anon16_Then:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)] == 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    Tmp_487 := Mem_T.INT4[UserVector__SERIAL_USER_DATA(PUserData_4)];
    goto L36;

  anon14_Then:
    assume {:partition} sdv_387 == 0;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_508;
    Tmp_492 := Tmp_508;
    assume {:nonnull} UserSubKey != 0;
    assume UserSubKey > 0;
    havoc Tmp_482;
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_485)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_485))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    havoc vslice_dummy_var_763;
    call {:si_unique_call 1064} SerialLogError(DriverObject_3, 0, vslice_dummy_var_763, Tmp_485, 0, 0, 0, 60, 0, -1073348571, Tmp_482, Tmp_492, 0, 0);
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_481;
    assume {:nonnull} Tmp_481 != 0;
    assume Tmp_481 > 0;
    havoc Tmp_476;
    assume {:nonnull} Tmp_476 != 0;
    assume Tmp_476 > 0;
    havoc Tmp_490;
    assume {:nonnull} PTrResourceList != 0;
    assume PTrResourceList > 0;
    havoc Tmp_500;
    assume {:nonnull} Tmp_500 != 0;
    assume Tmp_500 > 0;
    havoc Tmp_484;
    assume {:nonnull} Tmp_484 != 0;
    assume Tmp_484 > 0;
    havoc Tmp_459;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_458)] := Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_4))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_458))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserPort__SERIAL_USER_DATA(PUserData_4)))];
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    assume {:nonnull} Tmp_458 != 0;
    assume Tmp_458 > 0;
    Tmp_475 := strConst__li2bpl181;
    call {:si_unique_call 1065} vslice_dummy_var_276 := SerialDbgPrintEx(14, Tmp_475);
    status_15 := -1073741709;
    goto L46;

  anon13_Then:
    assume {:partition} Mem_T.INT4[UserLevel__SERIAL_USER_DATA(PUserData_4)] == 0;
    assume {:nonnull} PUserData_4 != 0;
    assume PUserData_4 > 0;
    Tmp_480 := Mem_T.INT4[UserVector__SERIAL_USER_DATA(PUserData_4)];
    goto L19;
}



procedure {:origName "SerialBuildRequirementsList"} SerialBuildRequirementsList(actual_PRequiredList: int, actual_PartialCount_1: int, actual_PUserData_5: int) returns (Tmp_513: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_513 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialBuildRequirementsList"} SerialBuildRequirementsList(actual_PRequiredList: int, actual_PartialCount_1: int, actual_PUserData_5: int) returns (Tmp_513: int)
{
  var {:pointer} reqResList: int;
  var {:pointer} Tmp_514: int;
  var {:pointer} Tmp_516: int;
  var {:pointer} Tmp_517: int;
  var {:scalar} status_16: int;
  var {:pointer} Tmp_518: int;
  var {:pointer} reqResDesc: int;
  var {:pointer} PRequiredList: int;
  var {:scalar} PartialCount_1: int;
  var {:pointer} PUserData_5: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;

  anon0:
    PRequiredList := actual_PRequiredList;
    PartialCount_1 := actual_PartialCount_1;
    PUserData_5 := actual_PUserData_5;
    call {:si_unique_call 1066} Tmp_514 := __HAVOC_malloc(140);
    call {:si_unique_call 1067} Tmp_516 := __HAVOC_malloc(140);
    call {:si_unique_call 1068} Tmp_517 := __HAVOC_malloc(380);
    call {:si_unique_call 1069} Tmp_518 := __HAVOC_malloc(392);
    status_16 := 0;
    call {:si_unique_call 1070} sdv_do_paged_code_check();
    Tmp_516 := strConst__li2bpl182;
    call {:si_unique_call 1071} vslice_dummy_var_277 := SerialDbgPrintEx(11, Tmp_516);
    call {:si_unique_call 1072} sdv_RtlZeroMemory(0, 136);
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    assume {:nonnull} PRequiredList != 0;
    assume PRequiredList > 0;
    havoc Tmp_518;
    reqResList := Tmp_518;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    assume {:nonnull} reqResList != 0;
    assume reqResList > 0;
    havoc Tmp_517;
    reqResDesc := Tmp_517;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(MinimumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc))))] := Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_5))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(MinimumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserPort__SERIAL_USER_DATA(PUserData_5)))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_5)] == 1;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L37;

  L37:
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} PartialCount_1 == 3;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(MinimumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc))))] := Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_5))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(MinimumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserInterruptStatus__SERIAL_USER_DATA(PUserData_5)))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(MaximumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc))))] := Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_5))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(MaximumAddress_unnamed_tag_54(Port_unnamed_tag_53(u__IO_RESOURCE_DESCRIPTOR(reqResDesc)))))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(UserInterruptStatus__SERIAL_USER_DATA(PUserData_5)))];
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    assume {:nonnull} PUserData_5 != 0;
    assume PUserData_5 > 0;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L42;

  L42:
    Tmp_514 := strConst__li2bpl183;
    call {:si_unique_call 1073} vslice_dummy_var_278 := SerialDbgPrintEx(11, Tmp_514);
    Tmp_513 := status_16;
    return;

  anon6_Then:
    assume {:partition} PartialCount_1 != 3;
    goto L42;

  anon5_Then:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_5)] != 1;
    assume {:nonnull} reqResDesc != 0;
    assume reqResDesc > 0;
    goto L37;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_279: int;

  anon0:
    call {:si_unique_call 1074} vslice_dummy_var_279 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialIsUserDataValid"} SerialIsUserDataValid(actual_DriverObject_4: int, actual_UserSubKey_1: int, actual_Parameters: int, actual_DefaultInterfaceType: int, actual_PUserData_6: int) returns (Tmp_521: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_521 == 0 || Tmp_521 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIsUserDataValid"} SerialIsUserDataValid(actual_DriverObject_4: int, actual_UserSubKey_1: int, actual_Parameters: int, actual_DefaultInterfaceType: int, actual_PUserData_6: int) returns (Tmp_521: int)
{
  var {:scalar} Tmp_522: int;
  var {:scalar} Tmp_523: int;
  var {:pointer} Tmp_524: int;
  var {:pointer} Tmp_525: int;
  var {:pointer} Tmp_526: int;
  var {:scalar} Tmp_527: int;
  var {:scalar} Tmp_528: int;
  var {:pointer} Tmp_529: int;
  var {:scalar} Tmp_530: int;
  var {:scalar} Tmp_531: int;
  var {:pointer} Tmp_532: int;
  var {:pointer} Tmp_533: int;
  var {:pointer} Tmp_534: int;
  var {:scalar} Tmp_535: int;
  var {:pointer} Tmp_536: int;
  var {:pointer} Tmp_537: int;
  var {:pointer} Tmp_538: int;
  var {:pointer} Tmp_539: int;
  var {:pointer} Tmp_540: int;
  var {:pointer} Tmp_541: int;
  var {:scalar} Tmp_542: int;
  var {:pointer} Tmp_543: int;
  var {:scalar} Tmp_544: int;
  var {:pointer} Tmp_545: int;
  var {:pointer} Tmp_546: int;
  var {:scalar} Tmp_547: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} Tmp_550: int;
  var {:pointer} Tmp_551: int;
  var {:scalar} Tmp_552: int;
  var {:scalar} Tmp_553: int;
  var {:pointer} Tmp_554: int;
  var {:scalar} Tmp_555: int;
  var {:pointer} Tmp_556: int;
  var {:pointer} Tmp_557: int;
  var {:scalar} foundIt_1: int;
  var {:scalar} Tmp_558: int;
  var {:pointer} Tmp_559: int;
  var {:pointer} Tmp_560: int;
  var {:scalar} Tmp_561: int;
  var {:pointer} Tmp_562: int;
  var {:scalar} Tmp_563: int;
  var {:pointer} Tmp_564: int;
  var {:pointer} Tmp_566: int;
  var {:pointer} Tmp_567: int;
  var {:pointer} Tmp_568: int;
  var {:scalar} rval: int;
  var {:pointer} Tmp_569: int;
  var {:scalar} Tmp_570: int;
  var {:scalar} Tmp_571: int;
  var {:scalar} sdv_413: int;
  var {:pointer} Tmp_572: int;
  var {:pointer} Tmp_573: int;
  var {:pointer} Tmp_574: int;
  var {:scalar} Tmp_575: int;
  var {:pointer} Tmp_576: int;
  var {:pointer} Tmp_577: int;
  var {:scalar} Tmp_578: int;
  var {:scalar} Tmp_579: int;
  var {:scalar} sdv_418: int;
  var {:pointer} Tmp_580: int;
  var {:pointer} Tmp_581: int;
  var {:pointer} Tmp_582: int;
  var {:scalar} Tmp_583: int;
  var {:pointer} Tmp_584: int;
  var {:scalar} sdv_420: int;
  var {:pointer} Tmp_585: int;
  var {:pointer} Tmp_586: int;
  var {:scalar} Tmp_587: int;
  var {:pointer} DriverObject_4: int;
  var {:pointer} UserSubKey_1: int;
  var {:pointer} Parameters: int;
  var {:scalar} DefaultInterfaceType: int;
  var {:pointer} PUserData_6: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_764: int;
  var vslice_dummy_var_765: int;
  var vslice_dummy_var_766: int;
  var vslice_dummy_var_767: int;
  var vslice_dummy_var_768: int;
  var vslice_dummy_var_769: int;
  var vslice_dummy_var_770: int;
  var vslice_dummy_var_771: int;
  var vslice_dummy_var_772: int;
  var vslice_dummy_var_773: int;
  var vslice_dummy_var_774: int;
  var vslice_dummy_var_775: int;
  var vslice_dummy_var_776: int;
  var vslice_dummy_var_777: int;
  var vslice_dummy_var_778: int;
  var vslice_dummy_var_779: int;
  var vslice_dummy_var_780: int;

  anon0:
    call {:si_unique_call 1075} Tmp_522 := __HAVOC_malloc(20);
    call {:si_unique_call 1076} Tmp_523 := __HAVOC_malloc(20);
    call {:si_unique_call 1077} Tmp_528 := __HAVOC_malloc(20);
    call {:si_unique_call 1078} Tmp_544 := __HAVOC_malloc(20);
    call {:si_unique_call 1079} Tmp_552 := __HAVOC_malloc(20);
    call {:si_unique_call 1080} Tmp_553 := __HAVOC_malloc(20);
    call {:si_unique_call 1081} Tmp_555 := __HAVOC_malloc(20);
    call {:si_unique_call 1082} Tmp_579 := __HAVOC_malloc(20);
    call {:si_unique_call 1083} Tmp_583 := __HAVOC_malloc(20);
    call {:si_unique_call 1084} Tmp_587 := __HAVOC_malloc(20);
    DriverObject_4 := actual_DriverObject_4;
    UserSubKey_1 := actual_UserSubKey_1;
    Parameters := actual_Parameters;
    DefaultInterfaceType := actual_DefaultInterfaceType;
    PUserData_6 := actual_PUserData_6;
    call {:si_unique_call 1085} Tmp_526 := __HAVOC_malloc(152);
    call {:si_unique_call 1086} Tmp_529 := __HAVOC_malloc(180);
    call {:si_unique_call 1087} Tmp_532 := __HAVOC_malloc(116);
    call {:si_unique_call 1088} Tmp_534 := __HAVOC_malloc(144);
    call {:si_unique_call 1089} Tmp_536 := __HAVOC_malloc(180);
    call {:si_unique_call 1090} Tmp_537 := __HAVOC_malloc(88);
    call {:si_unique_call 1091} Tmp_539 := __HAVOC_malloc(4);
    call {:si_unique_call 1092} Tmp_540 := __HAVOC_malloc(164);
    call {:si_unique_call 1093} Tmp_545 := __HAVOC_malloc(88);
    call {:si_unique_call 1094} Tmp_546 := __HAVOC_malloc(148);
    call {:si_unique_call 1095} Tmp_548 := __HAVOC_malloc(84);
    call {:si_unique_call 1096} Tmp_550 := __HAVOC_malloc(188);
    call {:si_unique_call 1097} Tmp_551 := __HAVOC_malloc(72);
    call {:si_unique_call 1098} Tmp_554 := __HAVOC_malloc(96);
    call {:si_unique_call 1099} Tmp_556 := __HAVOC_malloc(232);
    call {:si_unique_call 1100} Tmp_557 := __HAVOC_malloc(4);
    call {:si_unique_call 1101} Tmp_560 := __HAVOC_malloc(236);
    call {:si_unique_call 1102} Tmp_566 := __HAVOC_malloc(116);
    call {:si_unique_call 1103} Tmp_567 := __HAVOC_malloc(100);
    call {:si_unique_call 1104} Tmp_569 := __HAVOC_malloc(4);
    call {:si_unique_call 1105} Tmp_574 := __HAVOC_malloc(164);
    call {:si_unique_call 1106} Tmp_577 := __HAVOC_malloc(164);
    call {:si_unique_call 1107} Tmp_580 := __HAVOC_malloc(156);
    call {:si_unique_call 1108} Tmp_581 := __HAVOC_malloc(176);
    call {:si_unique_call 1109} Tmp_582 := __HAVOC_malloc(248);
    call {:si_unique_call 1110} Tmp_586 := __HAVOC_malloc(100);
    rval := 1;
    call {:si_unique_call 1111} sdv_do_paged_code_check();
    Tmp_532 := strConst__li2bpl184;
    call {:si_unique_call 1112} vslice_dummy_var_281 := SerialDbgPrintEx(11, Tmp_532);
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_6))] != 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.INT4[UserVector__SERIAL_USER_DATA(PUserData_6)] != 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_6))] != 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] == -1;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_575;
    assume {:nonnull} Tmp_587 != 0;
    assume Tmp_587 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_587)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_587 != 0;
    assume Tmp_587 > 0;
    assume {:nonnull} Tmp_587 != 0;
    assume Tmp_587 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_587))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_587 != 0;
    assume Tmp_587 > 0;
    assume {:nonnull} Tmp_587 != 0;
    assume Tmp_587 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_764;
    havoc vslice_dummy_var_765;
    call {:si_unique_call 1113} SerialLogError(DriverObject_4, 0, vslice_dummy_var_764, Tmp_587, 0, 0, 0, 67, 0, -1073348588, Tmp_575, vslice_dummy_var_765, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_585;
    Tmp_537 := strConst__li2bpl197;
    call {:si_unique_call 1114} vslice_dummy_var_282 := SerialDbgPrintEx(14, Tmp_537);
    rval := 0;
    goto L34;

  L34:
    Tmp_521 := rval;
    return;

  anon36_Then:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] != -1;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] != 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData_6)] != 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] > 16;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_558;
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_523)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_523))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    assume {:nonnull} Tmp_523 != 0;
    assume Tmp_523 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_766;
    havoc vslice_dummy_var_767;
    call {:si_unique_call 1115} SerialLogError(DriverObject_4, 0, vslice_dummy_var_766, Tmp_523, 0, 0, 0, 69, 0, -1073348587, Tmp_558, vslice_dummy_var_767, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_584;
    Tmp_567 := strConst__li2bpl198;
    call {:si_unique_call 1116} vslice_dummy_var_283 := SerialDbgPrintEx(14, Tmp_567);
    rval := 0;
    goto L34;

  anon40_Then:
    assume {:partition} 16 >= Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)];
    goto L20;

  L20:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.INT4[UserBusNumber__SERIAL_USER_DATA(PUserData_6)] != 0;
    goto L73;

  L73:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)] >= 17;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_563;
    assume {:nonnull} Tmp_553 != 0;
    assume Tmp_553 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_553)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_553 != 0;
    assume Tmp_553 > 0;
    assume {:nonnull} Tmp_553 != 0;
    assume Tmp_553 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_553))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_553 != 0;
    assume Tmp_553 > 0;
    assume {:nonnull} Tmp_553 != 0;
    assume Tmp_553 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_768;
    havoc vslice_dummy_var_769;
    call {:si_unique_call 1117} SerialLogError(DriverObject_4, 0, vslice_dummy_var_768, Tmp_553, 0, 0, 0, 71, 0, -1073348586, Tmp_563, vslice_dummy_var_769, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_576;
    Tmp_545 := strConst__li2bpl199;
    call {:si_unique_call 1118} vslice_dummy_var_284 := SerialDbgPrintEx(14, Tmp_545);
    rval := 0;
    goto L34;

  anon42_Then:
    assume {:partition} 17 > Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)];
    call {:si_unique_call 1119} vslice_dummy_var_280 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} foundIt_1 != 0;
    goto L90;

  L90:
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)] == 3;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_6)] == 1;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_570;
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_528)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_528))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_770;
    havoc vslice_dummy_var_771;
    call {:si_unique_call 1120} SerialLogError(DriverObject_4, 0, vslice_dummy_var_770, Tmp_528, 0, 0, 0, 73, 0, -1073348584, Tmp_570, vslice_dummy_var_771, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_573;
    Tmp_556 := strConst__li2bpl200;
    call {:si_unique_call 1121} vslice_dummy_var_285 := SerialDbgPrintEx(14, Tmp_556);
    rval := 0;
    goto L34;

  anon45_Then:
    assume {:partition} Mem_T.INT4[UserInterruptMode__SERIAL_USER_DATA(PUserData_6)] != 1;
    goto L91;

  L91:
    Tmp_534 := strConst__li2bpl185;
    call {:si_unique_call 1122} vslice_dummy_var_286 := SerialDbgPrintEx(4, Tmp_534);
    Tmp_550 := strConst__li2bpl186;
    call {:si_unique_call 1123} vslice_dummy_var_287 := SerialDbgPrintEx(4, Tmp_550);
    Tmp_574 := strConst__li2bpl187;
    call {:si_unique_call 1124} vslice_dummy_var_288 := SerialDbgPrintEx(4, Tmp_574);
    Tmp_577 := strConst__li2bpl188;
    call {:si_unique_call 1125} vslice_dummy_var_289 := SerialDbgPrintEx(4, Tmp_577);
    Tmp_540 := strConst__li2bpl189;
    call {:si_unique_call 1126} vslice_dummy_var_290 := SerialDbgPrintEx(4, Tmp_540);
    Tmp_581 := strConst__li2bpl190;
    call {:si_unique_call 1127} vslice_dummy_var_291 := SerialDbgPrintEx(4, Tmp_581);
    Tmp_536 := strConst__li2bpl191;
    call {:si_unique_call 1128} vslice_dummy_var_292 := SerialDbgPrintEx(4, Tmp_536);
    Tmp_529 := strConst__li2bpl192;
    call {:si_unique_call 1129} vslice_dummy_var_293 := SerialDbgPrintEx(4, Tmp_529);
    Tmp_526 := strConst__li2bpl193;
    call {:si_unique_call 1130} vslice_dummy_var_294 := SerialDbgPrintEx(4, Tmp_526);
    Tmp_546 := strConst__li2bpl194;
    call {:si_unique_call 1131} vslice_dummy_var_295 := SerialDbgPrintEx(4, Tmp_546);
    Tmp_580 := strConst__li2bpl195;
    call {:si_unique_call 1132} vslice_dummy_var_296 := SerialDbgPrintEx(4, Tmp_580);
    Tmp_566 := strConst__li2bpl196;
    call {:si_unique_call 1133} vslice_dummy_var_297 := SerialDbgPrintEx(11, Tmp_566);
    goto L34;

  anon44_Then:
    assume {:partition} Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)] != 3;
    goto L91;

  anon43_Then:
    assume {:partition} foundIt_1 == 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_527;
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_583)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_583))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_772;
    havoc vslice_dummy_var_773;
    call {:si_unique_call 1134} SerialLogError(DriverObject_4, 0, vslice_dummy_var_772, Tmp_583, 0, 0, 0, 72, 0, -1073348585, Tmp_527, vslice_dummy_var_773, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_541;
    Tmp_560 := strConst__li2bpl201;
    call {:si_unique_call 1135} vslice_dummy_var_298 := SerialDbgPrintEx(14, Tmp_560);
    rval := 0;
    goto L34;

  anon35_Then:
    assume {:partition} Mem_T.INT4[UserBusNumber__SERIAL_USER_DATA(PUserData_6)] == 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)] == DefaultInterfaceType;
    goto L90;

  anon41_Then:
    assume {:partition} Mem_T.INT4[UserInterfaceType__SERIAL_USER_DATA(PUserData_6)] != DefaultInterfaceType;
    goto L73;

  anon38_Then:
    assume {:partition} Mem_T.INT4[UserIndexed__SERIAL_USER_DATA(PUserData_6)] == 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] > 8;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_531;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_522)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_522))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} Tmp_522 != 0;
    assume Tmp_522 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_774;
    havoc vslice_dummy_var_775;
    call {:si_unique_call 1136} SerialLogError(DriverObject_4, 0, vslice_dummy_var_774, Tmp_522, 0, 0, 0, 70, 0, -1073348587, Tmp_531, vslice_dummy_var_775, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_568;
    Tmp_586 := strConst__li2bpl198;
    call {:si_unique_call 1137} vslice_dummy_var_299 := SerialDbgPrintEx(14, Tmp_586);
    rval := 0;
    goto L34;

  anon39_Then:
    assume {:partition} 8 >= Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)];
    goto L20;

  anon37_Then:
    assume {:partition} Mem_T.INT4[UserPortIndex__SERIAL_USER_DATA(PUserData_6)] == 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc Tmp_578;
    assume {:nonnull} Tmp_544 != 0;
    assume Tmp_544 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_544)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_544 != 0;
    assume Tmp_544 > 0;
    assume {:nonnull} Tmp_544 != 0;
    assume Tmp_544 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_544))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_544 != 0;
    assume Tmp_544 > 0;
    assume {:nonnull} Tmp_544 != 0;
    assume Tmp_544 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_776;
    havoc vslice_dummy_var_777;
    call {:si_unique_call 1138} SerialLogError(DriverObject_4, 0, vslice_dummy_var_776, Tmp_544, 0, 0, 0, 68, 0, -1073348588, Tmp_578, vslice_dummy_var_777, 0, 0);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_559;
    Tmp_582 := strConst__li2bpl202;
    call {:si_unique_call 1139} vslice_dummy_var_300 := SerialDbgPrintEx(14, Tmp_582);
    rval := 0;
    goto L34;

  anon34_Then:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(PUserData_6))] == 0;
    goto L20;

  anon33_Then:
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_524;
    Tmp_535 := sdv_418 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_569;
    Tmp_533 := Tmp_569;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_571;
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_552)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_552))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_778;
    call {:si_unique_call 1140} SerialLogError(DriverObject_4, 0, vslice_dummy_var_778, Tmp_552, 0, 0, 0, 66, 0, -1073348583, Tmp_571, Tmp_533, Tmp_535, Tmp_524);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_543;
    Tmp_548 := strConst__li2bpl203;
    call {:si_unique_call 1141} vslice_dummy_var_301 := SerialDbgPrintEx(14, Tmp_548);
    rval := 0;
    goto L34;

  anon32_Then:
    assume {:partition} Mem_T.INT4[UserVector__SERIAL_USER_DATA(PUserData_6)] == 0;
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_572;
    Tmp_530 := sdv_420 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_539;
    Tmp_549 := Tmp_539;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_561;
    assume {:nonnull} Tmp_579 != 0;
    assume Tmp_579 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_579)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_579 != 0;
    assume Tmp_579 > 0;
    assume {:nonnull} Tmp_579 != 0;
    assume Tmp_579 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_579))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_579 != 0;
    assume Tmp_579 > 0;
    assume {:nonnull} Tmp_579 != 0;
    assume Tmp_579 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_779;
    call {:si_unique_call 1142} SerialLogError(DriverObject_4, 0, vslice_dummy_var_779, Tmp_579, 0, 0, 0, 65, 0, -1073348583, Tmp_561, Tmp_549, Tmp_530, Tmp_572);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_525;
    Tmp_551 := strConst__li2bpl204;
    call {:si_unique_call 1143} vslice_dummy_var_302 := SerialDbgPrintEx(14, Tmp_551);
    rval := 0;
    goto L34;

  anon31_Then:
    assume {:partition} Mem_T.INT4[LowPart__LUID(UserPort__SERIAL_USER_DATA(PUserData_6))] == 0;
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_562;
    Tmp_547 := sdv_413 * 2 + 2;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_557;
    Tmp_564 := Tmp_557;
    assume {:nonnull} UserSubKey_1 != 0;
    assume UserSubKey_1 > 0;
    havoc Tmp_542;
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_555)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_555))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    assume {:nonnull} PUserData_6 != 0;
    assume PUserData_6 > 0;
    havoc vslice_dummy_var_780;
    call {:si_unique_call 1144} SerialLogError(DriverObject_4, 0, vslice_dummy_var_780, Tmp_555, 0, 0, 0, 64, 0, -1073348583, Tmp_542, Tmp_564, Tmp_547, Tmp_562);
    assume {:nonnull} Parameters != 0;
    assume Parameters > 0;
    havoc Tmp_538;
    Tmp_554 := strConst__li2bpl205;
    call {:si_unique_call 1145} vslice_dummy_var_303 := SerialDbgPrintEx(14, Tmp_554);
    rval := 0;
    goto L34;
}



procedure {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt_2: int, actual_DeviceIsOpened: int, actual_Reopen: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt_2: int, actual_DeviceIsOpened: int, actual_Reopen: int)
{
  var {:pointer} Tmp_588: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} PDevExt_2: int;
  var {:scalar} DeviceIsOpened: int;
  var {:scalar} Reopen: int;
  var vslice_dummy_var_304: int;

  anon0:
    call {:si_unique_call 1146} vslice_dummy_var_304 := __HAVOC_malloc(4);
    PDevExt_2 := actual_PDevExt_2;
    DeviceIsOpened := actual_DeviceIsOpened;
    Reopen := actual_Reopen;
    call {:si_unique_call 1147} Tmp_588 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    Mem_T.INT4[Tmp_588] := oldIrql_1;
    call {:si_unique_call 1148} sdv_KeAcquireSpinLock(0, Tmp_588);
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_588];
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    call {:si_unique_call 1149} sdv_KeReleaseSpinLock(0, oldIrql_1);
    return;
}



procedure {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_4: int, actual_PDevExt_3: int, actual_DevPowerState: int) returns (Tmp_590: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_590 == 0 || Tmp_590 == -1073741584 || Tmp_590 == 259 || Tmp_590 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_4: int, actual_PDevExt_3: int, actual_DevPowerState: int) returns (Tmp_590: int)
{
  var {:scalar} powerState: int;
  var {:scalar} gotoPowEvent: int;
  var {:pointer} Tmp_592: int;
  var {:scalar} status_17: int;
  var {:pointer} Tmp_593: int;
  var {:scalar} DevPowerState: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;

  anon0:
    call {:si_unique_call 1150} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 1151} gotoPowEvent := __HAVOC_malloc(124);
    DevPowerState := actual_DevPowerState;
    call {:si_unique_call 1152} Tmp_592 := __HAVOC_malloc(120);
    call {:si_unique_call 1153} Tmp_593 := __HAVOC_malloc(100);
    call {:si_unique_call 1154} sdv_do_paged_code_check();
    Tmp_593 := strConst__li2bpl206;
    call {:si_unique_call 1155} vslice_dummy_var_306 := SerialDbgPrintEx(11, Tmp_593);
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 1156} KeInitializeEvent(gotoPowEvent, 1, 0);
    call {:si_unique_call 1157} status_17 := PoRequestPowerIrp(0, 2, powerState, li2bplFunctionConstant318, 0, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_17 == 259;
    call {:si_unique_call 1158} vslice_dummy_var_305 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    status_17 := 0;
    goto L21;

  L21:
    Tmp_592 := strConst__li2bpl207;
    call {:si_unique_call 1159} vslice_dummy_var_307 := SerialDbgPrintEx(11, Tmp_592);
    Tmp_590 := status_17;
    return;

  anon3_Then:
    assume {:partition} status_17 != 259;
    goto L21;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_308: int;

  anon0:
    call {:si_unique_call 1160} vslice_dummy_var_308 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_5: int, actual_PIrp_2: int) returns (Tmp_596: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_5: int, actual_PIrp_2: int) returns (Tmp_596: int)
{
  var {:pointer} SD4: int;
  var {:pointer} Tmp_597: int;
  var {:pointer} pDevExt_6: int;
  var {:pointer} Tmp_598: int;
  var {:pointer} Tmp_599: int;
  var {:scalar} sdv_4: int;
  var {:pointer} Tmp_600: int;
  var {:pointer} pIrpStack_2: int;
  var {:pointer} Tmp_601: int;
  var {:pointer} Tmp_602: int;
  var {:pointer} Tmp_603: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_604: int;
  var {:pointer} PDevObj_5: int;
  var {:pointer} PIrp_2: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_781: int;
  var vslice_dummy_var_782: int;

  anon0:
    call {:si_unique_call 1161} sdv_4 := __HAVOC_malloc(8);
    PDevObj_5 := actual_PDevObj_5;
    PIrp_2 := actual_PIrp_2;
    call {:si_unique_call 1162} Tmp_597 := __HAVOC_malloc(72);
    call {:si_unique_call 1163} Tmp_598 := __HAVOC_malloc(92);
    call {:si_unique_call 1164} Tmp_599 := __HAVOC_malloc(100);
    call {:si_unique_call 1165} Tmp_600 := __HAVOC_malloc(84);
    call {:si_unique_call 1166} Tmp_601 := __HAVOC_malloc(104);
    call {:si_unique_call 1167} Tmp_602 := __HAVOC_malloc(72);
    call {:si_unique_call 1168} Tmp_603 := __HAVOC_malloc(72);
    call {:si_unique_call 1169} Tmp_604 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_5 != 0;
    assume PDevObj_5 > 0;
    havoc pDevExt_6;
    call {:si_unique_call 1170} pIrpStack_2 := sdv_IoGetCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 1171} sdv_do_paged_code_check();
    Tmp_600 := strConst__li2bpl208;
    call {:si_unique_call 1172} vslice_dummy_var_310 := SerialDbgPrintEx(11, Tmp_600);
    Tmp_598 := strConst__li2bpl209;
    call {:si_unique_call 1173} vslice_dummy_var_311 := SerialDbgPrintEx(12, Tmp_598);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    call {:si_unique_call 1174} KeClearEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_6));
    call {:si_unique_call 1175} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    call {:si_unique_call 1176} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant237, PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_6), 1, 1, 1);
    Tmp_604 := strConst__li2bpl210;
    call {:si_unique_call 1177} vslice_dummy_var_312 := SerialDbgPrintEx(12, Tmp_604);
    call {:si_unique_call 1178} status_18 := PoCallDriver(0, PIrp_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_18 == 259;
    Tmp_599 := strConst__li2bpl211;
    call {:si_unique_call 1179} vslice_dummy_var_313 := SerialDbgPrintEx(12, Tmp_599);
    call {:si_unique_call 1180} vslice_dummy_var_309 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L44;

  L44:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] >= 0;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_18 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1181} SerialRestoreDeviceState(pDevExt_6);
    goto L49;

  L49:
    assume {:nonnull} pIrpStack_2 != 0;
    assume pIrpStack_2 > 0;
    havoc vslice_dummy_var_781;
    havoc vslice_dummy_var_782;
    call {:si_unique_call 1182} SD4 := PoSetPowerState(0, vslice_dummy_var_781, vslice_dummy_var_782);
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    assume {:nonnull} SD4 != 0;
    assume SD4 > 0;
    assume {:nonnull} sdv_4 != 0;
    assume sdv_4 > 0;
    call {:si_unique_call 1183} PoStartNextPowerIrp(0);
    Tmp_597 := strConst__li2bpl1;
    call {:si_unique_call 1184} vslice_dummy_var_314 := SerialDbgPrintEx(9, Tmp_597);
    call {:si_unique_call 1185} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1186} SerialIRPEpilogue(pDevExt_6);
    Tmp_601 := strConst__li2bpl212;
    call {:si_unique_call 1187} vslice_dummy_var_315 := SerialDbgPrintEx(11, Tmp_601);
    Tmp_596 := status_18;
    goto L1;

  L1:
    return;

  anon12_Then:
    goto L49;

  anon11_Then:
    assume {:partition} 0 > Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_18 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    call {:si_unique_call 1188} PoStartNextPowerIrp(0);
    Tmp_603 := strConst__li2bpl1;
    call {:si_unique_call 1189} vslice_dummy_var_316 := SerialDbgPrintEx(9, Tmp_603);
    call {:si_unique_call 1190} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1191} SerialIRPEpilogue(pDevExt_6);
    Tmp_596 := status_18;
    goto L1;

  anon9_Then:
    assume {:partition} status_18 != 259;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_18 < 0;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := status_18;
    call {:si_unique_call 1192} PoStartNextPowerIrp(0);
    Tmp_602 := strConst__li2bpl1;
    call {:si_unique_call 1193} vslice_dummy_var_317 := SerialDbgPrintEx(9, Tmp_602);
    call {:si_unique_call 1194} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1195} SerialIRPEpilogue(pDevExt_6);
    Tmp_596 := status_18;
    goto L1;

  anon10_Then:
    assume {:partition} 0 <= status_18;
    goto L44;
}



procedure {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_6: int, actual_PIrp_3: int) returns (Tmp_606: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_6: int, actual_PIrp_3: int) returns (Tmp_606: int)
{
  var {:pointer} Tmp_607: int;
  var {:pointer} Tmp_608: int;
  var {:pointer} Tmp_609: int;
  var {:pointer} Tmp_610: int;
  var {:pointer} pDevExt_7: int;
  var {:pointer} Tmp_611: int;
  var {:pointer} Tmp_612: int;
  var {:scalar} powerState_1: int;
  var {:pointer} Tmp_613: int;
  var {:pointer} Tmp_614: int;
  var {:scalar} Tmp_615: int;
  var {:pointer} pIrpStack_3: int;
  var {:pointer} Tmp_616: int;
  var {:pointer} Tmp_617: int;
  var {:pointer} Tmp_618: int;
  var {:pointer} pLowerDevObj_5: int;
  var {:pointer} Tmp_619: int;
  var {:scalar} status_19: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} Tmp_621: int;
  var {:pointer} PDevObj_6: int;
  var {:pointer} PIrp_3: int;
  var vslice_dummy_var_318: int;
  var vslice_dummy_var_319: int;
  var vslice_dummy_var_320: int;
  var vslice_dummy_var_321: int;
  var vslice_dummy_var_322: int;
  var vslice_dummy_var_323: int;
  var vslice_dummy_var_324: int;
  var vslice_dummy_var_325: int;
  var vslice_dummy_var_326: int;
  var vslice_dummy_var_327: int;
  var vslice_dummy_var_328: int;
  var vslice_dummy_var_329: int;
  var vslice_dummy_var_330: int;
  var vslice_dummy_var_331: int;
  var vslice_dummy_var_332: int;

  anon0:
    call {:si_unique_call 1196} powerState_1 := __HAVOC_malloc(8);
    PDevObj_6 := actual_PDevObj_6;
    PIrp_3 := actual_PIrp_3;
    call {:si_unique_call 1197} Tmp_607 := __HAVOC_malloc(100);
    call {:si_unique_call 1198} Tmp_608 := __HAVOC_malloc(136);
    call {:si_unique_call 1199} Tmp_609 := __HAVOC_malloc(112);
    call {:si_unique_call 1200} Tmp_610 := __HAVOC_malloc(72);
    call {:si_unique_call 1201} Tmp_611 := __HAVOC_malloc(104);
    call {:si_unique_call 1202} Tmp_612 := __HAVOC_malloc(72);
    call {:si_unique_call 1203} Tmp_613 := __HAVOC_malloc(72);
    call {:si_unique_call 1204} Tmp_614 := __HAVOC_malloc(124);
    call {:si_unique_call 1205} Tmp_616 := __HAVOC_malloc(80);
    call {:si_unique_call 1206} Tmp_617 := __HAVOC_malloc(72);
    call {:si_unique_call 1207} Tmp_618 := __HAVOC_malloc(104);
    call {:si_unique_call 1208} Tmp_619 := __HAVOC_malloc(100);
    call {:si_unique_call 1209} Tmp_620 := __HAVOC_malloc(28);
    call {:si_unique_call 1210} Tmp_621 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_6 != 0;
    assume PDevObj_6 > 0;
    havoc pDevExt_7;
    call {:si_unique_call 1211} pIrpStack_3 := sdv_IoGetCurrentIrpStackLocation(PIrp_3);
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    havoc pLowerDevObj_5;
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    call {:si_unique_call 1212} sdv_do_paged_code_check();
    call {:si_unique_call 1213} status_19 := SerialIRPPrologue(PIrp_3, pDevExt_7);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} status_19 != 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} status_19 != 259;
    call {:si_unique_call 1214} PoStartNextPowerIrp(0);
    Tmp_621 := strConst__li2bpl1;
    call {:si_unique_call 1215} vslice_dummy_var_320 := SerialDbgPrintEx(9, Tmp_621);
    call {:si_unique_call 1216} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1217} SerialIRPEpilogue(pDevExt_7);
    goto L26;

  L26:
    Tmp_606 := status_19;
    goto L1;

  L1:
    return;

  anon66_Then:
    assume {:partition} status_19 == 259;
    goto L26;

  anon65_Then:
    assume {:partition} status_19 == 0;
    status_19 := 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    Tmp_609 := strConst__li2bpl216;
    call {:si_unique_call 1218} vslice_dummy_var_331 := SerialDbgPrintEx(12, Tmp_609);
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L57;

  L57:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := -1073741436;
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    status_19 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))];
    call {:si_unique_call 1219} PoStartNextPowerIrp(0);
    Tmp_612 := strConst__li2bpl1;
    call {:si_unique_call 1220} vslice_dummy_var_332 := SerialDbgPrintEx(9, Tmp_612);
    call {:si_unique_call 1221} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1222} SerialIRPEpilogue(pDevExt_7);
    Tmp_606 := status_19;
    goto L1;

  anon70_Then:
    goto L58;

  L58:
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := 0;
    status_19 := 0;
    call {:si_unique_call 1223} PoStartNextPowerIrp(0);
    call {:si_unique_call 1224} sdv_IoSkipCurrentIrpStackLocation(PIrp_3);
    call {:si_unique_call 1225} Tmp_606 := SerialPoCallDriver(pDevExt_7, pLowerDevObj_5, PIrp_3);
    goto L1;

  anon69_Then:
    goto L58;

  anon67_Then:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L58;

  anon68_Then:
    goto L57;

  anon82_Then:
    goto L40;

  L40:
    call {:si_unique_call 1226} PoStartNextPowerIrp(0);
    call {:si_unique_call 1227} sdv_IoSkipCurrentIrpStackLocation(PIrp_3);
    call {:si_unique_call 1228} status_19 := SerialPoCallDriver(pDevExt_7, pLowerDevObj_5, PIrp_3);
    Tmp_606 := status_19;
    goto L1;

  anon83_Then:
    Tmp_618 := strConst__li2bpl215;
    call {:si_unique_call 1229} vslice_dummy_var_323 := SerialDbgPrintEx(12, Tmp_618);
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    Tmp_617 := strConst__li2bpl218;
    call {:si_unique_call 1230} vslice_dummy_var_326 := SerialDbgPrintEx(12, Tmp_617);
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    Tmp_608 := strConst__li2bpl219;
    call {:si_unique_call 1231} vslice_dummy_var_327 := SerialDbgPrintEx(12, Tmp_608);
    status_19 := 0;
    goto L40;

  anon72_Then:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto L106;

  L106:
    Tmp_607 := strConst__li2bpl221;
    call {:si_unique_call 1232} vslice_dummy_var_329 := SerialDbgPrintEx(12, Tmp_607);
    call {:si_unique_call 1233} Tmp_606 := SerialSetPowerD3(PDevObj_6, PIrp_3);
    goto L1;

  anon93_Then:
    goto L40;

  anon94_Then:
    goto L106;

  anon95_Then:
    goto L106;

  anon73_Then:
    Tmp_619 := strConst__li2bpl220;
    call {:si_unique_call 1234} vslice_dummy_var_328 := SerialDbgPrintEx(12, Tmp_619);
    call {:si_unique_call 1235} Tmp_606 := SerialSetPowerD0(PDevObj_6, PIrp_3);
    goto L1;

  anon85_Then:
    Tmp_616 := strConst__li2bpl217;
    call {:si_unique_call 1236} vslice_dummy_var_330 := SerialDbgPrintEx(12, Tmp_616);
    status_19 := 0;
    goto L40;

  anon71_Then:
    Tmp_610 := strConst__li2bpl222;
    call {:si_unique_call 1237} vslice_dummy_var_324 := SerialDbgPrintEx(12, Tmp_610);
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    status_19 := 0;
    goto L40;

  anon74_Then:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto L128;

  L128:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    havoc Tmp_615;
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    havoc Tmp_620;
    assume {:nonnull} Tmp_620 != 0;
    assume Tmp_620 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  L130:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_7)] != 0;
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    call {:si_unique_call 1238} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1239} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_3);
    call {:si_unique_call 1240} sdv_IoSetCompletionRoutine(PIrp_3, li2bplFunctionConstant322, 0, 1, 1, 1);
    call {:si_unique_call 1241} vslice_dummy_var_318 := PoCallDriver(0, PIrp_3);
    Tmp_606 := 259;
    goto L1;

  anon78_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_7)] == 0;
    goto L131;

  L131:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto L150;

  L150:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L152;

  L152:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    call {:si_unique_call 1242} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1243} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_3);
    call {:si_unique_call 1244} sdv_IoSetCompletionRoutine(PIrp_3, li2bplFunctionConstant322, 0, 1, 1, 1);
    call {:si_unique_call 1245} vslice_dummy_var_319 := PoCallDriver(0, PIrp_3);
    Tmp_606 := 259;
    goto L1;

  anon81_Then:
    status_19 := -1073741436;
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := status_19;
    call {:si_unique_call 1246} PoStartNextPowerIrp(0);
    Tmp_613 := strConst__li2bpl1;
    call {:si_unique_call 1247} vslice_dummy_var_325 := SerialDbgPrintEx(9, Tmp_613);
    call {:si_unique_call 1248} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1249} SerialIRPEpilogue(pDevExt_7);
    Tmp_606 := status_19;
    goto L1;

  anon79_Then:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto L152;

  anon80_Then:
    goto L150;

  anon77_Then:
    goto L40;

  anon76_Then:
    goto L131;

  anon86_Then:
    status_19 := 0;
    goto L40;

  anon87_Then:
    goto L128;

  anon88_Then:
    goto L128;

  anon89_Then:
    goto L128;

  anon90_Then:
    goto L128;

  anon91_Then:
    goto L128;

  anon92_Then:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  anon75_Then:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  anon84_Then:
    Tmp_614 := strConst__li2bpl214;
    call {:si_unique_call 1250} vslice_dummy_var_322 := SerialDbgPrintEx(12, Tmp_614);
    goto L40;

  anon96_Then:
    Tmp_611 := strConst__li2bpl213;
    call {:si_unique_call 1251} vslice_dummy_var_321 := SerialDbgPrintEx(12, Tmp_611);
    goto L40;
}



procedure {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_4: int) returns (Tmp_623: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_623 == -1073741436 || Tmp_623 == 0 || Tmp_623 == -1073741584 || Tmp_623 == 259 || Tmp_623 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_4: int) returns (Tmp_623: int)
{
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_624: int;
  var {:pointer} pIrp: int;
  var {:scalar} status_20: int;
  var {:pointer} PDevExt_4: int;
  var vslice_dummy_var_333: int;
  var vslice_dummy_var_783: int;

  anon0:
    call {:si_unique_call 1252} powerState_2 := __HAVOC_malloc(8);
    PDevExt_4 := actual_PDevExt_4;
    call {:si_unique_call 1253} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_623 := -1073741436;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_623 := -1073741436;
    goto L1;

  anon12_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 1254} Tmp_624 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    havoc vslice_dummy_var_783;
    Mem_T.INT4[Tmp_624] := vslice_dummy_var_783;
    call {:si_unique_call 1255} vslice_dummy_var_333 := sdv_InterlockedIncrement(Tmp_624);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} Tmp_624 != 0;
    assume Tmp_624 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 1256} status_20 := PoRequestPowerIrp(0, 0, powerState_2, li2bplFunctionConstant328, 0, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_20 == 259;
    status_20 := 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L27;

  L27:
    Tmp_623 := status_20;
    goto L1;

  anon14_Then:
    assume {:partition} status_20 != 259;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_20 < 0;
    call {:si_unique_call 1257} SerialIRPEpilogue(PDevExt_4);
    goto L27;

  anon15_Then:
    assume {:partition} 0 <= status_20;
    goto L27;

  anon13_Then:
    Tmp_623 := -1073741436;
    goto L1;
}



procedure {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_5: int)
{
  var {:pointer} pDevState: int;
  var {:pointer} Tmp_625: int;
  var {:pointer} Tmp_627: int;
  var {:pointer} PDevExt_5: int;
  var boogieTmp: int;
  var vslice_dummy_var_334: int;
  var vslice_dummy_var_335: int;
  var vslice_dummy_var_336: int;

  anon0:
    call {:si_unique_call 1258} vslice_dummy_var_334 := __HAVOC_malloc(4);
    PDevExt_5 := actual_PDevExt_5;
    call {:si_unique_call 1259} Tmp_625 := __HAVOC_malloc(124);
    call {:si_unique_call 1260} Tmp_627 := __HAVOC_malloc(128);
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    pDevState := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_5);
    call {:si_unique_call 1261} sdv_do_paged_code_check();
    Tmp_627 := strConst__li2bpl223;
    call {:si_unique_call 1262} vslice_dummy_var_335 := SerialDbgPrintEx(11, Tmp_627);
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 1263} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 1264} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 1265} boogieTmp := corral_nondet();
    Tmp_625 := strConst__li2bpl224;
    call {:si_unique_call 1266} vslice_dummy_var_336 := SerialDbgPrintEx(11, Tmp_625);
    return;
}



procedure {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_7: int, actual_PIrp_4: int) returns (Tmp_632: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_632 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_7: int, actual_PIrp_4: int) returns (Tmp_632: int)
{
  var {:pointer} SD3: int;
  var {:pointer} SD2: int;
  var {:scalar} charTime: int;
  var {:pointer} pDevExt_8: int;
  var {:scalar} sdv_2: int;
  var {:pointer} pIrpStack_4: int;
  var {:scalar} sdv_3: int;
  var {:pointer} Tmp_634: int;
  var {:pointer} PDevObj_7: int;
  var {:pointer} PIrp_4: int;
  var vslice_dummy_var_337: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_784: int;
  var vslice_dummy_var_785: int;
  var vslice_dummy_var_786: int;

  anon0:
    call {:si_unique_call 1267} charTime := __HAVOC_malloc(20);
    call {:si_unique_call 1268} sdv_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1269} sdv_3 := __HAVOC_malloc(20);
    PDevObj_7 := actual_PDevObj_7;
    PIrp_4 := actual_PIrp_4;
    call {:si_unique_call 1270} Tmp_634 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_7 != 0;
    assume PDevObj_7 > 0;
    havoc pDevExt_8;
    call {:si_unique_call 1271} pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(PIrp_4);
    call {:si_unique_call 1272} sdv_do_paged_code_check();
    Tmp_634 := strConst__li2bpl225;
    call {:si_unique_call 1273} vslice_dummy_var_338 := SerialDbgPrintEx(6, Tmp_634);
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1274} vslice_dummy_var_337 := SerialSendWaitWake(pDevExt_8);
    goto L20;

  L20:
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc vslice_dummy_var_784;
    havoc vslice_dummy_var_785;
    call {:si_unique_call 1275} SD2 := PoSetPowerState(0, vslice_dummy_var_784, vslice_dummy_var_785);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 1276} SetDeviceIsOpened(pDevExt_8, 0, 1);
    call {:si_unique_call 1277} SD3 := SerialGetCharTime(pDevExt_8);
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    Mem_T.INT4[LowPart__LUID(sdv_3)] := Mem_T.INT4[LowPart__LUID(SD3)];
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(sdv_3))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SD3))];
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} charTime != 0;
    assume charTime > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    call {:si_unique_call 1278} SerialDisableUART(pDevExt_8);
    call {:si_unique_call 1279} SerialDrainUART(pDevExt_8, charTime);
    call {:si_unique_call 1280} SerialSaveDeviceState(pDevExt_8);
    goto L47;

  L47:
    assume {:nonnull} PIrp_4 != 0;
    assume PIrp_4 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_4))] := 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} PIrp_4 != 0;
    assume PIrp_4 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_4))] := 0;
    call {:si_unique_call 1281} PoStartNextPowerIrp(0);
    call {:si_unique_call 1282} sdv_IoSkipCurrentIrpStackLocation(PIrp_4);
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    havoc vslice_dummy_var_786;
    call {:si_unique_call 1283} Tmp_632 := SerialPoCallDriver(pDevExt_8, vslice_dummy_var_786, PIrp_4);
    return;

  anon6_Then:
    call {:si_unique_call 1284} SetDeviceIsOpened(pDevExt_8, 0, 0);
    goto L47;

  anon5_Then:
    goto L20;
}



procedure {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_6: int)
{
  var {:pointer} pDevState_1: int;
  var {:scalar} S: int;
  var {:dopa} {:scalar} divisor: int;
  var {:pointer} Tmp_643: int;
  var {:pointer} Tmp_647: int;
  var {:pointer} Tmp_651: int;
  var {:pointer} Tmp_657: int;
  var {:pointer} PDevExt_6: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_342: int;
  var vslice_dummy_var_343: int;
  var vslice_dummy_var_344: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_346: int;
  var vslice_dummy_var_347: int;
  var vslice_dummy_var_348: int;
  var vslice_dummy_var_349: int;
  var vslice_dummy_var_787: int;
  var vslice_dummy_var_788: int;

  anon0:
    call {:si_unique_call 1285} S := __HAVOC_malloc(8);
    call {:si_unique_call 1286} divisor := __HAVOC_malloc(4);
    call {:si_unique_call 1287} vslice_dummy_var_339 := __HAVOC_malloc(4);
    PDevExt_6 := actual_PDevExt_6;
    call {:si_unique_call 1288} Tmp_647 := __HAVOC_malloc(52);
    call {:si_unique_call 1289} Tmp_651 := __HAVOC_malloc(128);
    call {:si_unique_call 1290} Tmp_657 := __HAVOC_malloc(72);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    pDevState_1 := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_6);
    call {:si_unique_call 1291} sdv_do_paged_code_check();
    Tmp_651 := strConst__li2bpl226;
    call {:si_unique_call 1292} vslice_dummy_var_342 := SerialDbgPrintEx(11, Tmp_651);
    Tmp_647 := strConst__li2bpl227;
    call {:si_unique_call 1293} vslice_dummy_var_343 := SerialDbgPrintEx(11, Tmp_647);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    havoc vslice_dummy_var_787;
    havoc vslice_dummy_var_788;
    call {:si_unique_call 1294} vslice_dummy_var_340 := SerialGetDivisorFromBaud(vslice_dummy_var_787, vslice_dummy_var_788, divisor);
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} divisor != 0;
    assume divisor > 0;
    call {:si_unique_call 1295} vslice_dummy_var_344 := SerialSetBaud(S);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 1296} vslice_dummy_var_345 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L48;

  L48:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L49;

  L49:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 1297} vslice_dummy_var_346 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 1298} vslice_dummy_var_347 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 1299} vslice_dummy_var_348 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_657 := strConst__li2bpl228;
    call {:si_unique_call 1300} vslice_dummy_var_349 := SerialDbgPrintEx(12, Tmp_657);
    call {:si_unique_call 1301} SetDeviceIsOpened(PDevExt_6, 1, 0);
    assume {:nonnull} pDevState_1 != 0;
    assume pDevState_1 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon13_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1302} vslice_dummy_var_341 := corral_nondet();
    goto L49;

  anon14_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    havoc Tmp_643;
    assume {:nonnull} Tmp_643 != 0;
    assume Tmp_643 > 0;
    goto L49;

  anon12_Then:
    goto L49;

  anon11_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L48;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_350: int;

  anon0:
    call {:si_unique_call 1303} vslice_dummy_var_350 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_5: int, actual_Irp_5: int) returns (Tmp_661: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_661 == 259 || Tmp_661 == 0 || Tmp_661 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_5: int, actual_Irp_5: int) returns (Tmp_661: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt_9: int;
  var {:scalar} status_22: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_789: int;
  var vslice_dummy_var_790: int;

  anon0:
    call {:si_unique_call 1304} disposition := __HAVOC_malloc(4);
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_5 := actual_Irp_5;
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc pDevExt_9;
    call {:si_unique_call 1305} sdv_do_paged_code_check();
    call {:si_unique_call 1306} status_22 := WmiSystemControl(0, 0, Irp_5, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L22;

  L22:
    call {:si_unique_call 1307} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_789;
    call {:si_unique_call 1308} status_22 := sdv_IoCallDriver(vslice_dummy_var_789, Irp_5);
    goto L30;

  L30:
    Tmp_661 := status_22;
    return;

  anon10_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 1309} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    havoc vslice_dummy_var_790;
    call {:si_unique_call 1310} status_22 := sdv_IoCallDriver(vslice_dummy_var_790, Irp_5);
    goto L30;

  anon11_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L22;

  anon12_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    call {:si_unique_call 1311} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon9_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L30;
}



procedure {:origName "SerialSetBaud"} SerialSetBaud(actual_Context: int) returns (Tmp_663: int);
  free ensures {:va_keep} Tmp_663 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetBaud"} SerialSetBaud(actual_Context: int) returns (Tmp_663: int)
{
  var {:scalar} Appropriate: int;
  var {:pointer} Extension_6: int;
  var {:pointer} Tmp_671: int;
  var {:scalar} LineControl: int;
  var {:pointer} Tmp_673: int;
  var {:pointer} Address: int;
  var {:scalar} Divisor: int;
  var {:pointer} Context: int;
  var vslice_dummy_var_351: int;

  anon0:
    Context := actual_Context;
    Tmp_671 := Context;
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    havoc Extension_6;
    Tmp_673 := Context;
    assume {:nonnull} Tmp_673 != 0;
    assume Tmp_673 > 0;
    havoc Appropriate;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    havoc Address;
    Divisor := Appropriate;
    call {:si_unique_call 1312} LineControl := corral_nondet();
    call {:si_unique_call 1313} vslice_dummy_var_351 := corral_nondet();
    Tmp_663 := 0;
    return;
}



procedure {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_676: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_676: int)
{
  var {:pointer} Tmp_677: int;
  var {:pointer} Tmp_678: int;
  var {:dopa} {:scalar} AppropriateDivisor: int;
  var {:pointer} Tmp_679: int;
  var {:pointer} Tmp_680: int;
  var {:pointer} NewChars: int;
  var {:scalar} Tmp_681: int;
  var {:scalar} Tmp_682: int;
  var {:pointer} NewTimeouts: int;
  var {:scalar} Tmp_683: int;
  var {:scalar} Tmp_684: int;
  var {:pointer} Tmp_685: int;
  var {:pointer} Tmp_686: int;
  var {:pointer} Tmp_687: int;
  var {:scalar} Mask: int;
  var {:pointer} escapeChar: int;
  var {:scalar} S_1: int;
  var {:pointer} Lc: int;
  var {:scalar} prologueStatus: int;
  var {:scalar} Status_3: int;
  var {:pointer} Tmp_688: int;
  var {:scalar} Tmp_689: int;
  var {:scalar} sdv_498: int;
  var {:scalar} S_2: int;
  var {:pointer} Br: int;
  var {:pointer} Rs: int;
  var {:pointer} Tmp_690: int;
  var {:pointer} Tmp_691: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} Tmp_693: int;
  var {:pointer} HandFlow: int;
  var {:scalar} OldIrql_2: int;
  var {:pointer} Tmp_694: int;
  var {:scalar} LData: int;
  var {:scalar} S_3: int;
  var {:pointer} Extension_7: int;
  var {:scalar} Tmp_695: int;
  var {:scalar} LParity: int;
  var {:scalar} sdv_511: int;
  var {:pointer} Tmp_697: int;
  var {:scalar} S_4: int;
  var {:scalar} Mask_1: int;
  var {:scalar} ModemControl: int;
  var {:pointer} Tmp_698: int;
  var {:pointer} Tmp_699: int;
  var {:pointer} Tmp_700: int;
  var {:scalar} NewMask: int;
  var {:scalar} Tmp_701: int;
  var {:pointer} Xc: int;
  var {:pointer} Tmp_702: int;
  var {:scalar} Tmp_703: int;
  var {:scalar} LStop: int;
  var {:scalar} S_5: int;
  var {:scalar} S_6: int;
  var {:scalar} BaudRate: int;
  var {:scalar} Tmp_704: int;
  var {:pointer} Tmp_705: int;
  var {:scalar} S_7: int;
  var {:scalar} Tmp_706: int;
  var {:scalar} Tmp_707: int;
  var {:scalar} Tmp_708: int;
  var {:scalar} Tmp_709: int;
  var {:pointer} Tmp_710: int;
  var {:scalar} Tmp_711: int;
  var {:pointer} Tmp_712: int;
  var {:pointer} Lc_1: int;
  var {:scalar} S_8: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_791: int;
  var vslice_dummy_var_792: int;
  var vslice_dummy_var_793: int;
  var vslice_dummy_var_794: int;
  var vslice_dummy_var_795: int;
  var vslice_dummy_var_796: int;
  var vslice_dummy_var_797: int;
  var vslice_dummy_var_798: int;
  var vslice_dummy_var_799: int;
  var vslice_dummy_var_800: int;
  var vslice_dummy_var_801: int;
  var vslice_dummy_var_802: int;
  var vslice_dummy_var_803: int;

  anon0:
    call {:si_unique_call 1314} AppropriateDivisor := __HAVOC_malloc(4);
    call {:si_unique_call 1315} S_1 := __HAVOC_malloc(8);
    call {:si_unique_call 1316} S_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1317} S_3 := __HAVOC_malloc(8);
    call {:si_unique_call 1318} S_4 := __HAVOC_malloc(8);
    call {:si_unique_call 1319} S_5 := __HAVOC_malloc(8);
    call {:si_unique_call 1320} S_6 := __HAVOC_malloc(8);
    call {:si_unique_call 1321} S_7 := __HAVOC_malloc(8);
    call {:si_unique_call 1322} S_8 := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 1323} Tmp_677 := __HAVOC_malloc(72);
    call {:si_unique_call 1324} Tmp_679 := __HAVOC_malloc(72);
    call {:si_unique_call 1325} Tmp_680 := __HAVOC_malloc(128);
    call {:si_unique_call 1326} Tmp_687 := __HAVOC_malloc(140);
    call {:si_unique_call 1327} Tmp_691 := __HAVOC_malloc(148);
    call {:si_unique_call 1328} Tmp_694 := __HAVOC_malloc(124);
    call {:si_unique_call 1329} Tmp_697 := __HAVOC_malloc(68);
    call {:si_unique_call 1330} Tmp_699 := __HAVOC_malloc(96);
    call {:si_unique_call 1331} Tmp_705 := __HAVOC_malloc(136);
    call {:si_unique_call 1332} Tmp_710 := __HAVOC_malloc(148);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc Extension_7;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon405_Then, anon405_Else;

  anon405_Else:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := -1073741808;
    call {:si_unique_call 1333} sdv_IoCompleteRequest(0, 0);
    Tmp_676 := -1073741808;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon405_Then:
    call {:si_unique_call 1334} prologueStatus := SerialIRPPrologue(Irp_6, Extension_7);
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} prologueStatus != 0;
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} prologueStatus != 259;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := prologueStatus;
    Tmp_677 := strConst__li2bpl1;
    call {:si_unique_call 1335} vslice_dummy_var_366 := SerialDbgPrintEx(9, Tmp_677);
    call {:si_unique_call 1336} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1337} SerialIRPEpilogue(Extension_7);
    goto L24;

  L24:
    Tmp_676 := prologueStatus;
    goto L1;

  anon290_Then:
    assume {:partition} prologueStatus == 259;
    goto L24;

  anon289_Then:
    assume {:partition} prologueStatus == 0;
    Tmp_699 := strConst__li2bpl0;
    call {:si_unique_call 1338} vslice_dummy_var_367 := SerialDbgPrintEx(9, Tmp_699);
    call {:si_unique_call 1339} sdv_511 := SerialCompleteIfError(DeviceObject_6, Irp_6);
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} sdv_511 != 0;
    Tmp_676 := -1073741536;
    goto L1;

  anon291_Then:
    assume {:partition} sdv_511 == 0;
    call {:si_unique_call 1340} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Status_3 := 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon406_Then, anon406_Else;

  anon406_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon395_Then, anon395_Else;

  anon395_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon394_Then, anon394_Else;

  anon394_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon393_Then, anon393_Else;

  anon393_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon392_Then, anon392_Else;

  anon392_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon391_Then, anon391_Else;

  anon391_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon390_Then, anon390_Else;

  anon390_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon389_Then, anon389_Else;

  anon389_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon388_Then, anon388_Else;

  anon388_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon387_Then, anon387_Else;

  anon387_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon386_Then, anon386_Else;

  anon386_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon385_Then, anon385_Else;

  anon385_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon384_Then, anon384_Else;

  anon384_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon382_Then, anon382_Else;

  anon382_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon378_Then, anon378_Else;

  anon378_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon377_Then, anon377_Else;

  anon377_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon375_Then, anon375_Else;

  anon375_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon372_Then, anon372_Else;

  anon372_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon371_Then, anon371_Else;

  anon371_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon369_Then, anon369_Else;

  anon369_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon366_Then, anon366_Else;

  anon366_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon365_Then, anon365_Else;

  anon365_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon364_Then, anon364_Else;

  anon364_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon361_Then, anon361_Else;

  anon361_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    Status_3 := -1073741789;
    goto L95;

  L95:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := Status_3;
    Tmp_679 := strConst__li2bpl1;
    call {:si_unique_call 1341} vslice_dummy_var_368 := SerialDbgPrintEx(9, Tmp_679);
    call {:si_unique_call 1342} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1343} SerialIRPEpilogue(Extension_7);
    Tmp_676 := Status_3;
    goto L1;

  anon304_Then:
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon432_Then, anon432_Else;

  anon432_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_791;
    call {:si_unique_call 1344} Status_3 := SerialGotoPowerState(vslice_dummy_var_791, Extension_7, 1);
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:partition} Status_3 >= 0;
    goto L108;

  L108:
    call {:si_unique_call 1345} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1346} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1347} vslice_dummy_var_355 := KeSynchronizeExecution(0, li2bplFunctionConstant418, 0);
    call {:si_unique_call 1348} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon305_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon432_Then:
    goto L108;

  anon360_Then:
    Status_3 := -1073741811;
    goto L95;

  anon361_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    Status_3 := -1073741789;
    goto L95;

  anon306_Then:
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon431_Then, anon431_Else;

  anon431_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_792;
    call {:si_unique_call 1349} Status_3 := SerialGotoPowerState(vslice_dummy_var_792, Extension_7, 1);
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:partition} Status_3 >= 0;
    goto L130;

  L130:
    call {:si_unique_call 1350} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1351} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1352} vslice_dummy_var_356 := KeSynchronizeExecution(0, li2bplFunctionConstant416, 0);
    call {:si_unique_call 1353} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon307_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon431_Then:
    goto L130;

  anon362_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    Status_3 := -1073741789;
    goto L95;

  anon308_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    call {:si_unique_call 1354} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1355} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1356} vslice_dummy_var_357 := KeSynchronizeExecution(0, li2bplFunctionConstant417, 0);
    call {:si_unique_call 1357} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon363_Then:
    call {:si_unique_call 1358} vslice_dummy_var_354 := KeSynchronizeExecution(0, li2bplFunctionConstant411, 0);
    goto L95;

  anon364_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    Status_3 := -1073741789;
    goto L95;

  anon303_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    call {:si_unique_call 1359} vslice_dummy_var_379 := KeSynchronizeExecution(0, li2bplFunctionConstant410, 0);
    goto L95;

  anon365_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    Status_3 := -1073741789;
    goto L95;

  anon302_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_692;
    assume {:nonnull} Tmp_692 != 0;
    assume Tmp_692 > 0;
    Mem_T.INT4[Tmp_692] := 0;
    goto L95;

  anon366_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc escapeChar;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon430_Then, anon430_Else;

  anon430_Else:
    Status_3 := -1073741789;
    goto L95;

  anon430_Then:
    call {:si_unique_call 1360} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1361} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:partition} Mem_T.INT4[escapeChar] != 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    goto L190;

  L190:
    Status_3 := -1073741811;
    call {:si_unique_call 1362} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon310_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    goto L190;

  anon312_Then:
    goto L185;

  L185:
    call {:si_unique_call 1363} vslice_dummy_var_358 := KeSynchronizeExecution(0, li2bplFunctionConstant420, 0);
    call {:si_unique_call 1364} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon311_Then:
    goto L190;

  anon309_Then:
    assume {:partition} Mem_T.INT4[escapeChar] == 0;
    goto L185;

  anon367_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon313_Then, anon313_Else;

  anon313_Else:
    Status_3 := -1073741789;
    goto L95;

  anon313_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1365} sdv_498 := corral_nondet();
    ModemControl := sdv_498;
    ModemControl := BAND(ModemControl, BOR(1, 2));
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_686;
    assume {:nonnull} Tmp_686 != 0;
    assume Tmp_686 > 0;
    Mem_T.INT4[Tmp_686] := ModemControl;
    goto L95;

  anon368_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    Status_3 := -1073741789;
    goto L95;

  anon301_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Tmp_685 := AssociatedIrp__IRP(Irp_6);
    assume {:nonnull} Tmp_685 != 0;
    assume Tmp_685 > 0;
    havoc vslice_dummy_var_793;
    call {:si_unique_call 1366} SerialGetProperties(Extension_7, vslice_dummy_var_793);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    goto L95;

  anon369_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Xc;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon429_Then, anon429_Else;

  anon429_Else:
    Status_3 := -1073741789;
    goto L95;

  anon429_Then:
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    Status_3 := -1073741811;
    goto L95;

  anon314_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1367} Tmp_676 := SerialStartOrQueue(Extension_7, Irp_6, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant212);
    goto L1;

  anon370_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    Status_3 := -1073741789;
    goto L95;

  anon315_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    call {:si_unique_call 1368} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1369} IoAcquireCancelSpinLock(Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1370} vslice_dummy_var_359 := KeSynchronizeExecution(0, li2bplFunctionConstant419, 0);
    call {:si_unique_call 1371} IoReleaseCancelSpinLock(OldIrql_2);
    goto L95;

  anon371_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon316_Then, anon316_Else;

  anon316_Else:
    Status_3 := -1073741789;
    goto L95;

  anon316_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    call {:si_unique_call 1372} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1373} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    call {:si_unique_call 1374} vslice_dummy_var_360 := KeSynchronizeExecution(0, li2bplFunctionConstant415, 0);
    call {:si_unique_call 1375} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon372_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc HandFlow;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon427_Then, anon427_Else;

  anon427_Else:
    Status_3 := -1073741789;
    goto L95;

  anon427_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    Status_3 := -1073741811;
    goto L95;

  anon317_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    Status_3 := -1073741811;
    goto L95;

  anon318_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    havoc Tmp_682;
    goto anon428_Then, anon428_Else;

  anon428_Else:
    assume {:partition} Tmp_682 == 3;
    Status_3 := -1073741811;
    goto L95;

  anon428_Then:
    assume {:partition} Tmp_682 != 3;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    goto L282;

  L282:
    Status_3 := -1073741811;
    goto L95;

  anon319_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon320_Then, anon320_Else;

  anon320_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    goto L286;

  L286:
    Status_3 := -1073741811;
    goto L95;

  anon321_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    call {:si_unique_call 1376} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1377} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    Status_3 := -1073741811;
    call {:si_unique_call 1378} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon324_Then:
    goto L294;

  L294:
    call {:si_unique_call 1379} vslice_dummy_var_361 := KeSynchronizeExecution(0, li2bplFunctionConstant423, 0);
    call {:si_unique_call 1380} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon323_Then:
    goto L294;

  anon322_Then:
    goto L286;

  anon320_Then:
    goto L282;

  anon373_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    Status_3 := -1073741789;
    goto L95;

  anon300_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 1381} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1382} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_698;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_698 != 0;
    assume Tmp_698 > 0;
    call {:si_unique_call 1383} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon374_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc NewChars;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon426_Then, anon426_Else;

  anon426_Else:
    Status_3 := -1073741789;
    goto L95;

  anon426_Then:
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    call {:si_unique_call 1384} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1385} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    goto L332;

  L332:
    Status_3 := -1073741811;
    call {:si_unique_call 1386} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon326_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    goto L332;

  anon327_Then:
    goto L329;

  L329:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    call {:si_unique_call 1387} vslice_dummy_var_378 := KeSynchronizeExecution(0, li2bplFunctionConstant412, 0);
    call {:si_unique_call 1388} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon325_Then:
    goto L329;

  anon375_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    Status_3 := -1073741789;
    goto L95;

  anon299_Then:
    call {:si_unique_call 1389} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1390} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_700;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 1391} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon376_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Lc_1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon418_Then, anon418_Else;

  anon418_Else:
    Status_3 := -1073741789;
    goto L95;

  anon418_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc vslice_dummy_var_794;
    call {:si_unique_call 1392} sdv_RtlZeroMemory(0, vslice_dummy_var_794);
    call {:si_unique_call 1393} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1394} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_689;
    goto anon419_Then, anon419_Else;

  anon419_Else:
    assume {:partition} Tmp_689 == 1;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  L372:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon329_Then, anon329_Else;

  anon329_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_695;
    goto anon420_Then, anon420_Else;

  anon420_Else:
    assume {:partition} Tmp_695 == 8;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  L378:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  L383:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 1395} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon331_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon330_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon420_Then:
    assume {:partition} Tmp_695 != 8;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_681;
    goto anon421_Then, anon421_Else;

  anon421_Else:
    assume {:partition} Tmp_681 == 24;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon421_Then:
    assume {:partition} Tmp_681 != 24;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_709;
    goto anon422_Then, anon422_Else;

  anon422_Else:
    assume {:partition} Tmp_709 == 40;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon422_Then:
    assume {:partition} Tmp_709 != 40;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_704;
    goto anon423_Then, anon423_Else;

  anon423_Else:
    assume {:partition} Tmp_704 == 56;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon423_Then:
    assume {:partition} Tmp_704 != 56;
    goto L378;

  anon329_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon419_Then:
    assume {:partition} Tmp_689 != 1;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_684;
    goto anon424_Then, anon424_Else;

  anon424_Else:
    assume {:partition} Tmp_684 == 2;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon424_Then:
    assume {:partition} Tmp_684 != 2;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_711;
    goto anon425_Then, anon425_Else;

  anon425_Else:
    assume {:partition} Tmp_711 == 3;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon425_Then:
    assume {:partition} Tmp_711 != 3;
    goto L372;

  anon328_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon377_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Br;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon417_Then, anon417_Else;

  anon417_Else:
    Status_3 := -1073741789;
    goto L95;

  anon417_Then:
    call {:si_unique_call 1396} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1397} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Br != 0;
    assume Br > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1398} sdv_KeReleaseSpinLock(0, OldIrql_2);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto L95;

  anon378_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    Status_3 := -1073741789;
    goto L95;

  anon332_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_702;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    Mask := Mem_T.INT4[Tmp_702];
    goto anon416_Then, anon416_Else;

  anon416_Else:
    assume {:partition} Mask != 0;
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} BAND(Mask, -16) == 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1399} Tmp_676 := SerialStartOrQueue(Extension_7, Irp_6, PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant424);
    goto L1;

  anon333_Then:
    assume {:partition} BAND(Mask, -16) != 0;
    goto L419;

  L419:
    Status_3 := -1073741811;
    goto L95;

  anon416_Then:
    assume {:partition} Mask == 0;
    goto L419;

  anon379_Then:
    Tmp_687 := strConst__li2bpl229;
    call {:si_unique_call 1400} vslice_dummy_var_375 := SerialDbgPrintEx(9, Tmp_687);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    Tmp_680 := strConst__li2bpl231;
    call {:si_unique_call 1401} vslice_dummy_var_376 := SerialDbgPrintEx(6, Tmp_680);
    Status_3 := -1073741789;
    goto L95;

  anon334_Then:
    Tmp_710 := strConst__li2bpl230;
    call {:si_unique_call 1402} vslice_dummy_var_377 := SerialDbgPrintEx(9, Tmp_710);
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1403} Tmp_676 := SerialStartOrQueue(Extension_7, Irp_6, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant195);
    goto L1;

  anon380_Then:
    Tmp_705 := strConst__li2bpl232;
    call {:si_unique_call 1404} vslice_dummy_var_371 := SerialDbgPrintEx(9, Tmp_705);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    Tmp_694 := strConst__li2bpl233;
    call {:si_unique_call 1405} vslice_dummy_var_372 := SerialDbgPrintEx(6, Tmp_694);
    Status_3 := -1073741789;
    goto L95;

  anon335_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_693;
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    NewMask := Mem_T.INT4[Tmp_693];
    goto anon415_Then, anon415_Else;

  anon415_Else:
    assume {:partition} BAND(NewMask, -8192) != 0;
    Tmp_697 := strConst__li2bpl235;
    call {:si_unique_call 1406} vslice_dummy_var_373 := SerialDbgPrintEx(6, Tmp_697);
    Status_3 := -1073741811;
    goto L95;

  anon415_Then:
    assume {:partition} BAND(NewMask, -8192) == 0;
    Tmp_691 := strConst__li2bpl234;
    call {:si_unique_call 1407} vslice_dummy_var_374 := SerialDbgPrintEx(9, Tmp_691);
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1408} Tmp_676 := SerialStartOrQueue(Extension_7, Irp_6, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant195);
    goto L1;

  anon381_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    Status_3 := -1073741789;
    goto L95;

  anon298_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_678;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_678 != 0;
    assume Tmp_678 > 0;
    havoc vslice_dummy_var_795;
    Mem_T.INT4[Tmp_678] := vslice_dummy_var_795;
    goto L95;

  anon382_Then:
    call {:si_unique_call 1409} vslice_dummy_var_353 := KeSynchronizeExecution(0, li2bplFunctionConstant422, 0);
    goto L95;

  anon383_Then:
    call {:si_unique_call 1410} vslice_dummy_var_352 := KeSynchronizeExecution(0, li2bplFunctionConstant421, 0);
    goto L95;

  anon384_Then:
    goto L58;

  L58:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_796;
    call {:si_unique_call 1411} Status_3 := SerialGotoPowerState(vslice_dummy_var_796, Extension_7, 1);
    goto anon336_Then, anon336_Else;

  anon336_Else:
    assume {:partition} Status_3 >= 0;
    goto L469;

  L469:
    call {:si_unique_call 1412} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1413} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_701;
    goto anon413_Then, anon413_Else;

  anon413_Else:
    assume {:partition} Tmp_701 == 128;
    goto L481;

  L481:
    Status_3 := -1073741811;
    goto L482;

  L482:
    call {:si_unique_call 1414} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon413_Then:
    assume {:partition} Tmp_701 != 128;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_707;
    goto anon414_Then, anon414_Else;

  anon414_Else:
    assume {:partition} Tmp_707 != 192;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon337_Then, anon337_Else;

  anon337_Else:
    Tmp_706 := li2bplFunctionConstant425;
    goto L490;

  L490:
    call {:si_unique_call 1415} vslice_dummy_var_362 := KeSynchronizeExecution(0, Tmp_706, 0);
    goto L482;

  anon337_Then:
    Tmp_706 := li2bplFunctionConstant250;
    goto L490;

  anon414_Then:
    assume {:partition} Tmp_707 == 192;
    goto L481;

  anon336_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon297_Then:
    goto L469;

  anon385_Then:
    goto L58;

  anon386_Then:
    goto L95;

  anon387_Then:
    goto L56;

  L56:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_797;
    call {:si_unique_call 1416} Status_3 := SerialGotoPowerState(vslice_dummy_var_797, Extension_7, 1);
    goto anon338_Then, anon338_Else;

  anon338_Else:
    assume {:partition} Status_3 >= 0;
    goto L493;

  L493:
    call {:si_unique_call 1417} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1418} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_703;
    goto anon412_Then, anon412_Else;

  anon412_Else:
    assume {:partition} Tmp_703 == 2;
    Status_3 := -1073741811;
    goto L506;

  L506:
    call {:si_unique_call 1419} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon412_Then:
    assume {:partition} Tmp_703 != 2;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon339_Then, anon339_Else;

  anon339_Else:
    Tmp_683 := li2bplFunctionConstant426;
    goto L512;

  L512:
    call {:si_unique_call 1420} vslice_dummy_var_363 := KeSynchronizeExecution(0, Tmp_683, 0);
    goto L506;

  anon339_Then:
    Tmp_683 := li2bplFunctionConstant251;
    goto L512;

  anon338_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon296_Then:
    goto L493;

  anon388_Then:
    goto L56;

  anon389_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    Status_3 := -1073741789;
    goto L95;

  anon295_Then:
    call {:si_unique_call 1421} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1422} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_688;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_688 != 0;
    assume Tmp_688 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_688 != 0;
    assume Tmp_688 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_688 != 0;
    assume Tmp_688 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_688 != 0;
    assume Tmp_688 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_688 != 0;
    assume Tmp_688 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 1423} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon390_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc NewTimeouts;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon411_Then, anon411_Else;

  anon411_Else:
    Status_3 := -1073741789;
    goto L95;

  anon411_Then:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    Status_3 := -1073741811;
    goto L95;

  anon342_Then:
    goto L531;

  L531:
    call {:si_unique_call 1424} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1425} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    call {:si_unique_call 1426} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon341_Then:
    goto L531;

  anon340_Then:
    goto L531;

  anon391_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    Status_3 := -1073741789;
    goto L95;

  anon294_Then:
    call {:si_unique_call 1427} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1428} IoAcquireCancelSpinLock(Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    Status_3 := -1073741811;
    call {:si_unique_call 1429} IoReleaseCancelSpinLock(OldIrql_2);
    goto L95;

  anon343_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    call {:si_unique_call 1430} IoReleaseCancelSpinLock(OldIrql_2);
    Status_3 := -1073741536;
    goto L95;

  anon344_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1431} IoReleaseCancelSpinLock(OldIrql_2);
    call {:si_unique_call 1432} SerialStartImmediate(Extension_7);
    Tmp_676 := 259;
    goto L1;

  anon392_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_798;
    call {:si_unique_call 1433} Status_3 := SerialGotoPowerState(vslice_dummy_var_798, Extension_7, 1);
    goto anon345_Then, anon345_Else;

  anon345_Else:
    assume {:partition} Status_3 >= 0;
    goto L572;

  L572:
    call {:si_unique_call 1434} vslice_dummy_var_364 := KeSynchronizeExecution(0, li2bplFunctionConstant427, 0);
    goto L95;

  anon345_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon293_Then:
    goto L572;

  anon393_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_799;
    call {:si_unique_call 1435} Status_3 := SerialGotoPowerState(vslice_dummy_var_799, Extension_7, 1);
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:partition} Status_3 >= 0;
    goto L582;

  L582:
    call {:si_unique_call 1436} vslice_dummy_var_365 := KeSynchronizeExecution(0, li2bplFunctionConstant428, 0);
    goto L95;

  anon346_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon292_Then:
    goto L582;

  anon394_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Lc;
    Mask_1 := 255;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon409_Then, anon409_Else;

  anon409_Else:
    Status_3 := -1073741789;
    goto L95;

  anon409_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon347_Then, anon347_Else;

  anon347_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_800;
    call {:si_unique_call 1437} Status_3 := SerialGotoPowerState(vslice_dummy_var_800, Extension_7, 1);
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:partition} Status_3 >= 0;
    goto L602;

  L602:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon398_Then, anon398_Else;

  anon398_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon397_Then, anon397_Else;

  anon397_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon396_Then, anon396_Else;

  anon396_Else:
    LData := 3;
    goto L615;

  L615:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon410_Then, anon410_Else;

  anon410_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon402_Then, anon402_Else;

  anon402_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon401_Then, anon401_Else;

  anon401_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon400_Then, anon400_Else;

  anon400_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon399_Then, anon399_Else;

  anon399_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 56;
    goto L625;

  L625:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon404_Then, anon404_Else;

  anon404_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon403_Then, anon403_Else;

  anon403_Else:
    goto anon352_Then, anon352_Else;

  anon352_Else:
    assume {:partition} LData != 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 4;
    goto L634;

  L634:
    call {:si_unique_call 1438} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1439} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_708;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1440} vslice_dummy_var_370 := KeSynchronizeExecution(0, li2bplFunctionConstant414, 0);
    call {:si_unique_call 1441} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon352_Then:
    assume {:partition} LData == 0;
    Status_3 := -1073741811;
    goto L95;

  anon403_Then:
    Status_3 := -1073741811;
    goto L95;

  anon404_Then:
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:partition} LData != 0;
    Status_3 := -1073741811;
    goto L95;

  anon351_Then:
    assume {:partition} LData == 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 4;
    goto L634;

  anon350_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 0;
    goto L634;

  anon399_Then:
    Status_3 := -1073741811;
    goto L95;

  anon400_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 40;
    goto L625;

  anon401_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 24;
    goto L625;

  anon402_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 8;
    goto L625;

  anon410_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 0;
    goto L625;

  anon396_Then:
    Status_3 := -1073741811;
    goto L95;

  anon397_Then:
    LData := 2;
    Mask_1 := 127;
    goto L615;

  anon398_Then:
    LData := 1;
    Mask_1 := 63;
    goto L615;

  anon348_Then:
    LData := 0;
    Mask_1 := 31;
    goto L615;

  anon349_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon347_Then:
    goto L602;

  anon395_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Rs;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon407_Then, anon407_Else;

  anon407_Else:
    Status_3 := -1073741789;
    goto L95;

  anon407_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    Status_3 := 0;
    goto L95;

  anon353_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    havoc vslice_dummy_var_801;
    call {:si_unique_call 1442} boogieTmp := sdv_ExAllocatePoolWithQuotaTag(0, vslice_dummy_var_801, -666022077);
    goto anon408_Then, anon408_Else;

  anon408_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1443} Tmp_676 := SerialStartOrQueue(Extension_7, Irp_6, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant136);
    goto L1;

  anon354_Then:
    goto L95;

  anon408_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon406_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    Status_3 := -1073741789;
    goto L95;

  anon355_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_690;
    assume {:nonnull} Tmp_690 != 0;
    assume Tmp_690 > 0;
    havoc BaudRate;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_802;
    call {:si_unique_call 1444} Status_3 := SerialGetDivisorFromBaud(vslice_dummy_var_802, BaudRate, AppropriateDivisor);
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:partition} Status_3 >= 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_803;
    call {:si_unique_call 1445} Status_3 := SerialGotoPowerState(vslice_dummy_var_803, Extension_7, 1);
    goto anon358_Then, anon358_Else;

  anon358_Else:
    assume {:partition} Status_3 >= 0;
    goto L705;

  L705:
    call {:si_unique_call 1446} Tmp_712 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    Mem_T.INT4[Tmp_712] := OldIrql_2;
    call {:si_unique_call 1447} sdv_KeAcquireSpinLock(0, Tmp_712);
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_712];
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} Status_3 >= 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    assume {:nonnull} AppropriateDivisor != 0;
    assume AppropriateDivisor > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    call {:si_unique_call 1448} vslice_dummy_var_369 := KeSynchronizeExecution(0, li2bplFunctionConstant413, 0);
    goto L716;

  L716:
    call {:si_unique_call 1449} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon359_Then:
    assume {:partition} 0 > Status_3;
    goto L716;

  anon358_Then:
    assume {:partition} 0 > Status_3;
    goto L95;

  anon357_Then:
    goto L705;

  anon356_Then:
    assume {:partition} 0 > Status_3;
    goto L705;
}



procedure {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_713: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_713 == 0 || Tmp_713 == -1073741536 || Tmp_713 == 259 || Tmp_713 == -1073741738 || Tmp_713 == -1073741811 || Tmp_713 == -1073741789 || Tmp_713 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_713: int)
{
  var {:scalar} basic: int;
  var {:pointer} pBasic: int;
  var {:pointer} Tmp_716: int;
  var {:pointer} pDevExt_10: int;
  var {:scalar} prologueStatus_1: int;
  var {:scalar} S_9: int;
  var {:pointer} Tmp_719: int;
  var {:scalar} cap_1: int;
  var {:scalar} Tmp_720: int;
  var {:pointer} Tmp_721: int;
  var {:scalar} OldIrql_3: int;
  var {:scalar} Tmp_722: int;
  var {:pointer} Tmp_723: int;
  var {:pointer} pIrpStack_5: int;
  var {:scalar} sdv_535: int;
  var {:pointer} Tmp_725: int;
  var {:scalar} status_23: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} PDevObj_8: int;
  var {:pointer} PIrp_5: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;

  anon0:
    call {:si_unique_call 1450} basic := __HAVOC_malloc(44);
    call {:si_unique_call 1451} S_9 := __HAVOC_malloc(8);
    PDevObj_8 := actual_PDevObj_8;
    PIrp_5 := actual_PIrp_5;
    call {:si_unique_call 1452} Tmp_716 := __HAVOC_malloc(28);
    call {:si_unique_call 1453} Tmp_719 := __HAVOC_malloc(28);
    call {:si_unique_call 1454} Tmp_721 := __HAVOC_malloc(72);
    call {:si_unique_call 1455} Tmp_723 := __HAVOC_malloc(72);
    call {:si_unique_call 1456} Tmp_725 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_8 != 0;
    assume PDevObj_8 > 0;
    havoc pDevExt_10;
    call {:si_unique_call 1457} prologueStatus_1 := SerialIRPPrologue(PIrp_5, pDevExt_10);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} prologueStatus_1 != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} prologueStatus_1 != 259;
    Tmp_723 := strConst__li2bpl1;
    call {:si_unique_call 1458} vslice_dummy_var_381 := SerialDbgPrintEx(9, Tmp_723);
    call {:si_unique_call 1459} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1460} SerialIRPEpilogue(pDevExt_10);
    goto L19;

  L19:
    Tmp_713 := prologueStatus_1;
    goto L1;

  L1:
    return;

  anon34_Then:
    assume {:partition} prologueStatus_1 == 259;
    goto L19;

  anon33_Then:
    assume {:partition} prologueStatus_1 == 0;
    Tmp_725 := strConst__li2bpl0;
    call {:si_unique_call 1461} vslice_dummy_var_382 := SerialDbgPrintEx(9, Tmp_725);
    call {:si_unique_call 1462} sdv_535 := SerialCompleteIfError(PDevObj_8, PIrp_5);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_535 != 0;
    Tmp_713 := -1073741536;
    goto L1;

  anon35_Then:
    assume {:partition} sdv_535 == 0;
    call {:si_unique_call 1463} pIrpStack_5 := sdv_IoGetCurrentIrpStackLocation(PIrp_5);
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    status_23 := 0;
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto L48;

  L48:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    status_23 := -1073741789;
    goto L56;

  L56:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := status_23;
    Tmp_721 := strConst__li2bpl1;
    call {:si_unique_call 1464} vslice_dummy_var_383 := SerialDbgPrintEx(9, Tmp_721);
    call {:si_unique_call 1465} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1466} SerialIRPEpilogue(pDevExt_10);
    Tmp_713 := status_23;
    goto L1;

  anon38_Then:
    call {:si_unique_call 1467} sdv_RtlZeroMemory(0, 44);
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    havoc pBasic;
    call {:si_unique_call 1468} sdv_RtlCopyMemory(0, 0, 20);
    call {:si_unique_call 1469} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    pBasic := basic;
    goto L80;

  L80:
    call {:si_unique_call 1470} Tmp_726 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    Mem_T.INT4[Tmp_726] := OldIrql_3;
    call {:si_unique_call 1471} sdv_KeAcquireSpinLock(0, Tmp_726);
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    OldIrql_3 := Mem_T.INT4[Tmp_726];
    call {:si_unique_call 1472} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    call {:si_unique_call 1473} vslice_dummy_var_384 := KeSynchronizeExecution(0, li2bplFunctionConstant423, 0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1474} vslice_dummy_var_385 := corral_nondet();
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L108;

  L108:
    call {:si_unique_call 1475} sdv_KeReleaseSpinLock(0, OldIrql_3);
    goto L56;

  anon39_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L108;

  anon36_Then:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    status_23 := -1073741789;
    goto L56;

  anon37_Then:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    havoc pBasic;
    goto L80;

  anon42_Then:
    status_23 := -1073741811;
    goto L56;

  anon43_Then:
    goto L48;

  anon44_Then:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 1476} vslice_dummy_var_380 := IoCancelIrp(0);
    goto L121;

  L121:
    status_23 := 0;
    goto L56;

  anon48_Then:
    goto L121;

  anon45_Then:
    cap_1 := 2;
    goto L126;

  L126:
    call {:si_unique_call 1477} Tmp_716, Tmp_719, cap_1, Tmp_720, Tmp_722 := SerialInternalIoControl_loop_L126(Tmp_716, pDevExt_10, Tmp_719, cap_1, Tmp_720, Tmp_722);
    goto L126_last;

  L126_last:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 7 > cap_1;
    Tmp_720 := cap_1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_716;
    assume {:nonnull} Tmp_716 != 0;
    assume Tmp_716 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[Tmp_716 + Tmp_720 * 4] >= 1;
    Tmp_722 := cap_1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    havoc Tmp_719;
    assume {:nonnull} Tmp_719 != 0;
    assume Tmp_719 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L129;

  L129:
    cap_1 := cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    assume false;
    return;

  anon47_Then:
    goto L127;

  L127:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 7 > cap_1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    status_23 := 0;
    goto L56;

  anon41_Then:
    assume {:partition} cap_1 >= 7;
    status_23 := -1073741637;
    goto L56;

  anon46_Then:
    assume {:partition} 1 > Mem_T.INT4[Tmp_716 + Tmp_720 * 4];
    goto L129;

  anon40_Then:
    assume {:partition} cap_1 >= 7;
    goto L127;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_386: int;

  anon0:
    call {:si_unique_call 1478} vslice_dummy_var_386 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_8: int, actual_Properties: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_8: int, actual_Properties: int)
{
  var {:pointer} Extension_8: int;
  var {:pointer} Properties: int;
  var vslice_dummy_var_387: int;

  anon0:
    call {:si_unique_call 1479} vslice_dummy_var_387 := __HAVOC_malloc(4);
    Extension_8 := actual_Extension_8;
    Properties := actual_Properties;
    call {:si_unique_call 1480} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    return;
}



procedure {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteWrite"} SerialCompleteWrite(actual_Dpc: int, actual_DeferredContext: int, actual_SystemContext1: int, actual_SystemContext2: int)
{
  var {:pointer} Tmp_731: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} Extension_9: int;
  var {:pointer} Tmp_733: int;
  var {:pointer} Tmp_734: int;
  var {:pointer} Dpc: int;
  var {:pointer} DeferredContext: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;

  anon0:
    call {:si_unique_call 1481} vslice_dummy_var_388 := __HAVOC_malloc(4);
    Dpc := actual_Dpc;
    DeferredContext := actual_DeferredContext;
    call {:si_unique_call 1482} Tmp_733 := __HAVOC_malloc(104);
    call {:si_unique_call 1483} Tmp_734 := __HAVOC_malloc(88);
    Extension_9 := DeferredContext;
    Tmp_733 := strConst__li2bpl237;
    call {:si_unique_call 1484} vslice_dummy_var_389 := SerialDbgPrintEx(2, Tmp_733);
    call {:si_unique_call 1485} Tmp_731 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_731 != 0;
    assume Tmp_731 > 0;
    Mem_T.INT4[Tmp_731] := OldIrql_4;
    call {:si_unique_call 1486} IoAcquireCancelSpinLock(Tmp_731);
    assume {:nonnull} Tmp_731 != 0;
    assume Tmp_731 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_731];
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 1487} SerialTryToCompleteCurrent#1(Extension_9, 0, OldIrql_4, 0, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_9), li2bplFunctionConstant212, li2bplFunctionConstant216, 1);
    call {:si_unique_call 1488} SerialDpcEpilogue(Extension_9, Dpc);
    Tmp_734 := strConst__li2bpl236;
    call {:si_unique_call 1489} vslice_dummy_var_390 := SerialDbgPrintEx(2, Tmp_734);
    return;
}



procedure {:origName "SerialWriteTimeout"} SerialWriteTimeout(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWriteTimeout"} SerialWriteTimeout(actual_Dpc_1: int, actual_DeferredContext_1: int, actual_SystemContext1_1: int, actual_SystemContext2_1: int)
{
  var {:pointer} Tmp_736: int;
  var {:scalar} OldIrql_5: int;
  var {:pointer} Tmp_737: int;
  var {:pointer} Extension_10: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} Dpc_1: int;
  var {:pointer} DeferredContext_1: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;

  anon0:
    call {:si_unique_call 1490} vslice_dummy_var_391 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredContext_1 := actual_DeferredContext_1;
    call {:si_unique_call 1491} Tmp_736 := __HAVOC_malloc(84);
    call {:si_unique_call 1492} Tmp_737 := __HAVOC_malloc(100);
    Extension_10 := DeferredContext_1;
    Tmp_737 := strConst__li2bpl239;
    call {:si_unique_call 1493} vslice_dummy_var_392 := SerialDbgPrintEx(2, Tmp_737);
    call {:si_unique_call 1494} Tmp_738 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_738 != 0;
    assume Tmp_738 > 0;
    Mem_T.INT4[Tmp_738] := OldIrql_5;
    call {:si_unique_call 1495} IoAcquireCancelSpinLock(Tmp_738);
    assume {:nonnull} Tmp_738 != 0;
    assume Tmp_738 > 0;
    OldIrql_5 := Mem_T.INT4[Tmp_738];
    assume {:nonnull} Extension_10 != 0;
    assume Extension_10 > 0;
    call {:si_unique_call 1496} SerialTryToCompleteCurrent#1(Extension_10, li2bplFunctionConstant221, OldIrql_5, 258, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_10), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_10), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_10), li2bplFunctionConstant212, li2bplFunctionConstant216, 4);
    call {:si_unique_call 1497} SerialDpcEpilogue(Extension_10, Dpc_1);
    Tmp_736 := strConst__li2bpl238;
    call {:si_unique_call 1498} vslice_dummy_var_393 := SerialDbgPrintEx(2, Tmp_736);
    return;
}



procedure {:origName "SerialTimeoutXoff"} SerialTimeoutXoff(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialTimeoutXoff"} SerialTimeoutXoff(actual_Dpc_2: int, actual_DeferredContext_2: int, actual_SystemContext1_2: int, actual_SystemContext2_2: int)
{
  var {:pointer} Tmp_739: int;
  var {:pointer} Tmp_740: int;
  var {:pointer} Tmp_742: int;
  var {:scalar} OldIrql_6: int;
  var {:pointer} Extension_11: int;
  var {:pointer} Dpc_2: int;
  var {:pointer} DeferredContext_2: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;

  anon0:
    call {:si_unique_call 1499} vslice_dummy_var_394 := __HAVOC_malloc(4);
    Dpc_2 := actual_Dpc_2;
    DeferredContext_2 := actual_DeferredContext_2;
    call {:si_unique_call 1500} Tmp_739 := __HAVOC_malloc(80);
    call {:si_unique_call 1501} Tmp_742 := __HAVOC_malloc(96);
    Extension_11 := DeferredContext_2;
    Tmp_742 := strConst__li2bpl241;
    call {:si_unique_call 1502} vslice_dummy_var_395 := SerialDbgPrintEx(2, Tmp_742);
    call {:si_unique_call 1503} Tmp_740 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_740 != 0;
    assume Tmp_740 > 0;
    Mem_T.INT4[Tmp_740] := OldIrql_6;
    call {:si_unique_call 1504} IoAcquireCancelSpinLock(Tmp_740);
    assume {:nonnull} Tmp_740 != 0;
    assume Tmp_740 > 0;
    OldIrql_6 := Mem_T.INT4[Tmp_740];
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 1505} SerialTryToCompleteCurrent#1(Extension_11, li2bplFunctionConstant213, OldIrql_6, -1073741812, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_11), 0, 0, 0, 0, 0, 4);
    call {:si_unique_call 1506} SerialDpcEpilogue(Extension_11, Dpc_2);
    Tmp_739 := strConst__li2bpl240;
    call {:si_unique_call 1507} vslice_dummy_var_396 := SerialDbgPrintEx(2, Tmp_739);
    return;
}



procedure {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_7: int, actual_Irp_7: int) returns (Tmp_743: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_7: int, actual_Irp_7: int) returns (Tmp_743: int)
{
  var {:pointer} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:scalar} sdv_546: int;
  var {:pointer} sdv_548: int;
  var {:pointer} Tmp_746: int;
  var {:pointer} Extension_12: int;
  var {:pointer} Tmp_747: int;
  var {:pointer} Tmp_748: int;
  var {:pointer} Tmp_749: int;
  var {:scalar} status_24: int;
  var {:pointer} Tmp_750: int;
  var {:pointer} Tmp_751: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_404: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 1508} Tmp_744 := __HAVOC_malloc(72);
    call {:si_unique_call 1509} Tmp_745 := __HAVOC_malloc(84);
    call {:si_unique_call 1510} Tmp_746 := __HAVOC_malloc(96);
    call {:si_unique_call 1511} Tmp_747 := __HAVOC_malloc(84);
    call {:si_unique_call 1512} Tmp_748 := __HAVOC_malloc(84);
    call {:si_unique_call 1513} Tmp_749 := __HAVOC_malloc(72);
    call {:si_unique_call 1514} Tmp_750 := __HAVOC_malloc(84);
    call {:si_unique_call 1515} Tmp_751 := __HAVOC_malloc(88);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc Extension_12;
    Tmp_751 := strConst__li2bpl246;
    call {:si_unique_call 1516} vslice_dummy_var_397 := SerialDbgPrintEx(2, Tmp_751);
    call {:si_unique_call 1517} status_24 := SerialIRPPrologue(Irp_7, Extension_12);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_24 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_24 != 259;
    Tmp_744 := strConst__li2bpl1;
    call {:si_unique_call 1518} vslice_dummy_var_398 := SerialDbgPrintEx(9, Tmp_744);
    call {:si_unique_call 1519} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1520} SerialIRPEpilogue(Extension_12);
    goto L18;

  L18:
    Tmp_748 := strConst__li2bpl242;
    call {:si_unique_call 1521} vslice_dummy_var_399 := SerialDbgPrintEx(2, Tmp_748);
    Tmp_743 := status_24;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} status_24 == 259;
    goto L18;

  anon9_Then:
    assume {:partition} status_24 == 0;
    Tmp_746 := strConst__li2bpl0;
    call {:si_unique_call 1522} vslice_dummy_var_400 := SerialDbgPrintEx(9, Tmp_746);
    call {:si_unique_call 1523} sdv_546 := SerialCompleteIfError(DeviceObject_7, Irp_7);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_546 != 0;
    Tmp_747 := strConst__li2bpl243;
    call {:si_unique_call 1524} vslice_dummy_var_401 := SerialDbgPrintEx(2, Tmp_747);
    Tmp_743 := -1073741536;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_546 == 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 1525} sdv_548 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} sdv_548 != 0;
    assume sdv_548 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 1526} status_24 := SerialStartOrQueue(Extension_12, Irp_7, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12), li2bplFunctionConstant212);
    Tmp_750 := strConst__li2bpl244;
    call {:si_unique_call 1527} vslice_dummy_var_402 := SerialDbgPrintEx(2, Tmp_750);
    Tmp_743 := status_24;
    goto L1;

  anon12_Then:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    Tmp_749 := strConst__li2bpl1;
    call {:si_unique_call 1528} vslice_dummy_var_403 := SerialDbgPrintEx(9, Tmp_749);
    call {:si_unique_call 1529} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1530} SerialIRPEpilogue(Extension_12);
    Tmp_745 := strConst__li2bpl245;
    call {:si_unique_call 1531} vslice_dummy_var_404 := SerialDbgPrintEx(2, Tmp_745);
    Tmp_743 := 0;
    goto L1;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_405: int;

  anon0:
    call {:si_unique_call 1532} vslice_dummy_var_405 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_8: int, actual_Irp_8: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_8: int, actual_Irp_8: int)
{
  var {:pointer} Extension_13: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_406: int;

  anon0:
    call {:si_unique_call 1533} vslice_dummy_var_406 := __HAVOC_malloc(4);
    DeviceObject_8 := actual_DeviceObject_8;
    Irp_8 := actual_Irp_8;
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    havoc Extension_13;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    call {:si_unique_call 1534} SerialTryToCompleteCurrent#1(Extension_13, li2bplFunctionConstant213, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_8)], -1073741536, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_13), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_13), 0, 0, 2);
    return;
}



procedure {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteXoff"} SerialCompleteXoff(actual_Dpc_3: int, actual_DeferredContext_3: int, actual_SystemContext1_3: int, actual_SystemContext2_3: int)
{
  var {:pointer} Tmp_757: int;
  var {:pointer} Tmp_759: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} Extension_14: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Dpc_3: int;
  var {:pointer} DeferredContext_3: int;
  var vslice_dummy_var_407: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;

  anon0:
    call {:si_unique_call 1535} vslice_dummy_var_407 := __HAVOC_malloc(4);
    Dpc_3 := actual_Dpc_3;
    DeferredContext_3 := actual_DeferredContext_3;
    call {:si_unique_call 1536} Tmp_757 := __HAVOC_malloc(84);
    call {:si_unique_call 1537} Tmp_760 := __HAVOC_malloc(100);
    Extension_14 := DeferredContext_3;
    Tmp_760 := strConst__li2bpl248;
    call {:si_unique_call 1538} vslice_dummy_var_408 := SerialDbgPrintEx(2, Tmp_760);
    call {:si_unique_call 1539} Tmp_759 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    Mem_T.INT4[Tmp_759] := OldIrql_7;
    call {:si_unique_call 1540} IoAcquireCancelSpinLock(Tmp_759);
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_759];
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1541} SerialTryToCompleteCurrent#1(Extension_14, 0, OldIrql_7, 0, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_14), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_14), 0, 0, 1);
    call {:si_unique_call 1542} SerialDpcEpilogue(Extension_14, Dpc_3);
    Tmp_757 := strConst__li2bpl247;
    call {:si_unique_call 1543} vslice_dummy_var_409 := SerialDbgPrintEx(2, Tmp_757);
    return;
}



procedure {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp_1: int, actual_QueueToProcess_1: int, actual_NewIrp_2: int, actual_CompleteCurrent_1: int, actual_Extension_15: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp_1: int, actual_QueueToProcess_1: int, actual_NewIrp_2: int, actual_CompleteCurrent_1: int, actual_Extension_15: int)
{
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:scalar} OldIrql_8: int;
  var {:pointer} sdv_558: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} Irp_9: int;
  var {:pointer} Tmp_763: int;
  var {:scalar} OldIrql_9: int;
  var {:pointer} sdv_561: int;
  var {:scalar} OldIrql_10: int;
  var {:pointer} sdv_563: int;
  var {:scalar} CompleteCurrent_2: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} sdv_565: int;
  var {:pointer} sdv_566: int;
  var {:pointer} sdv_567: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} delta: int;
  var {:pointer} Tmp_764: int;
  var {:pointer} Xc_1: int;
  var {:scalar} s_p_e_c_i_a_l_8: int;
  var {:pointer} Tmp_765: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} NewIrp_2: int;
  var {:scalar} CompleteCurrent_1: int;
  var {:pointer} Extension_15: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;
  var vslice_dummy_var_416: int;
  var vslice_dummy_var_804: int;
  var vslice_dummy_var_805: int;
  var vslice_dummy_var_806: int;
  var vslice_dummy_var_807: int;

  anon0:
    call {:si_unique_call 1544} vslice_dummy_var_410 := __HAVOC_malloc(4);
    call {:si_unique_call 1545} delta := __HAVOC_malloc(20);
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    QueueToProcess_1 := actual_QueueToProcess_1;
    NewIrp_2 := actual_NewIrp_2;
    CompleteCurrent_1 := actual_CompleteCurrent_1;
    Extension_15 := actual_Extension_15;
    call {:si_unique_call 1546} Tmp_761 := __HAVOC_malloc(84);
    call {:si_unique_call 1547} Tmp_764 := __HAVOC_malloc(104);
    CompleteCurrent_2 := CompleteCurrent_1;
    Tmp_764 := strConst__li2bpl250;
    call {:si_unique_call 1548} vslice_dummy_var_413 := SerialDbgPrintEx(2, Tmp_764);
    goto L8;

  L8:
    call {:si_unique_call 1549} s_p_e_c_i_a_l_5, sdv_558, Irp_9, Tmp_763, OldIrql_9, sdv_561, OldIrql_10, sdv_563, s_p_e_c_i_a_l_6, sdv_565, sdv_566, sdv_567, s_p_e_c_i_a_l_7, Xc_1, s_p_e_c_i_a_l_8, Tmp_765, CompleteCurrent_1, vslice_dummy_var_412, vslice_dummy_var_415, vslice_dummy_var_416 := SerialGetNextWrite_loop_L8(s_p_e_c_i_a_l_5, sdv_558, Irp_9, Tmp_763, OldIrql_9, sdv_561, OldIrql_10, sdv_563, CompleteCurrent_2, s_p_e_c_i_a_l_6, sdv_565, sdv_566, sdv_567, s_p_e_c_i_a_l_7, delta, Xc_1, s_p_e_c_i_a_l_8, Tmp_765, CurrentOpIrp_1, QueueToProcess_1, NewIrp_2, CompleteCurrent_1, Extension_15, vslice_dummy_var_412, vslice_dummy_var_415, vslice_dummy_var_416);
    goto L8_last;

  L8_last:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_807;
    call {:si_unique_call 1570} sdv_563 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_807);
    assume {:nonnull} sdv_563 != 0;
    assume sdv_563 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1550} Tmp_763 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    Mem_T.INT4[Tmp_763] := OldIrql_10;
    call {:si_unique_call 1551} IoAcquireCancelSpinLock(Tmp_763);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    OldIrql_10 := Mem_T.INT4[Tmp_763];
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_804;
    call {:si_unique_call 1552} sdv_566 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_804);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} sdv_566 != 0;
    assume sdv_566 > 0;
    call {:si_unique_call 1553} IoReleaseCancelSpinLock(OldIrql_10);
    goto L26;

  L26:
    call {:si_unique_call 1554} SerialGetNextIrp(CurrentOpIrp_1, QueueToProcess_1, NewIrp_2, CompleteCurrent_1, Extension_15);
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 1555} Tmp_763 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    Mem_T.INT4[Tmp_763] := OldIrql_8;
    call {:si_unique_call 1556} IoAcquireCancelSpinLock(Tmp_763);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    OldIrql_8 := Mem_T.INT4[Tmp_763];
    call {:si_unique_call 1557} vslice_dummy_var_411 := KeSynchronizeExecution(0, li2bplFunctionConstant217, 0);
    call {:si_unique_call 1558} IoReleaseCancelSpinLock(OldIrql_8);
    goto L39;

  L39:
    Tmp_761 := strConst__li2bpl249;
    call {:si_unique_call 1559} vslice_dummy_var_414 := SerialDbgPrintEx(2, Tmp_761);
    return;

  anon16_Then:
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    havoc vslice_dummy_var_805;
    call {:si_unique_call 1560} sdv_567 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_805);
    assume {:nonnull} sdv_567 != 0;
    assume sdv_567 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L39;

  anon17_Then:
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    havoc Tmp_765;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_765))] := 0;
    CompleteCurrent_1 := CompleteCurrent_2;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_806;
    call {:si_unique_call 1561} sdv_565 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_806);
    assume {:nonnull} sdv_565 != 0;
    assume sdv_565 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 1562} Tmp_763 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    Mem_T.INT4[Tmp_763] := OldIrql_9;
    call {:si_unique_call 1563} IoAcquireCancelSpinLock(Tmp_763);
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    OldIrql_9 := Mem_T.INT4[Tmp_763];
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    havoc Irp_9;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    havoc Xc_1;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 1564} IoReleaseCancelSpinLock(OldIrql_9);
    goto L26;

  anon21_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] == 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := -1073741536;
    goto L64;

  anon19_Then:
    call {:si_unique_call 1565} vslice_dummy_var_412 := sdv_IoSetCancelRoutine(Irp_9, li2bplFunctionConstant218);
    s_p_e_c_i_a_l_6 := 2;
    call {:si_unique_call 1566} sdv_561 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_561 != 0;
    assume sdv_561 > 0;
    s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_561)));
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_5], s_p_e_c_i_a_l_6);
    CompleteCurrent_1 := 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1567} vslice_dummy_var_415 := KeSynchronizeExecution(0, li2bplFunctionConstant219, 0);
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    assume {:nonnull} delta != 0;
    assume delta > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1568} vslice_dummy_var_416 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_15), delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    s_p_e_c_i_a_l_8 := 4;
    call {:si_unique_call 1569} sdv_558 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_558 != 0;
    assume sdv_558 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_558)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_8);
    goto L64;

  anon20_Then:
    goto L64;

  anon18_Then:
    goto L26;
}



procedure {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_9: int, actual_Irp_10: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_9: int, actual_Irp_10: int)
{
  var {:pointer} Extension_17: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_417: int;

  anon0:
    call {:si_unique_call 1571} vslice_dummy_var_417 := __HAVOC_malloc(4);
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_10 := actual_Irp_10;
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc Extension_17;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 1572} SerialTryToCompleteCurrent#1(Extension_17, li2bplFunctionConstant221, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_10)], -1073741536, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_17), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_17), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_17), li2bplFunctionConstant212, li2bplFunctionConstant216, 2);
    return;
}



procedure {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExInitializeFastMutex"} {:osmodel} sdv_ExInitializeFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_418: int;

  anon0:
    call {:si_unique_call 1573} vslice_dummy_var_418 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DbgBreakPoint"} {:osmodel} sdv_DbgBreakPoint()
{
  var vslice_dummy_var_419: int;

  anon0:
    call {:si_unique_call 1574} vslice_dummy_var_419 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_420: int;

  anon0:
    call {:si_unique_call 1575} vslice_dummy_var_420 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_1: int, actual_FieldOffset: int) returns (Tmp_782: int);
  free ensures {:va_keep} Tmp_782 == actual_Address_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_1: int, actual_FieldOffset: int) returns (Tmp_782: int)
{
  var {:pointer} record: int;
  var {:pointer} Address_1: int;

  anon0:
    Address_1 := actual_Address_1;
    record := Address_1;
    Tmp_782 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_421: int;

  anon0:
    call {:si_unique_call 1576} vslice_dummy_var_421 := __HAVOC_malloc(4);
    p := actual_p;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := sdv_irql_previous;
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_786: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_786: int)
{
  var {:scalar} status_25: int;
  var {:pointer} p1: int;
  var {:pointer} p2: int;

  anon0:
    p1 := actual_p1;
    p2 := actual_p2;
    status_25 := 0;
    call {:si_unique_call 1577} sdv_stub_add_begin();
    call {:si_unique_call 1578} status_25 := SerialAddDevice(p1, p2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1579} sdv_stub_add_end();
    Tmp_786 := status_25;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_788: int);
  free ensures {:va_keep} Tmp_788 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_788: int)
{

  anon0:
    Tmp_788 := 1;
    return;
}



procedure {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end()
{
  var vslice_dummy_var_422: int;

  anon0:
    call {:si_unique_call 1580} vslice_dummy_var_422 := __HAVOC_malloc(4);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_423: int;

  anon0:
    call {:si_unique_call 1581} vslice_dummy_var_423 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1: int, actual_Dpc_4: int) returns (Tmp_794: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_794 == 1 || Tmp_794 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1: int, actual_Dpc_4: int) returns (Tmp_794: int)
{
  var {:scalar} DueTime_1: int;
  var {:pointer} SD1: int;

  anon0:
    call {:si_unique_call 1582} DueTime_1 := __HAVOC_malloc(20);
    SD1 := actual_SD1;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    Mem_T.INT4[LowPart__LUID(DueTime_1)] := Mem_T.INT4[LowPart__LUID(SD1)];
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(DueTime_1))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SD1))];
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_794 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_794 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_796: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_796: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_796 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_796 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_796 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_5: int, actual_DeferredRoutine: int, actual_DeferredContext_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_5: int, actual_DeferredRoutine: int, actual_DeferredContext_4: int)
{
  var {:pointer} Dpc_5: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_424: int;

  anon0:
    call {:si_unique_call 1583} vslice_dummy_var_424 := __HAVOC_malloc(4);
    Dpc_5 := actual_Dpc_5;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_5 != 0;
    assume Dpc_5 > 0;
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_5: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_10: int) returns (Tmp_800: int);
  free ensures {:va_keep} Tmp_800 == -1073741824 || Tmp_800 == -1073741771 || Tmp_800 == -1073741670 || Tmp_800 == -1073741823 || Tmp_800 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_5: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_10: int) returns (Tmp_800: int)
{
  var {:pointer} DeviceObject_10: int;

  anon0:
    DeviceObject_10 := actual_DeviceObject_10;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    Tmp_800 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    Tmp_800 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    Tmp_800 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    Tmp_800 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    goto L21;

  L21:
    Tmp_800 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    goto L21;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_425: int;

  anon0:
    call {:si_unique_call 1584} vslice_dummy_var_425 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_804: int);
  modifies Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_804: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    r := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)];
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_2)] := CancelRoutine;
    Tmp_804 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_426: int;

  anon0:
    call {:si_unique_call 1585} vslice_dummy_var_426 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_808: int);
  free ensures {:va_keep} Tmp_808 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_808: int)
{

  anon0:
    Tmp_808 := 1;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_427: int;

  anon0:
    call {:si_unique_call 1586} vslice_dummy_var_427 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_428: int;

  anon0:
    call {:si_unique_call 1587} vslice_dummy_var_428 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_814: int);
  free ensures {:va_keep} Tmp_814 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_814: int)
{

  anon0:
    Tmp_814 := 1;
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_816: int);
  free ensures {:va_keep} Tmp_816 == 1 || Tmp_816 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_816: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_816 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_816 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_1: int, actual_Environment: int) returns (Tmp_818: int);
  free ensures {:va_keep} Tmp_818 == 0 || Tmp_818 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_1: int, actual_Environment: int) returns (Tmp_818: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_818 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_818 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_429: int;

  anon0:
    call {:si_unique_call 1588} vslice_dummy_var_429 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := -1073741637;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_6: int) returns (Tmp_822: int);
  free ensures {:va_keep} Tmp_822 == 1 || Tmp_822 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_6: int) returns (Tmp_822: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_822 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_822 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_824: int);
  free ensures {:va_keep} Tmp_824 == 0 || Tmp_824 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_824: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_824 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_824 := -1073741823;
    goto L1;
}



procedure {:origName "HalGetInterruptVector"} {:osmodel} HalGetInterruptVector(actual_InterfaceType: int, actual_BusNumber: int, actual_BusInterruptLevel: int, actual_BusInterruptVector: int, actual_Irql: int, actual_Affinity: int) returns (Tmp_826: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HalGetInterruptVector"} {:osmodel} HalGetInterruptVector(actual_InterfaceType: int, actual_BusNumber: int, actual_BusInterruptLevel: int, actual_BusInterruptVector: int, actual_Irql: int, actual_Affinity: int) returns (Tmp_826: int)
{
  var {:scalar} sdv_592: int;

  anon0:
    Tmp_826 := sdv_592;
    return;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} sdv_594: int;
  var {:scalar} u: int;
  var {:pointer} Tmp_828: int;
  var {:scalar} sdv_611: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;
  var vslice_dummy_var_442: int;
  var vslice_dummy_var_443: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_808: int;
  var vslice_dummy_var_809: int;
  var vslice_dummy_var_810: int;
  var vslice_dummy_var_811: int;
  var vslice_dummy_var_812: int;
  var vslice_dummy_var_813: int;
  var vslice_dummy_var_814: int;
  var vslice_dummy_var_815: int;
  var vslice_dummy_var_816: int;

  anon0:
    call {:si_unique_call 1589} u := __HAVOC_malloc(12);
    call {:si_unique_call 1590} vslice_dummy_var_430 := __HAVOC_malloc(4);
    call {:si_unique_call 1591} sdv_611 := sdv_CheckDispatchRoutines();
    call {:si_unique_call 1592} sdv_594 := sdv_CheckStartIoRoutines();
    call {:si_unique_call 1593} vslice_dummy_var_431 := sdv_CheckDpcRoutines();
    call {:si_unique_call 1594} vslice_dummy_var_432 := sdv_CheckIsrRoutines();
    call {:si_unique_call 1595} vslice_dummy_var_433 := sdv_CheckCancelRoutines();
    call {:si_unique_call 1596} vslice_dummy_var_434 := sdv_CheckIoDpcRoutines();
    call {:si_unique_call 1597} vslice_dummy_var_435 := sdv_IoCompletionRoutines();
    call {:si_unique_call 1598} vslice_dummy_var_436 := sdv_CheckWorkerRoutines();
    call {:si_unique_call 1599} vslice_dummy_var_437 := sdv_CheckAddDevice();
    call {:si_unique_call 1600} vslice_dummy_var_438 := sdv_CheckIrpMjPnp();
    call {:si_unique_call 1601} vslice_dummy_var_439 := sdv_CheckIrpMjPower();
    call {:si_unique_call 1602} vslice_dummy_var_440 := sdv_CheckDriverUnload();
    goto anon195_Then, anon195_Else;

  anon195_Else:
    goto anon286_Then, anon286_Else;

  anon286_Else:
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto anon284_Then, anon284_Else;

  anon284_Else:
    goto anon283_Then, anon283_Else;

  anon283_Else:
    goto anon282_Then, anon282_Else;

  anon282_Else:
    goto anon281_Then, anon281_Else;

  anon281_Else:
    goto anon280_Then, anon280_Else;

  anon280_Else:
    goto anon279_Then, anon279_Else;

  anon279_Else:
    goto anon278_Then, anon278_Else;

  anon278_Else:
    goto anon277_Then, anon277_Else;

  anon277_Else:
    goto anon276_Then, anon276_Else;

  anon276_Else:
    goto anon275_Then, anon275_Else;

  anon275_Else:
    goto anon274_Then, anon274_Else;

  anon274_Else:
    goto anon273_Then, anon273_Else;

  anon273_Else:
    goto anon272_Then, anon272_Else;

  anon272_Else:
    goto anon271_Then, anon271_Else;

  anon271_Else:
    goto anon270_Then, anon270_Else;

  anon270_Else:
    goto anon269_Then, anon269_Else;

  anon269_Else:
    goto anon268_Then, anon268_Else;

  anon268_Else:
    goto anon267_Then, anon267_Else;

  anon267_Else:
    goto anon266_Then, anon266_Else;

  anon266_Else:
    goto anon265_Then, anon265_Else;

  anon265_Else:
    goto anon264_Then, anon264_Else;

  anon264_Else:
    goto anon263_Then, anon263_Else;

  anon263_Else:
    goto anon262_Then, anon262_Else;

  anon262_Else:
    goto anon261_Then, anon261_Else;

  anon261_Else:
    goto anon260_Then, anon260_Else;

  anon260_Else:
    goto anon259_Then, anon259_Else;

  anon259_Else:
    goto anon258_Then, anon258_Else;

  anon258_Else:
    goto anon257_Then, anon257_Else;

  anon257_Else:
    goto anon256_Then, anon256_Else;

  anon256_Else:
    goto anon255_Then, anon255_Else;

  anon255_Else:
    goto anon254_Then, anon254_Else;

  anon254_Else:
    goto anon253_Then, anon253_Else;

  anon253_Else:
    goto anon252_Then, anon252_Else;

  anon252_Else:
    goto anon251_Then, anon251_Else;

  anon251_Else:
    goto anon250_Then, anon250_Else;

  anon250_Else:
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto anon248_Then, anon248_Else;

  anon248_Else:
    goto anon247_Then, anon247_Else;

  anon247_Else:
    goto anon246_Then, anon246_Else;

  anon246_Else:
    goto anon245_Then, anon245_Else;

  anon245_Else:
    goto anon244_Then, anon244_Else;

  anon244_Else:
    goto anon243_Then, anon243_Else;

  anon243_Else:
    goto anon242_Then, anon242_Else;

  anon242_Else:
    goto anon241_Then, anon241_Else;

  anon241_Else:
    goto anon240_Then, anon240_Else;

  anon240_Else:
    goto anon239_Then, anon239_Else;

  anon239_Else:
    goto anon238_Then, anon238_Else;

  anon238_Else:
    goto anon237_Then, anon237_Else;

  anon237_Else:
    goto anon236_Then, anon236_Else;

  anon236_Else:
    goto anon235_Then, anon235_Else;

  anon235_Else:
    goto anon234_Then, anon234_Else;

  anon234_Else:
    goto anon233_Then, anon233_Else;

  anon233_Else:
    goto anon232_Then, anon232_Else;

  anon232_Else:
    goto anon231_Then, anon231_Else;

  anon231_Else:
    goto anon230_Then, anon230_Else;

  anon230_Else:
    goto anon229_Then, anon229_Else;

  anon229_Else:
    goto anon228_Then, anon228_Else;

  anon228_Else:
    goto anon227_Then, anon227_Else;

  anon227_Else:
    goto anon226_Then, anon226_Else;

  anon226_Else:
    goto anon225_Then, anon225_Else;

  anon225_Else:
    goto anon224_Then, anon224_Else;

  anon224_Else:
    goto anon223_Then, anon223_Else;

  anon223_Else:
    goto anon222_Then, anon222_Else;

  anon222_Else:
    goto anon221_Then, anon221_Else;

  anon221_Else:
    goto anon220_Then, anon220_Else;

  anon220_Else:
    goto anon219_Then, anon219_Else;

  anon219_Else:
    goto anon218_Then, anon218_Else;

  anon218_Else:
    goto anon217_Then, anon217_Else;

  anon217_Else:
    goto anon216_Then, anon216_Else;

  anon216_Else:
    goto anon215_Then, anon215_Else;

  anon215_Else:
    goto anon214_Then, anon214_Else;

  anon214_Else:
    goto anon213_Then, anon213_Else;

  anon213_Else:
    goto anon212_Then, anon212_Else;

  anon212_Else:
    goto anon211_Then, anon211_Else;

  anon211_Else:
    goto anon210_Then, anon210_Else;

  anon210_Else:
    goto anon209_Then, anon209_Else;

  anon209_Else:
    goto anon208_Then, anon208_Else;

  anon208_Else:
    goto anon207_Then, anon207_Else;

  anon207_Else:
    goto anon206_Then, anon206_Else;

  anon206_Else:
    goto anon205_Then, anon205_Else;

  anon205_Else:
    goto anon204_Then, anon204_Else;

  anon204_Else:
    goto anon203_Then, anon203_Else;

  anon203_Else:
    goto anon202_Then, anon202_Else;

  anon202_Else:
    goto anon201_Then, anon201_Else;

  anon201_Else:
    goto anon200_Then, anon200_Else;

  anon200_Else:
    goto anon199_Then, anon199_Else;

  anon199_Else:
    goto anon198_Then, anon198_Else;

  anon198_Else:
    call {:si_unique_call 1603} sdv_RunUnload(sdv_driver_object);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon198_Then:
    goto L1;

  anon199_Then:
    call {:si_unique_call 1604} vslice_dummy_var_442 := sdv_RunRemoveDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon291_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon200_Then:
    call {:si_unique_call 1605} sdv_stub_driver_init();
    call {:si_unique_call 1606} vslice_dummy_var_443 := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon290_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon201_Then:
    call {:si_unique_call 1607} vslice_dummy_var_441 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon289_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon202_Then:
    call {:si_unique_call 1608} vslice_dummy_var_446 := DriverEntry(sdv_driver_object, u);
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon288_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon203_Then:
    goto L1;

  anon204_Then:
    goto L1;

  anon205_Then:
    goto L1;

  anon206_Then:
    goto L1;

  anon207_Then:
    goto L1;

  anon208_Then:
    goto L1;

  anon209_Then:
    goto L1;

  anon210_Then:
    goto L1;

  anon211_Then:
    goto L1;

  anon212_Then:
    goto L1;

  anon213_Then:
    goto L1;

  anon214_Then:
    goto L1;

  anon215_Then:
    goto L1;

  anon216_Then:
    goto L1;

  anon217_Then:
    goto L1;

  anon218_Then:
    goto L1;

  anon219_Then:
    goto L1;

  anon220_Then:
    goto L1;

  anon221_Then:
    goto L1;

  anon222_Then:
    goto L1;

  anon223_Then:
    goto L1;

  anon224_Then:
    goto L1;

  anon225_Then:
    goto L1;

  anon226_Then:
    goto L1;

  anon227_Then:
    goto L1;

  anon228_Then:
    goto L1;

  anon229_Then:
    goto L1;

  anon230_Then:
    goto L1;

  anon231_Then:
    goto L1;

  anon232_Then:
    goto L1;

  anon233_Then:
    goto L1;

  anon234_Then:
    goto L1;

  anon235_Then:
    goto L1;

  anon236_Then:
    goto L1;

  anon237_Then:
    goto L1;

  anon238_Then:
    goto L1;

  anon239_Then:
    goto L1;

  anon240_Then:
    goto L1;

  anon241_Then:
    goto L1;

  anon242_Then:
    goto L1;

  anon243_Then:
    goto L1;

  anon244_Then:
    goto L1;

  anon245_Then:
    goto L1;

  anon246_Then:
    goto L1;

  anon247_Then:
    goto L1;

  anon248_Then:
    goto L1;

  anon249_Then:
    goto L1;

  anon250_Then:
    goto L1;

  anon251_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1609} vslice_dummy_var_445 := SerialSyncCompletion(sdv_p_devobj_fdo, sdv_irp, sdv_pv2);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon252_Then:
    call {:si_unique_call 1610} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1611} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1612} SerialFilterCancelQueued(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon253_Then:
    call {:si_unique_call 1613} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1614} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1615} SerialCancelWait(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon254_Then:
    call {:si_unique_call 1616} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1617} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1618} SerialCancelQueued(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon255_Then:
    call {:si_unique_call 1619} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1620} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1621} SerialCancelImmediate(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon256_Then:
    call {:si_unique_call 1622} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1623} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1624} SerialCancelCurrentXoff(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon257_Then:
    call {:si_unique_call 1625} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1626} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1627} SerialCancelCurrentWrite(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon258_Then:
    call {:si_unique_call 1628} Tmp_828 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.INT4[Tmp_828] := Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)];
    call {:si_unique_call 1629} IoAcquireCancelSpinLock(Tmp_828);
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(sdv_irp)] := Mem_T.INT4[Tmp_828];
    call {:si_unique_call 1630} SerialCancelCurrentRead(sdv_p_devobj_fdo, sdv_irp);
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(sdv_irp)] := 0;
    goto L1;

  anon259_Then:
    goto L1;

  anon260_Then:
    goto L1;

  anon261_Then:
    goto L1;

  anon262_Then:
    goto L1;

  anon263_Then:
    goto L1;

  anon264_Then:
    goto L1;

  anon265_Then:
    goto L1;

  anon266_Then:
    goto L1;

  anon267_Then:
    goto L1;

  anon268_Then:
    goto L1;

  anon269_Then:
    goto L1;

  anon270_Then:
    goto L1;

  anon271_Then:
    goto L1;

  anon272_Then:
    goto L1;

  anon273_Then:
    goto L1;

  anon274_Then:
    goto L1;

  anon275_Then:
    goto L1;

  anon276_Then:
    goto L1;

  anon277_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_808;
    call {:si_unique_call 1631} SerialWriteTimeout(sdv_kdpc, vslice_dummy_var_808, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon278_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_809;
    call {:si_unique_call 1632} SerialUnlockPages(sdv_kdpc, vslice_dummy_var_809, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon279_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_810;
    call {:si_unique_call 1633} SerialTimeoutXoff(sdv_kdpc, vslice_dummy_var_810, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon280_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_811;
    call {:si_unique_call 1634} SerialReadTimeout(sdv_kdpc, vslice_dummy_var_811, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon281_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_812;
    call {:si_unique_call 1635} SerialCompleteXoff(sdv_kdpc, vslice_dummy_var_812, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon282_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_813;
    call {:si_unique_call 1636} SerialCompleteWrite(sdv_kdpc, vslice_dummy_var_813, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon283_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_814;
    call {:si_unique_call 1637} SerialCompleteWait(sdv_kdpc, vslice_dummy_var_814, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon284_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_815;
    call {:si_unique_call 1638} SerialCompleteRead(sdv_kdpc, vslice_dummy_var_815, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon285_Then:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    havoc vslice_dummy_var_816;
    call {:si_unique_call 1639} SerialCommError(sdv_kdpc, vslice_dummy_var_816, sdv_pv2, sdv_pv3);
    sdv_irql_current := 0;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    goto L1;

  anon286_Then:
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} sdv_594 != 0;
    call {:si_unique_call 1640} sdv_stub_driver_init();
    call {:si_unique_call 1641} sdv_RunStartIo(0, 0);
    goto L1;

  anon197_Then:
    assume {:partition} sdv_594 == 0;
    goto L1;

  anon195_Then:
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} sdv_611 != 0;
    call {:si_unique_call 1642} sdv_stub_driver_init();
    call {:si_unique_call 1643} vslice_dummy_var_444 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon287_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon196_Then:
    assume {:partition} sdv_611 == 0;
    goto L1;
}



procedure {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_830: int);
  free ensures {:va_keep} Tmp_830 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_830: int)
{

  anon0:
    Tmp_830 := 1;
    return;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_832: int);
  free ensures {:va_keep} Tmp_832 == 0 || Tmp_832 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_832: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_832 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_832 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_834: int);
  free ensures {:va_keep} Tmp_834 == 0 || Tmp_834 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_834: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_834 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_834 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_836: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_836: int)
{
  var {:pointer} sdv_627: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1644} sdv_627 := __HAVOC_malloc(1);
    Tmp_836 := sdv_627;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_836 := 0;
    goto L1;
}



procedure {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_838: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_838: int)
{
  var {:pointer} sdv_629: int;
  var {:scalar} PoolType: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    PoolType := actual_PoolType;
    NumberOfBytes := actual_NumberOfBytes;
    call {:si_unique_call 1645} SLIC_sdv_ExAllocatePoolWithQuotaTag_entry(strConst__li2bpl253, PoolType);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1646} sdv_629 := __HAVOC_malloc(NumberOfBytes);
    Tmp_838 := sdv_629;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    Tmp_838 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_840: int);
  free ensures {:va_keep} Tmp_840 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_840: int)
{

  anon0:
    Tmp_840 := 0;
    return;
}



procedure {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_842: int);
  free ensures {:va_keep} Tmp_842 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_842: int)
{

  anon0:
    Tmp_842 := 1;
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_844: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_844 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_11: int, actual_Irp_11: int) returns (Tmp_844: int)
{
  var {:scalar} status_27: int;
  var {:pointer} Irp_11: int;

  anon0:
    Irp_11 := actual_Irp_11;
    status_27 := 259;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 259;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  L25:
    Tmp_844 := status_27;
    return;

  anon33_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L25;

  anon32_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L19;

  anon40_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := -1073741823;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L44;

  L44:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L46;

  L46:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L25;

  anon39_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L44;

  anon41_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := -1073741536;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L28;

  L28:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L30;

  L30:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L28;

  anon31_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L36;

  L36:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L38;

  L38:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L36;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_12: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_846: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_846 == 0 || Tmp_846 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_12: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_846: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 1647} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_846 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 1648} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 1649} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 1650} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_13: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_13: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_1: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp_1: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 1651} State := __HAVOC_malloc(8);
    call {:si_unique_call 1652} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1653} Tmp_1 := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    SD1_1 := Tmp_1;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_447: int;

  anon0:
    call {:si_unique_call 1654} vslice_dummy_var_447 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := new;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    Mem_T.INT4[p_1] := sdv_irql_previous;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_851: int);
  free ensures {:va_keep} Tmp_851 == 1 || Tmp_851 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_851: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_851 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_851 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_448: int;

  anon0:
    call {:si_unique_call 1655} vslice_dummy_var_448 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_2: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_449: int;

  anon0:
    call {:si_unique_call 1656} vslice_dummy_var_449 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_2 := actual_Context_2;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 1657} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_450: int;

  anon0:
    call {:si_unique_call 1658} vslice_dummy_var_450 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 1;
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_451: int;

  anon0:
    call {:si_unique_call 1659} vslice_dummy_var_451 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_861: int);
  free ensures {:va_keep} Tmp_861 == 1 || Tmp_861 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_861: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_861 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_861 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_863: int);
  free ensures {:va_keep} Tmp_863 == 0 || Tmp_863 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName: int) returns (Tmp_863: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_863 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_863 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_12: int)
{
  var vslice_dummy_var_452: int;

  anon0:
    call {:si_unique_call 1660} vslice_dummy_var_452 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_867: int);
  free ensures {:va_keep} Tmp_867 == 258 || Tmp_867 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_867: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_867 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_867 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_867 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_14: int)
{
  var vslice_dummy_var_453: int;

  anon0:
    call {:si_unique_call 1661} vslice_dummy_var_453 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_871: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_871: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_871 := OldState;
    return;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_875: int);
  free ensures {:va_keep} Tmp_875 == actual_AddressWithinSection;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_875: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_875 := AddressWithinSection;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_877: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_877: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_877;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_454: int;

  anon0:
    call {:si_unique_call 1662} vslice_dummy_var_454 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_455: int;

  anon0:
    call {:si_unique_call 1663} vslice_dummy_var_455 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_15: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_13: int) returns (Tmp_883: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_883 == -1073741584 || Tmp_883 == 259 || Tmp_883 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_15: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_13: int) returns (Tmp_883: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 1664} PowerState := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_883 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_883 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_883 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_885: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_885: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_887: int;
  var {:scalar} Tmp_888: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var SerialGlobals__Loc: int;
  var SerialPhysicalZero__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var driverDefaults__Loc: int;
  var SerialPhysicalZero_1__Loc: int;
  var SerialPortNameGuid__Loc: int;
  var SerailPortPerfGuid__Loc: int;
  var SerialPortPropertiesGuid__Loc: int;
  var SerialPortHWGuid__Loc: int;
  var SerialPortCommGuid__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var SerialPhysicalZero_2__Loc: int;
  var SerialPhysicalZero_3__Loc: int;
  var vslice_dummy_var_741: int;
  var vslice_dummy_var_742: int;
  var vslice_dummy_var_743: int;
  var vslice_dummy_var_744: int;
  var vslice_dummy_var_745: int;
  var vslice_dummy_var_746: int;
  var vslice_dummy_var_747: int;
  var vslice_dummy_var_748: int;
  var vslice_dummy_var_749: int;
  var vslice_dummy_var_750: int;
  var vslice_dummy_var_751: int;
  var vslice_dummy_var_752: int;
  var vslice_dummy_var_753: int;
  var vslice_dummy_var_754: int;
  var vslice_dummy_var_755: int;
  var vslice_dummy_var_756: int;
  var vslice_dummy_var_757: int;
  var vslice_dummy_var_758: int;
  var vslice_dummy_var_759: int;
  var vslice_dummy_var_760: int;
  var vslice_dummy_var_761: int;
  var vslice_dummy_var_762: int;
  var vslice_dummy_var_763: int;
  var vslice_dummy_var_764: int;
  var vslice_dummy_var_765: int;
  var vslice_dummy_var_766: int;
  var vslice_dummy_var_767: int;
  var vslice_dummy_var_768: int;
  var vslice_dummy_var_769: int;
  var vslice_dummy_var_770: int;
  var vslice_dummy_var_771: int;
  var vslice_dummy_var_772: int;
  var vslice_dummy_var_773: int;
  var vslice_dummy_var_774: int;
  var vslice_dummy_var_775: int;
  var vslice_dummy_var_776: int;
  var vslice_dummy_var_777: int;
  var vslice_dummy_var_778: int;
  var vslice_dummy_var_779: int;
  var vslice_dummy_var_780: int;
  var vslice_dummy_var_781: int;
  var vslice_dummy_var_782: int;
  var vslice_dummy_var_783: int;
  var vslice_dummy_var_784: int;
  var vslice_dummy_var_785: int;
  var vslice_dummy_var_786: int;
  var vslice_dummy_var_787: int;
  var vslice_dummy_var_788: int;
  var vslice_dummy_var_789: int;
  var vslice_dummy_var_790: int;
  var vslice_dummy_var_791: int;
  var vslice_dummy_var_792: int;
  var vslice_dummy_var_793: int;
  var vslice_dummy_var_794: int;
  var vslice_dummy_var_795: int;
  var vslice_dummy_var_796: int;
  var vslice_dummy_var_797: int;
  var vslice_dummy_var_798: int;
  var vslice_dummy_var_799: int;
  var vslice_dummy_var_800: int;
  var vslice_dummy_var_801: int;
  var vslice_dummy_var_802: int;
  var vslice_dummy_var_803: int;
  var vslice_dummy_var_804: int;
  var vslice_dummy_var_805: int;
  var vslice_dummy_var_806: int;
  var vslice_dummy_var_807: int;
  var vslice_dummy_var_808: int;
  var vslice_dummy_var_809: int;
  var vslice_dummy_var_810: int;
  var vslice_dummy_var_811: int;
  var vslice_dummy_var_812: int;
  var vslice_dummy_var_813: int;
  var vslice_dummy_var_814: int;
  var vslice_dummy_var_815: int;
  var vslice_dummy_var_816: int;
  var vslice_dummy_var_817: int;
  var vslice_dummy_var_818: int;
  var vslice_dummy_var_819: int;
  var vslice_dummy_var_820: int;
  var vslice_dummy_var_821: int;
  var vslice_dummy_var_822: int;
  var vslice_dummy_var_823: int;
  var vslice_dummy_var_824: int;
  var vslice_dummy_var_825: int;
  var vslice_dummy_var_826: int;
  var vslice_dummy_var_827: int;
  var vslice_dummy_var_828: int;
  var vslice_dummy_var_829: int;
  var vslice_dummy_var_830: int;
  var vslice_dummy_var_831: int;
  var vslice_dummy_var_832: int;
  var vslice_dummy_var_833: int;
  var vslice_dummy_var_834: int;
  var vslice_dummy_var_835: int;
  var vslice_dummy_var_836: int;
  var vslice_dummy_var_837: int;
  var vslice_dummy_var_838: int;
  var vslice_dummy_var_839: int;
  var vslice_dummy_var_840: int;
  var vslice_dummy_var_841: int;
  var vslice_dummy_var_842: int;
  var vslice_dummy_var_843: int;
  var vslice_dummy_var_844: int;
  var vslice_dummy_var_845: int;
  var vslice_dummy_var_846: int;
  var vslice_dummy_var_847: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 1665} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1666} SerialGlobals__Loc := __HAVOC_malloc_or_null(28);
    assume SerialGlobals__Loc == SerialGlobals;
    assume SerialGlobals != 0;
    call {:si_unique_call 1667} SerialPhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero__Loc == SerialPhysicalZero;
    assume SerialPhysicalZero != 0;
    call {:si_unique_call 1668} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 1669} driverDefaults__Loc := __HAVOC_malloc_or_null(88);
    assume driverDefaults__Loc == driverDefaults;
    assume driverDefaults != 0;
    call {:si_unique_call 1670} SerialPhysicalZero_1__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_1__Loc == SerialPhysicalZero_1;
    assume SerialPhysicalZero_1 != 0;
    call {:si_unique_call 1671} SerialPortNameGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortNameGuid__Loc == SerialPortNameGuid;
    assume SerialPortNameGuid != 0;
    call {:si_unique_call 1672} SerailPortPerfGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerailPortPerfGuid__Loc == SerailPortPerfGuid;
    assume SerailPortPerfGuid != 0;
    call {:si_unique_call 1673} SerialPortPropertiesGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortPropertiesGuid__Loc == SerialPortPropertiesGuid;
    assume SerialPortPropertiesGuid != 0;
    call {:si_unique_call 1674} SerialPortHWGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortHWGuid__Loc == SerialPortHWGuid;
    assume SerialPortHWGuid != 0;
    call {:si_unique_call 1675} SerialPortCommGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortCommGuid__Loc == SerialPortCommGuid;
    assume SerialPortCommGuid != 0;
    call {:si_unique_call 1676} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1677} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1678} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1679} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1680} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1681} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1682} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1683} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1684} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1685} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1686} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1687} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1688} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1689} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1690} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1691} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1692} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1693} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1694} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1695} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1696} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 1697} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1698} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1699} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1700} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1701} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1702} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1703} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1704} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1705} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1706} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 1707} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1708} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1709} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1710} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1711} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1712} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1713} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1714} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 1715} SerialPhysicalZero_2__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_2__Loc == SerialPhysicalZero_2;
    assume SerialPhysicalZero_2 != 0;
    call {:si_unique_call 1716} SerialPhysicalZero_3__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_3__Loc == SerialPhysicalZero_3;
    assume SerialPhysicalZero_3 != 0;
    call {:si_unique_call 1717} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1718} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1719} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1720} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1721} boogieTmp := __HAVOC_malloc_or_null(40);
    assume sdv_kdpc == boogieTmp;
    call {:si_unique_call 1722} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1723} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1724} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1725} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1726} boogieTmp := __HAVOC_malloc_or_null(248);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1727} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdComPortInUse == boogieTmp;
    call {:si_unique_call 1728} vslice_dummy_var_741 := __HAVOC_malloc(4);
    call {:si_unique_call 1729} vslice_dummy_var_742 := __HAVOC_malloc(4);
    call {:si_unique_call 1730} vslice_dummy_var_743 := __HAVOC_malloc(4);
    call {:si_unique_call 1731} vslice_dummy_var_744 := __HAVOC_malloc(4);
    call {:si_unique_call 1732} vslice_dummy_var_745 := __HAVOC_malloc(4);
    call {:si_unique_call 1733} vslice_dummy_var_746 := __HAVOC_malloc(4);
    call {:si_unique_call 1734} vslice_dummy_var_747 := __HAVOC_malloc(4);
    call {:si_unique_call 1735} vslice_dummy_var_748 := __HAVOC_malloc(4);
    call {:si_unique_call 1736} vslice_dummy_var_749 := __HAVOC_malloc(4);
    call {:si_unique_call 1737} vslice_dummy_var_750 := __HAVOC_malloc(4);
    call {:si_unique_call 1738} vslice_dummy_var_751 := __HAVOC_malloc(4);
    call {:si_unique_call 1739} vslice_dummy_var_752 := __HAVOC_malloc(4);
    call {:si_unique_call 1740} vslice_dummy_var_753 := __HAVOC_malloc(4);
    call {:si_unique_call 1741} vslice_dummy_var_754 := __HAVOC_malloc(4);
    call {:si_unique_call 1742} vslice_dummy_var_755 := __HAVOC_malloc(4);
    call {:si_unique_call 1743} vslice_dummy_var_756 := __HAVOC_malloc(4);
    call {:si_unique_call 1744} vslice_dummy_var_846 := __HAVOC_malloc(60);
    call {:si_unique_call 1745} vslice_dummy_var_757 := __HAVOC_malloc(4);
    call {:si_unique_call 1746} vslice_dummy_var_758 := __HAVOC_malloc(4);
    call {:si_unique_call 1747} vslice_dummy_var_759 := __HAVOC_malloc(4);
    call {:si_unique_call 1748} vslice_dummy_var_760 := __HAVOC_malloc(4);
    call {:si_unique_call 1749} vslice_dummy_var_761 := __HAVOC_malloc(4);
    call {:si_unique_call 1750} vslice_dummy_var_762 := __HAVOC_malloc(4);
    call {:si_unique_call 1751} vslice_dummy_var_763 := __HAVOC_malloc(4);
    call {:si_unique_call 1752} vslice_dummy_var_764 := __HAVOC_malloc(4);
    call {:si_unique_call 1753} vslice_dummy_var_765 := __HAVOC_malloc(4);
    call {:si_unique_call 1754} vslice_dummy_var_766 := __HAVOC_malloc(4);
    call {:si_unique_call 1755} vslice_dummy_var_767 := __HAVOC_malloc(4);
    call {:si_unique_call 1756} vslice_dummy_var_768 := __HAVOC_malloc(4);
    call {:si_unique_call 1757} vslice_dummy_var_769 := __HAVOC_malloc(4);
    call {:si_unique_call 1758} vslice_dummy_var_770 := __HAVOC_malloc(4);
    call {:si_unique_call 1759} vslice_dummy_var_771 := __HAVOC_malloc(4);
    call {:si_unique_call 1760} vslice_dummy_var_772 := __HAVOC_malloc(4);
    call {:si_unique_call 1761} vslice_dummy_var_773 := __HAVOC_malloc(4);
    call {:si_unique_call 1762} vslice_dummy_var_774 := __HAVOC_malloc(4);
    call {:si_unique_call 1763} vslice_dummy_var_775 := __HAVOC_malloc(4);
    call {:si_unique_call 1764} vslice_dummy_var_776 := __HAVOC_malloc(4);
    call {:si_unique_call 1765} vslice_dummy_var_777 := __HAVOC_malloc(4);
    call {:si_unique_call 1766} vslice_dummy_var_778 := __HAVOC_malloc(4);
    call {:si_unique_call 1767} vslice_dummy_var_779 := __HAVOC_malloc(4);
    call {:si_unique_call 1768} vslice_dummy_var_780 := __HAVOC_malloc(4);
    call {:si_unique_call 1769} vslice_dummy_var_781 := __HAVOC_malloc(4);
    call {:si_unique_call 1770} vslice_dummy_var_847 := __HAVOC_malloc(60);
    call {:si_unique_call 1771} vslice_dummy_var_782 := __HAVOC_malloc(4);
    call {:si_unique_call 1772} vslice_dummy_var_783 := __HAVOC_malloc(4);
    call {:si_unique_call 1773} vslice_dummy_var_784 := __HAVOC_malloc(4);
    call {:si_unique_call 1774} vslice_dummy_var_785 := __HAVOC_malloc(4);
    call {:si_unique_call 1775} vslice_dummy_var_786 := __HAVOC_malloc(4);
    call {:si_unique_call 1776} vslice_dummy_var_787 := __HAVOC_malloc(4);
    call {:si_unique_call 1777} vslice_dummy_var_788 := __HAVOC_malloc(4);
    call {:si_unique_call 1778} vslice_dummy_var_789 := __HAVOC_malloc(4);
    call {:si_unique_call 1779} vslice_dummy_var_790 := __HAVOC_malloc(4);
    call {:si_unique_call 1780} vslice_dummy_var_791 := __HAVOC_malloc(4);
    call {:si_unique_call 1781} vslice_dummy_var_792 := __HAVOC_malloc(4);
    call {:si_unique_call 1782} vslice_dummy_var_793 := __HAVOC_malloc(4);
    call {:si_unique_call 1783} vslice_dummy_var_794 := __HAVOC_malloc(4);
    call {:si_unique_call 1784} vslice_dummy_var_795 := __HAVOC_malloc(4);
    call {:si_unique_call 1785} vslice_dummy_var_796 := __HAVOC_malloc(4);
    call {:si_unique_call 1786} vslice_dummy_var_797 := __HAVOC_malloc(4);
    call {:si_unique_call 1787} vslice_dummy_var_798 := __HAVOC_malloc(4);
    call {:si_unique_call 1788} vslice_dummy_var_799 := __HAVOC_malloc(4);
    call {:si_unique_call 1789} vslice_dummy_var_800 := __HAVOC_malloc(4);
    call {:si_unique_call 1790} vslice_dummy_var_801 := __HAVOC_malloc(4);
    call {:si_unique_call 1791} vslice_dummy_var_802 := __HAVOC_malloc(4);
    call {:si_unique_call 1792} vslice_dummy_var_803 := __HAVOC_malloc(4);
    call {:si_unique_call 1793} vslice_dummy_var_804 := __HAVOC_malloc(4);
    call {:si_unique_call 1794} vslice_dummy_var_805 := __HAVOC_malloc(4);
    call {:si_unique_call 1795} vslice_dummy_var_806 := __HAVOC_malloc(4);
    call {:si_unique_call 1796} vslice_dummy_var_807 := __HAVOC_malloc(4);
    call {:si_unique_call 1797} vslice_dummy_var_808 := __HAVOC_malloc(4);
    call {:si_unique_call 1798} vslice_dummy_var_809 := __HAVOC_malloc(4);
    call {:si_unique_call 1799} vslice_dummy_var_810 := __HAVOC_malloc(4);
    call {:si_unique_call 1800} vslice_dummy_var_811 := __HAVOC_malloc(4);
    call {:si_unique_call 1801} vslice_dummy_var_812 := __HAVOC_malloc(4);
    call {:si_unique_call 1802} vslice_dummy_var_813 := __HAVOC_malloc(4);
    call {:si_unique_call 1803} vslice_dummy_var_814 := __HAVOC_malloc(4);
    call {:si_unique_call 1804} vslice_dummy_var_815 := __HAVOC_malloc(4);
    call {:si_unique_call 1805} vslice_dummy_var_816 := __HAVOC_malloc(4);
    call {:si_unique_call 1806} vslice_dummy_var_817 := __HAVOC_malloc(4);
    call {:si_unique_call 1807} vslice_dummy_var_818 := __HAVOC_malloc(4);
    call {:si_unique_call 1808} vslice_dummy_var_819 := __HAVOC_malloc(4);
    call {:si_unique_call 1809} vslice_dummy_var_820 := __HAVOC_malloc(4);
    call {:si_unique_call 1810} vslice_dummy_var_821 := __HAVOC_malloc(4);
    call {:si_unique_call 1811} vslice_dummy_var_822 := __HAVOC_malloc(4);
    call {:si_unique_call 1812} vslice_dummy_var_823 := __HAVOC_malloc(4);
    call {:si_unique_call 1813} vslice_dummy_var_824 := __HAVOC_malloc(4);
    call {:si_unique_call 1814} vslice_dummy_var_825 := __HAVOC_malloc(4);
    call {:si_unique_call 1815} vslice_dummy_var_826 := __HAVOC_malloc(4);
    call {:si_unique_call 1816} vslice_dummy_var_827 := __HAVOC_malloc(4);
    call {:si_unique_call 1817} vslice_dummy_var_828 := __HAVOC_malloc(4);
    call {:si_unique_call 1818} vslice_dummy_var_829 := __HAVOC_malloc(4);
    call {:si_unique_call 1819} vslice_dummy_var_830 := __HAVOC_malloc(4);
    call {:si_unique_call 1820} vslice_dummy_var_831 := __HAVOC_malloc(4);
    call {:si_unique_call 1821} vslice_dummy_var_832 := __HAVOC_malloc(4);
    call {:si_unique_call 1822} vslice_dummy_var_833 := __HAVOC_malloc(4);
    call {:si_unique_call 1823} vslice_dummy_var_834 := __HAVOC_malloc(4);
    call {:si_unique_call 1824} vslice_dummy_var_835 := __HAVOC_malloc(4);
    call {:si_unique_call 1825} vslice_dummy_var_836 := __HAVOC_malloc(4);
    call {:si_unique_call 1826} vslice_dummy_var_837 := __HAVOC_malloc(4);
    call {:si_unique_call 1827} vslice_dummy_var_838 := __HAVOC_malloc(4);
    call {:si_unique_call 1828} vslice_dummy_var_839 := __HAVOC_malloc(4);
    call {:si_unique_call 1829} vslice_dummy_var_840 := __HAVOC_malloc(4);
    call {:si_unique_call 1830} vslice_dummy_var_841 := __HAVOC_malloc(4);
    call {:si_unique_call 1831} vslice_dummy_var_842 := __HAVOC_malloc(4);
    call {:si_unique_call 1832} vslice_dummy_var_843 := __HAVOC_malloc(4);
    call {:si_unique_call 1833} vslice_dummy_var_844 := __HAVOC_malloc(4);
    call {:si_unique_call 1834} vslice_dummy_var_845 := __HAVOC_malloc(4);
    assume {:mainInitDone} true;
    call {:si_unique_call 1835} corralExtraInit();
    call {:si_unique_call 1836} corralExplainErrorInit();
    call {:si_unique_call 1837} _sdv_init23();
    call {:si_unique_call 1838} _sdv_init18();
    call {:si_unique_call 1839} _sdv_init19();
    call {:si_unique_call 1840} _sdv_init17();
    call {:si_unique_call 1841} _sdv_init1();
    call {:si_unique_call 1842} _sdv_init4();
    call {:si_unique_call 1843} _sdv_init5();
    call {:si_unique_call 1844} _sdv_init3();
    call {:si_unique_call 1845} _sdv_init16();
    call {:si_unique_call 1846} _sdv_init14();
    call {:si_unique_call 1847} _sdv_init21();
    call {:si_unique_call 1848} _sdv_init6();
    call {:si_unique_call 1849} _sdv_init15();
    call {:si_unique_call 1850} _sdv_init10();
    call {:si_unique_call 1851} _sdv_init11();
    call {:si_unique_call 1852} _sdv_init9();
    call {:si_unique_call 1853} _sdv_init12();
    call {:si_unique_call 1854} _sdv_init13();
    call {:si_unique_call 1855} _sdv_init7();
    call {:si_unique_call 1856} _sdv_init8();
    call {:si_unique_call 1857} _sdv_init2();
    call {:si_unique_call 1858} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_888 := 0;
    goto L46;

  L46:
    assume Tmp_888 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_887 := 0;
    goto L50;

  L50:
    assume Tmp_887 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1859} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L44;

  L44:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L44;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_887 := 1;
    goto L50;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_888 := 1;
    goto L46;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data_1: int, actual_DataSize: int) returns (Tmp_889: int);
  free ensures {:va_keep} Tmp_889 == -1073741790 || Tmp_889 == -1073741816 || Tmp_889 == -1073741823 || Tmp_889 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data_1: int, actual_DataSize: int) returns (Tmp_889: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_889 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_889 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_889 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_889 := 0;
    goto L1;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_891: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_891: int)
{
  var {:pointer} sdv_640: int;

  anon0:
    call {:si_unique_call 1860} sdv_640 := __HAVOC_malloc(1);
    Tmp_891 := sdv_640;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_456: int;

  anon0:
    call {:si_unique_call 1861} vslice_dummy_var_456 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_14: int) returns (Tmp_895: int);
  free ensures {:va_keep} Tmp_895 == 0 || Tmp_895 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_14: int) returns (Tmp_895: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_895 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_895 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_897: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_897: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_897 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_899: int);
  modifies Mem_T.CancelRoutine__IRP, alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunRemoveDevice"} {:osmodel} sdv_RunRemoveDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_899: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_29: int;
  var {:pointer} po: int;
  var {:pointer} pirp_10: int;

  anon0:
    po := actual_po;
    pirp_10 := actual_pirp_10;
    status_29 := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    havoc ps;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_10)] := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1862} sdv_stub_dispatch_begin();
    call {:si_unique_call 1863} sdv_SetStatus(pirp_10);
    call {:si_unique_call 1864} status_29 := SerialPnpDispatch(po, pirp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1865} sdv_stub_dispatch_end(status_29, 0);
    Tmp_899 := status_29;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_457: int;

  anon0:
    call {:si_unique_call 1866} vslice_dummy_var_457 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_458: int;

  anon0:
    call {:si_unique_call 1867} vslice_dummy_var_458 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_459: int;

  anon0:
    call {:si_unique_call 1868} vslice_dummy_var_459 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_907: int);
  free ensures {:va_keep} Tmp_907 == 0 || Tmp_907 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_907: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_907 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_907 := 0;
    goto L1;
}



procedure {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po_1: int, actual_pirp_11: int)
{
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;

  anon0:
    call {:si_unique_call 1869} vslice_dummy_var_460 := __HAVOC_malloc(4);
    call {:si_unique_call 1870} sdv_stub_startio_begin();
    call {:si_unique_call 1871} vslice_dummy_var_461 := sdv_DoNothing();
    call {:si_unique_call 1872} sdv_stub_startio_end();
    return;
}



procedure {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_911: int);
  free ensures {:va_keep} Tmp_911 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_911: int)
{

  anon0:
    Tmp_911 := 1;
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_462: int;

  anon0:
    call {:si_unique_call 1873} vslice_dummy_var_462 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_915: int);
  modifies Mem_T.INT4, Mem_T.CancelRoutine__IRP, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po_2: int, actual_pirp_12: int) returns (Tmp_915: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} status_30: int;
  var {:pointer} po_2: int;
  var {:pointer} pirp_12: int;

  anon0:
    po_2 := actual_po_2;
    pirp_12 := actual_pirp_12;
    status_30 := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps_1;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_12))] := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_12)] := 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 1874} sdv_SetStatus(pirp_12);
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1875} sdv_stub_dispatch_begin();
    call {:si_unique_call 1876} status_30 := SerialPnpDispatch(po_2, pirp_12);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1877} sdv_stub_dispatch_end(status_30, 0);
    Tmp_915 := status_30;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin()
{
  var vslice_dummy_var_463: int;

  anon0:
    call {:si_unique_call 1878} vslice_dummy_var_463 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    return;
}



procedure {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value: int, actual_Base: int, actual_String: int) returns (Tmp_919: int);
  free ensures {:va_keep} Tmp_919 == 0 || Tmp_919 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlIntegerToUnicodeString"} {:osmodel} RtlIntegerToUnicodeString(actual_Value: int, actual_Base: int, actual_String: int) returns (Tmp_919: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_919 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_919 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_464: int;

  anon0:
    call {:si_unique_call 1879} vslice_dummy_var_464 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwEnumerateKey"} {:osmodel} ZwEnumerateKey(actual_KeyHandle_1: int, actual_Index: int, actual_KeyInformationClass: int, actual_KeyInformation: int, actual_Length_2: int, actual_ResultLength: int) returns (Tmp_923: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_923 == -1073741823 || Tmp_923 == 26 || Tmp_923 == -1073741811 || Tmp_923 == 0 || Tmp_923 == 5 || Tmp_923 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwEnumerateKey"} {:osmodel} ZwEnumerateKey(actual_KeyHandle_1: int, actual_Index: int, actual_KeyInformationClass: int, actual_KeyInformation: int, actual_Length_2: int, actual_ResultLength: int) returns (Tmp_923: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_646: int;
  var {:scalar} Length_2: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_2 := actual_Length_2;
    ResultLength := actual_ResultLength;
    L := sdv_646;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 0 >= L;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} L != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} L == -1;
    Tmp_923 := -1073741823;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} L != -1;
    Tmp_923 := 26;
    goto L1;

  anon14_Then:
    assume {:partition} L == 0;
    Tmp_923 := -1073741811;
    goto L1;

  anon18_Then:
    assume {:partition} L > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L == Length_2;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Length_2 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_923 := 0;
    goto L1;

  anon16_Then:
    assume {:partition} Length_2 == 0;
    goto L14;

  L14:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} L > Length_2;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_923 := 5;
    goto L1;

  anon15_Then:
    assume {:partition} Length_2 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_923 := -1073741789;
    goto L1;

  anon13_Then:
    assume {:partition} L != Length_2;
    goto L14;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_465: int;

  anon0:
    call {:si_unique_call 1880} vslice_dummy_var_465 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_NewIrql;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_466: int;

  anon0:
    call {:si_unique_call 1881} vslice_dummy_var_466 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    sdv_irql_current := NewIrql;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "IoReportDetectedDevice"} {:osmodel} IoReportDetectedDevice(actual_DriverObject_6: int, actual_LegacyBusType: int, actual_BusNumber_1: int, actual_SlotNumber: int, actual_ResourceList: int, actual_ResourceRequirements: int, actual_ResourceAssigned: int, actual_DeviceObject_16: int) returns (Tmp_929: int);
  free ensures {:va_keep} Tmp_929 == 0 || Tmp_929 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoReportDetectedDevice"} {:osmodel} IoReportDetectedDevice(actual_DriverObject_6: int, actual_LegacyBusType: int, actual_BusNumber_1: int, actual_SlotNumber: int, actual_ResourceList: int, actual_ResourceRequirements: int, actual_ResourceAssigned: int, actual_DeviceObject_16: int) returns (Tmp_929: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_929 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_929 := -1073741823;
    goto L1;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber_2: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_4: int) returns (Tmp_931: int);
  free ensures {:va_keep} Tmp_931 == 0 || Tmp_931 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber_2: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_4: int) returns (Tmp_931: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_931 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_931 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_13: int)
{
  var vslice_dummy_var_467: int;

  anon0:
    call {:si_unique_call 1882} vslice_dummy_var_467 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_14: int)
{
  var vslice_dummy_var_468: int;

  anon0:
    call {:si_unique_call 1883} vslice_dummy_var_468 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_1: int)
{
  var vslice_dummy_var_469: int;

  anon0:
    call {:si_unique_call 1884} vslice_dummy_var_469 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_939: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_2) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 0 || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_3: int, actual_pirp_15: int) returns (Tmp_939: int)
{
  var {:pointer} ps_2: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_941: int;
  var {:scalar} sdv_657: int;
  var {:scalar} status_31: int;
  var {:scalar} Tmp_942: int;
  var {:pointer} po_3: int;
  var {:pointer} pirp_15: int;

  anon0:
    po_3 := actual_po_3;
    pirp_15 := actual_pirp_15;
    status_31 := 0;
    minor := sdv_657;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    havoc ps_2;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    call {:si_unique_call 1885} sdv_SetStatus(pirp_15);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(pirp_15)] := 0;
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1886} sdv_stub_dispatch_begin();
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto L60;

  L60:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    Tmp_941 := 0;
    goto L210;

  L210:
    assume Tmp_941 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L66;

  L66:
    call {:si_unique_call 1887} status_31 := SerialPnpDispatch(po_3, pirp_15);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1888} sdv_stub_dispatch_end(status_31, 0);
    assume {:nonnull} pirp_15 != 0;
    assume pirp_15 > 0;
    Tmp_939 := status_31;
    goto LM2;

  LM2:
    return;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    goto L66;

  anon53_Then:
    Tmp_941 := 1;
    goto L210;

  anon51_Then:
    goto L61;

  anon71_Then:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    Tmp_942 := 0;
    goto L216;

  L216:
    assume Tmp_942 != 0;
    goto L60;

  anon50_Then:
    Tmp_942 := 1;
    goto L216;

  anon54_Then:
    call {:si_unique_call 1889} status_31 := sdv_DoNothing();
    goto L72;

  anon55_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1890} status_31 := SerialSystemControlDispatch(po_3, pirp_15);
    goto L72;

  anon56_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1891} sdv_SetPowerIrpMinorFunction(pirp_15);
    call {:si_unique_call 1892} status_31 := SerialPowerDispatch(po_3, pirp_15);
    goto L72;

  anon57_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1893} status_31 := SerialCleanup(po_3, pirp_15);
    goto L72;

  anon58_Then:
    call {:si_unique_call 1894} status_31 := sdv_DoNothing();
    goto L72;

  anon59_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1895} status_31 := sdv_DoNothing();
    goto L72;

  anon60_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1896} status_31 := SerialInternalIoControl(po_3, pirp_15);
    goto L72;

  anon61_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1897} status_31 := SerialIoControl(po_3, pirp_15);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    call {:si_unique_call 1898} status_31 := sdv_DoNothing();
    goto L72;

  anon63_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1899} status_31 := SerialFlush(po_3, pirp_15);
    goto L72;

  anon64_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1900} status_31 := SerialSetInformationFile(po_3, pirp_15);
    goto L72;

  anon65_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1901} status_31 := SerialQueryInformationFile(po_3, pirp_15);
    goto L72;

  anon66_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1902} status_31 := SerialWrite(po_3, pirp_15);
    goto L72;

  anon67_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1903} status_31 := SerialRead(po_3, pirp_15);
    goto L72;

  anon68_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1904} status_31 := SerialClose(po_3, pirp_15);
    goto L72;

  anon49_Then:
    assume {:nonnull} ps_2 != 0;
    assume ps_2 > 0;
    call {:si_unique_call 1905} status_31 := SerialCreateOpen(po_3, pirp_15);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon69_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_943: int);
  free ensures {:va_keep} Tmp_943 == -1073741823 || Tmp_943 == -1073741808 || Tmp_943 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_943: int)
{
  var {:scalar} Tmp_945: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_943 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_943 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_945 := 0;
    goto L22;

  L22:
    assume Tmp_945 != 0;
    Tmp_943 := 0;
    goto L1;

  anon8_Then:
    Tmp_945 := 1;
    goto L22;
}



procedure {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_946: int);
  free ensures {:va_keep} Tmp_946 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_946: int)
{

  anon0:
    Tmp_946 := 1;
    return;
}



procedure {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_948: int);
  free ensures {:va_keep} Tmp_948 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_948: int)
{

  anon0:
    Tmp_948 := 0;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int)
{
  var {:scalar} new_2: int;
  var vslice_dummy_var_470: int;

  anon0:
    call {:si_unique_call 1906} vslice_dummy_var_470 := __HAVOC_malloc(4);
    new_2 := actual_new_2;
    sdv_irql_current := new_2;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_16: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_471: int;

  anon0:
    call {:si_unique_call 1907} vslice_dummy_var_471 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int)
{
  var vslice_dummy_var_472: int;

  anon0:
    call {:si_unique_call 1908} vslice_dummy_var_472 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength_1: int) returns (Tmp_956: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_956 == -1073741811 || Tmp_956 == -1073741823 || Tmp_956 == 0 || Tmp_956 == 5 || Tmp_956 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_2: int, actual_ValueName_2: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength_1: int) returns (Tmp_956: int)
{
  var {:scalar} L_1: int;
  var {:scalar} sdv_669: int;
  var {:scalar} Length_4: int;
  var {:pointer} ResultLength_1: int;

  anon0:
    Length_4 := actual_Length_4;
    ResultLength_1 := actual_ResultLength_1;
    L_1 := sdv_669;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L_1 == 0;
    Tmp_956 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L_1 != 0;
    Tmp_956 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L_1 == Length_4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_4 != 0;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Mem_T.INT4[ResultLength_1] := L_1;
    Tmp_956 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_4 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L_1 > Length_4;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Mem_T.INT4[ResultLength_1] := L_1;
    Tmp_956 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_4 >= L_1;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Mem_T.INT4[ResultLength_1] := L_1;
    Tmp_956 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L_1 != Length_4;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_2: int, actual_CacheType: int) returns (Tmp_958: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_2: int, actual_CacheType: int) returns (Tmp_958: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 1909} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Mem_T.INT4[LowPart__LUID(PhysicalAddress)] := Mem_T.INT4[LowPart__LUID(structPtr888PhysicalAddress)];
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(PhysicalAddress))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888PhysicalAddress))];
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_958 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_17: int)
{
  var vslice_dummy_var_473: int;

  anon0:
    call {:si_unique_call 1910} vslice_dummy_var_473 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_962: int);
  free ensures {:va_keep} Tmp_962 == 1 || Tmp_962 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_962: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 1911} b := OneOfTwoBOOLEAN();
    Tmp_962 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_474: int;

  anon0:
    call {:si_unique_call 1912} vslice_dummy_var_474 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_966: int);
  free ensures {:va_keep} Tmp_966 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_966: int)
{

  anon0:
    Tmp_966 := 0;
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_18: int)
{
  var vslice_dummy_var_475: int;

  anon0:
    call {:si_unique_call 1913} vslice_dummy_var_475 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_972: int);
  free ensures {:va_keep} Tmp_972 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_972: int)
{

  anon0:
    Tmp_972 := 0;
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_974: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_974: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_974 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_2: int)
{
  var vslice_dummy_var_476: int;

  anon0:
    call {:si_unique_call 1914} vslice_dummy_var_476 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_978: int);
  free ensures {:va_keep} Tmp_978 == 1 || Tmp_978 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_978: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_978 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_978 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_980: int);
  free ensures {:va_keep} Tmp_980 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_980: int)
{

  anon0:
    Tmp_980 := 1;
    return;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_17: int, actual_Irp_15: int) returns (Tmp_982: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_982 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_17: int, actual_Irp_15: int) returns (Tmp_982: int)
{
  var {:scalar} status_32: int;
  var {:pointer} Irp_15: int;

  anon0:
    Irp_15 := actual_Irp_15;
    status_32 := 259;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 259;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L25;

  L25:
    Tmp_982 := status_32;
    return;

  anon32_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L25;

  anon31_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L19;

  anon39_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741823;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L44;

  L44:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L46;

  L46:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L44;

  anon40_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741536;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L28;

  L28:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L30;

  L30:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L25;

  anon33_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L28;

  anon41_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L36;

  L36:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L38;

  L38:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L36;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_477: int;

  anon0:
    call {:si_unique_call 1915} vslice_dummy_var_477 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_3: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_986: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_986 == 0 || Tmp_986 == -1073741727;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_3: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_986: int)
{
  var {:pointer} sdv_674: int;
  var {:pointer} KeyHandle_3: int;

  anon0:
    KeyHandle_3 := actual_KeyHandle_3;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1916} sdv_674 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_3 != 0;
    assume KeyHandle_3 > 0;
    Tmp_986 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_3 != 0;
    assume KeyHandle_3 > 0;
    Tmp_986 := -1073741727;
    goto L1;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_2: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_2: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_478: int;

  anon0:
    call {:si_unique_call 1917} vslice_dummy_var_478 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_2 := actual_Type_2;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int)
{
  var vslice_dummy_var_479: int;

  anon0:
    call {:si_unique_call 1918} vslice_dummy_var_479 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_18: int, actual_Irp_16: int) returns (Tmp_992: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_992 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_18: int, actual_Irp_16: int) returns (Tmp_992: int)
{
  var {:pointer} Irp_16: int;

  anon0:
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 1919} Tmp_992 := IofCallDriver(0, Irp_16);
    return;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int)
{
  var {:pointer} p_4: int;
  var vslice_dummy_var_480: int;

  anon0:
    call {:si_unique_call 1920} vslice_dummy_var_480 := __HAVOC_malloc(4);
    p_4 := actual_p_4;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p_4 != 0;
    assume p_4 > 0;
    Mem_T.INT4[p_4] := sdv_irql_previous;
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_996: int);
  free ensures {:va_keep} Tmp_996 == 0 || Tmp_996 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_996: int)
{
  var {:scalar} Tmp_997: int;
  var {:scalar} choice_18: int;
  var {:scalar} Status_4: int;

  anon0:
    Status_4 := actual_Status_4;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_4;
    Tmp_996 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_4 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_18 != 0;
    Tmp_997 := 1;
    goto L14;

  L14:
    Tmp_996 := Tmp_997;
    goto L1;

  anon8_Then:
    assume {:partition} choice_18 == 0;
    Tmp_997 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L9;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int)
{
  var {:pointer} SpinLock_2: int;
  var vslice_dummy_var_481: int;

  anon0:
    call {:si_unique_call 1921} vslice_dummy_var_481 := __HAVOC_malloc(4);
    SpinLock_2 := actual_SpinLock_2;
    assume {:nonnull} SpinLock_2 != 0;
    assume SpinLock_2 > 0;
    Mem_T.INT4[SpinLock_2] := 0;
    return;
}



procedure {:origName "_sdv_init21"} {:osmodel} _sdv_init21();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init21"} {:osmodel} _sdv_init21()
{
  var vslice_dummy_var_482: int;

  anon0:
    call {:si_unique_call 1922} vslice_dummy_var_482 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant545;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant548;
    assume sdv_p_devobj_top == sdv_devobj_top;
    Mem_T.INT4[sdv_MmMapIoSpace_int] := 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_3: int, actual_Tag_1: int) returns (Tmp_1003: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_3: int, actual_Tag_1: int) returns (Tmp_1003: int)
{
  var {:pointer} sdv_678: int;
  var {:scalar} PoolType_1: int;
  var {:scalar} NumberOfBytes_3: int;

  anon0:
    PoolType_1 := actual_PoolType_1;
    NumberOfBytes_3 := actual_NumberOfBytes_3;
    call {:si_unique_call 1923} SLIC_ExAllocatePoolWithTag_entry(strConst__li2bpl253, PoolType_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1924} sdv_678 := __HAVOC_malloc(NumberOfBytes_3);
    Tmp_1003 := sdv_678;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    Tmp_1003 := 0;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1005: int);
  free ensures {:va_keep} Tmp_1005 == 0 || Tmp_1005 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_2: int, actual_Path_2: int, actual_ValueName_3: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_1005: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_1005 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_1005 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int)
{
  var {:pointer} pdrivo: int;
  var vslice_dummy_var_483: int;

  anon0:
    call {:si_unique_call 1925} vslice_dummy_var_483 := __HAVOC_malloc(4);
    pdrivo := actual_pdrivo;
    call {:si_unique_call 1926} SerialUnload(pdrivo);
    return;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1009: int);
  free ensures {:va_keep} Tmp_1009 == -1073741772 || Tmp_1009 == -1073741824 || Tmp_1009 == -1073741789 || Tmp_1009 == -1073741670 || Tmp_1009 == -1073741808 || Tmp_1009 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_1009: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_1009 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_1009 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_1009 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_1009 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_1009 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_1009 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_3: int, actual_Vector: int, actual_Irql_1: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1011: int);
  free ensures {:va_keep} Tmp_1011 == -1073741811 || Tmp_1011 == -1073741670 || Tmp_1011 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_3: int, actual_Vector: int, actual_Irql_1: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_1011: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_1011 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_1011 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_1011 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_484: int;

  anon0:
    call {:si_unique_call 1927} vslice_dummy_var_484 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_485: int;

  anon0:
    call {:si_unique_call 1928} vslice_dummy_var_485 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_19: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1017: int);
  free ensures {:va_keep} Tmp_1017 == -1073741811 || Tmp_1017 == -1073741808 || Tmp_1017 == -1073741823 || Tmp_1017 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_19: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_1017: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1017 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_1017 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_1017 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_1017 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_2: int) returns (Tmp_1019: int);
  free ensures {:va_keep} Tmp_1019 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_2: int) returns (Tmp_1019: int)
{

  anon0:
    Tmp_1019 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1021: int);
  free ensures {:va_keep} Tmp_1021 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_1021: int)
{

  anon0:
    Tmp_1021 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_20: int, actual_Action: int) returns (Tmp_1023: int);
  free ensures {:va_keep} Tmp_1023 == -1073741823 || Tmp_1023 == -1073741811 || Tmp_1023 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_20: int, actual_Action: int) returns (Tmp_1023: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_1023 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_1023 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_1023 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_486: int;

  anon0:
    call {:si_unique_call 1929} vslice_dummy_var_486 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_9: int) returns (Tmp_1027: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_9: int) returns (Tmp_1027: int)
{
  var {:pointer} Tmp_1028: int;
  var {:pointer} Tmp_1030: int;
  var {:pointer} pDevExt_11: int;
  var {:pointer} PDevObj_9: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;

  anon0:
    PDevObj_9 := actual_PDevObj_9;
    call {:si_unique_call 1930} Tmp_1028 := __HAVOC_malloc(96);
    call {:si_unique_call 1931} Tmp_1030 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_9 != 0;
    assume PDevObj_9 > 0;
    havoc pDevExt_11;
    call {:si_unique_call 1932} sdv_do_paged_code_check();
    Tmp_1030 := strConst__li2bpl254;
    call {:si_unique_call 1933} vslice_dummy_var_487 := SerialDbgPrintEx(2, Tmp_1030);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 8) != 0;
    goto L15;

  L15:
    call {:si_unique_call 1934} IoDetachDevice(0);
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1935} sdv_ExFreePool(0);
    goto L19;

  L19:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1936} sdv_ExFreePool(0);
    goto L23;

  L23:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1937} sdv_ExFreePool(0);
    goto L27;

  L27:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    call {:si_unique_call 1938} sdv_ExFreePool(0);
    goto L31;

  L31:
    call {:si_unique_call 1939} IoDeleteDevice(0);
    Tmp_1028 := strConst__li2bpl255;
    call {:si_unique_call 1940} vslice_dummy_var_488 := SerialDbgPrintEx(2, Tmp_1028);
    Tmp_1027 := 0;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    goto L31;

  anon16_Then:
    goto L27;

  anon15_Then:
    goto L23;

  anon14_Then:
    goto L19;

  anon13_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_11)], 8) == 0;
    call {:si_unique_call 1941} SerialDisableInterfacesResources(PDevObj_9, 1);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L15;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialUnload"} SerialUnload(actual_DriverObject_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUnload"} SerialUnload(actual_DriverObject_7: int)
{
  var {:pointer} Tmp_1036: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_491: int;

  anon0:
    call {:si_unique_call 1942} vslice_dummy_var_489 := __HAVOC_malloc(4);
    call {:si_unique_call 1943} Tmp_1036 := __HAVOC_malloc(68);
    call {:si_unique_call 1944} sdv_do_paged_code_check();
    call {:si_unique_call 1945} vslice_dummy_var_490 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant369);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1946} sdv_ExFreePool(0);
    goto L13;

  L13:
    Tmp_1036 := strConst__li2bpl256;
    call {:si_unique_call 1947} vslice_dummy_var_491 := SerialDbgPrintEx(6, Tmp_1036);
    call {:si_unique_call 1948} MmUnlockPagableImageSection(0);
    return;

  anon3_Then:
    goto L13;
}



procedure {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_10: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_10: int)
{
  var {:pointer} Tmp_1038: int;
  var {:pointer} Tmp_1039: int;
  var {:pointer} pDevExt_12: int;
  var {:pointer} Tmp_1040: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} Tmp_1041: int;
  var {:pointer} Tmp_1042: int;
  var {:pointer} Tmp_1043: int;
  var {:pointer} Tmp_1044: int;
  var {:pointer} PDevObj_10: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_495: int;
  var vslice_dummy_var_848: int;
  var vslice_dummy_var_849: int;
  var vslice_dummy_var_850: int;
  var vslice_dummy_var_851: int;
  var vslice_dummy_var_852: int;
  var vslice_dummy_var_853: int;

  anon0:
    call {:si_unique_call 1949} vslice_dummy_var_492 := __HAVOC_malloc(4);
    PDevObj_10 := actual_PDevObj_10;
    call {:si_unique_call 1950} Tmp_1038 := __HAVOC_malloc(112);
    call {:si_unique_call 1951} Tmp_1040 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_10 != 0;
    assume PDevObj_10 > 0;
    havoc pDevExt_12;
    Tmp_1038 := strConst__li2bpl258;
    call {:si_unique_call 1952} vslice_dummy_var_494 := SerialDbgPrintEx(2, Tmp_1038);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1953} SerialKillAllReadsOrWrites(PDevObj_10, WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_12), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(pDevExt_12));
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1954} SerialKillAllReadsOrWrites(PDevObj_10, ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_12), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(pDevExt_12));
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1955} SerialKillAllReadsOrWrites(PDevObj_10, PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_12), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(pDevExt_12));
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    call {:si_unique_call 1956} SerialKillAllReadsOrWrites(PDevObj_10, MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_12), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(pDevExt_12));
    call {:si_unique_call 1957} Tmp_1042 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1042 != 0;
    assume Tmp_1042 > 0;
    Mem_T.INT4[Tmp_1042] := oldIrql_2;
    call {:si_unique_call 1958} IoAcquireCancelSpinLock(Tmp_1042);
    assume {:nonnull} Tmp_1042 != 0;
    assume Tmp_1042 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_1042];
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_1044;
    assume {:nonnull} Tmp_1044 != 0;
    assume Tmp_1044 > 0;
    cancelRoutine := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1044)];
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_1039;
    assume {:nonnull} Tmp_1039 != 0;
    assume Tmp_1039 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} cancelRoutine != 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_1041;
    assume {:nonnull} Tmp_1041 != 0;
    assume Tmp_1041 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(Tmp_1041)] := oldIrql_2;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc Tmp_1043;
    assume {:nonnull} Tmp_1043 != 0;
    assume Tmp_1043 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1043)] := 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant214;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_848;
    call {:si_unique_call 1959} SerialCancelCurrentWrite(PDevObj_10, vslice_dummy_var_848);
    goto L40;

  L40:
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 1960} vslice_dummy_var_493 := IoCancelIrp(0);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto L41;

  L41:
    call {:si_unique_call 1961} SerialKillAllStalled(PDevObj_10);
    Tmp_1040 := strConst__li2bpl257;
    call {:si_unique_call 1962} vslice_dummy_var_495 := SerialDbgPrintEx(2, Tmp_1040);
    return;

  anon18_Then:
    goto L41;

  anon22_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant218;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_849;
    call {:si_unique_call 1963} SerialCancelCurrentXoff(PDevObj_10, vslice_dummy_var_849);
    goto L40;

  anon21_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant351;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_850;
    call {:si_unique_call 1964} SerialCancelImmediate(PDevObj_10, vslice_dummy_var_850);
    goto L40;

  anon20_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant166;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_851;
    call {:si_unique_call 1965} SerialCancelQueued(PDevObj_10, vslice_dummy_var_851);
    goto L40;

  anon19_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant197;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_852;
    call {:si_unique_call 1966} SerialCancelWait(PDevObj_10, vslice_dummy_var_852);
    goto L40;

  anon24_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant168;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    havoc vslice_dummy_var_853;
    call {:si_unique_call 1967} SerialFilterCancelQueued(PDevObj_10, vslice_dummy_var_853);
    goto L40;

  anon23_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 1968} IoReleaseCancelSpinLock(oldIrql_2);
    goto L40;

  anon17_Then:
    call {:si_unique_call 1969} IoReleaseCancelSpinLock(oldIrql_2);
    goto L40;
}



procedure {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType_1: int, actual_BusNumber_3: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes_4: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_1046: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType_1: int, actual_BusNumber_3: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes_4: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_1046: int)
{
  var {:scalar} IoAddress: int;
  var {:scalar} Tmp_1047: int;
  var {:pointer} address: int;
  var {:scalar} Tmp_1049: int;
  var {:pointer} structPtr888IoAddress: int;
  var {:scalar} NumberOfBytes_4: int;
  var {:scalar} AddressSpace: int;
  var {:pointer} MappedAddress: int;

  anon0:
    call {:si_unique_call 1970} IoAddress := __HAVOC_malloc(20);
    call {:si_unique_call 1971} Tmp_1047 := __HAVOC_malloc(20);
    structPtr888IoAddress := actual_structPtr888IoAddress;
    NumberOfBytes_4 := actual_NumberOfBytes_4;
    AddressSpace := actual_AddressSpace;
    MappedAddress := actual_MappedAddress;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    Mem_T.INT4[LowPart__LUID(IoAddress)] := Mem_T.INT4[LowPart__LUID(structPtr888IoAddress)];
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(IoAddress))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888IoAddress))];
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    call {:si_unique_call 1972} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} AddressSpace != 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    address := Mem_T.INT4[LowPart__LUID(IoAddress)];
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := 0;
    goto L12;

  L12:
    Tmp_1046 := address;
    return;

  anon5_Then:
    assume {:partition} AddressSpace == 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1047 != 0;
    assume Tmp_1047 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1047)] := Mem_T.INT4[LowPart__LUID(IoAddress)];
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1047 != 0;
    assume Tmp_1047 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1047 != 0;
    assume Tmp_1047 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1047))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(IoAddress))];
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1047 != 0;
    assume Tmp_1047 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_1047 != 0;
    assume Tmp_1047 > 0;
    call {:si_unique_call 1973} address := MmMapIoSpace(Tmp_1047, NumberOfBytes_4, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} address != 0;
    Tmp_1049 := 1;
    goto L20;

  L20:
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := Tmp_1049;
    goto L12;

  anon6_Then:
    assume {:partition} address == 0;
    Tmp_1049 := 0;
    goto L20;
}



procedure {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_7: int, actual_PConfigData: int, actual_PDevObj_11: int) returns (Tmp_1050: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_7: int, actual_PConfigData: int, actual_PDevObj_11: int) returns (Tmp_1050: int)
{
  var {:pointer} Tmp_1052: int;
  var {:pointer} Tmp_1053: int;
  var {:pointer} Tmp_1054: int;
  var {:pointer} Tmp_1055: int;
  var {:pointer} Tmp_1056: int;
  var {:pointer} Tmp_1057: int;
  var {:pointer} pNewExt: int;
  var {:scalar} status_33: int;
  var {:pointer} pDispatch: int;
  var {:pointer} PDevExt_7: int;
  var {:pointer} PConfigData: int;
  var {:pointer} PDevObj_11: int;
  var boogieTmp: int;
  var vslice_dummy_var_496: int;
  var vslice_dummy_var_497: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_501: int;

  anon0:
    PDevExt_7 := actual_PDevExt_7;
    PConfigData := actual_PConfigData;
    PDevObj_11 := actual_PDevObj_11;
    call {:si_unique_call 1974} Tmp_1052 := __HAVOC_malloc(116);
    call {:si_unique_call 1975} Tmp_1053 := __HAVOC_malloc(116);
    call {:si_unique_call 1976} Tmp_1055 := __HAVOC_malloc(136);
    call {:si_unique_call 1977} Tmp_1056 := __HAVOC_malloc(116);
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc pNewExt;
    call {:si_unique_call 1978} sdv_do_paged_code_check();
    Tmp_1055 := strConst__li2bpl259;
    call {:si_unique_call 1979} vslice_dummy_var_497 := SerialDbgPrintEx(2, Tmp_1055);
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    call {:si_unique_call 1980} status_33 := SerialInitOneController(PDevObj_11, PConfigData);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} yogi_error != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_33 >= 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    call {:si_unique_call 1981} boogieTmp := ExAllocatePoolWithTag(0, 76, -666022077);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    havoc pDispatch;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pDispatch != 0;
    call {:si_unique_call 1982} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 1983} vslice_dummy_var_496 := KeSynchronizeExecution(0, li2bplFunctionConstant383, 0);
    goto L26;

  L26:
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc Tmp_1057;
    assume {:nonnull} Tmp_1057 != 0;
    assume Tmp_1057 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc Tmp_1054;
    assume {:nonnull} Tmp_1054 != 0;
    assume Tmp_1054 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    call {:si_unique_call 1984} vslice_dummy_var_498 := KeSynchronizeExecution(0, li2bplFunctionConstant387, 0);
    Tmp_1052 := strConst__li2bpl261;
    call {:si_unique_call 1985} vslice_dummy_var_499 := SerialDbgPrintEx(2, Tmp_1052);
    Tmp_1050 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} pDispatch == 0;
    status_33 := -1073741670;
    Tmp_1053 := strConst__li2bpl262;
    call {:si_unique_call 1986} vslice_dummy_var_500 := SerialDbgPrintEx(2, Tmp_1053);
    Tmp_1050 := status_33;
    goto L1;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    goto L26;

  anon11_Then:
    assume {:partition} 0 > status_33;
    Tmp_1056 := strConst__li2bpl260;
    call {:si_unique_call 1987} vslice_dummy_var_501 := SerialDbgPrintEx(2, Tmp_1056);
    Tmp_1050 := status_33;
    goto L1;

  anon13_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_8: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_8: int)
{
  var {:scalar} i_2: int;
  var {:scalar} sdv_703: int;
  var {:pointer} Tmp_1058: int;
  var {:scalar} sdv_704: int;
  var {:scalar} sdv_705: int;
  var {:scalar} sdv_707: int;
  var {:scalar} sdv_708: int;
  var {:scalar} sdv_709: int;
  var {:scalar} sdv_710: int;
  var {:pointer} Tmp_1059: int;
  var {:scalar} sdv_712: int;
  var {:scalar} sdv_715: int;
  var {:pointer} Tmp_1061: int;
  var {:scalar} sdv_723: int;
  var {:pointer} Tmp_1062: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} Tmp_1063: int;
  var {:pointer} Tmp_1064: int;
  var {:scalar} sdv_728: int;
  var {:scalar} sdv_730: int;
  var {:scalar} Tmp_1065: int;
  var {:scalar} sdv_734: int;
  var {:pointer} Tmp_1066: int;
  var {:pointer} PDevExt_8: int;
  var vslice_dummy_var_502: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;
  var vslice_dummy_var_505: int;
  var vslice_dummy_var_506: int;
  var vslice_dummy_var_507: int;
  var vslice_dummy_var_508: int;
  var vslice_dummy_var_509: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_511: int;
  var vslice_dummy_var_512: int;
  var vslice_dummy_var_513: int;
  var vslice_dummy_var_514: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_526: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_854: int;
  var vslice_dummy_var_855: int;
  var vslice_dummy_var_856: int;
  var vslice_dummy_var_857: int;
  var vslice_dummy_var_858: int;
  var vslice_dummy_var_859: int;
  var vslice_dummy_var_860: int;
  var vslice_dummy_var_861: int;
  var vslice_dummy_var_862: int;
  var vslice_dummy_var_863: int;
  var vslice_dummy_var_864: int;
  var vslice_dummy_var_865: int;
  var vslice_dummy_var_866: int;
  var vslice_dummy_var_867: int;
  var vslice_dummy_var_868: int;

  anon0:
    call {:si_unique_call 1988} vslice_dummy_var_502 := __HAVOC_malloc(4);
    PDevExt_8 := actual_PDevExt_8;
    call {:si_unique_call 1989} Tmp_1059 := __HAVOC_malloc(100);
    call {:si_unique_call 1990} Tmp_1061 := __HAVOC_malloc(152);
    call {:si_unique_call 1991} Tmp_1062 := __HAVOC_malloc(116);
    call {:si_unique_call 1992} Tmp_1064 := __HAVOC_malloc(132);
    call {:si_unique_call 1993} Tmp_1066 := __HAVOC_malloc(64);
    Tmp_1062 := strConst__li2bpl263;
    call {:si_unique_call 1994} vslice_dummy_var_511 := SerialDbgPrintEx(2, Tmp_1062);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 1995} vslice_dummy_var_503 := KeSynchronizeExecution(0, li2bplFunctionConstant377, 0);
    call {:si_unique_call 1996} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    Mem_T.INT4[Tmp_1058] := oldIrql_3;
    call {:si_unique_call 1997} sdv_KeAcquireSpinLock(0, Tmp_1058);
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_1058];
    call {:si_unique_call 1998} vslice_dummy_var_504 := sdv_RemoveEntryList(0);
    call {:si_unique_call 1999} sdv_KeReleaseSpinLock(0, oldIrql_3);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2000} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(PDevExt_8));
    goto L8;

  L8:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_1061 := strConst__li2bpl264;
    call {:si_unique_call 2001} vslice_dummy_var_512 := SerialDbgPrintEx(12, Tmp_1061);
    call {:si_unique_call 2002} IoDisconnectInterrupt(0);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 2003} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto L24;

  L24:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    i_2 := 0;
    goto L42;

  L42:
    call {:si_unique_call 2004} i_2, Tmp_1063, Tmp_1065, Tmp_1066 := SerialReleaseResources_loop_L42(i_2, Tmp_1063, Tmp_1065, Tmp_1066, PDevExt_8);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 16} {:Counter "i_2"} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 16 > i_2;
    Tmp_1065 := i_2;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc Tmp_1063;
    assume {:nonnull} Tmp_1063 != 0;
    assume Tmp_1063 > 0;
    havoc Tmp_1066;
    assume {:nonnull} Tmp_1066 != 0;
    assume Tmp_1066 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    i_2 := i_2 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    goto L43;

  L43:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} i_2 == 16;
    Tmp_1064 := strConst__li2bpl265;
    call {:si_unique_call 2005} vslice_dummy_var_513 := SerialDbgPrintEx(12, Tmp_1064);
    call {:si_unique_call 2006} sdv_ExFreePool(0);
    goto L37;

  L37:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2007} vslice_dummy_var_505 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2008} vslice_dummy_var_506 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2009} vslice_dummy_var_507 := SerialCancelTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2010} vslice_dummy_var_508 := SerialCancelTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2011} vslice_dummy_var_509 := SerialCancelTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 2012} vslice_dummy_var_510 := SerialCancelTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    call {:si_unique_call 2013} sdv_704 := KeRemoveQueueDpc(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_704 != 0;
    call {:si_unique_call 2014} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_854;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_854;
    call {:si_unique_call 2015} vslice_dummy_var_514 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L72;

  L72:
    call {:si_unique_call 2016} sdv_709 := KeRemoveQueueDpc(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_709 != 0;
    call {:si_unique_call 2017} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_855;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_855;
    call {:si_unique_call 2018} vslice_dummy_var_515 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L79;

  L79:
    call {:si_unique_call 2019} sdv_730 := KeRemoveQueueDpc(0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_730 != 0;
    call {:si_unique_call 2020} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_856;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_856;
    call {:si_unique_call 2021} vslice_dummy_var_516 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L86;

  L86:
    call {:si_unique_call 2022} sdv_705 := KeRemoveQueueDpc(0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_705 != 0;
    call {:si_unique_call 2023} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_857;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_857;
    call {:si_unique_call 2024} vslice_dummy_var_517 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L93;

  L93:
    call {:si_unique_call 2025} sdv_723 := KeRemoveQueueDpc(0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_723 != 0;
    call {:si_unique_call 2026} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_858;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_858;
    call {:si_unique_call 2027} vslice_dummy_var_518 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L100;

  L100:
    call {:si_unique_call 2028} sdv_710 := KeRemoveQueueDpc(0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_710 != 0;
    call {:si_unique_call 2029} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_859;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_859;
    call {:si_unique_call 2030} vslice_dummy_var_519 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L107;

  L107:
    call {:si_unique_call 2031} sdv_712 := KeRemoveQueueDpc(0);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_712 != 0;
    call {:si_unique_call 2032} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_860;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_860;
    call {:si_unique_call 2033} vslice_dummy_var_520 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L114;

  L114:
    call {:si_unique_call 2034} sdv_707 := KeRemoveQueueDpc(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_707 != 0;
    call {:si_unique_call 2035} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_861;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_861;
    call {:si_unique_call 2036} vslice_dummy_var_521 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L121;

  L121:
    call {:si_unique_call 2037} sdv_734 := KeRemoveQueueDpc(0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_734 != 0;
    call {:si_unique_call 2038} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_862;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_862;
    call {:si_unique_call 2039} vslice_dummy_var_522 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L128;

  L128:
    call {:si_unique_call 2040} sdv_715 := KeRemoveQueueDpc(0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_715 != 0;
    call {:si_unique_call 2041} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_863;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_863;
    call {:si_unique_call 2042} vslice_dummy_var_523 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L135;

  L135:
    call {:si_unique_call 2043} sdv_703 := KeRemoveQueueDpc(0);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_703 != 0;
    call {:si_unique_call 2044} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_864;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_864;
    call {:si_unique_call 2045} vslice_dummy_var_524 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L142;

  L142:
    call {:si_unique_call 2046} sdv_728 := KeRemoveQueueDpc(0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_728 != 0;
    call {:si_unique_call 2047} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_865;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_865;
    call {:si_unique_call 2048} vslice_dummy_var_525 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L149;

  L149:
    call {:si_unique_call 2049} sdv_708 := KeRemoveQueueDpc(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_708 != 0;
    call {:si_unique_call 2050} Tmp_1058 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    havoc vslice_dummy_var_866;
    Mem_T.INT4[Tmp_1058] := vslice_dummy_var_866;
    call {:si_unique_call 2051} vslice_dummy_var_526 := sdv_InterlockedDecrement(Tmp_1058);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_1058 != 0;
    assume Tmp_1058 > 0;
    goto L156;

  L156:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_8)] != 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc vslice_dummy_var_867;
    call {:si_unique_call 2052} MmUnmapIoSpace(0, vslice_dummy_var_867);
    goto L160;

  L160:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_8)] != 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc vslice_dummy_var_868;
    call {:si_unique_call 2053} MmUnmapIoSpace(0, vslice_dummy_var_868);
    goto L164;

  L164:
    Tmp_1059 := strConst__li2bpl266;
    call {:si_unique_call 2054} vslice_dummy_var_527 := SerialDbgPrintEx(2, Tmp_1059);
    return;

  anon64_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_8)] == 0;
    goto L164;

  anon63_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_8)] == 0;
    goto L160;

  anon62_Then:
    assume {:partition} sdv_708 == 0;
    goto L156;

  anon61_Then:
    assume {:partition} sdv_728 == 0;
    goto L149;

  anon60_Then:
    assume {:partition} sdv_703 == 0;
    goto L142;

  anon59_Then:
    assume {:partition} sdv_715 == 0;
    goto L135;

  anon58_Then:
    assume {:partition} sdv_734 == 0;
    goto L128;

  anon57_Then:
    assume {:partition} sdv_707 == 0;
    goto L121;

  anon56_Then:
    assume {:partition} sdv_712 == 0;
    goto L114;

  anon55_Then:
    assume {:partition} sdv_710 == 0;
    goto L107;

  anon54_Then:
    assume {:partition} sdv_723 == 0;
    goto L100;

  anon53_Then:
    assume {:partition} sdv_705 == 0;
    goto L93;

  anon52_Then:
    assume {:partition} sdv_730 == 0;
    goto L86;

  anon51_Then:
    assume {:partition} sdv_709 == 0;
    goto L79;

  anon50_Then:
    assume {:partition} sdv_704 == 0;
    goto L72;

  anon49_Then:
    assume {:partition} i_2 != 16;
    goto L37;

  anon48_Then:
    assume {:partition} i_2 >= 16;
    goto L43;

  anon47_Then:
    goto L37;

  anon65_Then:
    goto L24;

  anon46_Then:
    goto L24;

  anon45_Then:
    goto L8;
}



procedure {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_12: int, actual_PConfig_1: int) returns (Tmp_1067: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_12: int, actual_PConfig_1: int) returns (Tmp_1067: int)
{
  var {:scalar} sdv_738: int;
  var {:pointer} Tmp_1068: int;
  var {:pointer} sdv_739: int;
  var {:scalar} sdv_743: int;
  var {:scalar} sdv_744: int;
  var {:pointer} sdv_745: int;
  var {:scalar} sdv_746: int;
  var {:scalar} Tmp_1069: int;
  var {:scalar} Tmp_1070: int;
  var {:scalar} sdv_749: int;
  var {:pointer} sdv_750: int;
  var {:pointer} sdv_751: int;
  var {:pointer} pCurDevObj: int;
  var {:scalar} Tmp_1071: int;
  var {:pointer} Tmp_1072: int;
  var {:scalar} Tmp_1073: int;
  var {:pointer} pDevExt_13: int;
  var {:pointer} Tmp_1074: int;
  var {:scalar} Tmp_1075: int;
  var {:pointer} Tmp_1076: int;
  var {:pointer} Tmp_1077: int;
  var {:scalar} Tmp_1078: int;
  var {:pointer} Tmp_1079: int;
  var {:scalar} sdv_753: int;
  var {:pointer} Tmp_1080: int;
  var {:scalar} Tmp_1081: int;
  var {:scalar} Tmp_1082: int;
  var {:pointer} Tmp_1083: int;
  var {:scalar} Tmp_1084: int;
  var {:scalar} sdv_756: int;
  var {:pointer} Tmp_1085: int;
  var {:scalar} sdv_758: int;
  var {:pointer} Tmp_1086: int;
  var {:pointer} sdv_760: int;
  var {:pointer} Tmp_1087: int;
  var {:scalar} Tmp_1088: int;
  var {:pointer} pExtension: int;
  var {:scalar} oldIrql_4: int;
  var {:scalar} sdv_763: int;
  var {:scalar} sdv_765: int;
  var {:pointer} sdv_766: int;
  var {:scalar} sdv_767: int;
  var {:pointer} Tmp_1089: int;
  var {:scalar} Tmp_1090: int;
  var {:scalar} sdv_770: int;
  var {:scalar} Tmp_1091: int;
  var {:scalar} sdv_772: int;
  var {:scalar} sdv_773: int;
  var {:scalar} status_34: int;
  var {:scalar} Tmp_1092: int;
  var {:scalar} Tmp_1093: int;
  var {:pointer} Tmp_1094: int;
  var {:scalar} serialPhysicalMax: int;
  var {:scalar} Tmp_1095: int;
  var {:scalar} Tmp_1096: int;
  var {:pointer} Tmp_1097: int;
  var {:pointer} Tmp_1098: int;
  var {:pointer} Tmp_1099: int;
  var {:scalar} Tmp_1100: int;
  var {:scalar} sdv_776: int;
  var {:scalar} Tmp_1101: int;
  var {:scalar} sdv_777: int;
  var {:pointer} Tmp_1102: int;
  var {:pointer} PDevObj_12: int;
  var {:pointer} PConfig_1: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_869: int;
  var vslice_dummy_var_870: int;
  var vslice_dummy_var_871: int;
  var vslice_dummy_var_872: int;
  var vslice_dummy_var_873: int;
  var vslice_dummy_var_874: int;
  var vslice_dummy_var_875: int;
  var vslice_dummy_var_876: int;
  var vslice_dummy_var_877: int;
  var vslice_dummy_var_878: int;
  var vslice_dummy_var_879: int;
  var vslice_dummy_var_880: int;
  var vslice_dummy_var_881: int;
  var vslice_dummy_var_882: int;
  var vslice_dummy_var_883: int;
  var vslice_dummy_var_884: int;
  var vslice_dummy_var_885: int;
  var vslice_dummy_var_886: int;
  var vslice_dummy_var_887: int;
  var vslice_dummy_var_888: int;
  var vslice_dummy_var_889: int;
  var vslice_dummy_var_890: int;
  var vslice_dummy_var_891: int;
  var vslice_dummy_var_892: int;
  var vslice_dummy_var_893: int;
  var vslice_dummy_var_894: int;
  var vslice_dummy_var_895: int;
  var vslice_dummy_var_896: int;
  var vslice_dummy_var_897: int;
  var vslice_dummy_var_898: int;
  var vslice_dummy_var_899: int;
  var vslice_dummy_var_900: int;
  var vslice_dummy_var_901: int;
  var vslice_dummy_var_902: int;
  var vslice_dummy_var_903: int;
  var vslice_dummy_var_904: int;
  var vslice_dummy_var_905: int;
  var vslice_dummy_var_906: int;
  var vslice_dummy_var_907: int;
  var vslice_dummy_var_908: int;
  var vslice_dummy_var_909: int;
  var vslice_dummy_var_910: int;
  var vslice_dummy_var_911: int;
  var vslice_dummy_var_912: int;
  var vslice_dummy_var_913: int;
  var vslice_dummy_var_914: int;
  var vslice_dummy_var_915: int;
  var vslice_dummy_var_916: int;
  var vslice_dummy_var_917: int;
  var vslice_dummy_var_918: int;
  var vslice_dummy_var_919: int;
  var vslice_dummy_var_920: int;
  var vslice_dummy_var_921: int;
  var vslice_dummy_var_922: int;
  var vslice_dummy_var_923: int;
  var vslice_dummy_var_924: int;
  var vslice_dummy_var_925: int;
  var vslice_dummy_var_926: int;
  var vslice_dummy_var_927: int;
  var vslice_dummy_var_928: int;
  var vslice_dummy_var_929: int;
  var vslice_dummy_var_930: int;
  var vslice_dummy_var_931: int;
  var vslice_dummy_var_932: int;
  var vslice_dummy_var_933: int;
  var vslice_dummy_var_934: int;
  var vslice_dummy_var_935: int;
  var vslice_dummy_var_936: int;

  anon0:
    call {:si_unique_call 2055} Tmp_1071 := __HAVOC_malloc(20);
    call {:si_unique_call 2056} Tmp_1073 := __HAVOC_malloc(20);
    call {:si_unique_call 2057} Tmp_1081 := __HAVOC_malloc(20);
    call {:si_unique_call 2058} Tmp_1082 := __HAVOC_malloc(20);
    call {:si_unique_call 2059} Tmp_1091 := __HAVOC_malloc(20);
    call {:si_unique_call 2060} Tmp_1092 := __HAVOC_malloc(20);
    call {:si_unique_call 2061} serialPhysicalMax := __HAVOC_malloc(20);
    call {:si_unique_call 2062} Tmp_1095 := __HAVOC_malloc(20);
    PDevObj_12 := actual_PDevObj_12;
    PConfig_1 := actual_PConfig_1;
    call {:si_unique_call 2063} Tmp_1068 := __HAVOC_malloc(132);
    call {:si_unique_call 2064} Tmp_1074 := __HAVOC_malloc(440);
    call {:si_unique_call 2065} Tmp_1076 := __HAVOC_malloc(312);
    call {:si_unique_call 2066} Tmp_1079 := __HAVOC_malloc(744);
    call {:si_unique_call 2067} Tmp_1080 := __HAVOC_malloc(732);
    call {:si_unique_call 2068} Tmp_1083 := __HAVOC_malloc(116);
    call {:si_unique_call 2069} Tmp_1085 := __HAVOC_malloc(304);
    call {:si_unique_call 2070} Tmp_1086 := __HAVOC_malloc(408);
    call {:si_unique_call 2071} Tmp_1087 := __HAVOC_malloc(60);
    call {:si_unique_call 2072} Tmp_1089 := __HAVOC_malloc(436);
    call {:si_unique_call 2073} Tmp_1094 := __HAVOC_malloc(444);
    call {:si_unique_call 2074} Tmp_1097 := __HAVOC_malloc(180);
    call {:si_unique_call 2075} Tmp_1098 := __HAVOC_malloc(300);
    call {:si_unique_call 2076} Tmp_1099 := __HAVOC_malloc(140);
    call {:si_unique_call 2077} Tmp_1102 := __HAVOC_malloc(336);
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    havoc pDevExt_13;
    Tmp_1099 := strConst__li2bpl280;
    call {:si_unique_call 2078} vslice_dummy_var_529 := SerialDbgPrintEx(2, Tmp_1099);
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Mem_T.INT4[LowPart__LUID(serialPhysicalMax)] := -1;
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Tmp_1080 := strConst__li2bpl281;
    call {:si_unique_call 2079} vslice_dummy_var_530 := SerialDbgPrintEx(4, Tmp_1080);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_869;
    havoc vslice_dummy_var_870;
    call {:si_unique_call 2080} sdv_763 := SerialMemCompare(vslice_dummy_var_869, vslice_dummy_var_870, serialPhysicalMax, 0);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_763 != 2;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1093;
    assume {:nonnull} Tmp_1095 != 0;
    assume Tmp_1095 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1095)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1095 != 0;
    assume Tmp_1095 > 0;
    assume {:nonnull} Tmp_1095 != 0;
    assume Tmp_1095 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1095))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1095 != 0;
    assume Tmp_1095 > 0;
    assume {:nonnull} Tmp_1095 != 0;
    assume Tmp_1095 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_871;
    havoc vslice_dummy_var_872;
    havoc vslice_dummy_var_873;
    call {:si_unique_call 2081} SerialLogError(vslice_dummy_var_871, 0, vslice_dummy_var_872, Tmp_1095, 0, 0, 0, 43, 0, -1073348582, Tmp_1093, vslice_dummy_var_873, 0, 0);
    Tmp_1076 := strConst__li2bpl267;
    call {:si_unique_call 2082} vslice_dummy_var_531 := SerialDbgPrintEx(1, Tmp_1076);
    Tmp_1067 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon81_Then:
    assume {:partition} sdv_763 == 2;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_874;
    havoc vslice_dummy_var_875;
    call {:si_unique_call 2083} sdv_765 := SerialMemCompare(vslice_dummy_var_874, vslice_dummy_var_875, serialPhysicalMax, 0);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} sdv_765 != 2;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1084;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1071)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1071))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} Tmp_1071 != 0;
    assume Tmp_1071 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_876;
    havoc vslice_dummy_var_877;
    havoc vslice_dummy_var_878;
    call {:si_unique_call 2084} SerialLogError(vslice_dummy_var_876, 0, vslice_dummy_var_877, Tmp_1071, 0, 0, 0, 44, 0, -1073348581, Tmp_1084, vslice_dummy_var_878, 0, 0);
    Tmp_1085 := strConst__li2bpl268;
    call {:si_unique_call 2085} vslice_dummy_var_532 := SerialDbgPrintEx(1, Tmp_1085);
    Tmp_1067 := -1073741810;
    goto L1;

  anon82_Then:
    assume {:partition} sdv_765 == 2;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1073)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1073))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} Tmp_1073 != 0;
    assume Tmp_1073 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_879;
    havoc vslice_dummy_var_880;
    call {:si_unique_call 2086} sdv_772 := SerialMemCompare(vslice_dummy_var_879, vslice_dummy_var_880, Tmp_1073, 0);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} sdv_772 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_881;
    havoc vslice_dummy_var_882;
    havoc vslice_dummy_var_883;
    havoc vslice_dummy_var_884;
    call {:si_unique_call 2087} sdv_758 := SerialMemCompare(vslice_dummy_var_881, vslice_dummy_var_882, vslice_dummy_var_883, vslice_dummy_var_884);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} sdv_758 != 2;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1100;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc vslice_dummy_var_885;
    havoc vslice_dummy_var_886;
    havoc vslice_dummy_var_887;
    havoc vslice_dummy_var_888;
    call {:si_unique_call 2088} SerialLogError(vslice_dummy_var_885, 0, vslice_dummy_var_886, vslice_dummy_var_887, 0, 0, 0, 45, 0, -1073348580, Tmp_1100, vslice_dummy_var_888, 0, 0);
    Tmp_1102 := strConst__li2bpl269;
    call {:si_unique_call 2089} vslice_dummy_var_533 := SerialDbgPrintEx(1, Tmp_1102);
    Tmp_1067 := -1073741810;
    goto L1;

  anon84_Then:
    assume {:partition} sdv_758 == 2;
    goto L53;

  L53:
    call {:si_unique_call 2090} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2091} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    call {:si_unique_call 2092} sdv_776 := sdv_IsListEmpty(0);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} sdv_776 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L75;

  L75:
    call {:si_unique_call 2093} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto L78;

  L78:
    call {:si_unique_call 2094} sdv_743, sdv_744, sdv_749, sdv_750, pCurDevObj, Tmp_1072, Tmp_1079, sdv_753, sdv_756, pExtension, oldIrql_4, sdv_767, sdv_770, vslice_dummy_var_534 := SerialFindInitController_loop_L78(sdv_743, sdv_744, sdv_749, sdv_750, pCurDevObj, Tmp_1072, Tmp_1079, sdv_753, Tmp_1081, sdv_756, pExtension, oldIrql_4, sdv_767, sdv_770, Tmp_1091, Tmp_1092, PConfig_1, vslice_dummy_var_534);
    goto L78_last;

  L78_last:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    Tmp_1079 := strConst__li2bpl270;
    call {:si_unique_call 2095} vslice_dummy_var_534 := SerialDbgPrintEx(4, Tmp_1079);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_889;
    havoc vslice_dummy_var_890;
    havoc vslice_dummy_var_891;
    havoc vslice_dummy_var_892;
    call {:si_unique_call 2096} sdv_743 := SerialMemCompare(vslice_dummy_var_889, vslice_dummy_var_890, vslice_dummy_var_891, vslice_dummy_var_892);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_743 != 2;
    Tmp_1086 := strConst__li2bpl271;
    call {:si_unique_call 2097} vslice_dummy_var_535 := SerialDbgPrintEx(1, Tmp_1086);
    Tmp_1067 := -1073741810;
    goto L1;

  anon91_Then:
    assume {:partition} sdv_743 == 2;
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1092)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1092))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    assume {:nonnull} Tmp_1092 != 0;
    assume Tmp_1092 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_893;
    havoc vslice_dummy_var_894;
    call {:si_unique_call 2098} sdv_767 := SerialMemCompare(vslice_dummy_var_893, vslice_dummy_var_894, Tmp_1092, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_767 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_895;
    havoc vslice_dummy_var_896;
    havoc vslice_dummy_var_897;
    havoc vslice_dummy_var_898;
    call {:si_unique_call 2099} sdv_770 := SerialMemCompare(vslice_dummy_var_895, vslice_dummy_var_896, vslice_dummy_var_897, vslice_dummy_var_898);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_770 != 2;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1078;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1070;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_899;
    havoc vslice_dummy_var_900;
    havoc vslice_dummy_var_901;
    havoc vslice_dummy_var_902;
    havoc vslice_dummy_var_903;
    call {:si_unique_call 2100} SerialLogError(vslice_dummy_var_899, 0, vslice_dummy_var_900, vslice_dummy_var_901, 0, 0, 0, 47, 0, -1073348578, Tmp_1070, vslice_dummy_var_902, Tmp_1078, vslice_dummy_var_903);
    Tmp_1074 := strConst__li2bpl272;
    call {:si_unique_call 2101} vslice_dummy_var_536 := SerialDbgPrintEx(1, Tmp_1074);
    Tmp_1067 := -1073741810;
    goto L1;

  anon93_Then:
    assume {:partition} sdv_770 == 2;
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1091)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1091))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    assume {:nonnull} Tmp_1091 != 0;
    assume Tmp_1091 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_904;
    havoc vslice_dummy_var_905;
    call {:si_unique_call 2102} sdv_744 := SerialMemCompare(vslice_dummy_var_904, vslice_dummy_var_905, Tmp_1091, 0);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_744 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_906;
    havoc vslice_dummy_var_907;
    havoc vslice_dummy_var_908;
    havoc vslice_dummy_var_909;
    call {:si_unique_call 2103} sdv_753 := SerialMemCompare(vslice_dummy_var_906, vslice_dummy_var_907, vslice_dummy_var_908, vslice_dummy_var_909);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_753 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1096;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1101;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_910;
    havoc vslice_dummy_var_911;
    havoc vslice_dummy_var_912;
    havoc vslice_dummy_var_913;
    havoc vslice_dummy_var_914;
    call {:si_unique_call 2104} SerialLogError(vslice_dummy_var_910, 0, vslice_dummy_var_911, vslice_dummy_var_912, 0, 0, 0, 48, 0, -1073348577, Tmp_1101, vslice_dummy_var_913, Tmp_1096, vslice_dummy_var_914);
    Tmp_1089 := strConst__li2bpl273;
    call {:si_unique_call 2105} vslice_dummy_var_537 := SerialDbgPrintEx(1, Tmp_1089);
    Tmp_1067 := -1073741810;
    goto L1;

  anon95_Then:
    assume {:partition} sdv_753 != 1;
    goto L105;

  L105:
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1081)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1081))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    assume {:nonnull} Tmp_1081 != 0;
    assume Tmp_1081 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_915;
    havoc vslice_dummy_var_916;
    call {:si_unique_call 2106} sdv_756 := SerialMemCompare(vslice_dummy_var_915, vslice_dummy_var_916, Tmp_1081, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_756 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_917;
    havoc vslice_dummy_var_918;
    havoc vslice_dummy_var_919;
    havoc vslice_dummy_var_920;
    call {:si_unique_call 2107} sdv_749 := SerialMemCompare(vslice_dummy_var_917, vslice_dummy_var_918, vslice_dummy_var_919, vslice_dummy_var_920);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_749 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1075;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1090;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_921;
    havoc vslice_dummy_var_922;
    havoc vslice_dummy_var_923;
    havoc vslice_dummy_var_924;
    havoc vslice_dummy_var_925;
    call {:si_unique_call 2108} SerialLogError(vslice_dummy_var_921, 0, vslice_dummy_var_922, vslice_dummy_var_923, 0, 0, 0, 49, 0, -1073348576, Tmp_1090, vslice_dummy_var_924, Tmp_1075, vslice_dummy_var_925);
    Tmp_1094 := strConst__li2bpl274;
    call {:si_unique_call 2109} vslice_dummy_var_538 := SerialDbgPrintEx(1, Tmp_1094);
    Tmp_1067 := -1073741810;
    goto L1;

  anon97_Then:
    assume {:partition} sdv_749 != 1;
    goto L84;

  L84:
    call {:si_unique_call 2110} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2111} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    call {:si_unique_call 2112} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    call {:si_unique_call 2113} sdv_750 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_750;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    assume false;
    return;

  anon98_Then:
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    assume false;
    return;

  anon96_Then:
    assume {:partition} sdv_756 == 0;
    goto L84;

  anon94_Then:
    assume {:partition} sdv_744 == 0;
    goto L105;

  anon92_Then:
    assume {:partition} sdv_767 == 0;
    goto L105;

  anon90_Then:
    goto L84;

  anon89_Then:
    goto L84;

  anon88_Then:
    goto L84;

  anon87_Then:
    goto L79;

  L79:
    call {:si_unique_call 2114} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2115} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    call {:si_unique_call 2116} sdv_777 := sdv_IsListEmpty(0);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_777 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L170;

  L170:
    call {:si_unique_call 2117} sdv_KeReleaseSpinLock(0, oldIrql_4);
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1082)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1082))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    assume {:nonnull} Tmp_1082 != 0;
    assume Tmp_1082 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_926;
    havoc vslice_dummy_var_927;
    call {:si_unique_call 2118} sdv_746 := SerialMemCompare(vslice_dummy_var_926, vslice_dummy_var_927, Tmp_1082, 0);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_746 != 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    goto L182;

  L182:
    call {:si_unique_call 2119} pCurDevObj, Tmp_1072, sdv_760, pExtension, oldIrql_4, sdv_773 := SerialFindInitController_loop_L182(pCurDevObj, Tmp_1072, sdv_760, pExtension, oldIrql_4, sdv_773, PConfig_1);
    goto L182_last;

  L182_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_928;
    havoc vslice_dummy_var_929;
    havoc vslice_dummy_var_930;
    havoc vslice_dummy_var_931;
    call {:si_unique_call 2120} sdv_773 := SerialMemCompare(vslice_dummy_var_928, vslice_dummy_var_929, vslice_dummy_var_930, vslice_dummy_var_931);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_773 == 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    goto L194;

  L194:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1069;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    havoc Tmp_1088;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_932;
    havoc vslice_dummy_var_933;
    havoc vslice_dummy_var_934;
    havoc vslice_dummy_var_935;
    havoc vslice_dummy_var_936;
    call {:si_unique_call 2121} SerialLogError(vslice_dummy_var_932, 0, vslice_dummy_var_933, vslice_dummy_var_934, 0, 0, 0, 50, 0, -1073348575, Tmp_1088, vslice_dummy_var_935, Tmp_1069, vslice_dummy_var_936);
    Tmp_1098 := strConst__li2bpl276;
    call {:si_unique_call 2122} vslice_dummy_var_541 := SerialDbgPrintEx(1, Tmp_1098);
    Tmp_1067 := -1073741810;
    goto L1;

  anon106_Then:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    Tmp_1083 := strConst__li2bpl277;
    call {:si_unique_call 2123} vslice_dummy_var_542 := SerialDbgPrintEx(4, Tmp_1083);
    Tmp_1087 := strConst__li2bpl278;
    call {:si_unique_call 2124} vslice_dummy_var_543 := SerialDbgPrintEx(4, Tmp_1087);
    call {:si_unique_call 2125} status_34 := SerialInitMultiPort(pExtension, PConfig_1, PDevObj_12);
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1067 := status_34;
    goto L1;

  anon120_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon107_Then:
    goto L194;

  anon105_Then:
    assume {:partition} sdv_773 != 0;
    goto L183;

  L183:
    call {:si_unique_call 2126} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2127} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    call {:si_unique_call 2128} sdv_760 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_760;
    goto L216;

  L216:
    call {:si_unique_call 2129} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto anon109_Then, anon109_Else;

  anon109_Else:
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    assume false;
    return;

  anon109_Then:
    goto L178;

  L178:
    Tmp_1097 := strConst__li2bpl275;
    call {:si_unique_call 2130} vslice_dummy_var_539 := SerialDbgPrintEx(4, Tmp_1097);
    call {:si_unique_call 2131} status_34 := SerialInitOneController(PDevObj_12, PConfig_1);
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} yogi_error != 1;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} status_34 >= 0;
    call {:si_unique_call 2132} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2133} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    call {:si_unique_call 2134} sdv_738 := sdv_IsListEmpty(0);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} sdv_738 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L241;

  L241:
    call {:si_unique_call 2135} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto L246;

  L246:
    call {:si_unique_call 2136} sdv_751, pCurDevObj, Tmp_1072, pExtension, oldIrql_4 := SerialFindInitController_loop_L246(sdv_751, pCurDevObj, Tmp_1072, pExtension, oldIrql_4, PConfig_1);
    goto L246_last;

  L246_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    call {:si_unique_call 2137} sdv_ExFreePool(0);
    Tmp_1068 := strConst__li2bpl279;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_1077;
    call {:si_unique_call 2138} vslice_dummy_var_540 := SerialDbgPrintEx(4, Tmp_1068);
    call {:si_unique_call 2139} vslice_dummy_var_528 := KeSynchronizeExecution(0, li2bplFunctionConstant398, 0);
    Tmp_1067 := 0;
    goto L1;

  anon114_Then:
    goto L247;

  L247:
    call {:si_unique_call 2140} Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    Mem_T.INT4[Tmp_1072] := oldIrql_4;
    call {:si_unique_call 2141} sdv_KeAcquireSpinLock(0, Tmp_1072);
    assume {:nonnull} Tmp_1072 != 0;
    assume Tmp_1072 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_1072];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    call {:si_unique_call 2142} sdv_751 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_751;
    goto L264;

  L264:
    call {:si_unique_call 2143} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    goto anon116_Then, anon116_Else;

  anon116_Else:
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    assume false;
    return;

  anon116_Then:
    goto L245;

  L245:
    Tmp_1067 := 0;
    goto L1;

  anon115_Then:
    goto L245;

  anon119_Then:
    goto L264;

  anon113_Then:
    goto L247;

  anon112_Then:
    goto L245;

  anon111_Then:
    assume {:partition} sdv_738 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2144} sdv_745 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_745;
    goto L241;

  anon110_Then:
    assume {:partition} 0 > status_34;
    Tmp_1067 := status_34;
    goto L1;

  anon118_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    goto L178;

  anon117_Then:
    goto L216;

  anon104_Then:
    goto L183;

  anon103_Then:
    goto L183;

  anon102_Then:
    goto L183;

  anon101_Then:
    goto L178;

  anon100_Then:
    assume {:partition} sdv_746 == 0;
    goto L178;

  anon99_Then:
    assume {:partition} sdv_777 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2145} sdv_766 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_766;
    goto L170;

  anon86_Then:
    goto L79;

  anon85_Then:
    assume {:partition} sdv_776 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 2146} sdv_739 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_739;
    goto L75;

  anon83_Then:
    assume {:partition} sdv_772 == 0;
    goto L53;
}



procedure {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_1103: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_1103 == -1073741811 || Tmp_1103 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_1103: int)
{
  var {:scalar} maxRemain: int;
  var {:scalar} maxRemain80: int;
  var {:scalar} remainder: int;
  var {:scalar} maxRemain30: int;
  var {:scalar} maxRemain42: int;
  var {:scalar} maxRemain18: int;
  var {:scalar} calculatedDivisor: int;
  var {:scalar} status_35: int;
  var {:scalar} denominator: int;
  var {:scalar} ClockRate: int;
  var {:scalar} DesiredBaud: int;
  var {:pointer} AppropriateDivisor_1: int;

  anon0:
    ClockRate := actual_ClockRate;
    DesiredBaud := actual_DesiredBaud;
    AppropriateDivisor_1 := actual_AppropriateDivisor_1;
    status_35 := 0;
    maxRemain18 := 18432;
    maxRemain30 := 30720;
    maxRemain42 := 42336;
    maxRemain80 := 80000;
    denominator := DesiredBaud * 16;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} 0 >= DesiredBaud;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  L21:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] == -1;
    status_35 := -1073741811;
    goto L22;

  L22:
    Tmp_1103 := status_35;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] != -1;
    goto L22;

  anon74_Then:
    assume {:partition} DesiredBaud > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} DesiredBaud > denominator;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  anon51_Then:
    assume {:partition} denominator >= DesiredBaud;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} ClockRate == 1843200;
    maxRemain := maxRemain18;
    goto L28;

  L28:
    calculatedDivisor := INTDIV(ClockRate, denominator);
    remainder := INTMOD(ClockRate, denominator);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} remainder * 2 > ClockRate;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} DesiredBaud != 110;
    calculatedDivisor := calculatedDivisor + 1;
    goto L31;

  L31:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} DesiredBaud >= 9600;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} remainder >= maxRemain;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClockRate > remainder + maxRemain;
    calculatedDivisor := -1;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} denominator > ClockRate;
    calculatedDivisor := -1;
    goto L38;

  L38:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ClockRate == 1843200;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 2;
    goto L42;

  L42:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := calculatedDivisor;
    goto L21;

  anon62_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon60_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} ClockRate == 3072000;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 13;
    goto L42;

  anon64_Then:
    assume {:partition} DesiredBaud != 14400;
    goto L42;

  anon61_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClockRate == 4233600;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} DesiredBaud == 9600;
    calculatedDivisor := 28;
    goto L42;

  anon66_Then:
    assume {:partition} DesiredBaud != 9600;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 18;
    goto L42;

  anon67_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} DesiredBaud == 19200;
    calculatedDivisor := 14;
    goto L42;

  anon68_Then:
    assume {:partition} DesiredBaud != 19200;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} DesiredBaud == 38400;
    calculatedDivisor := 7;
    goto L42;

  anon69_Then:
    assume {:partition} DesiredBaud != 38400;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 5;
    goto L42;

  anon70_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon63_Then:
    assume {:partition} ClockRate != 4233600;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ClockRate == 8000000;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 35;
    goto L42;

  anon71_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 9;
    goto L42;

  anon72_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon65_Then:
    assume {:partition} ClockRate != 8000000;
    goto L42;

  anon57_Then:
    assume {:partition} ClockRate >= denominator;
    goto L38;

  anon59_Then:
    assume {:partition} remainder + maxRemain >= ClockRate;
    goto L34;

  anon58_Then:
    assume {:partition} maxRemain > remainder;
    goto L34;

  anon55_Then:
    assume {:partition} 9600 > DesiredBaud;
    goto L34;

  anon56_Then:
    assume {:partition} DesiredBaud == 110;
    goto L31;

  anon75_Then:
    assume {:partition} ClockRate >= remainder * 2;
    goto L31;

  anon53_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} ClockRate == 3072000;
    maxRemain := maxRemain30;
    goto L28;

  anon54_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ClockRate == 4233600;
    maxRemain := maxRemain42;
    goto L28;

  anon73_Then:
    assume {:partition} ClockRate != 4233600;
    maxRemain := maxRemain80;
    goto L28;
}



procedure {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_13: int, actual_DisableUART: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_13: int, actual_DisableUART: int)
{
  var {:pointer} pDevExt_14: int;
  var {:pointer} Tmp_1107: int;
  var {:pointer} sdv_779: int;
  var {:pointer} Tmp_1109: int;
  var {:pointer} countSoFar_2: int;
  var {:pointer} Tmp_1110: int;
  var {:pointer} PDevObj_13: int;
  var {:scalar} DisableUART: int;
  var vslice_dummy_var_544: int;
  var vslice_dummy_var_545: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;

  anon0:
    call {:si_unique_call 2147} vslice_dummy_var_544 := __HAVOC_malloc(4);
    PDevObj_13 := actual_PDevObj_13;
    DisableUART := actual_DisableUART;
    call {:si_unique_call 2148} Tmp_1107 := __HAVOC_malloc(104);
    call {:si_unique_call 2149} Tmp_1109 := __HAVOC_malloc(136);
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc pDevExt_14;
    call {:si_unique_call 2150} sdv_do_paged_code_check();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DisableUART != 0;
    Tmp_1110 := strConst__li2bpl283;
    goto L11;

  L11:
    Tmp_1109 := strConst__li2bpl284;
    call {:si_unique_call 2151} vslice_dummy_var_546 := SerialDbgPrintEx(2, Tmp_1109);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_14)], 1) != 0;
    call {:si_unique_call 2152} sdv_779 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_779 != 0;
    assume sdv_779 > 0;
    countSoFar_2 := SerialCount__CONFIGURATION_INFORMATION(sdv_779);
    assume {:nonnull} countSoFar_2 != 0;
    assume countSoFar_2 > 0;
    Mem_T.INT4[countSoFar_2] := Mem_T.INT4[countSoFar_2] - 1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_14)], 2) != 0;
    goto L26;

  L26:
    call {:si_unique_call 2153} vslice_dummy_var_545 := IoWMIRegistrationControl(0, 2);
    goto L15;

  L15:
    call {:si_unique_call 2154} SerialUndoExternalNaming(pDevExt_14);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    Tmp_1107 := strConst__li2bpl285;
    call {:si_unique_call 2155} vslice_dummy_var_547 := SerialDbgPrintEx(2, Tmp_1107);
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_14)], 2) == 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} DisableUART != 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L29;

  L29:
    call {:si_unique_call 2156} SerialReleaseResources(pDevExt_14);
    goto L26;

  anon13_Then:
    assume {:partition} DisableUART == 0;
    goto L29;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_14)], 1) == 0;
    goto L15;

  anon11_Then:
    assume {:partition} DisableUART == 0;
    Tmp_1110 := strConst__li2bpl282;
    goto L11;
}



procedure {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_1111: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1111 == 0 || Tmp_1111 == 2 || Tmp_1111 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_1111: int)
{
  var {:scalar} A: int;
  var {:scalar} B: int;
  var {:scalar} b_1: int;
  var {:scalar} higher: int;
  var {:scalar} lowerSpan: int;
  var {:scalar} lower: int;
  var {:scalar} a_1: int;
  var {:pointer} structPtr888A: int;
  var {:scalar} SpanOfA: int;
  var {:pointer} structPtr888B: int;
  var {:scalar} SpanOfB: int;

  anon0:
    call {:si_unique_call 2157} A := __HAVOC_malloc(20);
    call {:si_unique_call 2158} B := __HAVOC_malloc(20);
    call {:si_unique_call 2159} b_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2160} higher := __HAVOC_malloc(20);
    call {:si_unique_call 2161} lower := __HAVOC_malloc(20);
    call {:si_unique_call 2162} a_1 := __HAVOC_malloc(20);
    structPtr888A := actual_structPtr888A;
    SpanOfA := actual_SpanOfA;
    structPtr888B := actual_structPtr888B;
    SpanOfB := actual_SpanOfB;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    Mem_T.INT4[LowPart__LUID(A)] := Mem_T.INT4[LowPart__LUID(structPtr888A)];
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(A))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888A))];
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    Mem_T.INT4[LowPart__LUID(B)] := Mem_T.INT4[LowPart__LUID(structPtr888B)];
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(B))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888B))];
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    call {:si_unique_call 2163} sdv_do_paged_code_check();
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    Mem_T.INT4[LowPart__LUID(a_1)] := Mem_T.INT4[LowPart__LUID(A)];
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(a_1))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(A))];
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    Mem_T.INT4[LowPart__LUID(b_1)] := Mem_T.INT4[LowPart__LUID(B)];
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(b_1))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(B))];
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_1111 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    Mem_T.INT4[LowPart__LUID(higher)] := Mem_T.INT4[LowPart__LUID(a_1)];
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(higher))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(a_1))];
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    Mem_T.INT4[LowPart__LUID(lower)] := Mem_T.INT4[LowPart__LUID(b_1)];
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(lower))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(b_1))];
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfB;
    goto L20;

  L20:
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_1111 := 2;
    goto L1;

  anon8_Then:
    Tmp_1111 := 1;
    goto L1;

  anon7_Then:
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    Mem_T.INT4[LowPart__LUID(higher)] := Mem_T.INT4[LowPart__LUID(b_1)];
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(higher))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(b_1))];
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    Mem_T.INT4[LowPart__LUID(lower)] := Mem_T.INT4[LowPart__LUID(a_1)];
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(lower))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(a_1))];
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a_1 != 0;
    assume a_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfA;
    goto L20;
}



procedure {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_18: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_1113: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1113 == 0 || Tmp_1113 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_18: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_1113: int)
{
  var {:scalar} oldLCRContents: int;
  var {:pointer} Tmp_1115: int;
  var {:pointer} Tmp_1116: int;
  var {:scalar} Tmp_1117: int;
  var {:pointer} Tmp_1120: int;
  var {:pointer} PDivisor: int;
  var {:scalar} regContents: int;
  var {:scalar} Lsb: int;
  var {:scalar} value1: int;
  var {:scalar} Tmp_1130: int;
  var {:dopa} {:scalar} value2: int;
  var {:scalar} returnValue: int;
  var {:scalar} oldIrql_5: int;
  var {:scalar} sdv_787: int;
  var {:scalar} Tmp_1135: int;
  var {:scalar} Tmp_1136: int;
  var {:scalar} sdv_789: int;
  var {:scalar} LineControl_1: int;
  var {:pointer} Tmp_1139: int;
  var {:pointer} Address_2: int;
  var {:pointer} Tmp_1141: int;
  var {:pointer} Extension_18: int;
  var {:pointer} InsertString: int;
  var {:scalar} ForceFifo: int;
  var {:scalar} LogFifo: int;
  var boogieTmp: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_937: int;
  var vslice_dummy_var_938: int;
  var vslice_dummy_var_939: int;
  var vslice_dummy_var_940: int;
  var vslice_dummy_var_941: int;
  var vslice_dummy_var_942: int;
  var vslice_dummy_var_943: int;
  var vslice_dummy_var_944: int;

  anon0:
    call {:si_unique_call 2164} Tmp_1130 := __HAVOC_malloc(20);
    call {:si_unique_call 2165} value2 := __HAVOC_malloc(4);
    call {:si_unique_call 2166} Tmp_1135 := __HAVOC_malloc(20);
    Extension_18 := actual_Extension_18;
    InsertString := actual_InsertString;
    ForceFifo := actual_ForceFifo;
    LogFifo := actual_LogFifo;
    call {:si_unique_call 2167} Tmp_1115 := __HAVOC_malloc(148);
    returnValue := 1;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2168} oldLCRContents := corral_nondet();
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2169} vslice_dummy_var_549 := corral_nondet();
    call {:si_unique_call 2170} Tmp_1116 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1116 != 0;
    assume Tmp_1116 > 0;
    Mem_T.INT4[Tmp_1116] := oldIrql_5;
    call {:si_unique_call 2171} sdv_KeRaiseIrql(30, Tmp_1116);
    assume {:nonnull} Tmp_1116 != 0;
    assume Tmp_1116 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_1116];
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2172} sdv_787 := corral_nondet();
    value1 := sdv_787;
    call {:si_unique_call 2173} value1 := corral_nondet();
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2174} sdv_789 := corral_nondet();
    value1 := BOR(value1, sdv_789);
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Address_2;
    PDivisor := value2;
    call {:si_unique_call 2175} LineControl_1 := corral_nondet();
    call {:si_unique_call 2176} Lsb := corral_nondet();
    call {:si_unique_call 2177} vslice_dummy_var_550 := corral_nondet();
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    Mem_T.INT4[PDivisor] := Lsb;
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    call {:si_unique_call 2178} boogieTmp := corral_nondet();
    Mem_T.INT4[PDivisor] := boogieTmp;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2179} sdv_KeLowerIrql(oldIrql_5);
    assume {:nonnull} value2 != 0;
    assume value2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} value1 == Mem_T.INT4[value2];
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_1117;
    assume {:nonnull} Tmp_1130 != 0;
    assume Tmp_1130 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1130)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1130 != 0;
    assume Tmp_1130 > 0;
    assume {:nonnull} Tmp_1130 != 0;
    assume Tmp_1130 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1130))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1130 != 0;
    assume Tmp_1130 > 0;
    assume {:nonnull} Tmp_1130 != 0;
    assume Tmp_1130 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_1139;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_1139 != 0;
    assume Tmp_1139 > 0;
    havoc vslice_dummy_var_937;
    havoc vslice_dummy_var_938;
    havoc vslice_dummy_var_939;
    havoc vslice_dummy_var_940;
    call {:si_unique_call 2180} SerialLogError(vslice_dummy_var_937, vslice_dummy_var_938, vslice_dummy_var_939, Tmp_1130, 0, 0, 0, 62, 0, -1073348572, Tmp_1117, vslice_dummy_var_940, 0, 0);
    returnValue := 0;
    goto L89;

  L89:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} returnValue != 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2181} regContents := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(regContents, 192) != 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 2182} vslice_dummy_var_551 := corral_nondet();
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto L116;

  L116:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ForceFifo != 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L133;

  L133:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} LogFifo != 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_1136;
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1135)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1135))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    assume {:nonnull} Tmp_1135 != 0;
    assume Tmp_1135 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_1141;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_1141 != 0;
    assume Tmp_1141 > 0;
    havoc vslice_dummy_var_941;
    havoc vslice_dummy_var_942;
    havoc vslice_dummy_var_943;
    havoc vslice_dummy_var_944;
    call {:si_unique_call 2183} SerialLogError(vslice_dummy_var_941, vslice_dummy_var_942, vslice_dummy_var_943, Tmp_1135, 0, 0, 0, 15, 0, -1073348606, Tmp_1136, vslice_dummy_var_944, 0, 0);
    goto L136;

  L136:
    Tmp_1115 := strConst__li2bpl286;
    call {:si_unique_call 2184} vslice_dummy_var_552 := SerialDbgPrintEx(4, Tmp_1115);
    goto L134;

  L134:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L97;

  L97:
    Tmp_1113 := returnValue;
    return;

  anon29_Then:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2185} vslice_dummy_var_548 := corral_nondet();
    goto L97;

  anon30_Then:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    havoc Tmp_1120;
    assume {:nonnull} Tmp_1120 != 0;
    assume Tmp_1120 > 0;
    goto L97;

  anon27_Then:
    goto L97;

  anon28_Then:
    assume {:partition} LogFifo == 0;
    goto L136;

  anon26_Then:
    goto L134;

  anon25_Then:
    goto L131;

  L131:
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    goto L133;

  anon24_Then:
    assume {:partition} ForceFifo == 0;
    goto L131;

  anon23_Then:
    assume {:partition} BAND(regContents, 192) == 0;
    goto L116;

  anon22_Then:
    assume {:partition} returnValue == 0;
    goto L97;

  anon21_Then:
    assume {:partition} value1 != Mem_T.INT4[value2];
    goto L89;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_8: int, actual_RegistryPath_2: int) returns (Tmp_1149: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_8: int, actual_RegistryPath_2: int) returns (Tmp_1149: int)
{
  var {:pointer} Tmp_1150: int;
  var {:pointer} Tmp_1151: int;
  var {:pointer} Tmp_1152: int;
  var {:pointer} Tmp_1153: int;
  var {:scalar} Tmp_1154: int;
  var {:pointer} Tmp_1155: int;
  var {:pointer} Tmp_1156: int;
  var {:pointer} Tmp_1157: int;
  var {:pointer} Tmp_1158: int;
  var {:scalar} Tmp_1159: int;
  var {:pointer} sdv_793: int;
  var {:pointer} lockPtr_1: int;
  var {:pointer} Tmp_1160: int;
  var {:pointer} Tmp_1161: int;
  var {:pointer} Tmp_1162: int;
  var {:pointer} Tmp_1163: int;
  var {:pointer} Tmp_1164: int;
  var {:scalar} Tmp_1165: int;
  var {:pointer} Tmp_1166: int;
  var {:pointer} Tmp_1167: int;
  var {:pointer} Tmp_1168: int;
  var {:pointer} DriverObject_8: int;
  var {:pointer} RegistryPath_2: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_945: int;

  anon0:
    DriverObject_8 := actual_DriverObject_8;
    RegistryPath_2 := actual_RegistryPath_2;
    call {:si_unique_call 2186} Tmp_1150 := __HAVOC_malloc(112);
    call {:si_unique_call 2187} Tmp_1151 := __HAVOC_malloc(112);
    call {:si_unique_call 2188} Tmp_1152 := __HAVOC_malloc(112);
    call {:si_unique_call 2189} Tmp_1153 := __HAVOC_malloc(112);
    call {:si_unique_call 2190} Tmp_1155 := __HAVOC_malloc(112);
    call {:si_unique_call 2191} Tmp_1156 := __HAVOC_malloc(112);
    call {:si_unique_call 2192} Tmp_1157 := __HAVOC_malloc(180);
    call {:si_unique_call 2193} Tmp_1158 := __HAVOC_malloc(112);
    call {:si_unique_call 2194} Tmp_1160 := __HAVOC_malloc(112);
    call {:si_unique_call 2195} Tmp_1161 := __HAVOC_malloc(112);
    call {:si_unique_call 2196} Tmp_1162 := __HAVOC_malloc(112);
    call {:si_unique_call 2197} Tmp_1163 := __HAVOC_malloc(112);
    call {:si_unique_call 2198} Tmp_1164 := __HAVOC_malloc(112);
    call {:si_unique_call 2199} Tmp_1167 := __HAVOC_malloc(112);
    call {:si_unique_call 2200} lockPtr_1 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant248);
    call {:si_unique_call 2201} sdv_do_paged_code_check();
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    havoc Tmp_1159;
    call {:si_unique_call 2202} sdv_793 := ExAllocatePoolWithTag(1, Tmp_1159, -666022077);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    havoc Tmp_1154;
    call {:si_unique_call 2203} sdv_RtlZeroMemory(0, Tmp_1154);
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    havoc Tmp_1165;
    call {:si_unique_call 2204} sdv_RtlMoveMemory(0, 0, Tmp_1165);
    call {:si_unique_call 2205} Tmp_1168 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1168 != 0;
    assume Tmp_1168 > 0;
    havoc vslice_dummy_var_945;
    Mem_T.INT4[Tmp_1168] := vslice_dummy_var_945;
    call {:si_unique_call 2206} sdv_KeInitializeSpinLock(Tmp_1168);
    assume {:nonnull} Tmp_1168 != 0;
    assume Tmp_1168 > 0;
    call {:si_unique_call 2207} InitializeListHead(AllDevObjs__SERIAL_GLOBALS(SerialGlobals));
    call {:si_unique_call 2208} vslice_dummy_var_553 := SerialGetConfigDefaults(driverDefaults, RegistryPath_2);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Mem_T.INT4[ShouldBreakOnEntry__SERIAL_FIRMWARE_DATA(driverDefaults)] != 0;
    call {:si_unique_call 2209} sdv_DbgBreakPoint();
    goto L41;

  L41:
    Tmp_1157 := strConst__li2bpl287;
    call {:si_unique_call 2210} vslice_dummy_var_555 := SerialDbgPrintEx(3, Tmp_1157);
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1166;
    assume {:nonnull} Tmp_1166 != 0;
    assume Tmp_1166 > 0;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1152;
    assume {:nonnull} Tmp_1152 != 0;
    assume Tmp_1152 > 0;
    Mem_T.INT4[Tmp_1152 + 9 * 4] := li2bplFunctionConstant123;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1162;
    assume {:nonnull} Tmp_1162 != 0;
    assume Tmp_1162 > 0;
    Mem_T.INT4[Tmp_1162 + 4 * 4] := li2bplFunctionConstant211;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1160;
    assume {:nonnull} Tmp_1160 != 0;
    assume Tmp_1160 > 0;
    Mem_T.INT4[Tmp_1160 + 3 * 4] := li2bplFunctionConstant135;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1156;
    assume {:nonnull} Tmp_1156 != 0;
    assume Tmp_1156 > 0;
    Mem_T.INT4[Tmp_1156 + 14 * 4] := li2bplFunctionConstant370;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1158;
    assume {:nonnull} Tmp_1158 != 0;
    assume Tmp_1158 > 0;
    Mem_T.INT4[Tmp_1158 + 15 * 4] := li2bplFunctionConstant371;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1155;
    assume {:nonnull} Tmp_1155 != 0;
    assume Tmp_1155 > 0;
    Mem_T.INT4[Tmp_1155] := li2bplFunctionConstant372;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1164;
    assume {:nonnull} Tmp_1164 != 0;
    assume Tmp_1164 > 0;
    Mem_T.INT4[Tmp_1164 + 2 * 4] := li2bplFunctionConstant373;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1150;
    assume {:nonnull} Tmp_1150 != 0;
    assume Tmp_1150 > 0;
    Mem_T.INT4[Tmp_1150 + 18 * 4] := li2bplFunctionConstant374;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1163;
    assume {:nonnull} Tmp_1163 != 0;
    assume Tmp_1163 > 0;
    Mem_T.INT4[Tmp_1163 + 27 * 4] := li2bplFunctionConstant240;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1161;
    assume {:nonnull} Tmp_1161 != 0;
    assume Tmp_1161 > 0;
    Mem_T.INT4[Tmp_1161 + 22 * 4] := li2bplFunctionConstant323;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1153;
    assume {:nonnull} Tmp_1153 != 0;
    assume Tmp_1153 > 0;
    Mem_T.INT4[Tmp_1153 + 5 * 4] := li2bplFunctionConstant375;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1167;
    assume {:nonnull} Tmp_1167 != 0;
    assume Tmp_1167 > 0;
    Mem_T.INT4[Tmp_1167 + 6 * 4] := li2bplFunctionConstant376;
    assume {:nonnull} DriverObject_8 != 0;
    assume DriverObject_8 > 0;
    havoc Tmp_1151;
    assume {:nonnull} Tmp_1151 != 0;
    assume Tmp_1151 > 0;
    Mem_T.INT4[Tmp_1151 + 23 * 4] := li2bplFunctionConstant300;
    call {:si_unique_call 2211} vslice_dummy_var_554 := SerialEnumerateLegacy(DriverObject_8, RegistryPath_2, driverDefaults);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2212} MmUnlockPagableImageSection(0);
    Tmp_1149 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} Mem_T.INT4[ShouldBreakOnEntry__SERIAL_FIRMWARE_DATA(driverDefaults)] == 0;
    goto L41;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    call {:si_unique_call 2213} MmUnlockPagableImageSection(0);
    Tmp_1149 := -1073741670;
    goto L1;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_14: int, actual_PConfigData_1: int) returns (Tmp_1169: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_14: int, actual_PConfigData_1: int) returns (Tmp_1169: int)
{
  var {:pointer} pDevExt_15: int;
  var {:scalar} status_36: int;
  var {:pointer} PDevObj_14: int;
  var {:pointer} PConfigData_1: int;

  anon0:
    PDevObj_14 := actual_PDevObj_14;
    PConfigData_1 := actual_PConfigData_1;
    call {:si_unique_call 2214} sdv_do_paged_code_check();
    call {:si_unique_call 2215} status_36 := SerialInitController(PDevObj_14, PConfigData_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_36 >= 0;
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    havoc pDevExt_15;
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    assume {:nonnull} pDevExt_15 != 0;
    assume pDevExt_15 > 0;
    goto L13;

  L13:
    Tmp_1169 := status_36;
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 > status_36;
    goto L13;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialInitController"} SerialInitController(actual_PDevObj_15: int, actual_PConfigData_2: int) returns (Tmp_1171: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 2 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialInitController"} SerialInitController(actual_PDevObj_15: int, actual_PConfigData_2: int) returns (Tmp_1171: int)
{
  var {:scalar} sdv_798: int;
  var {:pointer} Tmp_1172: int;
  var {:scalar} sdv_799: int;
  var {:scalar} sdv_800: int;
  var {:scalar} sdv_801: int;
  var {:scalar} Tmp_1173: int;
  var {:scalar} sdv_803: int;
  var {:pointer} Tmp_1174: int;
  var {:pointer} Tmp_1175: int;
  var {:scalar} sdv_804: int;
  var {:scalar} Tmp_1177: int;
  var {:scalar} Tmp_1178: int;
  var {:scalar} sdv_805: int;
  var {:scalar} sdv_806: int;
  var {:scalar} sdv_807: int;
  var {:pointer} Tmp_1179: int;
  var {:scalar} Tmp_1180: int;
  var {:scalar} sdv_808: int;
  var {:pointer} Tmp_1181: int;
  var {:scalar} sdv_809: int;
  var {:scalar} sdv_810: int;
  var {:scalar} sdv_811: int;
  var {:scalar} Tmp_1182: int;
  var {:scalar} sdv_812: int;
  var {:scalar} Tmp_1183: int;
  var {:scalar} sdv_813: int;
  var {:scalar} sdv_814: int;
  var {:scalar} Tmp_1184: int;
  var {:pointer} pDevExt_16: int;
  var {:pointer} Tmp_1185: int;
  var {:dopa} {:scalar} junk: int;
  var {:scalar} sdv_816: int;
  var {:scalar} sdv_817: int;
  var {:pointer} sdv_818: int;
  var {:scalar} Tmp_1186: int;
  var {:scalar} sdv_819: int;
  var {:scalar} sdv_820: int;
  var {:scalar} sdv_822: int;
  var {:scalar} sdv_823: int;
  var {:scalar} sdv_826: int;
  var {:pointer} Tmp_1187: int;
  var {:scalar} sdv_827: int;
  var {:pointer} sdv_829: int;
  var {:pointer} sdv_830: int;
  var {:scalar} sdv_831: int;
  var {:scalar} Tmp_1188: int;
  var {:scalar} sdv_832: int;
  var {:scalar} sdv_833: int;
  var {:scalar} sdv_834: int;
  var {:scalar} sdv_835: int;
  var {:scalar} sdv_836: int;
  var {:scalar} sdv_837: int;
  var {:scalar} sdv_838: int;
  var {:scalar} sdv_840: int;
  var {:scalar} sdv_841: int;
  var {:scalar} status_37: int;
  var {:scalar} allocedISRSw: int;
  var {:scalar} sdv_842: int;
  var {:pointer} Tmp_1189: int;
  var {:scalar} sdv_843: int;
  var {:pointer} Tmp_1190: int;
  var {:scalar} Tmp_1192: int;
  var {:scalar} sdv_844: int;
  var {:scalar} sdv_845: int;
  var {:scalar} sdv_847: int;
  var {:pointer} PDevObj_15: int;
  var {:pointer} PConfigData_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_558: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_946: int;
  var vslice_dummy_var_947: int;
  var vslice_dummy_var_948: int;
  var vslice_dummy_var_949: int;
  var vslice_dummy_var_950: int;
  var vslice_dummy_var_951: int;
  var vslice_dummy_var_952: int;
  var vslice_dummy_var_953: int;
  var vslice_dummy_var_954: int;
  var vslice_dummy_var_955: int;
  var vslice_dummy_var_956: int;
  var vslice_dummy_var_957: int;
  var vslice_dummy_var_958: int;
  var vslice_dummy_var_959: int;
  var vslice_dummy_var_960: int;
  var vslice_dummy_var_961: int;
  var vslice_dummy_var_962: int;
  var vslice_dummy_var_963: int;
  var vslice_dummy_var_964: int;
  var vslice_dummy_var_965: int;
  var vslice_dummy_var_966: int;
  var vslice_dummy_var_967: int;
  var vslice_dummy_var_968: int;
  var vslice_dummy_var_969: int;
  var vslice_dummy_var_970: int;
  var vslice_dummy_var_971: int;
  var vslice_dummy_var_972: int;
  var vslice_dummy_var_973: int;
  var vslice_dummy_var_974: int;
  var vslice_dummy_var_975: int;
  var vslice_dummy_var_976: int;
  var vslice_dummy_var_977: int;
  var vslice_dummy_var_978: int;
  var vslice_dummy_var_979: int;
  var vslice_dummy_var_980: int;
  var vslice_dummy_var_981: int;
  var vslice_dummy_var_982: int;
  var vslice_dummy_var_983: int;
  var vslice_dummy_var_984: int;
  var vslice_dummy_var_985: int;
  var vslice_dummy_var_986: int;
  var vslice_dummy_var_987: int;
  var vslice_dummy_var_988: int;
  var vslice_dummy_var_989: int;

  anon0:
    call {:si_unique_call 2216} Tmp_1178 := __HAVOC_malloc(20);
    call {:si_unique_call 2217} Tmp_1180 := __HAVOC_malloc(20);
    call {:si_unique_call 2218} Tmp_1182 := __HAVOC_malloc(20);
    call {:si_unique_call 2219} junk := __HAVOC_malloc(4);
    call {:si_unique_call 2220} Tmp_1192 := __HAVOC_malloc(20);
    PDevObj_15 := actual_PDevObj_15;
    PConfigData_2 := actual_PConfigData_2;
    call {:si_unique_call 2221} Tmp_1172 := __HAVOC_malloc(204);
    call {:si_unique_call 2222} Tmp_1174 := __HAVOC_malloc(204);
    call {:si_unique_call 2223} Tmp_1175 := __HAVOC_malloc(196);
    call {:si_unique_call 2224} Tmp_1181 := __HAVOC_malloc(136);
    call {:si_unique_call 2225} Tmp_1185 := __HAVOC_malloc(140);
    call {:si_unique_call 2226} Tmp_1187 := __HAVOC_malloc(840);
    call {:si_unique_call 2227} Tmp_1189 := __HAVOC_malloc(184);
    call {:si_unique_call 2228} Tmp_1190 := __HAVOC_malloc(180);
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    havoc pDevExt_16;
    status_37 := 0;
    allocedISRSw := 0;
    call {:si_unique_call 2229} sdv_do_paged_code_check();
    Tmp_1189 := strConst__li2bpl288;
    call {:si_unique_call 2230} vslice_dummy_var_556 := SerialDbgPrintEx(4, Tmp_1189);
    assume {:nonnull} KdComPortInUse != 0;
    assume KdComPortInUse > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    Tmp_1190 := strConst__li2bpl289;
    call {:si_unique_call 2231} vslice_dummy_var_557 := SerialDbgPrintEx(0, Tmp_1190);
    Tmp_1181 := strConst__li2bpl290;
    call {:si_unique_call 2232} vslice_dummy_var_558 := SerialDbgPrintEx(0, Tmp_1181);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_1177;
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1182)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1182))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    assume {:nonnull} Tmp_1182 != 0;
    assume Tmp_1182 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_946;
    havoc vslice_dummy_var_947;
    havoc vslice_dummy_var_948;
    call {:si_unique_call 2233} SerialLogError(vslice_dummy_var_946, 0, vslice_dummy_var_947, Tmp_1182, 0, 0, 0, 3, 0, -1073348607, Tmp_1177, vslice_dummy_var_948, 0, 0);
    Tmp_1171 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon79_Then:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto L36;

  L36:
    call {:si_unique_call 2234} KeInitializeTimer(0);
    call {:si_unique_call 2235} KeInitializeTimer(0);
    call {:si_unique_call 2236} KeInitializeTimer(0);
    call {:si_unique_call 2237} KeInitializeTimer(0);
    call {:si_unique_call 2238} KeInitializeTimer(0);
    call {:si_unique_call 2239} KeInitializeTimer(0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2240} KeInitializeDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant220, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2241} KeInitializeDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant139, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2242} KeInitializeDpc(TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant143, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2243} KeInitializeDpc(IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant145, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2244} KeInitializeDpc(TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant222, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2245} KeInitializeDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant112, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2246} KeInitializeDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant353, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2247} KeInitializeDpc(TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant355, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2248} KeInitializeDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant200, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2249} KeInitializeDpc(XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant224, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2250} KeInitializeDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant223, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2251} KeInitializeDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant390, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2252} KeInitializeDpc(PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant391, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2253} KeInitializeDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant179, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2254} KeInitializeDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_16), li2bplFunctionConstant174, 0);
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_1173;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_949;
    havoc vslice_dummy_var_950;
    havoc vslice_dummy_var_951;
    havoc vslice_dummy_var_952;
    call {:si_unique_call 2255} sdv_829 := SerialGetMappedAddress(vslice_dummy_var_949, vslice_dummy_var_950, vslice_dummy_var_951, vslice_dummy_var_952, Tmp_1173, UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[LowPart__LUID(OriginalController__SERIAL_DEVICE_EXTENSION(pDevExt_16))] := Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(PConfigData_2))];
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(OriginalController__SERIAL_DEVICE_EXTENSION(pDevExt_16)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Controller__CONFIG_DATA(PConfigData_2)))];
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_1184;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_953;
    havoc vslice_dummy_var_954;
    havoc vslice_dummy_var_955;
    havoc vslice_dummy_var_956;
    call {:si_unique_call 2256} sdv_818 := SerialGetMappedAddress(vslice_dummy_var_953, vslice_dummy_var_954, vslice_dummy_var_955, vslice_dummy_var_956, Tmp_1184, UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16));
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[LowPart__LUID(OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16))] := Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(PConfigData_2))];
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(InterruptStatus__CONFIG_DATA(PConfigData_2)))];
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L113;

  L113:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L154;

  L154:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 4;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 8;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 14;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L174;

  L174:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} 1 > Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)];
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L177;

  L177:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_957;
    call {:si_unique_call 2257} sdv_823 := SerialDoesPortExist(pDevExt_16, DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_16), Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfigData_2)], vslice_dummy_var_957);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_823 != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] != 0;
    Tmp_1175 := strConst__li2bpl293;
    call {:si_unique_call 2258} vslice_dummy_var_559 := SerialDbgPrintEx(3, Tmp_1175);
    status_37 := -1073741810;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_1186;
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1178)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1178))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    assume {:nonnull} Tmp_1178 != 0;
    assume Tmp_1178 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_958;
    havoc vslice_dummy_var_959;
    havoc vslice_dummy_var_960;
    call {:si_unique_call 2259} SerialLogError(vslice_dummy_var_958, PDevObj_15, vslice_dummy_var_959, Tmp_1178, 0, 0, 0, 57, 0, -1073348574, Tmp_1186, vslice_dummy_var_960, 0, 0);
    goto L139;

  L139:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_37 >= 0;
    goto L141;

  L141:
    Tmp_1171 := status_37;
    goto L1;

  anon83_Then:
    assume {:partition} 0 > status_37;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} allocedISRSw != 0;
    call {:si_unique_call 2260} sdv_ExFreePool(0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L142;

  L142:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] != 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_961;
    call {:si_unique_call 2261} MmUnmapIoSpace(0, vslice_dummy_var_961);
    goto L147;

  L147:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16)] != 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_962;
    call {:si_unique_call 2262} MmUnmapIoSpace(0, vslice_dummy_var_962);
    goto L141;

  anon86_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16)] == 0;
    goto L141;

  anon85_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] == 0;
    goto L147;

  anon84_Then:
    assume {:partition} allocedISRSw == 0;
    goto L142;

  anon89_Then:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2263} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2264} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    call {:si_unique_call 2265} boogieTmp := corral_nondet();
    Tmp_1187 := strConst__li2bpl295;
    call {:si_unique_call 2266} vslice_dummy_var_560 := SerialDbgPrintEx(4, Tmp_1187);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_963;
    call {:si_unique_call 2267} sdv_807 := SerialGetDivisorFromBaud(vslice_dummy_var_963, 75, junk);
    call {:si_unique_call 2268} sdv_810 := sdv_NT_ERROR(sdv_807);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_810 != 0;
    goto L218;

  L218:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_964;
    call {:si_unique_call 2269} sdv_832 := SerialGetDivisorFromBaud(vslice_dummy_var_964, 110, junk);
    call {:si_unique_call 2270} sdv_836 := sdv_NT_ERROR(sdv_832);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_836 != 0;
    goto L226;

  L226:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_965;
    call {:si_unique_call 2271} sdv_840 := SerialGetDivisorFromBaud(vslice_dummy_var_965, 135, junk);
    call {:si_unique_call 2272} sdv_806 := sdv_NT_ERROR(sdv_840);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_806 != 0;
    goto L234;

  L234:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_966;
    call {:si_unique_call 2273} sdv_816 := SerialGetDivisorFromBaud(vslice_dummy_var_966, 150, junk);
    call {:si_unique_call 2274} sdv_827 := sdv_NT_ERROR(sdv_816);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_827 != 0;
    goto L242;

  L242:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_967;
    call {:si_unique_call 2275} sdv_819 := SerialGetDivisorFromBaud(vslice_dummy_var_967, 300, junk);
    call {:si_unique_call 2276} sdv_812 := sdv_NT_ERROR(sdv_819);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_812 != 0;
    goto L250;

  L250:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_968;
    call {:si_unique_call 2277} sdv_843 := SerialGetDivisorFromBaud(vslice_dummy_var_968, 600, junk);
    call {:si_unique_call 2278} sdv_813 := sdv_NT_ERROR(sdv_843);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_813 != 0;
    goto L258;

  L258:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_969;
    call {:si_unique_call 2279} sdv_847 := SerialGetDivisorFromBaud(vslice_dummy_var_969, 1200, junk);
    call {:si_unique_call 2280} sdv_809 := sdv_NT_ERROR(sdv_847);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_809 != 0;
    goto L266;

  L266:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_970;
    call {:si_unique_call 2281} sdv_834 := SerialGetDivisorFromBaud(vslice_dummy_var_970, 1800, junk);
    call {:si_unique_call 2282} sdv_841 := sdv_NT_ERROR(sdv_834);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_841 != 0;
    goto L274;

  L274:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_971;
    call {:si_unique_call 2283} sdv_800 := SerialGetDivisorFromBaud(vslice_dummy_var_971, 2400, junk);
    call {:si_unique_call 2284} sdv_817 := sdv_NT_ERROR(sdv_800);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} sdv_817 != 0;
    goto L282;

  L282:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_972;
    call {:si_unique_call 2285} sdv_837 := SerialGetDivisorFromBaud(vslice_dummy_var_972, 4800, junk);
    call {:si_unique_call 2286} sdv_804 := sdv_NT_ERROR(sdv_837);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_804 != 0;
    goto L290;

  L290:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_973;
    call {:si_unique_call 2287} sdv_826 := SerialGetDivisorFromBaud(vslice_dummy_var_973, 7200, junk);
    call {:si_unique_call 2288} sdv_833 := sdv_NT_ERROR(sdv_826);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_833 != 0;
    goto L298;

  L298:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_974;
    call {:si_unique_call 2289} sdv_798 := SerialGetDivisorFromBaud(vslice_dummy_var_974, 9600, junk);
    call {:si_unique_call 2290} sdv_811 := sdv_NT_ERROR(sdv_798);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_811 != 0;
    goto L306;

  L306:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_975;
    call {:si_unique_call 2291} sdv_803 := SerialGetDivisorFromBaud(vslice_dummy_var_975, 14400, junk);
    call {:si_unique_call 2292} sdv_814 := sdv_NT_ERROR(sdv_803);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} sdv_814 != 0;
    goto L314;

  L314:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_976;
    call {:si_unique_call 2293} sdv_808 := SerialGetDivisorFromBaud(vslice_dummy_var_976, 19200, junk);
    call {:si_unique_call 2294} sdv_831 := sdv_NT_ERROR(sdv_808);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_831 != 0;
    goto L322;

  L322:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_977;
    call {:si_unique_call 2295} sdv_799 := SerialGetDivisorFromBaud(vslice_dummy_var_977, 38400, junk);
    call {:si_unique_call 2296} sdv_801 := sdv_NT_ERROR(sdv_799);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} sdv_801 != 0;
    goto L330;

  L330:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_978;
    call {:si_unique_call 2297} sdv_844 := SerialGetDivisorFromBaud(vslice_dummy_var_978, 56000, junk);
    call {:si_unique_call 2298} sdv_805 := sdv_NT_ERROR(sdv_844);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_805 != 0;
    goto L338;

  L338:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_979;
    call {:si_unique_call 2299} sdv_842 := SerialGetDivisorFromBaud(vslice_dummy_var_979, 57600, junk);
    call {:si_unique_call 2300} sdv_822 := sdv_NT_ERROR(sdv_842);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} sdv_822 != 0;
    goto L346;

  L346:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_980;
    call {:si_unique_call 2301} sdv_838 := SerialGetDivisorFromBaud(vslice_dummy_var_980, 115200, junk);
    call {:si_unique_call 2302} sdv_845 := sdv_NT_ERROR(sdv_838);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_845 != 0;
    goto L354;

  L354:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_981;
    call {:si_unique_call 2303} sdv_820 := SerialGetDivisorFromBaud(vslice_dummy_var_981, 128000, junk);
    call {:si_unique_call 2304} sdv_835 := sdv_NT_ERROR(sdv_820);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} sdv_835 != 0;
    goto L362;

  L362:
    call {:si_unique_call 2305} SetDeviceIsOpened(pDevExt_16, 0, 0);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L139;

  anon108_Then:
    assume {:partition} sdv_835 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L362;

  anon107_Then:
    assume {:partition} sdv_845 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L354;

  anon106_Then:
    assume {:partition} sdv_822 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L346;

  anon105_Then:
    assume {:partition} sdv_805 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L338;

  anon104_Then:
    assume {:partition} sdv_801 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L330;

  anon103_Then:
    assume {:partition} sdv_831 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L322;

  anon102_Then:
    assume {:partition} sdv_814 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L314;

  anon101_Then:
    assume {:partition} sdv_811 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L306;

  anon100_Then:
    assume {:partition} sdv_833 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L298;

  anon99_Then:
    assume {:partition} sdv_804 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L290;

  anon98_Then:
    assume {:partition} sdv_817 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L282;

  anon97_Then:
    assume {:partition} sdv_841 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L274;

  anon96_Then:
    assume {:partition} sdv_809 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L266;

  anon95_Then:
    assume {:partition} sdv_813 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L258;

  anon94_Then:
    assume {:partition} sdv_812 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L250;

  anon93_Then:
    assume {:partition} sdv_827 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L242;

  anon92_Then:
    assume {:partition} sdv_806 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L234;

  anon91_Then:
    assume {:partition} sdv_836 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L226;

  anon90_Then:
    assume {:partition} sdv_810 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L218;

  anon88_Then:
    assume {:partition} sdv_823 == 0;
    Tmp_1185 := strConst__li2bpl292;
    call {:si_unique_call 2306} vslice_dummy_var_561 := SerialDbgPrintEx(1, Tmp_1185);
    status_37 := -1073741810;
    goto L139;

  anon87_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)] >= 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L177;

  anon109_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 14;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L174;

  anon110_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 8;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L174;

  anon111_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 4;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L174;

  anon115_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto L174;

  anon81_Then:
    goto L154;

  anon114_Then:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_1188;
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1180)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1180))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    assume {:nonnull} Tmp_1180 != 0;
    assume Tmp_1180 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_982;
    havoc vslice_dummy_var_983;
    havoc vslice_dummy_var_984;
    call {:si_unique_call 2307} SerialLogError(vslice_dummy_var_982, PDevObj_15, vslice_dummy_var_983, Tmp_1180, 0, 0, 0, 8, 0, -1073348598, Tmp_1188, vslice_dummy_var_984, 0, 0);
    Tmp_1174 := strConst__li2bpl291;
    call {:si_unique_call 2308} vslice_dummy_var_562 := SerialDbgPrintEx(1, Tmp_1174);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc vslice_dummy_var_985;
    call {:si_unique_call 2309} MmUnmapIoSpace(0, vslice_dummy_var_985);
    goto L131;

  L131:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] := 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_16)] := 0;
    status_37 := -1073741709;
    goto L139;

  anon82_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] == 0;
    goto L131;

  anon113_Then:
    goto L113;

  anon112_Then:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_1183;
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1192)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1192))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    assume {:nonnull} Tmp_1192 != 0;
    assume Tmp_1192 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_986;
    havoc vslice_dummy_var_987;
    havoc vslice_dummy_var_988;
    havoc vslice_dummy_var_989;
    call {:si_unique_call 2310} SerialLogError(vslice_dummy_var_986, vslice_dummy_var_987, vslice_dummy_var_988, Tmp_1192, 0, 0, 0, 7, 0, -1073348598, Tmp_1183, vslice_dummy_var_989, 0, 0);
    Tmp_1172 := strConst__li2bpl294;
    call {:si_unique_call 2311} vslice_dummy_var_563 := SerialDbgPrintEx(1, Tmp_1172);
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_16)] := 0;
    status_37 := -1073741709;
    goto L139;

  anon80_Then:
    call {:si_unique_call 2312} sdv_830 := ExAllocatePoolWithTag(0, 16, -666022077);
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc Tmp_1179;
    assume {:nonnull} Tmp_1179 != 0;
    assume Tmp_1179 > 0;
    call {:si_unique_call 2313} InitializeListHead(SharerList__SERIAL_CISR_SW(Tmp_1179));
    allocedISRSw := 1;
    goto L36;

  anon117_Then:
    Tmp_1171 := -1073741670;
    goto L1;

  anon116_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_564: int;

  anon0:
    call {:si_unique_call 2314} vslice_dummy_var_564 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_565: int;

  anon0:
    call {:si_unique_call 2315} vslice_dummy_var_565 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartRead"} SerialStartRead(actual_Extension_19: int) returns (Tmp_1197: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartRead"} SerialStartRead(actual_Extension_19: int) returns (Tmp_1197: int)
{
  var {:pointer} Tmp_1198: int;
  var {:scalar} localStatus: int;
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} sdv_848: int;
  var {:pointer} sdv_849: int;
  var {:pointer} Tmp_1199: int;
  var {:scalar} totalTime: int;
  var {:pointer} Tmp_1200: int;
  var {:scalar} os2ssreturn: int;
  var {:scalar} updateChar: int;
  var {:scalar} timeoutsForIrp: int;
  var {:scalar} setFirstStatus: int;
  var {:scalar} useTotalTimer: int;
  var {:pointer} newIrp: int;
  var {:pointer} Tmp_1201: int;
  var {:scalar} multiplierVal: int;
  var {:scalar} crunchDownToOne: int;
  var {:pointer} sdv_854: int;
  var {:pointer} Tmp_1202: int;
  var {:scalar} s_p_e_c_i_a_l_16: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_856: int;
  var {:pointer} Tmp_1203: int;
  var {:pointer} s_p_e_c_i_a_l_17: int;
  var {:scalar} constantVal: int;
  var {:pointer} Tmp_1204: int;
  var {:pointer} Tmp_1205: int;
  var {:pointer} sdv_860: int;
  var {:pointer} Tmp_1206: int;
  var {:scalar} controlIrql: int;
  var {:pointer} Tmp_1207: int;
  var {:scalar} s_p_e_c_i_a_l_18: int;
  var {:scalar} returnWithWhatsPresent: int;
  var {:scalar} useIntervalTimer: int;
  var {:pointer} sdv_863: int;
  var {:scalar} firstStatus: int;
  var {:pointer} Extension_19: int;
  var boogieTmp: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;
  var vslice_dummy_var_571: int;
  var vslice_dummy_var_572: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_990: int;
  var vslice_dummy_var_991: int;
  var vslice_dummy_var_992: int;
  var vslice_dummy_var_993: int;
  var vslice_dummy_var_994: int;
  var vslice_dummy_var_995: int;
  var vslice_dummy_var_996: int;

  anon0:
    call {:si_unique_call 2316} totalTime := __HAVOC_malloc(20);
    call {:si_unique_call 2317} updateChar := __HAVOC_malloc(12);
    call {:si_unique_call 2318} timeoutsForIrp := __HAVOC_malloc(20);
    call {:si_unique_call 2319} newIrp := __HAVOC_malloc(4);
    Extension_19 := actual_Extension_19;
    call {:si_unique_call 2320} Tmp_1200 := __HAVOC_malloc(84);
    call {:si_unique_call 2321} Tmp_1203 := __HAVOC_malloc(88);
    setFirstStatus := 0;
    Tmp_1203 := strConst__li2bpl297;
    call {:si_unique_call 2322} vslice_dummy_var_569 := SerialDbgPrintEx(2, Tmp_1203);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto L23;

  L23:
    call {:si_unique_call 2323} Tmp_1198, localStatus, sdv_848, Tmp_1199, os2ssreturn, setFirstStatus, useTotalTimer, Tmp_1201, multiplierVal, crunchDownToOne, sdv_854, Tmp_1202, oldIrql_6, sdv_856, constantVal, Tmp_1204, Tmp_1205, controlIrql, Tmp_1207, returnWithWhatsPresent, useIntervalTimer, sdv_863, firstStatus, boogieTmp, vslice_dummy_var_566, vslice_dummy_var_567, vslice_dummy_var_568, vslice_dummy_var_571 := SerialStartRead_loop_L23(Tmp_1198, localStatus, sdv_848, Tmp_1199, totalTime, os2ssreturn, updateChar, timeoutsForIrp, setFirstStatus, useTotalTimer, newIrp, Tmp_1201, multiplierVal, crunchDownToOne, sdv_854, Tmp_1202, oldIrql_6, sdv_856, constantVal, Tmp_1204, Tmp_1205, controlIrql, Tmp_1207, returnWithWhatsPresent, useIntervalTimer, sdv_863, firstStatus, Extension_19, boogieTmp, vslice_dummy_var_566, vslice_dummy_var_567, vslice_dummy_var_568, vslice_dummy_var_571);
    goto L23_last;

  L23_last:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_996;
    call {:si_unique_call 2354} sdv_854 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_996);
    assume {:nonnull} sdv_854 != 0;
    assume sdv_854 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 2324} localStatus := SerialResizeBuffer(Extension_19);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2325} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_19), ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_19), newIrp, 1, Extension_19);
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    Tmp_1200 := strConst__li2bpl296;
    call {:si_unique_call 2326} vslice_dummy_var_570 := SerialDbgPrintEx(2, Tmp_1200);
    Tmp_1197 := firstStatus;
    goto L1;

  L1:
    return;

  anon61_Then:
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    assume false;
    return;

  anon60_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := localStatus;
    setFirstStatus := 1;
    goto L37;

  anon59_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_990;
    call {:si_unique_call 2327} sdv_856 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_990);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} sdv_856 != 0;
    assume sdv_856 > 0;
    useTotalTimer := 0;
    returnWithWhatsPresent := 0;
    os2ssreturn := 0;
    crunchDownToOne := 0;
    useIntervalTimer := 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2328} vslice_dummy_var_571 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_19), Extension_19);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2329} vslice_dummy_var_566 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_19), Extension_19);
    call {:si_unique_call 2330} Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    Mem_T.INT4[Tmp_1198] := controlIrql;
    call {:si_unique_call 2331} sdv_KeAcquireSpinLock(0, Tmp_1198);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    controlIrql := Mem_T.INT4[Tmp_1198];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    call {:si_unique_call 2332} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    useIntervalTimer := 1;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L66;

  L66:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L76;

  L76:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  L83:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} useTotalTimer != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} totalTime != 0;
    assume totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 2333} Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    Mem_T.INT4[Tmp_1198] := controlIrql;
    call {:si_unique_call 2334} sdv_KeAcquireSpinLock(0, Tmp_1198);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    controlIrql := Mem_T.INT4[Tmp_1198];
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    call {:si_unique_call 2335} boogieTmp := SerialGetCharsFromIntBuffer(Extension_19);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 2336} vslice_dummy_var_567 := KeSynchronizeExecution(0, li2bplFunctionConstant137, 0);
    call {:si_unique_call 2337} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1201;
    assume {:nonnull} Tmp_1201 != 0;
    assume Tmp_1201 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1201))] := 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon83_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon72_Then:
    assume {:partition} returnWithWhatsPresent == 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} os2ssreturn != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1204;
    assume {:nonnull} Tmp_1204 != 0;
    assume Tmp_1204 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto L105;

  L105:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_991;
    call {:si_unique_call 2338} sdv_863 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_991);
    assume {:nonnull} sdv_863 != 0;
    assume sdv_863 > 0;
    call {:si_unique_call 2339} Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    Mem_T.INT4[Tmp_1198] := oldIrql_6;
    call {:si_unique_call 2340} IoAcquireCancelSpinLock(Tmp_1198);
    assume {:nonnull} Tmp_1198 != 0;
    assume Tmp_1198 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_1198];
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1202;
    assume {:nonnull} Tmp_1202 != 0;
    assume Tmp_1202 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 2341} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 2342} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1199;
    assume {:nonnull} Tmp_1199 != 0;
    assume Tmp_1199 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1199))] := -1073741536;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1207;
    assume {:nonnull} Tmp_1207 != 0;
    assume Tmp_1207 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := -1073741536;
    setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon85_Then:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} crunchDownToOne != 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_992;
    call {:si_unique_call 2343} sdv_848 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_992);
    assume {:nonnull} sdv_848 != 0;
    assume sdv_848 > 0;
    goto L126;

  L126:
    call {:si_unique_call 2344} vslice_dummy_var_568 := KeSynchronizeExecution(0, li2bplFunctionConstant138, 0);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    call {:si_unique_call 2345} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 2346} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1205;
    assume {:nonnull} Tmp_1205 != 0;
    assume Tmp_1205 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1205))] := 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon87_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon76_Then:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} useTotalTimer != 0;
    s_p_e_c_i_a_l_16 := 4;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_993;
    call {:si_unique_call 2347} sdv_849 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_993);
    assume {:nonnull} sdv_849 != 0;
    assume sdv_849 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_849)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_15] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_15], s_p_e_c_i_a_l_16);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    call {:si_unique_call 2348} vslice_dummy_var_572 := SerialSetTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_19), totalTime, TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_19), Extension_19);
    goto L146;

  L146:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} useIntervalTimer != 0;
    s_p_e_c_i_a_l_18 := 8;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc vslice_dummy_var_994;
    call {:si_unique_call 2349} sdv_860 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_994);
    assume {:nonnull} sdv_860 != 0;
    assume sdv_860 > 0;
    s_p_e_c_i_a_l_17 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_860)));
    assume {:nonnull} s_p_e_c_i_a_l_17 != 0;
    assume s_p_e_c_i_a_l_17 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_17] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_17], s_p_e_c_i_a_l_18);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    havoc Tmp_1206;
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Tmp_1206 != 0;
    assume Tmp_1206 > 0;
    havoc vslice_dummy_var_995;
    call {:si_unique_call 2350} vslice_dummy_var_573 := SerialSetTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_19), vslice_dummy_var_995, IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_19), Extension_19);
    goto L158;

  L158:
    call {:si_unique_call 2351} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 2352} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 2353} sdv_KeReleaseSpinLock(0, controlIrql);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} setFirstStatus != 0;
    goto L183;

  L183:
    Tmp_1197 := firstStatus;
    goto L1;

  anon79_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 259;
    goto L183;

  anon78_Then:
    assume {:partition} useIntervalTimer == 0;
    goto L158;

  anon77_Then:
    assume {:partition} useTotalTimer == 0;
    goto L146;

  anon75_Then:
    assume {:partition} crunchDownToOne == 0;
    goto L126;

  anon84_Then:
    goto L94;

  anon74_Then:
    assume {:partition} os2ssreturn == 0;
    goto L105;

  anon73_Then:
    goto L94;

  anon71_Then:
    assume {:partition} useTotalTimer == 0;
    goto L84;

  anon70_Then:
    goto L77;

  L77:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    crunchDownToOne := 1;
    multiplierVal := 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon80_Then:
    goto L83;

  anon69_Then:
    goto L83;

  anon68_Then:
    goto L77;

  anon66_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    returnWithWhatsPresent := 1;
    goto L83;

  anon67_Then:
    goto L76;

  anon63_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L192;

  L192:
    useTotalTimer := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon65_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L192;

  anon81_Then:
    goto L83;

  anon82_Then:
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    goto L66;

  anon64_Then:
    goto L66;

  anon62_Then:
    goto L66;
}



procedure {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_20: int, actual_NewBuffer: int) returns (Tmp_1208: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_20: int, actual_NewBuffer: int) returns (Tmp_1208: int)
{
  var {:scalar} firstTryNumberToGet: int;
  var {:scalar} numberOfCharsMoved: int;
  var {:scalar} Tmp_1211: int;
  var {:pointer} Extension_20: int;
  var {:pointer} NewBuffer: int;

  anon0:
    Extension_20 := actual_Extension_20;
    NewBuffer := actual_NewBuffer;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc numberOfCharsMoved;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} numberOfCharsMoved != 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    havoc firstTryNumberToGet;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} firstTryNumberToGet >= numberOfCharsMoved;
    call {:si_unique_call 2355} sdv_RtlMoveMemory(0, 0, numberOfCharsMoved);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L6;

  L6:
    Tmp_1208 := numberOfCharsMoved;
    return;

  anon7_Then:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L6;

  anon9_Then:
    assume {:partition} numberOfCharsMoved > firstTryNumberToGet;
    call {:si_unique_call 2356} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet);
    Tmp_1211 := numberOfCharsMoved - firstTryNumberToGet;
    call {:si_unique_call 2357} sdv_RtlMoveMemory(0, 0, Tmp_1211);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto L6;

  anon8_Then:
    assume {:partition} numberOfCharsMoved == 0;
    goto L6;
}



procedure {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteRead"} SerialCompleteRead(actual_Dpc_7: int, actual_DeferredContext_5: int, actual_SystemContext1_4: int, actual_SystemContext2_4: int)
{
  var {:pointer} Tmp_1213: int;
  var {:pointer} Tmp_1214: int;
  var {:pointer} Tmp_1215: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} extension: int;
  var {:pointer} Dpc_7: int;
  var {:pointer} DeferredContext_5: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;
  var vslice_dummy_var_576: int;

  anon0:
    call {:si_unique_call 2358} vslice_dummy_var_574 := __HAVOC_malloc(4);
    Dpc_7 := actual_Dpc_7;
    DeferredContext_5 := actual_DeferredContext_5;
    call {:si_unique_call 2359} Tmp_1213 := __HAVOC_malloc(100);
    call {:si_unique_call 2360} Tmp_1215 := __HAVOC_malloc(100);
    extension := DeferredContext_5;
    Tmp_1213 := strConst__li2bpl299;
    call {:si_unique_call 2361} vslice_dummy_var_575 := SerialDbgPrintEx(2, Tmp_1213);
    call {:si_unique_call 2362} Tmp_1214 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1214 != 0;
    assume Tmp_1214 > 0;
    Mem_T.INT4[Tmp_1214] := oldIrql_7;
    call {:si_unique_call 2363} IoAcquireCancelSpinLock(Tmp_1214);
    assume {:nonnull} Tmp_1214 != 0;
    assume Tmp_1214 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_1214];
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 2364} SerialTryToCompleteCurrent#1(extension, 0, oldIrql_7, 0, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension), ReadQueue__SERIAL_DEVICE_EXTENSION(extension), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension), li2bplFunctionConstant136, li2bplFunctionConstant140, 1);
    call {:si_unique_call 2365} SerialDpcEpilogue(extension, Dpc_7);
    Tmp_1215 := strConst__li2bpl298;
    call {:si_unique_call 2366} vslice_dummy_var_576 := SerialDbgPrintEx(2, Tmp_1215);
    return;
}



procedure {:origName "SerialRead"} SerialRead(actual_DeviceObject_21: int, actual_Irp_17: int) returns (Tmp_1216: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRead"} SerialRead(actual_DeviceObject_21: int, actual_Irp_17: int) returns (Tmp_1216: int)
{
  var {:pointer} Tmp_1217: int;
  var {:pointer} Tmp_1218: int;
  var {:pointer} Tmp_1219: int;
  var {:scalar} sdv_868: int;
  var {:pointer} Tmp_1221: int;
  var {:pointer} sdv_870: int;
  var {:pointer} Tmp_1222: int;
  var {:pointer} Tmp_1223: int;
  var {:pointer} Tmp_1224: int;
  var {:pointer} Tmp_1225: int;
  var {:scalar} status_38: int;
  var {:pointer} extension_1: int;
  var {:pointer} DeviceObject_21: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_577: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;

  anon0:
    DeviceObject_21 := actual_DeviceObject_21;
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 2367} Tmp_1217 := __HAVOC_malloc(96);
    call {:si_unique_call 2368} Tmp_1218 := __HAVOC_malloc(80);
    call {:si_unique_call 2369} Tmp_1219 := __HAVOC_malloc(84);
    call {:si_unique_call 2370} Tmp_1221 := __HAVOC_malloc(80);
    call {:si_unique_call 2371} Tmp_1222 := __HAVOC_malloc(80);
    call {:si_unique_call 2372} Tmp_1223 := __HAVOC_malloc(80);
    call {:si_unique_call 2373} Tmp_1224 := __HAVOC_malloc(72);
    call {:si_unique_call 2374} Tmp_1225 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_21 != 0;
    assume DeviceObject_21 > 0;
    havoc extension_1;
    Tmp_1219 := strConst__li2bpl304;
    call {:si_unique_call 2375} vslice_dummy_var_577 := SerialDbgPrintEx(2, Tmp_1219);
    call {:si_unique_call 2376} status_38 := SerialIRPPrologue(Irp_17, extension_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_38 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_38 != 259;
    Tmp_1224 := strConst__li2bpl1;
    call {:si_unique_call 2377} vslice_dummy_var_578 := SerialDbgPrintEx(9, Tmp_1224);
    call {:si_unique_call 2378} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2379} SerialIRPEpilogue(extension_1);
    goto L19;

  L19:
    Tmp_1221 := strConst__li2bpl300;
    call {:si_unique_call 2380} vslice_dummy_var_579 := SerialDbgPrintEx(2, Tmp_1221);
    Tmp_1216 := status_38;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} status_38 == 259;
    goto L19;

  anon9_Then:
    assume {:partition} status_38 == 0;
    Tmp_1217 := strConst__li2bpl0;
    call {:si_unique_call 2381} vslice_dummy_var_580 := SerialDbgPrintEx(9, Tmp_1217);
    call {:si_unique_call 2382} sdv_868 := SerialCompleteIfError(DeviceObject_21, Irp_17);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_868 != 0;
    Tmp_1222 := strConst__li2bpl301;
    call {:si_unique_call 2383} vslice_dummy_var_581 := SerialDbgPrintEx(2, Tmp_1222);
    Tmp_1216 := -1073741536;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_868 == 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    call {:si_unique_call 2384} sdv_870 := sdv_IoGetCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} sdv_870 != 0;
    assume sdv_870 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    call {:si_unique_call 2385} status_38 := SerialStartOrQueue(extension_1, Irp_17, ReadQueue__SERIAL_DEVICE_EXTENSION(extension_1), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_1), li2bplFunctionConstant136);
    Tmp_1218 := strConst__li2bpl302;
    call {:si_unique_call 2386} vslice_dummy_var_582 := SerialDbgPrintEx(2, Tmp_1218);
    Tmp_1216 := status_38;
    goto L1;

  anon12_Then:
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_17))] := 0;
    Tmp_1225 := strConst__li2bpl1;
    call {:si_unique_call 2387} vslice_dummy_var_583 := SerialDbgPrintEx(9, Tmp_1225);
    call {:si_unique_call 2388} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2389} SerialIRPEpilogue(extension_1);
    Tmp_1223 := strConst__li2bpl303;
    call {:si_unique_call 2390} vslice_dummy_var_584 := SerialDbgPrintEx(2, Tmp_1223);
    Tmp_1216 := 0;
    goto L1;
}



procedure {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_21: int) returns (Tmp_1226: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_21: int) returns (Tmp_1226: int)
{
  var {:scalar} numberOfCharsToGet: int;
  var {:scalar} firstTryNumberToGet_1: int;
  var {:pointer} Tmp_1229: int;
  var {:pointer} Tmp_1230: int;
  var {:pointer} Tmp_1231: int;
  var {:scalar} Tmp_1233: int;
  var {:pointer} Tmp_1234: int;
  var {:pointer} Tmp_1235: int;
  var {:pointer} Extension_21: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;
  var vslice_dummy_var_997: int;
  var vslice_dummy_var_998: int;
  var vslice_dummy_var_999: int;

  anon0:
    Extension_21 := actual_Extension_21;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc numberOfCharsToGet;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc numberOfCharsToGet;
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numberOfCharsToGet != 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc firstTryNumberToGet_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} firstTryNumberToGet_1 > numberOfCharsToGet;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_997;
    call {:si_unique_call 2391} vslice_dummy_var_586 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_997);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_1235;
    assume {:nonnull} Tmp_1235 != 0;
    assume Tmp_1235 > 0;
    call {:si_unique_call 2392} sdv_RtlMoveMemory(0, 0, numberOfCharsToGet);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L9;

  L9:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_1231;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_1229;
    assume {:nonnull} Tmp_1229 != 0;
    assume Tmp_1229 > 0;
    assume {:nonnull} Tmp_1231 != 0;
    assume Tmp_1231 > 0;
    Tmp_1226 := numberOfCharsToGet;
    return;

  anon12_Then:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L9;

  anon11_Then:
    assume {:partition} numberOfCharsToGet >= firstTryNumberToGet_1;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_998;
    call {:si_unique_call 2393} vslice_dummy_var_585 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_998);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_1234;
    assume {:nonnull} Tmp_1234 != 0;
    assume Tmp_1234 > 0;
    call {:si_unique_call 2394} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet_1);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    Tmp_1233 := numberOfCharsToGet - firstTryNumberToGet_1;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc vslice_dummy_var_999;
    call {:si_unique_call 2395} vslice_dummy_var_587 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_999);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    havoc Tmp_1230;
    assume {:nonnull} Tmp_1230 != 0;
    assume Tmp_1230 > 0;
    call {:si_unique_call 2396} sdv_RtlMoveMemory(0, 0, Tmp_1233);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L9;

  anon9_Then:
    assume {:partition} numberOfCharsToGet == 0;
    goto L9;

  anon10_Then:
    goto L7;
}



procedure {:origName "SerialReadTimeout"} SerialReadTimeout(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialReadTimeout"} SerialReadTimeout(actual_Dpc_8: int, actual_DeferredContext_6: int, actual_SystemContext1_5: int, actual_SystemContext2_5: int)
{
  var {:pointer} Tmp_1237: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} Tmp_1239: int;
  var {:pointer} extension_2: int;
  var {:pointer} Tmp_1240: int;
  var {:pointer} Dpc_8: int;
  var {:pointer} DeferredContext_6: int;
  var vslice_dummy_var_588: int;
  var vslice_dummy_var_589: int;
  var vslice_dummy_var_590: int;

  anon0:
    call {:si_unique_call 2397} vslice_dummy_var_588 := __HAVOC_malloc(4);
    Dpc_8 := actual_Dpc_8;
    DeferredContext_6 := actual_DeferredContext_6;
    call {:si_unique_call 2398} Tmp_1237 := __HAVOC_malloc(96);
    call {:si_unique_call 2399} Tmp_1240 := __HAVOC_malloc(80);
    extension_2 := DeferredContext_6;
    Tmp_1237 := strConst__li2bpl306;
    call {:si_unique_call 2400} vslice_dummy_var_589 := SerialDbgPrintEx(2, Tmp_1237);
    call {:si_unique_call 2401} Tmp_1239 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1239 != 0;
    assume Tmp_1239 > 0;
    Mem_T.INT4[Tmp_1239] := oldIrql_8;
    call {:si_unique_call 2402} IoAcquireCancelSpinLock(Tmp_1239);
    assume {:nonnull} Tmp_1239 != 0;
    assume Tmp_1239 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_1239];
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 2403} SerialTryToCompleteCurrent#1(extension_2, li2bplFunctionConstant142, oldIrql_8, 258, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_2), ReadQueue__SERIAL_DEVICE_EXTENSION(extension_2), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension_2), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension_2), li2bplFunctionConstant136, li2bplFunctionConstant140, 4);
    call {:si_unique_call 2404} SerialDpcEpilogue(extension_2, Dpc_8);
    Tmp_1240 := strConst__li2bpl305;
    call {:si_unique_call 2405} vslice_dummy_var_590 := SerialDbgPrintEx(2, Tmp_1240);
    return;
}



procedure {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_22: int) returns (Tmp_1241: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1241 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_22: int) returns (Tmp_1241: int)
{
  var {:pointer} Tmp_1242: int;
  var {:pointer} irpSp_1: int;
  var {:pointer} newBuffer: int;
  var {:pointer} Tmp_1243: int;
  var {:pointer} rs: int;
  var {:pointer} Tmp_1244: int;
  var {:scalar} controlIrql_1: int;
  var {:scalar} rp: int;
  var {:pointer} Tmp_1245: int;
  var {:pointer} Extension_22: int;
  var boogieTmp: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_1000: int;

  anon0:
    call {:si_unique_call 2406} rp := __HAVOC_malloc(20);
    Extension_22 := actual_Extension_22;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc Tmp_1244;
    assume {:nonnull} Tmp_1244 != 0;
    assume Tmp_1244 > 0;
    havoc rs;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc vslice_dummy_var_1000;
    call {:si_unique_call 2407} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1000);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    havoc newBuffer;
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc Tmp_1245;
    assume {:nonnull} Tmp_1245 != 0;
    assume Tmp_1245 > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    havoc Tmp_1242;
    assume {:nonnull} Tmp_1242 != 0;
    assume Tmp_1242 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1242))] := 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} Extension_22 != 0;
    assume Extension_22 > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    call {:si_unique_call 2408} Tmp_1243 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1243 != 0;
    assume Tmp_1243 > 0;
    Mem_T.INT4[Tmp_1243] := controlIrql_1;
    call {:si_unique_call 2409} sdv_KeAcquireSpinLock(0, Tmp_1243);
    assume {:nonnull} Tmp_1243 != 0;
    assume Tmp_1243 > 0;
    controlIrql_1 := Mem_T.INT4[Tmp_1243];
    assume {:nonnull} rp != 0;
    assume rp > 0;
    call {:si_unique_call 2410} boogieTmp := SerialMoveToNewIntBuffer(Extension_22, newBuffer);
    call {:si_unique_call 2411} vslice_dummy_var_591 := KeSynchronizeExecution(0, li2bplFunctionConstant148, 0);
    call {:si_unique_call 2412} sdv_KeReleaseSpinLock(0, controlIrql_1);
    call {:si_unique_call 2413} sdv_ExFreePool(0);
    goto L20;

  L20:
    Tmp_1241 := 0;
    return;

  anon3_Then:
    call {:si_unique_call 2414} sdv_ExFreePool(0);
    goto L20;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_592: int;

  anon0:
    call {:si_unique_call 2415} vslice_dummy_var_592 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCancelCurrentRead"} SerialCancelCurrentRead(actual_DeviceObject_22: int, actual_Irp_18: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelCurrentRead"} SerialCancelCurrentRead(actual_DeviceObject_22: int, actual_Irp_18: int)
{
  var {:pointer} extension_3: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_593: int;

  anon0:
    call {:si_unique_call 2416} vslice_dummy_var_593 := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_18 := actual_Irp_18;
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc extension_3;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    call {:si_unique_call 2417} SerialTryToCompleteCurrent#1(extension_3, li2bplFunctionConstant142, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_18)], -1073741536, CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension_3), ReadQueue__SERIAL_DEVICE_EXTENSION(extension_3), ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(extension_3), ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(extension_3), li2bplFunctionConstant136, li2bplFunctionConstant140, 2);
    return;
}



procedure {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject_23: int, actual_Irp_19: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject_23: int, actual_Irp_19: int)
{
  var {:pointer} Tmp_1251: int;
  var {:pointer} Tmp_1253: int;
  var {:pointer} Extension_23: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;

  anon0:
    call {:si_unique_call 2418} vslice_dummy_var_594 := __HAVOC_malloc(4);
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_19 := actual_Irp_19;
    call {:si_unique_call 2419} Tmp_1251 := __HAVOC_malloc(84);
    call {:si_unique_call 2420} Tmp_1253 := __HAVOC_malloc(108);
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc Extension_23;
    Tmp_1251 := strConst__li2bpl308;
    call {:si_unique_call 2421} vslice_dummy_var_595 := SerialDbgPrintEx(6, Tmp_1251);
    Tmp_1253 := strConst__li2bpl307;
    call {:si_unique_call 2422} vslice_dummy_var_596 := SerialDbgPrintEx(7, Tmp_1253);
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    call {:si_unique_call 2423} SerialTryToCompleteCurrent#1(Extension_23, li2bplFunctionConstant199, Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_19)], -1073741536, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_23), 0, 0, 0, 0, 0, 2);
    return;
}



procedure {:origName "SerialStartMask"} SerialStartMask(actual_Extension_24: int) returns (Tmp_1254: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartMask"} SerialStartMask(actual_Extension_24: int) returns (Tmp_1254: int)
{
  var {:pointer} Tmp_1255: int;
  var {:pointer} s_p_e_c_i_a_l_19: int;
  var {:pointer} Tmp_1256: int;
  var {:scalar} FirstStatus_1: int;
  var {:pointer} Tmp_1257: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_1258: int;
  var {:pointer} Tmp_1259: int;
  var {:pointer} Tmp_1260: int;
  var {:pointer} Tmp_1261: int;
  var {:pointer} Tmp_1262: int;
  var {:pointer} Tmp_1263: int;
  var {:pointer} Tmp_1264: int;
  var {:pointer} IrpSp_3: int;
  var {:pointer} Tmp_1265: int;
  var {:scalar} OldIrql_12: int;
  var {:pointer} Tmp_1266: int;
  var {:pointer} NewIrp_4: int;
  var {:scalar} s_p_e_c_i_a_l_20: int;
  var {:pointer} Tmp_1267: int;
  var {:pointer} Tmp_1268: int;
  var {:pointer} Tmp_1269: int;
  var {:pointer} sdv_903: int;
  var {:pointer} Tmp_1270: int;
  var {:pointer} Tmp_1271: int;
  var {:pointer} sdv_906: int;
  var {:pointer} Tmp_1272: int;
  var {:pointer} Tmp_1273: int;
  var {:pointer} Extension_24: int;
  var vslice_dummy_var_597: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_599: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_606: int;
  var vslice_dummy_var_607: int;
  var vslice_dummy_var_608: int;
  var vslice_dummy_var_609: int;
  var vslice_dummy_var_610: int;
  var vslice_dummy_var_611: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_1001: int;
  var vslice_dummy_var_1002: int;
  var vslice_dummy_var_1003: int;
  var vslice_dummy_var_1004: int;

  anon0:
    call {:si_unique_call 2424} NewIrp_4 := __HAVOC_malloc(4);
    Extension_24 := actual_Extension_24;
    call {:si_unique_call 2425} Tmp_1255 := __HAVOC_malloc(128);
    call {:si_unique_call 2426} Tmp_1256 := __HAVOC_malloc(368);
    call {:si_unique_call 2427} Tmp_1257 := __HAVOC_malloc(160);
    call {:si_unique_call 2428} Tmp_1259 := __HAVOC_malloc(368);
    call {:si_unique_call 2429} Tmp_1262 := __HAVOC_malloc(288);
    call {:si_unique_call 2430} Tmp_1263 := __HAVOC_malloc(288);
    call {:si_unique_call 2431} Tmp_1265 := __HAVOC_malloc(120);
    call {:si_unique_call 2432} Tmp_1266 := __HAVOC_malloc(288);
    call {:si_unique_call 2433} Tmp_1267 := __HAVOC_malloc(80);
    call {:si_unique_call 2434} Tmp_1268 := __HAVOC_malloc(148);
    call {:si_unique_call 2435} Tmp_1269 := __HAVOC_malloc(284);
    call {:si_unique_call 2436} Tmp_1270 := __HAVOC_malloc(288);
    call {:si_unique_call 2437} Tmp_1272 := __HAVOC_malloc(368);
    call {:si_unique_call 2438} Tmp_1273 := __HAVOC_malloc(368);
    SetFirstStatus_1 := 0;
    Tmp_1267 := strConst__li2bpl316;
    call {:si_unique_call 2439} vslice_dummy_var_598 := SerialDbgPrintEx(6, Tmp_1267);
    goto L11;

  L11:
    call {:si_unique_call 2440} Tmp_1255, s_p_e_c_i_a_l_19, Tmp_1256, FirstStatus_1, Tmp_1257, SetFirstStatus_1, Tmp_1258, Tmp_1259, Tmp_1260, Tmp_1261, Tmp_1262, Tmp_1263, Tmp_1264, IrpSp_3, Tmp_1265, OldIrql_12, Tmp_1266, s_p_e_c_i_a_l_20, Tmp_1268, Tmp_1269, sdv_903, Tmp_1270, Tmp_1271, sdv_906, Tmp_1272, Tmp_1273, vslice_dummy_var_597, vslice_dummy_var_599, vslice_dummy_var_600, vslice_dummy_var_601, vslice_dummy_var_602, vslice_dummy_var_603, vslice_dummy_var_604, vslice_dummy_var_605, vslice_dummy_var_606, vslice_dummy_var_607, vslice_dummy_var_608, vslice_dummy_var_609, vslice_dummy_var_610, vslice_dummy_var_611, vslice_dummy_var_612, vslice_dummy_var_613 := SerialStartMask_loop_L11(Tmp_1255, s_p_e_c_i_a_l_19, Tmp_1256, FirstStatus_1, Tmp_1257, SetFirstStatus_1, Tmp_1258, Tmp_1259, Tmp_1260, Tmp_1261, Tmp_1262, Tmp_1263, Tmp_1264, IrpSp_3, Tmp_1265, OldIrql_12, Tmp_1266, NewIrp_4, s_p_e_c_i_a_l_20, Tmp_1268, Tmp_1269, sdv_903, Tmp_1270, Tmp_1271, sdv_906, Tmp_1272, Tmp_1273, Extension_24, vslice_dummy_var_597, vslice_dummy_var_599, vslice_dummy_var_600, vslice_dummy_var_601, vslice_dummy_var_602, vslice_dummy_var_603, vslice_dummy_var_604, vslice_dummy_var_605, vslice_dummy_var_606, vslice_dummy_var_607, vslice_dummy_var_608, vslice_dummy_var_609, vslice_dummy_var_610, vslice_dummy_var_611, vslice_dummy_var_612, vslice_dummy_var_613);
    goto L11_last;

  L11_last:
    Tmp_1255 := strConst__li2bpl309;
    call {:si_unique_call 2466} vslice_dummy_var_599 := SerialDbgPrintEx(7, Tmp_1255);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1004;
    call {:si_unique_call 2467} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1004);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_1265 := strConst__li2bpl310;
    call {:si_unique_call 2441} vslice_dummy_var_600 := SerialDbgPrintEx(7, Tmp_1265);
    call {:si_unique_call 2442} vslice_dummy_var_597 := KeSynchronizeExecution(0, li2bplFunctionConstant196, 0);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_1271;
    assume {:nonnull} Tmp_1271 != 0;
    assume Tmp_1271 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1271))] := 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 2443} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), NewIrp_4, 1, Extension_24);
    Tmp_1272 := strConst__li2bpl312;
    call {:si_unique_call 2444} vslice_dummy_var_601 := SerialDbgPrintEx(7, Tmp_1272);
    goto L37;

  L37:
    assume {:nonnull} NewIrp_4 != 0;
    assume NewIrp_4 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_1254 := FirstStatus_1;
    return;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_1263 := strConst__li2bpl311;
    call {:si_unique_call 2445} vslice_dummy_var_602 := SerialDbgPrintEx(7, Tmp_1263);
    FirstStatus_1 := 0;
    SetFirstStatus_1 := 1;
    goto L31;

  anon19_Then:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 2446} Tmp_1261 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1261 != 0;
    assume Tmp_1261 > 0;
    Mem_T.INT4[Tmp_1261] := OldIrql_12;
    call {:si_unique_call 2447} IoAcquireCancelSpinLock(Tmp_1261);
    assume {:nonnull} Tmp_1261 != 0;
    assume Tmp_1261 > 0;
    OldIrql_12 := Mem_T.INT4[Tmp_1261];
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_1260;
    assume {:nonnull} Tmp_1260 != 0;
    assume Tmp_1260 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    Tmp_1257 := strConst__li2bpl315;
    call {:si_unique_call 2448} vslice_dummy_var_606 := SerialDbgPrintEx(7, Tmp_1257);
    call {:si_unique_call 2449} IoReleaseCancelSpinLock(OldIrql_12);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_1258;
    assume {:nonnull} Tmp_1258 != 0;
    assume Tmp_1258 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1258))] := -1073741536;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L64;

  L64:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 2450} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), NewIrp_4, 1, Extension_24);
    Tmp_1273 := strConst__li2bpl312;
    call {:si_unique_call 2451} vslice_dummy_var_607 := SerialDbgPrintEx(7, Tmp_1273);
    goto L37;

  anon27_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_1266 := strConst__li2bpl311;
    call {:si_unique_call 2452} vslice_dummy_var_608 := SerialDbgPrintEx(7, Tmp_1266);
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L64;

  anon26_Then:
    Tmp_1268 := strConst__li2bpl314;
    call {:si_unique_call 2453} vslice_dummy_var_609 := SerialDbgPrintEx(7, Tmp_1268);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L76;

  L76:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1001;
    call {:si_unique_call 2454} sdv_903 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1001);
    assume {:nonnull} sdv_903 != 0;
    assume sdv_903 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1002;
    call {:si_unique_call 2455} vslice_dummy_var_610 := sdv_IoSetCancelRoutine(vslice_dummy_var_1002, li2bplFunctionConstant197);
    s_p_e_c_i_a_l_20 := 2;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc vslice_dummy_var_1003;
    call {:si_unique_call 2456} sdv_906 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1003);
    assume {:nonnull} sdv_906 != 0;
    assume sdv_906 > 0;
    s_p_e_c_i_a_l_19 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_906)));
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_19] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_19], s_p_e_c_i_a_l_20);
    call {:si_unique_call 2457} vslice_dummy_var_611 := KeSynchronizeExecution(0, li2bplFunctionConstant198, 0);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 2458} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), NewIrp_4, 0, Extension_24, OldIrql_12);
    Tmp_1256 := strConst__li2bpl312;
    call {:si_unique_call 2459} vslice_dummy_var_612 := SerialDbgPrintEx(7, Tmp_1256);
    goto L37;

  anon23_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_1270 := strConst__li2bpl311;
    call {:si_unique_call 2460} vslice_dummy_var_613 := SerialDbgPrintEx(7, Tmp_1270);
    FirstStatus_1 := 259;
    SetFirstStatus_1 := 1;
    call {:si_unique_call 2461} sdv_IoMarkIrpPending(0);
    goto L76;

  anon22_Then:
    goto L41;

  L41:
    Tmp_1269 := strConst__li2bpl313;
    call {:si_unique_call 2462} vslice_dummy_var_603 := SerialDbgPrintEx(7, Tmp_1269);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    havoc Tmp_1264;
    assume {:nonnull} Tmp_1264 != 0;
    assume Tmp_1264 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1264))] := -1073741811;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L112;

  L112:
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 2463} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_24), NewIrp_4, 1, Extension_24);
    Tmp_1259 := strConst__li2bpl312;
    call {:si_unique_call 2464} vslice_dummy_var_604 := SerialDbgPrintEx(7, Tmp_1259);
    goto L37;

  anon25_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_1262 := strConst__li2bpl311;
    call {:si_unique_call 2465} vslice_dummy_var_605 := SerialDbgPrintEx(7, Tmp_1262);
    FirstStatus_1 := -1073741811;
    SetFirstStatus_1 := 1;
    goto L112;

  anon20_Then:
    goto L41;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_614: int;

  anon0:
    call {:si_unique_call 2468} vslice_dummy_var_614 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_9: int, actual_DeferredContext_7: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteWait"} SerialCompleteWait(actual_Dpc_9: int, actual_DeferredContext_7: int, actual_SystemContext1_6: int, actual_SystemContext2_6: int)
{
  var {:pointer} Tmp_1276: int;
  var {:pointer} Tmp_1277: int;
  var {:pointer} Tmp_1279: int;
  var {:scalar} OldIrql_13: int;
  var {:pointer} Extension_25: int;
  var {:pointer} Tmp_1280: int;
  var {:pointer} Tmp_1281: int;
  var {:pointer} Dpc_9: int;
  var {:pointer} DeferredContext_7: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_616: int;
  var vslice_dummy_var_617: int;
  var vslice_dummy_var_618: int;
  var vslice_dummy_var_619: int;

  anon0:
    call {:si_unique_call 2469} vslice_dummy_var_615 := __HAVOC_malloc(4);
    Dpc_9 := actual_Dpc_9;
    DeferredContext_7 := actual_DeferredContext_7;
    call {:si_unique_call 2470} Tmp_1276 := __HAVOC_malloc(92);
    call {:si_unique_call 2471} Tmp_1277 := __HAVOC_malloc(112);
    call {:si_unique_call 2472} Tmp_1279 := __HAVOC_malloc(84);
    call {:si_unique_call 2473} Tmp_1280 := __HAVOC_malloc(100);
    Extension_25 := DeferredContext_7;
    Tmp_1280 := strConst__li2bpl320;
    call {:si_unique_call 2474} vslice_dummy_var_616 := SerialDbgPrintEx(2, Tmp_1280);
    Tmp_1276 := strConst__li2bpl317;
    call {:si_unique_call 2475} vslice_dummy_var_617 := SerialDbgPrintEx(6, Tmp_1276);
    call {:si_unique_call 2476} Tmp_1281 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1281 != 0;
    assume Tmp_1281 > 0;
    Mem_T.INT4[Tmp_1281] := OldIrql_13;
    call {:si_unique_call 2477} IoAcquireCancelSpinLock(Tmp_1281);
    assume {:nonnull} Tmp_1281 != 0;
    assume Tmp_1281 > 0;
    OldIrql_13 := Mem_T.INT4[Tmp_1281];
    Tmp_1277 := strConst__li2bpl318;
    call {:si_unique_call 2478} vslice_dummy_var_618 := SerialDbgPrintEx(7, Tmp_1277);
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2479} SerialTryToCompleteCurrent#1(Extension_25, 0, OldIrql_13, 0, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_25), 0, 0, 0, 0, 0, 1);
    call {:si_unique_call 2480} SerialDpcEpilogue(Extension_25, Dpc_9);
    Tmp_1279 := strConst__li2bpl319;
    call {:si_unique_call 2481} vslice_dummy_var_619 := SerialDbgPrintEx(2, Tmp_1279);
    return;
}



procedure {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_24: int, actual_Irp_20: int) returns (Tmp_1282: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1282 == -1073741536 || Tmp_1282 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_24: int, actual_Irp_20: int) returns (Tmp_1282: int)
{
  var {:pointer} Tmp_1283: int;
  var {:pointer} irpSp_2: int;
  var {:scalar} status_39: int;
  var {:pointer} extension_4: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_620: int;

  anon0:
    DeviceObject_24 := actual_DeviceObject_24;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 2482} Tmp_1283 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc extension_4;
    status_39 := 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 2483} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto L17;

  L17:
    status_39 := -1073741536;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_20))] := -1073741536;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    Tmp_1283 := strConst__li2bpl1;
    call {:si_unique_call 2484} vslice_dummy_var_620 := SerialDbgPrintEx(9, Tmp_1283);
    call {:si_unique_call 2485} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2486} SerialIRPEpilogue(extension_4);
    goto L8;

  L8:
    Tmp_1282 := status_39;
    return;

  anon10_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L17;

  anon11_Then:
    goto L8;

  anon9_Then:
    goto L8;

  anon12_Then:
    goto L8;
}



procedure {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_16: int, actual_PIrp_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_16: int, actual_PIrp_6: int)
{
  var {:pointer} pDevExt_17: int;
  var {:pointer} Tmp_1287: int;
  var {:pointer} PDevObj_16: int;
  var {:pointer} PIrp_6: int;
  var vslice_dummy_var_621: int;
  var vslice_dummy_var_622: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_624: int;

  anon0:
    call {:si_unique_call 2487} vslice_dummy_var_621 := __HAVOC_malloc(4);
    PDevObj_16 := actual_PDevObj_16;
    PIrp_6 := actual_PIrp_6;
    call {:si_unique_call 2488} Tmp_1287 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_16 != 0;
    assume PDevObj_16 > 0;
    havoc pDevExt_17;
    call {:si_unique_call 2489} vslice_dummy_var_622 := sdv_IoGetCurrentIrpStackLocation(PIrp_6);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_6))] := -1073741536;
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 2490} vslice_dummy_var_623 := sdv_RemoveEntryList(0);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 2491} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(PIrp_6)]);
    Tmp_1287 := strConst__li2bpl1;
    call {:si_unique_call 2492} vslice_dummy_var_624 := SerialDbgPrintEx(9, Tmp_1287);
    call {:si_unique_call 2493} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2494} SerialIRPEpilogue(pDevExt_17);
    return;
}



procedure {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUnlockPages"} SerialUnlockPages(actual_PDpc: int, actual_PDeferredContext: int, actual_PSysContext1: int, actual_PSysContext2: int)
{
  var {:pointer} pDevExt_18: int;
  var {:pointer} PDeferredContext: int;
  var vslice_dummy_var_625: int;
  var vslice_dummy_var_626: int;

  anon0:
    call {:si_unique_call 2495} vslice_dummy_var_625 := __HAVOC_malloc(4);
    PDeferredContext := actual_PDeferredContext;
    pDevExt_18 := PDeferredContext;
    assume {:nonnull} pDevExt_18 != 0;
    assume pDevExt_18 > 0;
    call {:si_unique_call 2496} vslice_dummy_var_626 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_18), 0, 0);
    return;
}



procedure {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_26: int, actual_Irp_21: int, actual_QueueToExamine: int, actual_CurrentOpIrp_2: int, actual_Starter: int) returns (Tmp_1290: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_26: int, actual_Irp_21: int, actual_QueueToExamine: int, actual_CurrentOpIrp_2: int, actual_Starter: int) returns (Tmp_1290: int)
{
  var {:pointer} Tmp_1291: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} sdv_918: int;
  var {:pointer} Tmp_1292: int;
  var {:pointer} sdv_920: int;
  var {:pointer} sdv_922: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} sdv_923: int;
  var {:scalar} sdv_925: int;
  var {:pointer} sdv_927: int;
  var {:pointer} Extension_26: int;
  var {:pointer} Irp_21: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;

  anon0:
    Extension_26 := actual_Extension_26;
    Irp_21 := actual_Irp_21;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    Starter := actual_Starter;
    call {:si_unique_call 2497} Tmp_1291 := __HAVOC_malloc(72);
    call {:si_unique_call 2498} Tmp_1292 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1292 != 0;
    assume Tmp_1292 > 0;
    Mem_T.INT4[Tmp_1292] := oldIrql_9;
    call {:si_unique_call 2499} IoAcquireCancelSpinLock(Tmp_1292);
    assume {:nonnull} Tmp_1292 != 0;
    assume Tmp_1292 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_1292];
    call {:si_unique_call 2500} sdv_918 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_918 != 0;
    assume sdv_918 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 2501} sdv_923 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    assume {:nonnull} sdv_923 != 0;
    assume sdv_923 > 0;
    goto L18;

  L18:
    call {:si_unique_call 2502} sdv_925 := sdv_IsListEmpty(0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_925 != 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    call {:si_unique_call 2503} IoReleaseCancelSpinLock(oldIrql_9);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant124;
    call {:si_unique_call 2504} Tmp_1290 := SerialStartFlush(Extension_26);
    goto L1;

  L1:
    return;

  anon36_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant195;
    call {:si_unique_call 2505} Tmp_1290 := SerialStartMask(Extension_26);
    goto L1;

  anon35_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant424;
    call {:si_unique_call 2506} Tmp_1290 := SerialStartPurge(Extension_26);
    goto L1;

  anon34_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant136;
    call {:si_unique_call 2507} Tmp_1290 := SerialStartRead(Extension_26);
    goto L1;

  anon29_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant212;
    call {:si_unique_call 2508} Tmp_1290 := SerialStartWrite#1(Extension_26);
    goto L1;

  anon28_Then:
    goto L22;

  L22:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 2509} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    call {:si_unique_call 2510} IoReleaseCancelSpinLock(oldIrql_9);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 2511} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    goto L42;

  L42:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_21))] := -1073741536;
    Tmp_1291 := strConst__li2bpl1;
    call {:si_unique_call 2512} vslice_dummy_var_629 := SerialDbgPrintEx(9, Tmp_1291);
    call {:si_unique_call 2513} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2514} SerialIRPEpilogue(Extension_26);
    Tmp_1290 := -1073741536;
    goto L1;

  anon30_Then:
    goto L42;

  anon27_Then:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_21))] := 259;
    call {:si_unique_call 2515} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    call {:si_unique_call 2516} vslice_dummy_var_627 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(Irp_21))));
    call {:si_unique_call 2517} vslice_dummy_var_628 := sdv_IoSetCancelRoutine(Irp_21, li2bplFunctionConstant166);
    call {:si_unique_call 2518} IoReleaseCancelSpinLock(oldIrql_9);
    Tmp_1290 := 259;
    goto L1;

  anon26_Then:
    assume {:partition} sdv_925 == 0;
    goto L22;

  anon25_Then:
    call {:si_unique_call 2519} sdv_922 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_922 != 0;
    assume sdv_922 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    call {:si_unique_call 2520} sdv_920 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_920 != 0;
    assume sdv_920 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L78;

  L78:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto L18;

  anon32_Then:
    call {:si_unique_call 2521} sdv_927 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_927 != 0;
    assume sdv_927 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L78;

  anon33_Then:
    goto L18;

  anon31_Then:
    goto L18;
}



procedure {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_9: int, actual_PFlags: int, actual_Value_1: int, actual_Set: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_9: int, actual_PFlags: int, actual_Value_1: int, actual_Set: int)
{
  var {:pointer} Tmp_1293: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} PFlags: int;
  var {:scalar} Value_1: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_630: int;

  anon0:
    call {:si_unique_call 2522} vslice_dummy_var_630 := __HAVOC_malloc(4);
    PFlags := actual_PFlags;
    Value_1 := actual_Value_1;
    Set := actual_Set;
    call {:si_unique_call 2523} Tmp_1293 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1293 != 0;
    assume Tmp_1293 > 0;
    Mem_T.INT4[Tmp_1293] := oldIrql_10;
    call {:si_unique_call 2524} sdv_KeAcquireSpinLock(0, Tmp_1293);
    assume {:nonnull} Tmp_1293 != 0;
    assume Tmp_1293 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_1293];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BOR(Mem_T.INT4[PFlags], Value_1);
    goto L10;

  L10:
    call {:si_unique_call 2525} sdv_KeReleaseSpinLock(0, oldIrql_10);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BAND(Mem_T.INT4[PFlags], BNOT(Value_1));
    goto L10;
}



procedure {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_10: int, actual_PDevObj_17: int, actual_PIrp_7: int) returns (Tmp_1295: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_1295 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_10: int, actual_PDevObj_17: int, actual_PIrp_7: int) returns (Tmp_1295: int)
{
  var {:scalar} status_40: int;
  var {:pointer} PDevExt_10: int;
  var {:pointer} PIrp_7: int;

  anon0:
    PDevExt_10 := actual_PDevExt_10;
    PIrp_7 := actual_PIrp_7;
    call {:si_unique_call 2526} status_40 := PoCallDriver(0, PIrp_7);
    call {:si_unique_call 2527} SerialIRPEpilogue(PDevExt_10);
    Tmp_1295 := status_40;
    return;
}



procedure {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_11: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_11: int)
{
  var {:pointer} Tmp_1297: int;
  var {:scalar} pendingCnt: int;
  var {:pointer} PDevExt_11: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;
  var vslice_dummy_var_1005: int;

  anon0:
    call {:si_unique_call 2528} vslice_dummy_var_631 := __HAVOC_malloc(4);
    PDevExt_11 := actual_PDevExt_11;
    call {:si_unique_call 2529} Tmp_1297 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_1297 != 0;
    assume Tmp_1297 > 0;
    havoc vslice_dummy_var_1005;
    Mem_T.INT4[Tmp_1297] := vslice_dummy_var_1005;
    call {:si_unique_call 2530} pendingCnt := sdv_InterlockedDecrement(Tmp_1297);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_1297 != 0;
    assume Tmp_1297 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt == 0;
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    call {:si_unique_call 2531} vslice_dummy_var_632 := KeSetEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(PDevExt_11), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt != 0;
    goto L1;
}



procedure {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_12: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_12: int)
{
  var {:scalar} Tmp_1300: int;
  var {:scalar} Tmp_1302: int;
  var {:scalar} Tmp_1303: int;
  var {:pointer} PDevExt_12: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_1006: int;
  var vslice_dummy_var_1007: int;

  anon0:
    call {:si_unique_call 2532} Tmp_1300 := __HAVOC_malloc(20);
    call {:si_unique_call 2533} vslice_dummy_var_633 := __HAVOC_malloc(4);
    call {:si_unique_call 2534} Tmp_1303 := __HAVOC_malloc(20);
    PDevExt_12 := actual_PDevExt_12;
    call {:si_unique_call 2535} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    call {:si_unique_call 2536} SerialSetDeviceFlags(PDevExt_12, Flags__SERIAL_DEVICE_EXTENSION(PDevExt_12), 4, 1);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    havoc Tmp_1302;
    assume {:nonnull} Tmp_1303 != 0;
    assume Tmp_1303 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1303)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_3)];
    assume {:nonnull} Tmp_1303 != 0;
    assume Tmp_1303 > 0;
    assume {:nonnull} Tmp_1303 != 0;
    assume Tmp_1303 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1303))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_3))];
    assume {:nonnull} Tmp_1303 != 0;
    assume Tmp_1303 > 0;
    assume {:nonnull} Tmp_1303 != 0;
    assume Tmp_1303 > 0;
    assume {:nonnull} Tmp_1300 != 0;
    assume Tmp_1300 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1300)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_3)];
    assume {:nonnull} Tmp_1300 != 0;
    assume Tmp_1300 > 0;
    assume {:nonnull} Tmp_1300 != 0;
    assume Tmp_1300 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1300))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_3))];
    assume {:nonnull} Tmp_1300 != 0;
    assume Tmp_1300 > 0;
    assume {:nonnull} Tmp_1300 != 0;
    assume Tmp_1300 > 0;
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    havoc vslice_dummy_var_1006;
    havoc vslice_dummy_var_1007;
    call {:si_unique_call 2537} SerialLogError(vslice_dummy_var_1006, 0, Tmp_1300, Tmp_1303, 0, 0, 0, 88, 0, -1073348563, Tmp_1302, vslice_dummy_var_1007, 0, 0);
    call {:si_unique_call 2538} IoInvalidateDeviceState(0);
    return;
}



procedure {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_18: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_18: int)
{
  var {:pointer} currentLastIrp: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} pDevExt_19: int;
  var {:scalar} sdv_936: int;
  var {:pointer} Tmp_1310: int;
  var {:pointer} sdv_937: int;
  var {:scalar} cancelRoutine_1: int;
  var {:pointer} PDevObj_18: int;
  var vslice_dummy_var_634: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_1008: int;

  anon0:
    call {:si_unique_call 2539} vslice_dummy_var_634 := __HAVOC_malloc(4);
    PDevObj_18 := actual_PDevObj_18;
    assume {:nonnull} PDevObj_18 != 0;
    assume PDevObj_18 > 0;
    havoc pDevExt_19;
    call {:si_unique_call 2540} Tmp_1310 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1310 != 0;
    assume Tmp_1310 > 0;
    Mem_T.INT4[Tmp_1310] := cancelIrql;
    call {:si_unique_call 2541} IoAcquireCancelSpinLock(Tmp_1310);
    assume {:nonnull} Tmp_1310 != 0;
    assume Tmp_1310 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1310];
    goto L10;

  L10:
    call {:si_unique_call 2542} currentLastIrp, cancelIrql, sdv_936, Tmp_1310, sdv_937, cancelRoutine_1, vslice_dummy_var_635 := SerialKillAllStalled_loop_L10(currentLastIrp, cancelIrql, pDevExt_19, sdv_936, Tmp_1310, sdv_937, cancelRoutine_1, PDevObj_18, vslice_dummy_var_635);
    goto L10_last;

  L10_last:
    call {:si_unique_call 2554} sdv_936 := sdv_IsListEmpty(0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_936 == 0;
    assume {:nonnull} pDevExt_19 != 0;
    assume pDevExt_19 > 0;
    havoc vslice_dummy_var_1008;
    call {:si_unique_call 2543} sdv_937 := sdv_containing_record(vslice_dummy_var_1008, 88);
    currentLastIrp := sdv_937;
    call {:si_unique_call 2544} vslice_dummy_var_635 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)];
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(currentLastIrp)] := cancelIrql;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp)] := 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant214;
    call {:si_unique_call 2545} SerialCancelCurrentWrite(PDevObj_18, currentLastIrp);
    goto L32;

  L32:
    call {:si_unique_call 2546} Tmp_1310 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1310 != 0;
    assume Tmp_1310 > 0;
    Mem_T.INT4[Tmp_1310] := cancelIrql;
    call {:si_unique_call 2547} IoAcquireCancelSpinLock(Tmp_1310);
    assume {:nonnull} Tmp_1310 != 0;
    assume Tmp_1310 > 0;
    cancelIrql := Mem_T.INT4[Tmp_1310];
    goto L32_dummy;

  L32_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant218;
    call {:si_unique_call 2548} SerialCancelCurrentXoff(PDevObj_18, currentLastIrp);
    goto L32;

  anon16_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant351;
    call {:si_unique_call 2549} SerialCancelImmediate(PDevObj_18, currentLastIrp);
    goto L32;

  anon15_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant166;
    call {:si_unique_call 2550} SerialCancelQueued(PDevObj_18, currentLastIrp);
    goto L32;

  anon14_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 2551} SerialCancelWait(PDevObj_18, currentLastIrp);
    goto L32;

  anon18_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant168;
    call {:si_unique_call 2552} SerialFilterCancelQueued(PDevObj_18, currentLastIrp);
    goto L32;

  anon13_Then:
    assume {:partition} sdv_936 != 0;
    call {:si_unique_call 2553} IoReleaseCancelSpinLock(cancelIrql);
    return;
}



procedure {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer_3: int, actual_PDevExt_13: int) returns (Tmp_1311: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1311 == 1 || Tmp_1311 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer_3: int, actual_PDevExt_13: int) returns (Tmp_1311: int)
{
  var {:scalar} cancelled: int;
  var {:pointer} Timer_3: int;
  var {:pointer} PDevExt_13: int;
  var vslice_dummy_var_1009: int;

  anon0:
    Timer_3 := actual_Timer_3;
    PDevExt_13 := actual_PDevExt_13;
    call {:si_unique_call 2555} cancelled := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} cancelled != 0;
    assume {:nonnull} Timer_3 != 0;
    assume Timer_3 > 0;
    havoc vslice_dummy_var_1009;
    call {:si_unique_call 2556} SerialDpcEpilogue(PDevExt_13, vslice_dummy_var_1009);
    goto L9;

  L9:
    Tmp_1311 := cancelled;
    return;

  anon3_Then:
    assume {:partition} cancelled == 0;
    goto L9;
}



procedure {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_14: int) returns (Tmp_1313: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1313 == 0 || Tmp_1313 == -1073741536 || Tmp_1313 == 259 || Tmp_1313 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_14: int) returns (Tmp_1313: int)
{
  var {:pointer} Tmp_1314: int;
  var {:pointer} PIrp_8: int;
  var {:pointer} PDevExt_14: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_1010: int;

  anon0:
    PIrp_8 := actual_PIrp_8;
    PDevExt_14 := actual_PDevExt_14;
    call {:si_unique_call 2557} Tmp_1314 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_1314 != 0;
    assume Tmp_1314 > 0;
    havoc vslice_dummy_var_1010;
    Mem_T.INT4[Tmp_1314] := vslice_dummy_var_1010;
    call {:si_unique_call 2558} vslice_dummy_var_636 := sdv_InterlockedIncrement(Tmp_1314);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_1314 != 0;
    assume Tmp_1314 > 0;
    call {:si_unique_call 2559} Tmp_1313 := SerialFilterIrps(PIrp_8, PDevExt_14);
    return;
}



procedure {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_4: int, actual_QueueToProcess_3: int, actual_NextIrp: int, actual_CompleteCurrent_3: int, actual_extension_5: int, actual_OldIrql_14: int);
  modifies alloc, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_OldIrql_14;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_4: int, actual_QueueToProcess_3: int, actual_NextIrp: int, actual_CompleteCurrent_3: int, actual_extension_5: int, actual_OldIrql_14: int)
{
  var {:scalar} sdv_942: int;
  var {:pointer} Tmp_1317: int;
  var {:pointer} sdv_946: int;
  var {:pointer} oldIrp_1: int;
  var {:pointer} headOfList: int;
  var {:pointer} CurrentOpIrp_4: int;
  var {:pointer} QueueToProcess_3: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent_3: int;
  var {:pointer} extension_5: int;
  var {:scalar} OldIrql_14: int;
  var vslice_dummy_var_637: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_1011: int;

  anon0:
    call {:si_unique_call 2560} vslice_dummy_var_637 := __HAVOC_malloc(4);
    CurrentOpIrp_4 := actual_CurrentOpIrp_4;
    QueueToProcess_3 := actual_QueueToProcess_3;
    NextIrp := actual_NextIrp;
    CompleteCurrent_3 := actual_CompleteCurrent_3;
    extension_5 := actual_extension_5;
    OldIrql_14 := actual_OldIrql_14;
    call {:si_unique_call 2561} Tmp_1317 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc oldIrp_1;
    call {:si_unique_call 2562} sdv_942 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_942 == 0;
    call {:si_unique_call 2563} headOfList := RemoveHeadList(QueueToProcess_3);
    call {:si_unique_call 2564} sdv_946 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    havoc vslice_dummy_var_1011;
    call {:si_unique_call 2565} vslice_dummy_var_639 := sdv_IoSetCancelRoutine(vslice_dummy_var_1011, 0);
    goto L11;

  L11:
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    call {:si_unique_call 2566} IoReleaseCancelSpinLock(OldIrql_14);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} CompleteCurrent_3 != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} oldIrp_1 != 0;
    Tmp_1317 := strConst__li2bpl1;
    call {:si_unique_call 2567} vslice_dummy_var_638 := SerialDbgPrintEx(9, Tmp_1317);
    call {:si_unique_call 2568} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2569} SerialIRPEpilogue(extension_5);
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} oldIrp_1 == 0;
    goto L1;

  anon8_Then:
    assume {:partition} CompleteCurrent_3 == 0;
    goto L1;

  anon7_Then:
    assume {:partition} sdv_942 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    goto L11;
}



procedure {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_15: int, actual_PDevObj_19: int, actual_PIrp_9: int) returns (Tmp_1318: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_1318 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_15: int, actual_PDevObj_19: int, actual_PIrp_9: int) returns (Tmp_1318: int)
{
  var {:scalar} status_41: int;
  var {:pointer} PDevExt_15: int;
  var {:pointer} PDevObj_19: int;
  var {:pointer} PIrp_9: int;

  anon0:
    PDevExt_15 := actual_PDevExt_15;
    PDevObj_19 := actual_PDevObj_19;
    PIrp_9 := actual_PIrp_9;
    call {:si_unique_call 2570} status_41 := sdv_IoCallDriver(PDevObj_19, PIrp_9);
    call {:si_unique_call 2571} SerialIRPEpilogue(PDevExt_15);
    Tmp_1318 := status_41;
    return;
}



procedure {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_16: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_16: int)
{
  var {:pointer} Tmp_1321: int;
  var {:scalar} Tmp_1322: int;
  var {:pointer} Tmp_1323: int;
  var {:pointer} sdv_951: int;
  var {:scalar} oldIrql_11: int;
  var {:pointer} pIrpStack_6: int;
  var {:pointer} Tmp_1324: int;
  var {:pointer} pIrp_1: int;
  var {:pointer} pDevObj_2: int;
  var {:pointer} Tmp_1325: int;
  var {:pointer} pIrpLink: int;
  var {:pointer} pDrvObj_1: int;
  var {:pointer} Tmp_1326: int;
  var {:pointer} PDevExt_16: int;
  var vslice_dummy_var_640: int;
  var vslice_dummy_var_641: int;
  var vslice_dummy_var_642: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_644: int;
  var vslice_dummy_var_645: int;

  anon0:
    call {:si_unique_call 2572} vslice_dummy_var_640 := __HAVOC_malloc(4);
    PDevExt_16 := actual_PDevExt_16;
    call {:si_unique_call 2573} Tmp_1321 := __HAVOC_malloc(80);
    call {:si_unique_call 2574} Tmp_1324 := __HAVOC_malloc(96);
    call {:si_unique_call 2575} Tmp_1325 := __HAVOC_malloc(112);
    call {:si_unique_call 2576} Tmp_1326 := __HAVOC_malloc(124);
    Tmp_1324 := strConst__li2bpl321;
    call {:si_unique_call 2577} vslice_dummy_var_641 := SerialDbgPrintEx(2, Tmp_1324);
    call {:si_unique_call 2578} Tmp_1323 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1323 != 0;
    assume Tmp_1323 > 0;
    Mem_T.INT4[Tmp_1323] := oldIrql_11;
    call {:si_unique_call 2579} IoAcquireCancelSpinLock(Tmp_1323);
    assume {:nonnull} Tmp_1323 != 0;
    assume Tmp_1323 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_1323];
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    havoc pIrpLink;
    goto L16;

  L16:
    call {:si_unique_call 2580} Tmp_1322, Tmp_1323, sdv_951, oldIrql_11, pIrpStack_6, pIrp_1, pDevObj_2, Tmp_1325, pIrpLink, pDrvObj_1, Tmp_1326, vslice_dummy_var_642, vslice_dummy_var_643, vslice_dummy_var_644 := SerialUnstallIrps_loop_L16(Tmp_1322, Tmp_1323, sdv_951, oldIrql_11, pIrpStack_6, pIrp_1, pDevObj_2, Tmp_1325, pIrpLink, pDrvObj_1, Tmp_1326, PDevExt_16, vslice_dummy_var_642, vslice_dummy_var_643, vslice_dummy_var_644);
    goto L16_last;

  L16_last:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 2581} sdv_951 := sdv_containing_record(pIrpLink, 88);
    pIrp_1 := sdv_951;
    call {:si_unique_call 2582} vslice_dummy_var_642 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2583} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(pIrp_1);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc pDevObj_2;
    assume {:nonnull} pDevObj_2 != 0;
    assume pDevObj_2 > 0;
    havoc pDrvObj_1;
    call {:si_unique_call 2584} vslice_dummy_var_643 := sdv_IoSetCancelRoutine(pIrp_1, 0);
    call {:si_unique_call 2585} IoReleaseCancelSpinLock(oldIrql_11);
    Tmp_1326 := strConst__li2bpl322;
    call {:si_unique_call 2586} vslice_dummy_var_644 := SerialDbgPrintEx(12, Tmp_1326);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc Tmp_1322;
    assume {:nonnull} pDrvObj_1 != 0;
    assume pDrvObj_1 > 0;
    havoc Tmp_1325;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_1322 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_1322 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_1322 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_1322 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_1322 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_1322 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_1322 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_1322 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_1322 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_1322 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_1322 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_1322 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_1322 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_1322 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_1322 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_1322 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_1322 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_1322 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_1322 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_1322 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_1322 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_1322 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_1322 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_1322 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_1322 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_1322 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume Tmp_1322 != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume false;
    return;

  anon87_Then:
    assume Tmp_1322 == 0;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325] == 0;
    goto L45;

  L45:
    call {:si_unique_call 2587} Tmp_1323 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1323 != 0;
    assume Tmp_1323 > 0;
    Mem_T.INT4[Tmp_1323] := oldIrql_11;
    call {:si_unique_call 2588} IoAcquireCancelSpinLock(Tmp_1323);
    assume {:nonnull} Tmp_1323 != 0;
    assume Tmp_1323 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_1323];
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    havoc pIrpLink;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon86_Then:
    assume Tmp_1322 == 1;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume Tmp_1322 == 2;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume Tmp_1322 == 3;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume Tmp_1322 == 4;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume Tmp_1322 == 5;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume Tmp_1322 == 6;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume Tmp_1322 == 7;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume Tmp_1322 == 8;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume Tmp_1322 == 9;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume Tmp_1322 == 10;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume Tmp_1322 == 11;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume Tmp_1322 == 12;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume Tmp_1322 == 13;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume Tmp_1322 == 14;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume Tmp_1322 == 15;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume Tmp_1322 == 16;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume Tmp_1322 == 17;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume Tmp_1322 == 18;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume Tmp_1322 == 19;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume Tmp_1322 == 20;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume Tmp_1322 == 21;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume Tmp_1322 == 22;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume Tmp_1322 == 23;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume Tmp_1322 == 24;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume Tmp_1322 == 25;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume Tmp_1322 == 26;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume Tmp_1322 == 27;
    assume {:nonnull} Tmp_1325 != 0;
    assume Tmp_1325 > 0;
    assume Mem_T.INT4[Tmp_1325 + 27 * 4] == 0;
    goto L45;

  anon59_Then:
    call {:si_unique_call 2589} IoReleaseCancelSpinLock(oldIrql_11);
    Tmp_1321 := strConst__li2bpl323;
    call {:si_unique_call 2590} vslice_dummy_var_645 := SerialDbgPrintEx(2, Tmp_1321);
    return;
}



procedure {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_25: int, actual_QueueToClean: int, actual_CurrentOpIrp_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_25: int, actual_QueueToClean: int, actual_CurrentOpIrp_5: int)
{
  var {:pointer} currentLastIrp_1: int;
  var {:scalar} cancelIrql_1: int;
  var {:scalar} sdv_956: int;
  var {:pointer} Tmp_1327: int;
  var {:pointer} sdv_957: int;
  var {:pointer} Tmp_1328: int;
  var {:scalar} cancelRoutine_2: int;
  var {:pointer} Tmp_1329: int;
  var {:pointer} Tmp_1331: int;
  var {:pointer} Tmp_1332: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} QueueToClean: int;
  var {:pointer} CurrentOpIrp_5: int;
  var vslice_dummy_var_646: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_1012: int;
  var vslice_dummy_var_1013: int;
  var vslice_dummy_var_1014: int;
  var vslice_dummy_var_1015: int;
  var vslice_dummy_var_1016: int;
  var vslice_dummy_var_1017: int;
  var vslice_dummy_var_1018: int;

  anon0:
    call {:si_unique_call 2591} vslice_dummy_var_646 := __HAVOC_malloc(4);
    DeviceObject_25 := actual_DeviceObject_25;
    QueueToClean := actual_QueueToClean;
    CurrentOpIrp_5 := actual_CurrentOpIrp_5;
    call {:si_unique_call 2592} Tmp_1327 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1327 != 0;
    assume Tmp_1327 > 0;
    Mem_T.INT4[Tmp_1327] := cancelIrql_1;
    call {:si_unique_call 2593} IoAcquireCancelSpinLock(Tmp_1327);
    assume {:nonnull} Tmp_1327 != 0;
    assume Tmp_1327 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_1327];
    goto L8;

  L8:
    call {:si_unique_call 2594} currentLastIrp_1, cancelIrql_1, sdv_956, Tmp_1327, sdv_957, cancelRoutine_2, vslice_dummy_var_647 := SerialKillAllReadsOrWrites_loop_L8(currentLastIrp_1, cancelIrql_1, sdv_956, Tmp_1327, sdv_957, cancelRoutine_2, DeviceObject_25, QueueToClean, vslice_dummy_var_647);
    goto L8_last;

  L8_last:
    call {:si_unique_call 2613} sdv_956 := sdv_IsListEmpty(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_956 == 0;
    assume {:nonnull} QueueToClean != 0;
    assume QueueToClean > 0;
    havoc vslice_dummy_var_1012;
    call {:si_unique_call 2595} sdv_957 := sdv_containing_record(vslice_dummy_var_1012, 88);
    currentLastIrp_1 := sdv_957;
    call {:si_unique_call 2596} vslice_dummy_var_647 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    cancelRoutine_2 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)];
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(currentLastIrp_1)] := cancelIrql_1;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(currentLastIrp_1)] := 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant214;
    call {:si_unique_call 2597} SerialCancelCurrentWrite(DeviceObject_25, currentLastIrp_1);
    goto L42;

  L42:
    call {:si_unique_call 2598} Tmp_1327 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1327 != 0;
    assume Tmp_1327 > 0;
    Mem_T.INT4[Tmp_1327] := cancelIrql_1;
    call {:si_unique_call 2599} IoAcquireCancelSpinLock(Tmp_1327);
    assume {:nonnull} Tmp_1327 != 0;
    assume Tmp_1327 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_1327];
    goto L42_dummy;

  L42_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant218;
    call {:si_unique_call 2600} SerialCancelCurrentXoff(DeviceObject_25, currentLastIrp_1);
    goto L42;

  anon35_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant351;
    call {:si_unique_call 2601} SerialCancelImmediate(DeviceObject_25, currentLastIrp_1);
    goto L42;

  anon34_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant166;
    call {:si_unique_call 2602} SerialCancelQueued(DeviceObject_25, currentLastIrp_1);
    goto L42;

  anon33_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant197;
    call {:si_unique_call 2603} SerialCancelWait(DeviceObject_25, currentLastIrp_1);
    goto L42;

  anon39_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant168;
    call {:si_unique_call 2604} SerialFilterCancelQueued(DeviceObject_25, currentLastIrp_1);
    goto L42;

  anon27_Then:
    assume {:partition} sdv_956 != 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc Tmp_1329;
    assume {:nonnull} Tmp_1329 != 0;
    assume Tmp_1329 > 0;
    cancelRoutine_2 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1329)];
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc Tmp_1332;
    assume {:nonnull} Tmp_1332 != 0;
    assume Tmp_1332 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} cancelRoutine_2 != 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc Tmp_1328;
    assume {:nonnull} Tmp_1328 != 0;
    assume Tmp_1328 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1328)] := 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc Tmp_1331;
    assume {:nonnull} Tmp_1331 != 0;
    assume Tmp_1331 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(Tmp_1331)] := cancelIrql_1;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant214;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1013;
    call {:si_unique_call 2605} SerialCancelCurrentWrite(DeviceObject_25, vslice_dummy_var_1013);
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant218;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1014;
    call {:si_unique_call 2606} SerialCancelCurrentXoff(DeviceObject_25, vslice_dummy_var_1014);
    goto L1;

  anon31_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant351;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1015;
    call {:si_unique_call 2607} SerialCancelImmediate(DeviceObject_25, vslice_dummy_var_1015);
    goto L1;

  anon30_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant166;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1016;
    call {:si_unique_call 2608} SerialCancelQueued(DeviceObject_25, vslice_dummy_var_1016);
    goto L1;

  anon29_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant197;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1017;
    call {:si_unique_call 2609} SerialCancelWait(DeviceObject_25, vslice_dummy_var_1017);
    goto L1;

  anon38_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant168;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    havoc vslice_dummy_var_1018;
    call {:si_unique_call 2610} SerialFilterCancelQueued(DeviceObject_25, vslice_dummy_var_1018);
    goto L1;

  anon37_Then:
    assume {:partition} cancelRoutine_2 == 0;
    call {:si_unique_call 2611} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;

  anon28_Then:
    call {:si_unique_call 2612} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;
}



procedure {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_4: int, actual_structPtr888DueTime: int, actual_Dpc_10: int, actual_PDevExt_17: int) returns (Tmp_1333: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_1333 == 1 || Tmp_1333 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_4: int, actual_structPtr888DueTime: int, actual_Dpc_10: int, actual_PDevExt_17: int) returns (Tmp_1333: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} Tmp_1334: int;
  var {:scalar} set: int;
  var {:pointer} structPtr888DueTime: int;
  var {:pointer} PDevExt_17: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_1019: int;
  var vslice_dummy_var_1020: int;

  anon0:
    call {:si_unique_call 2614} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    PDevExt_17 := actual_PDevExt_17;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    Mem_T.INT4[LowPart__LUID(DueTime)] := Mem_T.INT4[LowPart__LUID(structPtr888DueTime)];
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(DueTime))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888DueTime))];
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    call {:si_unique_call 2615} Tmp_1334 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_1334 != 0;
    assume Tmp_1334 > 0;
    havoc vslice_dummy_var_1019;
    Mem_T.INT4[Tmp_1334] := vslice_dummy_var_1019;
    call {:si_unique_call 2616} vslice_dummy_var_648 := sdv_InterlockedIncrement(Tmp_1334);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_1334 != 0;
    assume Tmp_1334 > 0;
    call {:si_unique_call 2617} set := KeSetTimer(0, DueTime, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} set != 0;
    call {:si_unique_call 2618} Tmp_1334 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_1334 != 0;
    assume Tmp_1334 > 0;
    havoc vslice_dummy_var_1020;
    Mem_T.INT4[Tmp_1334] := vslice_dummy_var_1020;
    call {:si_unique_call 2619} vslice_dummy_var_649 := sdv_InterlockedDecrement(Tmp_1334);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_1334 != 0;
    assume Tmp_1334 > 0;
    goto L12;

  L12:
    Tmp_1333 := set;
    return;

  anon3_Then:
    assume {:partition} set == 0;
    goto L12;
}



procedure {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_18: int, actual_PDpc_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_18: int, actual_PDpc_1: int)
{
  var {:pointer} Tmp_1335: int;
  var {:scalar} pendingCnt_1: int;
  var {:pointer} PDevExt_18: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_1021: int;

  anon0:
    call {:si_unique_call 2620} vslice_dummy_var_650 := __HAVOC_malloc(4);
    PDevExt_18 := actual_PDevExt_18;
    call {:si_unique_call 2621} Tmp_1335 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_1335 != 0;
    assume Tmp_1335 > 0;
    havoc vslice_dummy_var_1021;
    Mem_T.INT4[Tmp_1335] := vslice_dummy_var_1021;
    call {:si_unique_call 2622} pendingCnt_1 := sdv_InterlockedDecrement(Tmp_1335);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_1335 != 0;
    assume Tmp_1335 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt_1 == 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 2623} vslice_dummy_var_651 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_18), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt_1 != 0;
    goto L1;
}



procedure {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_6: int, actual_QueueToProcess_4: int, actual_NextIrp_1: int, actual_CompleteCurrent_4: int, actual_extension_6: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_6: int, actual_QueueToProcess_4: int, actual_NextIrp_1: int, actual_CompleteCurrent_4: int, actual_extension_6: int)
{
  var {:pointer} Tmp_1337: int;
  var {:scalar} oldIrql_12: int;
  var {:pointer} CurrentOpIrp_6: int;
  var {:pointer} QueueToProcess_4: int;
  var {:pointer} NextIrp_1: int;
  var {:scalar} CompleteCurrent_4: int;
  var {:pointer} extension_6: int;
  var vslice_dummy_var_652: int;

  anon0:
    call {:si_unique_call 2624} vslice_dummy_var_652 := __HAVOC_malloc(4);
    CurrentOpIrp_6 := actual_CurrentOpIrp_6;
    QueueToProcess_4 := actual_QueueToProcess_4;
    NextIrp_1 := actual_NextIrp_1;
    CompleteCurrent_4 := actual_CompleteCurrent_4;
    extension_6 := actual_extension_6;
    call {:si_unique_call 2625} Tmp_1337 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    Mem_T.INT4[Tmp_1337] := oldIrql_12;
    call {:si_unique_call 2626} IoAcquireCancelSpinLock(Tmp_1337);
    assume {:nonnull} Tmp_1337 != 0;
    assume Tmp_1337 > 0;
    oldIrql_12 := Mem_T.INT4[Tmp_1337];
    call {:si_unique_call 2627} SerialGetNextIrpLocked(CurrentOpIrp_6, QueueToProcess_4, NextIrp_1, CompleteCurrent_4, extension_6, oldIrql_12);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_653: int;

  anon0:
    call {:si_unique_call 2628} vslice_dummy_var_653 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialLogError"} SerialLogError(actual_DriverObject_9: int, actual_DeviceObject_26: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialLogError"} SerialLogError(actual_DriverObject_9: int, actual_DeviceObject_26: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} Tmp_1342: int;
  var {:pointer} Tmp_1343: int;
  var {:pointer} Tmp_1344: int;
  var {:pointer} Tmp_1345: int;
  var {:pointer} Tmp_1346: int;
  var {:scalar} Tmp_1348: int;
  var {:scalar} sdv_964: int;
  var {:pointer} errorLogEntry: int;
  var {:scalar} Tmp_1349: int;
  var {:scalar} sdv_965: int;
  var {:scalar} dumpToAllocate: int;
  var {:pointer} sdv_966: int;
  var {:scalar} Tmp_1352: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:pointer} DriverObject_9: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_654: int;

  anon0:
    call {:si_unique_call 2629} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 2630} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 2631} Tmp_1348 := __HAVOC_malloc(20);
    call {:si_unique_call 2632} Tmp_1349 := __HAVOC_malloc(20);
    call {:si_unique_call 2633} vslice_dummy_var_654 := __HAVOC_malloc(4);
    DriverObject_9 := actual_DriverObject_9;
    DeviceObject_26 := actual_DeviceObject_26;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    Mem_T.INT4[LowPart__LUID(P1)] := Mem_T.INT4[LowPart__LUID(structPtr888P1)];
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(P1))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888P1))];
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    Mem_T.INT4[LowPart__LUID(P2)] := Mem_T.INT4[LowPart__LUID(structPtr888P2)];
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(P2))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(structPtr888P2))];
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    call {:si_unique_call 2634} Tmp_1342 := __HAVOC_malloc(4);
    call {:si_unique_call 2635} Tmp_1343 := __HAVOC_malloc(4);
    call {:si_unique_call 2636} Tmp_1344 := __HAVOC_malloc(4);
    call {:si_unique_call 2637} Tmp_1345 := __HAVOC_malloc(4);
    call {:si_unique_call 2638} Tmp_1346 := __HAVOC_malloc(4);
    dumpToAllocate := 0;
    call {:si_unique_call 2639} sdv_do_paged_code_check();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Insert1 != 0;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Insert2 != 0;
    goto L16;

  L16:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} DeviceObject_26 != 0;
    goto L19;

  L19:
    assume {:nonnull} Tmp_1348 != 0;
    assume Tmp_1348 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1348)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_3)];
    assume {:nonnull} Tmp_1348 != 0;
    assume Tmp_1348 > 0;
    assume {:nonnull} Tmp_1348 != 0;
    assume Tmp_1348 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1348))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_3))];
    assume {:nonnull} Tmp_1348 != 0;
    assume Tmp_1348 > 0;
    assume {:nonnull} Tmp_1348 != 0;
    assume Tmp_1348 > 0;
    call {:si_unique_call 2640} sdv_964 := SerialMemCompare(P1, 1, Tmp_1348, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_964 != 0;
    dumpToAllocate := 8;
    goto L24;

  L24:
    assume {:nonnull} Tmp_1349 != 0;
    assume Tmp_1349 > 0;
    Mem_T.INT4[LowPart__LUID(Tmp_1349)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_3)];
    assume {:nonnull} Tmp_1349 != 0;
    assume Tmp_1349 > 0;
    assume {:nonnull} Tmp_1349 != 0;
    assume Tmp_1349 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp_1349))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_3))];
    assume {:nonnull} Tmp_1349 != 0;
    assume Tmp_1349 > 0;
    assume {:nonnull} Tmp_1349 != 0;
    assume Tmp_1349 > 0;
    call {:si_unique_call 2641} sdv_965 := SerialMemCompare(P2, 1, Tmp_1349, 1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_965 != 0;
    dumpToAllocate := dumpToAllocate + 8;
    goto L30;

  L30:
    Tmp_1352 := 48 + dumpToAllocate + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 2642} sdv_966 := IoAllocateErrorLogEntry(0, Tmp_1352);
    errorLogEntry := sdv_966;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} dumpToAllocate != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_1345;
    call {:si_unique_call 2643} sdv_RtlCopyMemory(0, 0, 8);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} dumpToAllocate > 8;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_1346;
    call {:si_unique_call 2644} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_1343;
    ptrToFirstInsert := Tmp_1343;
    goto L57;

  L57:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} LengthOfInsert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 2645} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} LengthOfInsert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 2646} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L59;

  L59:
    call {:si_unique_call 2647} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L59;

  anon30_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L59;

  anon26_Then:
    assume {:partition} 8 >= dumpToAllocate;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_1344;
    ptrToFirstInsert := Tmp_1344;
    goto L57;

  anon29_Then:
    assume {:partition} dumpToAllocate == 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_1342;
    ptrToFirstInsert := Tmp_1342;
    goto L57;

  anon28_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon25_Then:
    assume {:partition} sdv_965 == 0;
    goto L30;

  anon24_Then:
    assume {:partition} sdv_964 == 0;
    goto L24;

  anon23_Then:
    assume {:partition} DeviceObject_26 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} Insert2 == 0;
    LengthOfInsert2 := 0;
    goto L16;

  anon21_Then:
    assume {:partition} Insert1 == 0;
    LengthOfInsert1 := 0;
    goto L14;
}



procedure {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_27: int, actual_Irp_22: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_27: int, actual_Irp_22: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} Tmp_1354: int;
  var {:pointer} extension_7: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_655: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;

  anon0:
    call {:si_unique_call 2648} vslice_dummy_var_655 := __HAVOC_malloc(4);
    DeviceObject_27 := actual_DeviceObject_27;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 2649} Tmp_1354 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc extension_7;
    call {:si_unique_call 2650} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_22))] := -1073741536;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 2651} vslice_dummy_var_656 := sdv_RemoveEntryList(0);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 2652} IoReleaseCancelSpinLock(Mem_T.CancelIrql__IRP[CancelIrql__IRP(Irp_22)]);
    Tmp_1354 := strConst__li2bpl1;
    call {:si_unique_call 2653} vslice_dummy_var_657 := SerialDbgPrintEx(9, Tmp_1354);
    call {:si_unique_call 2654} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2655} SerialIRPEpilogue(extension_7);
    return;

  anon11_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L32;

  L32:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto L18;

  anon13_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 2656} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto L18;

  anon15_Then:
    goto L18;

  anon14_Then:
    goto L32;

  anon12_Then:
    goto L18;
}



procedure {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_7: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_19: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_7: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_19: int)
{
  var {:pointer} Tmp_1357: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} sdv_970: int;
  var {:pointer} sdv_971: int;
  var {:pointer} s_p_e_c_i_a_l_24: int;
  var {:scalar} s_p_e_c_i_a_l_25: int;
  var {:scalar} sdv_973: int;
  var {:pointer} sdv_974: int;
  var {:scalar} sdv_975: int;
  var {:pointer} s_p_e_c_i_a_l_26: int;
  var {:scalar} s_p_e_c_i_a_l_27: int;
  var {:scalar} s_p_e_c_i_a_l_28: int;
  var {:pointer} CurrentOpIrp_7: int;
  var {:pointer} IntervalTimer_1: int;
  var {:pointer} TotalTimer_1: int;
  var {:pointer} PDevExt_19: int;
  var vslice_dummy_var_658: int;
  var vslice_dummy_var_659: int;
  var vslice_dummy_var_1022: int;
  var vslice_dummy_var_1023: int;
  var vslice_dummy_var_1024: int;
  var vslice_dummy_var_1025: int;

  anon0:
    call {:si_unique_call 2657} vslice_dummy_var_658 := __HAVOC_malloc(4);
    CurrentOpIrp_7 := actual_CurrentOpIrp_7;
    IntervalTimer_1 := actual_IntervalTimer_1;
    TotalTimer_1 := actual_TotalTimer_1;
    PDevExt_19 := actual_PDevExt_19;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc Tmp_1357;
    assume {:nonnull} Tmp_1357 != 0;
    assume Tmp_1357 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1357)] != 0;
    s_p_e_c_i_a_l_25 := 2;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc vslice_dummy_var_1022;
    call {:si_unique_call 2658} sdv_970 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1022);
    assume {:nonnull} sdv_970 != 0;
    assume sdv_970 > 0;
    s_p_e_c_i_a_l_23 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_970)));
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_23] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_23], BNOT(s_p_e_c_i_a_l_25));
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc vslice_dummy_var_1023;
    call {:si_unique_call 2659} vslice_dummy_var_659 := sdv_IoSetCancelRoutine(vslice_dummy_var_1023, 0);
    goto L4;

  L4:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IntervalTimer_1 != 0;
    call {:si_unique_call 2660} sdv_973 := SerialCancelTimer(IntervalTimer_1, PDevExt_19);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_973 != 0;
    s_p_e_c_i_a_l_27 := 8;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc vslice_dummy_var_1024;
    call {:si_unique_call 2661} sdv_974 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1024);
    assume {:nonnull} sdv_974 != 0;
    assume sdv_974 > 0;
    s_p_e_c_i_a_l_26 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_974)));
    assume {:nonnull} s_p_e_c_i_a_l_26 != 0;
    assume s_p_e_c_i_a_l_26 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_26] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_26], BNOT(s_p_e_c_i_a_l_27));
    goto L16;

  L16:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} TotalTimer_1 != 0;
    call {:si_unique_call 2662} sdv_975 := SerialCancelTimer(TotalTimer_1, PDevExt_19);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_975 != 0;
    s_p_e_c_i_a_l_28 := 4;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    havoc vslice_dummy_var_1025;
    call {:si_unique_call 2663} sdv_971 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1025);
    assume {:nonnull} sdv_971 != 0;
    assume sdv_971 > 0;
    s_p_e_c_i_a_l_24 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_971)));
    assume {:nonnull} s_p_e_c_i_a_l_24 != 0;
    assume s_p_e_c_i_a_l_24 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_24] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_24], BNOT(s_p_e_c_i_a_l_28));
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} sdv_975 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} TotalTimer_1 == 0;
    goto L1;

  anon13_Then:
    assume {:partition} sdv_973 == 0;
    goto L16;

  anon11_Then:
    assume {:partition} IntervalTimer_1 == 0;
    goto L16;

  anon15_Then:
    assume {:partition} Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(Tmp_1357)] == 0;
    goto L4;
}



procedure {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_20: int) returns (Tmp_1359: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1359 == 0 || Tmp_1359 == -1073741536 || Tmp_1359 == 259 || Tmp_1359 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_20: int) returns (Tmp_1359: int)
{
  var {:scalar} oldIrqlFlags: int;
  var {:scalar} oldIrql_13: int;
  var {:pointer} pIrpStack_7: int;
  var {:pointer} Tmp_1360: int;
  var {:pointer} PIrp_10: int;
  var {:pointer} PDevExt_20: int;
  var vslice_dummy_var_660: int;
  var vslice_dummy_var_661: int;

  anon0:
    PIrp_10 := actual_PIrp_10;
    PDevExt_20 := actual_PDevExt_20;
    call {:si_unique_call 2664} pIrpStack_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_10);
    call {:si_unique_call 2665} Tmp_1360 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1360 != 0;
    assume Tmp_1360 > 0;
    Mem_T.INT4[Tmp_1360] := oldIrqlFlags;
    call {:si_unique_call 2666} sdv_KeAcquireSpinLock(0, Tmp_1360);
    assume {:nonnull} Tmp_1360 != 0;
    assume Tmp_1360 > 0;
    oldIrqlFlags := Mem_T.INT4[Tmp_1360];
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)] != 0;
    goto L14;

  L14:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 1) != 0;
    goto L16;

  L16:
    call {:si_unique_call 2667} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_1359 := 0;
    goto L1;

  L1:
    return;

  anon29_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741738;
    Tmp_1359 := -1073741738;
    goto L1;

  anon27_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 1) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 8) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 2) != 0;
    goto L27;

  L27:
    call {:si_unique_call 2668} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    Tmp_1359 := 0;
    goto L1;

  anon33_Then:
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) != 0;
    Tmp_1359 := 0;
    goto L1;

  anon35_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) == 0;
    goto L33;

  L33:
    call {:si_unique_call 2669} Tmp_1360 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1360 != 0;
    assume Tmp_1360 > 0;
    Mem_T.INT4[Tmp_1360] := oldIrql_13;
    call {:si_unique_call 2670} IoAcquireCancelSpinLock(Tmp_1360);
    assume {:nonnull} Tmp_1360 != 0;
    assume Tmp_1360 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_1360];
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    call {:si_unique_call 2671} IoReleaseCancelSpinLock(oldIrql_13);
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741536;
    Tmp_1359 := -1073741536;
    goto L1;

  anon36_Then:
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := 259;
    call {:si_unique_call 2672} sdv_IoMarkIrpPending(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 2673} vslice_dummy_var_660 := sdv_InsertTailList(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(PDevExt_20), ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(PIrp_10))));
    call {:si_unique_call 2674} vslice_dummy_var_661 := sdv_IoSetCancelRoutine(PIrp_10, li2bplFunctionConstant168);
    call {:si_unique_call 2675} IoReleaseCancelSpinLock(oldIrql_13);
    Tmp_1359 := 259;
    goto L1;

  anon34_Then:
    goto L33;

  anon31_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 2) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) == 0;
    call {:si_unique_call 2676} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_1359 := 0;
    goto L1;

  anon32_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) != 0;
    goto L27;

  anon30_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 8) != 0;
    goto L16;

  anon28_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) != 0;
    goto L16;

  anon25_Then:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)] == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) == 0;
    call {:si_unique_call 2677} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_1359 := 0;
    goto L1;

  anon26_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) != 0;
    goto L14;
}



procedure {:origName "SLIC_ABORT_2_1"} SLIC_ABORT_2_1(actual_caller: int, actual_sdv_978: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_2_1"} SLIC_ABORT_2_1(actual_caller: int, actual_sdv_978: int)
{
  var {:pointer} caller: int;
  var {:scalar} sdv_978: int;

  anon0:
    caller := actual_caller;
    sdv_978 := actual_sdv_978;
    call {:si_unique_call 2678} SLIC_ERROR_ROUTINE(strConst__li2bpl324);
    return;
}



procedure {:origName "SLIC_ABORT_20_3"} SLIC_ABORT_20_3(actual_caller_1: int, actual_ExAllocatePoolWithTag_1: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_3"} SLIC_ABORT_20_3(actual_caller_1: int, actual_ExAllocatePoolWithTag_1: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} ExAllocatePoolWithTag_1: int;

  anon0:
    caller_1 := actual_caller_1;
    ExAllocatePoolWithTag_1 := actual_ExAllocatePoolWithTag_1;
    call {:si_unique_call 2679} SLIC_ERROR_ROUTINE(strConst__li2bpl325);
    return;
}



procedure {:origName "SLIC_ABORT_2_4"} SLIC_ABORT_2_4(actual_caller_2: int, actual_sdv_979: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_2_4"} SLIC_ABORT_2_4(actual_caller_2: int, actual_sdv_979: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} sdv_979: int;

  anon0:
    caller_2 := actual_caller_2;
    sdv_979 := actual_sdv_979;
    call {:si_unique_call 2680} SLIC_ERROR_ROUTINE(strConst__li2bpl326);
    return;
}



procedure {:origName "SLIC_sdv_ExAllocatePoolWithQuotaTag_entry"} {:osmodel} SLIC_sdv_ExAllocatePoolWithQuotaTag_entry(actual_caller_3: int, actual_sdv_980: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_sdv_ExAllocatePoolWithQuotaTag_entry"} {:osmodel} SLIC_sdv_ExAllocatePoolWithQuotaTag_entry(actual_caller_3: int, actual_sdv_980: int)
{
  var {:pointer} caller_3: int;
  var {:scalar} sdv_980: int;

  anon0:
    caller_3 := actual_caller_3;
    sdv_980 := actual_sdv_980;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_irql_current == 2;
    goto L22;

  L22:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_irql_current == 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sdv_980 mod 8 != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} sdv_980 mod 8 != 3;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_980 mod 8 != 5;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_980 mod 8 == 7;
    call {:si_unique_call 2681} SLIC_ABORT_2_4(caller_3, sdv_980);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} sdv_980 mod 8 != 7;
    goto L2;

  anon28_Then:
    assume {:partition} sdv_980 mod 8 == 5;
    call {:si_unique_call 2682} SLIC_ABORT_2_3(caller_3, sdv_980);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} sdv_980 mod 8 == 3;
    call {:si_unique_call 2683} SLIC_ABORT_2_2(caller_3, sdv_980);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} sdv_980 mod 8 == 1;
    call {:si_unique_call 2684} SLIC_ABORT_2_1(caller_3, sdv_980);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} sdv_irql_current != 2;
    goto L2;

  anon33_Then:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2685} SLIC_ABORT_2_0(caller_3, sdv_980);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L22;

  anon32_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L22;
}



procedure {:origName "SLIC_ExAllocatePoolWithTag_entry"} {:osmodel} SLIC_ExAllocatePoolWithTag_entry(actual_caller_4: int, actual_ExAllocatePoolWithTag_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ExAllocatePoolWithTag_entry"} {:osmodel} SLIC_ExAllocatePoolWithTag_entry(actual_caller_4: int, actual_ExAllocatePoolWithTag_2: int)
{
  var {:pointer} caller_4: int;
  var {:scalar} ExAllocatePoolWithTag_2: int;

  anon0:
    caller_4 := actual_caller_4;
    ExAllocatePoolWithTag_2 := actual_ExAllocatePoolWithTag_2;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_irql_current != 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_irql_current != 1;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_irql_current == 2;
    goto L22;

  L22:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_irql_current == 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 3;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 5;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 7;
    call {:si_unique_call 2686} SLIC_ABORT_20_4(caller_4, ExAllocatePoolWithTag_2);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 != 7;
    goto L2;

  anon28_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 5;
    call {:si_unique_call 2687} SLIC_ABORT_20_3(caller_4, ExAllocatePoolWithTag_2);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 3;
    call {:si_unique_call 2688} SLIC_ABORT_20_2(caller_4, ExAllocatePoolWithTag_2);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon37_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} ExAllocatePoolWithTag_2 mod 8 == 1;
    call {:si_unique_call 2689} SLIC_ABORT_20_1(caller_4, ExAllocatePoolWithTag_2);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} sdv_irql_current != 2;
    goto L2;

  anon33_Then:
    assume {:partition} sdv_irql_current != 2;
    call {:si_unique_call 2690} SLIC_ABORT_20_0(caller_4, ExAllocatePoolWithTag_2);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} sdv_irql_current == 1;
    goto L22;

  anon32_Then:
    assume {:partition} sdv_irql_current == 0;
    goto L22;
}



procedure {:origName "SLIC_ABORT_20_4"} SLIC_ABORT_20_4(actual_caller_8: int, actual_ExAllocatePoolWithTag_3: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_4"} SLIC_ABORT_20_4(actual_caller_8: int, actual_ExAllocatePoolWithTag_3: int)
{
  var {:pointer} caller_8: int;
  var {:scalar} ExAllocatePoolWithTag_3: int;

  anon0:
    caller_8 := actual_caller_8;
    ExAllocatePoolWithTag_3 := actual_ExAllocatePoolWithTag_3;
    call {:si_unique_call 2691} SLIC_ERROR_ROUTINE(strConst__li2bpl330);
    return;
}



procedure {:origName "SLIC_ABORT_20_2"} SLIC_ABORT_20_2(actual_caller_10: int, actual_ExAllocatePoolWithTag_4: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_2"} SLIC_ABORT_20_2(actual_caller_10: int, actual_ExAllocatePoolWithTag_4: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} ExAllocatePoolWithTag_4: int;

  anon0:
    caller_10 := actual_caller_10;
    ExAllocatePoolWithTag_4 := actual_ExAllocatePoolWithTag_4;
    call {:si_unique_call 2692} SLIC_ERROR_ROUTINE(strConst__li2bpl332);
    return;
}



procedure {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_11: int, actual_ExAllocatePoolWithTag_5: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_11: int, actual_ExAllocatePoolWithTag_5: int)
{
  var {:pointer} caller_11: int;
  var {:scalar} ExAllocatePoolWithTag_5: int;

  anon0:
    caller_11 := actual_caller_11;
    ExAllocatePoolWithTag_5 := actual_ExAllocatePoolWithTag_5;
    call {:si_unique_call 2693} SLIC_ERROR_ROUTINE(strConst__li2bpl333);
    return;
}



procedure {:origName "SLIC_ABORT_2_2"} SLIC_ABORT_2_2(actual_caller_13: int, actual_sdv_982: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_2_2"} SLIC_ABORT_2_2(actual_caller_13: int, actual_sdv_982: int)
{
  var {:pointer} caller_13: int;
  var {:scalar} sdv_982: int;

  anon0:
    caller_13 := actual_caller_13;
    sdv_982 := actual_sdv_982;
    call {:si_unique_call 2694} SLIC_ERROR_ROUTINE(strConst__li2bpl335);
    return;
}



procedure {:origName "SLIC_ABORT_20_1"} SLIC_ABORT_20_1(actual_caller_14: int, actual_ExAllocatePoolWithTag_6: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_20_1"} SLIC_ABORT_20_1(actual_caller_14: int, actual_ExAllocatePoolWithTag_6: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} ExAllocatePoolWithTag_6: int;

  anon0:
    caller_14 := actual_caller_14;
    ExAllocatePoolWithTag_6 := actual_ExAllocatePoolWithTag_6;
    call {:si_unique_call 2695} SLIC_ERROR_ROUTINE(strConst__li2bpl336);
    return;
}



procedure {:origName "_sdv_init23"} _sdv_init23();
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init23"} _sdv_init23()
{

  anon0:
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_2_3"} SLIC_ABORT_2_3(actual_caller_22: int, actual_sdv_988: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_2_3"} SLIC_ABORT_2_3(actual_caller_22: int, actual_sdv_988: int)
{
  var {:pointer} caller_22: int;
  var {:scalar} sdv_988: int;

  anon0:
    caller_22 := actual_caller_22;
    sdv_988 := actual_sdv_988;
    call {:si_unique_call 2696} SLIC_ERROR_ROUTINE(strConst__li2bpl342);
    return;
}



procedure {:origName "SLIC_ABORT_2_0"} SLIC_ABORT_2_0(actual_caller_23: int, actual_sdv_989: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_2_0"} SLIC_ABORT_2_0(actual_caller_23: int, actual_sdv_989: int)
{
  var {:pointer} caller_23: int;
  var {:scalar} sdv_989: int;

  anon0:
    caller_23 := actual_caller_23;
    sdv_989 := actual_sdv_989;
    call {:si_unique_call 2697} SLIC_ERROR_ROUTINE(strConst__li2bpl343);
    return;
}



procedure {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_1361: int);
  free ensures {:va_keep} Tmp_1361 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_1361: int)
{

  anon0:
    Tmp_1361 := 0;
    return;
}



procedure {:origName "SerialCommError"} SerialCommError(actual_Dpc_11: int, actual_DeferredContext_8: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCommError"} SerialCommError(actual_Dpc_11: int, actual_DeferredContext_8: int, actual_SystemContext1_7: int, actual_SystemContext2_7: int)
{
  var {:pointer} Tmp_1364: int;
  var {:pointer} Extension_28: int;
  var {:pointer} Tmp_1366: int;
  var {:pointer} Dpc_11: int;
  var {:pointer} DeferredContext_8: int;
  var vslice_dummy_var_662: int;
  var vslice_dummy_var_663: int;
  var vslice_dummy_var_664: int;
  var vslice_dummy_var_1026: int;
  var vslice_dummy_var_1027: int;

  anon0:
    call {:si_unique_call 2698} vslice_dummy_var_662 := __HAVOC_malloc(4);
    Dpc_11 := actual_Dpc_11;
    DeferredContext_8 := actual_DeferredContext_8;
    call {:si_unique_call 2699} Tmp_1364 := __HAVOC_malloc(72);
    call {:si_unique_call 2700} Tmp_1366 := __HAVOC_malloc(88);
    Extension_28 := DeferredContext_8;
    Tmp_1366 := strConst__li2bpl345;
    call {:si_unique_call 2701} vslice_dummy_var_663 := SerialDbgPrintEx(2, Tmp_1366);
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc vslice_dummy_var_1026;
    call {:si_unique_call 2702} SerialKillAllReadsOrWrites(vslice_dummy_var_1026, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_28), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_28));
    assume {:nonnull} Extension_28 != 0;
    assume Extension_28 > 0;
    havoc vslice_dummy_var_1027;
    call {:si_unique_call 2703} SerialKillAllReadsOrWrites(vslice_dummy_var_1027, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_28), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_28));
    call {:si_unique_call 2704} SerialDpcEpilogue(Extension_28, Dpc_11);
    Tmp_1364 := strConst__li2bpl344;
    call {:si_unique_call 2705} vslice_dummy_var_664 := SerialDbgPrintEx(2, Tmp_1364);
    return;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int)
{
  var {:pointer} ListHead_1: int;
  var vslice_dummy_var_665: int;

  anon0:
    call {:si_unique_call 2706} vslice_dummy_var_665 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1369: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_1369: int)
{
  var {:pointer} Entry_1: int;
  var {:pointer} Flink: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc Flink;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} Flink != 0;
    assume Flink > 0;
    Tmp_1369 := Entry_1;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_666: int;

  anon0:
    call {:si_unique_call 2707} vslice_dummy_var_666 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_5: int) returns (Tmp_1373: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1373 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_5: int) returns (Tmp_1373: int)
{
  var {:pointer} Tmp_1374: int;
  var {:pointer} Extension_29: int;
  var {:scalar} ModemControl_1: int;
  var {:pointer} Context_5: int;
  var vslice_dummy_var_667: int;

  anon0:
    Context_5 := actual_Context_5;
    call {:si_unique_call 2708} Tmp_1374 := __HAVOC_malloc(84);
    Extension_29 := Context_5;
    assume {:nonnull} Extension_29 != 0;
    assume Extension_29 > 0;
    call {:si_unique_call 2709} ModemControl_1 := corral_nondet();
    ModemControl_1 := BAND(ModemControl_1, BNOT(2));
    Tmp_1374 := strConst__li2bpl346;
    call {:si_unique_call 2710} vslice_dummy_var_667 := SerialDbgPrintEx(13, Tmp_1374);
    assume {:nonnull} Extension_29 != 0;
    assume Extension_29 > 0;
    Tmp_1373 := 0;
    return;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_668: int;

  anon0:
    call {:si_unique_call 2711} vslice_dummy_var_668 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_6: int) returns (Tmp_1380: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_1380 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_6: int) returns (Tmp_1380: int)
{
  var {:pointer} Tmp_1382: int;
  var {:pointer} Extension_30: int;
  var {:scalar} ModemControl_2: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_669: int;

  anon0:
    Context_6 := actual_Context_6;
    call {:si_unique_call 2712} Tmp_1382 := __HAVOC_malloc(84);
    Extension_30 := Context_6;
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    call {:si_unique_call 2713} ModemControl_2 := corral_nondet();
    ModemControl_2 := BAND(ModemControl_2, BNOT(1));
    Tmp_1382 := strConst__li2bpl347;
    call {:si_unique_call 2714} vslice_dummy_var_669 := SerialDbgPrintEx(13, Tmp_1382);
    assume {:nonnull} Extension_30 != 0;
    assume Extension_30 > 0;
    Tmp_1380 := 0;
    return;
}



procedure {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_31: int) returns (Tmp_1385: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_1385 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_31: int) returns (Tmp_1385: int)
{
  var {:pointer} Tmp_1386: int;
  var {:pointer} Tmp_1387: int;
  var {:scalar} Mask_2: int;
  var {:scalar} OldIrql_15: int;
  var {:pointer} NewIrp_5: int;
  var {:pointer} Tmp_1388: int;
  var {:pointer} Tmp_1389: int;
  var {:pointer} Tmp_1390: int;
  var {:pointer} Extension_31: int;
  var vslice_dummy_var_670: int;
  var vslice_dummy_var_1028: int;
  var vslice_dummy_var_1029: int;
  var vslice_dummy_var_1030: int;

  anon0:
    call {:si_unique_call 2715} NewIrp_5 := __HAVOC_malloc(4);
    Extension_31 := actual_Extension_31;
    goto L5;

  L5:
    call {:si_unique_call 2716} Tmp_1386, Tmp_1387, Mask_2, OldIrql_15, Tmp_1388, Tmp_1389, Tmp_1390, vslice_dummy_var_670 := SerialStartPurge_loop_L5(Tmp_1386, Tmp_1387, Mask_2, OldIrql_15, NewIrp_5, Tmp_1388, Tmp_1389, Tmp_1390, Extension_31, vslice_dummy_var_670);
    goto L5_last;

  L5_last:
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc Tmp_1390;
    assume {:nonnull} Tmp_1390 != 0;
    assume Tmp_1390 > 0;
    havoc Tmp_1389;
    assume {:nonnull} Tmp_1389 != 0;
    assume Tmp_1389 > 0;
    Mask_2 := Mem_T.INT4[Tmp_1389];
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mask_2, 1) != 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc vslice_dummy_var_1028;
    call {:si_unique_call 2717} SerialKillAllReadsOrWrites(vslice_dummy_var_1028, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_31), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_31));
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc vslice_dummy_var_1029;
    call {:si_unique_call 2718} SerialKillAllReadsOrWrites(vslice_dummy_var_1029, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_31), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_31));
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(Mask_2, 2) != 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc vslice_dummy_var_1030;
    call {:si_unique_call 2719} SerialKillAllReadsOrWrites(vslice_dummy_var_1030, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_31), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_31));
    goto L14;

  L14:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} BAND(Mask_2, 8) != 0;
    call {:si_unique_call 2720} Tmp_1388 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1388 != 0;
    assume Tmp_1388 > 0;
    Mem_T.INT4[Tmp_1388] := OldIrql_15;
    call {:si_unique_call 2721} sdv_KeAcquireSpinLock(0, Tmp_1388);
    assume {:nonnull} Tmp_1388 != 0;
    assume Tmp_1388 > 0;
    OldIrql_15 := Mem_T.INT4[Tmp_1388];
    call {:si_unique_call 2722} vslice_dummy_var_670 := KeSynchronizeExecution(0, li2bplFunctionConstant484, 0);
    call {:si_unique_call 2723} sdv_KeReleaseSpinLock(0, OldIrql_15);
    goto L18;

  L18:
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc Tmp_1387;
    assume {:nonnull} Tmp_1387 != 0;
    assume Tmp_1387 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1387))] := 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    havoc Tmp_1386;
    assume {:nonnull} Tmp_1386 != 0;
    assume Tmp_1386 > 0;
    assume {:nonnull} Extension_31 != 0;
    assume Extension_31 > 0;
    call {:si_unique_call 2724} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_31), PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_31), NewIrp_5, 1, Extension_31);
    assume {:nonnull} NewIrp_5 != 0;
    assume NewIrp_5 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_1385 := 0;
    return;

  anon11_Then:
    goto anon11_Then_dummy;

  anon11_Then_dummy:
    assume false;
    return;

  anon10_Then:
    assume {:partition} BAND(Mask_2, 8) == 0;
    goto L18;

  anon9_Then:
    assume {:partition} BAND(Mask_2, 2) == 0;
    goto L14;

  anon12_Then:
    assume {:partition} BAND(Mask_2, 1) == 0;
    goto L7;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_671: int;

  anon0:
    call {:si_unique_call 2725} vslice_dummy_var_671 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_672: int;

  anon0:
    call {:si_unique_call 2726} vslice_dummy_var_672 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClose"} SerialClose(actual_DeviceObject_28: int, actual_Irp_23: int) returns (Tmp_1395: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialClose"} SerialClose(actual_DeviceObject_28: int, actual_Irp_23: int) returns (Tmp_1395: int)
{
  var {:pointer} SD1_2: int;
  var {:scalar} flushCount: int;
  var {:scalar} sdv_999: int;
  var {:scalar} sdv_1000: int;
  var {:scalar} charTime_1: int;
  var {:scalar} Tmp_1397: int;
  var {:scalar} pendingDPCs: int;
  var {:pointer} Tmp_1399: int;
  var {:scalar} tenCharDelay: int;
  var {:pointer} Tmp_1400: int;
  var {:pointer} Tmp_1401: int;
  var {:pointer} Tmp_1402: int;
  var {:pointer} Tmp_1403: int;
  var {:pointer} Tmp_1404: int;
  var {:scalar} sdv_1021: int;
  var {:pointer} Tmp_1405: int;
  var {:pointer} Tmp_1407: int;
  var {:pointer} Tmp_1408: int;
  var {:scalar} Tmp_1409: int;
  var {:scalar} status_42: int;
  var {:scalar} sdv_1024: int;
  var {:pointer} Tmp_1411: int;
  var {:pointer} extension_8: int;
  var {:pointer} Tmp_1412: int;
  var {:scalar} sdv_1: int;
  var {:pointer} DeviceObject_28: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_673: int;
  var vslice_dummy_var_674: int;
  var vslice_dummy_var_675: int;
  var vslice_dummy_var_676: int;
  var vslice_dummy_var_677: int;
  var vslice_dummy_var_678: int;
  var vslice_dummy_var_679: int;
  var vslice_dummy_var_680: int;
  var vslice_dummy_var_681: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_686: int;
  var vslice_dummy_var_687: int;
  var vslice_dummy_var_688: int;
  var vslice_dummy_var_689: int;
  var vslice_dummy_var_690: int;
  var vslice_dummy_var_691: int;
  var vslice_dummy_var_692: int;
  var vslice_dummy_var_693: int;
  var vslice_dummy_var_694: int;
  var vslice_dummy_var_695: int;
  var vslice_dummy_var_696: int;
  var vslice_dummy_var_697: int;
  var vslice_dummy_var_698: int;
  var vslice_dummy_var_1031: int;
  var vslice_dummy_var_1032: int;

  anon0:
    call {:si_unique_call 2727} charTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2728} tenCharDelay := __HAVOC_malloc(20);
    call {:si_unique_call 2729} sdv_1 := __HAVOC_malloc(20);
    DeviceObject_28 := actual_DeviceObject_28;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 2730} Tmp_1399 := __HAVOC_malloc(72);
    call {:si_unique_call 2731} Tmp_1400 := __HAVOC_malloc(96);
    call {:si_unique_call 2732} Tmp_1401 := __HAVOC_malloc(92);
    call {:si_unique_call 2733} Tmp_1402 := __HAVOC_malloc(64);
    call {:si_unique_call 2734} Tmp_1403 := __HAVOC_malloc(124);
    call {:si_unique_call 2735} Tmp_1405 := __HAVOC_malloc(72);
    call {:si_unique_call 2736} Tmp_1407 := __HAVOC_malloc(80);
    call {:si_unique_call 2737} Tmp_1408 := __HAVOC_malloc(76);
    call {:si_unique_call 2738} Tmp_1411 := __HAVOC_malloc(128);
    call {:si_unique_call 2739} Tmp_1412 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc extension_8;
    call {:si_unique_call 2740} ExAcquireFastMutex(0);
    call {:si_unique_call 2741} status_42 := SerialIRPPrologue(Irp_23, extension_8);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_42 != 0;
    Tmp_1403 := strConst__li2bpl348;
    call {:si_unique_call 2742} vslice_dummy_var_685 := SerialDbgPrintEx(3, Tmp_1403);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_42 == -1073741738;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2743} sdv_ExFreePool(0);
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_42 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))];
    goto L25;

  L25:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_42 != 259;
    Tmp_1412 := strConst__li2bpl1;
    call {:si_unique_call 2744} vslice_dummy_var_686 := SerialDbgPrintEx(9, Tmp_1412);
    call {:si_unique_call 2745} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2746} SerialIRPEpilogue(extension_8);
    call {:si_unique_call 2747} Tmp_1404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    Mem_T.INT4[Tmp_1404] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)];
    call {:si_unique_call 2748} vslice_dummy_var_687 := sdv_InterlockedDecrement(Tmp_1404);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)] := Mem_T.INT4[Tmp_1404];
    goto L33;

  L33:
    call {:si_unique_call 2749} ExReleaseFastMutex(0);
    Tmp_1395 := status_42;
    goto L1;

  L1:
    return;

  anon40_Then:
    assume {:partition} status_42 == 259;
    goto L33;

  anon39_Then:
    assume {:partition} status_42 != -1073741738;
    goto L25;

  anon37_Then:
    assume {:partition} status_42 == 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 1 > Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)];
    Tmp_1411 := strConst__li2bpl349;
    call {:si_unique_call 2750} vslice_dummy_var_688 := SerialDbgPrintEx(0, Tmp_1411);
    Tmp_1401 := strConst__li2bpl350;
    call {:si_unique_call 2751} vslice_dummy_var_689 := SerialDbgPrintEx(0, Tmp_1401);
    call {:si_unique_call 2752} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741808;
    Tmp_1399 := strConst__li2bpl1;
    call {:si_unique_call 2753} vslice_dummy_var_690 := SerialDbgPrintEx(9, Tmp_1399);
    call {:si_unique_call 2754} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2755} SerialIRPEpilogue(extension_8);
    Tmp_1395 := -1073741808;
    goto L1;

  anon38_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)] >= 1;
    Tmp_1400 := strConst__li2bpl0;
    call {:si_unique_call 2756} vslice_dummy_var_691 := SerialDbgPrintEx(9, Tmp_1400);
    Tmp_1402 := strConst__li2bpl351;
    call {:si_unique_call 2757} vslice_dummy_var_692 := SerialDbgPrintEx(6, Tmp_1402);
    call {:si_unique_call 2758} SD1_2 := SerialGetCharTime(extension_8);
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    Mem_T.INT4[LowPart__LUID(sdv_1)] := Mem_T.INT4[LowPart__LUID(SD1_2)];
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(sdv_1))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SD1_2))];
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1_2 != 0;
    assume SD1_2 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    call {:si_unique_call 2759} SetDeviceIsOpened(extension_8, 0, 0);
    call {:si_unique_call 2760} vslice_dummy_var_673 := KeSynchronizeExecution(0, li2bplFunctionConstant427, 0);
    flushCount := 320;
    goto L87;

  L87:
    call {:si_unique_call 2761} flushCount, sdv_1000, Tmp_1409, vslice_dummy_var_674 := SerialClose_loop_L87(flushCount, sdv_1000, Tmp_1409, extension_8, vslice_dummy_var_674);
    goto L87_last;

  L87_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2762} sdv_1000 := corral_nondet();
    Tmp_1409 := BAND(sdv_1000, BOR(32, 64));
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_1409 != 96;
    call {:si_unique_call 2763} vslice_dummy_var_674 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon50_Else_dummy;

  anon50_Else_dummy:
    assume false;
    return;

  anon50_Then:
    assume {:partition} Tmp_1409 == 96;
    goto L88;

  L88:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} flushCount != 0;
    goto L103;

  L103:
    call {:si_unique_call 2764} vslice_dummy_var_675 := KeSynchronizeExecution(0, li2bplFunctionConstant249, 0);
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L108;

  L108:
    call {:si_unique_call 2765} sdv_1021, vslice_dummy_var_676 := SerialClose_loop_L108(sdv_1021, extension_8, vslice_dummy_var_676);
    goto L108_last;

  L108_last:
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2794} sdv_1021 := corral_nondet();
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(sdv_1021, 32) != 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    flushCount := 320;
    goto L121;

  L121:
    call {:si_unique_call 2766} flushCount, sdv_999, Tmp_1397, vslice_dummy_var_677 := SerialClose_loop_L121(flushCount, sdv_999, Tmp_1397, extension_8, vslice_dummy_var_677);
    goto L121_last;

  L121_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2767} sdv_999 := corral_nondet();
    Tmp_1397 := BAND(sdv_999, BOR(32, 64));
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Tmp_1397 != 96;
    call {:si_unique_call 2768} vslice_dummy_var_677 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon51_Else_dummy;

  anon51_Else_dummy:
    assume false;
    return;

  anon51_Then:
    assume {:partition} Tmp_1397 == 96;
    goto L122;

  L122:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 2769} SerialMarkHardwareBroken(extension_8);
    goto L107;

  L107:
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} tenCharDelay != 0;
    assume tenCharDelay > 0;
    call {:si_unique_call 2770} vslice_dummy_var_693 := KeDelayExecutionThread(0, 1, 0);
    call {:si_unique_call 2771} vslice_dummy_var_678 := SerialClrDTR(extension_8);
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L147;

  L147:
    call {:si_unique_call 2772} vslice_dummy_var_680 := SerialClose_loop_L147(extension_8, vslice_dummy_var_680);
    goto L147_last;

  L147_last:
    call {:si_unique_call 2795} vslice_dummy_var_680 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 2773} vslice_dummy_var_681 := KeSynchronizeExecution(0, li2bplFunctionConstant468, 0);
    goto L144;

  L144:
    call {:si_unique_call 2774} vslice_dummy_var_679 := SerialClrRTS(extension_8);
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    call {:si_unique_call 2775} sdv_ExFreePool(0);
    goto L159;

  L159:
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    call {:si_unique_call 2776} vslice_dummy_var_682 := IoCancelIrp(0);
    goto L165;

  L165:
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L172;

  L172:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Tmp_1405 := strConst__li2bpl1;
    call {:si_unique_call 2777} vslice_dummy_var_694 := SerialDbgPrintEx(9, Tmp_1405);
    call {:si_unique_call 2778} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2779} SerialIRPEpilogue(extension_8);
    call {:si_unique_call 2780} Tmp_1404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    havoc vslice_dummy_var_1031;
    Mem_T.INT4[Tmp_1404] := vslice_dummy_var_1031;
    call {:si_unique_call 2781} sdv_1024 := sdv_InterlockedDecrement(Tmp_1404);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    pendingDPCs := sdv_1024;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} pendingDPCs != 0;
    Tmp_1407 := strConst__li2bpl353;
    call {:si_unique_call 2782} vslice_dummy_var_695 := SerialDbgPrintEx(4, Tmp_1407);
    call {:si_unique_call 2783} vslice_dummy_var_684 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L188;

  L188:
    Tmp_1408 := strConst__li2bpl352;
    call {:si_unique_call 2784} vslice_dummy_var_696 := SerialDbgPrintEx(4, Tmp_1408);
    call {:si_unique_call 2785} ExReleaseFastMutex(0);
    call {:si_unique_call 2786} Tmp_1404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    havoc vslice_dummy_var_1032;
    Mem_T.INT4[Tmp_1404] := vslice_dummy_var_1032;
    call {:si_unique_call 2787} vslice_dummy_var_697 := sdv_InterlockedIncrement(Tmp_1404);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2788} Tmp_1404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    Mem_T.INT4[Tmp_1404] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)];
    call {:si_unique_call 2789} vslice_dummy_var_698 := sdv_InterlockedDecrement(Tmp_1404);
    assume {:nonnull} Tmp_1404 != 0;
    assume Tmp_1404 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_8)] := Mem_T.INT4[Tmp_1404];
    call {:si_unique_call 2790} MmUnlockPagableImageSection(0);
    Tmp_1395 := 0;
    goto L1;

  anon54_Then:
    assume {:partition} pendingDPCs == 0;
    goto L188;

  anon49_Then:
    call {:si_unique_call 2791} vslice_dummy_var_683 := SerialGotoPowerState(DeviceObject_28, extension_8, 4);
    goto L172;

  anon53_Then:
    goto L165;

  anon52_Then:
    goto L159;

  anon48_Then:
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    assume false;
    return;

  anon47_Then:
    goto L144;

  anon46_Then:
    assume {:partition} flushCount != 0;
    goto L107;

  anon45_Then:
    assume {:partition} flushCount == 0;
    goto L122;

  anon44_Then:
    assume {:partition} BAND(sdv_1021, 32) == 0;
    call {:si_unique_call 2792} vslice_dummy_var_676 := KeDelayExecutionThread(0, 0, 0);
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon43_Then:
    goto L107;

  anon42_Then:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 2793} SerialMarkHardwareBroken(extension_8);
    goto L103;

  anon41_Then:
    assume {:partition} flushCount == 0;
    goto L88;
}



procedure {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_29: int, actual_Irp_24: int) returns (Tmp_1413: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_29: int, actual_Irp_24: int) returns (Tmp_1413: int)
{
  var {:pointer} Tmp_1414: int;
  var {:pointer} Tmp_1415: int;
  var {:scalar} status_43: int;
  var {:pointer} extension_9: int;
  var {:pointer} Tmp_1416: int;
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_699: int;
  var vslice_dummy_var_700: int;
  var vslice_dummy_var_701: int;

  anon0:
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2796} Tmp_1414 := __HAVOC_malloc(96);
    call {:si_unique_call 2797} Tmp_1415 := __HAVOC_malloc(72);
    call {:si_unique_call 2798} Tmp_1416 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_29 != 0;
    assume DeviceObject_29 > 0;
    havoc extension_9;
    call {:si_unique_call 2799} sdv_do_paged_code_check();
    call {:si_unique_call 2800} status_43 := SerialIRPPrologue(Irp_24, extension_9);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_43 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_43 == -1073741738;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))] := 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    status_43 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))];
    goto L18;

  L18:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_43 != 259;
    Tmp_1415 := strConst__li2bpl1;
    call {:si_unique_call 2801} vslice_dummy_var_699 := SerialDbgPrintEx(9, Tmp_1415);
    call {:si_unique_call 2802} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2803} SerialIRPEpilogue(extension_9);
    goto L21;

  L21:
    Tmp_1413 := status_43;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} status_43 == 259;
    goto L21;

  anon8_Then:
    assume {:partition} status_43 != -1073741738;
    goto L18;

  anon7_Then:
    assume {:partition} status_43 == 0;
    Tmp_1414 := strConst__li2bpl0;
    call {:si_unique_call 2804} vslice_dummy_var_700 := SerialDbgPrintEx(9, Tmp_1414);
    call {:si_unique_call 2805} SerialKillPendingIrps(DeviceObject_29);
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))] := 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Tmp_1416 := strConst__li2bpl1;
    call {:si_unique_call 2806} vslice_dummy_var_701 := SerialDbgPrintEx(9, Tmp_1416);
    call {:si_unique_call 2807} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2808} SerialIRPEpilogue(extension_9);
    Tmp_1413 := 0;
    goto L1;
}



procedure {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_30: int, actual_Irp_25: int) returns (Tmp_1418: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_30: int, actual_Irp_25: int) returns (Tmp_1418: int)
{
  var {:scalar} localStatus_1: int;
  var {:pointer} Tmp_1419: int;
  var {:pointer} sdv_1032: int;
  var {:pointer} Tmp_1420: int;
  var {:pointer} sdv_1034: int;
  var {:pointer} Tmp_1421: int;
  var {:pointer} sdv_1042: int;
  var {:scalar} sdv_1043: int;
  var {:scalar} sdv_1044: int;
  var {:pointer} Tmp_1422: int;
  var {:pointer} sdv_1049: int;
  var {:pointer} Tmp_1423: int;
  var {:pointer} Tmp_1424: int;
  var {:pointer} Tmp_1425: int;
  var {:pointer} extension_10: int;
  var {:pointer} Tmp_1426: int;
  var {:scalar} checkOpen: int;
  var {:pointer} DeviceObject_30: int;
  var {:pointer} Irp_25: int;
  var boogieTmp: int;
  var vslice_dummy_var_702: int;
  var vslice_dummy_var_703: int;
  var vslice_dummy_var_704: int;
  var vslice_dummy_var_705: int;
  var vslice_dummy_var_706: int;
  var vslice_dummy_var_707: int;
  var vslice_dummy_var_708: int;
  var vslice_dummy_var_709: int;
  var vslice_dummy_var_710: int;
  var vslice_dummy_var_711: int;
  var vslice_dummy_var_712: int;
  var vslice_dummy_var_713: int;
  var vslice_dummy_var_714: int;
  var vslice_dummy_var_715: int;
  var vslice_dummy_var_716: int;
  var vslice_dummy_var_717: int;
  var vslice_dummy_var_1033: int;
  var vslice_dummy_var_1034: int;
  var vslice_dummy_var_1035: int;

  anon0:
    call {:si_unique_call 2809} checkOpen := __HAVOC_malloc(8);
    DeviceObject_30 := actual_DeviceObject_30;
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 2810} Tmp_1419 := __HAVOC_malloc(72);
    call {:si_unique_call 2811} Tmp_1420 := __HAVOC_malloc(96);
    call {:si_unique_call 2812} Tmp_1421 := __HAVOC_malloc(72);
    call {:si_unique_call 2813} Tmp_1422 := __HAVOC_malloc(84);
    call {:si_unique_call 2814} Tmp_1423 := __HAVOC_malloc(72);
    call {:si_unique_call 2815} Tmp_1424 := __HAVOC_malloc(72);
    call {:si_unique_call 2816} Tmp_1426 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_30 != 0;
    assume DeviceObject_30 > 0;
    havoc extension_10;
    call {:si_unique_call 2817} sdv_do_paged_code_check();
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741670;
    call {:si_unique_call 2818} sdv_IoCompleteRequest(0, 0);
    Tmp_1418 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon37_Then:
    call {:si_unique_call 2819} ExAcquireFastMutex(0);
    call {:si_unique_call 2820} localStatus_1 := SerialIRPPrologue(Irp_25, extension_10);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} localStatus_1 != 0;
    call {:si_unique_call 2821} ExReleaseFastMutex(0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} localStatus_1 != 259;
    Tmp_1423 := strConst__li2bpl1;
    call {:si_unique_call 2822} vslice_dummy_var_705 := SerialDbgPrintEx(9, Tmp_1423);
    call {:si_unique_call 2823} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2824} SerialIRPEpilogue(extension_10);
    goto L32;

  L32:
    Tmp_1418 := localStatus_1;
    goto L1;

  anon39_Then:
    assume {:partition} localStatus_1 == 259;
    goto L32;

  anon38_Then:
    assume {:partition} localStatus_1 == 0;
    call {:si_unique_call 2825} Tmp_1425 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[Tmp_1425] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)];
    call {:si_unique_call 2826} sdv_1043 := sdv_InterlockedIncrement(Tmp_1425);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)] := Mem_T.INT4[Tmp_1425];
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} sdv_1043 != 1;
    call {:si_unique_call 2827} ExReleaseFastMutex(0);
    call {:si_unique_call 2828} Tmp_1425 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[Tmp_1425] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)];
    call {:si_unique_call 2829} vslice_dummy_var_706 := sdv_InterlockedDecrement(Tmp_1425);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)] := Mem_T.INT4[Tmp_1425];
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741790;
    Tmp_1426 := strConst__li2bpl1;
    call {:si_unique_call 2830} vslice_dummy_var_707 := SerialDbgPrintEx(9, Tmp_1426);
    call {:si_unique_call 2831} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2832} SerialIRPEpilogue(extension_10);
    Tmp_1418 := -1073741790;
    goto L1;

  anon40_Then:
    assume {:partition} sdv_1043 == 1;
    Tmp_1420 := strConst__li2bpl0;
    call {:si_unique_call 2833} vslice_dummy_var_708 := SerialDbgPrintEx(9, Tmp_1420);
    Tmp_1422 := strConst__li2bpl354;
    call {:si_unique_call 2834} vslice_dummy_var_709 := SerialDbgPrintEx(6, Tmp_1422);
    call {:si_unique_call 2835} sdv_1042 := sdv_IoGetCurrentIrpStackLocation(Irp_25);
    assume {:nonnull} sdv_1042 != 0;
    assume sdv_1042 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 2836} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741565;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    call {:si_unique_call 2837} Tmp_1425 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[Tmp_1425] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)];
    call {:si_unique_call 2838} vslice_dummy_var_710 := sdv_InterlockedDecrement(Tmp_1425);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)] := Mem_T.INT4[Tmp_1425];
    Tmp_1421 := strConst__li2bpl1;
    call {:si_unique_call 2839} vslice_dummy_var_711 := SerialDbgPrintEx(9, Tmp_1421);
    call {:si_unique_call 2840} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2841} SerialIRPEpilogue(extension_10);
    Tmp_1418 := -1073741565;
    goto L1;

  anon41_Then:
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    call {:si_unique_call 2842} sdv_1044 := corral_nondet();
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_1044 != 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_1044 != 1;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_1044 == 2;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    havoc vslice_dummy_var_1033;
    call {:si_unique_call 2843} sdv_1032 := ExAllocatePoolWithTag(0, vslice_dummy_var_1033, -666022077);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L96;

  L96:
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    havoc vslice_dummy_var_1034;
    call {:si_unique_call 2844} sdv_1034 := ExAllocatePoolWithTag(0, vslice_dummy_var_1034, -666022077);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L95;

  L95:
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    havoc vslice_dummy_var_1035;
    call {:si_unique_call 2845} sdv_1049 := ExAllocatePoolWithTag(0, vslice_dummy_var_1035, -666022077);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto L94;

  L94:
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 2846} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 2847} vslice_dummy_var_702 := SerialGotoPowerState(DeviceObject_30, extension_10, 1);
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    call {:si_unique_call 2848} boogieTmp := corral_nondet();
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    call {:si_unique_call 2849} boogieTmp := corral_nondet();
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    call {:si_unique_call 2850} boogieTmp := corral_nondet();
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    call {:si_unique_call 2851} vslice_dummy_var_712 := KeSynchronizeExecution(0, li2bplFunctionConstant411, 0);
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 2852} vslice_dummy_var_703 := KeSynchronizeExecution(0, li2bplFunctionConstant469, 0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := 0;
    goto L151;

  L151:
    call {:si_unique_call 2853} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    localStatus_1 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))];
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} localStatus_1 >= 0;
    goto L158;

  L158:
    Tmp_1424 := strConst__li2bpl1;
    call {:si_unique_call 2854} vslice_dummy_var_713 := SerialDbgPrintEx(9, Tmp_1424);
    call {:si_unique_call 2855} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2856} SerialIRPEpilogue(extension_10);
    Tmp_1418 := localStatus_1;
    goto L1;

  anon50_Then:
    assume {:partition} 0 > localStatus_1;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 2857} sdv_ExFreePool(0);
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto L168;

  L168:
    call {:si_unique_call 2858} Tmp_1425 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[Tmp_1425] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)];
    call {:si_unique_call 2859} vslice_dummy_var_714 := sdv_InterlockedDecrement(Tmp_1425);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)] := Mem_T.INT4[Tmp_1425];
    goto L158;

  anon45_Then:
    goto L168;

  anon49_Then:
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 2860} vslice_dummy_var_704 := KeSynchronizeExecution(0, li2bplFunctionConstant469, 0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := 0;
    goto L151;

  anon44_Then:
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    call {:si_unique_call 2861} vslice_dummy_var_715 := KeSynchronizeExecution(0, li2bplFunctionConstant470, 0);
    goto L151;

  anon43_Then:
    call {:si_unique_call 2862} ExReleaseFastMutex(0);
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741670;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    call {:si_unique_call 2863} Tmp_1425 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[Tmp_1425] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)];
    call {:si_unique_call 2864} vslice_dummy_var_716 := sdv_InterlockedDecrement(Tmp_1425);
    assume {:nonnull} Tmp_1425 != 0;
    assume Tmp_1425 > 0;
    assume {:nonnull} extension_10 != 0;
    assume extension_10 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_10)] := Mem_T.INT4[Tmp_1425];
    Tmp_1419 := strConst__li2bpl1;
    call {:si_unique_call 2865} vslice_dummy_var_717 := SerialDbgPrintEx(9, Tmp_1419);
    call {:si_unique_call 2866} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2867} SerialIRPEpilogue(extension_10);
    Tmp_1418 := -1073741670;
    goto L1;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    goto L94;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    goto L94;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} sdv_1044 != 2;
    goto L94;

  anon47_Then:
    assume {:partition} sdv_1044 == 1;
    goto L96;

  anon42_Then:
    assume {:partition} sdv_1044 == 0;
    goto L95;
}



procedure {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_32: int) returns (structPtr888Tmp: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_32: int) returns (structPtr888Tmp: int)
{
  var {:scalar} Tmp_1427: int;
  var {:scalar} dataSize: int;
  var {:scalar} charTime_2: int;
  var {:scalar} Tmp_1428: int;
  var {:scalar} bitTime: int;
  var {:scalar} paritySize: int;
  var {:scalar} Tmp_1430: int;
  var {:scalar} tmp: int;
  var {:scalar} stopSize: int;
  var {:scalar} Tmp: int;
  var {:pointer} Extension_32: int;

  anon0:
    call {:si_unique_call 2868} tmp := __HAVOC_malloc(20);
    call {:si_unique_call 2869} Tmp := __HAVOC_malloc(20);
    Extension_32 := actual_Extension_32;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_1430;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_1430 == 1;
    dataSize := 6;
    goto L15;

  L15:
    paritySize := 1;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L18;

  L18:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    stopSize := 2;
    goto L21;

  L21:
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc bitTime;
    charTime_2 := bitTime + (dataSize + paritySize + stopSize) * bitTime;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    Mem_T.INT4[LowPart__LUID(Tmp)] := Mem_T.INT4[LowPart__LUID(tmp)];
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Tmp))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(tmp))];
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    structPtr888Tmp := Tmp;
    return;

  anon14_Then:
    stopSize := 1;
    goto L21;

  anon16_Then:
    paritySize := 0;
    goto L18;

  anon15_Then:
    assume {:partition} Tmp_1430 != 1;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_1427;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_1427 == 2;
    dataSize := 7;
    goto L15;

  anon17_Then:
    assume {:partition} Tmp_1427 != 2;
    assume {:nonnull} Extension_32 != 0;
    assume Extension_32 > 0;
    havoc Tmp_1428;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1428 == 3;
    dataSize := 8;
    goto L15;

  anon18_Then:
    assume {:partition} Tmp_1428 != 3;
    goto L15;

  anon13_Then:
    dataSize := 5;
    goto L15;
}



procedure {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_7: int)
{
  var {:scalar} sdv_1055: int;
  var {:pointer} extension_11: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_718: int;

  anon0:
    call {:si_unique_call 2870} vslice_dummy_var_718 := __HAVOC_malloc(4);
    Context_7 := actual_Context_7;
    extension_11 := Context_7;
    assume {:nonnull} extension_11 != 0;
    assume extension_11 > 0;
    call {:si_unique_call 2871} sdv_1055 := corral_nondet();
    assume {:nonnull} extension_11 != 0;
    assume extension_11 > 0;
    assume {:nonnull} extension_11 != 0;
    assume extension_11 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} extension_11 != 0;
    assume extension_11 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_21: int, actual_PDrainTime: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_21: int, actual_PDrainTime: int)
{
  var {:scalar} Tmp_1438: int;
  var {:scalar} sdv_1056: int;
  var {:pointer} PDevExt_21: int;
  var vslice_dummy_var_719: int;
  var vslice_dummy_var_720: int;

  anon0:
    call {:si_unique_call 2872} vslice_dummy_var_719 := __HAVOC_malloc(4);
    PDevExt_21 := actual_PDevExt_21;
    call {:si_unique_call 2873} sdv_do_paged_code_check();
    goto L6;

  L6:
    call {:si_unique_call 2874} Tmp_1438, sdv_1056, vslice_dummy_var_720 := SerialDrainUART_loop_L6(Tmp_1438, sdv_1056, PDevExt_21, vslice_dummy_var_720);
    goto L6_last;

  L6_last:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 2876} sdv_1056 := corral_nondet();
    Tmp_1438 := BAND(sdv_1056, BOR(32, 64));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Tmp_1438 != 96;
    call {:si_unique_call 2875} vslice_dummy_var_720 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Tmp_1438 == 96;
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_1071: int, actual_sdv_1072: int) returns (Tmp_1449: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_1071: int, actual_sdv_1072: int) returns (Tmp_1449: int)
{
  var {:scalar} sdv_1073: int;

  anon0:
    call {:si_unique_call 2877} Tmp_1449 := __HAVOC_malloc(4);
    call {:si_unique_call 2878} sdv_1073 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1449 != 0;
    assume Tmp_1449 > 0;
    assume {:nonnull} sdv_1073 != 0;
    assume sdv_1073 > 0;
    Mem_T.INT4[Tmp_1449] := Mem_T.INT4[sdv_1073];
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    assume (forall x: int :: { Mem_T.CancelRoutine__IRP[x] } Mem_T.CancelRoutine__IRP[x] <= 0 || Mem_T.CancelRoutine__IRP[x] > 548);
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__CONFIG_DATA"} {:fieldname "AddressSpace"} AddressSpace__CONFIG_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__SERIAL_DEVICE_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.Affinity__CONFIG_DATA"} {:fieldname "Affinity"} Affinity__CONFIG_DATA(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_43"} {:fieldname "Affinity"} Affinity_unnamed_tag_43(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Alignment_unnamed_tag_54"} {:fieldname "Alignment"} Alignment_unnamed_tag_54(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_38"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_38(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_38"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_38(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_40(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_3"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BaseIOAddress__SERIAL_WMI_HW_DATA"} {:fieldname "BaseIOAddress"} BaseIOAddress__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.BaudClock__CM_SERIAL_DEVICE_DATA"} {:fieldname "BaudClock"} BaudClock__CM_SERIAL_DEVICE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BaudRate__SERIAL_BAUD_RATE"} {:fieldname "BaudRate"} BaudRate__SERIAL_BAUD_RATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BitsPerByte__SERIAL_WMI_COMM_DATA"} {:fieldname "BitsPerByte"} BitsPerByte__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BreakChar__SERIAL_CHARS"} {:fieldname "BreakChar"} BreakChar__SERIAL_CHARS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BufferSizePt8__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSizePt8"} BufferSizePt8__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.BufferSize__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSize"} BufferSize__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CONFIG_DATA"} {:fieldname "BusNumber"} BusNumber__CONFIG_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "BusNumber"} BusNumber__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__SERIAL_DEVICE_EXTENSION"} {:fieldname "BusNumber"} BusNumber__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.CIsrSw__SERIAL_DEVICE_EXTENSION"} {:fieldname "CIsrSw"} CIsrSw__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2360
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_28"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CharsCopied__SERIAL_UPDATE_CHAR"} {:fieldname "CharsCopied"} CharsCopied__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "CharsInInterruptBuffer"} CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ClockRate"} ClockRate__CONFIG_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.ClockRate__SERIAL_DEVICE_EXTENSION"} {:fieldname "ClockRate"} ClockRate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 424
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommErrorDpc"} CommErrorDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 852
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommWaitDpc"} CommWaitDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 892
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "CommonInterruptObject"} CommonInterruptObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteImmediateDpc"} CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 932
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteReadDpc"} CompleteReadDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 692
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteWriteDpc"} CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Completed__SERIAL_UPDATE_CHAR"} {:fieldname "Completed"} Completed__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.Context__SERIAL_CISR_SW"} {:fieldname "Context"} Context__SERIAL_CISR_SW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ControlHandShake__SERIAL_HANDFLOW"} {:fieldname "ControlHandShake"} ControlHandShake__SERIAL_HANDFLOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ControlLock__SERIAL_DEVICE_EXTENSION"} {:fieldname "ControlLock"} ControlLock__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 644
}

function {:inline true} {:fieldmap "Mem_T.Controller__CONFIG_DATA"} {:fieldname "Controller"} Controller__CONFIG_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__SERIAL_DEVICE_EXTENSION"} {:fieldname "Controller"} Controller__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOfTryingToLowerRTS"} CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 408
}

function {:inline true} {:fieldmap "Mem_T.CountOnLastRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOnLastRead"} CountOnLastRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 392
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Counter__SERIAL_XOFF_COUNTER"} {:fieldname "Counter"} Counter__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSerialCommEntry"} CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 640
}

function {:inline true} {:fieldmap "Mem_T.CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSymbolicLink"} CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 636
}

function {:inline true} {:fieldmap "Mem_T.CurrentBaud__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentBaud"} CurrentBaud__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentCharSlot"} CurrentCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentImmediateIrp"} CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskIrp"} CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPurgeIrp"} CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentReadIrp"} CurrentReadIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.CurrentRxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentRxQueue"} CurrentRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentTxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentTxQueue"} CurrentTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWaitIrp"} CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWriteIrp"} CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentXoffIrp"} CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.CutOverAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "CutOverAmount"} CutOverAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__SERIAL_IOCTL_SYNC"} {:fieldname "Data"} Data__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DebugLevel"} DebugLevel__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultPermitSystemWideShare__SERIAL_USER_DATA"} {:fieldname "DefaultPermitSystemWideShare"} DefaultPermitSystemWideShare__SERIAL_USER_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceClassSymbolicName"} DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2348
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DeviceIsOpened__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceIsOpened"} DeviceIsOpened__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 524
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 488
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DevicePNPAccept"} DevicePNPAccept__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2368
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateMap__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceStateMap"} DeviceStateMap__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2648
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_DEVICE_STATE"} {:fieldname "DeviceState"} DeviceState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2632
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3104
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__CONFIG_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__SERIAL_USER_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DosName"} DosName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DpcCount__SERIAL_DEVICE_EXTENSION"} {:fieldname "DpcCount"} DpcCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3312
}

function {:inline true} {:fieldmap "Mem_T.Dpc__KTIMER"} {:fieldname "Dpc"} Dpc__KTIMER(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DriverObject"} DriverObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2220
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.EofChar__SERIAL_CHARS"} {:fieldname "EofChar"} EofChar__SERIAL_CHARS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ErrorChar__SERIAL_CHARS"} {:fieldname "ErrorChar"} ErrorChar__SERIAL_CHARS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ErrorWord__SERIAL_DEVICE_EXTENSION"} {:fieldname "ErrorWord"} ErrorWord__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.EscapeChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "EscapeChar"} EscapeChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.EventChar__SERIAL_CHARS"} {:fieldname "EventChar"} EventChar__SERIAL_CHARS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_CHECK_OPEN"} {:fieldname "Extension"} Extension__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_IOCTL_SYNC"} {:fieldname "Extension"} Extension__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_RESIZE_PARAMS"} {:fieldname "Extension"} Extension__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_UPDATE_CHAR"} {:fieldname "Extension"} Extension__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extensions__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "Extensions"} Extensions__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FifoPresent__SERIAL_DEVICE_EXTENSION"} {:fieldname "FifoPresent"} FifoPresent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_13"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_13(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 316
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstReadableChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "FirstReadableChar"} FirstReadableChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.FlagsLock__SERIAL_DEVICE_EXTENSION"} {:fieldname "FlagsLock"} FlagsLock__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 648
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Flags"} Flags__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2500
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FlowReplace__SERIAL_HANDFLOW"} {:fieldname "FlowReplace"} FlowReplace__SERIAL_HANDFLOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnableDefault__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnableDefault"} ForceFIFOEnableDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFIFOEnable"} ForceFIFOEnable__SERIAL_USER_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnableDefault"} ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnable"} ForceFifoEnable__CONFIG_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.GlobalsSpinLock__SERIAL_GLOBALS"} {:fieldname "GlobalsSpinLock"} GlobalsSpinLock__SERIAL_GLOBALS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_HANDFLOW"} {:fieldname "HandFlow"} HandFlow__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HandFlow__SERIAL_DEVICE_EXTENSION"} {:fieldname "HandFlow"} HandFlow__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "HistoryMask"} HistoryMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.IER__SERIAL_DEVICE_STATE"} {:fieldname "IER"} IER__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_32"} {:fieldname "IdType"} IdType_unnamed_tag_32(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ImmediateTotalTimer"} ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1732
}

function {:inline true} {:fieldmap "Mem_T.InSize__SERIAL_QUEUE_SIZE"} {:fieldname "InSize"} InSize__SERIAL_QUEUE_SIZE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Indexed"} Indexed__CONFIG_DATA(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.Indexed__SERIAL_DEVICE_EXTENSION"} {:fieldname "Indexed"} Indexed__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_20"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CONFIG_DATA"} {:fieldname "InterfaceType"} InterfaceType__CONFIG_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "InterfaceType"} InterfaceType__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__CONFIG_DATA"} {:fieldname "InterruptMode"} InterruptMode__CONFIG_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptReadBuffer"} InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.InterruptShareable__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptShareable"} InterruptShareable__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__CONFIG_DATA"} {:fieldname "InterruptStatus"} InterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptStatus"} InterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.InterruptType__SERIAL_WMI_HW_DATA"} {:fieldname "InterruptType"} InterruptType__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_41"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_41(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_53"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_53(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IntervalReadTimeoutDpc"} IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 772
}

function {:inline true} {:fieldmap "Mem_T.IntervalTimeToUse__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTimeToUse"} IntervalTimeToUse__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.IntervalTime__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTime"} IntervalTime__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_20"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_20(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_29"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IrpMaskLocation__SERIAL_DEVICE_EXTENSION"} {:fieldname "IrpMaskLocation"} IrpMaskLocation__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.IrqAffinityMask__SERIAL_WMI_HW_DATA"} {:fieldname "IrqAffinityMask"} IrqAffinityMask__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IrqLevel__SERIAL_WMI_HW_DATA"} {:fieldname "IrqLevel"} IrqLevel__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IrqNumber__SERIAL_WMI_HW_DATA"} {:fieldname "IrqNumber"} IrqNumber__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IrqVector__SERIAL_WMI_HW_DATA"} {:fieldname "IrqVector"} IrqVector__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Irql__SERIAL_DEVICE_EXTENSION"} {:fieldname "Irql"} Irql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T.IsBusy__SERIAL_WMI_COMM_DATA"} {:fieldname "IsBusy"} IsBusy__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IsrFunc__SERIAL_CISR_SW"} {:fieldname "IsrFunc"} IsrFunc__SERIAL_CISR_SW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IsrUnlockPagesDpc"} IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1172
}

function {:inline true} {:fieldmap "Mem_T.IsrWaitMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "IsrWaitMask"} IsrWaitMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.LCR__SERIAL_DEVICE_STATE"} {:fieldname "LCR"} LCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LastCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "LastCharSlot"} LastCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_16"} {:fieldname "Length"} Length_unnamed_tag_16(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_42"} {:fieldname "Length"} Length_unnamed_tag_42(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_43"} {:fieldname "Level"} Level_unnamed_tag_43(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LineControl__SERIAL_DEVICE_EXTENSION"} {:fieldname "LineControl"} LineControl__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_7(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ListSize__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "ListSize"} ListSize__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LogFIFODefault__SERIAL_USER_DATA"} {:fieldname "LogFIFODefault"} LogFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "LogFifoDefault"} LogFifoDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LogFifo__CONFIG_DATA"} {:fieldname "LogFifo"} LogFifo__CONFIG_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "LongIntervalAmount"} LongIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "LowerDeviceObject"} LowerDeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2212
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "LowerRTSTimer"} LowerRTSTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2052
}

function {:inline true} {:fieldmap "Mem_T.MCR__SERIAL_DEVICE_STATE"} {:fieldname "MCR"} MCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__CONFIG_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_USER_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskQueue"} MaskQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.MaxBaud__SERIAL_COMMPROP"} {:fieldname "MaxBaud"} MaxBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.MaxRxQueue__SERIAL_COMMPROP"} {:fieldname "MaxRxQueue"} MaxRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MaxTxQueue__SERIAL_COMMPROP"} {:fieldname "MaxTxQueue"} MaxTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_54"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_54(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumBaudRate"} MaximumBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumInputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumInputBufferSize"} MaximumInputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumOutputBufferSize"} MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.MaximumVector_unnamed_tag_55"} {:fieldname "MaximumVector"} MaximumVector_unnamed_tag_55(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_41"} {:fieldname "Memory"} Memory_unnamed_tag_41(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_54"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_54(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumVector_unnamed_tag_55"} {:fieldname "MinimumVector"} MinimumVector_unnamed_tag_55(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MultiportSiblings"} MultiportSiblings__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.NameLength__KEY_BASIC_INFORMATION"} {:fieldname "NameLength"} NameLength__KEY_BASIC_INFORMATION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Name__KEY_BASIC_INFORMATION"} {:fieldname "Name"} Name__KEY_BASIC_INFORMATION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewBufferSize__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBufferSize"} NewBufferSize__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NewBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBuffer"} NewBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewDevicePowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewDevicePowerState"} NewDevicePowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3448
}

function {:inline true} {:fieldmap "Mem_T.NewExtension__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewExtension"} NewExtension__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.NewMaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewMaskInverted"} NewMaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.NewPortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewPortIndex"} NewPortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.NumberMoved__SERIAL_RESIZE_PARAMS"} {:fieldname "NumberMoved"} NumberMoved__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberNeededForRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "NumberNeededForRead"} NumberNeededForRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ObjectDirectory"} ObjectDirectory__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.OldBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "OldBuffer"} OldBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "OpenCount"} OpenCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2504
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalController"} OriginalController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalInterruptStatus"} OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__CONFIG_DATA"} {:fieldname "OriginalIrql"} OriginalIrql__CONFIG_DATA(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalIrql"} OriginalIrql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__CONFIG_DATA"} {:fieldname "OriginalVector"} OriginalVector__CONFIG_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalVector"} OriginalVector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T.OurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsrContext"} OurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.OurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsr"} OurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_20"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_6"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION"} {:fieldname "OwnsPowerPolicy"} OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3088
}

function {:inline true} {:fieldmap "Mem_T.PAGESER_Handle__SERIAL_GLOBALS"} {:fieldname "PAGESER_Handle"} PAGESER_Handle__SERIAL_GLOBALS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PNPState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PNPState"} PNPState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2496
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketVersion__SERIAL_COMMPROP"} {:fieldname "PacketVersion"} PacketVersion__SERIAL_COMMPROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParityCheckEnable__SERIAL_WMI_COMM_DATA"} {:fieldname "ParityCheckEnable"} ParityCheckEnable__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_LINE_CONTROL"} {:fieldname "Parity"} Parity__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_WMI_COMM_DATA"} {:fieldname "Parity"} Parity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pdo__SERIAL_DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3108
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingDpcEvent"} PendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3316
}

function {:inline true} {:fieldmap "Mem_T.PendingIRPCnt__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingIRPCnt"} PendingIRPCnt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2364
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingIRPEvent"} PendingIRPEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2372
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingWakeIrp__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingWakeIrp"} PendingWakeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3116
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "PerhapsLowerRTSDpc"} PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1132
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_USER_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShare"} PermitShare__CONFIG_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.PermitShare__SERIAL_DEVICE_EXTENSION"} {:fieldname "PermitShare"} PermitShare__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__CONFIG_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__CONFIG_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__SERIAL_FIRMWARE_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PortIndex"} PortIndex__CONFIG_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.PortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortIndex"} PortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortOnAMultiportCard"} PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 548
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_41"} {:fieldname "Port"} Port_unnamed_tag_41(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_53"} {:fieldname "Port"} Port_unnamed_tag_53(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerD0Event"} PowerD0Event__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2676
}

function {:inline true} {:fieldmap "Mem_T.PowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PowerState"} PowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2216
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ProvCapabilities__SERIAL_COMMPROP"} {:fieldname "ProvCapabilities"} ProvCapabilities__SERIAL_COMMPROP(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PurgeQueue"} PurgeQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "RXHolding"} RXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ReadBufferBase__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadBufferBase"} ReadBufferBase__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.ReadIntervalTimeout__SERIAL_TIMEOUTS"} {:fieldname "ReadIntervalTimeout"} ReadIntervalTimeout__SERIAL_TIMEOUTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ReadQueue"} ReadQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestIntervalTimer"} ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1412
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestTotalTimer"} ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1252
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutConstant"} ReadTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutMultiplier"} ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RegistryPath__SERIAL_GLOBALS"} {:fieldname "RegistryPath"} RegistryPath__SERIAL_GLOBALS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reopen__SERIAL_DEVICE_STATE"} {:fieldname "Reopen"} Reopen__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RetainPowerOnClose__SERIAL_DEVICE_EXTENSION"} {:fieldname "RetainPowerOnClose"} RetainPowerOnClose__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3092
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Revision__IO_RESOURCE_LIST"} {:fieldname "Revision"} Revision__IO_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_USER_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__CONFIG_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.RxFifoTrigger__SERIAL_DEVICE_EXTENSION"} {:fieldname "RxFifoTrigger"} RxFifoTrigger__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.RxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "RxFifo"} RxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SendWaitWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendWaitWake"} SendWaitWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3112
}

function {:inline true} {:fieldmap "Mem_T.SendXoffChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXoffChar"} SendXoffChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.SendXonChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXonChar"} SendXonChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SerialCount"} SerialCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "SerialStartEvent"} SerialStartEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2508
}

function {:inline true} {:fieldmap "Mem_T.ServiceMask__SERIAL_COMMPROP"} {:fieldname "ServiceMask"} ServiceMask__SERIAL_COMMPROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SetPendingDpcEvent"} SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1212
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SettableBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableBaudRate"} SettableBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SettableBaud__SERIAL_COMMPROP"} {:fieldname "SettableBaud"} SettableBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SettableDataBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableDataBits"} SettableDataBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.SettableData__SERIAL_COMMPROP"} {:fieldname "SettableData"} SettableData__SERIAL_COMMPROP(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SettableFlowControl__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableFlowControl"} SettableFlowControl__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SettableParams__SERIAL_COMMPROP"} {:fieldname "SettableParams"} SettableParams__SERIAL_COMMPROP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SettableParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParityCheck"} SettableParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SettableParity__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParity"} SettableParity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SettableStopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableStopBits"} SettableStopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.SettableStopParity__SERIAL_COMMPROP"} {:fieldname "SettableStopParity"} SettableStopParity__SERIAL_COMMPROP(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SharerList"} SharerList__SERIAL_CISR_SW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "ShortIntervalAmount"} ShortIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ShouldBreakOnEntry"} ShouldBreakOnEntry__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SkipNaming"} SkipNaming__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3440
}

function {:inline true} {:fieldmap "Mem_T.SlotNumber__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "SlotNumber"} SlotNumber__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__CONFIG_DATA"} {:fieldname "SpanOfController"} SpanOfController__CONFIG_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__CONFIG_DATA"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.SpecialChars__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpecialChars"} SpecialChars__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "StalledIrpQueue"} StalledIrpQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2800
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "StartTimerLowerRTSDpc"} StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1092
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_42"} {:fieldname "Start"} Start_unnamed_tag_42(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_37"} {:fieldname "State"} State_unnamed_tag_37(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatusOfOpen__SERIAL_CHECK_OPEN"} {:fieldname "StatusOfOpen"} StatusOfOpen__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_LINE_CONTROL"} {:fieldname "StopBits"} StopBits__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "StopBits"} StopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Support16BitMode__SERIAL_WMI_COMM_DATA"} {:fieldname "Support16BitMode"} Support16BitMode__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SupportDTRDSR__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportDTRDSR"} SupportDTRDSR__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportIntervalTimeouts"} SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.SupportParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportParityCheck"} SupportParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.SupportRTSCTS__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportRTSCTS"} SupportRTSCTS__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.SupportXonXoff__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportXonXoff"} SupportXonXoff__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.SupportedBauds__SERIAL_DEVICE_EXTENSION"} {:fieldname "SupportedBauds"} SupportedBauds__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SymbolicLinkName"} SymbolicLinkName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_3"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_3(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__CONFIG_DATA(x: int) : int
{
  x + 168
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_DEVICE_EXTENSION"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3444
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_USER_DATA"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_USER_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.TXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "TXHolding"} TXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__SERIAL_XOFF_COUNTER"} {:fieldname "Timeout"} Timeout__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Timeouts__SERIAL_DEVICE_EXTENSION"} {:fieldname "Timeouts"} Timeouts__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsrContext"} TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsr"} TopLevelOurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "TopLevelSharers"} TopLevelSharers__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.TotalCharsQueued__SERIAL_DEVICE_EXTENSION"} {:fieldname "TotalCharsQueued"} TotalCharsQueued__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalImmediateTimeoutDpc"} TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 972
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalReadTimeoutDpc"} TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 732
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalWriteTimeoutDpc"} TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 812
}

function {:inline true} {:fieldmap "Mem_T.TrController__CONFIG_DATA"} {:fieldname "TrController"} TrController__CONFIG_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TrInterruptStatus__CONFIG_DATA"} {:fieldname "TrInterruptStatus"} TrInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.TrIrql__CONFIG_DATA"} {:fieldname "TrIrql"} TrIrql__CONFIG_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.TrVector__CONFIG_DATA"} {:fieldname "TrVector"} TrVector__CONFIG_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_USER_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__CONFIG_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.TxFifoAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "TxFifoAmount"} TxFifoAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 428
}

function {:inline true} {:fieldmap "Mem_T.TxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "TxFifo"} TxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_20"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_20(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_26"} {:fieldname "Type"} Type_unnamed_tag_26(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_37"} {:fieldname "Type"} Type_unnamed_tag_37(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UartRemovalDetect__SERIAL_DEVICE_EXTENSION"} {:fieldname "UartRemovalDetect"} UartRemovalDetect__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3456
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UartRemovalDetect"} UartRemovalDetect__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapRegisters"} UnMapRegisters__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapStatus"} UnMapStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsablePortMask__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "UsablePortMask"} UsablePortMask__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserAddressSpace"} UserAddressSpace__SERIAL_USER_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserBusNumber"} UserBusNumber__SERIAL_USER_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserClockRate"} UserClockRate__SERIAL_USER_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserIndexed"} UserIndexed__SERIAL_USER_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserInterfaceType"} UserInterfaceType__SERIAL_USER_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserInterruptMode"} UserInterruptMode__SERIAL_USER_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.UserInterruptStatus__SERIAL_USER_DATA"} {:fieldname "UserInterruptStatus"} UserInterruptStatus__SERIAL_USER_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserLevel"} UserLevel__SERIAL_USER_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserPortIndex"} UserPortIndex__SERIAL_USER_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.UserPort__SERIAL_USER_DATA"} {:fieldname "UserPort"} UserPort__SERIAL_USER_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "UserSymbolicLink"} UserSymbolicLink__SERIAL_USER_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UserVector"} UserVector__SERIAL_USER_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.ValidDataMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "ValidDataMask"} ValidDataMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Vector__SERIAL_DEVICE_EXTENSION"} {:fieldname "Vector"} Vector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_43"} {:fieldname "Vector"} Vector_unnamed_tag_43(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version__IO_RESOURCE_LIST"} {:fieldname "Version"} Version__IO_RESOURCE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WmiCommData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiCommData"} WmiCommData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3164
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiHwData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiHwData"} WmiHwData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3264
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WmiIdentifier"} WmiIdentifier__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3152
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiLibInfo"} WmiLibInfo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3120
}

function {:inline true} {:fieldmap "Mem_T.WordLength__SERIAL_LINE_CONTROL"} {:fieldname "WordLength"} WordLength__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WriteQueue"} WriteQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "WriteRequestTotalTimer"} WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1572
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutMultiplier"} WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.XoffChar__SERIAL_CHARS"} {:fieldname "XoffChar"} XoffChar__SERIAL_CHARS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XoffCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffCharacter"} XoffCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountCompleteDpc"} XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1052
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountTimeoutDpc"} XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1012
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "XoffCountTimer"} XoffCountTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1892
}

function {:inline true} {:fieldmap "Mem_T.XoffLimit__SERIAL_HANDFLOW"} {:fieldname "XoffLimit"} XoffLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.XoffXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffXmitThreshold"} XoffXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XonChar__SERIAL_CHARS"} {:fieldname "XonChar"} XonChar__SERIAL_CHARS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XonCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XonCharacter"} XonCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XonLimit__SERIAL_HANDFLOW"} {:fieldname "XonLimit"} XonLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XonXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XonXmitThreshold"} XonXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl2: int;

const {:string " The default interrupt read buffer size is: %d\n------  The XoffLimit is                         : %d\n------  The XonLimit is                          : %d\n------  The pt 8 size is                         : %d\n"} unique strConst__li2bpl295: int;

const {:string "%x irp was already marked as cancelled\n"} unique strConst__li2bpl315: int;

const {:string "%x was the first irp processed by this\n------- invocation of startmask\n"} unique strConst__li2bpl311: int;

const {:string "%x will become the current wait irp\n"} unique strConst__li2bpl314: int;

const {:string "'user registry info - userAddressSpace: %d\n"} unique strConst__li2bpl190: int;

const {:string "'user registry info - userBusNumber: %d\n"} unique strConst__li2bpl189: int;

const {:string "'user registry info - userClockRate: %d\n"} unique strConst__li2bpl188: int;

const {:string "'user registry info - userIndexed: %d\n"} unique strConst__li2bpl195: int;

const {:string "'user registry info - userInterfaceType: %d\n"} unique strConst__li2bpl192: int;

const {:string "'user registry info - userInterruptMode: %d\n"} unique strConst__li2bpl191: int;

const {:string "'user registry info - userInterruptStatus: %x\n"} unique strConst__li2bpl186: int;

const {:string "'user registry info - userLevel: %d\n"} unique strConst__li2bpl194: int;

const {:string "'user registry info - userPort: %x\n"} unique strConst__li2bpl185: int;

const {:string "'user registry info - userPortIndex: %d\n"} unique strConst__li2bpl187: int;

const {:string "'user registry info - userVector: %d\n"} unique strConst__li2bpl193: int;

const {:string "*PNP0501"} unique strConst__li2bpl104: int;

const {:string "*PNP0502"} unique strConst__li2bpl105: int;

const {:string "------- BusRelations Query\n"} unique strConst__li2bpl111: int;

const {:string "------- EjectionRelations Query\n"} unique strConst__li2bpl112: int;

const {:string "------- PowerRelations Query\n"} unique strConst__li2bpl113: int;

const {:string "------- RemovalRelations Query\n"} unique strConst__li2bpl114: int;

const {:string "------- TargetDeviceRelation Query\n"} unique strConst__li2bpl115: int;

const {:string "------- Unknown Query\n"} unique strConst__li2bpl110: int;

const {:string "------- failing; multiport node\n"} unique strConst__li2bpl122: int;

const {:string "<SerialCommError\n"} unique strConst__li2bpl344: int;

const {:string "<SerialCompleteRead(%X)\n"} unique strConst__li2bpl298: int;

const {:string "<SerialCompleteWait\n"} unique strConst__li2bpl319: int;

const {:string "<SerialCompleteWrite\n"} unique strConst__li2bpl236: int;

const {:string "<SerialCompleteXoff\n"} unique strConst__li2bpl247: int;

const {:string "<SerialDisableInterfaces\n"} unique strConst__li2bpl285: int;

const {:string "<SerialFlush (1) %X\n"} unique strConst__li2bpl5: int;

const {:string "<SerialFlush (2) %X\n"} unique strConst__li2bpl6: int;

const {:string "<SerialFlush (3) %X\n"} unique strConst__li2bpl4: int;

const {:string "<SerialGetNextWrite\n"} unique strConst__li2bpl249: int;

const {:string "<SerialGetRegistryKeyValue %X\n"} unique strConst__li2bpl8: int;

const {:string "<SerialInitMultiPort (1) %X\n"} unique strConst__li2bpl260: int;

const {:string "<SerialInitMultiPort (2) %X\n"} unique strConst__li2bpl262: int;

const {:string "<SerialInitMultiPort (3) %X\n"} unique strConst__li2bpl261: int;

const {:string "<SerialKillPendingIrps\n"} unique strConst__li2bpl257: int;

const {:string "<SerialPutRegistryKeyValue %X\n"} unique strConst__li2bpl10: int;

const {:string "<SerialRead (1) %X\n"} unique strConst__li2bpl300: int;

const {:string "<SerialRead (2) %X\n"} unique strConst__li2bpl301: int;

const {:string "<SerialRead (3) %X\n"} unique strConst__li2bpl302: int;

const {:string "<SerialRead (4) %X\n"} unique strConst__li2bpl303: int;

const {:string "<SerialReadTimeout\n"} unique strConst__li2bpl305: int;

const {:string "<SerialReleaseResources\n"} unique strConst__li2bpl266: int;

const {:string "<SerialRemoveDevObj %X\n"} unique strConst__li2bpl255: int;

const {:string "<SerialStartImmediate\n"} unique strConst__li2bpl136: int;

const {:string "<SerialStartRead %X\n"} unique strConst__li2bpl296: int;

const {:string "<SerialStartWrite %X\n"} unique strConst__li2bpl251: int;

const {:string "<SerialTimeoutXoff\n"} unique strConst__li2bpl240: int;

const {:string "<SerialUnstallIrps\n"} unique strConst__li2bpl323: int;

const {:string "<SerialWrite (1) %X\n"} unique strConst__li2bpl242: int;

const {:string "<SerialWrite (2) %X\n"} unique strConst__li2bpl243: int;

const {:string "<SerialWrite (3) %X\n"} unique strConst__li2bpl244: int;

const {:string "<SerialWrite (4) %X\n"} unique strConst__li2bpl245: int;

const {:string "<SerialWriteTimeout\n"} unique strConst__li2bpl238: int;

const {:string ">SerialCommError(%X)\n"} unique strConst__li2bpl345: int;

const {:string ">SerialCompleteRead(%X)\n"} unique strConst__li2bpl299: int;

const {:string ">SerialCompleteWait(%X)\n"} unique strConst__li2bpl320: int;

const {:string ">SerialCompleteWrite(%X)\n"} unique strConst__li2bpl237: int;

const {:string ">SerialCompleteXoff(%X)\n"} unique strConst__li2bpl248: int;

const {:string ">SerialDisableInterfaces(%X, %s)\n"} unique strConst__li2bpl284: int;

const {:string ">SerialFindInitController(%X, %X)\n"} unique strConst__li2bpl280: int;

const {:string ">SerialFlush(%X, %X)\n"} unique strConst__li2bpl3: int;

const {:string ">SerialGetNextWrite(XXX)\n"} unique strConst__li2bpl250: int;

const {:string ">SerialGetRegistryKeyValue(XXX)\n"} unique strConst__li2bpl7: int;

const {:string ">SerialInitMultiPort(%X, %X, %X)\n"} unique strConst__li2bpl259: int;

const {:string ">SerialKillPendingIrps(%X)\n"} unique strConst__li2bpl258: int;

const {:string ">SerialPutRegistryKeyValue(XXX)\n"} unique strConst__li2bpl9: int;

const {:string ">SerialRead(%X, %X)\n"} unique strConst__li2bpl304: int;

const {:string ">SerialReadTimeout(%X)\n"} unique strConst__li2bpl306: int;

const {:string ">SerialReleaseResources(%X)\n"} unique strConst__li2bpl263: int;

const {:string ">SerialRemoveDevObj(%X)\n"} unique strConst__li2bpl254: int;

const {:string ">SerialStartImmediate(%X)\n"} unique strConst__li2bpl135: int;

const {:string ">SerialStartRead(%X)\n"} unique strConst__li2bpl297: int;

const {:string ">SerialStartWrite(%X)\n"} unique strConst__li2bpl252: int;

const {:string ">SerialTimeoutXoff(%X)\n"} unique strConst__li2bpl241: int;

const {:string ">SerialUnstallIrps(%X)\n"} unique strConst__li2bpl321: int;

const {:string ">SerialWrite(%X, %X)\n"} unique strConst__li2bpl246: int;

const {:string ">SerialWriteTimeout(%X)\n"} unique strConst__li2bpl239: int;

const {:string "About to connect to interrupt for port %wZ\n------- address of extension is %x\n"} unique strConst__li2bpl87: int;

const {:string "AddressSpace"} unique strConst__li2bpl173: int;

const {:string "Aha! It is a multiport node\n"} unique strConst__li2bpl277: int;

const {:string "Aha! It is a standalone node or first multi\n"} unique strConst__li2bpl275: int;

const {:string "Already in requested power state\n"} unique strConst__li2bpl219: int;

const {:string "Attempting to init %wZ\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n------- Interrupt Mode is %d\n"} unique strConst__li2bpl281: int;

const {:string "Bad status returned: %x \nfor the value entries of\n%ws\n"} unique strConst__li2bpl177: int;

const {:string "Bad status returned: %x \non enumeration for subkey # %d of %wZ\n"} unique strConst__li2bpl160: int;

const {:string "Becoming sharer: %08X %08X %08X\n"} unique strConst__li2bpl279: int;

const {:string "Bogus port address %ws\n"} unique strConst__li2bpl205: int;

const {:string "Bogus port address %x\n"} unique strConst__li2bpl63: int;

const {:string "Bogus port index %ws\n"} unique strConst__li2bpl197: int;

const {:string "Bogus port index %x\n"} unique strConst__li2bpl47: int;

const {:string "Bogus vector %ws\n"} unique strConst__li2bpl204: int;

const {:string "Bogus vector %x\n"} unique strConst__li2bpl62: int;

const {:string "BreakOnEntry"} unique strConst__li2bpl11: int;

const {:string "Building cmreslist in %x\n"} unique strConst__li2bpl138: int;

const {:string "BusNumber"} unique strConst__li2bpl170: int;

const {:string "BusType"} unique strConst__li2bpl171: int;

const {:string "Calling next driver\n"} unique strConst__li2bpl210: int;

const {:string "Can't filter NULL resources!\n"} unique strConst__li2bpl107: int;

const {:string "Canceling wait for irp %x\n"} unique strConst__li2bpl307: int;

const {:string "Cleaning up failed start\n"} unique strConst__li2bpl80: int;

const {:string "Clearing DTR for %x\n"} unique strConst__li2bpl347: int;

const {:string "Clearing Rts for %x\n"} unique strConst__li2bpl346: int;

const {:string "ClockRate"} unique strConst__li2bpl70: int;

const {:string "Close open count bad for: 0x%x\n"} unique strConst__li2bpl349: int;

const {:string "Close prologue failed for: %x\n"} unique strConst__li2bpl348: int;

const {:string "Com AddressSpace: %x\n"} unique strConst__li2bpl56: int;

const {:string "Com Indexed: %x\n"} unique strConst__li2bpl61: int;

const {:string "Com InterfaceType: %x\n"} unique strConst__li2bpl58: int;

const {:string "Com Interrupt Status: %x\n"} unique strConst__li2bpl73: int;

const {:string "Com InterruptMode: %x\n"} unique strConst__li2bpl57: int;

const {:string "Com OriginalIrql: %x\n"} unique strConst__li2bpl60: int;

const {:string "Com OriginalVector: %x\n"} unique strConst__li2bpl59: int;

const {:string "Com Port BusNumber: %x\n"} unique strConst__li2bpl55: int;

const {:string "Com Port ClockRate: %x\n"} unique strConst__li2bpl54: int;

const {:string "Com Port Index: %x\n"} unique strConst__li2bpl53: int;

const {:string "Com Port address: %x\n"} unique strConst__li2bpl72: int;

const {:string "Comparing it to %wZ\n------- already in the device list\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n"} unique strConst__li2bpl270: int;

const {:string "Complete Irp: %X\n"} unique strConst__li2bpl1: int;

const {:string "Completing wait for irp %x\n"} unique strConst__li2bpl318: int;

const {:string "Configuration error for %wZ\n------- Same multiport - different interrupts\n"} unique strConst__li2bpl276: int;

const {:string "Connected interrupt %08X\n"} unique strConst__li2bpl84: int;

const {:string "Could not map memory for device registers for %wZ\n"} unique strConst__li2bpl294: int;

const {:string "Could not map memory for interrupt status for %wZ\n"} unique strConst__li2bpl291: int;

const {:string "Could not report legacy device - %x\n"} unique strConst__li2bpl159: int;

const {:string "Couldn't allocate buffer for the PnP ID\nfor parameters items in %wZ"} unique strConst__li2bpl166: int;

const {:string "Couldn't allocate buffer for the PnP link\n"} unique strConst__li2bpl153: int;

const {:string "Couldn't allocate buffer for the legacy keys\n"} unique strConst__li2bpl165: int;

const {:string "Couldn't allocate buffer for the symbolic link\nfor parameters items in %wZ"} unique strConst__li2bpl167: int;

const {:string "Couldn't allocate memory basic information\nstructure to enumerate subkeys for %wZ"} unique strConst__li2bpl163: int;

const {:string "Couldn't allocate memory for DeviceName\n"} unique strConst__li2bpl32: int;

const {:string "Couldn't allocate memory for Dos name\n"} unique strConst__li2bpl26: int;

const {:string "Couldn't allocate memory for WMI name\n"} unique strConst__li2bpl27: int;

const {:string "Couldn't allocate memory for buffer\n"} unique strConst__li2bpl41: int;

const {:string "Couldn't allocate memory for device name\n"} unique strConst__li2bpl34: int;

const {:string "Couldn't allocate memory for the\n------  user configuration record\n"} unique strConst__li2bpl90: int;

const {:string "Couldn't allocate string for path\nto parameters for %wZ"} unique strConst__li2bpl164: int;

const {:string "Couldn't allocate table for rtl query\nto parameters for %wZ"} unique strConst__li2bpl168: int;

const {:string "Couldn't connect to interrupt for %wZ\n"} unique strConst__li2bpl89: int;

const {:string "Couldn't create the device map entry\n------- for port %wZ\n"} unique strConst__li2bpl24: int;

const {:string "Couldn't create the symbolic link\nfor port %wZ\n"} unique strConst__li2bpl25: int;

const {:string "Couldn't delete value entry %wZ\n"} unique strConst__li2bpl134: int;

const {:string "Couldn't mark multiport\n"} unique strConst__li2bpl143: int;

const {:string "Couldn't migrate ClockRate\n"} unique strConst__li2bpl146: int;

const {:string "Couldn't migrate DisablePort\n"} unique strConst__li2bpl148: int;

const {:string "Couldn't migrate ForceFifoEnable\n"} unique strConst__li2bpl149: int;

const {:string "Couldn't migrate Indexed\n"} unique strConst__li2bpl147: int;

const {:string "Couldn't migrate MaskInverted\n"} unique strConst__li2bpl152: int;

const {:string "Couldn't migrate PortIndex\n"} unique strConst__li2bpl145: int;

const {:string "Couldn't migrate PortName\n"} unique strConst__li2bpl142: int;

const {:string "Couldn't migrate RxFIFO\n"} unique strConst__li2bpl150: int;

const {:string "Couldn't migrate TxFIFO\n"} unique strConst__li2bpl151: int;

const {:string "Couldn't open the drivers Parameters key %wZ\n"} unique strConst__li2bpl162: int;

const {:string "Couldn't register class association\nfor port %wZ\n"} unique strConst__li2bpl21: int;

const {:string "Couldn't set class association\n for port %wZ\n"} unique strConst__li2bpl22: int;

const {:string "Couldn't write registry valuefor LegacyDiscovered in %wZ\n"} unique strConst__li2bpl158: int;

const {:string "Count: %x  Addr: 0x%x\n"} unique strConst__li2bpl350: int;

const {:string "DPC's drained: %x\n"} unique strConst__li2bpl352: int;

const {:string "DebugLevel"} unique strConst__li2bpl12: int;

const {:string "Deleting Link %wZ\n"} unique strConst__li2bpl133: int;

const {:string "DevicePowerState\n"} unique strConst__li2bpl218: int;

const {:string "DisablePort"} unique strConst__li2bpl65: int;

const {:string "Dispatch entry for: %x\n"} unique strConst__li2bpl0: int;

const {:string "DoesPortExist test failed for %wZ\n"} unique strConst__li2bpl292: int;

const {:string "DosDevices"} unique strConst__li2bpl38: int;

const {:string "DosName is %wZ\n"} unique strConst__li2bpl20: int;

const {:string "Draining DPC's: %x\n"} unique strConst__li2bpl353: int;

const {:string "EnablePowerManagement"} unique strConst__li2bpl92: int;

const {:string "Enter SerialAddDevice with PPdo 0x%x\n"} unique strConst__li2bpl76: int;

const {:string "Enter SerialBuildRequirementsList\n"} unique strConst__li2bpl182: int;

const {:string "Enter SerialBuildResourceList\n"} unique strConst__li2bpl137: int;

const {:string "Enter SerialEnumerateLegacy\n"} unique strConst__li2bpl154: int;

const {:string "Enter SerialIsUserDataValid\n"} unique strConst__li2bpl184: int;

const {:string "Enter SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl140: int;

const {:string "Enter SerialRestoreDeviceState\n"} unique strConst__li2bpl226: int;

const {:string "Enter SerialTranslateResourceList\n"} unique strConst__li2bpl178: int;

const {:string "EnterSerialCreateDevObj\n"} unique strConst__li2bpl28: int;

const {:string "Entering SerialSaveDeviceState\n"} unique strConst__li2bpl223: int;

const {:string "Error in config record for %wZ\n------  registers wrap around physical memory\n"} unique strConst__li2bpl267: int;

const {:string "Error in config record for %wZ\n------  status wraps around physical memory\n"} unique strConst__li2bpl268: int;

const {:string "Error in config record for %wZ\n------- Interrupt status overlaps regular registers\n"} unique strConst__li2bpl269: int;

const {:string "Error in config record for %wZ\n------- Register address overlaps with\n------- previous serial device\n"} unique strConst__li2bpl271: int;

const {:string "Error in config record for %wZ\n------- register address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl274: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial device registers\n"} unique strConst__li2bpl272: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl273: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl332: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl330: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl336: int;

const {:string "ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl325: int;

const {:string "ExAllocatePoolWithTag should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl333: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl329: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl341: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl334: int;

const {:string "ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl331: int;

const {:string "ExAllocatePoolWithTagPriority should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl328: int;

const {:string "External Naming Failed - Status %x\n"} unique strConst__li2bpl86: int;

const {:string "FALSE"} unique strConst__li2bpl282: int;

const {:string "Fifo's detected at port address: %x\n"} unique strConst__li2bpl286: int;

const {:string "ForceFifoEnable"} unique strConst__li2bpl13: int;

const {:string "Getting PortName/Identifier failed - %x\n"} unique strConst__li2bpl40: int;

const {:string "Globally sharing interrupt for device %x\n"} unique strConst__li2bpl128: int;

const {:string "Going to power state D0\n"} unique strConst__li2bpl220: int;

const {:string "Going to power state D3\n"} unique strConst__li2bpl221: int;

const {:string "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl93: int;

const {:string "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n"} unique strConst__li2bpl94: int;

const {:string "Got IRP_MN_EJECT Irp\n"} unique strConst__li2bpl100: int;

const {:string "Got IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl123: int;

const {:string "Got IRP_MN_POWER_SEQUENCE Irp\n"} unique strConst__li2bpl214: int;

const {:string "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n"} unique strConst__li2bpl108: int;

const {:string "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n"} unique strConst__li2bpl95: int;

const {:string "Got IRP_MN_QUERY_ID Irp\n"} unique strConst__li2bpl129: int;

const {:string "Got IRP_MN_QUERY_INTERFACE Irp\n"} unique strConst__li2bpl96: int;

const {:string "Got IRP_MN_QUERY_POWER Irp\n"} unique strConst__li2bpl216: int;

const {:string "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl119: int;

const {:string "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl97: int;

const {:string "Got IRP_MN_QUERY_STOP_DEVICE Irp\n"} unique strConst__li2bpl116: int;

const {:string "Got IRP_MN_READ_CONFIG Irp\n"} unique strConst__li2bpl98: int;

const {:string "Got IRP_MN_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl118: int;

const {:string "Got IRP_MN_SET_LOCK Irp\n"} unique strConst__li2bpl101: int;

const {:string "Got IRP_MN_SET_POWER Irp\n"} unique strConst__li2bpl215: int;

const {:string "Got IRP_MN_START_DEVICE Irp\n"} unique strConst__li2bpl120: int;

const {:string "Got IRP_MN_STOP_DEVICE Irp\n"} unique strConst__li2bpl117: int;

const {:string "Got IRP_MN_SURPRISE_REMOVAL Irp\n"} unique strConst__li2bpl102: int;

const {:string "Got IRP_MN_WAIT_WAKE Irp\n"} unique strConst__li2bpl213: int;

const {:string "Got IRP_MN_WRITE_CONFIG Irp\n"} unique strConst__li2bpl99: int;

const {:string "ID is sole ID\n"} unique strConst__li2bpl106: int;

const {:string "ISR map failed attempt was \n------- Interface:  %x\n------- Bus Number: %x\n------- IntStatus:  %x\n------- AddrSpace:  %x\n------- PhysAddr:   %x\n"} unique strConst__li2bpl180: int;

const {:string "ISR map was %x\n"} unique strConst__li2bpl179: int;

const {:string "Identifier"} unique strConst__li2bpl36: int;

const {:string "In Ioctl processing for set mask\n"} unique strConst__li2bpl232: int;

const {:string "In Ioctl processing for wait mask\n"} unique strConst__li2bpl229: int;

const {:string "In SerialCancelWait\n"} unique strConst__li2bpl308: int;

const {:string "In SerialClose\n"} unique strConst__li2bpl351: int;

const {:string "In SerialCompleteWait\n"} unique strConst__li2bpl317: int;

const {:string "In SerialCreateOpen\n"} unique strConst__li2bpl354: int;

const {:string "In SerialGotoPowerState\n"} unique strConst__li2bpl206: int;

const {:string "In SerialSetPowerD0\n"} unique strConst__li2bpl208: int;

const {:string "In SerialSetPowerD3\n"} unique strConst__li2bpl225: int;

const {:string "In SerialStartMask\n"} unique strConst__li2bpl316: int;

const {:string "In SerialUndoExternalNaming for\nextension: %x of port %wZ\n"} unique strConst__li2bpl132: int;

const {:string "In SerialUnload\n"} unique strConst__li2bpl256: int;

const {:string "Indexed"} unique strConst__li2bpl69: int;

const {:string "Initializing for configuration record of %wZ\n"} unique strConst__li2bpl288: int;

const {:string "Interrupt"} unique strConst__li2bpl74: int;

const {:string "Interrupt Status"} unique strConst__li2bpl176: int;

const {:string "InterruptLevel"} unique strConst__li2bpl174: int;

const {:string "InterruptMode"} unique strConst__li2bpl172: int;

const {:string "InterruptStatus"} unique strConst__li2bpl169: int;

const {:string "Invalid Bus type %ws\n"} unique strConst__li2bpl199: int;

const {:string "Invalid Bus type %x\n"} unique strConst__li2bpl50: int;

const {:string "Invalid size fo the buffer %d\n"} unique strConst__li2bpl233: int;

const {:string "Invalid size for the buffer %d\n"} unique strConst__li2bpl231: int;

const {:string "IoConnectInterrupt Args:\nInterrupt           %x\nOurIsr              %x\nOurIsrContext       %x\nNULL\nVector              %x\nIrql                %x\nInterruptMode       %x\nInterruptShareable  %x\nProcessorAffinity   %x\nFALSE\n"} unique strConst__li2bpl88: int;

const {:string "IoOpenDeviceRegistryKey failed - %x \n"} unique strConst__li2bpl64: int;

const {:string "Kernel debugger is using port at address %X\n"} unique strConst__li2bpl289: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix\n"} unique strConst__li2bpl52: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix,%ws\n"} unique strConst__li2bpl200: int;

const {:string "Leave (1) SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl141: int;

const {:string "Leave (2) SerialMigrateLegacyRegistry\n"} unique strConst__li2bpl144: int;

const {:string "Leave SerialAddDevice\n"} unique strConst__li2bpl79: int;

const {:string "Leave SerialBuildRequirementsList\n"} unique strConst__li2bpl183: int;

const {:string "Leave SerialBuildResourceList\n"} unique strConst__li2bpl139: int;

const {:string "Leave SerialCreateDevObj\n"} unique strConst__li2bpl31: int;

const {:string "Leave SerialEnumerateLegacy\n"} unique strConst__li2bpl161: int;

const {:string "Leave SerialIsUserDataValid\n"} unique strConst__li2bpl196: int;

const {:string "Leaving SerialGotoPowerState\n"} unique strConst__li2bpl207: int;

const {:string "Leaving SerialSaveDeviceState\n"} unique strConst__li2bpl224: int;

const {:string "Leaving SerialSetPowerD0\n"} unique strConst__li2bpl212: int;

const {:string "LegacyDiscovered"} unique strConst__li2bpl157: int;

const {:string "List has %x lists (including alternatives)\n"} unique strConst__li2bpl124: int;

const {:string "List has %x resources in it\n"} unique strConst__li2bpl125: int;

const {:string "LogFifo"} unique strConst__li2bpl17: int;

const {:string "Mapping power capabilities\n"} unique strConst__li2bpl109: int;

const {:string "MaskInverted"} unique strConst__li2bpl66: int;

const {:string "Matched to %x\n"} unique strConst__li2bpl278: int;

const {:string "MultiportDevice"} unique strConst__li2bpl45: int;

const {:string "Not doing external naming -- state is %x\n"} unique strConst__li2bpl85: int;

const {:string "Overflowed the enumerate buffer\nfor subkey #%d of %wZ\n"} unique strConst__li2bpl156: int;

const {:string "PDevExt: %x\n"} unique strConst__li2bpl227: int;

const {:string "Parameters"} unique strConst__li2bpl155: int;

const {:string "Perhaps another mask irp was found in the queue\n------- %x/%x <- values should be the same\n"} unique strConst__li2bpl312: int;

const {:string "PermitShare"} unique strConst__li2bpl16: int;

const {:string "PnPDeviceID"} unique strConst__li2bpl175: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %ws\n"} unique strConst__li2bpl202: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %x\n"} unique strConst__li2bpl49: int;

const {:string "Port map failed attempt was \n------- Interface:  %x\n------- Bus Number: %x\n------- userPort:  %x\n------- AddrSpace:  %x\n------- PhysAddr:   %x\n"} unique strConst__li2bpl181: int;

const {:string "PortAddress"} unique strConst__li2bpl75: int;

const {:string "PortIndex"} unique strConst__li2bpl68: int;

const {:string "PortName"} unique strConst__li2bpl35: int;

const {:string "Read name %wZ\n"} unique strConst__li2bpl39: int;

const {:string "Release - disconnecting interrupt %X\n"} unique strConst__li2bpl264: int;

const {:string "Release - freeing multi context\n"} unique strConst__li2bpl265: int;

const {:string "Reopening device\n"} unique strConst__li2bpl228: int;

const {:string "RxFIFO"} unique strConst__li2bpl14: int;

const {:string "SERIAL - %x is a SETMASK irp\n"} unique strConst__li2bpl310: int;

const {:string "SERIALCOMM"} unique strConst__li2bpl23: int;

const {:string "STARTMASK - CurrentMaskIrp: %x\n"} unique strConst__li2bpl309: int;

const {:string "Serial driver will not load port\n"} unique strConst__li2bpl290: int;

const {:string "SerialAddDevice - error creating new devobj [%#08lx]\n"} unique strConst__li2bpl78: int;

const {:string "SerialAddDevice: Create device failed - %x \n"} unique strConst__li2bpl30: int;

const {:string "SerialAddDevice: Enumeration request, returning NO_MORE_ENTRIES\n"} unique strConst__li2bpl77: int;

const {:string "SerialCreateDevObj Error, Cleaning up\n"} unique strConst__li2bpl33: int;

const {:string "SerialFinishStartDevice got NULL pDevExt\n"} unique strConst__li2bpl82: int;

const {:string "SerialIoResourcesIndex"} unique strConst__li2bpl46: int;

const {:string "SerialRelinquishPowerPolicy"} unique strConst__li2bpl91: int;

const {:string "SerialSkipExternalNaming"} unique strConst__li2bpl19: int;

const {:string "SetPowerD0 has IRP %x\n"} unique strConst__li2bpl209: int;

const {:string "Share System Interrupt"} unique strConst__li2bpl67: int;

const {:string "Sharing I/O port for device %x\n"} unique strConst__li2bpl126: int;

const {:string "Sharing interrupt for device %x\n"} unique strConst__li2bpl127: int;

const {:string "Starting or queuing set mask irp %x\n"} unique strConst__li2bpl234: int;

const {:string "Starting or queuing wait mask irp%x\n"} unique strConst__li2bpl230: int;

const {:string "SystemPowerState\n"} unique strConst__li2bpl222: int;

const {:string "TL16C550C Auto Flow Control"} unique strConst__li2bpl71: int;

const {:string "TR resource pointer is %x\n"} unique strConst__li2bpl44: int;

const {:string "TRUE"} unique strConst__li2bpl283: int;

const {:string "The number of bytes in the extension is: %d\n"} unique strConst__li2bpl287: int;

const {:string "There aren't that many of those\nbusses on this system,%ws\n"} unique strConst__li2bpl201: int;

const {:string "There aren't that many of those\nbusses on this system,%x\n"} unique strConst__li2bpl51: int;

const {:string "TxFIFO"} unique strConst__li2bpl15: int;

const {:string "UNKNOWN PowerState\n"} unique strConst__li2bpl217: int;

const {:string "UartRemovalDetect"} unique strConst__li2bpl18: int;

const {:string "Unknown mask %x\n"} unique strConst__li2bpl235: int;

const {:string "Unstalling Irp 0x%x with 0x%x\n"} unique strConst__li2bpl322: int;

const {:string "WaitIrp is invalid\n------- IsrWaitMask: %x\n------- CurrentWaitIrp: %x\n"} unique strConst__li2bpl313: int;

const {:string "Waiting for next driver\n"} unique strConst__li2bpl211: int;

const {:string "\\"} unique strConst__li2bpl37: int;

const {:string "\\Device\\Serial"} unique strConst__li2bpl29: int;

const {:string "bogus value for %ws\n"} unique strConst__li2bpl203: int;

const {:string "callee"} unique strConst__li2bpl253: int;

const {:string "disabled port %wZ as requested in configuration\n"} unique strConst__li2bpl293: int;

const {:string "entering SerialGetPortInfo\n"} unique strConst__li2bpl42: int;

const {:string "entering SerialStartDevice\n"} unique strConst__li2bpl130: int;

const {:string "error with IoCallDriver %x\n"} unique strConst__li2bpl131: int;

const {:string "failing; device open\n"} unique strConst__li2bpl121: int;

const {:string "for device %x\n"} unique strConst__li2bpl103: int;

const {:string "leaving SerialFinishStartDevice\n"} unique strConst__li2bpl81: int;

const {:string "pDevExt: Interrupt %x\n-------               OurIsr %x\n"} unique strConst__li2bpl83: int;

const {:string "port index to large %ws\n"} unique strConst__li2bpl198: int;

const {:string "port index to large %x\n"} unique strConst__li2bpl48: int;

const {:string "resource pointer is %x\n"} unique strConst__li2bpl43: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl340: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl327: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl337: int;

const {:string "sdv_ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl338: int;

const {:string "sdv_ExAllocatePoolWithQuota should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl339: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType."} unique strConst__li2bpl335: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType."} unique strConst__li2bpl326: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool."} unique strConst__li2bpl324: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned."} unique strConst__li2bpl342: int;

const {:string "sdv_ExAllocatePoolWithQuotaTag should only be called at IRQL <= DISPATCH_LEVEL."} unique strConst__li2bpl343: int;

const {:allocated} li2bplFunctionConstant112: int;

axiom li2bplFunctionConstant112 == 112;

const {:allocated} li2bplFunctionConstant123: int;

axiom li2bplFunctionConstant123 == 123;

const {:allocated} li2bplFunctionConstant124: int;

axiom li2bplFunctionConstant124 == 124;

const {:allocated} li2bplFunctionConstant135: int;

axiom li2bplFunctionConstant135 == 135;

const {:allocated} li2bplFunctionConstant136: int;

axiom li2bplFunctionConstant136 == 136;

const {:allocated} li2bplFunctionConstant137: int;

axiom li2bplFunctionConstant137 == 137;

const {:allocated} li2bplFunctionConstant138: int;

axiom li2bplFunctionConstant138 == 138;

const {:allocated} li2bplFunctionConstant139: int;

axiom li2bplFunctionConstant139 == 139;

const {:allocated} li2bplFunctionConstant140: int;

axiom li2bplFunctionConstant140 == 140;

const {:allocated} li2bplFunctionConstant142: int;

axiom li2bplFunctionConstant142 == 142;

const {:allocated} li2bplFunctionConstant143: int;

axiom li2bplFunctionConstant143 == 143;

const {:allocated} li2bplFunctionConstant145: int;

axiom li2bplFunctionConstant145 == 145;

const {:allocated} li2bplFunctionConstant148: int;

axiom li2bplFunctionConstant148 == 148;

const {:allocated} li2bplFunctionConstant166: int;

axiom li2bplFunctionConstant166 == 166;

const {:allocated} li2bplFunctionConstant168: int;

axiom li2bplFunctionConstant168 == 168;

const {:allocated} li2bplFunctionConstant174: int;

axiom li2bplFunctionConstant174 == 174;

const {:allocated} li2bplFunctionConstant179: int;

axiom li2bplFunctionConstant179 == 179;

const {:allocated} li2bplFunctionConstant195: int;

axiom li2bplFunctionConstant195 == 195;

const {:allocated} li2bplFunctionConstant196: int;

axiom li2bplFunctionConstant196 == 196;

const {:allocated} li2bplFunctionConstant197: int;

axiom li2bplFunctionConstant197 == 197;

const {:allocated} li2bplFunctionConstant198: int;

axiom li2bplFunctionConstant198 == 198;

const {:allocated} li2bplFunctionConstant199: int;

axiom li2bplFunctionConstant199 == 199;

const {:allocated} li2bplFunctionConstant200: int;

axiom li2bplFunctionConstant200 == 200;

const {:allocated} li2bplFunctionConstant211: int;

axiom li2bplFunctionConstant211 == 211;

const {:allocated} li2bplFunctionConstant212: int;

axiom li2bplFunctionConstant212 == 212;

const {:allocated} li2bplFunctionConstant213: int;

axiom li2bplFunctionConstant213 == 213;

const {:allocated} li2bplFunctionConstant214: int;

axiom li2bplFunctionConstant214 == 214;

const {:allocated} li2bplFunctionConstant215: int;

axiom li2bplFunctionConstant215 == 215;

const {:allocated} li2bplFunctionConstant216: int;

axiom li2bplFunctionConstant216 == 216;

const {:allocated} li2bplFunctionConstant217: int;

axiom li2bplFunctionConstant217 == 217;

const {:allocated} li2bplFunctionConstant218: int;

axiom li2bplFunctionConstant218 == 218;

const {:allocated} li2bplFunctionConstant219: int;

axiom li2bplFunctionConstant219 == 219;

const {:allocated} li2bplFunctionConstant220: int;

axiom li2bplFunctionConstant220 == 220;

const {:allocated} li2bplFunctionConstant221: int;

axiom li2bplFunctionConstant221 == 221;

const {:allocated} li2bplFunctionConstant222: int;

axiom li2bplFunctionConstant222 == 222;

const {:allocated} li2bplFunctionConstant223: int;

axiom li2bplFunctionConstant223 == 223;

const {:allocated} li2bplFunctionConstant224: int;

axiom li2bplFunctionConstant224 == 224;

const {:allocated} li2bplFunctionConstant237: int;

axiom li2bplFunctionConstant237 == 237;

const {:allocated} li2bplFunctionConstant239: int;

axiom li2bplFunctionConstant239 == 239;

const {:allocated} li2bplFunctionConstant240: int;

axiom li2bplFunctionConstant240 == 240;

const {:allocated} li2bplFunctionConstant244: int;

axiom li2bplFunctionConstant244 == 244;

const {:allocated} li2bplFunctionConstant245: int;

axiom li2bplFunctionConstant245 == 245;

const {:allocated} li2bplFunctionConstant246: int;

axiom li2bplFunctionConstant246 == 246;

const {:allocated} li2bplFunctionConstant247: int;

axiom li2bplFunctionConstant247 == 247;

const {:allocated} li2bplFunctionConstant248: int;

axiom li2bplFunctionConstant248 == 248;

const {:allocated} li2bplFunctionConstant249: int;

axiom li2bplFunctionConstant249 == 249;

const {:allocated} li2bplFunctionConstant250: int;

axiom li2bplFunctionConstant250 == 250;

const {:allocated} li2bplFunctionConstant251: int;

axiom li2bplFunctionConstant251 == 251;

const {:allocated} li2bplFunctionConstant252: int;

axiom li2bplFunctionConstant252 == 252;

const {:allocated} li2bplFunctionConstant254: int;

axiom li2bplFunctionConstant254 == 254;

const {:allocated} li2bplFunctionConstant300: int;

axiom li2bplFunctionConstant300 == 300;

const {:allocated} li2bplFunctionConstant318: int;

axiom li2bplFunctionConstant318 == 318;

const {:allocated} li2bplFunctionConstant322: int;

axiom li2bplFunctionConstant322 == 322;

const {:allocated} li2bplFunctionConstant323: int;

axiom li2bplFunctionConstant323 == 323;

const {:allocated} li2bplFunctionConstant328: int;

axiom li2bplFunctionConstant328 == 328;

const {:allocated} li2bplFunctionConstant351: int;

axiom li2bplFunctionConstant351 == 351;

const {:allocated} li2bplFunctionConstant352: int;

axiom li2bplFunctionConstant352 == 352;

const {:allocated} li2bplFunctionConstant353: int;

axiom li2bplFunctionConstant353 == 353;

const {:allocated} li2bplFunctionConstant354: int;

axiom li2bplFunctionConstant354 == 354;

const {:allocated} li2bplFunctionConstant355: int;

axiom li2bplFunctionConstant355 == 355;

const {:allocated} li2bplFunctionConstant356: int;

axiom li2bplFunctionConstant356 == 356;

const {:allocated} li2bplFunctionConstant369: int;

axiom li2bplFunctionConstant369 == 369;

const {:allocated} li2bplFunctionConstant370: int;

axiom li2bplFunctionConstant370 == 370;

const {:allocated} li2bplFunctionConstant371: int;

axiom li2bplFunctionConstant371 == 371;

const {:allocated} li2bplFunctionConstant372: int;

axiom li2bplFunctionConstant372 == 372;

const {:allocated} li2bplFunctionConstant373: int;

axiom li2bplFunctionConstant373 == 373;

const {:allocated} li2bplFunctionConstant374: int;

axiom li2bplFunctionConstant374 == 374;

const {:allocated} li2bplFunctionConstant375: int;

axiom li2bplFunctionConstant375 == 375;

const {:allocated} li2bplFunctionConstant376: int;

axiom li2bplFunctionConstant376 == 376;

const {:allocated} li2bplFunctionConstant377: int;

axiom li2bplFunctionConstant377 == 377;

const {:allocated} li2bplFunctionConstant383: int;

axiom li2bplFunctionConstant383 == 383;

const {:allocated} li2bplFunctionConstant387: int;

axiom li2bplFunctionConstant387 == 387;

const {:allocated} li2bplFunctionConstant390: int;

axiom li2bplFunctionConstant390 == 390;

const {:allocated} li2bplFunctionConstant391: int;

axiom li2bplFunctionConstant391 == 391;

const {:allocated} li2bplFunctionConstant392: int;

axiom li2bplFunctionConstant392 == 392;

const {:allocated} li2bplFunctionConstant398: int;

axiom li2bplFunctionConstant398 == 398;

const {:allocated} li2bplFunctionConstant410: int;

axiom li2bplFunctionConstant410 == 410;

const {:allocated} li2bplFunctionConstant411: int;

axiom li2bplFunctionConstant411 == 411;

const {:allocated} li2bplFunctionConstant412: int;

axiom li2bplFunctionConstant412 == 412;

const {:allocated} li2bplFunctionConstant413: int;

axiom li2bplFunctionConstant413 == 413;

const {:allocated} li2bplFunctionConstant414: int;

axiom li2bplFunctionConstant414 == 414;

const {:allocated} li2bplFunctionConstant415: int;

axiom li2bplFunctionConstant415 == 415;

const {:allocated} li2bplFunctionConstant416: int;

axiom li2bplFunctionConstant416 == 416;

const {:allocated} li2bplFunctionConstant417: int;

axiom li2bplFunctionConstant417 == 417;

const {:allocated} li2bplFunctionConstant418: int;

axiom li2bplFunctionConstant418 == 418;

const {:allocated} li2bplFunctionConstant419: int;

axiom li2bplFunctionConstant419 == 419;

const {:allocated} li2bplFunctionConstant420: int;

axiom li2bplFunctionConstant420 == 420;

const {:allocated} li2bplFunctionConstant421: int;

axiom li2bplFunctionConstant421 == 421;

const {:allocated} li2bplFunctionConstant422: int;

axiom li2bplFunctionConstant422 == 422;

const {:allocated} li2bplFunctionConstant423: int;

axiom li2bplFunctionConstant423 == 423;

const {:allocated} li2bplFunctionConstant424: int;

axiom li2bplFunctionConstant424 == 424;

const {:allocated} li2bplFunctionConstant425: int;

axiom li2bplFunctionConstant425 == 425;

const {:allocated} li2bplFunctionConstant426: int;

axiom li2bplFunctionConstant426 == 426;

const {:allocated} li2bplFunctionConstant427: int;

axiom li2bplFunctionConstant427 == 427;

const {:allocated} li2bplFunctionConstant428: int;

axiom li2bplFunctionConstant428 == 428;

const {:allocated} li2bplFunctionConstant468: int;

axiom li2bplFunctionConstant468 == 468;

const {:allocated} li2bplFunctionConstant469: int;

axiom li2bplFunctionConstant469 == 469;

const {:allocated} li2bplFunctionConstant470: int;

axiom li2bplFunctionConstant470 == 470;

const {:allocated} li2bplFunctionConstant484: int;

axiom li2bplFunctionConstant484 == 484;

const {:allocated} li2bplFunctionConstant543: int;

axiom li2bplFunctionConstant543 == 543;

const {:allocated} li2bplFunctionConstant545: int;

axiom li2bplFunctionConstant545 == 545;

const {:allocated} li2bplFunctionConstant548: int;

axiom li2bplFunctionConstant548 == 548;

implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_27: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_1304: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_1305: int;
  var {:pointer} sdv_931: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:pointer} sdv_933: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_1308: int;
  var {:pointer} Extension_27: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_721: int;
  var vslice_dummy_var_722: int;
  var vslice_dummy_var_723: int;
  var vslice_dummy_var_724: int;
  var vslice_dummy_var_725: int;
  var vslice_dummy_var_1036: int;
  var vslice_dummy_var_1037: int;

  anon0:
    call {:si_unique_call 2879} newIrp_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2880} vslice_dummy_var_721 := __HAVOC_malloc(4);
    Extension_27 := actual_Extension_27;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2881} Tmp_1308 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_22 := RefType;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_1036;
    call {:si_unique_call 2882} sdv_931 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1036);
    assume {:nonnull} sdv_931 != 0;
    assume sdv_931 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_931)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_21], BNOT(s_p_e_c_i_a_l_22));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2883} vslice_dummy_var_722 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2884} SerialRundownIrpRefs(CurrentOpIrp_3, IntervalTimer, TotalTimer, Extension_27);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_1037;
    call {:si_unique_call 2885} sdv_933 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1037);
    assume {:nonnull} sdv_933 != 0;
    assume sdv_933 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc Tmp_1305;
    assume {:nonnull} Tmp_1305 != 0;
    assume Tmp_1305 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1305))] := StatusToUse;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc Tmp_1304;
    assume {:nonnull} Tmp_1304 != 0;
    assume Tmp_1304 > 0;
    goto L28;

  L28:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2886} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_1308 := strConst__li2bpl1;
    call {:si_unique_call 2887} vslice_dummy_var_725 := SerialDbgPrintEx(9, Tmp_1308);
    call {:si_unique_call 2888} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2889} SerialIRPEpilogue(Extension_27);
    goto L1;

  L1:
    return;

  anon18_Then:
    call {:si_unique_call 2890} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant354;
    call {:si_unique_call 2891} SerialGetNextImmediate(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  L37:
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant136;
    call {:si_unique_call 2892} vslice_dummy_var_724 := SerialStartRead(Extension_27);
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant212;
    call {:si_unique_call 2893} vslice_dummy_var_723 := SerialStartWrite#0(Extension_27);
    goto L1;

  anon20_Then:
    goto L1;

  anon22_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant140;
    call {:si_unique_call 2894} SerialGetNextIrp(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  anon19_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant216;
    call {:si_unique_call 2895} SerialGetNextWrite(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  anon24_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon17_Then:
    call {:si_unique_call 2896} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon23_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_27: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_27: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_1304: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_1305: int;
  var {:pointer} sdv_931: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:pointer} sdv_933: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_1308: int;
  var {:pointer} Extension_27: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_726: int;
  var vslice_dummy_var_727: int;
  var vslice_dummy_var_728: int;
  var vslice_dummy_var_729: int;
  var vslice_dummy_var_730: int;
  var vslice_dummy_var_1038: int;
  var vslice_dummy_var_1039: int;

  anon0:
    call {:si_unique_call 2897} newIrp_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2898} vslice_dummy_var_726 := __HAVOC_malloc(4);
    Extension_27 := actual_Extension_27;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2899} Tmp_1308 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_22 := RefType;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_1038;
    call {:si_unique_call 2900} sdv_931 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1038);
    assume {:nonnull} sdv_931 != 0;
    assume sdv_931 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_931)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_21], BNOT(s_p_e_c_i_a_l_22));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2901} vslice_dummy_var_727 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2902} SerialRundownIrpRefs(CurrentOpIrp_3, IntervalTimer, TotalTimer, Extension_27);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc vslice_dummy_var_1039;
    call {:si_unique_call 2903} sdv_933 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1039);
    assume {:nonnull} sdv_933 != 0;
    assume sdv_933 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc Tmp_1305;
    assume {:nonnull} Tmp_1305 != 0;
    assume Tmp_1305 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_1305))] := StatusToUse;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc Tmp_1304;
    assume {:nonnull} Tmp_1304 != 0;
    assume Tmp_1304 > 0;
    goto L28;

  L28:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    havoc oldIrp;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2904} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_1308 := strConst__li2bpl1;
    call {:si_unique_call 2905} vslice_dummy_var_730 := SerialDbgPrintEx(9, Tmp_1308);
    call {:si_unique_call 2906} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2907} SerialIRPEpilogue(Extension_27);
    goto L1;

  L1:
    return;

  anon18_Then:
    call {:si_unique_call 2908} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant354;
    call {:si_unique_call 2909} SerialGetNextImmediate(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  L37:
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant136;
    call {:si_unique_call 2910} vslice_dummy_var_729 := SerialStartRead(Extension_27);
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant212;
    call {:si_unique_call 2911} vslice_dummy_var_728 := SerialStartWrite#1(Extension_27);
    goto L1;

  anon20_Then:
    goto L1;

  anon22_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant140;
    call {:si_unique_call 2912} SerialGetNextIrp(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  anon19_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant216;
    call {:si_unique_call 2913} SerialGetNextWrite(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_27);
    goto L37;

  anon24_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon17_Then:
    call {:si_unique_call 2914} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon23_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_27: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_16: int) returns (Tmp_766: int)
{
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_767: int;
  var {:scalar} FirstStatus: int;
  var {:scalar} TotalTime_1: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_768: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} IrpSp_2: int;
  var {:pointer} sdv_573: int;
  var {:pointer} sdv_574: int;
  var {:scalar} OldIrql_11: int;
  var {:pointer} sdv_575: int;
  var {:pointer} NewIrp_3: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} sdv_576: int;
  var {:pointer} sdv_577: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var {:scalar} Tmp_772: int;
  var {:scalar} s_p_e_c_i_a_l_13: int;
  var {:scalar} Timeouts_1: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} Tmp_773: int;
  var {:pointer} Extension_16: int;
  var vslice_dummy_var_731: int;
  var vslice_dummy_var_732: int;
  var vslice_dummy_var_733: int;
  var vslice_dummy_var_734: int;
  var vslice_dummy_var_735: int;
  var vslice_dummy_var_1040: int;
  var vslice_dummy_var_1041: int;
  var vslice_dummy_var_1042: int;
  var vslice_dummy_var_1043: int;
  var vslice_dummy_var_1044: int;
  var vslice_dummy_var_1045: int;
  var vslice_dummy_var_1046: int;

  anon0:
    call {:si_unique_call 2915} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2916} NewIrp_3 := __HAVOC_malloc(4);
    call {:si_unique_call 2917} Timeouts_1 := __HAVOC_malloc(20);
    Extension_16 := actual_Extension_16;
    call {:si_unique_call 2918} Tmp_767 := __HAVOC_malloc(92);
    call {:si_unique_call 2919} Tmp_771 := __HAVOC_malloc(88);
    SetFirstStatus := 0;
    Tmp_767 := strConst__li2bpl252;
    call {:si_unique_call 2920} vslice_dummy_var_734 := SerialDbgPrintEx(2, Tmp_767);
    goto L14;

  L14:
    call {:si_unique_call 2921} FirstStatus, SetFirstStatus, Tmp_768, Tmp_770, UseATimer_1, IrpSp_2, sdv_574, OldIrql_11, sdv_577, Tmp_772, Tmp_773 := SerialStartWrite#0_loop_L14(FirstStatus, TotalTime_1, SetFirstStatus, Tmp_768, Tmp_770, UseATimer_1, IrpSp_2, sdv_574, OldIrql_11, NewIrp_3, sdv_577, Tmp_772, Timeouts_1, Tmp_773, Extension_16);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2943} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2944} IoAcquireCancelSpinLock(Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1040;
    call {:si_unique_call 2922} sdv_574 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1040);
    assume {:nonnull} sdv_574 != 0;
    assume sdv_574 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1041;
    call {:si_unique_call 2923} sdv_576 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1041);
    assume {:nonnull} sdv_576 != 0;
    assume sdv_576 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_576)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_9], s_p_e_c_i_a_l_11);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_769;
    assume {:nonnull} Tmp_769 != 0;
    assume Tmp_769 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume false;
    return;

  anon22_Then:
    call {:si_unique_call 2924} IoReleaseCancelSpinLock(OldIrql_11);
    goto L40;

  L40:
    UseATimer_1 := 0;
    call {:si_unique_call 2925} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2926} sdv_KeAcquireSpinLock(0, Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2927} sdv_KeReleaseSpinLock(0, OldIrql_11);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1042;
    call {:si_unique_call 2928} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1042);
    UseATimer_1 := 1;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    havoc Tmp_772;
    goto L59;

  L59:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1043;
    call {:si_unique_call 2929} sdv_577 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1043);
    assume {:nonnull} sdv_577 != 0;
    assume sdv_577 > 0;
    call {:si_unique_call 2930} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2931} IoAcquireCancelSpinLock(Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_768;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 2932} IoReleaseCancelSpinLock(OldIrql_11);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_770;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_770))] := -1073741536;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 2933} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_16), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_16), NewIrp_3, 1, Extension_16);
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L79;

  L79:
    Tmp_771 := strConst__li2bpl251;
    call {:si_unique_call 2934} vslice_dummy_var_735 := SerialDbgPrintEx(2, Tmp_771);
    Tmp_766 := FirstStatus;
    return;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} SetFirstStatus == 0;
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L75;

  anon28_Then:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1044;
    call {:si_unique_call 2935} vslice_dummy_var_731 := sdv_IoSetCancelRoutine(vslice_dummy_var_1044, li2bplFunctionConstant214);
    s_p_e_c_i_a_l_13 := 2;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1045;
    call {:si_unique_call 2936} sdv_573 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1045);
    assume {:nonnull} sdv_573 != 0;
    assume sdv_573 > 0;
    s_p_e_c_i_a_l_12 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_573)));
    assume {:nonnull} s_p_e_c_i_a_l_12 != 0;
    assume s_p_e_c_i_a_l_12 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_12] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_12], s_p_e_c_i_a_l_13);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 2937} vslice_dummy_var_733 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_16), TotalTime_1, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_16), Extension_16);
    s_p_e_c_i_a_l_14 := 4;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1046;
    call {:si_unique_call 2938} sdv_575 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1046);
    assume {:nonnull} sdv_575 != 0;
    assume sdv_575 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_575)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_14);
    goto L99;

  L99:
    call {:si_unique_call 2939} vslice_dummy_var_732 := KeSynchronizeExecution(0, li2bplFunctionConstant215, 0);
    call {:si_unique_call 2940} IoReleaseCancelSpinLock(OldIrql_11);
    goto L79;

  anon30_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L99;

  anon25_Then:
    assume {:partition} SetFirstStatus == 0;
    call {:si_unique_call 2941} sdv_IoMarkIrpPending(0);
    SetFirstStatus := 1;
    FirstStatus := 259;
    goto L87;

  anon27_Then:
    Tmp_772 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon21_Then:
    call {:si_unique_call 2942} IoReleaseCancelSpinLock(OldIrql_11);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_16: int) returns (Tmp_766: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_16: int) returns (Tmp_766: int)
{
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_767: int;
  var {:scalar} FirstStatus: int;
  var {:scalar} TotalTime_1: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_768: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} IrpSp_2: int;
  var {:pointer} sdv_573: int;
  var {:pointer} sdv_574: int;
  var {:scalar} OldIrql_11: int;
  var {:pointer} sdv_575: int;
  var {:pointer} NewIrp_3: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} sdv_576: int;
  var {:pointer} sdv_577: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var {:scalar} Tmp_772: int;
  var {:scalar} s_p_e_c_i_a_l_13: int;
  var {:scalar} Timeouts_1: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} Tmp_773: int;
  var {:pointer} Extension_16: int;
  var vslice_dummy_var_736: int;
  var vslice_dummy_var_737: int;
  var vslice_dummy_var_738: int;
  var vslice_dummy_var_739: int;
  var vslice_dummy_var_740: int;
  var vslice_dummy_var_1047: int;
  var vslice_dummy_var_1048: int;
  var vslice_dummy_var_1049: int;
  var vslice_dummy_var_1050: int;
  var vslice_dummy_var_1051: int;
  var vslice_dummy_var_1052: int;
  var vslice_dummy_var_1053: int;

  anon0:
    call {:si_unique_call 2945} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2946} NewIrp_3 := __HAVOC_malloc(4);
    call {:si_unique_call 2947} Timeouts_1 := __HAVOC_malloc(20);
    Extension_16 := actual_Extension_16;
    call {:si_unique_call 2948} Tmp_767 := __HAVOC_malloc(92);
    call {:si_unique_call 2949} Tmp_771 := __HAVOC_malloc(88);
    SetFirstStatus := 0;
    Tmp_767 := strConst__li2bpl252;
    call {:si_unique_call 2950} vslice_dummy_var_739 := SerialDbgPrintEx(2, Tmp_767);
    goto L14;

  L14:
    call {:si_unique_call 2951} s_p_e_c_i_a_l_9, FirstStatus, SetFirstStatus, Tmp_768, Tmp_769, Tmp_770, UseATimer_1, IrpSp_2, sdv_574, OldIrql_11, s_p_e_c_i_a_l_11, sdv_576, sdv_577, Tmp_772, Tmp_773 := SerialStartWrite#1_loop_L14(s_p_e_c_i_a_l_9, FirstStatus, TotalTime_1, SetFirstStatus, Tmp_768, Tmp_769, Tmp_770, UseATimer_1, IrpSp_2, sdv_574, OldIrql_11, NewIrp_3, s_p_e_c_i_a_l_11, sdv_576, sdv_577, Tmp_772, Timeouts_1, Tmp_773, Extension_16);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2974} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2975} IoAcquireCancelSpinLock(Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1047;
    call {:si_unique_call 2952} sdv_574 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1047);
    assume {:nonnull} sdv_574 != 0;
    assume sdv_574 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1048;
    call {:si_unique_call 2953} sdv_576 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1048);
    assume {:nonnull} sdv_576 != 0;
    assume sdv_576 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_576)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_9], s_p_e_c_i_a_l_11);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_769;
    assume {:nonnull} Tmp_769 != 0;
    assume Tmp_769 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 2954} SerialTryToCompleteCurrent#0(Extension_16, li2bplFunctionConstant213, OldIrql_11, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_16), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_16), 0, 0, 16);
    goto L40;

  L40:
    UseATimer_1 := 0;
    call {:si_unique_call 2955} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2956} sdv_KeAcquireSpinLock(0, Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2957} sdv_KeReleaseSpinLock(0, OldIrql_11);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1049;
    call {:si_unique_call 2958} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1049);
    UseATimer_1 := 1;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    havoc Tmp_772;
    goto L59;

  L59:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1050;
    call {:si_unique_call 2959} sdv_577 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1050);
    assume {:nonnull} sdv_577 != 0;
    assume sdv_577 > 0;
    call {:si_unique_call 2960} Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    Mem_T.INT4[Tmp_773] := OldIrql_11;
    call {:si_unique_call 2961} IoAcquireCancelSpinLock(Tmp_773);
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    OldIrql_11 := Mem_T.INT4[Tmp_773];
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_768;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 2962} IoReleaseCancelSpinLock(OldIrql_11);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc Tmp_770;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_770))] := -1073741536;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 2963} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_16), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_16), NewIrp_3, 1, Extension_16);
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L79;

  L79:
    Tmp_771 := strConst__li2bpl251;
    call {:si_unique_call 2964} vslice_dummy_var_740 := SerialDbgPrintEx(2, Tmp_771);
    Tmp_766 := FirstStatus;
    return;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} SetFirstStatus == 0;
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L75;

  anon28_Then:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1051;
    call {:si_unique_call 2965} vslice_dummy_var_736 := sdv_IoSetCancelRoutine(vslice_dummy_var_1051, li2bplFunctionConstant214);
    s_p_e_c_i_a_l_13 := 2;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1052;
    call {:si_unique_call 2966} sdv_573 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1052);
    assume {:nonnull} sdv_573 != 0;
    assume sdv_573 > 0;
    s_p_e_c_i_a_l_12 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_573)));
    assume {:nonnull} s_p_e_c_i_a_l_12 != 0;
    assume s_p_e_c_i_a_l_12 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_12] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_12], s_p_e_c_i_a_l_13);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    call {:si_unique_call 2967} vslice_dummy_var_738 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_16), TotalTime_1, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_16), Extension_16);
    s_p_e_c_i_a_l_14 := 4;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc vslice_dummy_var_1053;
    call {:si_unique_call 2968} sdv_575 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1053);
    assume {:nonnull} sdv_575 != 0;
    assume sdv_575 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_575)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_14);
    goto L99;

  L99:
    call {:si_unique_call 2969} vslice_dummy_var_737 := KeSynchronizeExecution(0, li2bplFunctionConstant215, 0);
    call {:si_unique_call 2970} IoReleaseCancelSpinLock(OldIrql_11);
    goto L79;

  anon30_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L99;

  anon25_Then:
    assume {:partition} SetFirstStatus == 0;
    call {:si_unique_call 2971} sdv_IoMarkIrpPending(0);
    SetFirstStatus := 1;
    FirstStatus := 259;
    goto L87;

  anon27_Then:
    Tmp_772 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    call {:si_unique_call 2972} IoReleaseCancelSpinLock(OldIrql_11);
    goto L40;

  anon21_Then:
    call {:si_unique_call 2973} IoReleaseCancelSpinLock(OldIrql_11);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_16: int) returns (Tmp_766: int);
  modifies alloc, Mem_T.INT4, Mem_T.CancelRoutine__IRP, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int)
{
  var vslice_dummy_var_1054: int;

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_sDeviceData, in_gotISR, in_gotMem;
    goto L95, exit;

  exit:
    return;

  L95:
    goto anon156_Else;

  anon156_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    goto L105;

  L105:
    out_i := out_i + 1;
    goto L105_dummy;

  L105_dummy:
    call {:si_unique_call 2976} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L95(in_ioResIndex, in_isMulti, in_count, out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem, in_pPartialResourceDesc, in_PConfig);
    return;

  anon196_Then:
    out_sDeviceData := in_pPartialResourceDesc;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} out_sDeviceData != 0;
    assume out_sDeviceData > 0;
    havoc vslice_dummy_var_1054;
    Mem_T.INT4[ClockRate__CONFIG_DATA(in_PConfig)] := vslice_dummy_var_1054;
    goto L105;

  anon197_Then:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} out_gotMem == 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Controller__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon162_Then:
    goto L105;

  anon161_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon160_Then:
    assume {:partition} out_gotMem != 0;
    goto L105;

  anon198_Then:
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon204_Then:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon159_Then:
    assume {:partition} out_gotInt != 0;
    goto L105;

  anon157_Then:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(InterruptStatus__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(InterruptStatus__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon165_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L105;

  anon164_Then:
    assume {:partition} out_gotISR != 0;
    goto L121;

  L121:
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(Controller__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Controller__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon166_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L105;

  anon163_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon158_Then:
    goto L121;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_sDeviceData == in_sDeviceData || out_sDeviceData == in_pPartialResourceDesc;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_gotISR, in_gotMem;
    goto L148, exit;

  exit:
    return;

  L148:
    goto anon167_Else;

  anon167_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    goto L156;

  L156:
    out_i := out_i + 1;
    goto L156_dummy;

  L156_dummy:
    call {:si_unique_call 2977} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L148(in_ioResIndex, in_isMulti, in_count, out_gotIO, in_pPartialTrResourceDesc, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem, in_PConfig);
    return;

  anon199_Then:
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} out_gotMem != 0;
    goto L156;

  anon171_Then:
    assume {:partition} out_gotMem == 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrController__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrController__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Memory_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L156;

  anon173_Then:
    goto L156;

  anon172_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon200_Then:
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon170_Then:
    assume {:partition} out_gotInt != 0;
    goto L156;

  anon168_Then:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrInterruptStatus__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrInterruptStatus__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon176_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L156;

  anon175_Then:
    assume {:partition} out_gotISR != 0;
    goto L167;

  L167:
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(TrController__CONFIG_DATA(in_PConfig))] := Mem_T.INT4[LowPart__LUID(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(TrController__CONFIG_DATA(in_PConfig)))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(Start_unnamed_tag_42(Port_unnamed_tag_41(u__CM_PARTIAL_RESOURCE_DESCRIPTOR(in_pPartialTrResourceDesc)))))];
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon177_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L156;

  anon174_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon169_Then:
    goto L167;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_77: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_77: int)
{

  entry:
    out_interfaceType, out_foundOne, out_vslice_dummy_var_77 := in_interfaceType, in_foundOne, in_vslice_dummy_var_77;
    goto L191, exit;

  exit:
    return;

  L191:
    assume {:CounterLoop 17} {:Counter "interfaceType"} true;
    goto anon178_Else;

  anon178_Else:
    assume {:partition} 17 > out_interfaceType;
    out_foundOne := 0;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} out_interfaceType != 0;
    call {:si_unique_call 2978} out_vslice_dummy_var_77 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon180_Then;

  anon180_Then:
    assume {:partition} out_foundOne == 0;
    goto L198;

  L198:
    out_interfaceType := out_interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    havoc out_interfaceType;
    return;

  anon206_Then:
    assume {:partition} out_interfaceType == 0;
    goto L198;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_77: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_77: int);
  free ensures {:va_keep} out_foundOne == 0 || out_foundOne == in_foundOne;
  free ensures {:va_keep} out_vslice_dummy_var_77 == 0 || out_vslice_dummy_var_77 == -1073741823 || out_vslice_dummy_var_77 == in_vslice_dummy_var_77;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L179(in_sdv_176: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int)
{

  entry:
    out_allocLen, out_curStrLen := in_allocLen, in_curStrLen;
    goto L179, exit;

  exit:
    return;

  L179:
    out_curStrLen := in_sdv_176;
    goto anon231_Else;

  anon231_Else:
    assume {:partition} out_curStrLen != 0;
    out_allocLen := out_allocLen + out_curStrLen * 2 + 2;
    goto anon231_Else_dummy;

  anon231_Else_dummy:
    havoc out_allocLen;
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L179(in_sdv_176: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int);
  free ensures {:va_keep} out_curStrLen == in_sdv_176 || out_curStrLen == in_curStrLen;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_4: int, in_Tmp_244: int, in_Tmp_247: int, in_isMulti_2: int, in_pLowerDevObj_3: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_282: int, in_Tmp_285: int, in_j: int, in_Tmp_291: int, in_gotISR_1: int, in_vslice_dummy_var_180: int, in_vslice_dummy_var_181: int, in_vslice_dummy_var_182: int) returns (out_Tmp_244: int, out_Tmp_247: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_282: int, out_Tmp_285: int, out_j: int, out_Tmp_291: int, out_gotISR_1: int, out_vslice_dummy_var_180: int, out_vslice_dummy_var_181: int, out_vslice_dummy_var_182: int)
{

  entry:
    out_Tmp_244, out_Tmp_247, out_gotInt_1, out_pResDesc, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182 := in_Tmp_244, in_Tmp_247, in_gotInt_1, in_pResDesc, in_Tmp_282, in_Tmp_285, in_j, in_Tmp_291, in_gotISR_1, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182;
    goto L354, exit;

  exit:
    return;

  L354:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon173_Else;

  anon173_Else:
    out_Tmp_244 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_247;
    out_pResDesc := out_Tmp_247 + out_Tmp_244 * 380;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon179_Else;

  anon179_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    goto L369_dummy;

  L369_dummy:
    call {:si_unique_call 2982} {:si_old_unique_call 1} out_Tmp_244, out_Tmp_247, out_gotInt_1, out_pResDesc, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_4, out_Tmp_244, out_Tmp_247, in_isMulti_2, in_pLowerDevObj_3, out_gotInt_1, out_pResDesc, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182);
    return;

  anon177_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon180_Else;

  anon180_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon178_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon176_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon215_Then:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon175_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_285 := strConst__li2bpl127;
    call {:si_unique_call 2979} out_vslice_dummy_var_181 := SerialDbgPrintEx(12, out_Tmp_285);
    goto L363;

  anon227_Then:
    assume {:nonnull} in_pDevExt_4 != 0;
    assume in_pDevExt_4 > 0;
    out_Tmp_282 := strConst__li2bpl128;
    call {:si_unique_call 2980} out_vslice_dummy_var_182 := SerialDbgPrintEx(12, out_Tmp_282);
    goto L363;

  anon226_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_291 := strConst__li2bpl126;
    call {:si_unique_call 2981} out_vslice_dummy_var_180 := SerialDbgPrintEx(12, out_Tmp_291);
    goto L363;

  anon182_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon181_Then:
    goto L363;

  anon174_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_4: int, in_Tmp_244: int, in_Tmp_247: int, in_isMulti_2: int, in_pLowerDevObj_3: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_282: int, in_Tmp_285: int, in_j: int, in_Tmp_291: int, in_gotISR_1: int, in_vslice_dummy_var_180: int, in_vslice_dummy_var_181: int, in_vslice_dummy_var_182: int) returns (out_Tmp_244: int, out_Tmp_247: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_282: int, out_Tmp_285: int, out_j: int, out_Tmp_291: int, out_gotISR_1: int, out_vslice_dummy_var_180: int, out_vslice_dummy_var_181: int, out_vslice_dummy_var_182: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_180 == 0 || out_vslice_dummy_var_180 == in_vslice_dummy_var_180;
  free ensures {:va_keep} out_vslice_dummy_var_181 == 0 || out_vslice_dummy_var_181 == in_vslice_dummy_var_181;
  free ensures {:va_keep} out_vslice_dummy_var_182 == 0 || out_vslice_dummy_var_182 == in_vslice_dummy_var_182;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_4: int, in_Tmp_244: int, in_Tmp_245: int, in_Tmp_247: int, in_isMulti_2: int, in_pLowerDevObj_3: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_pReqList: int, in_Tmp_282: int, in_Tmp_285: int, in_j: int, in_Tmp_291: int, in_gotISR_1: int, in_vslice_dummy_var_179: int, in_vslice_dummy_var_180: int, in_vslice_dummy_var_181: int, in_vslice_dummy_var_182: int) returns (out_Tmp_244: int, out_Tmp_245: int, out_Tmp_247: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_282: int, out_Tmp_285: int, out_j: int, out_Tmp_291: int, out_gotISR_1: int, out_vslice_dummy_var_179: int, out_vslice_dummy_var_180: int, out_vslice_dummy_var_181: int, out_vslice_dummy_var_182: int)
{

  entry:
    out_Tmp_244, out_Tmp_245, out_Tmp_247, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182 := in_Tmp_244, in_Tmp_245, in_Tmp_247, in_gotInt_1, in_pResDesc, in_listNum, in_Tmp_282, in_Tmp_285, in_j, in_Tmp_291, in_gotISR_1, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182;
    goto L346, exit;

  exit:
    return;

  L346:
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    goto anon172_Else;

  anon172_Else:
    out_gotISR_1 := 0;
    out_gotInt_1 := 0;
    out_Tmp_245 := strConst__li2bpl125;
    call {:si_unique_call 2984} out_vslice_dummy_var_179 := SerialDbgPrintEx(12, out_Tmp_245);
    out_j := 0;
    goto L354;

  L354:
    call {:si_unique_call 2983} out_Tmp_244, out_Tmp_247, out_gotInt_1, out_pResDesc, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_4, out_Tmp_244, out_Tmp_247, in_isMulti_2, in_pLowerDevObj_3, out_gotInt_1, out_pResDesc, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182);
    goto L354_last;

  L354_last:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    out_Tmp_244 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_247;
    out_pResDesc := out_Tmp_247 + out_Tmp_244 * 380;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    assume false;
    return;

  anon177_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon180_Then:
    assume {:partition} out_gotInt_1 != 0;
    goto L355;

  L355:
    out_listNum := out_listNum + 1;
    goto L355_dummy;

  L355_dummy:
    call {:si_unique_call 2988} {:si_old_unique_call 1} out_Tmp_244, out_Tmp_245, out_Tmp_247, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182 := SerialPnpDispatch_loop_L346(in_pResList, in_pDevExt_4, out_Tmp_244, out_Tmp_245, out_Tmp_247, in_isMulti_2, in_pLowerDevObj_3, out_gotInt_1, out_pResDesc, out_listNum, in_pReqList, out_Tmp_282, out_Tmp_285, out_j, out_Tmp_291, out_gotISR_1, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182);
    return;

  anon179_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L355;

  anon178_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon176_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon215_Then:
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon175_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_285 := strConst__li2bpl127;
    call {:si_unique_call 2985} out_vslice_dummy_var_181 := SerialDbgPrintEx(12, out_Tmp_285);
    goto L363;

  anon227_Then:
    assume {:nonnull} in_pDevExt_4 != 0;
    assume in_pDevExt_4 > 0;
    out_Tmp_282 := strConst__li2bpl128;
    call {:si_unique_call 2986} out_vslice_dummy_var_182 := SerialDbgPrintEx(12, out_Tmp_282);
    goto L363;

  anon226_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_291 := strConst__li2bpl126;
    call {:si_unique_call 2987} out_vslice_dummy_var_180 := SerialDbgPrintEx(12, out_Tmp_291);
    goto L363;

  anon182_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon181_Then:
    goto L363;

  anon174_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;

  anon173_Then:
    goto L355;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_4: int, in_Tmp_244: int, in_Tmp_245: int, in_Tmp_247: int, in_isMulti_2: int, in_pLowerDevObj_3: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_pReqList: int, in_Tmp_282: int, in_Tmp_285: int, in_j: int, in_Tmp_291: int, in_gotISR_1: int, in_vslice_dummy_var_179: int, in_vslice_dummy_var_180: int, in_vslice_dummy_var_181: int, in_vslice_dummy_var_182: int) returns (out_Tmp_244: int, out_Tmp_245: int, out_Tmp_247: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_282: int, out_Tmp_285: int, out_j: int, out_Tmp_291: int, out_gotISR_1: int, out_vslice_dummy_var_179: int, out_vslice_dummy_var_180: int, out_vslice_dummy_var_181: int, out_vslice_dummy_var_182: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == 0 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == 0 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_179 == 0 || out_vslice_dummy_var_179 == in_vslice_dummy_var_179;
  free ensures {:va_keep} out_vslice_dummy_var_180 == 0 || out_vslice_dummy_var_180 == in_vslice_dummy_var_180;
  free ensures {:va_keep} out_vslice_dummy_var_181 == 0 || out_vslice_dummy_var_181 == in_vslice_dummy_var_181;
  free ensures {:va_keep} out_vslice_dummy_var_182 == 0 || out_vslice_dummy_var_182 == in_vslice_dummy_var_182;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 5} SerialPnpDispatch_loop_L476(in_Tmp_234: int, in_pDevExt_4: int, in_cap: int, in_Tmp_265: int, in_Tmp_279: int, in_Tmp_299: int, in_pDevCaps: int) returns (out_Tmp_234: int, out_cap: int, out_Tmp_265: int, out_Tmp_279: int, out_Tmp_299: int)
{

  entry:
    out_Tmp_234, out_cap, out_Tmp_265, out_Tmp_279, out_Tmp_299 := in_Tmp_234, in_cap, in_Tmp_265, in_Tmp_279, in_Tmp_299;
    goto L476, exit;

  exit:
    return;

  L476:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon184_Else;

  anon184_Else:
    assume {:partition} 7 > out_cap;
    out_Tmp_299 := out_cap;
    assume {:nonnull} in_pDevExt_4 != 0;
    assume in_pDevExt_4 > 0;
    havoc out_Tmp_279;
    out_Tmp_234 := out_cap;
    assume {:nonnull} in_pDevCaps != 0;
    assume in_pDevCaps > 0;
    havoc out_Tmp_265;
    assume {:nonnull} out_Tmp_265 != 0;
    assume out_Tmp_265 > 0;
    assume {:nonnull} out_Tmp_279 != 0;
    assume out_Tmp_279 > 0;
    Mem_T.INT4[out_Tmp_279 + out_Tmp_299 * 4] := Mem_T.INT4[out_Tmp_265 + out_Tmp_234 * 4];
    out_cap := out_cap + 1;
    goto anon184_Else_dummy;

  anon184_Else_dummy:
    call {:si_unique_call 2989} {:si_old_unique_call 1} out_Tmp_234, out_cap, out_Tmp_265, out_Tmp_279, out_Tmp_299 := SerialPnpDispatch_loop_L476(out_Tmp_234, in_pDevExt_4, out_cap, out_Tmp_265, out_Tmp_279, out_Tmp_299, in_pDevCaps);
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L476(in_Tmp_234: int, in_pDevExt_4: int, in_cap: int, in_Tmp_265: int, in_Tmp_279: int, in_Tmp_299: int, in_pDevCaps: int) returns (out_Tmp_234: int, out_cap: int, out_Tmp_265: int, out_Tmp_279: int, out_Tmp_299: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialEnumerateLegacy_loop_L312(in_Tmp_386: int, in_Tmp_387: int, in_countOfPartials_1: int, in_Tmp_392: int, in_Tmp_393: int, in_Tmp_395: int, in_Tmp_398: int, in_Tmp_399: int, in_trResourceList: int, in_lowerDevice: int, in_Tmp_405: int, in_Tmp_406: int, in_actuallyReturned: int, in_Tmp_409: int, in_Tmp_410: int, in_Tmp_411: int, in_Tmp_413: int, in_PnPID: int, in_Tmp_415: int, in_Tmp_416: int, in_deviceExtension: int, in_countSoFar_1: int, in_Tmp_420: int, in_Tmp_422: int, in_Tmp_423: int, in_Tmp_425: int, in_i_1: int, in_defaultInterfaceType_1: int, in_newDevObj: int, in_Tmp_429: int, in_userSubKey: int, in_Tmp_432: int, in_Tmp_433: int, in_pRequiredList: int, in_Tmp_436: int, in_Tmp_437: int, in_Tmp_438: int, in_resourceList: int, in_Tmp_442: int, in_Tmp_444: int, in_Tmp_446: int, in_legacyKeys: int, in_legacyDiscovered: int, in_parameters: int, in_Tmp_448: int, in_status_14: int, in_sdv_382: int, in_parametersPath: int, in_newPdo: int, in_brokenStatus: int, in_Tmp_449: int, in_Tmp_451: int, in_userData: int, in_Tmp_452: int, in_DriverObject_2: int, in_vslice_dummy_var_248: int, in_vslice_dummy_var_257: int, in_vslice_dummy_var_258: int, in_vslice_dummy_var_259: int, in_vslice_dummy_var_260: int, in_vslice_dummy_var_261: int, in_vslice_dummy_var_262: int, in_vslice_dummy_var_263: int, in_vslice_dummy_var_264: int) returns (out_Tmp_386: int, out_Tmp_387: int, out_Tmp_393: int, out_lowerDevice: int, out_Tmp_405: int, out_Tmp_406: int, out_actuallyReturned: int, out_Tmp_410: int, out_Tmp_413: int, out_Tmp_416: int, out_deviceExtension: int, out_Tmp_420: int, out_Tmp_423: int, out_Tmp_425: int, out_i_1: int, out_Tmp_429: int, out_Tmp_432: int, out_Tmp_433: int, out_Tmp_436: int, out_Tmp_437: int, out_Tmp_438: int, out_Tmp_442: int, out_Tmp_444: int, out_Tmp_446: int, out_status_14: int, out_sdv_382: int, out_newPdo: int, out_Tmp_449: int, out_Tmp_451: int, out_Tmp_452: int, out_vslice_dummy_var_248: int, out_vslice_dummy_var_257: int, out_vslice_dummy_var_258: int, out_vslice_dummy_var_259: int, out_vslice_dummy_var_260: int, out_vslice_dummy_var_261: int, out_vslice_dummy_var_262: int, out_vslice_dummy_var_263: int, out_vslice_dummy_var_264: int)
{
  var vslice_dummy_var_1055: int;
  var vslice_dummy_var_1056: int;
  var vslice_dummy_var_1057: int;
  var vslice_dummy_var_1058: int;
  var vslice_dummy_var_1059: int;

  entry:
    out_Tmp_386, out_Tmp_387, out_Tmp_393, out_lowerDevice, out_Tmp_405, out_Tmp_406, out_actuallyReturned, out_Tmp_410, out_Tmp_413, out_Tmp_416, out_deviceExtension, out_Tmp_420, out_Tmp_423, out_Tmp_425, out_i_1, out_Tmp_429, out_Tmp_432, out_Tmp_433, out_Tmp_436, out_Tmp_437, out_Tmp_438, out_Tmp_442, out_Tmp_444, out_Tmp_446, out_status_14, out_sdv_382, out_newPdo, out_Tmp_449, out_Tmp_451, out_Tmp_452, out_vslice_dummy_var_248, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264 := in_Tmp_386, in_Tmp_387, in_Tmp_393, in_lowerDevice, in_Tmp_405, in_Tmp_406, in_actuallyReturned, in_Tmp_410, in_Tmp_413, in_Tmp_416, in_deviceExtension, in_Tmp_420, in_Tmp_423, in_Tmp_425, in_i_1, in_Tmp_429, in_Tmp_432, in_Tmp_433, in_Tmp_436, in_Tmp_437, in_Tmp_438, in_Tmp_442, in_Tmp_444, in_Tmp_446, in_status_14, in_sdv_382, in_newPdo, in_Tmp_449, in_Tmp_451, in_Tmp_452, in_vslice_dummy_var_248, in_vslice_dummy_var_257, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264;
    goto L312, exit;

  exit:
    return;

  L312:
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    call {:si_unique_call 2990} out_Tmp_446 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_446 != 0;
    assume out_Tmp_446 > 0;
    Mem_T.INT4[out_Tmp_446] := out_actuallyReturned;
    call {:si_unique_call 2991} out_status_14 := ZwEnumerateKey(0, out_i_1, 0, 0, 534, out_Tmp_446);
    assume {:nonnull} out_Tmp_446 != 0;
    assume out_Tmp_446 > 0;
    out_actuallyReturned := Mem_T.INT4[out_Tmp_446];
    goto anon112_Else;

  anon112_Else:
    assume {:partition} out_status_14 != 26;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} out_status_14 == 5;
    assume {:nonnull} in_Tmp_415 != 0;
    assume in_Tmp_415 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_415)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_415 != 0;
    assume in_Tmp_415 > 0;
    assume {:nonnull} in_Tmp_415 != 0;
    assume in_Tmp_415 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_415))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_415 != 0;
    assume in_Tmp_415 > 0;
    assume {:nonnull} in_Tmp_415 != 0;
    assume in_Tmp_415 > 0;
    assume {:nonnull} in_Tmp_422 != 0;
    assume in_Tmp_422 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_422)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_422 != 0;
    assume in_Tmp_422 > 0;
    assume {:nonnull} in_Tmp_422 != 0;
    assume in_Tmp_422 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_422))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_422 != 0;
    assume in_Tmp_422 > 0;
    assume {:nonnull} in_Tmp_422 != 0;
    assume in_Tmp_422 > 0;
    call {:si_unique_call 2992} SerialLogError(in_DriverObject_2, 0, in_Tmp_422, in_Tmp_415, 0, 0, 0, 84, 0, -1073348589, 0, 0, 0, 0);
    out_Tmp_386 := strConst__li2bpl156;
    call {:si_unique_call 2993} out_vslice_dummy_var_257 := SerialDbgPrintEx(14, out_Tmp_386);
    out_i_1 := out_i_1 + 1;
    goto anon113_Else_dummy;

  anon113_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 3026} {:si_old_unique_call 1} out_Tmp_386, out_Tmp_387, out_Tmp_393, out_lowerDevice, out_Tmp_405, out_Tmp_406, out_actuallyReturned, out_Tmp_410, out_Tmp_413, out_Tmp_416, out_deviceExtension, out_Tmp_420, out_Tmp_423, out_Tmp_425, out_i_1, out_Tmp_429, out_Tmp_432, out_Tmp_433, out_Tmp_436, out_Tmp_437, out_Tmp_438, out_Tmp_442, out_Tmp_444, out_Tmp_446, out_status_14, out_sdv_382, out_newPdo, out_Tmp_449, out_Tmp_451, out_Tmp_452, out_vslice_dummy_var_248, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264 := SerialEnumerateLegacy_loop_L312(out_Tmp_386, out_Tmp_387, in_countOfPartials_1, in_Tmp_392, out_Tmp_393, in_Tmp_395, in_Tmp_398, in_Tmp_399, in_trResourceList, out_lowerDevice, out_Tmp_405, out_Tmp_406, out_actuallyReturned, in_Tmp_409, out_Tmp_410, in_Tmp_411, out_Tmp_413, in_PnPID, in_Tmp_415, out_Tmp_416, out_deviceExtension, in_countSoFar_1, out_Tmp_420, in_Tmp_422, out_Tmp_423, out_Tmp_425, out_i_1, in_defaultInterfaceType_1, in_newDevObj, out_Tmp_429, in_userSubKey, out_Tmp_432, out_Tmp_433, in_pRequiredList, out_Tmp_436, out_Tmp_437, out_Tmp_438, in_resourceList, out_Tmp_442, out_Tmp_444, out_Tmp_446, in_legacyKeys, in_legacyDiscovered, in_parameters, in_Tmp_448, out_status_14, out_sdv_382, in_parametersPath, out_newPdo, in_brokenStatus, out_Tmp_449, out_Tmp_451, in_userData, out_Tmp_452, in_DriverObject_2, out_vslice_dummy_var_248, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264);
    return;

  anon113_Then:
    assume {:partition} out_status_14 != 5;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} out_status_14 >= 0;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_433;
    call {:si_unique_call 2994} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_432;
    assume {:nonnull} in_parameters != 0;
    assume in_parameters > 0;
    call {:si_unique_call 2995} sdv_RtlZeroMemory(0, 8);
    call {:si_unique_call 2996} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc out_Tmp_416;
    call {:si_unique_call 2997} sdv_RtlZeroMemory(0, out_Tmp_416);
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    call {:si_unique_call 2998} out_status_14 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} out_status_14 >= 0;
    assume {:nonnull} in_PnPID != 0;
    assume in_PnPID > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    out_i_1 := out_i_1 + 1;
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    goto L_BAF_0;

  anon116_Then:
    assume {:nonnull} in_legacyDiscovered != 0;
    assume in_legacyDiscovered > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} Mem_T.INT4[in_legacyDiscovered] != 0;
    out_i_1 := out_i_1 + 1;
    goto anon117_Else_dummy;

  anon117_Else_dummy:
    goto L_BAF_0;

  anon117_Then:
    assume {:partition} Mem_T.INT4[in_legacyDiscovered] == 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    call {:si_unique_call 3017} sdv_RtlZeroMemory(0, 2);
    assume {:nonnull} in_brokenStatus != 0;
    assume in_brokenStatus > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} Mem_T.INT4[in_brokenStatus] != 0;
    assume {:nonnull} in_brokenStatus != 0;
    assume in_brokenStatus > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    Mem_T.INT4[LowPart__LUID(UserInterruptStatus__SERIAL_USER_DATA(in_userData))] := Mem_T.INT4[in_brokenStatus];
    goto L367;

  L367:
    assume {:nonnull} in_defaultInterfaceType_1 != 0;
    assume in_defaultInterfaceType_1 > 0;
    call {:si_unique_call 3016} out_sdv_382 := SerialIsUserDataValid(in_DriverObject_2, in_userSubKey, in_parameters, Mem_T.INT4[in_defaultInterfaceType_1], in_userData);
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:partition} out_sdv_382 != 0;
    call {:si_unique_call 3015} out_status_14 := SerialBuildResourceList(in_resourceList, in_countOfPartials_1, in_userData);
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} out_status_14 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    call {:si_unique_call 3014} out_status_14 := SerialTranslateResourceList(in_DriverObject_2, in_userSubKey, in_trResourceList, in_resourceList, Mem_T.INT4[in_countOfPartials_1], in_userData);
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} out_status_14 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    call {:si_unique_call 3013} out_status_14 := SerialBuildRequirementsList(in_pRequiredList, Mem_T.INT4[in_countOfPartials_1], in_userData);
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} out_status_14 >= 0;
    out_newPdo := 0;
    call {:si_unique_call 3012} out_status_14 := IoReportDetectedDevice(0, -1, -1, -1, 0, 0, 0, 0);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} out_status_14 >= 0;
    assume {:nonnull} in_countOfPartials_1 != 0;
    assume in_countOfPartials_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} Mem_T.INT4[in_countOfPartials_1] == 3;
    out_Tmp_425 := 1;
    goto L401;

  L401:
    out_Tmp_420 := out_Tmp_425;
    call {:si_unique_call 3011} out_status_14 := SerialMigrateLegacyRegistry(out_newPdo, in_userData, out_Tmp_420);
    goto anon159_Else;

  anon159_Else:
    assume {:partition} yogi_error != 1;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:partition} out_status_14 >= 0;
    call {:si_unique_call 3010} out_status_14 := SerialCreateDevObj(in_DriverObject_2, in_newDevObj);
    goto anon160_Else;

  anon160_Else:
    assume {:partition} yogi_error != 1;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} out_status_14 >= 0;
    call {:si_unique_call 3007} out_lowerDevice := IoAttachDeviceToDeviceStack(0, out_newPdo);
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc out_deviceExtension;
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(out_deviceExtension)] := BOR(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(out_deviceExtension)], 8);
    assume {:nonnull} out_deviceExtension != 0;
    assume out_deviceExtension > 0;
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    call {:si_unique_call 3008} MmLockPagableSectionByHandle(0);
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc vslice_dummy_var_1056;
    call {:si_unique_call 3009} out_status_14 := SerialFinishStartDevice(vslice_dummy_var_1056, in_resourceList, in_trResourceList, in_userData);
    goto anon161_Else;

  anon161_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 3006} MmUnlockPagableImageSection(0);
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} out_status_14 >= 0;
    call {:si_unique_call 3001} out_vslice_dummy_var_258 := corral_nondet();
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_387;
    call {:si_unique_call 3002} out_vslice_dummy_var_259 := corral_nondet();
    call {:si_unique_call 3003} out_status_14 := RtlWriteRegistryValue(0, 0, 0, 4, 0, 4);
    assume {:nonnull} in_legacyKeys != 0;
    assume in_legacyKeys > 0;
    havoc out_Tmp_423;
    call {:si_unique_call 3004} sdv_RtlZeroMemory(0, out_Tmp_423);
    assume {:nonnull} in_legacyKeys != 0;
    assume in_legacyKeys > 0;
    call {:si_unique_call 3005} out_vslice_dummy_var_260 := corral_nondet();
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} out_status_14 >= 0;
    goto L458;

  L458:
    out_i_1 := out_i_1 + 1;
    assume {:nonnull} in_countSoFar_1 != 0;
    assume in_countSoFar_1 > 0;
    Mem_T.INT4[in_countSoFar_1] := Mem_T.INT4[in_countSoFar_1] + 1;
    goto L458_dummy;

  L458_dummy:
    goto L_BAF_0;

  anon129_Then:
    assume {:partition} 0 > out_status_14;
    assume {:nonnull} in_Tmp_409 != 0;
    assume in_Tmp_409 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_409)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_409 != 0;
    assume in_Tmp_409 > 0;
    assume {:nonnull} in_Tmp_409 != 0;
    assume in_Tmp_409 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_409))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_409 != 0;
    assume in_Tmp_409 > 0;
    assume {:nonnull} in_Tmp_409 != 0;
    assume in_Tmp_409 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1055;
    call {:si_unique_call 2999} SerialLogError(in_DriverObject_2, 0, vslice_dummy_var_1055, in_Tmp_409, 0, 0, 0, 88, 0, -1073348567, 0, 0, 0, 0);
    out_Tmp_444 := strConst__li2bpl158;
    call {:si_unique_call 3000} out_vslice_dummy_var_261 := SerialDbgPrintEx(14, out_Tmp_444);
    goto L458;

  anon128_Then:
    assume {:partition} 0 > out_status_14;
    assume {:nonnull} in_newDevObj != 0;
    assume in_newDevObj > 0;
    havoc vslice_dummy_var_1057;
    call {:si_unique_call 3018} out_vslice_dummy_var_248 := SerialRemoveDevObj(vslice_dummy_var_1057);
    goto anon162_Else;

  anon162_Else:
    assume {:partition} yogi_error != 1;
    out_i_1 := out_i_1 + 1;
    goto anon162_Else_dummy;

  anon162_Else_dummy:
    goto L_BAF_0;

  anon127_Then:
    assume {:partition} 0 > out_status_14;
    out_i_1 := out_i_1 + 1;
    goto anon127_Then_dummy;

  anon127_Then_dummy:
    goto L_BAF_0;

  anon126_Then:
    assume {:partition} 0 > out_status_14;
    out_i_1 := out_i_1 + 1;
    goto anon126_Then_dummy;

  anon126_Then_dummy:
    goto L_BAF_0;

  anon125_Then:
    assume {:partition} Mem_T.INT4[in_countOfPartials_1] != 3;
    out_Tmp_425 := 0;
    goto L401;

  anon123_Then:
    assume {:partition} 0 > out_status_14;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} out_status_14 == -1073741670;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_393;
    out_Tmp_437 := out_Tmp_393;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_438;
    assume {:nonnull} in_Tmp_448 != 0;
    assume in_Tmp_448 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_448)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_448 != 0;
    assume in_Tmp_448 > 0;
    assume {:nonnull} in_Tmp_448 != 0;
    assume in_Tmp_448 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_448))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_448 != 0;
    assume in_Tmp_448 > 0;
    assume {:nonnull} in_Tmp_448 != 0;
    assume in_Tmp_448 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1058;
    call {:si_unique_call 3020} SerialLogError(in_DriverObject_2, 0, vslice_dummy_var_1058, in_Tmp_448, 0, 0, 0, 89, out_status_14, -1073348564, out_Tmp_438, out_Tmp_437, 0, 0);
    goto L477;

  L477:
    out_Tmp_410 := strConst__li2bpl159;
    call {:si_unique_call 3019} out_vslice_dummy_var_262 := SerialDbgPrintEx(14, out_Tmp_410);
    out_i_1 := out_i_1 + 1;
    goto L477_dummy;

  L477_dummy:
    goto L_BAF_0;

  anon124_Then:
    assume {:partition} out_status_14 != -1073741670;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_436;
    out_Tmp_406 := out_Tmp_436;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_413;
    assume {:nonnull} in_Tmp_392 != 0;
    assume in_Tmp_392 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_392)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_392 != 0;
    assume in_Tmp_392 > 0;
    assume {:nonnull} in_Tmp_392 != 0;
    assume in_Tmp_392 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_392))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_392 != 0;
    assume in_Tmp_392 > 0;
    assume {:nonnull} in_Tmp_392 != 0;
    assume in_Tmp_392 > 0;
    assume {:nonnull} in_userData != 0;
    assume in_userData > 0;
    havoc vslice_dummy_var_1059;
    call {:si_unique_call 3021} SerialLogError(in_DriverObject_2, 0, vslice_dummy_var_1059, in_Tmp_392, 0, 0, 0, 87, out_status_14, -1073348568, out_Tmp_413, out_Tmp_406, 0, 0);
    goto L477;

  anon122_Then:
    assume {:partition} 0 > out_status_14;
    out_i_1 := out_i_1 + 1;
    goto anon122_Then_dummy;

  anon122_Then_dummy:
    goto L_BAF_0;

  anon121_Then:
    assume {:partition} 0 > out_status_14;
    out_i_1 := out_i_1 + 1;
    goto anon121_Then_dummy;

  anon121_Then_dummy:
    goto L_BAF_0;

  anon120_Then:
    assume {:partition} 0 > out_status_14;
    out_i_1 := out_i_1 + 1;
    goto anon120_Then_dummy;

  anon120_Then_dummy:
    goto L_BAF_0;

  anon119_Then:
    assume {:partition} out_sdv_382 == 0;
    out_i_1 := out_i_1 + 1;
    goto anon119_Then_dummy;

  anon119_Then_dummy:
    goto L_BAF_0;

  anon118_Then:
    assume {:partition} Mem_T.INT4[in_brokenStatus] == 0;
    goto L367;

  anon115_Then:
    assume {:partition} 0 > out_status_14;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_451;
    out_Tmp_429 := out_Tmp_451;
    assume {:nonnull} in_userSubKey != 0;
    assume in_userSubKey > 0;
    havoc out_Tmp_405;
    assume {:nonnull} in_Tmp_398 != 0;
    assume in_Tmp_398 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_398)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_398 != 0;
    assume in_Tmp_398 > 0;
    assume {:nonnull} in_Tmp_398 != 0;
    assume in_Tmp_398 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_398))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_398 != 0;
    assume in_Tmp_398 > 0;
    assume {:nonnull} in_Tmp_398 != 0;
    assume in_Tmp_398 > 0;
    assume {:nonnull} in_Tmp_399 != 0;
    assume in_Tmp_399 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_399)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_399 != 0;
    assume in_Tmp_399 > 0;
    assume {:nonnull} in_Tmp_399 != 0;
    assume in_Tmp_399 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_399))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_399 != 0;
    assume in_Tmp_399 > 0;
    assume {:nonnull} in_Tmp_399 != 0;
    assume in_Tmp_399 > 0;
    call {:si_unique_call 3022} SerialLogError(in_DriverObject_2, 0, in_Tmp_399, in_Tmp_398, 0, 0, 0, 86, 0, -1073348583, out_Tmp_405, out_Tmp_429, 0, 0);
    assume {:nonnull} in_parameters != 0;
    assume in_parameters > 0;
    havoc out_Tmp_449;
    out_Tmp_452 := strConst__li2bpl177;
    call {:si_unique_call 3023} out_vslice_dummy_var_263 := SerialDbgPrintEx(14, out_Tmp_452);
    out_i_1 := out_i_1 + 1;
    goto anon115_Then_dummy;

  anon115_Then_dummy:
    goto L_BAF_0;

  anon114_Then:
    assume {:partition} 0 > out_status_14;
    assume {:nonnull} in_Tmp_395 != 0;
    assume in_Tmp_395 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_395)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_395 != 0;
    assume in_Tmp_395 > 0;
    assume {:nonnull} in_Tmp_395 != 0;
    assume in_Tmp_395 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_395))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_395 != 0;
    assume in_Tmp_395 > 0;
    assume {:nonnull} in_Tmp_395 != 0;
    assume in_Tmp_395 > 0;
    assume {:nonnull} in_Tmp_411 != 0;
    assume in_Tmp_411 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_411)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_1)];
    assume {:nonnull} in_Tmp_411 != 0;
    assume in_Tmp_411 > 0;
    assume {:nonnull} in_Tmp_411 != 0;
    assume in_Tmp_411 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_411))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_1))];
    assume {:nonnull} in_Tmp_411 != 0;
    assume in_Tmp_411 > 0;
    assume {:nonnull} in_Tmp_411 != 0;
    assume in_Tmp_411 > 0;
    call {:si_unique_call 3024} SerialLogError(in_DriverObject_2, 0, in_Tmp_411, in_Tmp_395, 0, 0, 0, 85, 0, -1073348589, 0, 0, 0, 0);
    out_Tmp_442 := strConst__li2bpl160;
    call {:si_unique_call 3025} out_vslice_dummy_var_264 := SerialDbgPrintEx(14, out_Tmp_442);
    out_i_1 := out_i_1 + 1;
    goto anon114_Then_dummy;

  anon114_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} SerialEnumerateLegacy_loop_L312(in_Tmp_386: int, in_Tmp_387: int, in_countOfPartials_1: int, in_Tmp_392: int, in_Tmp_393: int, in_Tmp_395: int, in_Tmp_398: int, in_Tmp_399: int, in_trResourceList: int, in_lowerDevice: int, in_Tmp_405: int, in_Tmp_406: int, in_actuallyReturned: int, in_Tmp_409: int, in_Tmp_410: int, in_Tmp_411: int, in_Tmp_413: int, in_PnPID: int, in_Tmp_415: int, in_Tmp_416: int, in_deviceExtension: int, in_countSoFar_1: int, in_Tmp_420: int, in_Tmp_422: int, in_Tmp_423: int, in_Tmp_425: int, in_i_1: int, in_defaultInterfaceType_1: int, in_newDevObj: int, in_Tmp_429: int, in_userSubKey: int, in_Tmp_432: int, in_Tmp_433: int, in_pRequiredList: int, in_Tmp_436: int, in_Tmp_437: int, in_Tmp_438: int, in_resourceList: int, in_Tmp_442: int, in_Tmp_444: int, in_Tmp_446: int, in_legacyKeys: int, in_legacyDiscovered: int, in_parameters: int, in_Tmp_448: int, in_status_14: int, in_sdv_382: int, in_parametersPath: int, in_newPdo: int, in_brokenStatus: int, in_Tmp_449: int, in_Tmp_451: int, in_userData: int, in_Tmp_452: int, in_DriverObject_2: int, in_vslice_dummy_var_248: int, in_vslice_dummy_var_257: int, in_vslice_dummy_var_258: int, in_vslice_dummy_var_259: int, in_vslice_dummy_var_260: int, in_vslice_dummy_var_261: int, in_vslice_dummy_var_262: int, in_vslice_dummy_var_263: int, in_vslice_dummy_var_264: int) returns (out_Tmp_386: int, out_Tmp_387: int, out_Tmp_393: int, out_lowerDevice: int, out_Tmp_405: int, out_Tmp_406: int, out_actuallyReturned: int, out_Tmp_410: int, out_Tmp_413: int, out_Tmp_416: int, out_deviceExtension: int, out_Tmp_420: int, out_Tmp_423: int, out_Tmp_425: int, out_i_1: int, out_Tmp_429: int, out_Tmp_432: int, out_Tmp_433: int, out_Tmp_436: int, out_Tmp_437: int, out_Tmp_438: int, out_Tmp_442: int, out_Tmp_444: int, out_Tmp_446: int, out_status_14: int, out_sdv_382: int, out_newPdo: int, out_Tmp_449: int, out_Tmp_451: int, out_Tmp_452: int, out_vslice_dummy_var_248: int, out_vslice_dummy_var_257: int, out_vslice_dummy_var_258: int, out_vslice_dummy_var_259: int, out_vslice_dummy_var_260: int, out_vslice_dummy_var_261: int, out_vslice_dummy_var_262: int, out_vslice_dummy_var_263: int, out_vslice_dummy_var_264: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP, yogi_error;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_lowerDevice == 0 || out_lowerDevice == in_lowerDevice;
  free ensures {:va_keep} out_Tmp_420 == 1 || out_Tmp_420 == 0 || out_Tmp_420 == in_Tmp_420;
  free ensures {:va_keep} out_Tmp_425 == 1 || out_Tmp_425 == 0 || out_Tmp_425 == in_Tmp_425;
  free ensures {:va_keep} out_sdv_382 == 0 || out_sdv_382 == 1 || out_sdv_382 == in_sdv_382;
  free ensures {:va_keep} out_newPdo == 0 || out_newPdo == in_newPdo;
  free ensures {:va_keep} out_vslice_dummy_var_257 == 0 || out_vslice_dummy_var_257 == in_vslice_dummy_var_257;
  free ensures {:va_keep} out_vslice_dummy_var_261 == 0 || out_vslice_dummy_var_261 == in_vslice_dummy_var_261;
  free ensures {:va_keep} out_vslice_dummy_var_262 == 0 || out_vslice_dummy_var_262 == in_vslice_dummy_var_262;
  free ensures {:va_keep} out_vslice_dummy_var_263 == 0 || out_vslice_dummy_var_263 == in_vslice_dummy_var_263;
  free ensures {:va_keep} out_vslice_dummy_var_264 == 0 || out_vslice_dummy_var_264 == in_vslice_dummy_var_264;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialEnumerateLegacy_loop_L63(in_interfaceType_1: int, in_foundOne_1: int, in_vslice_dummy_var_244: int) returns (out_interfaceType_1: int, out_foundOne_1: int, out_vslice_dummy_var_244: int)
{

  entry:
    out_interfaceType_1, out_foundOne_1, out_vslice_dummy_var_244 := in_interfaceType_1, in_foundOne_1, in_vslice_dummy_var_244;
    goto L63, exit;

  exit:
    return;

  L63:
    assume {:CounterLoop 17} {:Counter "interfaceType_1"} true;
    goto anon109_Else;

  anon109_Else:
    assume {:partition} 17 > out_interfaceType_1;
    out_foundOne_1 := 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_interfaceType_1 != 0;
    call {:si_unique_call 3027} out_vslice_dummy_var_244 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon110_Then;

  anon110_Then:
    assume {:partition} out_foundOne_1 == 0;
    goto L70;

  L70:
    out_interfaceType_1 := out_interfaceType_1 + 1;
    goto L70_dummy;

  L70_dummy:
    havoc out_interfaceType_1;
    return;

  anon139_Then:
    assume {:partition} out_interfaceType_1 == 0;
    goto L70;
}



procedure {:LoopProcedure} SerialEnumerateLegacy_loop_L63(in_interfaceType_1: int, in_foundOne_1: int, in_vslice_dummy_var_244: int) returns (out_interfaceType_1: int, out_foundOne_1: int, out_vslice_dummy_var_244: int);
  free ensures {:va_keep} out_foundOne_1 == 0 || out_foundOne_1 == in_foundOne_1;
  free ensures {:va_keep} out_vslice_dummy_var_244 == 0 || out_vslice_dummy_var_244 == -1073741823 || out_vslice_dummy_var_244 == in_vslice_dummy_var_244;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialInternalIoControl_loop_L126(in_Tmp_716: int, in_pDevExt_10: int, in_Tmp_719: int, in_cap_1: int, in_Tmp_720: int, in_Tmp_722: int) returns (out_Tmp_716: int, out_Tmp_719: int, out_cap_1: int, out_Tmp_720: int, out_Tmp_722: int)
{

  entry:
    out_Tmp_716, out_Tmp_719, out_cap_1, out_Tmp_720, out_Tmp_722 := in_Tmp_716, in_Tmp_719, in_cap_1, in_Tmp_720, in_Tmp_722;
    goto L126, exit;

  exit:
    return;

  L126:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon40_Else;

  anon40_Else:
    assume {:partition} 7 > out_cap_1;
    out_Tmp_720 := out_cap_1;
    assume {:nonnull} in_pDevExt_10 != 0;
    assume in_pDevExt_10 > 0;
    havoc out_Tmp_716;
    assume {:nonnull} out_Tmp_716 != 0;
    assume out_Tmp_716 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_716 + out_Tmp_720 * 4] >= 1;
    out_Tmp_722 := out_cap_1;
    assume {:nonnull} in_pDevExt_10 != 0;
    assume in_pDevExt_10 > 0;
    havoc out_Tmp_719;
    assume {:nonnull} out_Tmp_719 != 0;
    assume out_Tmp_719 > 0;
    assume {:nonnull} in_pDevExt_10 != 0;
    assume in_pDevExt_10 > 0;
    goto anon47_Else;

  anon47_Else:
    goto L129;

  L129:
    out_cap_1 := out_cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    havoc out_cap_1;
    return;

  anon46_Then:
    assume {:partition} 1 > Mem_T.INT4[out_Tmp_716 + out_Tmp_720 * 4];
    goto L129;
}



procedure {:LoopProcedure} SerialInternalIoControl_loop_L126(in_Tmp_716: int, in_pDevExt_10: int, in_Tmp_719: int, in_cap_1: int, in_Tmp_720: int, in_Tmp_722: int) returns (out_Tmp_716: int, out_Tmp_719: int, out_cap_1: int, out_Tmp_720: int, out_Tmp_722: int);
  free ensures {:va_keep} out_Tmp_720 == in_cap_1 || out_Tmp_720 == in_Tmp_720;
  free ensures {:va_keep} out_Tmp_722 == in_cap_1 || out_Tmp_722 == in_Tmp_722;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_5: int, in_sdv_558: int, in_Irp_9: int, in_Tmp_763: int, in_OldIrql_9: int, in_sdv_561: int, in_OldIrql_10: int, in_sdv_563: int, in_CompleteCurrent_2: int, in_s_p_e_c_i_a_l_6: int, in_sdv_565: int, in_sdv_566: int, in_sdv_567: int, in_s_p_e_c_i_a_l_7: int, in_delta: int, in_Xc_1: int, in_s_p_e_c_i_a_l_8: int, in_Tmp_765: int, in_CurrentOpIrp_1: int, in_QueueToProcess_1: int, in_NewIrp_2: int, in_CompleteCurrent_1: int, in_Extension_15: int, in_vslice_dummy_var_412: int, in_vslice_dummy_var_415: int, in_vslice_dummy_var_416: int) returns (out_s_p_e_c_i_a_l_5: int, out_sdv_558: int, out_Irp_9: int, out_Tmp_763: int, out_OldIrql_9: int, out_sdv_561: int, out_OldIrql_10: int, out_sdv_563: int, out_s_p_e_c_i_a_l_6: int, out_sdv_565: int, out_sdv_566: int, out_sdv_567: int, out_s_p_e_c_i_a_l_7: int, out_Xc_1: int, out_s_p_e_c_i_a_l_8: int, out_Tmp_765: int, out_CompleteCurrent_1: int, out_vslice_dummy_var_412: int, out_vslice_dummy_var_415: int, out_vslice_dummy_var_416: int)
{
  var vslice_dummy_var_1060: int;
  var vslice_dummy_var_1061: int;
  var vslice_dummy_var_1062: int;
  var vslice_dummy_var_1063: int;

  entry:
    out_s_p_e_c_i_a_l_5, out_sdv_558, out_Irp_9, out_Tmp_763, out_OldIrql_9, out_sdv_561, out_OldIrql_10, out_sdv_563, out_s_p_e_c_i_a_l_6, out_sdv_565, out_sdv_566, out_sdv_567, out_s_p_e_c_i_a_l_7, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_765, out_CompleteCurrent_1, out_vslice_dummy_var_412, out_vslice_dummy_var_415, out_vslice_dummy_var_416 := in_s_p_e_c_i_a_l_5, in_sdv_558, in_Irp_9, in_Tmp_763, in_OldIrql_9, in_sdv_561, in_OldIrql_10, in_sdv_563, in_s_p_e_c_i_a_l_6, in_sdv_565, in_sdv_566, in_sdv_567, in_s_p_e_c_i_a_l_7, in_Xc_1, in_s_p_e_c_i_a_l_8, in_Tmp_765, in_CompleteCurrent_1, in_vslice_dummy_var_412, in_vslice_dummy_var_415, in_vslice_dummy_var_416;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_1060;
    call {:si_unique_call 3028} out_sdv_563 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1060);
    assume {:nonnull} out_sdv_563 != 0;
    assume out_sdv_563 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 3031} out_Tmp_763 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_763 != 0;
    assume out_Tmp_763 > 0;
    Mem_T.INT4[out_Tmp_763] := out_OldIrql_10;
    call {:si_unique_call 3032} IoAcquireCancelSpinLock(out_Tmp_763);
    assume {:nonnull} out_Tmp_763 != 0;
    assume out_Tmp_763 > 0;
    out_OldIrql_10 := Mem_T.INT4[out_Tmp_763];
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_1062;
    call {:si_unique_call 3033} out_sdv_566 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1062);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} out_sdv_566 != 0;
    assume out_sdv_566 > 0;
    call {:si_unique_call 3034} IoReleaseCancelSpinLock(out_OldIrql_10);
    goto L26;

  L26:
    call {:si_unique_call 3030} SerialGetNextIrp(in_CurrentOpIrp_1, in_QueueToProcess_1, in_NewIrp_2, out_CompleteCurrent_1, in_Extension_15);
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon16_Then;

  anon16_Then:
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    havoc vslice_dummy_var_1061;
    call {:si_unique_call 3029} out_sdv_567 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1061);
    assume {:nonnull} out_sdv_567 != 0;
    assume out_sdv_567 > 0;
    goto anon17_Then;

  anon17_Then:
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    havoc out_Tmp_765;
    assume {:nonnull} out_Tmp_765 != 0;
    assume out_Tmp_765 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_765))] := 0;
    out_CompleteCurrent_1 := in_CompleteCurrent_2;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    call {:si_unique_call 3044} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_5, out_sdv_558, out_Irp_9, out_Tmp_763, out_OldIrql_9, out_sdv_561, out_OldIrql_10, out_sdv_563, out_s_p_e_c_i_a_l_6, out_sdv_565, out_sdv_566, out_sdv_567, out_s_p_e_c_i_a_l_7, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_765, out_CompleteCurrent_1, out_vslice_dummy_var_412, out_vslice_dummy_var_415, out_vslice_dummy_var_416 := SerialGetNextWrite_loop_L8(out_s_p_e_c_i_a_l_5, out_sdv_558, out_Irp_9, out_Tmp_763, out_OldIrql_9, out_sdv_561, out_OldIrql_10, out_sdv_563, in_CompleteCurrent_2, out_s_p_e_c_i_a_l_6, out_sdv_565, out_sdv_566, out_sdv_567, out_s_p_e_c_i_a_l_7, in_delta, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_765, in_CurrentOpIrp_1, in_QueueToProcess_1, in_NewIrp_2, out_CompleteCurrent_1, in_Extension_15, out_vslice_dummy_var_412, out_vslice_dummy_var_415, out_vslice_dummy_var_416);
    return;

  anon15_Then:
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    havoc vslice_dummy_var_1063;
    call {:si_unique_call 3036} out_sdv_565 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1063);
    assume {:nonnull} out_sdv_565 != 0;
    assume out_sdv_565 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 3042} out_Tmp_763 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_763 != 0;
    assume out_Tmp_763 > 0;
    Mem_T.INT4[out_Tmp_763] := out_OldIrql_9;
    call {:si_unique_call 3043} IoAcquireCancelSpinLock(out_Tmp_763);
    assume {:nonnull} out_Tmp_763 != 0;
    assume out_Tmp_763 > 0;
    out_OldIrql_9 := Mem_T.INT4[out_Tmp_763];
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    havoc out_Irp_9;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    havoc out_Xc_1;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 3035} IoReleaseCancelSpinLock(out_OldIrql_9);
    goto L26;

  anon21_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] == 0;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] := -1073741536;
    goto L64;

  anon19_Then:
    call {:si_unique_call 3039} out_vslice_dummy_var_412 := sdv_IoSetCancelRoutine(out_Irp_9, li2bplFunctionConstant218);
    out_s_p_e_c_i_a_l_6 := 2;
    call {:si_unique_call 3040} out_sdv_561 := sdv_IoGetCurrentIrpStackLocation(out_Irp_9);
    assume {:nonnull} out_sdv_561 != 0;
    assume out_sdv_561 > 0;
    out_s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_561)));
    assume {:nonnull} out_s_p_e_c_i_a_l_5 != 0;
    assume out_s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_5], out_s_p_e_c_i_a_l_6);
    out_CompleteCurrent_1 := 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 3041} out_vslice_dummy_var_415 := KeSynchronizeExecution(0, li2bplFunctionConstant219, 0);
    assume {:nonnull} out_Xc_1 != 0;
    assume out_Xc_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} out_Xc_1 != 0;
    assume out_Xc_1 > 0;
    assume {:nonnull} in_delta != 0;
    assume in_delta > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 3037} out_vslice_dummy_var_416 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    out_s_p_e_c_i_a_l_8 := 4;
    call {:si_unique_call 3038} out_sdv_558 := sdv_IoGetCurrentIrpStackLocation(out_Irp_9);
    assume {:nonnull} out_sdv_558 != 0;
    assume out_sdv_558 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_558)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_8);
    goto L64;

  anon20_Then:
    goto L64;

  anon18_Then:
    goto L26;
}



procedure {:LoopProcedure} SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_5: int, in_sdv_558: int, in_Irp_9: int, in_Tmp_763: int, in_OldIrql_9: int, in_sdv_561: int, in_OldIrql_10: int, in_sdv_563: int, in_CompleteCurrent_2: int, in_s_p_e_c_i_a_l_6: int, in_sdv_565: int, in_sdv_566: int, in_sdv_567: int, in_s_p_e_c_i_a_l_7: int, in_delta: int, in_Xc_1: int, in_s_p_e_c_i_a_l_8: int, in_Tmp_765: int, in_CurrentOpIrp_1: int, in_QueueToProcess_1: int, in_NewIrp_2: int, in_CompleteCurrent_1: int, in_Extension_15: int, in_vslice_dummy_var_412: int, in_vslice_dummy_var_415: int, in_vslice_dummy_var_416: int) returns (out_s_p_e_c_i_a_l_5: int, out_sdv_558: int, out_Irp_9: int, out_Tmp_763: int, out_OldIrql_9: int, out_sdv_561: int, out_OldIrql_10: int, out_sdv_563: int, out_s_p_e_c_i_a_l_6: int, out_sdv_565: int, out_sdv_566: int, out_sdv_567: int, out_s_p_e_c_i_a_l_7: int, out_Xc_1: int, out_s_p_e_c_i_a_l_8: int, out_Tmp_765: int, out_CompleteCurrent_1: int, out_vslice_dummy_var_412: int, out_vslice_dummy_var_415: int, out_vslice_dummy_var_416: int);
  modifies Mem_T.INT4, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_s_p_e_c_i_a_l_6 == 2 || out_s_p_e_c_i_a_l_6 == in_s_p_e_c_i_a_l_6;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_8 == 4 || out_s_p_e_c_i_a_l_8 == in_s_p_e_c_i_a_l_8;
  free ensures {:va_keep} out_CompleteCurrent_1 == in_CompleteCurrent_1 || out_CompleteCurrent_1 == in_CompleteCurrent_2;
  free ensures {:va_keep} out_vslice_dummy_var_415 == 1 || out_vslice_dummy_var_415 == 0 || out_vslice_dummy_var_415 == in_vslice_dummy_var_415;
  free ensures {:va_keep} out_vslice_dummy_var_416 == 1 || out_vslice_dummy_var_416 == 0 || out_vslice_dummy_var_416 == in_vslice_dummy_var_416;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialReleaseResources_loop_L42(in_i_2: int, in_Tmp_1063: int, in_Tmp_1065: int, in_Tmp_1066: int, in_PDevExt_8: int) returns (out_i_2: int, out_Tmp_1063: int, out_Tmp_1065: int, out_Tmp_1066: int)
{

  entry:
    out_i_2, out_Tmp_1063, out_Tmp_1065, out_Tmp_1066 := in_i_2, in_Tmp_1063, in_Tmp_1065, in_Tmp_1066;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 16} {:Counter "i_2"} true;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} 16 > out_i_2;
    out_Tmp_1065 := out_i_2;
    assume {:nonnull} in_PDevExt_8 != 0;
    assume in_PDevExt_8 > 0;
    havoc out_Tmp_1063;
    assume {:nonnull} out_Tmp_1063 != 0;
    assume out_Tmp_1063 > 0;
    havoc out_Tmp_1066;
    assume {:nonnull} out_Tmp_1066 != 0;
    assume out_Tmp_1066 > 0;
    goto anon66_Else;

  anon66_Else:
    out_i_2 := out_i_2 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    havoc out_i_2;
    return;
}



procedure {:LoopProcedure} SerialReleaseResources_loop_L42(in_i_2: int, in_Tmp_1063: int, in_Tmp_1065: int, in_Tmp_1066: int, in_PDevExt_8: int) returns (out_i_2: int, out_Tmp_1063: int, out_Tmp_1065: int, out_Tmp_1066: int);
  free ensures {:va_keep} out_Tmp_1065 == in_i_2 || out_Tmp_1065 == in_Tmp_1065;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L182(in_pCurDevObj: int, in_Tmp_1072: int, in_sdv_760: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_773: int, in_PConfig_1: int) returns (out_pCurDevObj: int, out_Tmp_1072: int, out_sdv_760: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_773: int)
{
  var vslice_dummy_var_1064: int;
  var vslice_dummy_var_1065: int;
  var vslice_dummy_var_1066: int;
  var vslice_dummy_var_1067: int;

  entry:
    out_pCurDevObj, out_Tmp_1072, out_sdv_760, out_pExtension, out_oldIrql_4, out_sdv_773 := in_pCurDevObj, in_Tmp_1072, in_sdv_760, in_pExtension, in_oldIrql_4, in_sdv_773;
    goto L182, exit;

  exit:
    return;

  L182:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1064;
    havoc vslice_dummy_var_1065;
    havoc vslice_dummy_var_1066;
    havoc vslice_dummy_var_1067;
    call {:si_unique_call 3049} out_sdv_773 := SerialMemCompare(vslice_dummy_var_1064, vslice_dummy_var_1065, vslice_dummy_var_1066, vslice_dummy_var_1067);
    goto anon105_Then;

  anon105_Then:
    assume {:partition} out_sdv_773 != 0;
    goto L183;

  L183:
    call {:si_unique_call 3047} out_Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    Mem_T.INT4[out_Tmp_1072] := out_oldIrql_4;
    call {:si_unique_call 3048} sdv_KeAcquireSpinLock(0, out_Tmp_1072);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_1072];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    call {:si_unique_call 3046} out_sdv_760 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_760;
    goto L216;

  L216:
    call {:si_unique_call 3045} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon108_Else;

  anon108_Else:
    goto anon109_Else;

  anon109_Else:
    goto anon109_Else_dummy;

  anon109_Else_dummy:
    call {:si_unique_call 3050} {:si_old_unique_call 1} out_pCurDevObj, out_Tmp_1072, out_sdv_760, out_pExtension, out_oldIrql_4, out_sdv_773 := SerialFindInitController_loop_L182(out_pCurDevObj, out_Tmp_1072, out_sdv_760, out_pExtension, out_oldIrql_4, out_sdv_773, in_PConfig_1);
    return;

  anon117_Then:
    goto L216;

  anon104_Then:
    goto L183;

  anon103_Then:
    goto L183;

  anon102_Then:
    goto L183;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L182(in_pCurDevObj: int, in_Tmp_1072: int, in_sdv_760: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_773: int, in_PConfig_1: int) returns (out_pCurDevObj: int, out_Tmp_1072: int, out_sdv_760: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_773: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_773 == 0 || out_sdv_773 == 2 || out_sdv_773 == 1 || out_sdv_773 == in_sdv_773;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L246(in_sdv_751: int, in_pCurDevObj: int, in_Tmp_1072: int, in_pExtension: int, in_oldIrql_4: int, in_PConfig_1: int) returns (out_sdv_751: int, out_pCurDevObj: int, out_Tmp_1072: int, out_pExtension: int, out_oldIrql_4: int)
{

  entry:
    out_sdv_751, out_pCurDevObj, out_Tmp_1072, out_pExtension, out_oldIrql_4 := in_sdv_751, in_pCurDevObj, in_Tmp_1072, in_pExtension, in_oldIrql_4;
    goto L246, exit;

  exit:
    return;

  L246:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon114_Then;

  anon114_Then:
    goto L247;

  L247:
    call {:si_unique_call 3053} out_Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    Mem_T.INT4[out_Tmp_1072] := out_oldIrql_4;
    call {:si_unique_call 3054} sdv_KeAcquireSpinLock(0, out_Tmp_1072);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_1072];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    call {:si_unique_call 3052} out_sdv_751 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_751;
    goto L264;

  L264:
    call {:si_unique_call 3051} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon115_Else;

  anon115_Else:
    goto anon116_Else;

  anon116_Else:
    goto anon116_Else_dummy;

  anon116_Else_dummy:
    call {:si_unique_call 3055} {:si_old_unique_call 1} out_sdv_751, out_pCurDevObj, out_Tmp_1072, out_pExtension, out_oldIrql_4 := SerialFindInitController_loop_L246(out_sdv_751, out_pCurDevObj, out_Tmp_1072, out_pExtension, out_oldIrql_4, in_PConfig_1);
    return;

  anon119_Then:
    goto L264;

  anon113_Then:
    goto L247;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L246(in_sdv_751: int, in_pCurDevObj: int, in_Tmp_1072: int, in_pExtension: int, in_oldIrql_4: int, in_PConfig_1: int) returns (out_sdv_751: int, out_pCurDevObj: int, out_Tmp_1072: int, out_pExtension: int, out_oldIrql_4: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialFindInitController_loop_L78(in_sdv_743: int, in_sdv_744: int, in_sdv_749: int, in_sdv_750: int, in_pCurDevObj: int, in_Tmp_1072: int, in_Tmp_1079: int, in_sdv_753: int, in_Tmp_1081: int, in_sdv_756: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_767: int, in_sdv_770: int, in_Tmp_1091: int, in_Tmp_1092: int, in_PConfig_1: int, in_vslice_dummy_var_534: int) returns (out_sdv_743: int, out_sdv_744: int, out_sdv_749: int, out_sdv_750: int, out_pCurDevObj: int, out_Tmp_1072: int, out_Tmp_1079: int, out_sdv_753: int, out_sdv_756: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_767: int, out_sdv_770: int, out_vslice_dummy_var_534: int)
{
  var vslice_dummy_var_1068: int;
  var vslice_dummy_var_1069: int;
  var vslice_dummy_var_1070: int;
  var vslice_dummy_var_1071: int;
  var vslice_dummy_var_1072: int;
  var vslice_dummy_var_1073: int;
  var vslice_dummy_var_1074: int;
  var vslice_dummy_var_1075: int;
  var vslice_dummy_var_1076: int;
  var vslice_dummy_var_1077: int;
  var vslice_dummy_var_1078: int;
  var vslice_dummy_var_1079: int;
  var vslice_dummy_var_1080: int;
  var vslice_dummy_var_1081: int;
  var vslice_dummy_var_1082: int;
  var vslice_dummy_var_1083: int;
  var vslice_dummy_var_1084: int;
  var vslice_dummy_var_1085: int;
  var vslice_dummy_var_1086: int;
  var vslice_dummy_var_1087: int;
  var vslice_dummy_var_1088: int;
  var vslice_dummy_var_1089: int;

  entry:
    out_sdv_743, out_sdv_744, out_sdv_749, out_sdv_750, out_pCurDevObj, out_Tmp_1072, out_Tmp_1079, out_sdv_753, out_sdv_756, out_pExtension, out_oldIrql_4, out_sdv_767, out_sdv_770, out_vslice_dummy_var_534 := in_sdv_743, in_sdv_744, in_sdv_749, in_sdv_750, in_pCurDevObj, in_Tmp_1072, in_Tmp_1079, in_sdv_753, in_sdv_756, in_pExtension, in_oldIrql_4, in_sdv_767, in_sdv_770, in_vslice_dummy_var_534;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon86_Else;

  anon86_Else:
    goto anon87_Else;

  anon87_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    out_Tmp_1079 := strConst__li2bpl270;
    call {:si_unique_call 3062} out_vslice_dummy_var_534 := SerialDbgPrintEx(4, out_Tmp_1079);
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1072;
    havoc vslice_dummy_var_1073;
    havoc vslice_dummy_var_1074;
    havoc vslice_dummy_var_1075;
    call {:si_unique_call 3063} out_sdv_743 := SerialMemCompare(vslice_dummy_var_1072, vslice_dummy_var_1073, vslice_dummy_var_1074, vslice_dummy_var_1075);
    goto anon91_Then;

  anon91_Then:
    assume {:partition} out_sdv_743 == 2;
    assume {:nonnull} in_Tmp_1092 != 0;
    assume in_Tmp_1092 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_1092)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} in_Tmp_1092 != 0;
    assume in_Tmp_1092 > 0;
    assume {:nonnull} in_Tmp_1092 != 0;
    assume in_Tmp_1092 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_1092))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} in_Tmp_1092 != 0;
    assume in_Tmp_1092 > 0;
    assume {:nonnull} in_Tmp_1092 != 0;
    assume in_Tmp_1092 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1070;
    havoc vslice_dummy_var_1071;
    call {:si_unique_call 3061} out_sdv_767 := SerialMemCompare(vslice_dummy_var_1070, vslice_dummy_var_1071, in_Tmp_1092, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_sdv_767 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1078;
    havoc vslice_dummy_var_1079;
    havoc vslice_dummy_var_1080;
    havoc vslice_dummy_var_1081;
    call {:si_unique_call 3065} out_sdv_770 := SerialMemCompare(vslice_dummy_var_1078, vslice_dummy_var_1079, vslice_dummy_var_1080, vslice_dummy_var_1081);
    goto anon93_Then;

  anon93_Then:
    assume {:partition} out_sdv_770 == 2;
    assume {:nonnull} in_Tmp_1091 != 0;
    assume in_Tmp_1091 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_1091)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} in_Tmp_1091 != 0;
    assume in_Tmp_1091 > 0;
    assume {:nonnull} in_Tmp_1091 != 0;
    assume in_Tmp_1091 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_1091))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} in_Tmp_1091 != 0;
    assume in_Tmp_1091 > 0;
    assume {:nonnull} in_Tmp_1091 != 0;
    assume in_Tmp_1091 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_1076;
    havoc vslice_dummy_var_1077;
    call {:si_unique_call 3064} out_sdv_744 := SerialMemCompare(vslice_dummy_var_1076, vslice_dummy_var_1077, in_Tmp_1091, 0);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} out_sdv_744 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1082;
    havoc vslice_dummy_var_1083;
    havoc vslice_dummy_var_1084;
    havoc vslice_dummy_var_1085;
    call {:si_unique_call 3066} out_sdv_753 := SerialMemCompare(vslice_dummy_var_1082, vslice_dummy_var_1083, vslice_dummy_var_1084, vslice_dummy_var_1085);
    goto anon95_Then;

  anon95_Then:
    assume {:partition} out_sdv_753 != 1;
    goto L105;

  L105:
    assume {:nonnull} in_Tmp_1081 != 0;
    assume in_Tmp_1081 > 0;
    Mem_T.INT4[LowPart__LUID(in_Tmp_1081)] := Mem_T.INT4[LowPart__LUID(SerialPhysicalZero_2)];
    assume {:nonnull} in_Tmp_1081 != 0;
    assume in_Tmp_1081 > 0;
    assume {:nonnull} in_Tmp_1081 != 0;
    assume in_Tmp_1081 > 0;
    Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(in_Tmp_1081))] := Mem_T.INT4[LowPart__LUID(u__LARGE_INTEGER(SerialPhysicalZero_2))];
    assume {:nonnull} in_Tmp_1081 != 0;
    assume in_Tmp_1081 > 0;
    assume {:nonnull} in_Tmp_1081 != 0;
    assume in_Tmp_1081 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1068;
    havoc vslice_dummy_var_1069;
    call {:si_unique_call 3060} out_sdv_756 := SerialMemCompare(vslice_dummy_var_1068, vslice_dummy_var_1069, in_Tmp_1081, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} out_sdv_756 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_1086;
    havoc vslice_dummy_var_1087;
    havoc vslice_dummy_var_1088;
    havoc vslice_dummy_var_1089;
    call {:si_unique_call 3067} out_sdv_749 := SerialMemCompare(vslice_dummy_var_1086, vslice_dummy_var_1087, vslice_dummy_var_1088, vslice_dummy_var_1089);
    goto anon97_Then;

  anon97_Then:
    assume {:partition} out_sdv_749 != 1;
    goto L84;

  L84:
    call {:si_unique_call 3057} out_Tmp_1072 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    Mem_T.INT4[out_Tmp_1072] := out_oldIrql_4;
    call {:si_unique_call 3058} sdv_KeAcquireSpinLock(0, out_Tmp_1072);
    assume {:nonnull} out_Tmp_1072 != 0;
    assume out_Tmp_1072 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_1072];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    call {:si_unique_call 3059} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    call {:si_unique_call 3056} out_sdv_750 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_750;
    goto anon98_Else_dummy;

  anon98_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 3068} {:si_old_unique_call 1} out_sdv_743, out_sdv_744, out_sdv_749, out_sdv_750, out_pCurDevObj, out_Tmp_1072, out_Tmp_1079, out_sdv_753, out_sdv_756, out_pExtension, out_oldIrql_4, out_sdv_767, out_sdv_770, out_vslice_dummy_var_534 := SerialFindInitController_loop_L78(out_sdv_743, out_sdv_744, out_sdv_749, out_sdv_750, out_pCurDevObj, out_Tmp_1072, out_Tmp_1079, out_sdv_753, in_Tmp_1081, out_sdv_756, out_pExtension, out_oldIrql_4, out_sdv_767, out_sdv_770, in_Tmp_1091, in_Tmp_1092, in_PConfig_1, out_vslice_dummy_var_534);
    return;

  anon98_Then:
    goto anon98_Then_dummy;

  anon98_Then_dummy:
    goto L_BAF_1;

  anon96_Then:
    assume {:partition} out_sdv_756 == 0;
    goto L84;

  anon94_Then:
    assume {:partition} out_sdv_744 == 0;
    goto L105;

  anon92_Then:
    assume {:partition} out_sdv_767 == 0;
    goto L105;

  anon90_Then:
    goto L84;

  anon89_Then:
    goto L84;

  anon88_Then:
    goto L84;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L78(in_sdv_743: int, in_sdv_744: int, in_sdv_749: int, in_sdv_750: int, in_pCurDevObj: int, in_Tmp_1072: int, in_Tmp_1079: int, in_sdv_753: int, in_Tmp_1081: int, in_sdv_756: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_767: int, in_sdv_770: int, in_Tmp_1091: int, in_Tmp_1092: int, in_PConfig_1: int, in_vslice_dummy_var_534: int) returns (out_sdv_743: int, out_sdv_744: int, out_sdv_749: int, out_sdv_750: int, out_pCurDevObj: int, out_Tmp_1072: int, out_Tmp_1079: int, out_sdv_753: int, out_sdv_756: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_767: int, out_sdv_770: int, out_vslice_dummy_var_534: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_743 == 0 || out_sdv_743 == 2 || out_sdv_743 == 1 || out_sdv_743 == in_sdv_743;
  free ensures {:va_keep} out_sdv_744 == 0 || out_sdv_744 == 2 || out_sdv_744 == 1 || out_sdv_744 == in_sdv_744;
  free ensures {:va_keep} out_sdv_749 == 0 || out_sdv_749 == 2 || out_sdv_749 == 1 || out_sdv_749 == in_sdv_749;
  free ensures {:va_keep} out_sdv_753 == 0 || out_sdv_753 == 2 || out_sdv_753 == 1 || out_sdv_753 == in_sdv_753;
  free ensures {:va_keep} out_sdv_756 == 0 || out_sdv_756 == 2 || out_sdv_756 == 1 || out_sdv_756 == in_sdv_756;
  free ensures {:va_keep} out_sdv_767 == 0 || out_sdv_767 == 2 || out_sdv_767 == 1 || out_sdv_767 == in_sdv_767;
  free ensures {:va_keep} out_sdv_770 == 0 || out_sdv_770 == 2 || out_sdv_770 == 1 || out_sdv_770 == in_sdv_770;
  free ensures {:va_keep} out_vslice_dummy_var_534 == 0 || out_vslice_dummy_var_534 == in_vslice_dummy_var_534;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartRead_loop_L23(in_Tmp_1198: int, in_localStatus: int, in_sdv_848: int, in_Tmp_1199: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp: int, in_Tmp_1201: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_854: int, in_Tmp_1202: int, in_oldIrql_6: int, in_sdv_856: int, in_constantVal: int, in_Tmp_1204: int, in_Tmp_1205: int, in_controlIrql: int, in_Tmp_1207: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_sdv_863: int, in_firstStatus: int, in_Extension_19: int, in_boogieTmp: int, in_vslice_dummy_var_566: int, in_vslice_dummy_var_567: int, in_vslice_dummy_var_568: int, in_vslice_dummy_var_571: int) returns (out_Tmp_1198: int, out_localStatus: int, out_sdv_848: int, out_Tmp_1199: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_Tmp_1201: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_854: int, out_Tmp_1202: int, out_oldIrql_6: int, out_sdv_856: int, out_constantVal: int, out_Tmp_1204: int, out_Tmp_1205: int, out_controlIrql: int, out_Tmp_1207: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_sdv_863: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_566: int, out_vslice_dummy_var_567: int, out_vslice_dummy_var_568: int, out_vslice_dummy_var_571: int)
{
  var vslice_dummy_var_1090: int;
  var vslice_dummy_var_1091: int;
  var vslice_dummy_var_1092: int;
  var vslice_dummy_var_1093: int;

  entry:
    out_Tmp_1198, out_localStatus, out_sdv_848, out_Tmp_1199, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_Tmp_1201, out_multiplierVal, out_crunchDownToOne, out_sdv_854, out_Tmp_1202, out_oldIrql_6, out_sdv_856, out_constantVal, out_Tmp_1204, out_Tmp_1205, out_controlIrql, out_Tmp_1207, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_863, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_566, out_vslice_dummy_var_567, out_vslice_dummy_var_568, out_vslice_dummy_var_571 := in_Tmp_1198, in_localStatus, in_sdv_848, in_Tmp_1199, in_os2ssreturn, in_setFirstStatus, in_useTotalTimer, in_Tmp_1201, in_multiplierVal, in_crunchDownToOne, in_sdv_854, in_Tmp_1202, in_oldIrql_6, in_sdv_856, in_constantVal, in_Tmp_1204, in_Tmp_1205, in_controlIrql, in_Tmp_1207, in_returnWithWhatsPresent, in_useIntervalTimer, in_sdv_863, in_firstStatus, in_boogieTmp, in_vslice_dummy_var_566, in_vslice_dummy_var_567, in_vslice_dummy_var_568, in_vslice_dummy_var_571;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc vslice_dummy_var_1090;
    call {:si_unique_call 3069} out_sdv_854 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1090);
    assume {:nonnull} out_sdv_854 != 0;
    assume out_sdv_854 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 3091} out_localStatus := SerialResizeBuffer(in_Extension_19);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    call {:si_unique_call 3070} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_19), ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_19), in_newIrp, 1, in_Extension_19);
    assume {:nonnull} in_newIrp != 0;
    assume in_newIrp > 0;
    goto anon61_Then;

  anon61_Then:
    goto anon61_Then_dummy;

  anon61_Then_dummy:
    call {:si_unique_call 3092} {:si_old_unique_call 1} out_Tmp_1198, out_localStatus, out_sdv_848, out_Tmp_1199, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_Tmp_1201, out_multiplierVal, out_crunchDownToOne, out_sdv_854, out_Tmp_1202, out_oldIrql_6, out_sdv_856, out_constantVal, out_Tmp_1204, out_Tmp_1205, out_controlIrql, out_Tmp_1207, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_863, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_566, out_vslice_dummy_var_567, out_vslice_dummy_var_568, out_vslice_dummy_var_571 := SerialStartRead_loop_L23(out_Tmp_1198, out_localStatus, out_sdv_848, out_Tmp_1199, in_totalTime, out_os2ssreturn, in_updateChar, in_timeoutsForIrp, out_setFirstStatus, out_useTotalTimer, in_newIrp, out_Tmp_1201, out_multiplierVal, out_crunchDownToOne, out_sdv_854, out_Tmp_1202, out_oldIrql_6, out_sdv_856, out_constantVal, out_Tmp_1204, out_Tmp_1205, out_controlIrql, out_Tmp_1207, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_863, out_firstStatus, in_Extension_19, out_boogieTmp, out_vslice_dummy_var_566, out_vslice_dummy_var_567, out_vslice_dummy_var_568, out_vslice_dummy_var_571);
    return;

  anon60_Then:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := out_localStatus;
    out_setFirstStatus := 1;
    goto L37;

  anon59_Then:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc vslice_dummy_var_1093;
    call {:si_unique_call 3081} out_sdv_856 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1093);
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} out_sdv_856 != 0;
    assume out_sdv_856 > 0;
    out_useTotalTimer := 0;
    out_returnWithWhatsPresent := 0;
    out_os2ssreturn := 0;
    out_crunchDownToOne := 0;
    out_useIntervalTimer := 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    call {:si_unique_call 3082} out_vslice_dummy_var_571 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_19), in_Extension_19);
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    call {:si_unique_call 3083} out_vslice_dummy_var_566 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_19), in_Extension_19);
    call {:si_unique_call 3084} out_Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    Mem_T.INT4[out_Tmp_1198] := out_controlIrql;
    call {:si_unique_call 3085} sdv_KeAcquireSpinLock(0, out_Tmp_1198);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_1198];
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    call {:si_unique_call 3086} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    out_useIntervalTimer := 1;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    goto L66;

  L66:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L76;

  L76:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  L83:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_useTotalTimer != 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_totalTime != 0;
    assume in_totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 3078} out_Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    Mem_T.INT4[out_Tmp_1198] := out_controlIrql;
    call {:si_unique_call 3079} sdv_KeAcquireSpinLock(0, out_Tmp_1198);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_1198];
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    call {:si_unique_call 3080} out_boogieTmp := SerialGetCharsFromIntBuffer(in_Extension_19);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} out_returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 3089} out_vslice_dummy_var_567 := KeSynchronizeExecution(0, li2bplFunctionConstant137, 0);
    call {:si_unique_call 3090} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1201;
    assume {:nonnull} out_Tmp_1201 != 0;
    assume out_Tmp_1201 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1201))] := 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon83_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon72_Then:
    assume {:partition} out_returnWithWhatsPresent == 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_os2ssreturn != 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1204;
    assume {:nonnull} out_Tmp_1204 != 0;
    assume out_Tmp_1204 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto L105;

  L105:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc vslice_dummy_var_1092;
    call {:si_unique_call 3075} out_sdv_863 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1092);
    assume {:nonnull} out_sdv_863 != 0;
    assume out_sdv_863 > 0;
    call {:si_unique_call 3076} out_Tmp_1198 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    Mem_T.INT4[out_Tmp_1198] := out_oldIrql_6;
    call {:si_unique_call 3077} IoAcquireCancelSpinLock(out_Tmp_1198);
    assume {:nonnull} out_Tmp_1198 != 0;
    assume out_Tmp_1198 > 0;
    out_oldIrql_6 := Mem_T.INT4[out_Tmp_1198];
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1202;
    assume {:nonnull} out_Tmp_1202 != 0;
    assume out_Tmp_1202 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 3087} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 3088} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1199;
    assume {:nonnull} out_Tmp_1199 != 0;
    assume out_Tmp_1199 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1199))] := -1073741536;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1207;
    assume {:nonnull} out_Tmp_1207 != 0;
    assume out_Tmp_1207 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := -1073741536;
    out_setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon85_Then:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} out_crunchDownToOne != 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc vslice_dummy_var_1091;
    call {:si_unique_call 3074} out_sdv_848 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1091);
    assume {:nonnull} out_sdv_848 != 0;
    assume out_sdv_848 > 0;
    goto L126;

  L126:
    call {:si_unique_call 3073} out_vslice_dummy_var_568 := KeSynchronizeExecution(0, li2bplFunctionConstant138, 0);
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    goto anon76_Else;

  anon76_Else:
    call {:si_unique_call 3071} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 3072} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    havoc out_Tmp_1205;
    assume {:nonnull} out_Tmp_1205 != 0;
    assume out_Tmp_1205 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1205))] := 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon87_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon75_Then:
    assume {:partition} out_crunchDownToOne == 0;
    goto L126;

  anon84_Then:
    goto L94;

  anon74_Then:
    assume {:partition} out_os2ssreturn == 0;
    goto L105;

  anon73_Then:
    goto L94;

  anon71_Then:
    assume {:partition} out_useTotalTimer == 0;
    goto L84;

  anon70_Then:
    goto L77;

  L77:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    out_crunchDownToOne := 1;
    out_multiplierVal := 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon80_Then:
    goto L83;

  anon69_Then:
    goto L83;

  anon68_Then:
    goto L77;

  anon66_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    out_returnWithWhatsPresent := 1;
    goto L83;

  anon67_Then:
    goto L76;

  anon63_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto L192;

  L192:
    out_useTotalTimer := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon65_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto L192;

  anon81_Then:
    goto L83;

  anon82_Then:
    assume {:nonnull} in_Extension_19 != 0;
    assume in_Extension_19 > 0;
    goto L66;

  anon64_Then:
    goto L66;

  anon62_Then:
    goto L66;
}



procedure {:LoopProcedure} SerialStartRead_loop_L23(in_Tmp_1198: int, in_localStatus: int, in_sdv_848: int, in_Tmp_1199: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp: int, in_Tmp_1201: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_854: int, in_Tmp_1202: int, in_oldIrql_6: int, in_sdv_856: int, in_constantVal: int, in_Tmp_1204: int, in_Tmp_1205: int, in_controlIrql: int, in_Tmp_1207: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_sdv_863: int, in_firstStatus: int, in_Extension_19: int, in_boogieTmp: int, in_vslice_dummy_var_566: int, in_vslice_dummy_var_567: int, in_vslice_dummy_var_568: int, in_vslice_dummy_var_571: int) returns (out_Tmp_1198: int, out_localStatus: int, out_sdv_848: int, out_Tmp_1199: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_Tmp_1201: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_854: int, out_Tmp_1202: int, out_oldIrql_6: int, out_sdv_856: int, out_constantVal: int, out_Tmp_1204: int, out_Tmp_1205: int, out_controlIrql: int, out_Tmp_1207: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_sdv_863: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_566: int, out_vslice_dummy_var_567: int, out_vslice_dummy_var_568: int, out_vslice_dummy_var_571: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_localStatus == 0 || out_localStatus == in_localStatus;
  free ensures {:va_keep} out_os2ssreturn == 0 || out_os2ssreturn == 1 || out_os2ssreturn == in_os2ssreturn;
  free ensures {:va_keep} out_setFirstStatus == 1 || out_setFirstStatus == in_setFirstStatus;
  free ensures {:va_keep} out_useTotalTimer == 0 || out_useTotalTimer == 1 || out_useTotalTimer == in_useTotalTimer;
  free ensures {:va_keep} out_crunchDownToOne == 0 || out_crunchDownToOne == 1 || out_crunchDownToOne == in_crunchDownToOne;
  free ensures {:va_keep} out_returnWithWhatsPresent == 1 || out_returnWithWhatsPresent == 0 || out_returnWithWhatsPresent == in_returnWithWhatsPresent;
  free ensures {:va_keep} out_useIntervalTimer == 1 || out_useIntervalTimer == 0 || out_useIntervalTimer == in_useIntervalTimer;
  free ensures {:va_keep} out_firstStatus == 0 || out_firstStatus == -1073741536 || out_firstStatus == in_firstStatus;
  free ensures {:va_keep} out_vslice_dummy_var_566 == 1 || out_vslice_dummy_var_566 == 0 || out_vslice_dummy_var_566 == in_vslice_dummy_var_566;
  free ensures {:va_keep} out_vslice_dummy_var_567 == 1 || out_vslice_dummy_var_567 == 0 || out_vslice_dummy_var_567 == in_vslice_dummy_var_567;
  free ensures {:va_keep} out_vslice_dummy_var_568 == 1 || out_vslice_dummy_var_568 == 0 || out_vslice_dummy_var_568 == in_vslice_dummy_var_568;
  free ensures {:va_keep} out_vslice_dummy_var_571 == 1 || out_vslice_dummy_var_571 == 0 || out_vslice_dummy_var_571 == in_vslice_dummy_var_571;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartMask_loop_L11(in_Tmp_1255: int, in_s_p_e_c_i_a_l_19: int, in_Tmp_1256: int, in_FirstStatus_1: int, in_Tmp_1257: int, in_SetFirstStatus_1: int, in_Tmp_1258: int, in_Tmp_1259: int, in_Tmp_1260: int, in_Tmp_1261: int, in_Tmp_1262: int, in_Tmp_1263: int, in_Tmp_1264: int, in_IrpSp_3: int, in_Tmp_1265: int, in_OldIrql_12: int, in_Tmp_1266: int, in_NewIrp_4: int, in_s_p_e_c_i_a_l_20: int, in_Tmp_1268: int, in_Tmp_1269: int, in_sdv_903: int, in_Tmp_1270: int, in_Tmp_1271: int, in_sdv_906: int, in_Tmp_1272: int, in_Tmp_1273: int, in_Extension_24: int, in_vslice_dummy_var_597: int, in_vslice_dummy_var_599: int, in_vslice_dummy_var_600: int, in_vslice_dummy_var_601: int, in_vslice_dummy_var_602: int, in_vslice_dummy_var_603: int, in_vslice_dummy_var_604: int, in_vslice_dummy_var_605: int, in_vslice_dummy_var_606: int, in_vslice_dummy_var_607: int, in_vslice_dummy_var_608: int, in_vslice_dummy_var_609: int, in_vslice_dummy_var_610: int, in_vslice_dummy_var_611: int, in_vslice_dummy_var_612: int, in_vslice_dummy_var_613: int) returns (out_Tmp_1255: int, out_s_p_e_c_i_a_l_19: int, out_Tmp_1256: int, out_FirstStatus_1: int, out_Tmp_1257: int, out_SetFirstStatus_1: int, out_Tmp_1258: int, out_Tmp_1259: int, out_Tmp_1260: int, out_Tmp_1261: int, out_Tmp_1262: int, out_Tmp_1263: int, out_Tmp_1264: int, out_IrpSp_3: int, out_Tmp_1265: int, out_OldIrql_12: int, out_Tmp_1266: int, out_s_p_e_c_i_a_l_20: int, out_Tmp_1268: int, out_Tmp_1269: int, out_sdv_903: int, out_Tmp_1270: int, out_Tmp_1271: int, out_sdv_906: int, out_Tmp_1272: int, out_Tmp_1273: int, out_vslice_dummy_var_597: int, out_vslice_dummy_var_599: int, out_vslice_dummy_var_600: int, out_vslice_dummy_var_601: int, out_vslice_dummy_var_602: int, out_vslice_dummy_var_603: int, out_vslice_dummy_var_604: int, out_vslice_dummy_var_605: int, out_vslice_dummy_var_606: int, out_vslice_dummy_var_607: int, out_vslice_dummy_var_608: int, out_vslice_dummy_var_609: int, out_vslice_dummy_var_610: int, out_vslice_dummy_var_611: int, out_vslice_dummy_var_612: int, out_vslice_dummy_var_613: int)
{
  var vslice_dummy_var_1094: int;
  var vslice_dummy_var_1095: int;
  var vslice_dummy_var_1096: int;
  var vslice_dummy_var_1097: int;

  entry:
    out_Tmp_1255, out_s_p_e_c_i_a_l_19, out_Tmp_1256, out_FirstStatus_1, out_Tmp_1257, out_SetFirstStatus_1, out_Tmp_1258, out_Tmp_1259, out_Tmp_1260, out_Tmp_1261, out_Tmp_1262, out_Tmp_1263, out_Tmp_1264, out_IrpSp_3, out_Tmp_1265, out_OldIrql_12, out_Tmp_1266, out_s_p_e_c_i_a_l_20, out_Tmp_1268, out_Tmp_1269, out_sdv_903, out_Tmp_1270, out_Tmp_1271, out_sdv_906, out_Tmp_1272, out_Tmp_1273, out_vslice_dummy_var_597, out_vslice_dummy_var_599, out_vslice_dummy_var_600, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605, out_vslice_dummy_var_606, out_vslice_dummy_var_607, out_vslice_dummy_var_608, out_vslice_dummy_var_609, out_vslice_dummy_var_610, out_vslice_dummy_var_611, out_vslice_dummy_var_612, out_vslice_dummy_var_613 := in_Tmp_1255, in_s_p_e_c_i_a_l_19, in_Tmp_1256, in_FirstStatus_1, in_Tmp_1257, in_SetFirstStatus_1, in_Tmp_1258, in_Tmp_1259, in_Tmp_1260, in_Tmp_1261, in_Tmp_1262, in_Tmp_1263, in_Tmp_1264, in_IrpSp_3, in_Tmp_1265, in_OldIrql_12, in_Tmp_1266, in_s_p_e_c_i_a_l_20, in_Tmp_1268, in_Tmp_1269, in_sdv_903, in_Tmp_1270, in_Tmp_1271, in_sdv_906, in_Tmp_1272, in_Tmp_1273, in_vslice_dummy_var_597, in_vslice_dummy_var_599, in_vslice_dummy_var_600, in_vslice_dummy_var_601, in_vslice_dummy_var_602, in_vslice_dummy_var_603, in_vslice_dummy_var_604, in_vslice_dummy_var_605, in_vslice_dummy_var_606, in_vslice_dummy_var_607, in_vslice_dummy_var_608, in_vslice_dummy_var_609, in_vslice_dummy_var_610, in_vslice_dummy_var_611, in_vslice_dummy_var_612, in_vslice_dummy_var_613;
    goto L11, exit;

  exit:
    return;

  L11:
    out_Tmp_1255 := strConst__li2bpl309;
    call {:si_unique_call 3093} out_vslice_dummy_var_599 := SerialDbgPrintEx(7, out_Tmp_1255);
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc vslice_dummy_var_1094;
    call {:si_unique_call 3094} out_IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1094);
    assume {:nonnull} out_IrpSp_3 != 0;
    assume out_IrpSp_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    out_Tmp_1265 := strConst__li2bpl310;
    call {:si_unique_call 3118} out_vslice_dummy_var_600 := SerialDbgPrintEx(7, out_Tmp_1265);
    call {:si_unique_call 3119} out_vslice_dummy_var_597 := KeSynchronizeExecution(0, li2bplFunctionConstant196, 0);
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc out_Tmp_1271;
    assume {:nonnull} out_Tmp_1271 != 0;
    assume out_Tmp_1271 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1271))] := 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L31;

  L31:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    call {:si_unique_call 3095} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_24), in_NewIrp_4, 1, in_Extension_24);
    out_Tmp_1272 := strConst__li2bpl312;
    call {:si_unique_call 3096} out_vslice_dummy_var_601 := SerialDbgPrintEx(7, out_Tmp_1272);
    goto L37;

  L37:
    assume {:nonnull} in_NewIrp_4 != 0;
    assume in_NewIrp_4 > 0;
    goto anon21_Then;

  anon21_Then:
    goto anon21_Then_dummy;

  anon21_Then_dummy:
    call {:si_unique_call 3120} {:si_old_unique_call 1} out_Tmp_1255, out_s_p_e_c_i_a_l_19, out_Tmp_1256, out_FirstStatus_1, out_Tmp_1257, out_SetFirstStatus_1, out_Tmp_1258, out_Tmp_1259, out_Tmp_1260, out_Tmp_1261, out_Tmp_1262, out_Tmp_1263, out_Tmp_1264, out_IrpSp_3, out_Tmp_1265, out_OldIrql_12, out_Tmp_1266, out_s_p_e_c_i_a_l_20, out_Tmp_1268, out_Tmp_1269, out_sdv_903, out_Tmp_1270, out_Tmp_1271, out_sdv_906, out_Tmp_1272, out_Tmp_1273, out_vslice_dummy_var_597, out_vslice_dummy_var_599, out_vslice_dummy_var_600, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605, out_vslice_dummy_var_606, out_vslice_dummy_var_607, out_vslice_dummy_var_608, out_vslice_dummy_var_609, out_vslice_dummy_var_610, out_vslice_dummy_var_611, out_vslice_dummy_var_612, out_vslice_dummy_var_613 := SerialStartMask_loop_L11(out_Tmp_1255, out_s_p_e_c_i_a_l_19, out_Tmp_1256, out_FirstStatus_1, out_Tmp_1257, out_SetFirstStatus_1, out_Tmp_1258, out_Tmp_1259, out_Tmp_1260, out_Tmp_1261, out_Tmp_1262, out_Tmp_1263, out_Tmp_1264, out_IrpSp_3, out_Tmp_1265, out_OldIrql_12, out_Tmp_1266, in_NewIrp_4, out_s_p_e_c_i_a_l_20, out_Tmp_1268, out_Tmp_1269, out_sdv_903, out_Tmp_1270, out_Tmp_1271, out_sdv_906, out_Tmp_1272, out_Tmp_1273, in_Extension_24, out_vslice_dummy_var_597, out_vslice_dummy_var_599, out_vslice_dummy_var_600, out_vslice_dummy_var_601, out_vslice_dummy_var_602, out_vslice_dummy_var_603, out_vslice_dummy_var_604, out_vslice_dummy_var_605, out_vslice_dummy_var_606, out_vslice_dummy_var_607, out_vslice_dummy_var_608, out_vslice_dummy_var_609, out_vslice_dummy_var_610, out_vslice_dummy_var_611, out_vslice_dummy_var_612, out_vslice_dummy_var_613);
    return;

  anon24_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_1263 := strConst__li2bpl311;
    call {:si_unique_call 3117} out_vslice_dummy_var_602 := SerialDbgPrintEx(7, out_Tmp_1263);
    out_FirstStatus_1 := 0;
    out_SetFirstStatus_1 := 1;
    goto L31;

  anon19_Then:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 3112} out_Tmp_1261 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1261 != 0;
    assume out_Tmp_1261 > 0;
    Mem_T.INT4[out_Tmp_1261] := out_OldIrql_12;
    call {:si_unique_call 3113} IoAcquireCancelSpinLock(out_Tmp_1261);
    assume {:nonnull} out_Tmp_1261 != 0;
    assume out_Tmp_1261 > 0;
    out_OldIrql_12 := Mem_T.INT4[out_Tmp_1261];
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc out_Tmp_1260;
    assume {:nonnull} out_Tmp_1260 != 0;
    assume out_Tmp_1260 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    out_Tmp_1257 := strConst__li2bpl315;
    call {:si_unique_call 3115} out_vslice_dummy_var_606 := SerialDbgPrintEx(7, out_Tmp_1257);
    call {:si_unique_call 3116} IoReleaseCancelSpinLock(out_OldIrql_12);
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc out_Tmp_1258;
    assume {:nonnull} out_Tmp_1258 != 0;
    assume out_Tmp_1258 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1258))] := -1073741536;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L64;

  L64:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    call {:si_unique_call 3097} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_24), in_NewIrp_4, 1, in_Extension_24);
    out_Tmp_1273 := strConst__li2bpl312;
    call {:si_unique_call 3098} out_vslice_dummy_var_607 := SerialDbgPrintEx(7, out_Tmp_1273);
    goto L37;

  anon27_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_1266 := strConst__li2bpl311;
    call {:si_unique_call 3114} out_vslice_dummy_var_608 := SerialDbgPrintEx(7, out_Tmp_1266);
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L64;

  anon26_Then:
    out_Tmp_1268 := strConst__li2bpl314;
    call {:si_unique_call 3111} out_vslice_dummy_var_609 := SerialDbgPrintEx(7, out_Tmp_1268);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L76;

  L76:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc vslice_dummy_var_1095;
    call {:si_unique_call 3099} out_sdv_903 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1095);
    assume {:nonnull} out_sdv_903 != 0;
    assume out_sdv_903 > 0;
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc vslice_dummy_var_1096;
    call {:si_unique_call 3100} out_vslice_dummy_var_610 := sdv_IoSetCancelRoutine(vslice_dummy_var_1096, li2bplFunctionConstant197);
    out_s_p_e_c_i_a_l_20 := 2;
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc vslice_dummy_var_1097;
    call {:si_unique_call 3101} out_sdv_906 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1097);
    assume {:nonnull} out_sdv_906 != 0;
    assume out_sdv_906 > 0;
    out_s_p_e_c_i_a_l_19 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_906)));
    assume {:nonnull} out_s_p_e_c_i_a_l_19 != 0;
    assume out_s_p_e_c_i_a_l_19 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_19] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_19], out_s_p_e_c_i_a_l_20);
    call {:si_unique_call 3102} out_vslice_dummy_var_611 := KeSynchronizeExecution(0, li2bplFunctionConstant198, 0);
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    call {:si_unique_call 3103} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_24), in_NewIrp_4, 0, in_Extension_24, out_OldIrql_12);
    out_Tmp_1256 := strConst__li2bpl312;
    call {:si_unique_call 3104} out_vslice_dummy_var_612 := SerialDbgPrintEx(7, out_Tmp_1256);
    goto L37;

  anon23_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_1270 := strConst__li2bpl311;
    call {:si_unique_call 3109} out_vslice_dummy_var_613 := SerialDbgPrintEx(7, out_Tmp_1270);
    out_FirstStatus_1 := 259;
    out_SetFirstStatus_1 := 1;
    call {:si_unique_call 3110} sdv_IoMarkIrpPending(0);
    goto L76;

  anon22_Then:
    goto L41;

  L41:
    out_Tmp_1269 := strConst__li2bpl313;
    call {:si_unique_call 3108} out_vslice_dummy_var_603 := SerialDbgPrintEx(7, out_Tmp_1269);
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    havoc out_Tmp_1264;
    assume {:nonnull} out_Tmp_1264 != 0;
    assume out_Tmp_1264 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1264))] := -1073741811;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L112;

  L112:
    assume {:nonnull} in_Extension_24 != 0;
    assume in_Extension_24 > 0;
    call {:si_unique_call 3105} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_24), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_24), in_NewIrp_4, 1, in_Extension_24);
    out_Tmp_1259 := strConst__li2bpl312;
    call {:si_unique_call 3106} out_vslice_dummy_var_604 := SerialDbgPrintEx(7, out_Tmp_1259);
    goto L37;

  anon25_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_1262 := strConst__li2bpl311;
    call {:si_unique_call 3107} out_vslice_dummy_var_605 := SerialDbgPrintEx(7, out_Tmp_1262);
    out_FirstStatus_1 := -1073741811;
    out_SetFirstStatus_1 := 1;
    goto L112;

  anon20_Then:
    goto L41;
}



procedure {:LoopProcedure} SerialStartMask_loop_L11(in_Tmp_1255: int, in_s_p_e_c_i_a_l_19: int, in_Tmp_1256: int, in_FirstStatus_1: int, in_Tmp_1257: int, in_SetFirstStatus_1: int, in_Tmp_1258: int, in_Tmp_1259: int, in_Tmp_1260: int, in_Tmp_1261: int, in_Tmp_1262: int, in_Tmp_1263: int, in_Tmp_1264: int, in_IrpSp_3: int, in_Tmp_1265: int, in_OldIrql_12: int, in_Tmp_1266: int, in_NewIrp_4: int, in_s_p_e_c_i_a_l_20: int, in_Tmp_1268: int, in_Tmp_1269: int, in_sdv_903: int, in_Tmp_1270: int, in_Tmp_1271: int, in_sdv_906: int, in_Tmp_1272: int, in_Tmp_1273: int, in_Extension_24: int, in_vslice_dummy_var_597: int, in_vslice_dummy_var_599: int, in_vslice_dummy_var_600: int, in_vslice_dummy_var_601: int, in_vslice_dummy_var_602: int, in_vslice_dummy_var_603: int, in_vslice_dummy_var_604: int, in_vslice_dummy_var_605: int, in_vslice_dummy_var_606: int, in_vslice_dummy_var_607: int, in_vslice_dummy_var_608: int, in_vslice_dummy_var_609: int, in_vslice_dummy_var_610: int, in_vslice_dummy_var_611: int, in_vslice_dummy_var_612: int, in_vslice_dummy_var_613: int) returns (out_Tmp_1255: int, out_s_p_e_c_i_a_l_19: int, out_Tmp_1256: int, out_FirstStatus_1: int, out_Tmp_1257: int, out_SetFirstStatus_1: int, out_Tmp_1258: int, out_Tmp_1259: int, out_Tmp_1260: int, out_Tmp_1261: int, out_Tmp_1262: int, out_Tmp_1263: int, out_Tmp_1264: int, out_IrpSp_3: int, out_Tmp_1265: int, out_OldIrql_12: int, out_Tmp_1266: int, out_s_p_e_c_i_a_l_20: int, out_Tmp_1268: int, out_Tmp_1269: int, out_sdv_903: int, out_Tmp_1270: int, out_Tmp_1271: int, out_sdv_906: int, out_Tmp_1272: int, out_Tmp_1273: int, out_vslice_dummy_var_597: int, out_vslice_dummy_var_599: int, out_vslice_dummy_var_600: int, out_vslice_dummy_var_601: int, out_vslice_dummy_var_602: int, out_vslice_dummy_var_603: int, out_vslice_dummy_var_604: int, out_vslice_dummy_var_605: int, out_vslice_dummy_var_606: int, out_vslice_dummy_var_607: int, out_vslice_dummy_var_608: int, out_vslice_dummy_var_609: int, out_vslice_dummy_var_610: int, out_vslice_dummy_var_611: int, out_vslice_dummy_var_612: int, out_vslice_dummy_var_613: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_FirstStatus_1 == 0 || out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == 259 || out_FirstStatus_1 == -1073741811 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_20 == 2 || out_s_p_e_c_i_a_l_20 == in_s_p_e_c_i_a_l_20;
  free ensures {:va_keep} out_vslice_dummy_var_597 == 1 || out_vslice_dummy_var_597 == 0 || out_vslice_dummy_var_597 == in_vslice_dummy_var_597;
  free ensures {:va_keep} out_vslice_dummy_var_599 == 0 || out_vslice_dummy_var_599 == in_vslice_dummy_var_599;
  free ensures {:va_keep} out_vslice_dummy_var_600 == 0 || out_vslice_dummy_var_600 == in_vslice_dummy_var_600;
  free ensures {:va_keep} out_vslice_dummy_var_601 == 0 || out_vslice_dummy_var_601 == in_vslice_dummy_var_601;
  free ensures {:va_keep} out_vslice_dummy_var_602 == 0 || out_vslice_dummy_var_602 == in_vslice_dummy_var_602;
  free ensures {:va_keep} out_vslice_dummy_var_603 == 0 || out_vslice_dummy_var_603 == in_vslice_dummy_var_603;
  free ensures {:va_keep} out_vslice_dummy_var_604 == 0 || out_vslice_dummy_var_604 == in_vslice_dummy_var_604;
  free ensures {:va_keep} out_vslice_dummy_var_605 == 0 || out_vslice_dummy_var_605 == in_vslice_dummy_var_605;
  free ensures {:va_keep} out_vslice_dummy_var_606 == 0 || out_vslice_dummy_var_606 == in_vslice_dummy_var_606;
  free ensures {:va_keep} out_vslice_dummy_var_607 == 0 || out_vslice_dummy_var_607 == in_vslice_dummy_var_607;
  free ensures {:va_keep} out_vslice_dummy_var_608 == 0 || out_vslice_dummy_var_608 == in_vslice_dummy_var_608;
  free ensures {:va_keep} out_vslice_dummy_var_609 == 0 || out_vslice_dummy_var_609 == in_vslice_dummy_var_609;
  free ensures {:va_keep} out_vslice_dummy_var_611 == 1 || out_vslice_dummy_var_611 == 0 || out_vslice_dummy_var_611 == in_vslice_dummy_var_611;
  free ensures {:va_keep} out_vslice_dummy_var_612 == 0 || out_vslice_dummy_var_612 == in_vslice_dummy_var_612;
  free ensures {:va_keep} out_vslice_dummy_var_613 == 0 || out_vslice_dummy_var_613 == in_vslice_dummy_var_613;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_pDevExt_19: int, in_sdv_936: int, in_Tmp_1310: int, in_sdv_937: int, in_cancelRoutine_1: int, in_PDevObj_18: int, in_vslice_dummy_var_635: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_sdv_936: int, out_Tmp_1310: int, out_sdv_937: int, out_cancelRoutine_1: int, out_vslice_dummy_var_635: int)
{
  var vslice_dummy_var_1098: int;

  entry:
    out_currentLastIrp, out_cancelIrql, out_sdv_936, out_Tmp_1310, out_sdv_937, out_cancelRoutine_1, out_vslice_dummy_var_635 := in_currentLastIrp, in_cancelIrql, in_sdv_936, in_Tmp_1310, in_sdv_937, in_cancelRoutine_1, in_vslice_dummy_var_635;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 3121} out_sdv_936 := sdv_IsListEmpty(0);
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_sdv_936 == 0;
    assume {:nonnull} in_pDevExt_19 != 0;
    assume in_pDevExt_19 > 0;
    havoc vslice_dummy_var_1098;
    call {:si_unique_call 3130} out_sdv_937 := sdv_containing_record(vslice_dummy_var_1098, 88);
    out_currentLastIrp := out_sdv_937;
    call {:si_unique_call 3131} out_vslice_dummy_var_635 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    out_cancelRoutine_1 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)];
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_currentLastIrp)] := out_cancelIrql;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp)] := 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant214;
    call {:si_unique_call 3124} SerialCancelCurrentWrite(in_PDevObj_18, out_currentLastIrp);
    goto L32;

  L32:
    call {:si_unique_call 3122} out_Tmp_1310 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1310 != 0;
    assume out_Tmp_1310 > 0;
    Mem_T.INT4[out_Tmp_1310] := out_cancelIrql;
    call {:si_unique_call 3123} IoAcquireCancelSpinLock(out_Tmp_1310);
    assume {:nonnull} out_Tmp_1310 != 0;
    assume out_Tmp_1310 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_1310];
    goto L32_dummy;

  L32_dummy:
    call {:si_unique_call 3132} {:si_old_unique_call 1} out_currentLastIrp, out_cancelIrql, out_sdv_936, out_Tmp_1310, out_sdv_937, out_cancelRoutine_1, out_vslice_dummy_var_635 := SerialKillAllStalled_loop_L10(out_currentLastIrp, out_cancelIrql, in_pDevExt_19, out_sdv_936, out_Tmp_1310, out_sdv_937, out_cancelRoutine_1, in_PDevObj_18, out_vslice_dummy_var_635);
    return;

  anon17_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant218;
    call {:si_unique_call 3125} SerialCancelCurrentXoff(in_PDevObj_18, out_currentLastIrp);
    goto L32;

  anon16_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant351;
    call {:si_unique_call 3126} SerialCancelImmediate(in_PDevObj_18, out_currentLastIrp);
    goto L32;

  anon15_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant166;
    call {:si_unique_call 3127} SerialCancelQueued(in_PDevObj_18, out_currentLastIrp);
    goto L32;

  anon14_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 3128} SerialCancelWait(in_PDevObj_18, out_currentLastIrp);
    goto L32;

  anon18_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant168;
    call {:si_unique_call 3129} SerialFilterCancelQueued(in_PDevObj_18, out_currentLastIrp);
    goto L32;
}



procedure {:LoopProcedure} SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_pDevExt_19: int, in_sdv_936: int, in_Tmp_1310: int, in_sdv_937: int, in_cancelRoutine_1: int, in_PDevObj_18: int, in_vslice_dummy_var_635: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_sdv_936: int, out_Tmp_1310: int, out_sdv_937: int, out_cancelRoutine_1: int, out_vslice_dummy_var_635: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_936 == 1 || out_sdv_936 == 0 || out_sdv_936 == in_sdv_936;
  free ensures {:va_keep} out_vslice_dummy_var_635 == 1 || out_vslice_dummy_var_635 == 0 || out_vslice_dummy_var_635 == in_vslice_dummy_var_635;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialUnstallIrps_loop_L16(in_Tmp_1322: int, in_Tmp_1323: int, in_sdv_951: int, in_oldIrql_11: int, in_pIrpStack_6: int, in_pIrp_1: int, in_pDevObj_2: int, in_Tmp_1325: int, in_pIrpLink: int, in_pDrvObj_1: int, in_Tmp_1326: int, in_PDevExt_16: int, in_vslice_dummy_var_642: int, in_vslice_dummy_var_643: int, in_vslice_dummy_var_644: int) returns (out_Tmp_1322: int, out_Tmp_1323: int, out_sdv_951: int, out_oldIrql_11: int, out_pIrpStack_6: int, out_pIrp_1: int, out_pDevObj_2: int, out_Tmp_1325: int, out_pIrpLink: int, out_pDrvObj_1: int, out_Tmp_1326: int, out_vslice_dummy_var_642: int, out_vslice_dummy_var_643: int, out_vslice_dummy_var_644: int)
{

  entry:
    out_Tmp_1322, out_Tmp_1323, out_sdv_951, out_oldIrql_11, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_1325, out_pIrpLink, out_pDrvObj_1, out_Tmp_1326, out_vslice_dummy_var_642, out_vslice_dummy_var_643, out_vslice_dummy_var_644 := in_Tmp_1322, in_Tmp_1323, in_sdv_951, in_oldIrql_11, in_pIrpStack_6, in_pIrp_1, in_pDevObj_2, in_Tmp_1325, in_pIrpLink, in_pDrvObj_1, in_Tmp_1326, in_vslice_dummy_var_642, in_vslice_dummy_var_643, in_vslice_dummy_var_644;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon59_Else;

  anon59_Else:
    call {:si_unique_call 3135} out_sdv_951 := sdv_containing_record(out_pIrpLink, 88);
    out_pIrp_1 := out_sdv_951;
    call {:si_unique_call 3136} out_vslice_dummy_var_642 := sdv_RemoveEntryList(0);
    call {:si_unique_call 3137} out_pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(out_pIrp_1);
    assume {:nonnull} out_pIrpStack_6 != 0;
    assume out_pIrpStack_6 > 0;
    havoc out_pDevObj_2;
    assume {:nonnull} out_pDevObj_2 != 0;
    assume out_pDevObj_2 > 0;
    havoc out_pDrvObj_1;
    call {:si_unique_call 3138} out_vslice_dummy_var_643 := sdv_IoSetCancelRoutine(out_pIrp_1, 0);
    call {:si_unique_call 3139} IoReleaseCancelSpinLock(out_oldIrql_11);
    out_Tmp_1326 := strConst__li2bpl322;
    call {:si_unique_call 3140} out_vslice_dummy_var_644 := SerialDbgPrintEx(12, out_Tmp_1326);
    assume {:nonnull} out_pIrpStack_6 != 0;
    assume out_pIrpStack_6 > 0;
    havoc out_Tmp_1322;
    assume {:nonnull} out_pDrvObj_1 != 0;
    assume out_pDrvObj_1 > 0;
    havoc out_Tmp_1325;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume out_Tmp_1322 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume out_Tmp_1322 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume out_Tmp_1322 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume out_Tmp_1322 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume out_Tmp_1322 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume out_Tmp_1322 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume out_Tmp_1322 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume out_Tmp_1322 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume out_Tmp_1322 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume out_Tmp_1322 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume out_Tmp_1322 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume out_Tmp_1322 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume out_Tmp_1322 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume out_Tmp_1322 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume out_Tmp_1322 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume out_Tmp_1322 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume out_Tmp_1322 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume out_Tmp_1322 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume out_Tmp_1322 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume out_Tmp_1322 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume out_Tmp_1322 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume out_Tmp_1322 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume out_Tmp_1322 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume out_Tmp_1322 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume out_Tmp_1322 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume out_Tmp_1322 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume out_Tmp_1322 != 1;
    goto anon87_Then;

  anon87_Then:
    assume out_Tmp_1322 == 0;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325] == 0;
    goto L45;

  L45:
    call {:si_unique_call 3133} out_Tmp_1323 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1323 != 0;
    assume out_Tmp_1323 > 0;
    Mem_T.INT4[out_Tmp_1323] := out_oldIrql_11;
    call {:si_unique_call 3134} IoAcquireCancelSpinLock(out_Tmp_1323);
    assume {:nonnull} out_Tmp_1323 != 0;
    assume out_Tmp_1323 > 0;
    out_oldIrql_11 := Mem_T.INT4[out_Tmp_1323];
    assume {:nonnull} in_PDevExt_16 != 0;
    assume in_PDevExt_16 > 0;
    havoc out_pIrpLink;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 3141} {:si_old_unique_call 1} out_Tmp_1322, out_Tmp_1323, out_sdv_951, out_oldIrql_11, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_1325, out_pIrpLink, out_pDrvObj_1, out_Tmp_1326, out_vslice_dummy_var_642, out_vslice_dummy_var_643, out_vslice_dummy_var_644 := SerialUnstallIrps_loop_L16(out_Tmp_1322, out_Tmp_1323, out_sdv_951, out_oldIrql_11, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_1325, out_pIrpLink, out_pDrvObj_1, out_Tmp_1326, in_PDevExt_16, out_vslice_dummy_var_642, out_vslice_dummy_var_643, out_vslice_dummy_var_644);
    return;

  anon86_Then:
    assume out_Tmp_1322 == 1;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume out_Tmp_1322 == 2;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume out_Tmp_1322 == 3;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume out_Tmp_1322 == 4;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume out_Tmp_1322 == 5;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume out_Tmp_1322 == 6;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume out_Tmp_1322 == 7;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume out_Tmp_1322 == 8;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume out_Tmp_1322 == 9;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume out_Tmp_1322 == 10;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume out_Tmp_1322 == 11;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume out_Tmp_1322 == 12;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume out_Tmp_1322 == 13;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume out_Tmp_1322 == 14;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume out_Tmp_1322 == 15;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume out_Tmp_1322 == 16;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume out_Tmp_1322 == 17;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume out_Tmp_1322 == 18;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume out_Tmp_1322 == 19;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume out_Tmp_1322 == 20;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume out_Tmp_1322 == 21;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume out_Tmp_1322 == 22;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume out_Tmp_1322 == 23;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume out_Tmp_1322 == 24;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume out_Tmp_1322 == 25;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume out_Tmp_1322 == 26;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume out_Tmp_1322 == 27;
    assume {:nonnull} out_Tmp_1325 != 0;
    assume out_Tmp_1325 > 0;
    assume Mem_T.INT4[out_Tmp_1325 + 27 * 4] == 0;
    goto L45;
}



procedure {:LoopProcedure} SerialUnstallIrps_loop_L16(in_Tmp_1322: int, in_Tmp_1323: int, in_sdv_951: int, in_oldIrql_11: int, in_pIrpStack_6: int, in_pIrp_1: int, in_pDevObj_2: int, in_Tmp_1325: int, in_pIrpLink: int, in_pDrvObj_1: int, in_Tmp_1326: int, in_PDevExt_16: int, in_vslice_dummy_var_642: int, in_vslice_dummy_var_643: int, in_vslice_dummy_var_644: int) returns (out_Tmp_1322: int, out_Tmp_1323: int, out_sdv_951: int, out_oldIrql_11: int, out_pIrpStack_6: int, out_pIrp_1: int, out_pDevObj_2: int, out_Tmp_1325: int, out_pIrpLink: int, out_pDrvObj_1: int, out_Tmp_1326: int, out_vslice_dummy_var_642: int, out_vslice_dummy_var_643: int, out_vslice_dummy_var_644: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_vslice_dummy_var_642 == 1 || out_vslice_dummy_var_642 == 0 || out_vslice_dummy_var_642 == in_vslice_dummy_var_642;
  free ensures {:va_keep} out_vslice_dummy_var_644 == 0 || out_vslice_dummy_var_644 == in_vslice_dummy_var_644;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_sdv_956: int, in_Tmp_1327: int, in_sdv_957: int, in_cancelRoutine_2: int, in_DeviceObject_25: int, in_QueueToClean: int, in_vslice_dummy_var_647: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_sdv_956: int, out_Tmp_1327: int, out_sdv_957: int, out_cancelRoutine_2: int, out_vslice_dummy_var_647: int)
{
  var vslice_dummy_var_1099: int;

  entry:
    out_currentLastIrp_1, out_cancelIrql_1, out_sdv_956, out_Tmp_1327, out_sdv_957, out_cancelRoutine_2, out_vslice_dummy_var_647 := in_currentLastIrp_1, in_cancelIrql_1, in_sdv_956, in_Tmp_1327, in_sdv_957, in_cancelRoutine_2, in_vslice_dummy_var_647;
    goto L8, exit;

  exit:
    return;

  L8:
    call {:si_unique_call 3142} out_sdv_956 := sdv_IsListEmpty(0);
    goto anon27_Else;

  anon27_Else:
    assume {:partition} out_sdv_956 == 0;
    assume {:nonnull} in_QueueToClean != 0;
    assume in_QueueToClean > 0;
    havoc vslice_dummy_var_1099;
    call {:si_unique_call 3151} out_sdv_957 := sdv_containing_record(vslice_dummy_var_1099, 88);
    out_currentLastIrp_1 := out_sdv_957;
    call {:si_unique_call 3152} out_vslice_dummy_var_647 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    out_cancelRoutine_2 := Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)];
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.CancelIrql__IRP[CancelIrql__IRP(out_currentLastIrp_1)] := out_cancelIrql_1;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.CancelRoutine__IRP[CancelRoutine__IRP(out_currentLastIrp_1)] := 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant214;
    call {:si_unique_call 3145} SerialCancelCurrentWrite(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;

  L42:
    call {:si_unique_call 3143} out_Tmp_1327 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1327 != 0;
    assume out_Tmp_1327 > 0;
    Mem_T.INT4[out_Tmp_1327] := out_cancelIrql_1;
    call {:si_unique_call 3144} IoAcquireCancelSpinLock(out_Tmp_1327);
    assume {:nonnull} out_Tmp_1327 != 0;
    assume out_Tmp_1327 > 0;
    out_cancelIrql_1 := Mem_T.INT4[out_Tmp_1327];
    goto L42_dummy;

  L42_dummy:
    call {:si_unique_call 3153} {:si_old_unique_call 1} out_currentLastIrp_1, out_cancelIrql_1, out_sdv_956, out_Tmp_1327, out_sdv_957, out_cancelRoutine_2, out_vslice_dummy_var_647 := SerialKillAllReadsOrWrites_loop_L8(out_currentLastIrp_1, out_cancelIrql_1, out_sdv_956, out_Tmp_1327, out_sdv_957, out_cancelRoutine_2, in_DeviceObject_25, in_QueueToClean, out_vslice_dummy_var_647);
    return;

  anon36_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant218;
    call {:si_unique_call 3146} SerialCancelCurrentXoff(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;

  anon35_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant351;
    call {:si_unique_call 3147} SerialCancelImmediate(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;

  anon34_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant166;
    call {:si_unique_call 3148} SerialCancelQueued(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;

  anon33_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant197;
    call {:si_unique_call 3149} SerialCancelWait(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;

  anon39_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant168;
    call {:si_unique_call 3150} SerialFilterCancelQueued(in_DeviceObject_25, out_currentLastIrp_1);
    goto L42;
}



procedure {:LoopProcedure} SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_sdv_956: int, in_Tmp_1327: int, in_sdv_957: int, in_cancelRoutine_2: int, in_DeviceObject_25: int, in_QueueToClean: int, in_vslice_dummy_var_647: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_sdv_956: int, out_Tmp_1327: int, out_sdv_957: int, out_cancelRoutine_2: int, out_vslice_dummy_var_647: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_956 == 1 || out_sdv_956 == 0 || out_sdv_956 == in_sdv_956;
  free ensures {:va_keep} out_vslice_dummy_var_647 == 1 || out_vslice_dummy_var_647 == 0 || out_vslice_dummy_var_647 == in_vslice_dummy_var_647;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartPurge_loop_L5(in_Tmp_1386: int, in_Tmp_1387: int, in_Mask_2: int, in_OldIrql_15: int, in_NewIrp_5: int, in_Tmp_1388: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Extension_31: int, in_vslice_dummy_var_670: int) returns (out_Tmp_1386: int, out_Tmp_1387: int, out_Mask_2: int, out_OldIrql_15: int, out_Tmp_1388: int, out_Tmp_1389: int, out_Tmp_1390: int, out_vslice_dummy_var_670: int)
{
  var vslice_dummy_var_1100: int;
  var vslice_dummy_var_1101: int;
  var vslice_dummy_var_1102: int;

  entry:
    out_Tmp_1386, out_Tmp_1387, out_Mask_2, out_OldIrql_15, out_Tmp_1388, out_Tmp_1389, out_Tmp_1390, out_vslice_dummy_var_670 := in_Tmp_1386, in_Tmp_1387, in_Mask_2, in_OldIrql_15, in_Tmp_1388, in_Tmp_1389, in_Tmp_1390, in_vslice_dummy_var_670;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc out_Tmp_1390;
    assume {:nonnull} out_Tmp_1390 != 0;
    assume out_Tmp_1390 > 0;
    havoc out_Tmp_1389;
    assume {:nonnull} out_Tmp_1389 != 0;
    assume out_Tmp_1389 > 0;
    out_Mask_2 := Mem_T.INT4[out_Tmp_1389];
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(out_Mask_2, 1) != 0;
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc vslice_dummy_var_1101;
    call {:si_unique_call 3160} SerialKillAllReadsOrWrites(vslice_dummy_var_1101, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_31), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_31));
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc vslice_dummy_var_1102;
    call {:si_unique_call 3161} SerialKillAllReadsOrWrites(vslice_dummy_var_1102, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_31), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_31));
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(out_Mask_2, 2) != 0;
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc vslice_dummy_var_1100;
    call {:si_unique_call 3159} SerialKillAllReadsOrWrites(vslice_dummy_var_1100, ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_31), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_31));
    goto L14;

  L14:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} BAND(out_Mask_2, 8) != 0;
    call {:si_unique_call 3155} out_Tmp_1388 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_1388 != 0;
    assume out_Tmp_1388 > 0;
    Mem_T.INT4[out_Tmp_1388] := out_OldIrql_15;
    call {:si_unique_call 3156} sdv_KeAcquireSpinLock(0, out_Tmp_1388);
    assume {:nonnull} out_Tmp_1388 != 0;
    assume out_Tmp_1388 > 0;
    out_OldIrql_15 := Mem_T.INT4[out_Tmp_1388];
    call {:si_unique_call 3157} out_vslice_dummy_var_670 := KeSynchronizeExecution(0, li2bplFunctionConstant484, 0);
    call {:si_unique_call 3158} sdv_KeReleaseSpinLock(0, out_OldIrql_15);
    goto L18;

  L18:
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc out_Tmp_1387;
    assume {:nonnull} out_Tmp_1387 != 0;
    assume out_Tmp_1387 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_1387))] := 0;
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    havoc out_Tmp_1386;
    assume {:nonnull} out_Tmp_1386 != 0;
    assume out_Tmp_1386 > 0;
    assume {:nonnull} in_Extension_31 != 0;
    assume in_Extension_31 > 0;
    call {:si_unique_call 3154} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_31), PurgeQueue__SERIAL_DEVICE_EXTENSION(in_Extension_31), in_NewIrp_5, 1, in_Extension_31);
    assume {:nonnull} in_NewIrp_5 != 0;
    assume in_NewIrp_5 > 0;
    goto anon11_Then;

  anon11_Then:
    goto anon11_Then_dummy;

  anon11_Then_dummy:
    call {:si_unique_call 3162} {:si_old_unique_call 1} out_Tmp_1386, out_Tmp_1387, out_Mask_2, out_OldIrql_15, out_Tmp_1388, out_Tmp_1389, out_Tmp_1390, out_vslice_dummy_var_670 := SerialStartPurge_loop_L5(out_Tmp_1386, out_Tmp_1387, out_Mask_2, out_OldIrql_15, in_NewIrp_5, out_Tmp_1388, out_Tmp_1389, out_Tmp_1390, in_Extension_31, out_vslice_dummy_var_670);
    return;

  anon10_Then:
    assume {:partition} BAND(out_Mask_2, 8) == 0;
    goto L18;

  anon9_Then:
    assume {:partition} BAND(out_Mask_2, 2) == 0;
    goto L14;

  anon12_Then:
    assume {:partition} BAND(out_Mask_2, 1) == 0;
    goto L7;
}



procedure {:LoopProcedure} SerialStartPurge_loop_L5(in_Tmp_1386: int, in_Tmp_1387: int, in_Mask_2: int, in_OldIrql_15: int, in_NewIrp_5: int, in_Tmp_1388: int, in_Tmp_1389: int, in_Tmp_1390: int, in_Extension_31: int, in_vslice_dummy_var_670: int) returns (out_Tmp_1386: int, out_Tmp_1387: int, out_Mask_2: int, out_OldIrql_15: int, out_Tmp_1388: int, out_Tmp_1389: int, out_Tmp_1390: int, out_vslice_dummy_var_670: int);
  modifies Mem_T.INT4, alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP, Mem_T.CancelIrql__IRP;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_vslice_dummy_var_670 == 1 || out_vslice_dummy_var_670 == 0 || out_vslice_dummy_var_670 == in_vslice_dummy_var_670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L121(in_flushCount: int, in_sdv_999: int, in_Tmp_1397: int, in_extension_8: int, in_vslice_dummy_var_677: int) returns (out_flushCount: int, out_sdv_999: int, out_Tmp_1397: int, out_vslice_dummy_var_677: int)
{

  entry:
    out_flushCount, out_sdv_999, out_Tmp_1397, out_vslice_dummy_var_677 := in_flushCount, in_sdv_999, in_Tmp_1397, in_vslice_dummy_var_677;
    goto L121, exit;

  exit:
    return;

  L121:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon45_Else;

  anon45_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension_8 != 0;
    assume in_extension_8 > 0;
    call {:si_unique_call 3164} out_sdv_999 := corral_nondet();
    out_Tmp_1397 := BAND(out_sdv_999, BOR(32, 64));
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_Tmp_1397 != 96;
    call {:si_unique_call 3163} out_vslice_dummy_var_677 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon51_Else_dummy;

  anon51_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L121(in_flushCount: int, in_sdv_999: int, in_Tmp_1397: int, in_extension_8: int, in_vslice_dummy_var_677: int) returns (out_flushCount: int, out_sdv_999: int, out_Tmp_1397: int, out_vslice_dummy_var_677: int);
  free ensures {:va_keep} out_vslice_dummy_var_677 == 0 || out_vslice_dummy_var_677 == -1073741823 || out_vslice_dummy_var_677 == in_vslice_dummy_var_677;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L108(in_sdv_1021: int, in_extension_8: int, in_vslice_dummy_var_676: int) returns (out_sdv_1021: int, out_vslice_dummy_var_676: int)
{

  entry:
    out_sdv_1021, out_vslice_dummy_var_676 := in_sdv_1021, in_vslice_dummy_var_676;
    goto L108, exit;

  exit:
    return;

  L108:
    assume {:nonnull} in_extension_8 != 0;
    assume in_extension_8 > 0;
    call {:si_unique_call 3165} out_sdv_1021 := corral_nondet();
    goto anon44_Then;

  anon44_Then:
    assume {:partition} BAND(out_sdv_1021, 32) == 0;
    call {:si_unique_call 3166} out_vslice_dummy_var_676 := KeDelayExecutionThread(0, 0, 0);
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 3167} {:si_old_unique_call 1} out_sdv_1021, out_vslice_dummy_var_676 := SerialClose_loop_L108(out_sdv_1021, in_extension_8, out_vslice_dummy_var_676);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L108(in_sdv_1021: int, in_extension_8: int, in_vslice_dummy_var_676: int) returns (out_sdv_1021: int, out_vslice_dummy_var_676: int);
  free ensures {:va_keep} out_vslice_dummy_var_676 == 0 || out_vslice_dummy_var_676 == -1073741823 || out_vslice_dummy_var_676 == in_vslice_dummy_var_676;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L147(in_extension_8: int, in_vslice_dummy_var_680: int) returns (out_vslice_dummy_var_680: int)
{

  entry:
    out_vslice_dummy_var_680 := in_vslice_dummy_var_680;
    goto L147, exit;

  exit:
    return;

  L147:
    call {:si_unique_call 3168} out_vslice_dummy_var_680 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} in_extension_8 != 0;
    assume in_extension_8 > 0;
    goto anon48_Then;

  anon48_Then:
    goto anon48_Then_dummy;

  anon48_Then_dummy:
    call {:si_unique_call 3169} {:si_old_unique_call 1} out_vslice_dummy_var_680 := SerialClose_loop_L147(in_extension_8, out_vslice_dummy_var_680);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L147(in_extension_8: int, in_vslice_dummy_var_680: int) returns (out_vslice_dummy_var_680: int);
  free ensures {:va_keep} out_vslice_dummy_var_680 == 0 || out_vslice_dummy_var_680 == -1073741823 || out_vslice_dummy_var_680 == in_vslice_dummy_var_680;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialClose_loop_L87(in_flushCount: int, in_sdv_1000: int, in_Tmp_1409: int, in_extension_8: int, in_vslice_dummy_var_674: int) returns (out_flushCount: int, out_sdv_1000: int, out_Tmp_1409: int, out_vslice_dummy_var_674: int)
{

  entry:
    out_flushCount, out_sdv_1000, out_Tmp_1409, out_vslice_dummy_var_674 := in_flushCount, in_sdv_1000, in_Tmp_1409, in_vslice_dummy_var_674;
    goto L87, exit;

  exit:
    return;

  L87:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon41_Else;

  anon41_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension_8 != 0;
    assume in_extension_8 > 0;
    call {:si_unique_call 3171} out_sdv_1000 := corral_nondet();
    out_Tmp_1409 := BAND(out_sdv_1000, BOR(32, 64));
    goto anon50_Else;

  anon50_Else:
    assume {:partition} out_Tmp_1409 != 96;
    call {:si_unique_call 3170} out_vslice_dummy_var_674 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon50_Else_dummy;

  anon50_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L87(in_flushCount: int, in_sdv_1000: int, in_Tmp_1409: int, in_extension_8: int, in_vslice_dummy_var_674: int) returns (out_flushCount: int, out_sdv_1000: int, out_Tmp_1409: int, out_vslice_dummy_var_674: int);
  free ensures {:va_keep} out_vslice_dummy_var_674 == 0 || out_vslice_dummy_var_674 == -1073741823 || out_vslice_dummy_var_674 == in_vslice_dummy_var_674;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialDrainUART_loop_L6(in_Tmp_1438: int, in_sdv_1056: int, in_PDevExt_21: int, in_vslice_dummy_var_720: int) returns (out_Tmp_1438: int, out_sdv_1056: int, out_vslice_dummy_var_720: int)
{

  entry:
    out_Tmp_1438, out_sdv_1056, out_vslice_dummy_var_720 := in_Tmp_1438, in_sdv_1056, in_vslice_dummy_var_720;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_PDevExt_21 != 0;
    assume in_PDevExt_21 > 0;
    call {:si_unique_call 3172} out_sdv_1056 := corral_nondet();
    out_Tmp_1438 := BAND(out_sdv_1056, BOR(32, 64));
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Tmp_1438 != 96;
    call {:si_unique_call 3173} out_vslice_dummy_var_720 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 3174} {:si_old_unique_call 1} out_Tmp_1438, out_sdv_1056, out_vslice_dummy_var_720 := SerialDrainUART_loop_L6(out_Tmp_1438, out_sdv_1056, in_PDevExt_21, out_vslice_dummy_var_720);
    return;
}



procedure {:LoopProcedure} SerialDrainUART_loop_L6(in_Tmp_1438: int, in_sdv_1056: int, in_PDevExt_21: int, in_vslice_dummy_var_720: int) returns (out_Tmp_1438: int, out_sdv_1056: int, out_vslice_dummy_var_720: int);
  free ensures {:va_keep} out_vslice_dummy_var_720 == 0 || out_vslice_dummy_var_720 == -1073741823 || out_vslice_dummy_var_720 == in_vslice_dummy_var_720;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartWrite#0_loop_L14(in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_768: int, in_Tmp_770: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_574: int, in_OldIrql_11: int, in_NewIrp_3: int, in_sdv_577: int, in_Tmp_772: int, in_Timeouts_1: int, in_Tmp_773: int, in_Extension_16: int) returns (out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_768: int, out_Tmp_770: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_574: int, out_OldIrql_11: int, out_sdv_577: int, out_Tmp_772: int, out_Tmp_773: int)
{
  var vslice_dummy_var_1103: int;
  var vslice_dummy_var_1104: int;
  var vslice_dummy_var_1105: int;

  entry:
    out_FirstStatus, out_SetFirstStatus, out_Tmp_768, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, out_sdv_577, out_Tmp_772, out_Tmp_773 := in_FirstStatus, in_SetFirstStatus, in_Tmp_768, in_Tmp_770, in_UseATimer_1, in_IrpSp_2, in_sdv_574, in_OldIrql_11, in_sdv_577, in_Tmp_772, in_Tmp_773;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 3175} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3176} IoAcquireCancelSpinLock(out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1104;
    call {:si_unique_call 3187} out_sdv_574 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1104);
    assume {:nonnull} out_sdv_574 != 0;
    assume out_sdv_574 > 0;
    goto anon22_Then;

  anon22_Then:
    call {:si_unique_call 3185} IoReleaseCancelSpinLock(out_OldIrql_11);
    goto L40;

  L40:
    out_UseATimer_1 := 0;
    call {:si_unique_call 3182} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3183} sdv_KeAcquireSpinLock(0, out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    call {:si_unique_call 3184} sdv_KeReleaseSpinLock(0, out_OldIrql_11);
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1105;
    call {:si_unique_call 3188} out_IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1105);
    out_UseATimer_1 := 1;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    havoc out_Tmp_772;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_TotalTime_1 != 0;
    assume in_TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1103;
    call {:si_unique_call 3179} out_sdv_577 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1103);
    assume {:nonnull} out_sdv_577 != 0;
    assume out_sdv_577 > 0;
    call {:si_unique_call 3180} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3181} IoAcquireCancelSpinLock(out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc out_Tmp_768;
    assume {:nonnull} out_Tmp_768 != 0;
    assume out_Tmp_768 > 0;
    goto anon28_Else;

  anon28_Else:
    call {:si_unique_call 3178} IoReleaseCancelSpinLock(out_OldIrql_11);
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc out_Tmp_770;
    assume {:nonnull} out_Tmp_770 != 0;
    assume out_Tmp_770 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_770))] := -1073741536;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    call {:si_unique_call 3177} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_16), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_16), in_NewIrp_3, 1, in_Extension_16);
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon26_Then;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    call {:si_unique_call 3189} {:si_old_unique_call 1} out_FirstStatus, out_SetFirstStatus, out_Tmp_768, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, out_sdv_577, out_Tmp_772, out_Tmp_773 := SerialStartWrite#0_loop_L14(out_FirstStatus, in_TotalTime_1, out_SetFirstStatus, out_Tmp_768, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, in_NewIrp_3, out_sdv_577, out_Tmp_772, in_Timeouts_1, out_Tmp_773, in_Extension_16);
    return;

  anon29_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L75;

  anon27_Then:
    out_Tmp_772 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon21_Then:
    call {:si_unique_call 3186} IoReleaseCancelSpinLock(out_OldIrql_11);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#0_loop_L14(in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_768: int, in_Tmp_770: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_574: int, in_OldIrql_11: int, in_NewIrp_3: int, in_sdv_577: int, in_Tmp_772: int, in_Timeouts_1: int, in_Tmp_773: int, in_Extension_16: int) returns (out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_768: int, out_Tmp_770: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_574: int, out_OldIrql_11: int, out_sdv_577: int, out_Tmp_772: int, out_Tmp_773: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_FirstStatus == -1073741536 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_UseATimer_1 == 0 || out_UseATimer_1 == 1 || out_UseATimer_1 == in_UseATimer_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation SerialStartWrite#1_loop_L14(in_s_p_e_c_i_a_l_9: int, in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_768: int, in_Tmp_769: int, in_Tmp_770: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_574: int, in_OldIrql_11: int, in_NewIrp_3: int, in_s_p_e_c_i_a_l_11: int, in_sdv_576: int, in_sdv_577: int, in_Tmp_772: int, in_Timeouts_1: int, in_Tmp_773: int, in_Extension_16: int) returns (out_s_p_e_c_i_a_l_9: int, out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_768: int, out_Tmp_769: int, out_Tmp_770: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_574: int, out_OldIrql_11: int, out_s_p_e_c_i_a_l_11: int, out_sdv_576: int, out_sdv_577: int, out_Tmp_772: int, out_Tmp_773: int)
{
  var vslice_dummy_var_1106: int;
  var vslice_dummy_var_1107: int;
  var vslice_dummy_var_1108: int;
  var vslice_dummy_var_1109: int;

  entry:
    out_s_p_e_c_i_a_l_9, out_FirstStatus, out_SetFirstStatus, out_Tmp_768, out_Tmp_769, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, out_s_p_e_c_i_a_l_11, out_sdv_576, out_sdv_577, out_Tmp_772, out_Tmp_773 := in_s_p_e_c_i_a_l_9, in_FirstStatus, in_SetFirstStatus, in_Tmp_768, in_Tmp_769, in_Tmp_770, in_UseATimer_1, in_IrpSp_2, in_sdv_574, in_OldIrql_11, in_s_p_e_c_i_a_l_11, in_sdv_576, in_sdv_577, in_Tmp_772, in_Tmp_773;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 3190} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3191} IoAcquireCancelSpinLock(out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1108;
    call {:si_unique_call 3204} out_sdv_574 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1108);
    assume {:nonnull} out_sdv_574 != 0;
    assume out_sdv_574 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    out_s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1107;
    call {:si_unique_call 3200} out_sdv_576 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1107);
    assume {:nonnull} out_sdv_576 != 0;
    assume out_sdv_576 > 0;
    out_s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_576)));
    assume {:nonnull} out_s_p_e_c_i_a_l_9 != 0;
    assume out_s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_9], out_s_p_e_c_i_a_l_11);
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc out_Tmp_769;
    assume {:nonnull} out_Tmp_769 != 0;
    assume out_Tmp_769 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    call {:si_unique_call 3201} SerialTryToCompleteCurrent#0(in_Extension_16, li2bplFunctionConstant213, out_OldIrql_11, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_16), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_16), 0, 0, 16);
    goto L40;

  L40:
    out_UseATimer_1 := 0;
    call {:si_unique_call 3197} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3198} sdv_KeAcquireSpinLock(0, out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    call {:si_unique_call 3199} sdv_KeReleaseSpinLock(0, out_OldIrql_11);
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1109;
    call {:si_unique_call 3205} out_IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1109);
    out_UseATimer_1 := 1;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    havoc out_Tmp_772;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_TotalTime_1 != 0;
    assume in_TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc vslice_dummy_var_1106;
    call {:si_unique_call 3194} out_sdv_577 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_1106);
    assume {:nonnull} out_sdv_577 != 0;
    assume out_sdv_577 > 0;
    call {:si_unique_call 3195} out_Tmp_773 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    Mem_T.INT4[out_Tmp_773] := out_OldIrql_11;
    call {:si_unique_call 3196} IoAcquireCancelSpinLock(out_Tmp_773);
    assume {:nonnull} out_Tmp_773 != 0;
    assume out_Tmp_773 > 0;
    out_OldIrql_11 := Mem_T.INT4[out_Tmp_773];
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc out_Tmp_768;
    assume {:nonnull} out_Tmp_768 != 0;
    assume out_Tmp_768 > 0;
    goto anon28_Else;

  anon28_Else:
    call {:si_unique_call 3193} IoReleaseCancelSpinLock(out_OldIrql_11);
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    havoc out_Tmp_770;
    assume {:nonnull} out_Tmp_770 != 0;
    assume out_Tmp_770 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_770))] := -1073741536;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_16 != 0;
    assume in_Extension_16 > 0;
    call {:si_unique_call 3192} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_16), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_16), in_NewIrp_3, 1, in_Extension_16);
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon26_Then;

  anon26_Then:
    goto anon26_Then_dummy;

  anon26_Then_dummy:
    call {:si_unique_call 3206} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_9, out_FirstStatus, out_SetFirstStatus, out_Tmp_768, out_Tmp_769, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, out_s_p_e_c_i_a_l_11, out_sdv_576, out_sdv_577, out_Tmp_772, out_Tmp_773 := SerialStartWrite#1_loop_L14(out_s_p_e_c_i_a_l_9, out_FirstStatus, in_TotalTime_1, out_SetFirstStatus, out_Tmp_768, out_Tmp_769, out_Tmp_770, out_UseATimer_1, out_IrpSp_2, out_sdv_574, out_OldIrql_11, in_NewIrp_3, out_s_p_e_c_i_a_l_11, out_sdv_576, out_sdv_577, out_Tmp_772, in_Timeouts_1, out_Tmp_773, in_Extension_16);
    return;

  anon29_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L75;

  anon27_Then:
    out_Tmp_772 := 1;
    goto L59;

  anon23_Then:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L60;

  anon24_Then:
    goto L51;

  anon22_Then:
    call {:si_unique_call 3202} IoReleaseCancelSpinLock(out_OldIrql_11);
    goto L40;

  anon21_Then:
    call {:si_unique_call 3203} IoReleaseCancelSpinLock(out_OldIrql_11);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#1_loop_L14(in_s_p_e_c_i_a_l_9: int, in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_768: int, in_Tmp_769: int, in_Tmp_770: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_574: int, in_OldIrql_11: int, in_NewIrp_3: int, in_s_p_e_c_i_a_l_11: int, in_sdv_576: int, in_sdv_577: int, in_Tmp_772: int, in_Timeouts_1: int, in_Tmp_773: int, in_Extension_16: int) returns (out_s_p_e_c_i_a_l_9: int, out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_768: int, out_Tmp_769: int, out_Tmp_770: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_574: int, out_OldIrql_11: int, out_s_p_e_c_i_a_l_11: int, out_sdv_576: int, out_sdv_577: int, out_Tmp_772: int, out_Tmp_773: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelRoutine__IRP;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_FirstStatus == -1073741536 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_UseATimer_1 == 0 || out_UseATimer_1 == 1 || out_UseATimer_1 == in_UseATimer_1;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_11 == 16 || out_s_p_e_c_i_a_l_11 == in_s_p_e_c_i_a_l_11;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_885: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.CancelIrql__IRP, Mem_T.CancelRoutine__IRP, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_885: int, dup_assertVar: bool)
{

  start:
    call Tmp_885, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


