var {:scalar} alloc: int;

var {:scalar} io_complete_request_called: int;

var {:scalar} yogi_error: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} Mem_T.Cancel__IRP: [int]int;

var {:scalar} Mem_T.CurrentStackLocation_unnamed_tag_7: [int]int;

var {:scalar} Mem_T.INT4: [int]int;

var {:scalar} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION: [int]int;

var {:scalar} Mem_T.MajorFunction__IO_STACK_LOCATION: [int]int;

var {:scalar} Mem_T.PVOID: [int]int;

var {:scalar} Mem_T.P_IRP: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const currentInstance_sdv_static_local_variable_116: int;

const SerialGlobals: int;

const SerialPhysicalZero: int;

const GUID_DEVINTERFACE_COMPORT: int;

const driverDefaults: int;

const SerialPhysicalZero_1: int;

const SerialPortNameGuid: int;

const SerailPortPerfGuid: int;

const SerialPortPropertiesGuid: int;

const SerialPortHWGuid: int;

const SerialPortCommGuid: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_harnessStackLocation: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const KdComPortInUse: int;

const SerialPhysicalZero_2: int;

const SerialPhysicalZero_3: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_0_init: int;

procedure {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_2: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialQueryInformationFile"} SerialQueryInformationFile(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_2: int)
{
  var {:pointer} Tmp_3: int;
  var {:scalar} Status: int;
  var {:pointer} IrpSp: int;
  var {:pointer} Tmp_4: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} sdv_9: int;
  var {:pointer} Tmp_6: int;
  var {:scalar} status: int;
  var {:pointer} Buf: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_2459: int;
  var vslice_dummy_var_2460: int;
  var vslice_dummy_var_2461: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 0} Tmp_4 := __HAVOC_malloc(72);
    call {:si_unique_call 1} Tmp_5 := __HAVOC_malloc(72);
    call {:si_unique_call 2} Tmp_6 := __HAVOC_malloc(96);
    call {:si_unique_call 3} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_2459;
    call {:si_unique_call 4} status := SerialIRPPrologue(Irp, vslice_dummy_var_2459);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status != 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status != 259;
    Tmp_4 := strConst__li2bpl1;
    call {:si_unique_call 5} vslice_dummy_var_0 := SerialDbgPrintEx(9, Tmp_4);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume Irp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 6} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    call {:si_unique_call 7} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_2460;
    call {:si_unique_call 8} SerialIRPEpilogue(vslice_dummy_var_2460);
    goto L18;

  L18:
    Tmp_2 := status;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume !(Irp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon26_Then:
    assume {:partition} status == 259;
    goto L18;

  anon25_Then:
    assume {:partition} status == 0;
    Tmp_6 := strConst__li2bpl0;
    call {:si_unique_call 9} vslice_dummy_var_1 := SerialDbgPrintEx(9, Tmp_6);
    call {:si_unique_call 10} sdv_9 := SerialCompleteIfError(DeviceObject, Irp);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} sdv_9 != 0;
    Tmp_2 := -1073741536;
    goto L1;

  anon28_Then:
    assume {:partition} sdv_9 == 0;
    call {:si_unique_call 11} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp);
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Status := 0;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc Buf;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Buf != 0;
    assume Buf > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto L44;

  L44:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp))] := Status;
    Tmp_5 := strConst__li2bpl1;
    call {:si_unique_call 12} vslice_dummy_var_2 := SerialDbgPrintEx(9, Tmp_5);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume Irp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 13} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 14} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_2461;
    call {:si_unique_call 15} SerialIRPEpilogue(vslice_dummy_var_2461);
    Tmp_2 := Status;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume !(Irp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon30_Then:
    Status := -1073741789;
    goto L44;

  anon35_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    Status := -1073741789;
    goto L44;

  anon32_Then:
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    havoc Tmp_3;
    assume {:nonnull} Tmp_3 != 0;
    assume Tmp_3 > 0;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    goto L44;

  anon29_Then:
    Status := -1073741811;
    goto L44;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_8: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetInformationFile"} SerialSetInformationFile(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_8: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} sdv_11: int;
  var {:pointer} Tmp_10: int;
  var {:pointer} Tmp_11: int;
  var {:pointer} sdv_14: int;
  var {:scalar} sdv_15: int;
  var {:pointer} Tmp_12: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_2462: int;
  var vslice_dummy_var_2463: int;
  var vslice_dummy_var_2464: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 16} Tmp_10 := __HAVOC_malloc(72);
    call {:si_unique_call 17} Tmp_11 := __HAVOC_malloc(72);
    call {:si_unique_call 18} Tmp_12 := __HAVOC_malloc(96);
    call {:si_unique_call 19} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_2462;
    call {:si_unique_call 20} Status_1 := SerialIRPPrologue(Irp_1, vslice_dummy_var_2462);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Status_1 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Status_1 != 259;
    Tmp_11 := strConst__li2bpl1;
    call {:si_unique_call 21} vslice_dummy_var_3 := SerialDbgPrintEx(9, Tmp_11);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 22} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_1);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 23} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_2463;
    call {:si_unique_call 24} SerialIRPEpilogue(vslice_dummy_var_2463);
    goto L16;

  L16:
    Tmp_8 := Status_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L57;

  anon22_Then:
    assume {:partition} Status_1 == 259;
    goto L16;

  anon21_Then:
    assume {:partition} Status_1 == 0;
    Tmp_12 := strConst__li2bpl0;
    call {:si_unique_call 25} vslice_dummy_var_4 := SerialDbgPrintEx(9, Tmp_12);
    call {:si_unique_call 26} sdv_15 := SerialCompleteIfError(DeviceObject_1, Irp_1);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_15 != 0;
    Tmp_8 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_15 == 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 27} sdv_14 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_14 != 0;
    assume sdv_14 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L39;

  L39:
    Status_1 := 0;
    goto L40;

  L40:
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_1))] := Status_1;
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 28} vslice_dummy_var_5 := SerialDbgPrintEx(9, Tmp_10);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 29} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_1);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L60;

  L60:
    call {:si_unique_call 30} sdv_IoCompleteRequest(0, 0);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc vslice_dummy_var_2464;
    call {:si_unique_call 31} SerialIRPEpilogue(vslice_dummy_var_2464);
    Tmp_8 := Status_1;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L60;

  anon25_Then:
    call {:si_unique_call 32} sdv_11 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} sdv_11 != 0;
    assume sdv_11 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Status_1 := -1073741811;
    goto L40;

  anon27_Then:
    goto L39;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init20"} _sdv_init20();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init20"} _sdv_init20()
{
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 33} vslice_dummy_var_6 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 34} vslice_dummy_var_7 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_17: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, Mem_T.Cancel__IRP, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialFlush"} SerialFlush(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_17: int)
{
  var {:pointer} Tmp_18: int;
  var {:pointer} Tmp_19: int;
  var {:pointer} Tmp_20: int;
  var {:pointer} Tmp_21: int;
  var {:pointer} Extension: int;
  var {:scalar} sdv_24: int;
  var {:scalar} status_1: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_24: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 35} Tmp_18 := __HAVOC_malloc(84);
    call {:si_unique_call 36} Tmp_19 := __HAVOC_malloc(84);
    call {:si_unique_call 37} Tmp_20 := __HAVOC_malloc(72);
    call {:si_unique_call 38} Tmp_21 := __HAVOC_malloc(88);
    call {:si_unique_call 39} Tmp_22 := __HAVOC_malloc(96);
    call {:si_unique_call 40} Tmp_24 := __HAVOC_malloc(84);
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc Extension;
    call {:si_unique_call 41} sdv_do_paged_code_check();
    Tmp_22 := strConst__li2bpl0;
    call {:si_unique_call 42} vslice_dummy_var_8 := SerialDbgPrintEx(9, Tmp_22);
    Tmp_21 := strConst__li2bpl4;
    call {:si_unique_call 43} vslice_dummy_var_9 := SerialDbgPrintEx(2, Tmp_21);
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    call {:si_unique_call 44} status_1 := SerialIRPPrologue(Irp_2, Extension);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_1 != 0;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_2))] := status_1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_1 >= 0;
    goto L29;

  L29:
    Tmp_18 := strConst__li2bpl5;
    call {:si_unique_call 45} vslice_dummy_var_10 := SerialDbgPrintEx(2, Tmp_18);
    Tmp_17 := status_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} 0 > status_1;
    Tmp_20 := strConst__li2bpl1;
    call {:si_unique_call 46} vslice_dummy_var_11 := SerialDbgPrintEx(9, Tmp_20);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 47} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_2);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    goto L54;

  L54:
    call {:si_unique_call 48} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 49} SerialIRPEpilogue(Extension);
    goto L29;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume !(Irp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L54;

  anon15_Then:
    assume {:partition} status_1 == 0;
    call {:si_unique_call 50} sdv_24 := SerialCompleteIfError(DeviceObject_2, Irp_2);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_24 != 0;
    Tmp_24 := strConst__li2bpl6;
    call {:si_unique_call 51} vslice_dummy_var_12 := SerialDbgPrintEx(2, Tmp_24);
    Tmp_17 := -1073741536;
    goto L1;

  anon17_Then:
    assume {:partition} sdv_24 == 0;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    call {:si_unique_call 52} status_1 := SerialStartOrQueue(Extension, Irp_2, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension), li2bplFunctionConstant124);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    Tmp_19 := strConst__li2bpl7;
    call {:si_unique_call 53} vslice_dummy_var_13 := SerialDbgPrintEx(2, Tmp_19);
    Tmp_17 := status_1;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_1: int) returns (Tmp_25: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartFlush"} SerialStartFlush(actual_Extension_1: int) returns (Tmp_25: int)
{
  var {:pointer} NewIrp: int;
  var {:pointer} Tmp_26: int;
  var {:pointer} Extension_1: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 54} NewIrp := __HAVOC_malloc(4);
    Extension_1 := actual_Extension_1;
    call {:si_unique_call 55} sdv_do_paged_code_check();
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    Tmp_26 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_1)];
    assume {:nonnull} Tmp_26 != 0;
    assume Tmp_26 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_26))] := 0;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    call {:si_unique_call 56} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_1), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_1), NewIrp, 1, Extension_1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp != 0;
    assume NewIrp > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp] != 0;
    call {:si_unique_call 57} vslice_dummy_var_14 := SerialStartWrite#1(Extension_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L12;

  L12:
    Tmp_25 := 0;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp] == 0;
    goto L12;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_28: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_28 == -1073741811 || Tmp_28 == -1073741823 || Tmp_28 == 0 || Tmp_28 == 5 || Tmp_28 == -1073741789 || Tmp_28 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetRegistryKeyValue"} SerialGetRegistryKeyValue(actual_Handle: int, actual_KeyNameString: int, actual_KeyNameStringLength: int, actual_Data: int, actual_DataLength: int) returns (Tmp_28: int)
{
  var {:pointer} Tmp_29: int;
  var {:pointer} Tmp_30: int;
  var {:pointer} Tmp_31: int;
  var {:pointer} fullInfo: int;
  var {:scalar} length: int;
  var {:pointer} sdv_28: int;
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} KeyNameStringLength: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_2465: int;

  anon0:
    call {:si_unique_call 58} keyName := __HAVOC_malloc(12);
    KeyNameString := actual_KeyNameString;
    KeyNameStringLength := actual_KeyNameStringLength;
    DataLength := actual_DataLength;
    call {:si_unique_call 59} Tmp_30 := __HAVOC_malloc(124);
    call {:si_unique_call 60} Tmp_31 := __HAVOC_malloc(132);
    ntStatus := -1073741670;
    call {:si_unique_call 61} sdv_do_paged_code_check();
    Tmp_31 := strConst__li2bpl8;
    call {:si_unique_call 62} vslice_dummy_var_15 := SerialDbgPrintEx(2, Tmp_31);
    call {:si_unique_call 63} RtlInitUnicodeString(keyName, KeyNameString);
    length := 24 + KeyNameStringLength + DataLength;
    call {:si_unique_call 64} sdv_28 := ExAllocatePoolWithTag(1, length, -666022077);
    fullInfo := sdv_28;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 65} Tmp_29 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_29 != 0;
    assume Tmp_29 > 0;
    Mem_T.INT4[Tmp_29] := length;
    call {:si_unique_call 66} ntStatus := ZwQueryValueKey(0, 0, 1, 0, length, Tmp_29);
    assume {:nonnull} Tmp_29 != 0;
    assume Tmp_29 > 0;
    length := Mem_T.INT4[Tmp_29];
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ntStatus >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_2465;
    call {:si_unique_call 67} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_2465);
    goto L31;

  L31:
    call {:si_unique_call 68} sdv_ExFreePool(0);
    goto L23;

  L23:
    Tmp_30 := strConst__li2bpl9;
    call {:si_unique_call 69} vslice_dummy_var_16 := SerialDbgPrintEx(2, Tmp_30);
    Tmp_28 := ntStatus;
    return;

  anon8_Then:
    goto L31;

  anon7_Then:
    assume {:partition} 0 > ntStatus;
    goto L31;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L23;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 70} vslice_dummy_var_17 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 71} vslice_dummy_var_18 := __HAVOC_malloc(4);
    assume currentInstance_sdv_static_local_variable_116 == 0;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_3: int, actual_Irp_3: int, actual_SerialSyncEventIn: int) returns (Tmp_37: int);
  free ensures {:va_keep} Tmp_37 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSyncCompletion"} SerialSyncCompletion(actual_DeviceObject_3: int, actual_Irp_3: int, actual_SerialSyncEventIn: int) returns (Tmp_37: int)
{
  var {:pointer} SerialSyncEvent: int;
  var {:pointer} SerialSyncEventIn: int;
  var vslice_dummy_var_19: int;

  anon0:
    SerialSyncEventIn := actual_SerialSyncEventIn;
    SerialSyncEvent := SerialSyncEventIn;
    call {:si_unique_call 72} vslice_dummy_var_19 := KeSetEvent(SerialSyncEvent, 0, 0);
    Tmp_37 := -1073741802;
    return;
}



procedure {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt: int, actual_PDrvObj: int) returns (Tmp_39: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_39 == -1073741811 || Tmp_39 == -1073741808 || Tmp_39 == -1073741823 || Tmp_39 == 0 || Tmp_39 == 5 || Tmp_39 == -1073741789 || Tmp_39 == -1073741670 || Tmp_39 == -1073741772 || Tmp_39 == -1073741824;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDoExternalNaming"} SerialDoExternalNaming(actual_PDevExt: int, actual_PDrvObj: int) returns (Tmp_39: int)
{
  var {:pointer} Tmp_40: int;
  var {:scalar} bufLen: int;
  var {:scalar} Tmp_41: int;
  var {:pointer} keyHandle: int;
  var {:pointer} Tmp_42: int;
  var {:pointer} Tmp_43: int;
  var {:pointer} Tmp_45: int;
  var {:scalar} Tmp_47: int;
  var {:scalar} Tmp_48: int;
  var {:pointer} Tmp_49: int;
  var {:scalar} Tmp_50: int;
  var {:scalar} Tmp_52: int;
  var {:pointer} pRegName: int;
  var {:scalar} sdv_39: int;
  var {:scalar} Tmp_54: int;
  var {:pointer} sdv_41: int;
  var {:scalar} Tmp_57: int;
  var {:pointer} Tmp_59: int;
  var {:pointer} Tmp_60: int;
  var {:scalar} Tmp_62: int;
  var {:pointer} sdv_51: int;
  var {:scalar} status_2: int;
  var {:pointer} Tmp_66: int;
  var {:pointer} pDevObj: int;
  var {:scalar} Tmp_67: int;
  var {:scalar} Tmp_68: int;
  var {:scalar} Tmp_70: int;
  var {:pointer} Tmp_71: int;
  var {:scalar} Tmp_72: int;
  var {:pointer} PDevExt: int;
  var {:pointer} PDrvObj: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_2466: int;
  var vslice_dummy_var_2467: int;

  anon0:
    call {:si_unique_call 73} Tmp_48 := __HAVOC_malloc(20);
    call {:si_unique_call 74} Tmp_52 := __HAVOC_malloc(20);
    call {:si_unique_call 75} pRegName := __HAVOC_malloc(4);
    call {:si_unique_call 76} Tmp_54 := __HAVOC_malloc(20);
    call {:si_unique_call 77} Tmp_57 := __HAVOC_malloc(20);
    call {:si_unique_call 78} Tmp_62 := __HAVOC_malloc(20);
    call {:si_unique_call 79} Tmp_68 := __HAVOC_malloc(20);
    call {:si_unique_call 80} Tmp_70 := __HAVOC_malloc(20);
    call {:si_unique_call 81} Tmp_72 := __HAVOC_malloc(20);
    PDevExt := actual_PDevExt;
    PDrvObj := actual_PDrvObj;
    call {:si_unique_call 82} Tmp_40 := __HAVOC_malloc(184);
    call {:si_unique_call 83} Tmp_42 := __HAVOC_malloc(64);
    call {:si_unique_call 84} Tmp_43 := __HAVOC_malloc(236);
    call {:si_unique_call 85} Tmp_45 := __HAVOC_malloc(156);
    call {:si_unique_call 86} Tmp_49 := __HAVOC_malloc(156);
    call {:si_unique_call 87} vslice_dummy_var_25 := __HAVOC_malloc(44);
    call {:si_unique_call 88} Tmp_59 := __HAVOC_malloc(100);
    call {:si_unique_call 89} vslice_dummy_var_26 := __HAVOC_malloc(44);
    call {:si_unique_call 90} Tmp_66 := __HAVOC_malloc(192);
    call {:si_unique_call 91} Tmp_71 := __HAVOC_malloc(200);
    status_2 := 0;
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    call {:si_unique_call 92} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc pDevObj;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 93} status_2 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_2 != 0;
    Tmp_39 := status_2;
    goto L1;

  L1:
    return;

  anon35_Then:
    assume {:partition} status_2 == 0;
    Tmp_59 := strConst__li2bpl10;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 94} vslice_dummy_var_27 := SerialGetRegistryKeyValue(keyHandle, Tmp_59, 50, SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt), 4);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt)] != 0;
    call {:si_unique_call 95} vslice_dummy_var_20 := ZwClose(0);
    Tmp_39 := 0;
    goto L1;

  anon36_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(PDevExt)] == 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 96} status_2 := SerialReadSymName(PDevExt, keyHandle, SymbolicLinkName__SERIAL_DEVICE_EXTENSION(PDevExt), pRegName);
    call {:si_unique_call 97} vslice_dummy_var_21 := ZwClose(0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_2 < 0;
    goto L111;

  L111:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} status_2 >= 0;
    goto L113;

  L113:
    assume {:nonnull} pRegName != 0;
    assume pRegName > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 98} sdv_ExFreePool(0);
    goto L114;

  L114:
    Tmp_39 := status_2;
    goto L1;

  anon44_Then:
    goto L114;

  anon42_Then:
    assume {:partition} 0 > status_2;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 99} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L118;

  L118:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 100} vslice_dummy_var_23 := IoDeleteSymbolicLink(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L123;

  L123:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 101} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L128;

  L128:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 102} vslice_dummy_var_30 := RtlDeleteRegistryValue(4, 0, 0);
    goto L133;

  L133:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    call {:si_unique_call 103} vslice_dummy_var_24 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 104} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L137;

  L137:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 105} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L113;

  anon49_Then:
    goto L113;

  anon48_Then:
    goto L137;

  anon47_Then:
    goto L133;

  anon46_Then:
    goto L128;

  anon45_Then:
    goto L123;

  anon43_Then:
    goto L118;

  anon37_Then:
    assume {:partition} 0 <= status_2;
    bufLen := sdv_39 * 2 + 2;
    call {:si_unique_call 106} sdv_51 := ExAllocatePoolWithTag(1, bufLen, -666022077);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    call {:si_unique_call 107} sdv_RtlZeroMemory(0, bufLen);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 108} vslice_dummy_var_28 := corral_nondet();
    call {:si_unique_call 109} sdv_41 := ExAllocatePoolWithTag(1, 66, -666022077);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_50;
    call {:si_unique_call 110} sdv_RtlZeroMemory(0, Tmp_50);
    call {:si_unique_call 111} vslice_dummy_var_22 := corral_nondet();
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_60;
    call {:si_unique_call 112} sdv_RtlZeroMemory(0, 2);
    Tmp_42 := strConst__li2bpl11;
    call {:si_unique_call 113} vslice_dummy_var_29 := SerialDbgPrintEx(4, Tmp_42);
    call {:si_unique_call 114} status_2 := IoCreateSymbolicLink(0, 0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_67;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 115} status_2 := RtlWriteRegistryValue(4, 0, 0, 1, 0, Tmp_67);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    call {:si_unique_call 116} status_2 := IoRegisterDeviceInterface(0, 0, 0, DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(PDevExt));
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_2 >= 0;
    call {:si_unique_call 117} status_2 := IoSetDeviceInterfaceState(0, 1);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_2 >= 0;
    goto L111;

  anon41_Then:
    assume {:partition} 0 > status_2;
    Tmp_40 := strConst__li2bpl13;
    call {:si_unique_call 118} vslice_dummy_var_31 := SerialDbgPrintEx(14, Tmp_40);
    goto L111;

  anon40_Then:
    assume {:partition} 0 > status_2;
    Tmp_71 := strConst__li2bpl12;
    call {:si_unique_call 119} vslice_dummy_var_32 := SerialDbgPrintEx(14, Tmp_71);
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    goto L111;

  anon39_Then:
    assume {:partition} 0 > status_2;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_47;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    assume {:nonnull} Tmp_72 != 0;
    assume Tmp_72 > 0;
    assume {:nonnull} Tmp_72 != 0;
    assume Tmp_72 > 0;
    assume {:nonnull} Tmp_72 != 0;
    assume Tmp_72 > 0;
    assume {:nonnull} Tmp_72 != 0;
    assume Tmp_72 > 0;
    assume {:nonnull} Tmp_72 != 0;
    assume Tmp_72 > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc vslice_dummy_var_2466;
    call {:si_unique_call 120} SerialLogError(PDrvObj, pDevObj, Tmp_72, Tmp_57, 0, 0, 0, 53, status_2, 393221, Tmp_47, vslice_dummy_var_2466, 0, 0);
    Tmp_43 := strConst__li2bpl15;
    call {:si_unique_call 121} vslice_dummy_var_33 := SerialDbgPrintEx(14, Tmp_43);
    goto L111;

  anon38_Then:
    assume {:partition} 0 > status_2;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc Tmp_41;
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    assume {:nonnull} Tmp_48 != 0;
    assume Tmp_48 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    assume {:nonnull} PDevExt != 0;
    assume PDevExt > 0;
    havoc vslice_dummy_var_2467;
    call {:si_unique_call 122} SerialLogError(PDrvObj, pDevObj, Tmp_70, Tmp_48, 0, 0, 0, 52, status_2, 393220, Tmp_41, vslice_dummy_var_2467, 0, 0);
    Tmp_66 := strConst__li2bpl16;
    call {:si_unique_call 123} vslice_dummy_var_34 := SerialDbgPrintEx(14, Tmp_66);
    goto L111;

  anon51_Then:
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    call {:si_unique_call 124} SerialLogError(PDrvObj, pDevObj, Tmp_68, Tmp_62, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_45 := strConst__li2bpl17;
    call {:si_unique_call 125} vslice_dummy_var_35 := SerialDbgPrintEx(14, Tmp_45);
    status_2 := -1073741670;
    goto L111;

  anon50_Then:
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    call {:si_unique_call 126} SerialLogError(PDrvObj, pDevObj, Tmp_52, Tmp_54, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_49 := strConst__li2bpl18;
    call {:si_unique_call 127} vslice_dummy_var_36 := SerialDbgPrintEx(14, Tmp_49);
    status_2 := -1073741670;
    goto L111;
}



procedure {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialAddToAllDevs"} SerialAddToAllDevs(actual_PListEntry: int)
{
  var {:pointer} Tmp_73: int;
  var {:scalar} oldIrql: int;
  var {:pointer} PListEntry: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 128} vslice_dummy_var_37 := __HAVOC_malloc(4);
    PListEntry := actual_PListEntry;
    call {:si_unique_call 129} Tmp_73 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_73 != 0;
    assume Tmp_73 > 0;
    Mem_T.INT4[Tmp_73] := oldIrql;
    call {:si_unique_call 130} sdv_KeAcquireSpinLock(0, Tmp_73);
    assume {:nonnull} Tmp_73 != 0;
    assume Tmp_73 > 0;
    oldIrql := Mem_T.INT4[Tmp_73];
    call {:si_unique_call 131} vslice_dummy_var_38 := sdv_InsertTailList(AllDevObjs__SERIAL_GLOBALS(SerialGlobals), PListEntry);
    call {:si_unique_call 132} sdv_KeReleaseSpinLock(0, oldIrql);
    return;
}



procedure {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_1: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_75: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_75 == -1073741811 || Tmp_75 == -1073741823 || Tmp_75 == 0 || Tmp_75 == 5 || Tmp_75 == -1073741789 || Tmp_75 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialReadSymName"} SerialReadSymName(actual_PDevExt_1: int, actual_hRegKey: int, actual_PSymName: int, actual_PpRegName: int) returns (Tmp_75: int)
{
  var {:scalar} Tmp_76: int;
  var {:scalar} Tmp_78: int;
  var {:scalar} linkName: int;
  var {:pointer} Tmp_79: int;
  var {:pointer} sdv_58: int;
  var {:scalar} Tmp_82: int;
  var {:scalar} Tmp_83: int;
  var {:pointer} Tmp_84: int;
  var {:scalar} Tmp_85: int;
  var {:pointer} sdv_60: int;
  var {:scalar} Tmp_86: int;
  var {:pointer} sdv_62: int;
  var {:scalar} Tmp_87: int;
  var {:pointer} Tmp_88: int;
  var {:pointer} Tmp_89: int;
  var {:pointer} Tmp_90: int;
  var {:pointer} Tmp_91: int;
  var {:scalar} status_3: int;
  var {:pointer} pDevObj_1: int;
  var {:pointer} pDrvObj: int;
  var {:scalar} Tmp_93: int;
  var {:pointer} PDevExt_1: int;
  var {:pointer} hRegKey: int;
  var {:pointer} PSymName: int;
  var {:pointer} PpRegName: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_2468: int;
  var vslice_dummy_var_2469: int;

  anon0:
    call {:si_unique_call 133} Tmp_76 := __HAVOC_malloc(20);
    call {:si_unique_call 134} Tmp_78 := __HAVOC_malloc(20);
    call {:si_unique_call 135} linkName := __HAVOC_malloc(12);
    call {:si_unique_call 136} Tmp_86 := __HAVOC_malloc(20);
    call {:si_unique_call 137} Tmp_93 := __HAVOC_malloc(20);
    PDevExt_1 := actual_PDevExt_1;
    hRegKey := actual_hRegKey;
    PSymName := actual_PSymName;
    PpRegName := actual_PpRegName;
    call {:si_unique_call 138} vslice_dummy_var_41 := __HAVOC_malloc(8);
    call {:si_unique_call 139} Tmp_79 := __HAVOC_malloc(168);
    call {:si_unique_call 140} vslice_dummy_var_42 := __HAVOC_malloc(44);
    call {:si_unique_call 141} Tmp_84 := __HAVOC_malloc(164);
    call {:si_unique_call 142} Tmp_88 := __HAVOC_malloc(148);
    call {:si_unique_call 143} Tmp_89 := __HAVOC_malloc(36);
    call {:si_unique_call 144} Tmp_90 := __HAVOC_malloc(44);
    call {:si_unique_call 145} Tmp_91 := __HAVOC_malloc(60);
    call {:si_unique_call 146} vslice_dummy_var_43 := __HAVOC_malloc(8);
    assume {:nonnull} PDevExt_1 != 0;
    assume PDevExt_1 > 0;
    havoc pDevObj_1;
    assume {:nonnull} pDevObj_1 != 0;
    assume pDevObj_1 > 0;
    havoc pDrvObj;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    call {:si_unique_call 147} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_83;
    call {:si_unique_call 148} sdv_58 := ExAllocatePoolWithTag(257, Tmp_83, -666022077);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    havoc Tmp_82;
    call {:si_unique_call 149} sdv_RtlZeroMemory(0, Tmp_82);
    call {:si_unique_call 150} sdv_62 := ExAllocatePoolWithTag(257, 258, -666022077);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    Tmp_89 := strConst__li2bpl19;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_2468;
    call {:si_unique_call 151} status_3 := SerialGetRegistryKeyValue(hRegKey, Tmp_89, 18, vslice_dummy_var_2468, 256);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_3 >= 0;
    goto L39;

  L39:
    call {:si_unique_call 152} vslice_dummy_var_44 := corral_nondet();
    call {:si_unique_call 153} vslice_dummy_var_45 := corral_nondet();
    call {:si_unique_call 154} vslice_dummy_var_46 := corral_nondet();
    call {:si_unique_call 155} vslice_dummy_var_39 := corral_nondet();
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_85;
    call {:si_unique_call 156} sdv_60 := ExAllocatePoolWithTag(257, Tmp_85, -666022077);
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} PSymName != 0;
    assume PSymName > 0;
    havoc Tmp_87;
    call {:si_unique_call 157} sdv_RtlZeroMemory(0, Tmp_87);
    call {:si_unique_call 158} vslice_dummy_var_40 := corral_nondet();
    Tmp_91 := strConst__li2bpl23;
    call {:si_unique_call 159} vslice_dummy_var_47 := SerialDbgPrintEx(4, Tmp_91);
    goto L69;

  L69:
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 160} sdv_ExFreePool(0);
    assume {:nonnull} linkName != 0;
    assume linkName > 0;
    goto L70;

  L70:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_3 >= 0;
    goto L76;

  L76:
    Tmp_75 := status_3;
    return;

  anon19_Then:
    assume {:partition} 0 > status_3;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 161} sdv_ExFreePool(0);
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    goto L76;

  anon20_Then:
    goto L76;

  anon18_Then:
    goto L70;

  anon24_Then:
    status_3 := -1073741670;
    goto L69;

  anon17_Then:
    assume {:partition} 0 > status_3;
    Tmp_90 := strConst__li2bpl20;
    assume {:nonnull} PpRegName != 0;
    assume PpRegName > 0;
    havoc vslice_dummy_var_2469;
    call {:si_unique_call 162} status_3 := SerialGetRegistryKeyValue(hRegKey, Tmp_90, 22, vslice_dummy_var_2469, 256);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_3 < 0;
    Tmp_84 := strConst__li2bpl24;
    call {:si_unique_call 163} vslice_dummy_var_48 := SerialDbgPrintEx(14, Tmp_84);
    goto L69;

  anon21_Then:
    assume {:partition} 0 <= status_3;
    goto L39;

  anon23_Then:
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    call {:si_unique_call 164} SerialLogError(pDrvObj, pDevObj_1, Tmp_76, Tmp_86, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_88 := strConst__li2bpl25;
    call {:si_unique_call 165} vslice_dummy_var_49 := SerialDbgPrintEx(14, Tmp_88);
    status_3 := -1073741670;
    goto L69;

  anon22_Then:
    assume {:nonnull} Tmp_93 != 0;
    assume Tmp_93 > 0;
    assume {:nonnull} Tmp_93 != 0;
    assume Tmp_93 > 0;
    assume {:nonnull} Tmp_93 != 0;
    assume Tmp_93 > 0;
    assume {:nonnull} Tmp_93 != 0;
    assume Tmp_93 > 0;
    assume {:nonnull} Tmp_93 != 0;
    assume Tmp_93 > 0;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    call {:si_unique_call 166} SerialLogError(pDrvObj, pDevObj_1, Tmp_78, Tmp_93, 0, 0, 0, 19, 0, -1073348600, 0, 0, 0, 0);
    Tmp_79 := strConst__li2bpl26;
    call {:si_unique_call 167} vslice_dummy_var_50 := SerialDbgPrintEx(14, Tmp_79);
    status_3 := -1073741670;
    goto L69;
}



procedure {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_94: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_94 == -1073348588 || Tmp_94 == -1073348587 || Tmp_94 == -1073348586 || Tmp_94 == -1073348585 || Tmp_94 == -1073348584 || Tmp_94 == 0 || Tmp_94 == -1073348583 || Tmp_94 == -1073741811 || Tmp_94 == -1073741808 || Tmp_94 == -1073741823 || Tmp_94 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetPortInfo"} SerialGetPortInfo(actual_PDevObj: int, actual_PResList: int, actual_PTrResList: int, actual_PConfig: int, actual_PUserData: int) returns (Tmp_94: int)
{
  var {:dopa} {:scalar} ioResIndex: int;
  var {:dopa} {:scalar} isMulti: int;
  var {:scalar} interfaceType: int;
  var {:scalar} count: int;
  var {:pointer} Tmp_95: int;
  var {:scalar} gotIO: int;
  var {:scalar} Tmp_96: int;
  var {:pointer} Tmp_97: int;
  var {:pointer} Tmp_98: int;
  var {:pointer} pPartialTrResourceDesc: int;
  var {:pointer} pDevExt: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} Tmp_100: int;
  var {:scalar} Tmp_101: int;
  var {:pointer} Tmp_102: int;
  var {:scalar} Tmp_103: int;
  var {:scalar} Tmp_104: int;
  var {:pointer} Tmp_105: int;
  var {:scalar} Tmp_106: int;
  var {:pointer} pFullResourceDesc: int;
  var {:pointer} Tmp_107: int;
  var {:pointer} Tmp_108: int;
  var {:pointer} Tmp_109: int;
  var {:scalar} Tmp_110: int;
  var {:pointer} Tmp_111: int;
  var {:scalar} Tmp_112: int;
  var {:scalar} foundOne: int;
  var {:scalar} curIoIndex: int;
  var {:pointer} Tmp_113: int;
  var {:pointer} Tmp_114: int;
  var {:scalar} gotInt: int;
  var {:scalar} badValue: int;
  var {:pointer} Tmp_115: int;
  var {:pointer} Tmp_116: int;
  var {:pointer} pPartialTrResourceList: int;
  var {:pointer} Tmp_117: int;
  var {:scalar} i: int;
  var {:scalar} defaultInterfaceType: int;
  var {:pointer} pPartialResourceList: int;
  var {:pointer} pFullTrResourceDesc: int;
  var {:pointer} Tmp_118: int;
  var {:scalar} Tmp_119: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Tmp_121: int;
  var {:scalar} Tmp_122: int;
  var {:scalar} Tmp_123: int;
  var {:scalar} Tmp_124: int;
  var {:pointer} Tmp_125: int;
  var {:pointer} keyHandle_1: int;
  var {:pointer} Tmp_126: int;
  var {:scalar} defaultClockRate: int;
  var {:pointer} Tmp_127: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} Tmp_131: int;
  var {:scalar} Tmp_132: int;
  var {:scalar} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} sDeviceData: int;
  var {:pointer} Tmp_135: int;
  var {:scalar} gotISR: int;
  var {:pointer} Tmp_136: int;
  var {:pointer} Tmp_137: int;
  var {:pointer} Tmp_139: int;
  var {:scalar} foundIt: int;
  var {:scalar} Tmp_140: int;
  var {:pointer} Tmp_141: int;
  var {:scalar} Tmp_142: int;
  var {:pointer} Tmp_143: int;
  var {:scalar} Tmp_144: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:scalar} status_4: int;
  var {:scalar} Tmp_147: int;
  var {:scalar} Tmp_148: int;
  var {:scalar} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:scalar} gotMem: int;
  var {:pointer} Tmp_151: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} pPartialResourceDesc: int;
  var {:pointer} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:pointer} PDevObj: int;
  var {:pointer} PResList: int;
  var {:pointer} PTrResList: int;
  var {:pointer} PConfig: int;
  var {:pointer} PUserData: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_2470: int;
  var vslice_dummy_var_2471: int;
  var vslice_dummy_var_2472: int;
  var vslice_dummy_var_2473: int;
  var vslice_dummy_var_2474: int;
  var vslice_dummy_var_2475: int;
  var vslice_dummy_var_2476: int;
  var vslice_dummy_var_2477: int;
  var vslice_dummy_var_2478: int;
  var vslice_dummy_var_2479: int;
  var vslice_dummy_var_2480: int;
  var vslice_dummy_var_2481: int;
  var vslice_dummy_var_2482: int;
  var vslice_dummy_var_2483: int;
  var vslice_dummy_var_2484: int;
  var vslice_dummy_var_2485: int;
  var vslice_dummy_var_2486: int;
  var vslice_dummy_var_2487: int;
  var vslice_dummy_var_2488: int;
  var vslice_dummy_var_2489: int;
  var vslice_dummy_var_2490: int;
  var vslice_dummy_var_2491: int;
  var vslice_dummy_var_2492: int;
  var vslice_dummy_var_2493: int;
  var vslice_dummy_var_2494: int;
  var vslice_dummy_var_2495: int;

  anon0:
    call {:si_unique_call 168} ioResIndex := __HAVOC_malloc(4);
    call {:si_unique_call 169} isMulti := __HAVOC_malloc(4);
    call {:si_unique_call 170} Tmp_101 := __HAVOC_malloc(20);
    call {:si_unique_call 171} Tmp_103 := __HAVOC_malloc(20);
    call {:si_unique_call 172} Tmp_106 := __HAVOC_malloc(20);
    call {:si_unique_call 173} Tmp_112 := __HAVOC_malloc(20);
    call {:si_unique_call 174} Tmp_119 := __HAVOC_malloc(20);
    call {:si_unique_call 175} Tmp_123 := __HAVOC_malloc(20);
    call {:si_unique_call 176} Tmp_133 := __HAVOC_malloc(20);
    call {:si_unique_call 177} Tmp_147 := __HAVOC_malloc(20);
    call {:si_unique_call 178} Tmp_148 := __HAVOC_malloc(20);
    call {:si_unique_call 179} Tmp_149 := __HAVOC_malloc(20);
    PDevObj := actual_PDevObj;
    PResList := actual_PResList;
    PTrResList := actual_PTrResList;
    PConfig := actual_PConfig;
    PUserData := actual_PUserData;
    call {:si_unique_call 180} Tmp_95 := __HAVOC_malloc(32);
    call {:si_unique_call 181} Tmp_97 := __HAVOC_malloc(48);
    call {:si_unique_call 182} Tmp_98 := __HAVOC_malloc(40);
    call {:si_unique_call 183} Tmp_99 := __HAVOC_malloc(40);
    call {:si_unique_call 184} Tmp_100 := __HAVOC_malloc(52);
    call {:si_unique_call 185} Tmp_102 := __HAVOC_malloc(244);
    call {:si_unique_call 186} Tmp_105 := __HAVOC_malloc(96);
    call {:si_unique_call 187} Tmp_107 := __HAVOC_malloc(112);
    call {:si_unique_call 188} Tmp_108 := __HAVOC_malloc(88);
    call {:si_unique_call 189} Tmp_109 := __HAVOC_malloc(92);
    call {:si_unique_call 190} Tmp_111 := __HAVOC_malloc(88);
    call {:si_unique_call 191} Tmp_113 := __HAVOC_malloc(96);
    call {:si_unique_call 192} Tmp_114 := __HAVOC_malloc(64);
    call {:si_unique_call 193} Tmp_115 := __HAVOC_malloc(96);
    call {:si_unique_call 194} Tmp_116 := __HAVOC_malloc(40);
    call {:si_unique_call 195} Tmp_117 := __HAVOC_malloc(96);
    call {:si_unique_call 196} Tmp_118 := __HAVOC_malloc(152);
    call {:si_unique_call 197} Tmp_120 := __HAVOC_malloc(216);
    call {:si_unique_call 198} Tmp_121 := __HAVOC_malloc(88);
    call {:si_unique_call 199} Tmp_125 := __HAVOC_malloc(92);
    call {:si_unique_call 200} Tmp_126 := __HAVOC_malloc(92);
    call {:si_unique_call 201} Tmp_127 := __HAVOC_malloc(84);
    call {:si_unique_call 202} Tmp_128 := __HAVOC_malloc(232);
    call {:si_unique_call 203} Tmp_129 := __HAVOC_malloc(28);
    call {:si_unique_call 204} Tmp_130 := __HAVOC_malloc(264);
    call {:si_unique_call 205} Tmp_131 := __HAVOC_malloc(96);
    call {:si_unique_call 206} Tmp_134 := __HAVOC_malloc(92);
    call {:si_unique_call 207} Tmp_135 := __HAVOC_malloc(112);
    call {:si_unique_call 208} Tmp_136 := __HAVOC_malloc(68);
    call {:si_unique_call 209} Tmp_137 := __HAVOC_malloc(80);
    call {:si_unique_call 210} Tmp_139 := __HAVOC_malloc(96);
    call {:si_unique_call 211} Tmp_141 := __HAVOC_malloc(264);
    call {:si_unique_call 212} Tmp_143 := __HAVOC_malloc(28);
    call {:si_unique_call 213} Tmp_145 := __HAVOC_malloc(48);
    call {:si_unique_call 214} Tmp_146 := __HAVOC_malloc(108);
    call {:si_unique_call 215} Tmp_150 := __HAVOC_malloc(92);
    call {:si_unique_call 216} Tmp_151 := __HAVOC_malloc(64);
    call {:si_unique_call 217} Tmp_152 := __HAVOC_malloc(84);
    call {:si_unique_call 218} Tmp_153 := __HAVOC_malloc(68);
    call {:si_unique_call 219} Tmp_154 := __HAVOC_malloc(104);
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc pDevExt;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    status_4 := -1073741822;
    pFullResourceDesc := 0;
    pFullTrResourceDesc := 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    curIoIndex := 0;
    gotMem := 0;
    call {:si_unique_call 220} sdv_do_paged_code_check();
    Tmp_135 := strConst__li2bpl27;
    call {:si_unique_call 221} vslice_dummy_var_55 := SerialDbgPrintEx(11, Tmp_135);
    Tmp_131 := strConst__li2bpl28;
    call {:si_unique_call 222} vslice_dummy_var_56 := SerialDbgPrintEx(12, Tmp_131);
    Tmp_146 := strConst__li2bpl29;
    call {:si_unique_call 223} vslice_dummy_var_57 := SerialDbgPrintEx(12, Tmp_146);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} PResList != 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} PTrResList != 0;
    call {:si_unique_call 224} status_4 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} status_4 >= 0;
    Tmp_151 := strConst__li2bpl30;
    call {:si_unique_call 225} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_151, 32, isMulti, 4);
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:partition} status_4 >= 0;
    goto L73;

  L73:
    Tmp_150 := strConst__li2bpl31;
    call {:si_unique_call 226} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_150, 46, ioResIndex, 4);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} status_4 >= 0;
    goto L79;

  L79:
    call {:si_unique_call 227} vslice_dummy_var_51 := ZwClose(0);
    assume {:nonnull} PResList != 0;
    assume PResList > 0;
    havoc Tmp_141;
    pFullResourceDesc := Tmp_141;
    assume {:nonnull} PTrResList != 0;
    assume PTrResList > 0;
    havoc Tmp_130;
    pFullTrResourceDesc := Tmp_130;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} pFullResourceDesc != 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    pPartialResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullResourceDesc);
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc pPartialResourceDesc;
    assume {:nonnull} pPartialResourceList != 0;
    assume pPartialResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullResourceDesc != 0;
    assume pFullResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := 1843200;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L95;

  L95:
    call {:si_unique_call 228} gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem := SerialGetPortInfo_loop_L95(ioResIndex, isMulti, count, gotIO, curIoIndex, gotInt, i, sDeviceData, gotISR, gotMem, pPartialResourceDesc, PConfig);
    goto L95_last;

  L95_last:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    goto L105;

  L105:
    i := i + 1;
    goto L105_dummy;

  L105_dummy:
    assume false;
    return;

  anon172_Then:
    sDeviceData := pPartialResourceDesc;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} sDeviceData != 0;
    assume sDeviceData > 0;
    havoc vslice_dummy_var_2470;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := vslice_dummy_var_2470;
    goto L105;

  anon173_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} gotMem != 0;
    goto L105;

  anon174_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon178_Then:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialResourceDesc != 0;
    assume pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;

  anon132_Then:
    assume {:partition} i >= count;
    goto L85;

  L85:
    gotInt := 0;
    gotISR := 0;
    gotIO := 0;
    curIoIndex := 0;
    gotMem := 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} pFullTrResourceDesc != 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    pPartialTrResourceList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(pFullTrResourceDesc);
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc pPartialTrResourceDesc;
    assume {:nonnull} pPartialTrResourceList != 0;
    assume pPartialTrResourceList > 0;
    havoc count;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pFullTrResourceDesc != 0;
    assume pFullTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    i := 0;
    goto L148;

  L148:
    call {:si_unique_call 229} gotIO, curIoIndex, gotInt, i, gotISR, gotMem := SerialGetPortInfo_loop_L148(ioResIndex, isMulti, count, gotIO, pPartialTrResourceDesc, curIoIndex, gotInt, i, gotISR, gotMem, PConfig);
    goto L148_last;

  L148_last:
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} count > i;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L156;

  L156:
    i := i + 1;
    goto L156_dummy;

  L156_dummy:
    assume false;
    return;

  anon175_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    gotMem := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon176_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} gotInt == 0;
    gotInt := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} gotISR == 0;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[isMulti] != 0;
    gotISR := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} gotIO == 0;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} curIoIndex == Mem_T.INT4[ioResIndex];
    gotIO := 1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pPartialTrResourceDesc != 0;
    assume pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} curIoIndex != Mem_T.INT4[ioResIndex];
    curIoIndex := curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;

  anon143_Then:
    assume {:partition} i >= count;
    goto L140;

  L140:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_2471;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := vslice_dummy_var_2471;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_2472;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_2472;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_2473;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := vslice_dummy_var_2473;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    havoc vslice_dummy_var_2474;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_2474;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := 0;
    defaultInterfaceType := 1;
    defaultClockRate := 1843200;
    interfaceType := 0;
    goto L191;

  L191:
    call {:si_unique_call 230} interfaceType, foundOne, vslice_dummy_var_52 := SerialGetPortInfo_loop_L191(interfaceType, foundOne, vslice_dummy_var_52);
    goto L191_last;

  L191_last:
    assume {:CounterLoop 17} {:Counter "interfaceType"} true;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} 17 > interfaceType;
    foundOne := 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} interfaceType != 0;
    call {:si_unique_call 231} vslice_dummy_var_52 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} foundOne != 0;
    defaultInterfaceType := interfaceType;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} defaultInterfaceType == 3;
    goto L192;

  L192:
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} PUserData != 0;
    badValue := -1;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    Tmp_124 := 0;
    goto L215;

  L215:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[DisablePort__CONFIG_DATA(PConfig)] := Tmp_124;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_142;
    goto L219;

  L219:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfig)] := Tmp_142;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_132;
    goto L223;

  L223:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfig)] := Tmp_132;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    Tmp_140 := 0;
    goto L227;

  L227:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] := Tmp_140;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_96;
    goto L231;

  L231:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfig)] := Tmp_96;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    Tmp_104 := 0;
    goto L235;

  L235:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[MaskInverted__CONFIG_DATA(PConfig)] := Tmp_104;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    Tmp_110 := defaultClockRate;
    goto L239;

  L239:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := Tmp_110;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_2475;
    Mem_T.INT4[PermitShare__CONFIG_DATA(PConfig)] := vslice_dummy_var_2475;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc vslice_dummy_var_2476;
    Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] := vslice_dummy_var_2476;
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    Tmp_122 := 0;
    goto L245;

  L245:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[TL16C550CAFC__CONFIG_DATA(PConfig)] := Tmp_122;
    goto L246;

  L246:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == -1;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2477;
    havoc vslice_dummy_var_2478;
    call {:si_unique_call 232} SerialLogError(vslice_dummy_var_2477, 0, vslice_dummy_var_2478, Tmp_147, 0, 0, 0, 30, 0, -1073348588, 0, 0, 0, 0);
    Tmp_152 := strConst__li2bpl32;
    call {:si_unique_call 233} vslice_dummy_var_58 := SerialDbgPrintEx(14, Tmp_152);
    status_4 := -1073348588;
    goto L263;

  L263:
    Tmp_94 := status_4;
    goto L1;

  L1:
    return;

  anon161_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != -1;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] != 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 16;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2479;
    havoc vslice_dummy_var_2480;
    call {:si_unique_call 234} SerialLogError(vslice_dummy_var_2479, 0, vslice_dummy_var_2480, Tmp_123, 0, 0, 0, 32, 0, -1073348587, 0, 0, 0, 0);
    Tmp_139 := strConst__li2bpl33;
    call {:si_unique_call 235} vslice_dummy_var_59 := SerialDbgPrintEx(14, Tmp_139);
    status_4 := -1073348587;
    goto L263;

  anon165_Then:
    assume {:partition} 16 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  L251:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2481;
    havoc vslice_dummy_var_2482;
    call {:si_unique_call 236} SerialLogError(vslice_dummy_var_2481, 0, vslice_dummy_var_2482, Tmp_149, 0, 0, 0, 34, 0, -1073348586, 0, 0, 0, 0);
    Tmp_127 := strConst__li2bpl35;
    call {:si_unique_call 237} vslice_dummy_var_60 := SerialDbgPrintEx(14, Tmp_127);
    status_4 := -1073348586;
    goto L263;

  anon167_Then:
    call {:si_unique_call 238} vslice_dummy_var_53 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} foundIt == 0;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2483;
    havoc vslice_dummy_var_2484;
    call {:si_unique_call 239} SerialLogError(vslice_dummy_var_2483, 0, vslice_dummy_var_2484, Tmp_103, 0, 0, 0, 35, 0, -1073348585, 0, 0, 0, 0);
    Tmp_128 := strConst__li2bpl36;
    call {:si_unique_call 240} vslice_dummy_var_73 := SerialDbgPrintEx(14, Tmp_128);
    status_4 := -1073348585;
    goto L263;

  anon168_Then:
    assume {:partition} foundIt != 0;
    goto L294;

  L294:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2485;
    havoc vslice_dummy_var_2486;
    call {:si_unique_call 241} SerialLogError(vslice_dummy_var_2485, 0, vslice_dummy_var_2486, Tmp_101, 0, 0, 0, 36, 0, -1073348584, 0, 0, 0, 0);
    Tmp_120 := strConst__li2bpl37;
    call {:si_unique_call 242} vslice_dummy_var_61 := SerialDbgPrintEx(14, Tmp_120);
    status_4 := -1073348584;
    goto L263;

  anon169_Then:
    goto L319;

  L319:
    status_4 := 0;
    Tmp_111 := strConst__li2bpl60;
    call {:si_unique_call 243} vslice_dummy_var_62 := SerialDbgPrintEx(4, Tmp_111);
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    Tmp_154 := strConst__li2bpl61;
    call {:si_unique_call 244} vslice_dummy_var_63 := SerialDbgPrintEx(4, Tmp_154);
    Tmp_137 := strConst__li2bpl38;
    call {:si_unique_call 245} vslice_dummy_var_64 := SerialDbgPrintEx(4, Tmp_137);
    Tmp_115 := strConst__li2bpl39;
    call {:si_unique_call 246} vslice_dummy_var_65 := SerialDbgPrintEx(4, Tmp_115);
    Tmp_113 := strConst__li2bpl40;
    call {:si_unique_call 247} vslice_dummy_var_66 := SerialDbgPrintEx(4, Tmp_113);
    Tmp_121 := strConst__li2bpl41;
    call {:si_unique_call 248} vslice_dummy_var_67 := SerialDbgPrintEx(4, Tmp_121);
    Tmp_109 := strConst__li2bpl42;
    call {:si_unique_call 249} vslice_dummy_var_68 := SerialDbgPrintEx(4, Tmp_109);
    Tmp_126 := strConst__li2bpl43;
    call {:si_unique_call 250} vslice_dummy_var_69 := SerialDbgPrintEx(4, Tmp_126);
    Tmp_105 := strConst__li2bpl44;
    call {:si_unique_call 251} vslice_dummy_var_70 := SerialDbgPrintEx(4, Tmp_105);
    Tmp_108 := strConst__li2bpl45;
    call {:si_unique_call 252} vslice_dummy_var_71 := SerialDbgPrintEx(4, Tmp_108);
    Tmp_136 := strConst__li2bpl46;
    call {:si_unique_call 253} vslice_dummy_var_72 := SerialDbgPrintEx(4, Tmp_136);
    goto L263;

  anon166_Then:
    goto L319;

  anon160_Then:
    goto L294;

  anon163_Then:
    assume {:partition} Mem_T.INT4[Indexed__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] > 8;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    assume {:nonnull} Tmp_119 != 0;
    assume Tmp_119 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2487;
    havoc vslice_dummy_var_2488;
    call {:si_unique_call 254} SerialLogError(vslice_dummy_var_2487, 0, vslice_dummy_var_2488, Tmp_119, 0, 0, 0, 33, 0, -1073348587, 0, 0, 0, 0);
    Tmp_117 := strConst__li2bpl33;
    call {:si_unique_call 255} vslice_dummy_var_74 := SerialDbgPrintEx(14, Tmp_117);
    status_4 := -1073348587;
    goto L263;

  anon164_Then:
    assume {:partition} 8 >= Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)];
    goto L251;

  anon162_Then:
    assume {:partition} Mem_T.INT4[PortIndex__CONFIG_DATA(PConfig)] == 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2489;
    havoc vslice_dummy_var_2490;
    call {:si_unique_call 256} SerialLogError(vslice_dummy_var_2489, 0, vslice_dummy_var_2490, Tmp_112, 0, 0, 0, 31, 0, -1073348588, 0, 0, 0, 0);
    Tmp_102 := strConst__li2bpl34;
    call {:si_unique_call 257} vslice_dummy_var_75 := SerialDbgPrintEx(14, Tmp_102);
    status_4 := -1073348588;
    goto L263;

  anon159_Then:
    goto L251;

  anon158_Then:
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc Tmp_144;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    Tmp_116 := strConst__li2bpl62;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} pDevExt != 0;
    assume pDevExt > 0;
    havoc vslice_dummy_var_2491;
    havoc vslice_dummy_var_2492;
    havoc vslice_dummy_var_2493;
    call {:si_unique_call 258} SerialLogError(vslice_dummy_var_2491, 0, vslice_dummy_var_2492, Tmp_148, 0, 0, 0, 59, 0, -1073348583, Tmp_144, vslice_dummy_var_2493, 20, Tmp_116);
    Tmp_153 := strConst__li2bpl47;
    call {:si_unique_call 259} vslice_dummy_var_76 := SerialDbgPrintEx(14, Tmp_153);
    status_4 := -1073348583;
    goto L263;

  anon157_Then:
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    Tmp_145 := strConst__li2bpl63;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    assume {:nonnull} PDevObj != 0;
    assume PDevObj > 0;
    havoc vslice_dummy_var_2494;
    havoc vslice_dummy_var_2495;
    call {:si_unique_call 260} SerialLogError(vslice_dummy_var_2494, 0, vslice_dummy_var_2495, Tmp_106, 0, 0, 0, 58, 0, -1073348583, 0, 0, 26, Tmp_145);
    Tmp_125 := strConst__li2bpl48;
    call {:si_unique_call 261} vslice_dummy_var_77 := SerialDbgPrintEx(14, Tmp_125);
    status_4 := -1073348583;
    goto L263;

  anon189_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_122;
    goto L245;

  anon188_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_110;
    goto L239;

  anon187_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_104;
    goto L235;

  anon186_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_96;
    goto L231;

  anon185_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_140;
    goto L227;

  anon184_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_132;
    goto L223;

  anon183_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_142;
    goto L219;

  anon182_Then:
    assume {:nonnull} PUserData != 0;
    assume PUserData > 0;
    havoc Tmp_124;
    goto L215;

  anon155_Then:
    assume {:partition} PUserData == 0;
    call {:si_unique_call 262} status_4 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} status_4 >= 0;
    Tmp_97 := strConst__li2bpl50;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 263} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_97, 24, DisablePort__CONFIG_DATA(PConfig), 4);
    Tmp_114 := strConst__li2bpl51;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 264} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_114, 32, ForceFifoEnable__CONFIG_DATA(PConfig), 4);
    Tmp_129 := strConst__li2bpl52;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 265} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_129, 14, RxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_143 := strConst__li2bpl53;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 266} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_143, 14, TxFIFO__CONFIG_DATA(PConfig), 4);
    Tmp_100 := strConst__li2bpl54;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 267} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_100, 26, MaskInverted__CONFIG_DATA(PConfig), 4);
    Tmp_134 := strConst__li2bpl55;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 268} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_134, 46, PermitShare__CONFIG_DATA(PConfig), 4);
    Tmp_98 := strConst__li2bpl56;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 269} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_98, 20, PortIndex__CONFIG_DATA(PConfig), 4);
    Tmp_95 := strConst__li2bpl57;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 270} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_95, 16, Indexed__CONFIG_DATA(PConfig), 4);
    Tmp_99 := strConst__li2bpl58;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 271} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_99, 20, ClockRate__CONFIG_DATA(PConfig), 4);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} status_4 >= 0;
    goto L424;

  L424:
    Tmp_107 := strConst__li2bpl59;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    call {:si_unique_call 272} status_4 := SerialGetRegistryKeyValue(keyHandle_1, Tmp_107, 56, TL16C550CAFC__CONFIG_DATA(PConfig), 4);
    call {:si_unique_call 273} vslice_dummy_var_54 := ZwClose(0);
    goto L246;

  anon171_Then:
    assume {:partition} 0 > status_4;
    assume {:nonnull} PConfig != 0;
    assume PConfig > 0;
    Mem_T.INT4[ClockRate__CONFIG_DATA(PConfig)] := defaultClockRate;
    goto L424;

  anon170_Then:
    assume {:partition} 0 > status_4;
    Tmp_118 := strConst__li2bpl49;
    call {:si_unique_call 274} vslice_dummy_var_78 := SerialDbgPrintEx(14, Tmp_118);
    goto L263;

  anon181_Then:
    assume {:partition} defaultInterfaceType != 3;
    goto L192;

  anon156_Then:
    assume {:partition} foundOne == 0;
    goto L198;

  L198:
    interfaceType := interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    assume false;
    return;

  anon180_Then:
    assume {:partition} interfaceType == 0;
    goto L198;

  anon154_Then:
    assume {:partition} interfaceType >= 17;
    goto L192;

  anon179_Then:
    assume {:partition} pFullTrResourceDesc == 0;
    goto L140;

  anon177_Then:
    assume {:partition} pFullResourceDesc == 0;
    goto L85;

  anon131_Then:
    assume {:partition} 0 > status_4;
    assume {:nonnull} ioResIndex != 0;
    assume ioResIndex > 0;
    Mem_T.INT4[ioResIndex] := 0;
    goto L79;

  anon130_Then:
    assume {:partition} 0 > status_4;
    assume {:nonnull} isMulti != 0;
    assume isMulti > 0;
    Mem_T.INT4[isMulti] := 0;
    goto L73;

  anon129_Then:
    assume {:partition} 0 > status_4;
    Tmp_94 := status_4;
    goto L1;

  anon128_Then:
    assume {:partition} PTrResList == 0;
    goto L59;

  L59:
    Tmp_94 := -1073741670;
    goto L1;

  anon127_Then:
    assume {:partition} PResList == 0;
    goto L59;
}



procedure {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_1: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_155: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialFinishStartDevice"} SerialFinishStartDevice(actual_PDevObj_1: int, actual_PResList_1: int, actual_PTrResList_1: int, actual_PUserData_1: int) returns (Tmp_155: int)
{
  var {:pointer} Tmp_156: int;
  var {:scalar} Tmp_157: int;
  var {:scalar} Tmp_158: int;
  var {:scalar} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:pointer} Tmp_161: int;
  var {:scalar} allocedUserData: int;
  var {:pointer} Tmp_162: int;
  var {:dopa} {:scalar} powerPolicy: int;
  var {:scalar} Tmp_163: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} pDevExt_1: int;
  var {:scalar} Tmp_166: int;
  var {:scalar} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} pnpKey: int;
  var {:scalar} Tmp_169: int;
  var {:pointer} Tmp_170: int;
  var {:pointer} Tmp_171: int;
  var {:pointer} pConfig: int;
  var {:pointer} Tmp_172: int;
  var {:pointer} sdv_126: int;
  var {:dopa} {:scalar} powerOnClose: int;
  var {:pointer} sdv_129: int;
  var {:pointer} Tmp_174: int;
  var {:pointer} Tmp_175: int;
  var {:pointer} Tmp_176: int;
  var {:scalar} status_5: int;
  var {:pointer} countSoFar: int;
  var {:scalar} Tmp_179: int;
  var {:pointer} Tmp_180: int;
  var {:pointer} sdv_140: int;
  var {:scalar} Tmp_181: int;
  var {:scalar} Tmp_182: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} Tmp_184: int;
  var {:scalar} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} PDevObj_1: int;
  var {:pointer} PResList_1: int;
  var {:pointer} PTrResList_1: int;
  var {:pointer} PUserData_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_2496: int;
  var vslice_dummy_var_2497: int;
  var vslice_dummy_var_2498: int;
  var vslice_dummy_var_2499: int;
  var vslice_dummy_var_2500: int;
  var vslice_dummy_var_2501: int;
  var vslice_dummy_var_2502: int;
  var vslice_dummy_var_2503: int;
  var vslice_dummy_var_2504: int;
  var vslice_dummy_var_2505: int;
  var vslice_dummy_var_2506: int;
  var vslice_dummy_var_2507: int;
  var vslice_dummy_var_2508: int;
  var vslice_dummy_var_2509: int;

  anon0:
    call {:si_unique_call 275} Tmp_157 := __HAVOC_malloc(20);
    call {:si_unique_call 276} powerPolicy := __HAVOC_malloc(4);
    call {:si_unique_call 277} Tmp_166 := __HAVOC_malloc(20);
    call {:si_unique_call 278} powerOnClose := __HAVOC_malloc(4);
    call {:si_unique_call 279} Tmp_181 := __HAVOC_malloc(20);
    PDevObj_1 := actual_PDevObj_1;
    PResList_1 := actual_PResList_1;
    PTrResList_1 := actual_PTrResList_1;
    PUserData_1 := actual_PUserData_1;
    call {:si_unique_call 280} Tmp_160 := __HAVOC_malloc(316);
    call {:si_unique_call 281} Tmp_161 := __HAVOC_malloc(112);
    call {:si_unique_call 282} Tmp_165 := __HAVOC_malloc(168);
    call {:si_unique_call 283} Tmp_168 := __HAVOC_malloc(144);
    call {:si_unique_call 284} Tmp_170 := __HAVOC_malloc(156);
    call {:si_unique_call 285} Tmp_171 := __HAVOC_malloc(104);
    call {:si_unique_call 286} Tmp_172 := __HAVOC_malloc(88);
    call {:si_unique_call 287} Tmp_174 := __HAVOC_malloc(132);
    call {:si_unique_call 288} Tmp_175 := __HAVOC_malloc(884);
    call {:si_unique_call 289} Tmp_176 := __HAVOC_malloc(884);
    call {:si_unique_call 290} Tmp_180 := __HAVOC_malloc(220);
    call {:si_unique_call 291} Tmp_183 := __HAVOC_malloc(104);
    call {:si_unique_call 292} Tmp_184 := __HAVOC_malloc(272);
    call {:si_unique_call 293} Tmp_186 := __HAVOC_malloc(168);
    assume {:nonnull} PDevObj_1 != 0;
    assume PDevObj_1 > 0;
    havoc pDevExt_1;
    allocedUserData := 0;
    call {:si_unique_call 294} sdv_do_paged_code_check();
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1)], 2) != 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1)], 1) != 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 295} SerialSetDeviceFlags(pDevExt_1, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1), 2, 0);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 296} sdv_126 := ExAllocatePoolWithTag(1, 112, -666022077);
    PUserData_1 := sdv_126;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} PUserData_1 != 0;
    allocedUserData := 1;
    call {:si_unique_call 297} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  L65:
    call {:si_unique_call 298} sdv_129 := ExAllocatePoolWithTag(1, 128, -666022077);
    pConfig := sdv_129;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 299} sdv_RtlZeroMemory(0, 128);
    call {:si_unique_call 300} status_5 := SerialGetPortInfo(PDevObj_1, PResList_1, PTrResList_1, pConfig, PUserData_1);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} status_5 < 0;
    goto L90;

  L90:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} status_5 >= 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    Tmp_185 := 0;
    goto L101;

  L101:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_182;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    Tmp_159 := 1;
    goto L109;

  L109:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  L118:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    Tmp_163 := 1;
    goto L123;

  L123:
    Tmp_169 := Tmp_163;
    goto L124;

  L124:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_2496;
    call {:si_unique_call 301} boogieTmp := SerialReportMaxBaudRate(vslice_dummy_var_2496);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 302} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 303} sdv_140 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_140 != 0;
    assume sdv_140 > 0;
    countSoFar := SerialCount__CONFIGURATION_INFORMATION(sdv_140);
    assume {:nonnull} countSoFar != 0;
    assume countSoFar > 0;
    Mem_T.INT4[countSoFar] := Mem_T.INT4[countSoFar] + 1;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 304} vslice_dummy_var_87 := IoWMIRegistrationControl(0, 1);
    goto L153;

  L153:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    call {:si_unique_call 305} SerialUnstallIrps(pDevExt_1);
    goto L154;

  L154:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 306} SerialSetDeviceFlags(pDevExt_1, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_1), -1, 0);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 307} SerialSetDeviceFlags(pDevExt_1, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1), 1, 1);
    goto L164;

  L164:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} pConfig != 0;
    call {:si_unique_call 308} sdv_ExFreePool(0);
    goto L165;

  L165:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} PUserData_1 != 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} allocedUserData != 0;
    call {:si_unique_call 309} sdv_ExFreePool(0);
    goto L169;

  L169:
    Tmp_174 := strConst__li2bpl65;
    call {:si_unique_call 310} vslice_dummy_var_86 := SerialDbgPrintEx(11, Tmp_174);
    Tmp_155 := status_5;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon89_Then:
    assume {:partition} allocedUserData == 0;
    goto L169;

  anon88_Then:
    assume {:partition} PUserData_1 == 0;
    goto L169;

  anon87_Then:
    assume {:partition} pConfig == 0;
    goto L165;

  anon86_Then:
    goto L154;

  anon85_Then:
    goto L153;

  anon84_Then:
    Tmp_163 := 2;
    goto L123;

  anon83_Then:
    Tmp_169 := 0;
    goto L124;

  anon104_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  anon105_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  anon106_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  anon107_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  anon113_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto L118;

  anon112_Then:
    Tmp_159 := 0;
    goto L109;

  anon111_Then:
    Tmp_185 := 1;
    goto L101;

  anon82_Then:
    assume {:partition} 0 > status_5;
    Tmp_183 := strConst__li2bpl64;
    call {:si_unique_call 311} vslice_dummy_var_88 := SerialDbgPrintEx(4, Tmp_183);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    call {:si_unique_call 312} SerialKillPendingIrps(PDevObj_1);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 313} SerialSetDeviceFlags(pDevExt_1, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_1), 1, 1);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 314} SerialSetDeviceFlags(pDevExt_1, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1), 1, 0);
    goto L164;

  anon114_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon90_Then:
    goto L164;

  anon79_Then:
    assume {:partition} 0 <= status_5;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_2497;
    call {:si_unique_call 315} status_5 := SerialGotoPowerState(vslice_dummy_var_2497, pDevExt_1, 1);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_5 < 0;
    goto L90;

  anon81_Then:
    assume {:partition} 0 <= status_5;
    goto L81;

  L81:
    call {:si_unique_call 316} status_5 := SerialFindInitController(PDevObj_1, pConfig);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} status_5 >= 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} pDevExt_1 != 0;
    Tmp_180 := strConst__li2bpl67;
    call {:si_unique_call 317} vslice_dummy_var_82 := SerialDbgPrintEx(8, Tmp_180);
    goto L218;

  L218:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto L220;

  L220:
    Tmp_171 := strConst__li2bpl68;
    call {:si_unique_call 318} vslice_dummy_var_83 := SerialDbgPrintEx(8, Tmp_171);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 319} SerialAddToAllDevs(AllDevObjs__SERIAL_DEVICE_EXTENSION(pDevExt_1));
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 320} vslice_dummy_var_84 := KeSynchronizeExecution(0, li2bplFunctionConstant248, 0);
    call {:si_unique_call 321} vslice_dummy_var_79 := KeSynchronizeExecution(0, li2bplFunctionConstant249, 0);
    call {:si_unique_call 322} vslice_dummy_var_80 := KeSynchronizeExecution(0, li2bplFunctionConstant250, 0);
    call {:si_unique_call 323} vslice_dummy_var_81 := KeSynchronizeExecution(0, li2bplFunctionConstant251, 0);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    Tmp_165 := strConst__li2bpl69;
    call {:si_unique_call 324} vslice_dummy_var_85 := SerialDbgPrintEx(12, Tmp_165);
    goto L90;

  anon95_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_156;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    havoc vslice_dummy_var_2498;
    call {:si_unique_call 325} status_5 := SerialDoExternalNaming(pDevExt_1, vslice_dummy_var_2498);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} status_5 < 0;
    Tmp_168 := strConst__li2bpl70;
    call {:si_unique_call 326} vslice_dummy_var_89 := SerialDbgPrintEx(14, Tmp_168);
    status_5 := 0;
    goto L90;

  anon96_Then:
    assume {:partition} 0 <= status_5;
    goto L90;

  anon93_Then:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    Tmp_160 := strConst__li2bpl71;
    call {:si_unique_call 327} vslice_dummy_var_90 := SerialDbgPrintEx(8, Tmp_160);
    Tmp_175 := strConst__li2bpl72;
    call {:si_unique_call 328} vslice_dummy_var_91 := SerialDbgPrintEx(8, Tmp_175);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_162;
    assume {:nonnull} Tmp_162 != 0;
    assume Tmp_162 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_164;
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    assume {:nonnull} pConfig != 0;
    assume pConfig > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_2499;
    havoc vslice_dummy_var_2500;
    havoc vslice_dummy_var_2501;
    havoc vslice_dummy_var_2502;
    havoc vslice_dummy_var_2503;
    havoc vslice_dummy_var_2504;
    havoc vslice_dummy_var_2505;
    call {:si_unique_call 329} status_5 := IoConnectInterrupt(0, li2bplFunctionConstant252, vslice_dummy_var_2499, 0, vslice_dummy_var_2500, vslice_dummy_var_2501, vslice_dummy_var_2502, vslice_dummy_var_2503, vslice_dummy_var_2504, vslice_dummy_var_2505, 0);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} status_5 < 0;
    Tmp_170 := strConst__li2bpl73;
    call {:si_unique_call 330} vslice_dummy_var_92 := SerialDbgPrintEx(14, Tmp_170);
    Tmp_176 := strConst__li2bpl72;
    call {:si_unique_call 331} vslice_dummy_var_93 := SerialDbgPrintEx(14, Tmp_176);
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc Tmp_179;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    assume {:nonnull} PDevObj_1 != 0;
    assume PDevObj_1 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_2506;
    havoc vslice_dummy_var_2507;
    havoc vslice_dummy_var_2508;
    call {:si_unique_call 332} SerialLogError(vslice_dummy_var_2506, PDevObj_1, vslice_dummy_var_2507, Tmp_181, 0, 0, 0, 1, status_5, -1073348601, Tmp_179, vslice_dummy_var_2508, 0, 0);
    status_5 := -1073348601;
    goto L90;

  anon97_Then:
    assume {:partition} 0 <= status_5;
    goto L220;

  anon94_Then:
    goto L220;

  anon92_Then:
    assume {:partition} pDevExt_1 == 0;
    Tmp_186 := strConst__li2bpl66;
    call {:si_unique_call 333} vslice_dummy_var_94 := SerialDbgPrintEx(14, Tmp_186);
    goto L218;

  anon91_Then:
    assume {:partition} 0 > status_5;
    goto L90;

  anon80_Then:
    goto L81;

  anon110_Then:
    assume {:partition} pConfig == 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    havoc vslice_dummy_var_2509;
    call {:si_unique_call 334} SerialLogError(vslice_dummy_var_2509, 0, Tmp_166, Tmp_157, 0, 0, 0, 37, 0, -1073348600, 0, 0, 0, 0);
    Tmp_184 := strConst__li2bpl74;
    call {:si_unique_call 335} vslice_dummy_var_95 := SerialDbgPrintEx(14, Tmp_184);
    status_5 := -1073741670;
    goto L90;

  anon101_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon102_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon103_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon109_Then:
    assume {:nonnull} PUserData_1 != 0;
    assume PUserData_1 > 0;
    goto L65;

  anon108_Then:
    assume {:partition} PUserData_1 == 0;
    Tmp_155 := -1073741670;
    goto L1;

  anon78_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1)], 1) == 0;
    goto L17;

  L17:
    call {:si_unique_call 336} status_5 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} status_5 >= 0;
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    Mem_T.INT4[powerPolicy] := 0;
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    Mem_T.INT4[powerOnClose] := 0;
    Tmp_161 := strConst__li2bpl75;
    call {:si_unique_call 337} vslice_dummy_var_96 := SerialGetRegistryKeyValue(pnpKey, Tmp_161, 56, powerPolicy, 4);
    assume {:nonnull} powerPolicy != 0;
    assume powerPolicy > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Mem_T.INT4[powerPolicy] != 0;
    Tmp_167 := 0;
    goto L310;

  L310:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    Tmp_172 := strConst__li2bpl76;
    call {:si_unique_call 338} vslice_dummy_var_97 := SerialGetRegistryKeyValue(pnpKey, Tmp_172, 44, powerOnClose, 4);
    assume {:nonnull} powerOnClose != 0;
    assume powerOnClose > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} Mem_T.INT4[powerOnClose] != 0;
    Tmp_158 := 1;
    goto L317;

  L317:
    assume {:nonnull} pDevExt_1 != 0;
    assume pDevExt_1 > 0;
    call {:si_unique_call 339} vslice_dummy_var_98 := ZwClose(0);
    goto L65;

  anon100_Then:
    assume {:partition} Mem_T.INT4[powerOnClose] == 0;
    Tmp_158 := 0;
    goto L317;

  anon99_Then:
    assume {:partition} Mem_T.INT4[powerPolicy] == 0;
    Tmp_167 := 1;
    goto L310;

  anon98_Then:
    assume {:partition} 0 > status_5;
    goto L65;

  anon77_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_1)], 2) == 0;
    goto L17;
}



procedure {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_2: int, actual_PIrp: int) returns (Tmp_187: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Cancel__IRP, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialPnpDispatch"} SerialPnpDispatch(actual_PDevObj_2: int, actual_PIrp: int) returns (Tmp_187: int)
{
  var {:scalar} pIdBuf: int;
  var {:scalar} sdv_143: int;
  var {:pointer} sdv_144: int;
  var {:pointer} sdv_148: int;
  var {:dopa} {:scalar} isMulti_1: int;
  var {:pointer} pResList: int;
  var {:pointer} Tmp_188: int;
  var {:pointer} Tmp_189: int;
  var {:scalar} Tmp_190: int;
  var {:pointer} pDevExt_2: int;
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} Tmp_193: int;
  var {:pointer} Tmp_194: int;
  var {:pointer} Tmp_195: int;
  var {:pointer} Tmp_196: int;
  var {:pointer} Tmp_197: int;
  var {:pointer} Tmp_198: int;
  var {:pointer} Tmp_199: int;
  var {:scalar} Tmp_200: int;
  var {:pointer} Tmp_201: int;
  var {:scalar} cap: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:scalar} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:scalar} pnpIdStrLen: int;
  var {:scalar} pendingIRPs: int;
  var {:pointer} pQueryCapsEvent: int;
  var {:pointer} Tmp_206: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Tmp_209: int;
  var {:pointer} pIrpStack: int;
  var {:pointer} Tmp_210: int;
  var {:dopa} {:scalar} isMulti_2: int;
  var {:pointer} Tmp_211: int;
  var {:pointer} sdv_177: int;
  var {:pointer} Tmp_212: int;
  var {:pointer} pLowerDevObj_2: int;
  var {:scalar} Tmp_213: int;
  var {:pointer} Tmp_214: int;
  var {:pointer} Tmp_215: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} Tmp_217: int;
  var {:scalar} gotInt_1: int;
  var {:pointer} Tmp_218: int;
  var {:pointer} Tmp_219: int;
  var {:pointer} Tmp_220: int;
  var {:pointer} Tmp_221: int;
  var {:pointer} pResDesc: int;
  var {:pointer} Tmp_222: int;
  var {:pointer} Tmp_223: int;
  var {:scalar} allocLen: int;
  var {:pointer} Tmp_224: int;
  var {:pointer} Tmp_225: int;
  var {:scalar} Tmp_226: int;
  var {:pointer} Tmp_227: int;
  var {:scalar} Tmp_228: int;
  var {:scalar} listNum: int;
  var {:pointer} Tmp_230: int;
  var {:pointer} Tmp_231: int;
  var {:pointer} Tmp_232: int;
  var {:pointer} Tmp_233: int;
  var {:pointer} Tmp_234: int;
  var {:pointer} Tmp_235: int;
  var {:scalar} pendingIRPs_1: int;
  var {:pointer} Tmp_236: int;
  var {:pointer} pReqList: int;
  var {:pointer} Tmp_237: int;
  var {:pointer} Tmp_238: int;
  var {:pointer} Tmp_239: int;
  var {:pointer} Tmp_240: int;
  var {:pointer} Tmp_241: int;
  var {:scalar} sdv_204: int;
  var {:scalar} pendingIRPs_2: int;
  var {:pointer} Tmp_242: int;
  var {:pointer} Tmp_243: int;
  var {:pointer} Tmp_244: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_245: int;
  var {:pointer} Tmp_246: int;
  var {:pointer} sdv_210: int;
  var {:pointer} pnpKey_1: int;
  var {:pointer} pResFiltEvent: int;
  var {:pointer} Tmp_247: int;
  var {:scalar} gotISR_1: int;
  var {:scalar} Tmp_248: int;
  var {:pointer} Tmp_249: int;
  var {:pointer} Tmp_250: int;
  var {:pointer} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:scalar} curStrLen: int;
  var {:pointer} curStr: int;
  var {:pointer} Tmp_254: int;
  var {:scalar} Tmp_255: int;
  var {:pointer} Tmp_256: int;
  var {:pointer} pDevCaps: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:scalar} sdv_237: int;
  var {:scalar} status_6: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} pnpKey_2: int;
  var {:pointer} Tmp_262: int;
  var {:scalar} sdv_242: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:pointer} Tmp_265: int;
  var {:pointer} PDevObj_2: int;
  var {:pointer} PIrp: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_2510: int;
  var vslice_dummy_var_2511: int;
  var vslice_dummy_var_2512: int;
  var vslice_dummy_var_2513: int;
  var vslice_dummy_var_2514: int;
  var vslice_dummy_var_2515: int;
  var vslice_dummy_var_2516: int;
  var vslice_dummy_var_2517: int;

  anon0:
    call {:si_unique_call 340} pIdBuf := __HAVOC_malloc(12);
    call {:si_unique_call 341} isMulti_1 := __HAVOC_malloc(4);
    call {:si_unique_call 342} isMulti_2 := __HAVOC_malloc(4);
    PDevObj_2 := actual_PDevObj_2;
    PIrp := actual_PIrp;
    call {:si_unique_call 343} Tmp_188 := __HAVOC_malloc(144);
    call {:si_unique_call 344} Tmp_189 := __HAVOC_malloc(148);
    call {:si_unique_call 345} Tmp_191 := __HAVOC_malloc(64);
    call {:si_unique_call 346} Tmp_192 := __HAVOC_malloc(72);
    call {:si_unique_call 347} Tmp_193 := __HAVOC_malloc(112);
    call {:si_unique_call 348} Tmp_195 := __HAVOC_malloc(100);
    call {:si_unique_call 349} Tmp_196 := __HAVOC_malloc(112);
    call {:si_unique_call 350} Tmp_197 := __HAVOC_malloc(72);
    call {:si_unique_call 351} Tmp_198 := __HAVOC_malloc(132);
    call {:si_unique_call 352} Tmp_199 := __HAVOC_malloc(180);
    call {:si_unique_call 353} Tmp_201 := __HAVOC_malloc(116);
    call {:si_unique_call 354} Tmp_202 := __HAVOC_malloc(60);
    call {:si_unique_call 355} Tmp_203 := __HAVOC_malloc(380);
    call {:si_unique_call 356} Tmp_205 := __HAVOC_malloc(128);
    call {:si_unique_call 357} Tmp_206 := __HAVOC_malloc(28);
    call {:si_unique_call 358} Tmp_207 := __HAVOC_malloc(88);
    call {:si_unique_call 359} Tmp_208 := __HAVOC_malloc(72);
    call {:si_unique_call 360} Tmp_209 := __HAVOC_malloc(72);
    call {:si_unique_call 361} Tmp_210 := __HAVOC_malloc(120);
    call {:si_unique_call 362} Tmp_211 := __HAVOC_malloc(60);
    call {:si_unique_call 363} Tmp_212 := __HAVOC_malloc(60);
    call {:si_unique_call 364} Tmp_214 := __HAVOC_malloc(60);
    call {:si_unique_call 365} Tmp_215 := __HAVOC_malloc(116);
    call {:si_unique_call 366} Tmp_216 := __HAVOC_malloc(112);
    call {:si_unique_call 367} Tmp_217 := __HAVOC_malloc(392);
    call {:si_unique_call 368} Tmp_218 := __HAVOC_malloc(72);
    call {:si_unique_call 369} Tmp_219 := __HAVOC_malloc(72);
    call {:si_unique_call 370} Tmp_220 := __HAVOC_malloc(28);
    call {:si_unique_call 371} Tmp_221 := __HAVOC_malloc(28);
    call {:si_unique_call 372} Tmp_222 := __HAVOC_malloc(92);
    call {:si_unique_call 373} Tmp_223 := __HAVOC_malloc(120);
    call {:si_unique_call 374} Tmp_224 := __HAVOC_malloc(88);
    call {:si_unique_call 375} Tmp_225 := __HAVOC_malloc(72);
    call {:si_unique_call 376} Tmp_227 := __HAVOC_malloc(72);
    call {:si_unique_call 377} Tmp_230 := __HAVOC_malloc(72);
    call {:si_unique_call 378} Tmp_232 := __HAVOC_malloc(72);
    call {:si_unique_call 379} Tmp_233 := __HAVOC_malloc(64);
    call {:si_unique_call 380} Tmp_234 := __HAVOC_malloc(72);
    call {:si_unique_call 381} Tmp_235 := __HAVOC_malloc(28);
    call {:si_unique_call 382} Tmp_236 := __HAVOC_malloc(60);
    call {:si_unique_call 383} Tmp_237 := __HAVOC_malloc(60);
    call {:si_unique_call 384} Tmp_238 := __HAVOC_malloc(168);
    call {:si_unique_call 385} Tmp_239 := __HAVOC_malloc(72);
    call {:si_unique_call 386} Tmp_240 := __HAVOC_malloc(100);
    call {:si_unique_call 387} Tmp_241 := __HAVOC_malloc(132);
    call {:si_unique_call 388} Tmp_242 := __HAVOC_malloc(88);
    call {:si_unique_call 389} Tmp_243 := __HAVOC_malloc(60);
    call {:si_unique_call 390} Tmp_244 := __HAVOC_malloc(128);
    call {:si_unique_call 391} Tmp_245 := __HAVOC_malloc(116);
    call {:si_unique_call 392} Tmp_246 := __HAVOC_malloc(60);
    call {:si_unique_call 393} Tmp_247 := __HAVOC_malloc(128);
    call {:si_unique_call 394} Tmp_249 := __HAVOC_malloc(136);
    call {:si_unique_call 395} Tmp_250 := __HAVOC_malloc(72);
    call {:si_unique_call 396} Tmp_251 := __HAVOC_malloc(72);
    call {:si_unique_call 397} Tmp_252 := __HAVOC_malloc(168);
    call {:si_unique_call 398} Tmp_254 := __HAVOC_malloc(60);
    call {:si_unique_call 399} Tmp_256 := __HAVOC_malloc(132);
    call {:si_unique_call 400} Tmp_258 := __HAVOC_malloc(176);
    call {:si_unique_call 401} Tmp_259 := __HAVOC_malloc(176);
    call {:si_unique_call 402} Tmp_260 := __HAVOC_malloc(144);
    call {:si_unique_call 403} Tmp_261 := __HAVOC_malloc(132);
    call {:si_unique_call 404} Tmp_262 := __HAVOC_malloc(140);
    call {:si_unique_call 405} Tmp_263 := __HAVOC_malloc(156);
    call {:si_unique_call 406} Tmp_264 := __HAVOC_malloc(112);
    call {:si_unique_call 407} Tmp_265 := __HAVOC_malloc(120);
    assume {:nonnull} PDevObj_2 != 0;
    assume PDevObj_2 > 0;
    havoc pDevExt_2;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc pLowerDevObj_2;
    call {:si_unique_call 408} pIrpStack := sdv_IoGetCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 409} sdv_do_paged_code_check();
    call {:si_unique_call 410} status_6 := SerialIRPPrologue(PIrp, pDevExt_2);
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} status_6 != 0;
    Tmp_192 := strConst__li2bpl1;
    call {:si_unique_call 411} vslice_dummy_var_110 := SerialDbgPrintEx(9, Tmp_192);
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 412} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume {:partition} yogi_error != 1;
    goto L854;

  L854:
    call {:si_unique_call 413} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 414} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon286_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon213_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L854;

  anon211_Then:
    assume {:partition} status_6 == 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    goto L270;

  L270:
    call {:si_unique_call 415} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 416} status_6 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    Tmp_187 := status_6;
    goto L1;

  anon263_Then:
    Tmp_256 := strConst__li2bpl86;
    call {:si_unique_call 417} vslice_dummy_var_168 := SerialDbgPrintEx(12, Tmp_256);
    Tmp_237 := strConst__li2bpl87;
    call {:si_unique_call 418} vslice_dummy_var_169 := SerialDbgPrintEx(12, Tmp_237);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 419} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 8, 1);
    call {:si_unique_call 420} SerialKillPendingIrps(PDevObj_2);
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 421} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2510;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2510;
    call {:si_unique_call 422} vslice_dummy_var_170 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 423} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2511;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2511;
    call {:si_unique_call 424} sdv_237 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    pendingIRPs_1 := sdv_237;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} pendingIRPs_1 != 0;
    call {:si_unique_call 425} vslice_dummy_var_99 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L92;

  L92:
    call {:si_unique_call 426} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2512;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2512;
    call {:si_unique_call 427} vslice_dummy_var_171 := sdv_InterlockedIncrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 428} SerialDisableInterfacesResources(PDevObj_2, 0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 429} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 430} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon315_Then:
    assume {:partition} pendingIRPs_1 == 0;
    goto L92;

  anon314_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon264_Then:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 4) != 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    goto L109;

  L109:
    call {:si_unique_call 431} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 432} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon214_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 4) == 0;
    goto L109;

  anon265_Then:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_195 := strConst__li2bpl113;
    call {:si_unique_call 433} vslice_dummy_var_163 := SerialDbgPrintEx(12, Tmp_195);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    goto L129;

  L129:
    call {:si_unique_call 434} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 435} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon217_Then:
    goto L127;

  L127:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 8) != 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 436} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 437} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon218_Then:
    call {:si_unique_call 438} status_6 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} status_6 >= 0;
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    Mem_T.INT4[isMulti_1] := 0;
    Tmp_233 := strConst__li2bpl30;
    call {:si_unique_call 439} status_6 := SerialGetRegistryKeyValue(pnpKey_1, Tmp_233, 32, isMulti_1, 4);
    call {:si_unique_call 440} vslice_dummy_var_100 := ZwClose(0);
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_194 := strConst__li2bpl89;
    goto L162;

  L162:
    assume {:nonnull} isMulti_1 != 0;
    assume isMulti_1 > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} Mem_T.INT4[isMulti_1] != 0;
    Tmp_213 := 18;
    goto L166;

  L166:
    pnpIdStrLen := Tmp_213;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    allocLen := 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    havoc curStr;
    goto L179;

  L179:
    call {:si_unique_call 441} allocLen, curStrLen := SerialPnpDispatch_loop_L179(sdv_143, allocLen, curStrLen, curStr);
    goto L179_last;

  L179_last:
    curStrLen := sdv_143;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume {:partition} curStrLen != 0;
    allocLen := allocLen + curStrLen * 2 + 2;
    goto anon308_Else_dummy;

  anon308_Else_dummy:
    assume false;
    return;

  anon308_Then:
    assume {:partition} curStrLen == 0;
    allocLen := allocLen + 2;
    Tmp_248 := allocLen + pnpIdStrLen + 2;
    call {:si_unique_call 442} sdv_210 := ExAllocatePoolWithTag(1, Tmp_248, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_204;
    call {:si_unique_call 443} sdv_RtlZeroMemory(0, Tmp_204);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 444} sdv_RtlCopyMemory(0, 0, allocLen);
    call {:si_unique_call 445} vslice_dummy_var_101 := corral_nondet();
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 446} sdv_ExFreePool(0);
    goto L208;

  L208:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 447} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 448} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon309_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    call {:si_unique_call 449} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Tmp_232 := strConst__li2bpl1;
    call {:si_unique_call 450} vslice_dummy_var_164 := SerialDbgPrintEx(9, Tmp_232);
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 451} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon310_Then, anon310_Else;

  anon310_Else:
    assume {:partition} yogi_error != 1;
    goto L899;

  L899:
    call {:si_unique_call 452} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 453} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := -1073741670;
    goto L1;

  anon310_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon221_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L899;

  anon307_Then:
    Tmp_211 := strConst__li2bpl90;
    call {:si_unique_call 454} vslice_dummy_var_165 := SerialDbgPrintEx(12, Tmp_211);
    Tmp_226 := pnpIdStrLen + 4;
    call {:si_unique_call 455} sdv_177 := ExAllocatePoolWithTag(1, Tmp_226, -666022077);
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    assume {:nonnull} pIdBuf != 0;
    assume pIdBuf > 0;
    havoc Tmp_228;
    call {:si_unique_call 456} sdv_RtlZeroMemory(0, Tmp_228);
    call {:si_unique_call 457} vslice_dummy_var_102 := corral_nondet();
    goto L208;

  anon311_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Tmp_227 := strConst__li2bpl1;
    call {:si_unique_call 458} vslice_dummy_var_166 := SerialDbgPrintEx(9, Tmp_227);
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 459} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon312_Then, anon312_Else;

  anon312_Else:
    assume {:partition} yogi_error != 1;
    goto L902;

  L902:
    call {:si_unique_call 460} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 461} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := -1073741670;
    goto L1;

  anon312_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon222_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L902;

  anon306_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_213 := 18;
    goto L166;

  anon220_Then:
    assume {:partition} Mem_T.INT4[isMulti_1] == 0;
    Tmp_194 := strConst__li2bpl88;
    goto L162;

  anon219_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_6;
    Tmp_197 := strConst__li2bpl1;
    call {:si_unique_call 462} vslice_dummy_var_167 := SerialDbgPrintEx(9, Tmp_197);
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 463} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} yogi_error != 1;
    goto L905;

  L905:
    call {:si_unique_call 464} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 465} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  anon313_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon223_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L905;

  anon216_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 8) == 0;
    goto L129;

  anon215_Then:
    goto L127;

  anon266_Then:
    Tmp_240 := strConst__li2bpl85;
    call {:si_unique_call 466} vslice_dummy_var_162 := SerialDbgPrintEx(12, Tmp_240);
    goto L270;

  anon267_Then:
    Tmp_224 := strConst__li2bpl84;
    call {:si_unique_call 467} vslice_dummy_var_161 := SerialDbgPrintEx(12, Tmp_224);
    goto L270;

  anon268_Then:
    Tmp_215 := strConst__li2bpl83;
    call {:si_unique_call 468} vslice_dummy_var_160 := SerialDbgPrintEx(12, Tmp_215);
    goto L270;

  anon269_Then:
    Tmp_196 := strConst__li2bpl82;
    call {:si_unique_call 469} vslice_dummy_var_159 := SerialDbgPrintEx(12, Tmp_196);
    goto L270;

  anon270_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    Mem_T.INT4[isMulti_2] := 0;
    Tmp_199 := strConst__li2bpl107;
    call {:si_unique_call 470} vslice_dummy_var_147 := SerialDbgPrintEx(12, Tmp_199);
    Tmp_246 := strConst__li2bpl87;
    call {:si_unique_call 471} vslice_dummy_var_148 := SerialDbgPrintEx(12, Tmp_246);
    call {:si_unique_call 472} sdv_144 := ExAllocatePoolWithTag(0, 16, -666022077);
    pResFiltEvent := sdv_144;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    assume {:partition} pResFiltEvent != 0;
    call {:si_unique_call 473} KeInitializeEvent(pResFiltEvent, 1, 0);
    call {:si_unique_call 474} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 475} sdv_IoSetCompletionRoutine(PIrp, li2bplFunctionConstant237, pResFiltEvent, 1, 1, 1);
    goto anon224_Then, anon224_Else;

  anon224_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 476} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L884;

  L884:
    call {:si_unique_call 477} status_6 := sdv_IoCallDriver(pLowerDevObj_2, PIrp);
    goto anon225_Then, anon225_Else;

  anon225_Else:
    assume {:partition} status_6 == 259;
    call {:si_unique_call 478} vslice_dummy_var_103 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L319;

  L319:
    call {:si_unique_call 479} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    goto L327;

  L327:
    call {:si_unique_call 480} status_6 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon228_Then, anon228_Else;

  anon228_Else:
    assume {:partition} status_6 >= 0;
    Tmp_191 := strConst__li2bpl30;
    call {:si_unique_call 481} status_6 := SerialGetRegistryKeyValue(pnpKey_2, Tmp_191, 32, isMulti_2, 4);
    call {:si_unique_call 482} vslice_dummy_var_104 := ZwClose(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_217;
    pResList := Tmp_217;
    Tmp_259 := strConst__li2bpl108;
    call {:si_unique_call 483} vslice_dummy_var_149 := SerialDbgPrintEx(12, Tmp_259);
    listNum := 0;
    goto L346;

  L346:
    call {:si_unique_call 484} Tmp_200, Tmp_201, Tmp_203, gotInt_1, pResDesc, listNum, Tmp_238, Tmp_241, j, Tmp_247, gotISR_1, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153 := SerialPnpDispatch_loop_L346(pResList, pDevExt_2, Tmp_200, Tmp_201, Tmp_203, isMulti_2, pLowerDevObj_2, gotInt_1, pResDesc, listNum, pReqList, Tmp_238, Tmp_241, j, Tmp_247, gotISR_1, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153);
    goto L346_last;

  L346_last:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    gotISR_1 := 0;
    gotInt_1 := 0;
    Tmp_201 := strConst__li2bpl109;
    call {:si_unique_call 485} vslice_dummy_var_150 := SerialDbgPrintEx(12, Tmp_201);
    j := 0;
    goto L354;

  L354:
    call {:si_unique_call 486} Tmp_200, Tmp_203, gotInt_1, pResDesc, Tmp_238, Tmp_241, j, Tmp_247, gotISR_1, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153 := SerialPnpDispatch_loop_L354(pResList, pDevExt_2, Tmp_200, Tmp_203, isMulti_2, pLowerDevObj_2, gotInt_1, pResDesc, Tmp_238, Tmp_241, j, Tmp_247, gotISR_1, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153);
    goto L354_last;

  L354_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    Tmp_200 := j;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_203;
    pResDesc := Tmp_203 + Tmp_200 * 380;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto L363;

  L363:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} gotInt_1 != 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    goto L369;

  L369:
    j := j + 1;
    goto L369_dummy;

  L369_dummy:
    assume false;
    return;

  anon234_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:partition} gotInt_1 == 0;
    goto L369;

  anon237_Then:
    assume {:partition} gotInt_1 != 0;
    goto L355;

  L355:
    listNum := listNum + 1;
    goto L355_dummy;

  L355_dummy:
    assume false;
    return;

  anon236_Then:
    assume {:partition} gotISR_1 != 0;
    goto L355;

  anon235_Then:
    assume {:partition} gotInt_1 == 0;
    goto L364;

  anon233_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L364;

  anon285_Then:
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} gotInt_1 != 0;
    goto L363;

  anon232_Then:
    assume {:partition} gotInt_1 == 0;
    gotInt_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_241 := strConst__li2bpl111;
    call {:si_unique_call 487} vslice_dummy_var_152 := SerialDbgPrintEx(12, Tmp_241);
    goto L363;

  anon301_Then:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    Tmp_238 := strConst__li2bpl112;
    call {:si_unique_call 488} vslice_dummy_var_153 := SerialDbgPrintEx(12, Tmp_238);
    goto L363;

  anon300_Then:
    assume {:nonnull} isMulti_2 != 0;
    assume isMulti_2 > 0;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} Mem_T.INT4[isMulti_2] != 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} gotISR_1 == 0;
    gotISR_1 := 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    Tmp_247 := strConst__li2bpl110;
    call {:si_unique_call 489} vslice_dummy_var_151 := SerialDbgPrintEx(12, Tmp_247);
    goto L363;

  anon239_Then:
    assume {:partition} gotISR_1 != 0;
    goto L363;

  anon238_Then:
    goto L363;

  anon231_Then:
    assume {:partition} Mem_T.INT4[isMulti_2] == 0;
    goto L363;

  anon230_Then:
    goto L355;

  anon229_Then:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    Tmp_251 := strConst__li2bpl1;
    call {:si_unique_call 490} vslice_dummy_var_154 := SerialDbgPrintEx(9, Tmp_251);
    goto anon240_Then, anon240_Else;

  anon240_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 491} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:partition} yogi_error != 1;
    goto L887;

  L887:
    call {:si_unique_call 492} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 493} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := 0;
    goto L1;

  anon302_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon240_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L887;

  anon228_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_6;
    Tmp_208 := strConst__li2bpl1;
    call {:si_unique_call 494} vslice_dummy_var_155 := SerialDbgPrintEx(9, Tmp_208);
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 495} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon303_Then, anon303_Else;

  anon303_Else:
    assume {:partition} yogi_error != 1;
    goto L890;

  L890:
    call {:si_unique_call 496} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 497} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  anon303_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon241_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L890;

  anon226_Then:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto L327;

  anon227_Then:
    Tmp_210 := strConst__li2bpl91;
    call {:si_unique_call 498} vslice_dummy_var_156 := SerialDbgPrintEx(12, Tmp_210);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status_6 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    Tmp_209 := strConst__li2bpl1;
    call {:si_unique_call 499} vslice_dummy_var_157 := SerialDbgPrintEx(9, Tmp_209);
    goto anon242_Then, anon242_Else;

  anon242_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 500} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} yogi_error != 1;
    goto L893;

  L893:
    call {:si_unique_call 501} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 502} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  anon304_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon242_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L893;

  anon225_Then:
    assume {:partition} status_6 != 259;
    goto L319;

  anon224_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L884;

  anon299_Then:
    assume {:partition} pResFiltEvent == 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    Tmp_250 := strConst__li2bpl1;
    call {:si_unique_call 503} vslice_dummy_var_158 := SerialDbgPrintEx(9, Tmp_250);
    goto anon243_Then, anon243_Else;

  anon243_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 504} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:partition} yogi_error != 1;
    goto L896;

  L896:
    call {:si_unique_call 505} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 506} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := -1073741670;
    goto L1;

  anon305_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon243_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L896;

  anon271_Then:
    Tmp_258 := strConst__li2bpl81;
    call {:si_unique_call 507} vslice_dummy_var_146 := SerialDbgPrintEx(12, Tmp_258);
    goto L270;

  anon272_Then:
    Tmp_252 := strConst__li2bpl92;
    call {:si_unique_call 508} vslice_dummy_var_142 := SerialDbgPrintEx(12, Tmp_252);
    call {:si_unique_call 509} sdv_148 := ExAllocatePoolWithTag(0, 16, -666022077);
    pQueryCapsEvent := sdv_148;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume {:partition} pQueryCapsEvent != 0;
    call {:si_unique_call 510} KeInitializeEvent(pQueryCapsEvent, 1, 0);
    call {:si_unique_call 511} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 512} sdv_IoSetCompletionRoutine(PIrp, li2bplFunctionConstant237, pQueryCapsEvent, 1, 1, 1);
    goto anon244_Then, anon244_Else;

  anon244_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 513} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L875;

  L875:
    call {:si_unique_call 514} status_6 := sdv_IoCallDriver(pLowerDevObj_2, PIrp);
    goto anon245_Then, anon245_Else;

  anon245_Else:
    assume {:partition} status_6 == 259;
    call {:si_unique_call 515} vslice_dummy_var_105 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L458;

  L458:
    call {:si_unique_call 516} sdv_ExFreePool(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    status_6 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))];
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    goto L483;

  L483:
    Tmp_234 := strConst__li2bpl1;
    call {:si_unique_call 517} vslice_dummy_var_144 := SerialDbgPrintEx(9, Tmp_234);
    goto anon247_Then, anon247_Else;

  anon247_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 518} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:partition} yogi_error != 1;
    goto L878;

  L878:
    call {:si_unique_call 519} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 520} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  anon297_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon247_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L878;

  anon296_Then:
    Tmp_264 := strConst__li2bpl93;
    call {:si_unique_call 521} vslice_dummy_var_143 := SerialDbgPrintEx(12, Tmp_264);
    call {:si_unique_call 522} pIrpStack := sdv_IoGetCurrentIrpStackLocation(PIrp);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    havoc pDevCaps;
    cap := 2;
    goto L476;

  L476:
    call {:si_unique_call 523} Tmp_190, cap, Tmp_221, Tmp_235, Tmp_255 := SerialPnpDispatch_loop_L476(Tmp_190, pDevExt_2, cap, Tmp_221, Tmp_235, Tmp_255, pDevCaps);
    goto L476_last;

  L476_last:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon246_Then, anon246_Else;

  anon246_Else:
    assume {:partition} 7 > cap;
    Tmp_255 := cap;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc Tmp_235;
    Tmp_190 := cap;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    havoc Tmp_221;
    assume {:nonnull} Tmp_221 != 0;
    assume Tmp_221 > 0;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    Mem_T.INT4[Tmp_235 + Tmp_255 * 4] := Mem_T.INT4[Tmp_221 + Tmp_190 * 4];
    cap := cap + 1;
    goto anon246_Else_dummy;

  anon246_Else_dummy:
    assume false;
    return;

  anon246_Then:
    assume {:partition} cap >= 7;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc Tmp_220;
    assume {:nonnull} Tmp_220 != 0;
    assume Tmp_220 > 0;
    Mem_T.INT4[Tmp_220] := 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    Mem_T.INT4[Tmp_206 + 1 * 4] := 1;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevCaps != 0;
    assume pDevCaps > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto L483;

  anon245_Then:
    assume {:partition} status_6 != 259;
    goto L458;

  anon244_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L875;

  anon295_Then:
    assume {:partition} pQueryCapsEvent == 0;
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741670;
    Tmp_218 := strConst__li2bpl1;
    call {:si_unique_call 524} vslice_dummy_var_145 := SerialDbgPrintEx(9, Tmp_218);
    goto anon248_Then, anon248_Else;

  anon248_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 525} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:partition} yogi_error != 1;
    goto L881;

  L881:
    call {:si_unique_call 526} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 527} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := -1073741670;
    goto L1;

  anon298_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon248_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L881;

  anon273_Then:
    Tmp_244 := strConst__li2bpl80;
    call {:si_unique_call 528} vslice_dummy_var_141 := SerialDbgPrintEx(12, Tmp_244);
    goto L270;

  anon274_Then:
    Tmp_263 := strConst__li2bpl79;
    call {:si_unique_call 529} vslice_dummy_var_134 := SerialDbgPrintEx(12, Tmp_263);
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon249_Then, anon249_Else;

  anon249_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume {:nonnull} pIrpStack != 0;
    assume pIrpStack > 0;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    Tmp_260 := strConst__li2bpl99;
    call {:si_unique_call 530} vslice_dummy_var_139 := SerialDbgPrintEx(12, Tmp_260);
    goto L524;

  L524:
    call {:si_unique_call 531} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 532} status_6 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    Tmp_187 := status_6;
    goto L1;

  anon281_Then:
    Tmp_222 := strConst__li2bpl94;
    call {:si_unique_call 533} vslice_dummy_var_140 := SerialDbgPrintEx(12, Tmp_222);
    goto L524;

  anon282_Then:
    Tmp_205 := strConst__li2bpl98;
    call {:si_unique_call 534} vslice_dummy_var_138 := SerialDbgPrintEx(12, Tmp_205);
    goto L524;

  anon283_Then:
    Tmp_223 := strConst__li2bpl97;
    call {:si_unique_call 535} vslice_dummy_var_137 := SerialDbgPrintEx(12, Tmp_223);
    goto L524;

  anon284_Then:
    Tmp_198 := strConst__li2bpl96;
    call {:si_unique_call 536} vslice_dummy_var_136 := SerialDbgPrintEx(12, Tmp_198);
    goto L524;

  anon249_Then:
    Tmp_193 := strConst__li2bpl95;
    call {:si_unique_call 537} vslice_dummy_var_135 := SerialDbgPrintEx(12, Tmp_193);
    goto L524;

  anon275_Then:
    Tmp_262 := strConst__li2bpl78;
    call {:si_unique_call 538} vslice_dummy_var_132 := SerialDbgPrintEx(12, Tmp_262);
    Tmp_236 := strConst__li2bpl87;
    call {:si_unique_call 539} vslice_dummy_var_133 := SerialDbgPrintEx(12, Tmp_236);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon250_Then, anon250_Else;

  anon250_Else:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 540} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 2, 0);
    goto L541;

  L541:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 541} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 542} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon250_Then:
    goto L541;

  anon276_Then:
    Tmp_249 := strConst__li2bpl100;
    call {:si_unique_call 543} vslice_dummy_var_126 := SerialDbgPrintEx(12, Tmp_249);
    Tmp_212 := strConst__li2bpl87;
    call {:si_unique_call 544} vslice_dummy_var_127 := SerialDbgPrintEx(12, Tmp_212);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := -1073741637;
    Tmp_261 := strConst__li2bpl106;
    call {:si_unique_call 545} vslice_dummy_var_128 := SerialDbgPrintEx(12, Tmp_261);
    Tmp_230 := strConst__li2bpl1;
    call {:si_unique_call 546} vslice_dummy_var_129 := SerialDbgPrintEx(9, Tmp_230);
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 547} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:partition} yogi_error != 1;
    goto L869;

  L869:
    call {:si_unique_call 548} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 549} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := -1073741637;
    goto L1;

  anon293_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon253_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L869;

  anon251_Then:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    call {:si_unique_call 550} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    call {:si_unique_call 551} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon252_Then:
    call {:si_unique_call 552} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon254_Then, anon254_Else;

  anon254_Else:
    call {:si_unique_call 553} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 17;
    Tmp_207 := strConst__li2bpl105;
    call {:si_unique_call 554} vslice_dummy_var_130 := SerialDbgPrintEx(12, Tmp_207);
    Tmp_225 := strConst__li2bpl1;
    call {:si_unique_call 555} vslice_dummy_var_131 := SerialDbgPrintEx(9, Tmp_225);
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 556} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:partition} yogi_error != 1;
    goto L872;

  L872:
    call {:si_unique_call 557} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 558} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := 17;
    goto L1;

  anon294_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon255_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L872;

  anon254_Then:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 559} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 2, 1);
    call {:si_unique_call 560} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 561} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 562} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon277_Then:
    Tmp_216 := strConst__li2bpl101;
    call {:si_unique_call 563} vslice_dummy_var_122 := SerialDbgPrintEx(12, Tmp_216);
    Tmp_243 := strConst__li2bpl87;
    call {:si_unique_call 564} vslice_dummy_var_123 := SerialDbgPrintEx(12, Tmp_243);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 565} SerialSetDeviceFlags(pDevExt_2, Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2), 2, 1);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 566} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 4, 1);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 567} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 2, 0);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 568} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2513;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2513;
    call {:si_unique_call 569} vslice_dummy_var_124 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 570} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2514;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2514;
    call {:si_unique_call 571} sdv_204 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    pendingIRPs := sdv_204;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:partition} pendingIRPs != 0;
    call {:si_unique_call 572} vslice_dummy_var_106 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L643;

  L643:
    call {:si_unique_call 573} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2515;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2515;
    call {:si_unique_call 574} vslice_dummy_var_125 := sdv_InterlockedIncrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 1) != 0;
    call {:si_unique_call 575} SerialReleaseResources(pDevExt_2);
    goto L650;

  L650:
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 576} sdv_IoSkipCurrentIrpStackLocation(PIrp);
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 577} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L866;

  L866:
    call {:si_unique_call 578} Tmp_187 := sdv_IoCallDriver(pLowerDevObj_2, PIrp);
    goto L1;

  anon257_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L866;

  anon256_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_2)], 1) == 0;
    goto L650;

  anon292_Then:
    assume {:partition} pendingIRPs == 0;
    goto L643;

  anon278_Then:
    Tmp_189 := strConst__li2bpl77;
    call {:si_unique_call 579} vslice_dummy_var_120 := SerialDbgPrintEx(12, Tmp_189);
    Tmp_202 := strConst__li2bpl87;
    call {:si_unique_call 580} vslice_dummy_var_121 := SerialDbgPrintEx(12, Tmp_202);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 581} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 1, 0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 582} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 583} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon279_Then:
    Tmp_265 := strConst__li2bpl102;
    call {:si_unique_call 584} vslice_dummy_var_117 := SerialDbgPrintEx(12, Tmp_265);
    Tmp_214 := strConst__li2bpl87;
    call {:si_unique_call 585} vslice_dummy_var_118 := SerialDbgPrintEx(12, Tmp_214);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 586} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 1, 1);
    call {:si_unique_call 587} SerialKillPendingIrps(PDevObj_2);
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 588} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2516;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2516;
    call {:si_unique_call 589} vslice_dummy_var_119 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 590} Tmp_231 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    havoc vslice_dummy_var_2517;
    Mem_T.INT4[Tmp_231] := vslice_dummy_var_2517;
    call {:si_unique_call 591} sdv_242 := sdv_InterlockedDecrement(Tmp_231);
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    pendingIRPs_2 := sdv_242;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:partition} pendingIRPs_2 != 0;
    call {:si_unique_call 592} vslice_dummy_var_108 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L697;

  L697:
    call {:si_unique_call 593} vslice_dummy_var_107 := SerialRemoveDevObj(PDevObj_2);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 594} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    goto anon258_Then, anon258_Else;

  anon258_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 595} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L863;

  L863:
    call {:si_unique_call 596} Tmp_187 := sdv_IoCallDriver(pLowerDevObj_2, PIrp);
    goto L1;

  anon258_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L863;

  anon291_Then:
    assume {:partition} pendingIRPs_2 == 0;
    goto L697;

  anon290_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon280_Then:
    Tmp_188 := strConst__li2bpl103;
    call {:si_unique_call 597} vslice_dummy_var_113 := SerialDbgPrintEx(12, Tmp_188);
    Tmp_254 := strConst__li2bpl87;
    call {:si_unique_call 598} vslice_dummy_var_114 := SerialDbgPrintEx(12, Tmp_254);
    call {:si_unique_call 599} ExAcquireFastMutex(0);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    call {:si_unique_call 600} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 17;
    Tmp_242 := strConst__li2bpl105;
    call {:si_unique_call 601} vslice_dummy_var_115 := SerialDbgPrintEx(12, Tmp_242);
    Tmp_239 := strConst__li2bpl1;
    call {:si_unique_call 602} vslice_dummy_var_116 := SerialDbgPrintEx(9, Tmp_239);
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 603} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:partition} yogi_error != 1;
    goto L860;

  L860:
    call {:si_unique_call 604} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 605} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := 17;
    goto L1;

  anon289_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon260_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L860;

  anon259_Then:
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 606} SerialSetDeviceFlags(pDevExt_2, DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_2), 1, 1);
    call {:si_unique_call 607} ExReleaseFastMutex(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := 0;
    call {:si_unique_call 608} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp);
    call {:si_unique_call 609} Tmp_187 := SerialIoCallDriver(pDevExt_2, pLowerDevObj_2, PIrp);
    goto L1;

  anon212_Then:
    Tmp_245 := strConst__li2bpl104;
    call {:si_unique_call 610} vslice_dummy_var_111 := SerialDbgPrintEx(12, Tmp_245);
    call {:si_unique_call 611} MmLockPagableSectionByHandle(0);
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    call {:si_unique_call 612} status_6 := SerialStartDevice(PDevObj_2, PIrp);
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_2 != 0;
    assume pDevExt_2 > 0;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    goto L768;

  L768:
    call {:si_unique_call 613} MmUnlockPagableImageSection(0);
    assume {:nonnull} PIrp != 0;
    assume PIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp))] := status_6;
    Tmp_219 := strConst__li2bpl1;
    call {:si_unique_call 614} vslice_dummy_var_112 := SerialDbgPrintEx(9, Tmp_219);
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume PIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 615} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp);
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:partition} yogi_error != 1;
    goto L857;

  L857:
    call {:si_unique_call 616} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 617} SerialIRPEpilogue(pDevExt_2);
    Tmp_187 := status_6;
    goto L1;

  anon288_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon262_Then:
    assume !(PIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L857;

  anon261_Then:
    call {:si_unique_call 618} vslice_dummy_var_109 := SerialGotoPowerState(PDevObj_2, pDevExt_2, 4);
    goto L768;

  anon287_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_266: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartDevice"} SerialStartDevice(actual_PDevObj_3: int, actual_PIrp_1: int) returns (Tmp_266: int)
{
  var {:pointer} pDevExt_3: int;
  var {:pointer} Tmp_267: int;
  var {:pointer} pIrpStack_1: int;
  var {:pointer} pLowerDevObj_3: int;
  var {:pointer} Tmp_269: int;
  var {:scalar} status_7: int;
  var {:pointer} PDevObj_3: int;
  var {:pointer} PIrp_1: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;
  var vslice_dummy_var_2518: int;
  var vslice_dummy_var_2519: int;

  anon0:
    PDevObj_3 := actual_PDevObj_3;
    PIrp_1 := actual_PIrp_1;
    call {:si_unique_call 619} Tmp_267 := __HAVOC_malloc(112);
    call {:si_unique_call 620} Tmp_269 := __HAVOC_malloc(112);
    call {:si_unique_call 621} pIrpStack_1 := sdv_IoGetCurrentIrpStackLocation(PIrp_1);
    status_7 := -1073741822;
    assume {:nonnull} PDevObj_3 != 0;
    assume PDevObj_3 > 0;
    havoc pDevExt_3;
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    havoc pLowerDevObj_3;
    call {:si_unique_call 622} sdv_do_paged_code_check();
    Tmp_267 := strConst__li2bpl114;
    call {:si_unique_call 623} vslice_dummy_var_173 := SerialDbgPrintEx(11, Tmp_267);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 624} KeInitializeEvent(SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_3), 1, 0);
    call {:si_unique_call 625} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_1);
    assume {:nonnull} pDevExt_3 != 0;
    assume pDevExt_3 > 0;
    call {:si_unique_call 626} sdv_IoSetCompletionRoutine(PIrp_1, li2bplFunctionConstant237, SerialStartEvent__SERIAL_DEVICE_EXTENSION(pDevExt_3), 1, 1, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume PIrp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 627} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L50;

  L50:
    call {:si_unique_call 628} status_7 := sdv_IoCallDriver(pLowerDevObj_3, PIrp_1);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_7 == 259;
    call {:si_unique_call 629} vslice_dummy_var_172 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PIrp_1 != 0;
    assume PIrp_1 > 0;
    status_7 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_1))];
    goto L34;

  L34:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_7 >= 0;
    assume {:nonnull} pIrpStack_1 != 0;
    assume pIrpStack_1 > 0;
    havoc vslice_dummy_var_2518;
    havoc vslice_dummy_var_2519;
    call {:si_unique_call 630} status_7 := SerialFinishStartDevice(PDevObj_3, vslice_dummy_var_2518, vslice_dummy_var_2519, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    Tmp_266 := status_7;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} 0 > status_7;
    Tmp_269 := strConst__li2bpl115;
    call {:si_unique_call 631} vslice_dummy_var_174 := SerialDbgPrintEx(14, Tmp_269);
    Tmp_266 := status_7;
    goto L1;

  anon10_Then:
    assume {:partition} status_7 != 259;
    goto L34;

  anon9_Then:
    assume !(PIrp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L50;
}



procedure {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_270: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_270 == 131072 || Tmp_270 == 115200 || Tmp_270 == 57344 || Tmp_270 == 57600 || Tmp_270 == 38400 || Tmp_270 == 19200 || Tmp_270 == 14400 || Tmp_270 == 9600 || Tmp_270 == 7200 || Tmp_270 == 4800 || Tmp_270 == 2400 || Tmp_270 == 1800 || Tmp_270 == 1200 || Tmp_270 == 600 || Tmp_270 == 300 || Tmp_270 == 150 || Tmp_270 == 135 || Tmp_270 == 110 || Tmp_270 == 75 || Tmp_270 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialReportMaxBaudRate"} SerialReportMaxBaudRate(actual_Bauds: int) returns (Tmp_270: int)
{
  var {:scalar} Bauds: int;

  anon0:
    Bauds := actual_Bauds;
    call {:si_unique_call 632} sdv_do_paged_code_check();
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(Bauds, 65536) != 0;
    Tmp_270 := 131072;
    goto L1;

  L1:
    return;

  anon39_Then:
    assume {:partition} BAND(Bauds, 65536) == 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} BAND(Bauds, 131072) != 0;
    Tmp_270 := 115200;
    goto L1;

  anon40_Then:
    assume {:partition} BAND(Bauds, 131072) == 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(Bauds, 32768) != 0;
    Tmp_270 := 57344;
    goto L1;

  anon41_Then:
    assume {:partition} BAND(Bauds, 32768) == 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} BAND(Bauds, 262144) != 0;
    Tmp_270 := 57600;
    goto L1;

  anon42_Then:
    assume {:partition} BAND(Bauds, 262144) == 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(Bauds, 16384) != 0;
    Tmp_270 := 38400;
    goto L1;

  anon43_Then:
    assume {:partition} BAND(Bauds, 16384) == 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} BAND(Bauds, 8192) != 0;
    Tmp_270 := 19200;
    goto L1;

  anon44_Then:
    assume {:partition} BAND(Bauds, 8192) == 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(Bauds, 4096) != 0;
    Tmp_270 := 14400;
    goto L1;

  anon45_Then:
    assume {:partition} BAND(Bauds, 4096) == 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} BAND(Bauds, 2048) != 0;
    Tmp_270 := 9600;
    goto L1;

  anon46_Then:
    assume {:partition} BAND(Bauds, 2048) == 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} BAND(Bauds, 1024) != 0;
    Tmp_270 := 7200;
    goto L1;

  anon47_Then:
    assume {:partition} BAND(Bauds, 1024) == 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} BAND(Bauds, 512) != 0;
    Tmp_270 := 4800;
    goto L1;

  anon48_Then:
    assume {:partition} BAND(Bauds, 512) == 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(Bauds, 256) != 0;
    Tmp_270 := 2400;
    goto L1;

  anon49_Then:
    assume {:partition} BAND(Bauds, 256) == 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} BAND(Bauds, 128) != 0;
    Tmp_270 := 1800;
    goto L1;

  anon50_Then:
    assume {:partition} BAND(Bauds, 128) == 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(Bauds, 64) != 0;
    Tmp_270 := 1200;
    goto L1;

  anon51_Then:
    assume {:partition} BAND(Bauds, 64) == 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} BAND(Bauds, 32) != 0;
    Tmp_270 := 600;
    goto L1;

  anon52_Then:
    assume {:partition} BAND(Bauds, 32) == 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} BAND(Bauds, 16) != 0;
    Tmp_270 := 300;
    goto L1;

  anon53_Then:
    assume {:partition} BAND(Bauds, 16) == 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} BAND(Bauds, 8) != 0;
    Tmp_270 := 150;
    goto L1;

  anon54_Then:
    assume {:partition} BAND(Bauds, 8) == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} BAND(Bauds, 4) != 0;
    Tmp_270 := 135;
    goto L1;

  anon55_Then:
    assume {:partition} BAND(Bauds, 4) == 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(Bauds, 2) != 0;
    Tmp_270 := 110;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(Bauds, 2) == 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} BAND(Bauds, 1) != 0;
    Tmp_270 := 75;
    goto L1;

  anon57_Then:
    assume {:partition} BAND(Bauds, 1) == 0;
    Tmp_270 := 0;
    goto L1;
}



procedure {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialUndoExternalNaming"} SerialUndoExternalNaming(actual_Extension_2: int)
{
  var {:scalar} Tmp_272: int;
  var {:pointer} keyHandle_2: int;
  var {:pointer} pRegName_1: int;
  var {:scalar} symLinkName: int;
  var {:pointer} Tmp_274: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} Tmp_277: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_280: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} Extension_2: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_2520: int;
  var vslice_dummy_var_2521: int;
  var vslice_dummy_var_2522: int;
  var vslice_dummy_var_2523: int;

  anon0:
    call {:si_unique_call 633} pRegName_1 := __HAVOC_malloc(4);
    call {:si_unique_call 634} symLinkName := __HAVOC_malloc(12);
    call {:si_unique_call 635} Tmp_282 := __HAVOC_malloc(20);
    call {:si_unique_call 636} vslice_dummy_var_175 := __HAVOC_malloc(4);
    Extension_2 := actual_Extension_2;
    call {:si_unique_call 637} Tmp_274 := __HAVOC_malloc(236);
    call {:si_unique_call 638} Tmp_276 := __HAVOC_malloc(132);
    call {:si_unique_call 639} Tmp_277 := __HAVOC_malloc(76);
    call {:si_unique_call 640} vslice_dummy_var_178 := __HAVOC_malloc(44);
    call {:si_unique_call 641} sdv_do_paged_code_check();
    Tmp_274 := strConst__li2bpl116;
    call {:si_unique_call 642} vslice_dummy_var_179 := SerialDbgPrintEx(6, Tmp_274);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_2)] == 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 643} status_8 := IoSetDeviceInterfaceState(0, 0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 644} sdv_ExFreePool(0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto L17;

  L17:
    call {:si_unique_call 645} status_8 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_8 == 0;
    call {:si_unique_call 646} RtlInitUnicodeString(symLinkName, 0);
    call {:si_unique_call 647} status_8 := SerialReadSymName(Extension_2, keyHandle_2, symLinkName, pRegName_1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_8 != 0;
    goto L43;

  L43:
    call {:si_unique_call 648} vslice_dummy_var_176 := ZwClose(0);
    goto L14;

  L14:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 649} sdv_ExFreePool(0);
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto L55;

  L55:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    call {:si_unique_call 650} status_8 := RtlDeleteRegistryValue(4, 0, 0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} status_8 < 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_272;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Tmp_282 != 0;
    assume Tmp_282 > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc Tmp_280;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    havoc vslice_dummy_var_2520;
    havoc vslice_dummy_var_2521;
    havoc vslice_dummy_var_2522;
    havoc vslice_dummy_var_2523;
    call {:si_unique_call 651} SerialLogError(vslice_dummy_var_2520, vslice_dummy_var_2521, vslice_dummy_var_2522, Tmp_282, 0, 0, 0, 55, status_8, 393222, Tmp_272, vslice_dummy_var_2523, 0, 0);
    Tmp_276 := strConst__li2bpl118;
    call {:si_unique_call 652} vslice_dummy_var_180 := SerialDbgPrintEx(14, Tmp_276);
    goto L1;

  L1:
    return;

  anon30_Then:
    assume {:partition} 0 <= status_8;
    goto L1;

  anon29_Then:
    goto L1;

  anon28_Then:
    goto L1;

  anon23_Then:
    goto L55;

  anon27_Then:
    assume {:partition} status_8 == 0;
    Tmp_277 := strConst__li2bpl117;
    call {:si_unique_call 653} vslice_dummy_var_181 := SerialDbgPrintEx(4, Tmp_277);
    call {:si_unique_call 654} vslice_dummy_var_177 := IoDeleteSymbolicLink(0);
    call {:si_unique_call 655} sdv_ExFreePool(0);
    call {:si_unique_call 656} sdv_ExFreePool(0);
    goto L43;

  anon26_Then:
    assume {:partition} status_8 != 0;
    goto L14;

  anon25_Then:
    goto L17;

  anon24_Then:
    goto L14;

  anon22_Then:
    goto L14;

  anon21_Then:
    assume {:partition} Mem_T.INT4[SkipNaming__SERIAL_DEVICE_EXTENSION(Extension_2)] != 0;
    goto L1;
}



procedure {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_4: int, actual_Irp_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelImmediate"} SerialCancelImmediate(actual_DeviceObject_4: int, actual_Irp_4: int)
{
  var {:pointer} Extension_3: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_2524: int;

  anon0:
    call {:si_unique_call 657} vslice_dummy_var_182 := __HAVOC_malloc(4);
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_4 := actual_Irp_4;
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc Extension_3;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc vslice_dummy_var_2524;
    call {:si_unique_call 658} SerialTryToCompleteCurrent#1(Extension_3, li2bplFunctionConstant356, vslice_dummy_var_2524, -1073741536, CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_3), 0, 0, ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_3), 0, li2bplFunctionConstant354, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 659} vslice_dummy_var_183 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_4: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartImmediate"} SerialStartImmediate(actual_Extension_4: int)
{
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} TotalTime: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} Tmp_289: int;
  var {:pointer} sdv_263: int;
  var {:scalar} UseATimer: int;
  var {:pointer} sdv_264: int;
  var {:scalar} OldIrql: int;
  var {:pointer} sdv_266: int;
  var {:pointer} Tmp_290: int;
  var {:scalar} s_p_e_c_i_a_l_2: int;
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:pointer} OldIrp: int;
  var {:pointer} Tmp_292: int;
  var {:pointer} Tmp_293: int;
  var {:scalar} s_p_e_c_i_a_l_4: int;
  var {:scalar} Timeouts: int;
  var {:pointer} Tmp_294: int;
  var {:pointer} Extension_4: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 660} TotalTime := __HAVOC_malloc(20);
    call {:si_unique_call 661} vslice_dummy_var_184 := __HAVOC_malloc(4);
    call {:si_unique_call 662} Timeouts := __HAVOC_malloc(20);
    Extension_4 := actual_Extension_4;
    call {:si_unique_call 663} Tmp_290 := __HAVOC_malloc(92);
    call {:si_unique_call 664} Tmp_292 := __HAVOC_malloc(108);
    call {:si_unique_call 665} Tmp_293 := __HAVOC_malloc(72);
    Tmp_292 := strConst__li2bpl119;
    call {:si_unique_call 666} vslice_dummy_var_188 := SerialDbgPrintEx(2, Tmp_292);
    UseATimer := 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    Tmp_289 := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)];
    assume {:nonnull} Tmp_289 != 0;
    assume Tmp_289 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_289))] := 259;
    call {:si_unique_call 667} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 668} Tmp_294 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_294 != 0;
    assume Tmp_294 > 0;
    Mem_T.INT4[Tmp_294] := OldIrql;
    call {:si_unique_call 669} sdv_KeAcquireSpinLock(0, Tmp_294);
    assume {:nonnull} Tmp_294 != 0;
    assume Tmp_294 > 0;
    OldIrql := Mem_T.INT4[Tmp_294];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    call {:si_unique_call 670} sdv_KeReleaseSpinLock(0, OldIrql);
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L24;

  L24:
    UseATimer := 1;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    assume {:nonnull} TotalTime != 0;
    assume TotalTime > 0;
    goto L28;

  L28:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 671} sdv_266 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)]);
    assume {:nonnull} sdv_266 != 0;
    assume sdv_266 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_266)))] := 0;
    call {:si_unique_call 672} Tmp_294 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_294 != 0;
    assume Tmp_294 > 0;
    Mem_T.INT4[Tmp_294] := OldIrql;
    call {:si_unique_call 673} IoAcquireCancelSpinLock(Tmp_294);
    assume {:nonnull} Tmp_294 != 0;
    assume Tmp_294 > 0;
    OldIrql := Mem_T.INT4[Tmp_294];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    Tmp_288 := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)];
    assume {:nonnull} Tmp_288 != 0;
    assume Tmp_288 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_288)] != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    OldIrp := Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)];
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)] := 0;
    call {:si_unique_call 674} IoReleaseCancelSpinLock(OldIrql);
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(OldIrp))] := -1073741536;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    Tmp_293 := strConst__li2bpl1;
    call {:si_unique_call 675} vslice_dummy_var_189 := SerialDbgPrintEx(9, Tmp_293);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume OldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 676} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, OldIrp);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L94;

  L94:
    call {:si_unique_call 677} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 678} SerialIRPEpilogue(Extension_4);
    goto L56;

  L56:
    Tmp_290 := strConst__li2bpl120;
    call {:si_unique_call 679} vslice_dummy_var_190 := SerialDbgPrintEx(2, Tmp_290);
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume !(OldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L94;

  anon16_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_288)] == 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 680} vslice_dummy_var_185 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)], li2bplFunctionConstant351);
    s_p_e_c_i_a_l_2 := 2;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 681} sdv_263 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)]);
    assume {:nonnull} sdv_263 != 0;
    assume sdv_263 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_263)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_1] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_1], s_p_e_c_i_a_l_2);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} UseATimer != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 682} vslice_dummy_var_187 := SerialSetTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_4), TotalTime, TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_4), Extension_4);
    s_p_e_c_i_a_l_4 := 4;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 683} sdv_264 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_4)]);
    assume {:nonnull} sdv_264 != 0;
    assume sdv_264 > 0;
    s_p_e_c_i_a_l_3 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_264)));
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_3] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_3], s_p_e_c_i_a_l_4);
    goto L68;

  L68:
    call {:si_unique_call 684} vslice_dummy_var_186 := KeSynchronizeExecution(0, li2bplFunctionConstant352, 0);
    call {:si_unique_call 685} IoReleaseCancelSpinLock(OldIrql);
    goto L56;

  anon18_Then:
    assume {:partition} UseATimer == 0;
    goto L68;

  anon13_Then:
    assume {:nonnull} Timeouts != 0;
    assume Timeouts > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L28;

  anon14_Then:
    goto L24;
}



procedure {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_5: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetNextImmediate"} SerialGetNextImmediate(actual_CurrentOpIrp: int, actual_QueueToProcess: int, actual_NewIrp_1: int, actual_CompleteCurrent: int, actual_Extension_5: int)
{
  var {:scalar} OldIrql_1: int;
  var {:pointer} OldIrp_1: int;
  var {:pointer} Tmp_296: int;
  var {:pointer} Tmp_297: int;
  var {:pointer} CurrentOpIrp: int;
  var {:pointer} NewIrp_1: int;
  var {:pointer} Extension_5: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;

  anon0:
    call {:si_unique_call 686} vslice_dummy_var_191 := __HAVOC_malloc(4);
    CurrentOpIrp := actual_CurrentOpIrp;
    NewIrp_1 := actual_NewIrp_1;
    Extension_5 := actual_Extension_5;
    call {:si_unique_call 687} Tmp_296 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    OldIrp_1 := Mem_T.P_IRP[CurrentOpIrp];
    call {:si_unique_call 688} Tmp_297 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_297 != 0;
    assume Tmp_297 > 0;
    Mem_T.INT4[Tmp_297] := OldIrql_1;
    call {:si_unique_call 689} IoAcquireCancelSpinLock(Tmp_297);
    assume {:nonnull} Tmp_297 != 0;
    assume Tmp_297 > 0;
    OldIrql_1 := Mem_T.INT4[Tmp_297];
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    Mem_T.P_IRP[CurrentOpIrp] := 0;
    assume {:nonnull} NewIrp_1 != 0;
    assume NewIrp_1 > 0;
    Mem_T.P_IRP[NewIrp_1] := 0;
    call {:si_unique_call 690} vslice_dummy_var_192 := KeSynchronizeExecution(0, li2bplFunctionConstant217, 0);
    call {:si_unique_call 691} IoReleaseCancelSpinLock(OldIrql_1);
    Tmp_296 := strConst__li2bpl1;
    call {:si_unique_call 692} vslice_dummy_var_193 := SerialDbgPrintEx(9, Tmp_296);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume OldIrp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 693} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, OldIrp_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  L30:
    call {:si_unique_call 694} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 695} SerialIRPEpilogue(Extension_5);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(OldIrp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L30;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_194: int;

  anon0:
    call {:si_unique_call 696} vslice_dummy_var_194 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 697} vslice_dummy_var_195 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt_2: int, actual_DeviceIsOpened: int, actual_Reopen: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SetDeviceIsOpened"} SetDeviceIsOpened(actual_PDevExt_2: int, actual_DeviceIsOpened: int, actual_Reopen: int)
{
  var {:pointer} Tmp_302: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} PDevExt_2: int;
  var {:scalar} DeviceIsOpened: int;
  var {:scalar} Reopen: int;
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 698} vslice_dummy_var_196 := __HAVOC_malloc(4);
    PDevExt_2 := actual_PDevExt_2;
    DeviceIsOpened := actual_DeviceIsOpened;
    Reopen := actual_Reopen;
    call {:si_unique_call 699} Tmp_302 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    Mem_T.INT4[Tmp_302] := oldIrql_1;
    call {:si_unique_call 700} sdv_KeAcquireSpinLock(0, Tmp_302);
    assume {:nonnull} Tmp_302 != 0;
    assume Tmp_302 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_302];
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    assume {:nonnull} PDevExt_2 != 0;
    assume PDevExt_2 > 0;
    call {:si_unique_call 701} sdv_KeReleaseSpinLock(0, oldIrql_1);
    return;
}



procedure {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_4: int, actual_PDevExt_3: int, actual_DevPowerState: int) returns (Tmp_304: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_304 == 0 || Tmp_304 == -1073741584 || Tmp_304 == 259 || Tmp_304 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGotoPowerState"} SerialGotoPowerState(actual_PDevObj_4: int, actual_PDevExt_3: int, actual_DevPowerState: int) returns (Tmp_304: int)
{
  var {:scalar} powerState: int;
  var {:scalar} gotoPowEvent: int;
  var {:pointer} Tmp_306: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} PDevObj_4: int;
  var {:scalar} DevPowerState: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;

  anon0:
    call {:si_unique_call 702} powerState := __HAVOC_malloc(8);
    call {:si_unique_call 703} gotoPowEvent := __HAVOC_malloc(124);
    PDevObj_4 := actual_PDevObj_4;
    DevPowerState := actual_DevPowerState;
    call {:si_unique_call 704} Tmp_306 := __HAVOC_malloc(120);
    call {:si_unique_call 705} Tmp_307 := __HAVOC_malloc(100);
    call {:si_unique_call 706} sdv_do_paged_code_check();
    Tmp_307 := strConst__li2bpl121;
    call {:si_unique_call 707} vslice_dummy_var_198 := SerialDbgPrintEx(11, Tmp_307);
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 708} KeInitializeEvent(gotoPowEvent, 1, 0);
    call {:si_unique_call 709} status_9 := PoRequestPowerIrp(PDevObj_4, 2, powerState, li2bplFunctionConstant318, gotoPowEvent, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_9 == 259;
    call {:si_unique_call 710} vslice_dummy_var_197 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    status_9 := 0;
    goto L21;

  L21:
    Tmp_306 := strConst__li2bpl122;
    call {:si_unique_call 711} vslice_dummy_var_199 := SerialDbgPrintEx(11, Tmp_306);
    Tmp_304 := status_9;
    return;

  anon3_Then:
    assume {:partition} status_9 != 259;
    goto L21;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 712} vslice_dummy_var_200 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_5: int, actual_PIrp_2: int) returns (Tmp_310: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetPowerD0"} SerialSetPowerD0(actual_PDevObj_5: int, actual_PIrp_2: int) returns (Tmp_310: int)
{
  var {:pointer} SD3: int;
  var {:pointer} Tmp_311: int;
  var {:pointer} pDevExt_4: int;
  var {:pointer} Tmp_312: int;
  var {:pointer} Tmp_313: int;
  var {:scalar} sdv_3: int;
  var {:pointer} Tmp_314: int;
  var {:pointer} pIrpStack_2: int;
  var {:pointer} Tmp_315: int;
  var {:pointer} Tmp_316: int;
  var {:pointer} Tmp_317: int;
  var {:scalar} status_10: int;
  var {:pointer} Tmp_318: int;
  var {:pointer} PDevObj_5: int;
  var {:pointer} PIrp_2: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_2525: int;
  var vslice_dummy_var_2526: int;

  anon0:
    call {:si_unique_call 713} sdv_3 := __HAVOC_malloc(8);
    PDevObj_5 := actual_PDevObj_5;
    PIrp_2 := actual_PIrp_2;
    call {:si_unique_call 714} Tmp_311 := __HAVOC_malloc(72);
    call {:si_unique_call 715} Tmp_312 := __HAVOC_malloc(92);
    call {:si_unique_call 716} Tmp_313 := __HAVOC_malloc(100);
    call {:si_unique_call 717} Tmp_314 := __HAVOC_malloc(84);
    call {:si_unique_call 718} Tmp_315 := __HAVOC_malloc(104);
    call {:si_unique_call 719} Tmp_316 := __HAVOC_malloc(72);
    call {:si_unique_call 720} Tmp_317 := __HAVOC_malloc(72);
    call {:si_unique_call 721} Tmp_318 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_5 != 0;
    assume PDevObj_5 > 0;
    havoc pDevExt_4;
    call {:si_unique_call 722} pIrpStack_2 := sdv_IoGetCurrentIrpStackLocation(PIrp_2);
    call {:si_unique_call 723} sdv_do_paged_code_check();
    Tmp_314 := strConst__li2bpl123;
    call {:si_unique_call 724} vslice_dummy_var_202 := SerialDbgPrintEx(11, Tmp_314);
    Tmp_312 := strConst__li2bpl124;
    call {:si_unique_call 725} vslice_dummy_var_203 := SerialDbgPrintEx(12, Tmp_312);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 726} KeClearEvent(PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_4));
    call {:si_unique_call 727} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_2);
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    call {:si_unique_call 728} sdv_IoSetCompletionRoutine(PIrp_2, li2bplFunctionConstant237, PowerD0Event__SERIAL_DEVICE_EXTENSION(pDevExt_4), 1, 1, 1);
    Tmp_318 := strConst__li2bpl125;
    call {:si_unique_call 729} vslice_dummy_var_204 := SerialDbgPrintEx(12, Tmp_318);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 730} SLIC_PoCallDriver_entry(strConst__li2bpl2);
    goto L101;

  L101:
    call {:si_unique_call 731} status_10 := PoCallDriver(0, PIrp_2);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_10 == 259;
    Tmp_313 := strConst__li2bpl126;
    call {:si_unique_call 732} vslice_dummy_var_205 := SerialDbgPrintEx(12, Tmp_313);
    call {:si_unique_call 733} vslice_dummy_var_201 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L44;

  L44:
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] >= 0;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_10 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    assume {:nonnull} pDevExt_4 != 0;
    assume pDevExt_4 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 734} SerialRestoreDeviceState(pDevExt_4);
    goto L49;

  L49:
    assume {:nonnull} pIrpStack_2 != 0;
    assume pIrpStack_2 > 0;
    havoc vslice_dummy_var_2525;
    havoc vslice_dummy_var_2526;
    call {:si_unique_call 735} SD3 := PoSetPowerState(0, vslice_dummy_var_2525, vslice_dummy_var_2526);
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    assume {:nonnull} SD3 != 0;
    assume SD3 > 0;
    assume {:nonnull} sdv_3 != 0;
    assume sdv_3 > 0;
    call {:si_unique_call 736} PoStartNextPowerIrp(0);
    Tmp_311 := strConst__li2bpl1;
    call {:si_unique_call 737} vslice_dummy_var_206 := SerialDbgPrintEx(9, Tmp_311);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 738} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_2);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L104;

  L104:
    call {:si_unique_call 739} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 740} SerialIRPEpilogue(pDevExt_4);
    Tmp_315 := strConst__li2bpl127;
    call {:si_unique_call 741} vslice_dummy_var_207 := SerialDbgPrintEx(11, Tmp_315);
    Tmp_310 := status_10;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L104;

  anon30_Then:
    goto L49;

  anon26_Then:
    assume {:partition} 0 > Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    status_10 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))];
    call {:si_unique_call 742} PoStartNextPowerIrp(0);
    Tmp_317 := strConst__li2bpl1;
    call {:si_unique_call 743} vslice_dummy_var_208 := SerialDbgPrintEx(9, Tmp_317);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 744} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_2);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L107;

  L107:
    call {:si_unique_call 745} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 746} SerialIRPEpilogue(pDevExt_4);
    Tmp_310 := status_10;
    goto L1;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L107;

  anon24_Then:
    assume {:partition} status_10 != 259;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_10 < 0;
    assume {:nonnull} PIrp_2 != 0;
    assume PIrp_2 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_2))] := status_10;
    call {:si_unique_call 747} PoStartNextPowerIrp(0);
    Tmp_316 := strConst__li2bpl1;
    call {:si_unique_call 748} vslice_dummy_var_209 := SerialDbgPrintEx(9, Tmp_316);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume PIrp_2 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 749} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_2);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L110;

  L110:
    call {:si_unique_call 750} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 751} SerialIRPEpilogue(pDevExt_4);
    Tmp_310 := status_10;
    goto L1;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L110;

  anon25_Then:
    assume {:partition} 0 <= status_10;
    goto L44;

  anon23_Then:
    assume !(PIrp_2 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L101;
}



procedure {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_6: int, actual_PIrp_3: int) returns (Tmp_320: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.MajorFunction__IO_STACK_LOCATION, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialPowerDispatch"} SerialPowerDispatch(actual_PDevObj_6: int, actual_PIrp_3: int) returns (Tmp_320: int)
{
  var {:pointer} Tmp_321: int;
  var {:pointer} Tmp_322: int;
  var {:pointer} Tmp_323: int;
  var {:pointer} Tmp_324: int;
  var {:pointer} pDevExt_5: int;
  var {:pointer} Tmp_325: int;
  var {:pointer} Tmp_326: int;
  var {:scalar} powerState_1: int;
  var {:pointer} Tmp_327: int;
  var {:pointer} Tmp_328: int;
  var {:scalar} Tmp_329: int;
  var {:pointer} pIrpStack_3: int;
  var {:pointer} Tmp_330: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} pLowerDevObj_4: int;
  var {:pointer} Tmp_333: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_334: int;
  var {:pointer} Tmp_335: int;
  var {:pointer} PDevObj_6: int;
  var {:pointer} PIrp_3: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 752} powerState_1 := __HAVOC_malloc(8);
    PDevObj_6 := actual_PDevObj_6;
    PIrp_3 := actual_PIrp_3;
    call {:si_unique_call 753} Tmp_321 := __HAVOC_malloc(100);
    call {:si_unique_call 754} Tmp_322 := __HAVOC_malloc(136);
    call {:si_unique_call 755} Tmp_323 := __HAVOC_malloc(112);
    call {:si_unique_call 756} Tmp_324 := __HAVOC_malloc(72);
    call {:si_unique_call 757} Tmp_325 := __HAVOC_malloc(104);
    call {:si_unique_call 758} Tmp_326 := __HAVOC_malloc(72);
    call {:si_unique_call 759} Tmp_327 := __HAVOC_malloc(72);
    call {:si_unique_call 760} Tmp_328 := __HAVOC_malloc(124);
    call {:si_unique_call 761} Tmp_330 := __HAVOC_malloc(80);
    call {:si_unique_call 762} Tmp_331 := __HAVOC_malloc(72);
    call {:si_unique_call 763} Tmp_332 := __HAVOC_malloc(104);
    call {:si_unique_call 764} Tmp_333 := __HAVOC_malloc(100);
    call {:si_unique_call 765} Tmp_334 := __HAVOC_malloc(28);
    call {:si_unique_call 766} Tmp_335 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_6 != 0;
    assume PDevObj_6 > 0;
    havoc pDevExt_5;
    call {:si_unique_call 767} pIrpStack_3 := sdv_IoGetCurrentIrpStackLocation(PIrp_3);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    havoc pLowerDevObj_4;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    call {:si_unique_call 768} sdv_do_paged_code_check();
    call {:si_unique_call 769} status_11 := SerialIRPPrologue(PIrp_3, pDevExt_5);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} status_11 != 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} status_11 != 259;
    call {:si_unique_call 770} PoStartNextPowerIrp(0);
    Tmp_335 := strConst__li2bpl1;
    call {:si_unique_call 771} vslice_dummy_var_212 := SerialDbgPrintEx(9, Tmp_335);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 772} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_3);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} yogi_error != 1;
    goto L238;

  L238:
    call {:si_unique_call 773} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 774} SerialIRPEpilogue(pDevExt_5);
    goto L26;

  L26:
    Tmp_320 := status_11;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon123_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon89_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L238;

  anon88_Then:
    assume {:partition} status_11 == 259;
    goto L26;

  anon87_Then:
    assume {:partition} status_11 == 0;
    status_11 := 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    Tmp_323 := strConst__li2bpl131;
    call {:si_unique_call 775} vslice_dummy_var_223 := SerialDbgPrintEx(12, Tmp_323);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto L57;

  L57:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := -1073741436;
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    status_11 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))];
    call {:si_unique_call 776} PoStartNextPowerIrp(0);
    Tmp_326 := strConst__li2bpl1;
    call {:si_unique_call 777} vslice_dummy_var_224 := SerialDbgPrintEx(9, Tmp_326);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 778} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_3);
    goto anon129_Then, anon129_Else;

  anon129_Else:
    assume {:partition} yogi_error != 1;
    goto L256;

  L256:
    call {:si_unique_call 779} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 780} SerialIRPEpilogue(pDevExt_5);
    Tmp_320 := status_11;
    goto L1;

  anon129_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon94_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L256;

  anon93_Then:
    goto L58;

  L58:
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := 0;
    status_11 := 0;
    call {:si_unique_call 781} PoStartNextPowerIrp(0);
    call {:si_unique_call 782} sdv_IoSkipCurrentIrpStackLocation(PIrp_3);
    call {:si_unique_call 783} Tmp_320 := SerialPoCallDriver(pDevExt_5, pLowerDevObj_4, PIrp_3);
    goto L1;

  anon92_Then:
    goto L58;

  anon90_Then:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    goto L58;

  anon91_Then:
    goto L57;

  anon109_Then:
    goto L40;

  L40:
    call {:si_unique_call 784} PoStartNextPowerIrp(0);
    call {:si_unique_call 785} sdv_IoSkipCurrentIrpStackLocation(PIrp_3);
    call {:si_unique_call 786} status_11 := SerialPoCallDriver(pDevExt_5, pLowerDevObj_4, PIrp_3);
    Tmp_320 := status_11;
    goto L1;

  anon110_Then:
    Tmp_332 := strConst__li2bpl130;
    call {:si_unique_call 787} vslice_dummy_var_215 := SerialDbgPrintEx(12, Tmp_332);
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    Tmp_331 := strConst__li2bpl133;
    call {:si_unique_call 788} vslice_dummy_var_218 := SerialDbgPrintEx(12, Tmp_331);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    Tmp_322 := strConst__li2bpl134;
    call {:si_unique_call 789} vslice_dummy_var_219 := SerialDbgPrintEx(12, Tmp_322);
    status_11 := 0;
    goto L40;

  anon96_Then:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto L106;

  L106:
    Tmp_321 := strConst__li2bpl136;
    call {:si_unique_call 790} vslice_dummy_var_221 := SerialDbgPrintEx(12, Tmp_321);
    call {:si_unique_call 791} Tmp_320 := SerialSetPowerD3(PDevObj_6, PIrp_3);
    goto L1;

  anon120_Then:
    goto L40;

  anon121_Then:
    goto L106;

  anon122_Then:
    goto L106;

  anon97_Then:
    Tmp_333 := strConst__li2bpl135;
    call {:si_unique_call 792} vslice_dummy_var_220 := SerialDbgPrintEx(12, Tmp_333);
    call {:si_unique_call 793} Tmp_320 := SerialSetPowerD0(PDevObj_6, PIrp_3);
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon128_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon112_Then:
    Tmp_330 := strConst__li2bpl132;
    call {:si_unique_call 794} vslice_dummy_var_222 := SerialDbgPrintEx(12, Tmp_330);
    status_11 := 0;
    goto L40;

  anon95_Then:
    Tmp_324 := strConst__li2bpl137;
    call {:si_unique_call 795} vslice_dummy_var_216 := SerialDbgPrintEx(12, Tmp_324);
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    status_11 := 0;
    goto L40;

  anon98_Then:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    goto L128;

  L128:
    assume {:nonnull} pIrpStack_3 != 0;
    assume pIrpStack_3 > 0;
    havoc Tmp_329;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    havoc Tmp_334;
    assume {:nonnull} Tmp_334 != 0;
    assume Tmp_334 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  L130:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_5)] != 0;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 796} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl2);
    goto L241;

  L241:
    call {:si_unique_call 797} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 798} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_3);
    call {:si_unique_call 799} sdv_IoSetCompletionRoutine(PIrp_3, li2bplFunctionConstant322, 0, 1, 1, 1);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 800} SLIC_PoCallDriver_entry(strConst__li2bpl2);
    goto L244;

  L244:
    call {:si_unique_call 801} vslice_dummy_var_210 := PoCallDriver(0, PIrp_3);
    Tmp_320 := 259;
    goto L1;

  anon103_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L244;

  anon125_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L241;

  anon102_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(pDevExt_5)] == 0;
    goto L131;

  L131:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto L150;

  L150:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    goto L152;

  L152:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 802} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl2);
    goto L247;

  L247:
    call {:si_unique_call 803} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 804} sdv_IoCopyCurrentIrpStackLocationToNext(PIrp_3);
    call {:si_unique_call 805} sdv_IoSetCompletionRoutine(PIrp_3, li2bplFunctionConstant322, 0, 1, 1, 1);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 806} SLIC_PoCallDriver_entry(strConst__li2bpl2);
    goto L250;

  L250:
    call {:si_unique_call 807} vslice_dummy_var_211 := PoCallDriver(0, PIrp_3);
    Tmp_320 := 259;
    goto L1;

  anon107_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L250;

  anon126_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L247;

  anon106_Then:
    status_11 := -1073741436;
    assume {:nonnull} PIrp_3 != 0;
    assume PIrp_3 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_3))] := status_11;
    call {:si_unique_call 808} PoStartNextPowerIrp(0);
    Tmp_327 := strConst__li2bpl1;
    call {:si_unique_call 809} vslice_dummy_var_217 := SerialDbgPrintEx(9, Tmp_327);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume PIrp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 810} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_3);
    goto anon127_Then, anon127_Else;

  anon127_Else:
    assume {:partition} yogi_error != 1;
    goto L253;

  L253:
    call {:si_unique_call 811} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 812} SerialIRPEpilogue(pDevExt_5);
    Tmp_320 := status_11;
    goto L1;

  anon127_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon108_Then:
    assume !(PIrp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L253;

  anon104_Then:
    assume {:nonnull} pDevExt_5 != 0;
    assume pDevExt_5 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto L152;

  anon105_Then:
    goto L150;

  anon101_Then:
    goto L40;

  anon100_Then:
    goto L131;

  anon113_Then:
    status_11 := 0;
    goto L40;

  anon114_Then:
    goto L128;

  anon115_Then:
    goto L128;

  anon116_Then:
    goto L128;

  anon117_Then:
    goto L128;

  anon118_Then:
    goto L128;

  anon119_Then:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  anon99_Then:
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    goto L130;

  anon111_Then:
    Tmp_328 := strConst__li2bpl129;
    call {:si_unique_call 813} vslice_dummy_var_214 := SerialDbgPrintEx(12, Tmp_328);
    goto L40;

  anon124_Then:
    Tmp_325 := strConst__li2bpl128;
    call {:si_unique_call 814} vslice_dummy_var_213 := SerialDbgPrintEx(12, Tmp_325);
    goto L40;
}



procedure {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_4: int) returns (Tmp_337: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_337 == -1073741436 || Tmp_337 == 0 || Tmp_337 == -1073741584 || Tmp_337 == 259 || Tmp_337 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSendWaitWake"} SerialSendWaitWake(actual_PDevExt_4: int) returns (Tmp_337: int)
{
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_338: int;
  var {:pointer} pIrp: int;
  var {:scalar} status_12: int;
  var {:pointer} PDevExt_4: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_2527: int;
  var vslice_dummy_var_2528: int;

  anon0:
    call {:si_unique_call 815} powerState_2 := __HAVOC_malloc(8);
    PDevExt_4 := actual_PDevExt_4;
    call {:si_unique_call 816} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_337 := -1073741436;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_337 := -1073741436;
    goto L1;

  anon12_Then:
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 817} Tmp_338 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    havoc vslice_dummy_var_2527;
    Mem_T.INT4[Tmp_338] := vslice_dummy_var_2527;
    call {:si_unique_call 818} vslice_dummy_var_225 := sdv_InterlockedIncrement(Tmp_338);
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} Tmp_338 != 0;
    assume Tmp_338 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    havoc vslice_dummy_var_2528;
    call {:si_unique_call 819} status_12 := PoRequestPowerIrp(vslice_dummy_var_2528, 0, powerState_2, li2bplFunctionConstant328, PDevExt_4, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_12 == 259;
    status_12 := 0;
    assume {:nonnull} PDevExt_4 != 0;
    assume PDevExt_4 > 0;
    goto L27;

  L27:
    Tmp_337 := status_12;
    goto L1;

  anon14_Then:
    assume {:partition} status_12 != 259;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_12 < 0;
    call {:si_unique_call 820} SerialIRPEpilogue(PDevExt_4);
    goto L27;

  anon15_Then:
    assume {:partition} 0 <= status_12;
    goto L27;

  anon13_Then:
    Tmp_337 := -1073741436;
    goto L1;
}



procedure {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSaveDeviceState"} SerialSaveDeviceState(actual_PDevExt_5: int)
{
  var {:pointer} pDevState: int;
  var {:pointer} Tmp_339: int;
  var {:pointer} Tmp_341: int;
  var {:pointer} PDevExt_5: int;
  var boogieTmp: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;

  anon0:
    call {:si_unique_call 821} vslice_dummy_var_226 := __HAVOC_malloc(4);
    PDevExt_5 := actual_PDevExt_5;
    call {:si_unique_call 822} Tmp_339 := __HAVOC_malloc(124);
    call {:si_unique_call 823} Tmp_341 := __HAVOC_malloc(128);
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    pDevState := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_5);
    call {:si_unique_call 824} sdv_do_paged_code_check();
    Tmp_341 := strConst__li2bpl138;
    call {:si_unique_call 825} vslice_dummy_var_227 := SerialDbgPrintEx(11, Tmp_341);
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 826} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 827} boogieTmp := corral_nondet();
    assume {:nonnull} PDevExt_5 != 0;
    assume PDevExt_5 > 0;
    assume {:nonnull} pDevState != 0;
    assume pDevState > 0;
    call {:si_unique_call 828} boogieTmp := corral_nondet();
    Tmp_339 := strConst__li2bpl139;
    call {:si_unique_call 829} vslice_dummy_var_228 := SerialDbgPrintEx(11, Tmp_339);
    return;
}



procedure {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_7: int, actual_PIrp_4: int) returns (Tmp_346: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} Tmp_346 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetPowerD3"} SerialSetPowerD3(actual_PDevObj_7: int, actual_PIrp_4: int) returns (Tmp_346: int)
{
  var {:pointer} SD2: int;
  var {:pointer} SD1: int;
  var {:scalar} charTime: int;
  var {:pointer} pDevExt_6: int;
  var {:scalar} sdv_1: int;
  var {:pointer} pIrpStack_4: int;
  var {:scalar} sdv_2: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} PDevObj_7: int;
  var {:pointer} PIrp_4: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_2529: int;
  var vslice_dummy_var_2530: int;
  var vslice_dummy_var_2531: int;

  anon0:
    call {:si_unique_call 830} charTime := __HAVOC_malloc(20);
    call {:si_unique_call 831} sdv_1 := __HAVOC_malloc(8);
    call {:si_unique_call 832} sdv_2 := __HAVOC_malloc(20);
    PDevObj_7 := actual_PDevObj_7;
    PIrp_4 := actual_PIrp_4;
    call {:si_unique_call 833} Tmp_348 := __HAVOC_malloc(84);
    assume {:nonnull} PDevObj_7 != 0;
    assume PDevObj_7 > 0;
    havoc pDevExt_6;
    call {:si_unique_call 834} pIrpStack_4 := sdv_IoGetCurrentIrpStackLocation(PIrp_4);
    call {:si_unique_call 835} sdv_do_paged_code_check();
    Tmp_348 := strConst__li2bpl140;
    call {:si_unique_call 836} vslice_dummy_var_230 := SerialDbgPrintEx(6, Tmp_348);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 837} vslice_dummy_var_229 := SerialSendWaitWake(pDevExt_6);
    goto L20;

  L20:
    assume {:nonnull} pIrpStack_4 != 0;
    assume pIrpStack_4 > 0;
    havoc vslice_dummy_var_2529;
    havoc vslice_dummy_var_2530;
    call {:si_unique_call 838} SD1 := PoSetPowerState(0, vslice_dummy_var_2529, vslice_dummy_var_2530);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 839} SetDeviceIsOpened(pDevExt_6, 0, 1);
    call {:si_unique_call 840} SD2 := SerialGetCharTime(pDevExt_6);
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} SD2 != 0;
    assume SD2 > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    assume {:nonnull} charTime != 0;
    assume charTime > 0;
    assume {:nonnull} sdv_2 != 0;
    assume sdv_2 > 0;
    call {:si_unique_call 841} SerialDisableUART(pDevExt_6);
    call {:si_unique_call 842} SerialDrainUART(pDevExt_6, charTime);
    call {:si_unique_call 843} SerialSaveDeviceState(pDevExt_6);
    goto L47;

  L47:
    assume {:nonnull} PIrp_4 != 0;
    assume PIrp_4 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_4))] := 0;
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    assume {:nonnull} PIrp_4 != 0;
    assume PIrp_4 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_4))] := 0;
    call {:si_unique_call 844} PoStartNextPowerIrp(0);
    call {:si_unique_call 845} sdv_IoSkipCurrentIrpStackLocation(PIrp_4);
    assume {:nonnull} pDevExt_6 != 0;
    assume pDevExt_6 > 0;
    havoc vslice_dummy_var_2531;
    call {:si_unique_call 846} Tmp_346 := SerialPoCallDriver(pDevExt_6, vslice_dummy_var_2531, PIrp_4);
    return;

  anon6_Then:
    call {:si_unique_call 847} SetDeviceIsOpened(pDevExt_6, 0, 0);
    goto L47;

  anon5_Then:
    goto L20;
}



procedure {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_6: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialRestoreDeviceState"} SerialRestoreDeviceState(actual_PDevExt_6: int)
{
  var {:pointer} pDevState_1: int;
  var {:scalar} S: int;
  var {:dopa} {:scalar} divisor: int;
  var {:pointer} Tmp_357: int;
  var {:pointer} Tmp_361: int;
  var {:pointer} Tmp_365: int;
  var {:pointer} Tmp_371: int;
  var {:pointer} PDevExt_6: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_2532: int;
  var vslice_dummy_var_2533: int;

  anon0:
    call {:si_unique_call 848} S := __HAVOC_malloc(8);
    call {:si_unique_call 849} divisor := __HAVOC_malloc(4);
    call {:si_unique_call 850} vslice_dummy_var_231 := __HAVOC_malloc(4);
    PDevExt_6 := actual_PDevExt_6;
    call {:si_unique_call 851} Tmp_361 := __HAVOC_malloc(52);
    call {:si_unique_call 852} Tmp_365 := __HAVOC_malloc(128);
    call {:si_unique_call 853} Tmp_371 := __HAVOC_malloc(72);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    pDevState_1 := DeviceState__SERIAL_DEVICE_EXTENSION(PDevExt_6);
    call {:si_unique_call 854} sdv_do_paged_code_check();
    Tmp_365 := strConst__li2bpl141;
    call {:si_unique_call 855} vslice_dummy_var_234 := SerialDbgPrintEx(11, Tmp_365);
    Tmp_361 := strConst__li2bpl142;
    call {:si_unique_call 856} vslice_dummy_var_235 := SerialDbgPrintEx(11, Tmp_361);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    havoc vslice_dummy_var_2532;
    havoc vslice_dummy_var_2533;
    call {:si_unique_call 857} vslice_dummy_var_232 := SerialGetDivisorFromBaud(vslice_dummy_var_2532, vslice_dummy_var_2533, divisor);
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} S != 0;
    assume S > 0;
    assume {:nonnull} divisor != 0;
    assume divisor > 0;
    call {:si_unique_call 858} vslice_dummy_var_236 := SerialSetBaud(S);
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 859} vslice_dummy_var_237 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L48;

  L48:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L49;

  L49:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 860} vslice_dummy_var_238 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 861} vslice_dummy_var_239 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    call {:si_unique_call 862} vslice_dummy_var_240 := corral_nondet();
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_371 := strConst__li2bpl143;
    call {:si_unique_call 863} vslice_dummy_var_241 := SerialDbgPrintEx(12, Tmp_371);
    call {:si_unique_call 864} SetDeviceIsOpened(PDevExt_6, 1, 0);
    assume {:nonnull} pDevState_1 != 0;
    assume pDevState_1 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon13_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 865} vslice_dummy_var_233 := corral_nondet();
    goto L49;

  anon14_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    havoc Tmp_357;
    assume {:nonnull} Tmp_357 != 0;
    assume Tmp_357 > 0;
    goto L49;

  anon12_Then:
    goto L49;

  anon11_Then:
    assume {:nonnull} PDevExt_6 != 0;
    assume PDevExt_6 > 0;
    goto L48;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 866} vslice_dummy_var_242 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_5: int, actual_Irp_5: int) returns (Tmp_375: int);
  modifies alloc, Mem_T.INT4, Mem_T.MajorFunction__IO_STACK_LOCATION, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSystemControlDispatch"} SerialSystemControlDispatch(actual_DeviceObject_5: int, actual_Irp_5: int) returns (Tmp_375: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} pDevExt_7: int;
  var {:scalar} status_14: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_2534: int;
  var vslice_dummy_var_2535: int;

  anon0:
    call {:si_unique_call 867} disposition := __HAVOC_malloc(4);
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_5 := actual_Irp_5;
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc pDevExt_7;
    call {:si_unique_call 868} sdv_do_paged_code_check();
    call {:si_unique_call 869} status_14 := WmiSystemControl(0, 0, Irp_5, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L22;

  L22:
    call {:si_unique_call 870} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 871} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L48;

  L48:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    havoc vslice_dummy_var_2534;
    call {:si_unique_call 872} status_14 := sdv_IoCallDriver(vslice_dummy_var_2534, Irp_5);
    goto L30;

  L30:
    Tmp_375 := status_14;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L48;

  anon21_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 873} sdv_IoSkipCurrentIrpStackLocation(Irp_5);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 874} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L51;

  L51:
    assume {:nonnull} pDevExt_7 != 0;
    assume pDevExt_7 > 0;
    havoc vslice_dummy_var_2535;
    call {:si_unique_call 875} status_14 := sdv_IoCallDriver(vslice_dummy_var_2535, Irp_5);
    goto L30;

  anon20_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L51;

  anon22_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L22;

  anon23_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume Irp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 876} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_5);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L45;

  L45:
    call {:si_unique_call 877} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume !(Irp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L45;

  anon17_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L30;
}



procedure {:origName "SerialSetBaud"} SerialSetBaud(actual_Context: int) returns (Tmp_377: int);
  free ensures {:va_keep} Tmp_377 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetBaud"} SerialSetBaud(actual_Context: int) returns (Tmp_377: int)
{
  var {:scalar} Appropriate: int;
  var {:pointer} Extension_6: int;
  var {:pointer} Tmp_385: int;
  var {:scalar} LineControl: int;
  var {:pointer} Tmp_387: int;
  var {:pointer} Address: int;
  var {:scalar} Divisor: int;
  var {:pointer} Context: int;
  var vslice_dummy_var_243: int;

  anon0:
    Context := actual_Context;
    Tmp_385 := Context;
    assume {:nonnull} Tmp_385 != 0;
    assume Tmp_385 > 0;
    havoc Extension_6;
    Tmp_387 := Context;
    assume {:nonnull} Tmp_387 != 0;
    assume Tmp_387 > 0;
    havoc Appropriate;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    havoc Address;
    Divisor := Appropriate;
    call {:si_unique_call 878} LineControl := corral_nondet();
    call {:si_unique_call 879} vslice_dummy_var_243 := corral_nondet();
    Tmp_377 := 0;
    return;
}



procedure {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_390: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, Mem_T.Cancel__IRP, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialIoControl"} SerialIoControl(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_390: int)
{
  var {:pointer} Tmp_391: int;
  var {:pointer} Tmp_392: int;
  var {:dopa} {:scalar} AppropriateDivisor: int;
  var {:pointer} Tmp_393: int;
  var {:pointer} Tmp_394: int;
  var {:pointer} NewChars: int;
  var {:scalar} Tmp_395: int;
  var {:scalar} Tmp_396: int;
  var {:pointer} NewTimeouts: int;
  var {:scalar} Tmp_397: int;
  var {:scalar} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} Tmp_400: int;
  var {:pointer} Tmp_401: int;
  var {:scalar} Mask: int;
  var {:pointer} escapeChar: int;
  var {:scalar} S_1: int;
  var {:pointer} Lc: int;
  var {:scalar} prologueStatus: int;
  var {:scalar} Status_2: int;
  var {:pointer} Tmp_402: int;
  var {:scalar} Tmp_403: int;
  var {:scalar} sdv_350: int;
  var {:scalar} S_2: int;
  var {:pointer} Br: int;
  var {:pointer} Rs: int;
  var {:pointer} Tmp_404: int;
  var {:pointer} Tmp_405: int;
  var {:pointer} IrpSp_1: int;
  var {:pointer} Tmp_406: int;
  var {:pointer} Tmp_407: int;
  var {:pointer} HandFlow: int;
  var {:scalar} OldIrql_2: int;
  var {:pointer} Tmp_408: int;
  var {:scalar} LData: int;
  var {:scalar} S_3: int;
  var {:pointer} Extension_7: int;
  var {:scalar} Tmp_409: int;
  var {:scalar} LParity: int;
  var {:scalar} sdv_363: int;
  var {:pointer} Tmp_411: int;
  var {:scalar} S_4: int;
  var {:scalar} Mask_1: int;
  var {:scalar} ModemControl: int;
  var {:pointer} Tmp_412: int;
  var {:pointer} Tmp_413: int;
  var {:pointer} Tmp_414: int;
  var {:scalar} NewMask: int;
  var {:scalar} Tmp_415: int;
  var {:pointer} Xc: int;
  var {:pointer} Tmp_416: int;
  var {:scalar} Tmp_417: int;
  var {:scalar} LStop: int;
  var {:scalar} S_5: int;
  var {:scalar} S_6: int;
  var {:scalar} BaudRate: int;
  var {:scalar} Tmp_418: int;
  var {:pointer} Tmp_419: int;
  var {:scalar} S_7: int;
  var {:scalar} Tmp_420: int;
  var {:scalar} Tmp_421: int;
  var {:scalar} Tmp_422: int;
  var {:scalar} Tmp_423: int;
  var {:pointer} Tmp_424: int;
  var {:scalar} Tmp_425: int;
  var {:pointer} Tmp_426: int;
  var {:pointer} Lc_1: int;
  var {:scalar} S_8: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;
  var vslice_dummy_var_258: int;
  var vslice_dummy_var_259: int;
  var vslice_dummy_var_260: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_2536: int;
  var vslice_dummy_var_2537: int;
  var vslice_dummy_var_2538: int;
  var vslice_dummy_var_2539: int;
  var vslice_dummy_var_2540: int;
  var vslice_dummy_var_2541: int;
  var vslice_dummy_var_2542: int;
  var vslice_dummy_var_2543: int;
  var vslice_dummy_var_2544: int;
  var vslice_dummy_var_2545: int;
  var vslice_dummy_var_2546: int;
  var vslice_dummy_var_2547: int;
  var vslice_dummy_var_2548: int;

  anon0:
    call {:si_unique_call 880} AppropriateDivisor := __HAVOC_malloc(4);
    call {:si_unique_call 881} S_1 := __HAVOC_malloc(8);
    call {:si_unique_call 882} S_2 := __HAVOC_malloc(8);
    call {:si_unique_call 883} S_3 := __HAVOC_malloc(8);
    call {:si_unique_call 884} S_4 := __HAVOC_malloc(8);
    call {:si_unique_call 885} S_5 := __HAVOC_malloc(8);
    call {:si_unique_call 886} S_6 := __HAVOC_malloc(8);
    call {:si_unique_call 887} S_7 := __HAVOC_malloc(8);
    call {:si_unique_call 888} S_8 := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 889} Tmp_391 := __HAVOC_malloc(72);
    call {:si_unique_call 890} Tmp_393 := __HAVOC_malloc(72);
    call {:si_unique_call 891} Tmp_394 := __HAVOC_malloc(128);
    call {:si_unique_call 892} Tmp_401 := __HAVOC_malloc(140);
    call {:si_unique_call 893} Tmp_405 := __HAVOC_malloc(148);
    call {:si_unique_call 894} Tmp_408 := __HAVOC_malloc(124);
    call {:si_unique_call 895} Tmp_411 := __HAVOC_malloc(68);
    call {:si_unique_call 896} Tmp_413 := __HAVOC_malloc(96);
    call {:si_unique_call 897} Tmp_419 := __HAVOC_malloc(136);
    call {:si_unique_call 898} Tmp_424 := __HAVOC_malloc(148);
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc Extension_7;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon431_Then, anon431_Else;

  anon431_Else:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := -1073741808;
    goto anon432_Then, anon432_Else;

  anon432_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 899} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_6);
    goto anon433_Then, anon433_Else;

  anon433_Else:
    assume {:partition} yogi_error != 1;
    goto L874;

  L874:
    call {:si_unique_call 900} sdv_IoCompleteRequest(0, 0);
    Tmp_390 := -1073741808;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon433_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon432_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L874;

  anon431_Then:
    call {:si_unique_call 901} prologueStatus := SerialIRPPrologue(Irp_6, Extension_7);
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} prologueStatus != 0;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} prologueStatus != 259;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := prologueStatus;
    Tmp_391 := strConst__li2bpl1;
    call {:si_unique_call 902} vslice_dummy_var_258 := SerialDbgPrintEx(9, Tmp_391);
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 903} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_6);
    goto anon434_Then, anon434_Else;

  anon434_Else:
    assume {:partition} yogi_error != 1;
    goto L877;

  L877:
    call {:si_unique_call 904} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 905} SerialIRPEpilogue(Extension_7);
    goto L24;

  L24:
    Tmp_390 := prologueStatus;
    goto L1;

  anon434_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon315_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L877;

  anon314_Then:
    assume {:partition} prologueStatus == 259;
    goto L24;

  anon313_Then:
    assume {:partition} prologueStatus == 0;
    Tmp_413 := strConst__li2bpl0;
    call {:si_unique_call 906} vslice_dummy_var_259 := SerialDbgPrintEx(9, Tmp_413);
    call {:si_unique_call 907} sdv_363 := SerialCompleteIfError(DeviceObject_6, Irp_6);
    goto anon435_Then, anon435_Else;

  anon435_Else:
    assume {:partition} yogi_error != 1;
    goto anon316_Then, anon316_Else;

  anon316_Else:
    assume {:partition} sdv_363 != 0;
    Tmp_390 := -1073741536;
    goto L1;

  anon316_Then:
    assume {:partition} sdv_363 == 0;
    call {:si_unique_call 908} IrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Status_2 := 0;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon436_Then, anon436_Else;

  anon436_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon421_Then, anon421_Else;

  anon421_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon420_Then, anon420_Else;

  anon420_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon419_Then, anon419_Else;

  anon419_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon418_Then, anon418_Else;

  anon418_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon417_Then, anon417_Else;

  anon417_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon416_Then, anon416_Else;

  anon416_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon415_Then, anon415_Else;

  anon415_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon414_Then, anon414_Else;

  anon414_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon413_Then, anon413_Else;

  anon413_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon412_Then, anon412_Else;

  anon412_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon411_Then, anon411_Else;

  anon411_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon410_Then, anon410_Else;

  anon410_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon409_Then, anon409_Else;

  anon409_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon408_Then, anon408_Else;

  anon408_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon407_Then, anon407_Else;

  anon407_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon406_Then, anon406_Else;

  anon406_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon405_Then, anon405_Else;

  anon405_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon404_Then, anon404_Else;

  anon404_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon403_Then, anon403_Else;

  anon403_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon402_Then, anon402_Else;

  anon402_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon401_Then, anon401_Else;

  anon401_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon400_Then, anon400_Else;

  anon400_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon399_Then, anon399_Else;

  anon399_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon398_Then, anon398_Else;

  anon398_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon397_Then, anon397_Else;

  anon397_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon396_Then, anon396_Else;

  anon396_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon395_Then, anon395_Else;

  anon395_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon394_Then, anon394_Else;

  anon394_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon393_Then, anon393_Else;

  anon393_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon392_Then, anon392_Else;

  anon392_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon391_Then, anon391_Else;

  anon391_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon390_Then, anon390_Else;

  anon390_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon389_Then, anon389_Else;

  anon389_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon388_Then, anon388_Else;

  anon388_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon387_Then, anon387_Else;

  anon387_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon386_Then, anon386_Else;

  anon386_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon329_Then, anon329_Else;

  anon329_Else:
    Status_2 := -1073741789;
    goto L95;

  L95:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := Status_2;
    Tmp_393 := strConst__li2bpl1;
    call {:si_unique_call 909} vslice_dummy_var_260 := SerialDbgPrintEx(9, Tmp_393);
    goto anon330_Then, anon330_Else;

  anon330_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 910} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_6);
    goto anon437_Then, anon437_Else;

  anon437_Else:
    assume {:partition} yogi_error != 1;
    goto L880;

  L880:
    call {:si_unique_call 911} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 912} SerialIRPEpilogue(Extension_7);
    Tmp_390 := Status_2;
    goto L1;

  anon437_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon330_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L880;

  anon329_Then:
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_2 != 0;
    assume S_2 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon468_Then, anon468_Else;

  anon468_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2536;
    call {:si_unique_call 913} Status_2 := SerialGotoPowerState(vslice_dummy_var_2536, Extension_7, 1);
    goto anon331_Then, anon331_Else;

  anon331_Else:
    assume {:partition} Status_2 >= 0;
    goto L108;

  L108:
    call {:si_unique_call 914} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 915} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    call {:si_unique_call 916} vslice_dummy_var_247 := KeSynchronizeExecution(0, li2bplFunctionConstant418, 0);
    call {:si_unique_call 917} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon331_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon468_Then:
    goto L108;

  anon386_Then:
    Status_2 := -1073741811;
    goto L95;

  anon387_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon332_Then, anon332_Else;

  anon332_Else:
    Status_2 := -1073741789;
    goto L95;

  anon332_Then:
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_1 != 0;
    assume S_1 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon467_Then, anon467_Else;

  anon467_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2537;
    call {:si_unique_call 918} Status_2 := SerialGotoPowerState(vslice_dummy_var_2537, Extension_7, 1);
    goto anon333_Then, anon333_Else;

  anon333_Else:
    assume {:partition} Status_2 >= 0;
    goto L130;

  L130:
    call {:si_unique_call 919} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 920} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    call {:si_unique_call 921} vslice_dummy_var_248 := KeSynchronizeExecution(0, li2bplFunctionConstant416, 0);
    call {:si_unique_call 922} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon333_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon467_Then:
    goto L130;

  anon388_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon334_Then, anon334_Else;

  anon334_Else:
    Status_2 := -1073741789;
    goto L95;

  anon334_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_6 != 0;
    assume S_6 > 0;
    call {:si_unique_call 923} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 924} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    call {:si_unique_call 925} vslice_dummy_var_249 := KeSynchronizeExecution(0, li2bplFunctionConstant417, 0);
    call {:si_unique_call 926} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon389_Then:
    call {:si_unique_call 927} vslice_dummy_var_246 := KeSynchronizeExecution(0, li2bplFunctionConstant411, 0);
    goto L95;

  anon390_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon328_Then, anon328_Else;

  anon328_Else:
    Status_2 := -1073741789;
    goto L95;

  anon328_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    call {:si_unique_call 928} vslice_dummy_var_271 := KeSynchronizeExecution(0, li2bplFunctionConstant410, 0);
    goto L95;

  anon391_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon327_Then, anon327_Else;

  anon327_Else:
    Status_2 := -1073741789;
    goto L95;

  anon327_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_406;
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    Mem_T.INT4[Tmp_406] := 0;
    goto L95;

  anon392_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc escapeChar;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon466_Then, anon466_Else;

  anon466_Else:
    Status_2 := -1073741789;
    goto L95;

  anon466_Then:
    call {:si_unique_call 929} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 930} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon335_Then, anon335_Else;

  anon335_Else:
    assume {:partition} Mem_T.INT4[escapeChar] != 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon336_Then, anon336_Else;

  anon336_Else:
    goto L190;

  L190:
    Status_2 := -1073741811;
    call {:si_unique_call 931} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon336_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} escapeChar != 0;
    assume escapeChar > 0;
    goto anon337_Then, anon337_Else;

  anon337_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon338_Then, anon338_Else;

  anon338_Else:
    goto L190;

  anon338_Then:
    goto L185;

  L185:
    call {:si_unique_call 932} vslice_dummy_var_250 := KeSynchronizeExecution(0, li2bplFunctionConstant420, 0);
    call {:si_unique_call 933} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon337_Then:
    goto L190;

  anon335_Then:
    assume {:partition} Mem_T.INT4[escapeChar] == 0;
    goto L185;

  anon393_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon339_Then, anon339_Else;

  anon339_Else:
    Status_2 := -1073741789;
    goto L95;

  anon339_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 934} sdv_350 := corral_nondet();
    ModemControl := sdv_350;
    ModemControl := BAND(ModemControl, BOR(1, 2));
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_400;
    assume {:nonnull} Tmp_400 != 0;
    assume Tmp_400 > 0;
    Mem_T.INT4[Tmp_400] := ModemControl;
    goto L95;

  anon394_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon326_Then, anon326_Else;

  anon326_Else:
    Status_2 := -1073741789;
    goto L95;

  anon326_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Tmp_399 := AssociatedIrp__IRP(Irp_6);
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    havoc vslice_dummy_var_2538;
    call {:si_unique_call 935} SerialGetProperties(Extension_7, vslice_dummy_var_2538);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := 0;
    goto L95;

  anon395_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Xc;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon464_Then, anon464_Else;

  anon464_Else:
    Status_2 := -1073741789;
    goto L95;

  anon464_Then:
    assume {:nonnull} Xc != 0;
    assume Xc > 0;
    goto anon340_Then, anon340_Else;

  anon340_Else:
    Status_2 := -1073741811;
    goto L95;

  anon340_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 936} Tmp_390 := SerialStartOrQueue(Extension_7, Irp_6, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant212);
    goto anon465_Then, anon465_Else;

  anon465_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon465_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon396_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon341_Then, anon341_Else;

  anon341_Else:
    Status_2 := -1073741789;
    goto L95;

  anon341_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_4 != 0;
    assume S_4 > 0;
    call {:si_unique_call 937} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 938} IoAcquireCancelSpinLock(Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    call {:si_unique_call 939} vslice_dummy_var_251 := KeSynchronizeExecution(0, li2bplFunctionConstant419, 0);
    call {:si_unique_call 940} IoReleaseCancelSpinLock(OldIrql_2);
    goto L95;

  anon397_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon342_Then, anon342_Else;

  anon342_Else:
    Status_2 := -1073741789;
    goto L95;

  anon342_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} S_8 != 0;
    assume S_8 > 0;
    call {:si_unique_call 941} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 942} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    call {:si_unique_call 943} vslice_dummy_var_252 := KeSynchronizeExecution(0, li2bplFunctionConstant415, 0);
    call {:si_unique_call 944} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon398_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc HandFlow;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon462_Then, anon462_Else;

  anon462_Else:
    Status_2 := -1073741789;
    goto L95;

  anon462_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon343_Then, anon343_Else;

  anon343_Else:
    Status_2 := -1073741811;
    goto L95;

  anon343_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon344_Then, anon344_Else;

  anon344_Else:
    Status_2 := -1073741811;
    goto L95;

  anon344_Then:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    havoc Tmp_396;
    goto anon463_Then, anon463_Else;

  anon463_Else:
    assume {:partition} Tmp_396 == 3;
    Status_2 := -1073741811;
    goto L95;

  anon463_Then:
    assume {:partition} Tmp_396 != 3;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon345_Then, anon345_Else;

  anon345_Else:
    goto L282;

  L282:
    Status_2 := -1073741811;
    goto L95;

  anon345_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon346_Then, anon346_Else;

  anon346_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon347_Then, anon347_Else;

  anon347_Else:
    goto L286;

  L286:
    Status_2 := -1073741811;
    goto L95;

  anon347_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon348_Then, anon348_Else;

  anon348_Else:
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    assume {:nonnull} S_7 != 0;
    assume S_7 > 0;
    call {:si_unique_call 945} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 946} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon349_Then, anon349_Else;

  anon349_Else:
    assume {:nonnull} HandFlow != 0;
    assume HandFlow > 0;
    goto anon350_Then, anon350_Else;

  anon350_Else:
    Status_2 := -1073741811;
    call {:si_unique_call 947} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon350_Then:
    goto L294;

  L294:
    call {:si_unique_call 948} vslice_dummy_var_253 := KeSynchronizeExecution(0, li2bplFunctionConstant423, 0);
    call {:si_unique_call 949} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon349_Then:
    goto L294;

  anon348_Then:
    goto L286;

  anon346_Then:
    goto L282;

  anon399_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon325_Then, anon325_Else;

  anon325_Else:
    Status_2 := -1073741789;
    goto L95;

  anon325_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 950} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 951} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_412;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    call {:si_unique_call 952} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon400_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc NewChars;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon461_Then, anon461_Else;

  anon461_Else:
    Status_2 := -1073741789;
    goto L95;

  anon461_Then:
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    assume {:nonnull} S_5 != 0;
    assume S_5 > 0;
    call {:si_unique_call 953} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 954} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon351_Then, anon351_Else;

  anon351_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon352_Then, anon352_Else;

  anon352_Else:
    goto L332;

  L332:
    Status_2 := -1073741811;
    call {:si_unique_call 955} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon352_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    goto anon353_Then, anon353_Else;

  anon353_Else:
    goto L332;

  anon353_Then:
    goto L329;

  L329:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewChars != 0;
    assume NewChars > 0;
    call {:si_unique_call 956} vslice_dummy_var_270 := KeSynchronizeExecution(0, li2bplFunctionConstant412, 0);
    call {:si_unique_call 957} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon351_Then:
    goto L329;

  anon401_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon324_Then, anon324_Else;

  anon324_Else:
    Status_2 := -1073741789;
    goto L95;

  anon324_Then:
    call {:si_unique_call 958} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 959} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_414;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_414 != 0;
    assume Tmp_414 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 960} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon402_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Lc_1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon453_Then, anon453_Else;

  anon453_Else:
    Status_2 := -1073741789;
    goto L95;

  anon453_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc vslice_dummy_var_2539;
    call {:si_unique_call 961} sdv_RtlZeroMemory(0, vslice_dummy_var_2539);
    call {:si_unique_call 962} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 963} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon354_Then, anon354_Else;

  anon354_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_403;
    goto anon454_Then, anon454_Else;

  anon454_Else:
    assume {:partition} Tmp_403 == 1;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  L372:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon355_Then, anon355_Else;

  anon355_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_409;
    goto anon455_Then, anon455_Else;

  anon455_Else:
    assume {:partition} Tmp_409 == 8;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  L378:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon356_Then, anon356_Else;

  anon356_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto anon357_Then, anon357_Else;

  anon357_Else:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  L383:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 964} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon357_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon356_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L383;

  anon455_Then:
    assume {:partition} Tmp_409 != 8;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_395;
    goto anon456_Then, anon456_Else;

  anon456_Else:
    assume {:partition} Tmp_395 == 24;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon456_Then:
    assume {:partition} Tmp_395 != 24;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_423;
    goto anon457_Then, anon457_Else;

  anon457_Else:
    assume {:partition} Tmp_423 == 40;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon457_Then:
    assume {:partition} Tmp_423 != 40;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_418;
    goto anon458_Then, anon458_Else;

  anon458_Else:
    assume {:partition} Tmp_418 == 56;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon458_Then:
    assume {:partition} Tmp_418 != 56;
    goto L378;

  anon355_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L378;

  anon454_Then:
    assume {:partition} Tmp_403 != 1;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_398;
    goto anon459_Then, anon459_Else;

  anon459_Else:
    assume {:partition} Tmp_398 == 2;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon459_Then:
    assume {:partition} Tmp_398 != 2;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_425;
    goto anon460_Then, anon460_Else;

  anon460_Else:
    assume {:partition} Tmp_425 == 3;
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon460_Then:
    assume {:partition} Tmp_425 != 3;
    goto L372;

  anon354_Then:
    assume {:nonnull} Lc_1 != 0;
    assume Lc_1 > 0;
    goto L372;

  anon403_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Br;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon452_Then, anon452_Else;

  anon452_Else:
    Status_2 := -1073741789;
    goto L95;

  anon452_Then:
    call {:si_unique_call 965} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 966} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Br != 0;
    assume Br > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 967} sdv_KeReleaseSpinLock(0, OldIrql_2);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto L95;

  anon404_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon358_Then, anon358_Else;

  anon358_Else:
    Status_2 := -1073741789;
    goto L95;

  anon358_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_416;
    assume {:nonnull} Tmp_416 != 0;
    assume Tmp_416 > 0;
    Mask := Mem_T.INT4[Tmp_416];
    goto anon450_Then, anon450_Else;

  anon450_Else:
    assume {:partition} Mask != 0;
    goto anon359_Then, anon359_Else;

  anon359_Else:
    assume {:partition} BAND(Mask, -16) == 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 968} Tmp_390 := SerialStartOrQueue(Extension_7, Irp_6, PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant424);
    goto anon451_Then, anon451_Else;

  anon451_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon451_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon359_Then:
    assume {:partition} BAND(Mask, -16) != 0;
    goto L419;

  L419:
    Status_2 := -1073741811;
    goto L95;

  anon450_Then:
    assume {:partition} Mask == 0;
    goto L419;

  anon405_Then:
    Tmp_401 := strConst__li2bpl144;
    call {:si_unique_call 969} vslice_dummy_var_267 := SerialDbgPrintEx(9, Tmp_401);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon360_Then, anon360_Else;

  anon360_Else:
    Tmp_394 := strConst__li2bpl146;
    call {:si_unique_call 970} vslice_dummy_var_268 := SerialDbgPrintEx(6, Tmp_394);
    Status_2 := -1073741789;
    goto L95;

  anon360_Then:
    Tmp_424 := strConst__li2bpl145;
    call {:si_unique_call 971} vslice_dummy_var_269 := SerialDbgPrintEx(9, Tmp_424);
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 972} Tmp_390 := SerialStartOrQueue(Extension_7, Irp_6, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant195);
    goto anon449_Then, anon449_Else;

  anon449_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon449_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon406_Then:
    Tmp_419 := strConst__li2bpl147;
    call {:si_unique_call 973} vslice_dummy_var_263 := SerialDbgPrintEx(9, Tmp_419);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon361_Then, anon361_Else;

  anon361_Else:
    Tmp_408 := strConst__li2bpl148;
    call {:si_unique_call 974} vslice_dummy_var_264 := SerialDbgPrintEx(6, Tmp_408);
    Status_2 := -1073741789;
    goto L95;

  anon361_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_407;
    assume {:nonnull} Tmp_407 != 0;
    assume Tmp_407 > 0;
    NewMask := Mem_T.INT4[Tmp_407];
    goto anon447_Then, anon447_Else;

  anon447_Else:
    assume {:partition} BAND(NewMask, -8192) != 0;
    Tmp_411 := strConst__li2bpl150;
    call {:si_unique_call 975} vslice_dummy_var_265 := SerialDbgPrintEx(6, Tmp_411);
    Status_2 := -1073741811;
    goto L95;

  anon447_Then:
    assume {:partition} BAND(NewMask, -8192) == 0;
    Tmp_405 := strConst__li2bpl149;
    call {:si_unique_call 976} vslice_dummy_var_266 := SerialDbgPrintEx(9, Tmp_405);
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 977} Tmp_390 := SerialStartOrQueue(Extension_7, Irp_6, MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant195);
    goto anon448_Then, anon448_Else;

  anon448_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon448_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon407_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon323_Then, anon323_Else;

  anon323_Else:
    Status_2 := -1073741789;
    goto L95;

  anon323_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_392;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    havoc vslice_dummy_var_2540;
    Mem_T.INT4[Tmp_392] := vslice_dummy_var_2540;
    goto L95;

  anon408_Then:
    call {:si_unique_call 978} vslice_dummy_var_245 := KeSynchronizeExecution(0, li2bplFunctionConstant422, 0);
    goto L95;

  anon409_Then:
    call {:si_unique_call 979} vslice_dummy_var_244 := KeSynchronizeExecution(0, li2bplFunctionConstant421, 0);
    goto L95;

  anon410_Then:
    goto L58;

  L58:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon322_Then, anon322_Else;

  anon322_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2541;
    call {:si_unique_call 980} Status_2 := SerialGotoPowerState(vslice_dummy_var_2541, Extension_7, 1);
    goto anon362_Then, anon362_Else;

  anon362_Else:
    assume {:partition} Status_2 >= 0;
    goto L469;

  L469:
    call {:si_unique_call 981} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 982} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_415;
    goto anon445_Then, anon445_Else;

  anon445_Else:
    assume {:partition} Tmp_415 == 128;
    goto L481;

  L481:
    Status_2 := -1073741811;
    goto L482;

  L482:
    call {:si_unique_call 983} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon445_Then:
    assume {:partition} Tmp_415 != 128;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_421;
    goto anon446_Then, anon446_Else;

  anon446_Else:
    assume {:partition} Tmp_421 != 192;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon363_Then, anon363_Else;

  anon363_Else:
    Tmp_420 := li2bplFunctionConstant425;
    goto L490;

  L490:
    call {:si_unique_call 984} vslice_dummy_var_254 := KeSynchronizeExecution(0, Tmp_420, 0);
    goto L482;

  anon363_Then:
    Tmp_420 := li2bplFunctionConstant250;
    goto L490;

  anon446_Then:
    assume {:partition} Tmp_421 == 192;
    goto L481;

  anon362_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon322_Then:
    goto L469;

  anon411_Then:
    goto L58;

  anon412_Then:
    goto L95;

  anon413_Then:
    goto L56;

  L56:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon321_Then, anon321_Else;

  anon321_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2542;
    call {:si_unique_call 985} Status_2 := SerialGotoPowerState(vslice_dummy_var_2542, Extension_7, 1);
    goto anon364_Then, anon364_Else;

  anon364_Else:
    assume {:partition} Status_2 >= 0;
    goto L493;

  L493:
    call {:si_unique_call 986} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 987} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_417;
    goto anon444_Then, anon444_Else;

  anon444_Else:
    assume {:partition} Tmp_417 == 2;
    Status_2 := -1073741811;
    goto L506;

  L506:
    call {:si_unique_call 988} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon444_Then:
    assume {:partition} Tmp_417 != 2;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon365_Then, anon365_Else;

  anon365_Else:
    Tmp_397 := li2bplFunctionConstant426;
    goto L512;

  L512:
    call {:si_unique_call 989} vslice_dummy_var_255 := KeSynchronizeExecution(0, Tmp_397, 0);
    goto L506;

  anon365_Then:
    Tmp_397 := li2bplFunctionConstant251;
    goto L512;

  anon364_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon321_Then:
    goto L493;

  anon414_Then:
    goto L56;

  anon415_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon320_Then, anon320_Else;

  anon320_Else:
    Status_2 := -1073741789;
    goto L95;

  anon320_Then:
    call {:si_unique_call 990} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 991} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_402;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Tmp_402 != 0;
    assume Tmp_402 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 992} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon416_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc NewTimeouts;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon443_Then, anon443_Else;

  anon443_Else:
    Status_2 := -1073741789;
    goto L95;

  anon443_Then:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon366_Then, anon366_Else;

  anon366_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon367_Then, anon367_Else;

  anon367_Else:
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    goto anon368_Then, anon368_Else;

  anon368_Else:
    Status_2 := -1073741811;
    goto L95;

  anon368_Then:
    goto L531;

  L531:
    call {:si_unique_call 993} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 994} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} NewTimeouts != 0;
    assume NewTimeouts > 0;
    call {:si_unique_call 995} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon367_Then:
    goto L531;

  anon366_Then:
    goto L531;

  anon417_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon319_Then, anon319_Else;

  anon319_Else:
    Status_2 := -1073741789;
    goto L95;

  anon319_Then:
    call {:si_unique_call 996} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 997} IoAcquireCancelSpinLock(Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon369_Then, anon369_Else;

  anon369_Else:
    assume {:partition} Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_7)] != 0;
    Status_2 := -1073741811;
    call {:si_unique_call 998} IoReleaseCancelSpinLock(OldIrql_2);
    goto L95;

  anon369_Then:
    assume {:partition} Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_7)] == 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon370_Then, anon370_Else;

  anon370_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_6)] != 0;
    call {:si_unique_call 999} IoReleaseCancelSpinLock(OldIrql_2);
    Status_2 := -1073741536;
    goto L95;

  anon370_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_6)] == 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    Mem_T.P_IRP[CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(Extension_7)] := Irp_6;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1000} IoReleaseCancelSpinLock(OldIrql_2);
    call {:si_unique_call 1001} SerialStartImmediate(Extension_7);
    goto anon442_Then, anon442_Else;

  anon442_Else:
    assume {:partition} yogi_error != 1;
    Tmp_390 := 259;
    goto L1;

  anon442_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon418_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon318_Then, anon318_Else;

  anon318_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2543;
    call {:si_unique_call 1002} Status_2 := SerialGotoPowerState(vslice_dummy_var_2543, Extension_7, 1);
    goto anon371_Then, anon371_Else;

  anon371_Else:
    assume {:partition} Status_2 >= 0;
    goto L572;

  L572:
    call {:si_unique_call 1003} vslice_dummy_var_256 := KeSynchronizeExecution(0, li2bplFunctionConstant427, 0);
    goto L95;

  anon371_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon318_Then:
    goto L572;

  anon419_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon317_Then, anon317_Else;

  anon317_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2544;
    call {:si_unique_call 1004} Status_2 := SerialGotoPowerState(vslice_dummy_var_2544, Extension_7, 1);
    goto anon372_Then, anon372_Else;

  anon372_Else:
    assume {:partition} Status_2 >= 0;
    goto L582;

  L582:
    call {:si_unique_call 1005} vslice_dummy_var_257 := KeSynchronizeExecution(0, li2bplFunctionConstant428, 0);
    goto L95;

  anon372_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon317_Then:
    goto L582;

  anon420_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Lc;
    Mask_1 := 255;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon440_Then, anon440_Else;

  anon440_Else:
    Status_2 := -1073741789;
    goto L95;

  anon440_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon373_Then, anon373_Else;

  anon373_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2545;
    call {:si_unique_call 1006} Status_2 := SerialGotoPowerState(vslice_dummy_var_2545, Extension_7, 1);
    goto anon375_Then, anon375_Else;

  anon375_Else:
    assume {:partition} Status_2 >= 0;
    goto L602;

  L602:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon374_Then, anon374_Else;

  anon374_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon424_Then, anon424_Else;

  anon424_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon423_Then, anon423_Else;

  anon423_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon422_Then, anon422_Else;

  anon422_Else:
    LData := 3;
    goto L615;

  L615:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon441_Then, anon441_Else;

  anon441_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon428_Then, anon428_Else;

  anon428_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon427_Then, anon427_Else;

  anon427_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon426_Then, anon426_Else;

  anon426_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon425_Then, anon425_Else;

  anon425_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 56;
    goto L625;

  L625:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon376_Then, anon376_Else;

  anon376_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon430_Then, anon430_Else;

  anon430_Else:
    assume {:nonnull} Lc != 0;
    assume Lc > 0;
    goto anon429_Then, anon429_Else;

  anon429_Else:
    goto anon378_Then, anon378_Else;

  anon378_Else:
    assume {:partition} LData != 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 4;
    goto L634;

  L634:
    call {:si_unique_call 1007} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 1008} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc Tmp_422;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1009} vslice_dummy_var_262 := KeSynchronizeExecution(0, li2bplFunctionConstant414, 0);
    call {:si_unique_call 1010} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon378_Then:
    assume {:partition} LData == 0;
    Status_2 := -1073741811;
    goto L95;

  anon429_Then:
    Status_2 := -1073741811;
    goto L95;

  anon430_Then:
    goto anon377_Then, anon377_Else;

  anon377_Else:
    assume {:partition} LData != 0;
    Status_2 := -1073741811;
    goto L95;

  anon377_Then:
    assume {:partition} LData == 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 4;
    goto L634;

  anon376_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LStop := 0;
    goto L634;

  anon425_Then:
    Status_2 := -1073741811;
    goto L95;

  anon426_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 40;
    goto L625;

  anon427_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 24;
    goto L625;

  anon428_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 8;
    goto L625;

  anon441_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    LParity := 0;
    goto L625;

  anon422_Then:
    Status_2 := -1073741811;
    goto L95;

  anon423_Then:
    LData := 2;
    Mask_1 := 127;
    goto L615;

  anon424_Then:
    LData := 1;
    Mask_1 := 63;
    goto L615;

  anon374_Then:
    LData := 0;
    Mask_1 := 31;
    goto L615;

  anon375_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon373_Then:
    goto L602;

  anon421_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Rs;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon438_Then, anon438_Else;

  anon438_Else:
    Status_2 := -1073741789;
    goto L95;

  anon438_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    goto anon379_Then, anon379_Else;

  anon379_Else:
    Status_2 := 0;
    goto L95;

  anon379_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    assume {:nonnull} Rs != 0;
    assume Rs > 0;
    havoc vslice_dummy_var_2546;
    call {:si_unique_call 1011} boogieTmp := sdv_ExAllocatePoolWithQuotaTag(0, vslice_dummy_var_2546, -666022077);
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon380_Then, anon380_Else;

  anon380_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    call {:si_unique_call 1012} Tmp_390 := SerialStartOrQueue(Extension_7, Irp_6, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_7), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_7), li2bplFunctionConstant136);
    goto anon439_Then, anon439_Else;

  anon439_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon439_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon380_Then:
    goto L95;

  anon436_Then:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    goto anon381_Then, anon381_Else;

  anon381_Else:
    Status_2 := -1073741789;
    goto L95;

  anon381_Then:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_404;
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    havoc BaudRate;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2547;
    call {:si_unique_call 1013} Status_2 := SerialGetDivisorFromBaud(vslice_dummy_var_2547, BaudRate, AppropriateDivisor);
    goto anon382_Then, anon382_Else;

  anon382_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto anon383_Then, anon383_Else;

  anon383_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_2548;
    call {:si_unique_call 1014} Status_2 := SerialGotoPowerState(vslice_dummy_var_2548, Extension_7, 1);
    goto anon384_Then, anon384_Else;

  anon384_Else:
    assume {:partition} Status_2 >= 0;
    goto L705;

  L705:
    call {:si_unique_call 1015} Tmp_426 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    Mem_T.INT4[Tmp_426] := OldIrql_2;
    call {:si_unique_call 1016} sdv_KeAcquireSpinLock(0, Tmp_426);
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    OldIrql_2 := Mem_T.INT4[Tmp_426];
    goto anon385_Then, anon385_Else;

  anon385_Else:
    assume {:partition} Status_2 >= 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    assume {:nonnull} AppropriateDivisor != 0;
    assume AppropriateDivisor > 0;
    assume {:nonnull} S_3 != 0;
    assume S_3 > 0;
    call {:si_unique_call 1017} vslice_dummy_var_261 := KeSynchronizeExecution(0, li2bplFunctionConstant413, 0);
    goto L716;

  L716:
    call {:si_unique_call 1018} sdv_KeReleaseSpinLock(0, OldIrql_2);
    goto L95;

  anon385_Then:
    assume {:partition} 0 > Status_2;
    goto L716;

  anon384_Then:
    assume {:partition} 0 > Status_2;
    goto L95;

  anon383_Then:
    goto L705;

  anon382_Then:
    assume {:partition} 0 > Status_2;
    goto L705;

  anon435_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_427: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialInternalIoControl"} SerialInternalIoControl(actual_PDevObj_8: int, actual_PIrp_5: int) returns (Tmp_427: int)
{
  var {:scalar} basic: int;
  var {:pointer} pBasic: int;
  var {:pointer} Tmp_430: int;
  var {:pointer} pDevExt_8: int;
  var {:scalar} prologueStatus_1: int;
  var {:scalar} S_9: int;
  var {:pointer} Tmp_433: int;
  var {:scalar} cap_1: int;
  var {:scalar} Tmp_434: int;
  var {:pointer} Tmp_435: int;
  var {:scalar} OldIrql_3: int;
  var {:scalar} Tmp_436: int;
  var {:pointer} Tmp_437: int;
  var {:pointer} pIrpStack_5: int;
  var {:scalar} sdv_387: int;
  var {:pointer} Tmp_439: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_440: int;
  var {:pointer} PDevObj_8: int;
  var {:pointer} PIrp_5: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;

  anon0:
    call {:si_unique_call 1019} basic := __HAVOC_malloc(44);
    call {:si_unique_call 1020} S_9 := __HAVOC_malloc(8);
    PDevObj_8 := actual_PDevObj_8;
    PIrp_5 := actual_PIrp_5;
    call {:si_unique_call 1021} Tmp_430 := __HAVOC_malloc(28);
    call {:si_unique_call 1022} Tmp_433 := __HAVOC_malloc(28);
    call {:si_unique_call 1023} Tmp_435 := __HAVOC_malloc(72);
    call {:si_unique_call 1024} Tmp_437 := __HAVOC_malloc(72);
    call {:si_unique_call 1025} Tmp_439 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_8 != 0;
    assume PDevObj_8 > 0;
    havoc pDevExt_8;
    call {:si_unique_call 1026} prologueStatus_1 := SerialIRPPrologue(PIrp_5, pDevExt_8);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} prologueStatus_1 != 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} prologueStatus_1 != 259;
    Tmp_437 := strConst__li2bpl1;
    call {:si_unique_call 1027} vslice_dummy_var_273 := SerialDbgPrintEx(9, Tmp_437);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume PIrp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1028} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_5);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L152;

  L152:
    call {:si_unique_call 1029} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1030} SerialIRPEpilogue(pDevExt_8);
    goto L19;

  L19:
    Tmp_427 := prologueStatus_1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume !(PIrp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L152;

  anon44_Then:
    assume {:partition} prologueStatus_1 == 259;
    goto L19;

  anon43_Then:
    assume {:partition} prologueStatus_1 == 0;
    Tmp_439 := strConst__li2bpl0;
    call {:si_unique_call 1031} vslice_dummy_var_274 := SerialDbgPrintEx(9, Tmp_439);
    call {:si_unique_call 1032} sdv_387 := SerialCompleteIfError(PDevObj_8, PIrp_5);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_387 != 0;
    Tmp_427 := -1073741536;
    goto L1;

  anon46_Then:
    assume {:partition} sdv_387 == 0;
    call {:si_unique_call 1033} pIrpStack_5 := sdv_IoGetCurrentIrpStackLocation(PIrp_5);
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    status_15 := 0;
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L48;

  L48:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    status_15 := -1073741789;
    goto L56;

  L56:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_5))] := status_15;
    Tmp_435 := strConst__li2bpl1;
    call {:si_unique_call 1034} vslice_dummy_var_275 := SerialDbgPrintEx(9, Tmp_435);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume PIrp_5 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1035} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_5);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} yogi_error != 1;
    goto L155;

  L155:
    call {:si_unique_call 1036} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1037} SerialIRPEpilogue(pDevExt_8);
    Tmp_427 := status_15;
    goto L1;

  anon62_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume !(PIrp_5 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L155;

  anon49_Then:
    call {:si_unique_call 1038} sdv_RtlZeroMemory(0, 44);
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} basic != 0;
    assume basic > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    havoc pBasic;
    call {:si_unique_call 1039} sdv_RtlCopyMemory(0, 0, 20);
    call {:si_unique_call 1040} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    pBasic := basic;
    goto L80;

  L80:
    call {:si_unique_call 1041} Tmp_440 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    Mem_T.INT4[Tmp_440] := OldIrql_3;
    call {:si_unique_call 1042} sdv_KeAcquireSpinLock(0, Tmp_440);
    assume {:nonnull} Tmp_440 != 0;
    assume Tmp_440 > 0;
    OldIrql_3 := Mem_T.INT4[Tmp_440];
    call {:si_unique_call 1043} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} S_9 != 0;
    assume S_9 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    call {:si_unique_call 1044} vslice_dummy_var_276 := KeSynchronizeExecution(0, li2bplFunctionConstant423, 0);
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pBasic != 0;
    assume pBasic > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    call {:si_unique_call 1045} vslice_dummy_var_277 := corral_nondet();
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto L108;

  L108:
    call {:si_unique_call 1046} sdv_KeReleaseSpinLock(0, OldIrql_3);
    goto L56;

  anon51_Then:
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto L108;

  anon47_Then:
    assume {:nonnull} pIrpStack_5 != 0;
    assume pIrpStack_5 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    status_15 := -1073741789;
    goto L56;

  anon48_Then:
    assume {:nonnull} PIrp_5 != 0;
    assume PIrp_5 > 0;
    havoc pBasic;
    goto L80;

  anon54_Then:
    status_15 := -1073741811;
    goto L56;

  anon55_Then:
    goto L48;

  anon56_Then:
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 1047} vslice_dummy_var_272 := IoCancelIrp(0);
    goto L121;

  L121:
    status_15 := 0;
    goto L56;

  anon63_Then:
    goto L121;

  anon59_Then:
    cap_1 := 2;
    goto L126;

  L126:
    call {:si_unique_call 1048} Tmp_430, Tmp_433, cap_1, Tmp_434, Tmp_436 := SerialInternalIoControl_loop_L126(Tmp_430, pDevExt_8, Tmp_433, cap_1, Tmp_434, Tmp_436);
    goto L126_last;

  L126_last:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} 7 > cap_1;
    Tmp_434 := cap_1;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    havoc Tmp_430;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.INT4[Tmp_430 + Tmp_434 * 4] >= 1;
    Tmp_436 := cap_1;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    havoc Tmp_433;
    assume {:nonnull} Tmp_433 != 0;
    assume Tmp_433 > 0;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto L129;

  L129:
    cap_1 := cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    assume false;
    return;

  anon61_Then:
    goto L127;

  L127:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} 7 > cap_1;
    assume {:nonnull} pDevExt_8 != 0;
    assume pDevExt_8 > 0;
    status_15 := 0;
    goto L56;

  anon53_Then:
    assume {:partition} cap_1 >= 7;
    status_15 := -1073741637;
    goto L56;

  anon60_Then:
    assume {:partition} 1 > Mem_T.INT4[Tmp_430 + Tmp_434 * 4];
    goto L129;

  anon52_Then:
    assume {:partition} cap_1 >= 7;
    goto L127;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_278: int;

  anon0:
    call {:si_unique_call 1049} vslice_dummy_var_278 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_8: int, actual_Properties: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetProperties"} SerialGetProperties(actual_Extension_8: int, actual_Properties: int)
{
  var {:pointer} Extension_8: int;
  var {:pointer} Properties: int;
  var vslice_dummy_var_279: int;

  anon0:
    call {:si_unique_call 1050} vslice_dummy_var_279 := __HAVOC_malloc(4);
    Extension_8 := actual_Extension_8;
    Properties := actual_Properties;
    call {:si_unique_call 1051} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    assume {:nonnull} Properties != 0;
    assume Properties > 0;
    return;
}



procedure {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_7: int, actual_Irp_7: int) returns (Tmp_445: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, Mem_T.Cancel__IRP, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialWrite"} SerialWrite(actual_DeviceObject_7: int, actual_Irp_7: int) returns (Tmp_445: int)
{
  var {:pointer} Tmp_446: int;
  var {:pointer} Tmp_447: int;
  var {:scalar} sdv_392: int;
  var {:pointer} sdv_394: int;
  var {:pointer} Tmp_448: int;
  var {:pointer} Extension_9: int;
  var {:pointer} Tmp_449: int;
  var {:pointer} Tmp_450: int;
  var {:pointer} Tmp_451: int;
  var {:scalar} status_16: int;
  var {:pointer} Tmp_452: int;
  var {:pointer} Tmp_453: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_280: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;

  anon0:
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 1052} Tmp_446 := __HAVOC_malloc(72);
    call {:si_unique_call 1053} Tmp_447 := __HAVOC_malloc(84);
    call {:si_unique_call 1054} Tmp_448 := __HAVOC_malloc(96);
    call {:si_unique_call 1055} Tmp_449 := __HAVOC_malloc(84);
    call {:si_unique_call 1056} Tmp_450 := __HAVOC_malloc(84);
    call {:si_unique_call 1057} Tmp_451 := __HAVOC_malloc(72);
    call {:si_unique_call 1058} Tmp_452 := __HAVOC_malloc(84);
    call {:si_unique_call 1059} Tmp_453 := __HAVOC_malloc(88);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc Extension_9;
    Tmp_453 := strConst__li2bpl155;
    call {:si_unique_call 1060} vslice_dummy_var_280 := SerialDbgPrintEx(2, Tmp_453);
    call {:si_unique_call 1061} status_16 := SerialIRPPrologue(Irp_7, Extension_9);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_16 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_16 != 259;
    Tmp_446 := strConst__li2bpl1;
    call {:si_unique_call 1062} vslice_dummy_var_281 := SerialDbgPrintEx(9, Tmp_446);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1063} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_7);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L68;

  L68:
    call {:si_unique_call 1064} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1065} SerialIRPEpilogue(Extension_9);
    goto L18;

  L18:
    Tmp_450 := strConst__li2bpl151;
    call {:si_unique_call 1066} vslice_dummy_var_282 := SerialDbgPrintEx(2, Tmp_450);
    Tmp_445 := status_16;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L68;

  anon22_Then:
    assume {:partition} status_16 == 259;
    goto L18;

  anon21_Then:
    assume {:partition} status_16 == 0;
    Tmp_448 := strConst__li2bpl0;
    call {:si_unique_call 1067} vslice_dummy_var_283 := SerialDbgPrintEx(9, Tmp_448);
    call {:si_unique_call 1068} sdv_392 := SerialCompleteIfError(DeviceObject_7, Irp_7);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_392 != 0;
    Tmp_449 := strConst__li2bpl152;
    call {:si_unique_call 1069} vslice_dummy_var_284 := SerialDbgPrintEx(2, Tmp_449);
    Tmp_445 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_392 == 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    call {:si_unique_call 1070} sdv_394 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} sdv_394 != 0;
    assume sdv_394 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} Extension_9 != 0;
    assume Extension_9 > 0;
    call {:si_unique_call 1071} status_16 := SerialStartOrQueue(Extension_9, Irp_7, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_9), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_9), li2bplFunctionConstant212);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    Tmp_452 := strConst__li2bpl153;
    call {:si_unique_call 1072} vslice_dummy_var_285 := SerialDbgPrintEx(2, Tmp_452);
    Tmp_445 := status_16;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_7))] := 0;
    Tmp_451 := strConst__li2bpl1;
    call {:si_unique_call 1073} vslice_dummy_var_286 := SerialDbgPrintEx(9, Tmp_451);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1074} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_7);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L71;

  L71:
    call {:si_unique_call 1075} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1076} SerialIRPEpilogue(Extension_9);
    Tmp_447 := strConst__li2bpl154;
    call {:si_unique_call 1077} vslice_dummy_var_287 := SerialDbgPrintEx(2, Tmp_447);
    Tmp_445 := 0;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L71;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_288: int;

  anon0:
    call {:si_unique_call 1078} vslice_dummy_var_288 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_8: int, actual_Irp_8: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelCurrentXoff"} SerialCancelCurrentXoff(actual_DeviceObject_8: int, actual_Irp_8: int)
{
  var {:pointer} Extension_10: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_2549: int;

  anon0:
    call {:si_unique_call 1079} vslice_dummy_var_289 := __HAVOC_malloc(4);
    DeviceObject_8 := actual_DeviceObject_8;
    Irp_8 := actual_Irp_8;
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    havoc Extension_10;
    assume {:nonnull} Extension_10 != 0;
    assume Extension_10 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    havoc vslice_dummy_var_2549;
    call {:si_unique_call 1080} SerialTryToCompleteCurrent#1(Extension_10, li2bplFunctionConstant213, vslice_dummy_var_2549, -1073741536, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_10), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_10), 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp_1: int, actual_QueueToProcess_1: int, actual_NewIrp_2: int, actual_CompleteCurrent_1: int, actual_Extension_11: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetNextWrite"} SerialGetNextWrite(actual_CurrentOpIrp_1: int, actual_QueueToProcess_1: int, actual_NewIrp_2: int, actual_CompleteCurrent_1: int, actual_Extension_11: int)
{
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:scalar} OldIrql_4: int;
  var {:pointer} sdv_402: int;
  var {:pointer} Tmp_459: int;
  var {:pointer} Irp_9: int;
  var {:pointer} Tmp_461: int;
  var {:scalar} OldIrql_5: int;
  var {:pointer} sdv_405: int;
  var {:scalar} OldIrql_6: int;
  var {:pointer} sdv_407: int;
  var {:scalar} CompleteCurrent_2: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} sdv_409: int;
  var {:pointer} sdv_410: int;
  var {:pointer} sdv_411: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:scalar} delta: int;
  var {:pointer} Tmp_462: int;
  var {:pointer} Xc_1: int;
  var {:scalar} s_p_e_c_i_a_l_8: int;
  var {:pointer} Tmp_463: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:pointer} QueueToProcess_1: int;
  var {:pointer} NewIrp_2: int;
  var {:scalar} CompleteCurrent_1: int;
  var {:pointer} Extension_11: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;

  anon0:
    call {:si_unique_call 1081} vslice_dummy_var_290 := __HAVOC_malloc(4);
    call {:si_unique_call 1082} delta := __HAVOC_malloc(20);
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    QueueToProcess_1 := actual_QueueToProcess_1;
    NewIrp_2 := actual_NewIrp_2;
    CompleteCurrent_1 := actual_CompleteCurrent_1;
    Extension_11 := actual_Extension_11;
    call {:si_unique_call 1083} Tmp_459 := __HAVOC_malloc(84);
    call {:si_unique_call 1084} Tmp_462 := __HAVOC_malloc(104);
    CompleteCurrent_2 := CompleteCurrent_1;
    Tmp_462 := strConst__li2bpl157;
    call {:si_unique_call 1085} vslice_dummy_var_293 := SerialDbgPrintEx(2, Tmp_462);
    goto L8;

  L8:
    call {:si_unique_call 1086} s_p_e_c_i_a_l_5, sdv_402, Irp_9, Tmp_461, OldIrql_5, sdv_405, OldIrql_6, sdv_407, s_p_e_c_i_a_l_6, sdv_409, sdv_410, sdv_411, s_p_e_c_i_a_l_7, Xc_1, s_p_e_c_i_a_l_8, Tmp_463, CompleteCurrent_1, vslice_dummy_var_292, vslice_dummy_var_295, vslice_dummy_var_296 := SerialGetNextWrite_loop_L8(s_p_e_c_i_a_l_5, sdv_402, Irp_9, Tmp_461, OldIrql_5, sdv_405, OldIrql_6, sdv_407, CompleteCurrent_2, s_p_e_c_i_a_l_6, sdv_409, sdv_410, sdv_411, s_p_e_c_i_a_l_7, delta, Xc_1, s_p_e_c_i_a_l_8, Tmp_463, CurrentOpIrp_1, QueueToProcess_1, NewIrp_2, CompleteCurrent_1, Extension_11, vslice_dummy_var_292, vslice_dummy_var_295, vslice_dummy_var_296);
    goto L8_last;

  L8_last:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    call {:si_unique_call 1107} sdv_407 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_1]);
    assume {:nonnull} sdv_407 != 0;
    assume sdv_407 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_407)] == 4;
    call {:si_unique_call 1087} Tmp_461 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    Mem_T.INT4[Tmp_461] := OldIrql_6;
    call {:si_unique_call 1088} IoAcquireCancelSpinLock(Tmp_461);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    OldIrql_6 := Mem_T.INT4[Tmp_461];
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    call {:si_unique_call 1089} sdv_410 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_1]);
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} sdv_410 != 0;
    assume sdv_410 > 0;
    call {:si_unique_call 1090} IoReleaseCancelSpinLock(OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 1091} SerialGetNextIrp(CurrentOpIrp_1, QueueToProcess_1, NewIrp_2, CompleteCurrent_1, Extension_11);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] == 0;
    call {:si_unique_call 1092} Tmp_461 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    Mem_T.INT4[Tmp_461] := OldIrql_4;
    call {:si_unique_call 1093} IoAcquireCancelSpinLock(Tmp_461);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    OldIrql_4 := Mem_T.INT4[Tmp_461];
    call {:si_unique_call 1094} vslice_dummy_var_291 := KeSynchronizeExecution(0, li2bplFunctionConstant217, 0);
    call {:si_unique_call 1095} IoReleaseCancelSpinLock(OldIrql_4);
    goto L39;

  L39:
    Tmp_459 := strConst__li2bpl156;
    call {:si_unique_call 1096} vslice_dummy_var_294 := SerialDbgPrintEx(2, Tmp_459);
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_2] != 0;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    call {:si_unique_call 1097} sdv_411 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[NewIrp_2]);
    assume {:nonnull} sdv_411 != 0;
    assume sdv_411 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_411)] != 9;
    goto L39;

  anon19_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_411)] == 9;
    assume {:nonnull} NewIrp_2 != 0;
    assume NewIrp_2 > 0;
    Tmp_463 := Mem_T.P_IRP[NewIrp_2];
    assume {:nonnull} Tmp_463 != 0;
    assume Tmp_463 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_463))] := 0;
    CompleteCurrent_1 := CompleteCurrent_2;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_407)] != 4;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    call {:si_unique_call 1098} sdv_409 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_1]);
    assume {:nonnull} sdv_409 != 0;
    assume sdv_409 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_409)] == 14;
    call {:si_unique_call 1099} Tmp_461 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    Mem_T.INT4[Tmp_461] := OldIrql_5;
    call {:si_unique_call 1100} IoAcquireCancelSpinLock(Tmp_461);
    assume {:nonnull} Tmp_461 != 0;
    assume Tmp_461 > 0;
    OldIrql_5 := Mem_T.INT4[Tmp_461];
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    Irp_9 := Mem_T.P_IRP[CurrentOpIrp_1];
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    havoc Xc_1;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 1101} IoReleaseCancelSpinLock(OldIrql_5);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] == 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_9)] != 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9))] := -1073741536;
    goto L64;

  anon21_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_9)] == 0;
    call {:si_unique_call 1102} vslice_dummy_var_292 := sdv_IoSetCancelRoutine(Irp_9, li2bplFunctionConstant218);
    s_p_e_c_i_a_l_6 := 2;
    call {:si_unique_call 1103} sdv_405 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_405 != 0;
    assume sdv_405 > 0;
    s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_405)));
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_5], s_p_e_c_i_a_l_6);
    CompleteCurrent_1 := 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_11)] := Irp_9;
    call {:si_unique_call 1104} vslice_dummy_var_295 := KeSynchronizeExecution(0, li2bplFunctionConstant219, 0);
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Xc_1 != 0;
    assume Xc_1 > 0;
    assume {:nonnull} delta != 0;
    assume delta > 0;
    assume {:nonnull} Extension_11 != 0;
    assume Extension_11 > 0;
    call {:si_unique_call 1105} vslice_dummy_var_296 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_11), delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_11), Extension_11);
    s_p_e_c_i_a_l_8 := 4;
    call {:si_unique_call 1106} sdv_402 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} sdv_402 != 0;
    assume sdv_402 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_402)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_7], s_p_e_c_i_a_l_8);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_409)] != 14;
    goto L26;
}



procedure {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_9: int, actual_Irp_10: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelCurrentWrite"} SerialCancelCurrentWrite(actual_DeviceObject_9: int, actual_Irp_10: int)
{
  var {:pointer} Extension_13: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_10: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_2550: int;

  anon0:
    call {:si_unique_call 1108} vslice_dummy_var_297 := __HAVOC_malloc(4);
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_10 := actual_Irp_10;
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc Extension_13;
    assume {:nonnull} Extension_13 != 0;
    assume Extension_13 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc vslice_dummy_var_2550;
    call {:si_unique_call 1109} SerialTryToCompleteCurrent#1(Extension_13, li2bplFunctionConstant221, vslice_dummy_var_2550, -1073741536, CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_13), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_13), 0, WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_13), li2bplFunctionConstant212, li2bplFunctionConstant216, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_298: int;

  anon0:
    call {:si_unique_call 1110} vslice_dummy_var_298 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_1: int, actual_FieldOffset: int) returns (Tmp_476: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address_1: int, actual_FieldOffset: int) returns (Tmp_476: int)
{
  var {:pointer} record: int;
  var {:pointer} Address_1: int;

  anon0:
    Address_1 := actual_Address_1;
    call {:si_unique_call 1111} SLIC_sdv_containing_record_entry(strConst__li2bpl160);
    record := Address_1;
    Tmp_476 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_2551: int;

  anon0:
    call {:si_unique_call 1112} vslice_dummy_var_299 := __HAVOC_malloc(4);
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    havoc vslice_dummy_var_2551;
    Mem_T.INT4[p] := vslice_dummy_var_2551;
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_300: int;

  anon0:
    call {:si_unique_call 1113} vslice_dummy_var_300 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1_1: int, actual_Dpc: int) returns (Tmp_482: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_482 == 1 || Tmp_482 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1_1: int, actual_Dpc: int) returns (Tmp_482: int)
{
  var {:scalar} DueTime_1: int;
  var {:pointer} SD1_1: int;

  anon0:
    call {:si_unique_call 1114} DueTime_1 := __HAVOC_malloc(20);
    SD1_1 := actual_SD1_1;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_482 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_482 := 0;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_484: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_484: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_484 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_484 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_484 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_1: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_301: int;

  anon0:
    call {:si_unique_call 1115} vslice_dummy_var_301 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_1 != 0;
    assume Dpc_1 > 0;
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_302: int;

  anon0:
    call {:si_unique_call 1116} vslice_dummy_var_302 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_490: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_490: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_490 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_303: int;

  anon0:
    call {:si_unique_call 1117} vslice_dummy_var_303 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_304: int;

  anon0:
    call {:si_unique_call 1118} vslice_dummy_var_304 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    r_1 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_3)))];
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_305: int;

  anon0:
    call {:si_unique_call 1119} vslice_dummy_var_305 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_498: int);
  free ensures {:va_keep} Tmp_498 == 1 || Tmp_498 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_498: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_498 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_498 := 0;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_306: int;

  anon0:
    call {:si_unique_call 1120} vslice_dummy_var_306 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(pirp_5))] := -1073741637;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_2: int) returns (Tmp_502: int);
  free ensures {:va_keep} Tmp_502 == 1 || Tmp_502 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_2: int) returns (Tmp_502: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_502 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_502 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_504: int);
  free ensures {:va_keep} Tmp_504 == 0 || Tmp_504 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_504: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_504 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_504 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION, yogi_error;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;

  anon0:
    call {:si_unique_call 1121} vslice_dummy_var_307 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1122} sdv_stub_driver_init();
    call {:si_unique_call 1123} vslice_dummy_var_308 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_508: int);
  free ensures {:va_keep} Tmp_508 == 0 || Tmp_508 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName: int) returns (Tmp_508: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_508 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_508 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_510: int);
  free ensures {:va_keep} Tmp_510 == 0 || Tmp_510 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_510: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_510 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_510 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_512: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_512: int)
{
  var {:pointer} sdv_437: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1124} sdv_437 := __HAVOC_malloc(1);
    Tmp_512 := sdv_437;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_512 := 0;
    goto L1;
}



procedure {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_514: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_ExAllocatePoolWithQuotaTag"} {:osmodel} sdv_ExAllocatePoolWithQuotaTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_514: int)
{
  var {:pointer} sdv_439: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    NumberOfBytes := actual_NumberOfBytes;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1125} sdv_439 := __HAVOC_malloc(NumberOfBytes);
    Tmp_514 := sdv_439;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_514 := 0;
    goto L1;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_10: int, actual_Irp_11: int) returns (Tmp_516: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_516 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_10: int, actual_Irp_11: int) returns (Tmp_516: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_17: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_2552: int;
  var vslice_dummy_var_2553: int;
  var vslice_dummy_var_2554: int;
  var vslice_dummy_var_2555: int;

  anon0:
    call {:si_unique_call 1126} completion := __HAVOC_malloc(4);
    Irp_11 := actual_Irp_11;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_17 := 259;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 259;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto L29;

  L29:
    Tmp_516 := status_17;
    call {:si_unique_call 1127} SLIC_PoCallDriver_exit(0, Irp_11);
    return;

  anon48_Then:
    havoc vslice_dummy_var_2552;
    call {:si_unique_call 1128} vslice_dummy_var_309 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_11, vslice_dummy_var_2552, completion);
    goto L29;

  anon47_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L23;

  anon46_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L19;

  anon61_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := -1073741823;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_2553;
    call {:si_unique_call 1129} vslice_dummy_var_312 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_11, vslice_dummy_var_2553, completion);
    goto L29;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L62;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L58;

  anon62_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := -1073741536;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    havoc vslice_dummy_var_2554;
    call {:si_unique_call 1130} vslice_dummy_var_310 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_11, vslice_dummy_var_2554, completion);
    goto L29;

  anon52_Then:
    goto L29;

  anon51_Then:
    goto L29;

  anon50_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L36;

  anon49_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L32;

  anon45_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    havoc vslice_dummy_var_2555;
    call {:si_unique_call 1131} vslice_dummy_var_311 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_11, vslice_dummy_var_2555, completion);
    goto L29;

  anon56_Then:
    goto L29;

  anon55_Then:
    goto L29;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L49;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L45;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_11: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_518: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_518 == 0 || Tmp_518 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_11: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_518: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 1132} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_518 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 1133} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 1134} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 1135} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_12: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_12: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_2: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp_1: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 1136} State := __HAVOC_malloc(8);
    call {:si_unique_call 1137} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 1138} Tmp_1 := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    SD1_2 := Tmp_1;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_2556: int;

  anon0:
    call {:si_unique_call 1139} vslice_dummy_var_313 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    havoc vslice_dummy_var_2556;
    Mem_T.INT4[p_1] := vslice_dummy_var_2556;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_523: int);
  free ensures {:va_keep} Tmp_523 == 1 || Tmp_523 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_523: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_523 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_523 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_314: int;

  anon0:
    call {:si_unique_call 1140} vslice_dummy_var_314 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_1: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_315: int;

  anon0:
    call {:si_unique_call 1141} vslice_dummy_var_315 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_1 := actual_Context_1;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 1142} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "ExAcquireFastMutex"} {:osmodel} ExAcquireFastMutex(actual_FastMutex: int)
{
  var vslice_dummy_var_316: int;

  anon0:
    call {:si_unique_call 1143} vslice_dummy_var_316 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_531: int);
  free ensures {:va_keep} Tmp_531 == 1 || Tmp_531 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_531: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_531 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_531 := 0;
    goto L1;
}



procedure {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_533: int);
  free ensures {:va_keep} Tmp_533 == 0 || Tmp_533 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "RtlDeleteRegistryValue"} {:osmodel} RtlDeleteRegistryValue(actual_RelativeTo: int, actual_Path: int, actual_ValueName: int) returns (Tmp_533: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_533 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_533 := -1073741823;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_12: int)
{
  var vslice_dummy_var_317: int;

  anon0:
    call {:si_unique_call 1144} vslice_dummy_var_317 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_537: int);
  free ensures {:va_keep} Tmp_537 == 258 || Tmp_537 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_537: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_537 := 258;
    goto L1;

  L1:
    call {:si_unique_call 1145} SLIC_KeWaitForSingleObject_exit(0, Tmp_537);
    return;

  anon6_Then:
    Tmp_537 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_537 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_13: int)
{
  var vslice_dummy_var_318: int;

  anon0:
    call {:si_unique_call 1146} vslice_dummy_var_318 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_541: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait: int) returns (Tmp_541: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_541 := OldState;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_545: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_545: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    Tmp_545 := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_8)))];
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_319: int;

  anon0:
    call {:si_unique_call 1147} vslice_dummy_var_319 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_14: int, actual_MinorFunction: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_2: int, actual_Irp_13: int) returns (Tmp_549: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_549 == -1073741584 || Tmp_549 == 259 || Tmp_549 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_14: int, actual_MinorFunction: int, actual_SD1_3: int, actual_CompletionFunction: int, actual_Context_2: int, actual_Irp_13: int) returns (Tmp_549: int)
{
  var {:scalar} PowerState_1: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} SD1_3: int;
  var {:scalar} CompletionFunction: int;
  var vslice_dummy_var_320: int;

  anon0:
    call {:si_unique_call 1148} PowerState_1 := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    SD1_3 := actual_SD1_3;
    CompletionFunction := actual_CompletionFunction;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    assume {:nonnull} SD1_3 != 0;
    assume SD1_3 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741584;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_549 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := 259;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    call {:si_unique_call 1149} vslice_dummy_var_320 := sdv_RunPowerCompletionRoutines(0, MinorFunction, PowerState_1, 0, 0, CompletionFunction);
    Tmp_549 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_power_irp))] := -1073741670;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_549 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_551: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_7, SLAM_guard_S_0, io_complete_request_called, yogi_error, Mem_T.Cancel__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_551: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_553: int;
  var {:scalar} Tmp_554: int;
  var boogieTmp: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var SerialGlobals__Loc: int;
  var SerialPhysicalZero__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var driverDefaults__Loc: int;
  var SerialPhysicalZero_1__Loc: int;
  var SerialPortNameGuid__Loc: int;
  var SerailPortPerfGuid__Loc: int;
  var SerialPortPropertiesGuid__Loc: int;
  var SerialPortHWGuid__Loc: int;
  var SerialPortCommGuid__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var SerialPhysicalZero_2__Loc: int;
  var SerialPhysicalZero_3__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var vslice_dummy_var_581: int;
  var vslice_dummy_var_582: int;
  var vslice_dummy_var_583: int;
  var vslice_dummy_var_584: int;
  var vslice_dummy_var_585: int;
  var vslice_dummy_var_586: int;
  var vslice_dummy_var_587: int;
  var vslice_dummy_var_588: int;
  var vslice_dummy_var_589: int;
  var vslice_dummy_var_590: int;
  var vslice_dummy_var_591: int;
  var vslice_dummy_var_592: int;
  var vslice_dummy_var_593: int;
  var vslice_dummy_var_594: int;
  var vslice_dummy_var_595: int;
  var vslice_dummy_var_596: int;
  var vslice_dummy_var_597: int;
  var vslice_dummy_var_598: int;
  var vslice_dummy_var_599: int;
  var vslice_dummy_var_600: int;
  var vslice_dummy_var_601: int;
  var vslice_dummy_var_602: int;
  var vslice_dummy_var_603: int;
  var vslice_dummy_var_604: int;
  var vslice_dummy_var_605: int;
  var vslice_dummy_var_606: int;
  var vslice_dummy_var_607: int;
  var vslice_dummy_var_608: int;
  var vslice_dummy_var_609: int;
  var vslice_dummy_var_610: int;
  var vslice_dummy_var_611: int;
  var vslice_dummy_var_612: int;
  var vslice_dummy_var_613: int;
  var vslice_dummy_var_614: int;
  var vslice_dummy_var_615: int;
  var vslice_dummy_var_616: int;
  var vslice_dummy_var_617: int;
  var vslice_dummy_var_618: int;
  var vslice_dummy_var_619: int;
  var vslice_dummy_var_620: int;
  var vslice_dummy_var_621: int;
  var vslice_dummy_var_622: int;
  var vslice_dummy_var_623: int;
  var vslice_dummy_var_624: int;
  var vslice_dummy_var_625: int;
  var vslice_dummy_var_626: int;
  var vslice_dummy_var_627: int;
  var vslice_dummy_var_628: int;
  var vslice_dummy_var_629: int;
  var vslice_dummy_var_630: int;
  var vslice_dummy_var_631: int;
  var vslice_dummy_var_632: int;
  var vslice_dummy_var_633: int;
  var vslice_dummy_var_634: int;
  var vslice_dummy_var_635: int;
  var vslice_dummy_var_636: int;
  var vslice_dummy_var_637: int;
  var vslice_dummy_var_638: int;
  var vslice_dummy_var_639: int;
  var vslice_dummy_var_640: int;
  var vslice_dummy_var_641: int;
  var vslice_dummy_var_642: int;
  var vslice_dummy_var_643: int;
  var vslice_dummy_var_644: int;
  var vslice_dummy_var_645: int;
  var vslice_dummy_var_646: int;
  var vslice_dummy_var_647: int;
  var vslice_dummy_var_648: int;
  var vslice_dummy_var_649: int;
  var vslice_dummy_var_650: int;
  var vslice_dummy_var_651: int;
  var vslice_dummy_var_652: int;
  var vslice_dummy_var_653: int;
  var vslice_dummy_var_654: int;
  var vslice_dummy_var_655: int;
  var vslice_dummy_var_656: int;
  var vslice_dummy_var_657: int;
  var vslice_dummy_var_658: int;
  var vslice_dummy_var_659: int;
  var vslice_dummy_var_660: int;
  var vslice_dummy_var_661: int;
  var vslice_dummy_var_662: int;
  var vslice_dummy_var_663: int;
  var vslice_dummy_var_664: int;
  var vslice_dummy_var_665: int;
  var vslice_dummy_var_666: int;
  var vslice_dummy_var_667: int;
  var vslice_dummy_var_668: int;
  var vslice_dummy_var_669: int;
  var vslice_dummy_var_670: int;
  var vslice_dummy_var_671: int;
  var vslice_dummy_var_672: int;
  var vslice_dummy_var_673: int;
  var vslice_dummy_var_674: int;
  var vslice_dummy_var_675: int;
  var vslice_dummy_var_676: int;
  var vslice_dummy_var_677: int;
  var vslice_dummy_var_678: int;
  var vslice_dummy_var_679: int;
  var vslice_dummy_var_680: int;
  var vslice_dummy_var_681: int;
  var vslice_dummy_var_682: int;
  var vslice_dummy_var_683: int;
  var vslice_dummy_var_684: int;
  var vslice_dummy_var_685: int;
  var vslice_dummy_var_2557: int;
  var vslice_dummy_var_2558: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 1150} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1151} SerialGlobals__Loc := __HAVOC_malloc_or_null(28);
    assume SerialGlobals__Loc == SerialGlobals;
    assume SerialGlobals != 0;
    call {:si_unique_call 1152} SerialPhysicalZero__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero__Loc == SerialPhysicalZero;
    assume SerialPhysicalZero != 0;
    call {:si_unique_call 1153} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 1154} driverDefaults__Loc := __HAVOC_malloc_or_null(88);
    assume driverDefaults__Loc == driverDefaults;
    assume driverDefaults != 0;
    call {:si_unique_call 1155} SerialPhysicalZero_1__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_1__Loc == SerialPhysicalZero_1;
    assume SerialPhysicalZero_1 != 0;
    call {:si_unique_call 1156} SerialPortNameGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortNameGuid__Loc == SerialPortNameGuid;
    assume SerialPortNameGuid != 0;
    call {:si_unique_call 1157} SerailPortPerfGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerailPortPerfGuid__Loc == SerailPortPerfGuid;
    assume SerailPortPerfGuid != 0;
    call {:si_unique_call 1158} SerialPortPropertiesGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortPropertiesGuid__Loc == SerialPortPropertiesGuid;
    assume SerialPortPropertiesGuid != 0;
    call {:si_unique_call 1159} SerialPortHWGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortHWGuid__Loc == SerialPortHWGuid;
    assume SerialPortHWGuid != 0;
    call {:si_unique_call 1160} SerialPortCommGuid__Loc := __HAVOC_malloc_or_null(16);
    assume SerialPortCommGuid__Loc == SerialPortCommGuid;
    assume SerialPortCommGuid != 0;
    call {:si_unique_call 1161} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1162} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1163} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1164} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1165} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1166} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1167} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1168} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1169} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1170} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1171} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1172} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1173} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1174} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1175} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1176} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1177} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1178} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1179} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1180} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1181} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1182} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1183} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1184} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1185} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1186} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1187} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1188} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1189} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(320);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1190} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 1191} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1192} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1193} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1194} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1195} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(248);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1196} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(124);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1197} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(496);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1198} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 1199} SerialPhysicalZero_2__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_2__Loc == SerialPhysicalZero_2;
    assume SerialPhysicalZero_2 != 0;
    call {:si_unique_call 1200} SerialPhysicalZero_3__Loc := __HAVOC_malloc_or_null(20);
    assume SerialPhysicalZero_3__Loc == SerialPhysicalZero_3;
    assume SerialPhysicalZero_3 != 0;
    call {:si_unique_call 1201} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(248);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 1202} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1203} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1204} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1205} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1206} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1207} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1208} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1209} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1210} boogieTmp := __HAVOC_malloc_or_null(248);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1211} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdComPortInUse == boogieTmp;
    call {:si_unique_call 1212} vslice_dummy_var_581 := __HAVOC_malloc(4);
    call {:si_unique_call 1213} vslice_dummy_var_582 := __HAVOC_malloc(4);
    call {:si_unique_call 1214} vslice_dummy_var_583 := __HAVOC_malloc(4);
    call {:si_unique_call 1215} vslice_dummy_var_584 := __HAVOC_malloc(4);
    call {:si_unique_call 1216} vslice_dummy_var_585 := __HAVOC_malloc(4);
    call {:si_unique_call 1217} vslice_dummy_var_586 := __HAVOC_malloc(4);
    call {:si_unique_call 1218} vslice_dummy_var_587 := __HAVOC_malloc(4);
    call {:si_unique_call 1219} vslice_dummy_var_588 := __HAVOC_malloc(4);
    call {:si_unique_call 1220} vslice_dummy_var_589 := __HAVOC_malloc(4);
    call {:si_unique_call 1221} vslice_dummy_var_590 := __HAVOC_malloc(4);
    call {:si_unique_call 1222} vslice_dummy_var_591 := __HAVOC_malloc(4);
    call {:si_unique_call 1223} vslice_dummy_var_592 := __HAVOC_malloc(4);
    call {:si_unique_call 1224} vslice_dummy_var_593 := __HAVOC_malloc(4);
    call {:si_unique_call 1225} vslice_dummy_var_594 := __HAVOC_malloc(4);
    call {:si_unique_call 1226} vslice_dummy_var_595 := __HAVOC_malloc(4);
    call {:si_unique_call 1227} vslice_dummy_var_596 := __HAVOC_malloc(4);
    call {:si_unique_call 1228} vslice_dummy_var_2557 := __HAVOC_malloc(60);
    call {:si_unique_call 1229} vslice_dummy_var_597 := __HAVOC_malloc(4);
    call {:si_unique_call 1230} vslice_dummy_var_598 := __HAVOC_malloc(4);
    call {:si_unique_call 1231} vslice_dummy_var_599 := __HAVOC_malloc(4);
    call {:si_unique_call 1232} vslice_dummy_var_600 := __HAVOC_malloc(4);
    call {:si_unique_call 1233} vslice_dummy_var_601 := __HAVOC_malloc(4);
    call {:si_unique_call 1234} vslice_dummy_var_602 := __HAVOC_malloc(4);
    call {:si_unique_call 1235} vslice_dummy_var_603 := __HAVOC_malloc(4);
    call {:si_unique_call 1236} vslice_dummy_var_604 := __HAVOC_malloc(4);
    call {:si_unique_call 1237} vslice_dummy_var_605 := __HAVOC_malloc(4);
    call {:si_unique_call 1238} vslice_dummy_var_606 := __HAVOC_malloc(4);
    call {:si_unique_call 1239} vslice_dummy_var_607 := __HAVOC_malloc(4);
    call {:si_unique_call 1240} vslice_dummy_var_608 := __HAVOC_malloc(4);
    call {:si_unique_call 1241} vslice_dummy_var_609 := __HAVOC_malloc(4);
    call {:si_unique_call 1242} vslice_dummy_var_610 := __HAVOC_malloc(4);
    call {:si_unique_call 1243} vslice_dummy_var_611 := __HAVOC_malloc(4);
    call {:si_unique_call 1244} vslice_dummy_var_612 := __HAVOC_malloc(4);
    call {:si_unique_call 1245} vslice_dummy_var_613 := __HAVOC_malloc(4);
    call {:si_unique_call 1246} vslice_dummy_var_614 := __HAVOC_malloc(4);
    call {:si_unique_call 1247} vslice_dummy_var_615 := __HAVOC_malloc(4);
    call {:si_unique_call 1248} vslice_dummy_var_616 := __HAVOC_malloc(4);
    call {:si_unique_call 1249} vslice_dummy_var_617 := __HAVOC_malloc(4);
    call {:si_unique_call 1250} vslice_dummy_var_618 := __HAVOC_malloc(4);
    call {:si_unique_call 1251} vslice_dummy_var_619 := __HAVOC_malloc(4);
    call {:si_unique_call 1252} vslice_dummy_var_620 := __HAVOC_malloc(4);
    call {:si_unique_call 1253} vslice_dummy_var_621 := __HAVOC_malloc(4);
    call {:si_unique_call 1254} vslice_dummy_var_2558 := __HAVOC_malloc(60);
    call {:si_unique_call 1255} vslice_dummy_var_622 := __HAVOC_malloc(4);
    call {:si_unique_call 1256} vslice_dummy_var_623 := __HAVOC_malloc(4);
    call {:si_unique_call 1257} vslice_dummy_var_624 := __HAVOC_malloc(4);
    call {:si_unique_call 1258} vslice_dummy_var_625 := __HAVOC_malloc(4);
    call {:si_unique_call 1259} vslice_dummy_var_626 := __HAVOC_malloc(4);
    call {:si_unique_call 1260} vslice_dummy_var_627 := __HAVOC_malloc(4);
    call {:si_unique_call 1261} vslice_dummy_var_628 := __HAVOC_malloc(4);
    call {:si_unique_call 1262} vslice_dummy_var_629 := __HAVOC_malloc(4);
    call {:si_unique_call 1263} vslice_dummy_var_630 := __HAVOC_malloc(4);
    call {:si_unique_call 1264} vslice_dummy_var_631 := __HAVOC_malloc(4);
    call {:si_unique_call 1265} vslice_dummy_var_632 := __HAVOC_malloc(4);
    call {:si_unique_call 1266} vslice_dummy_var_633 := __HAVOC_malloc(4);
    call {:si_unique_call 1267} vslice_dummy_var_634 := __HAVOC_malloc(4);
    call {:si_unique_call 1268} vslice_dummy_var_635 := __HAVOC_malloc(4);
    call {:si_unique_call 1269} vslice_dummy_var_636 := __HAVOC_malloc(4);
    call {:si_unique_call 1270} vslice_dummy_var_637 := __HAVOC_malloc(4);
    call {:si_unique_call 1271} vslice_dummy_var_638 := __HAVOC_malloc(4);
    call {:si_unique_call 1272} vslice_dummy_var_639 := __HAVOC_malloc(4);
    call {:si_unique_call 1273} vslice_dummy_var_640 := __HAVOC_malloc(4);
    call {:si_unique_call 1274} vslice_dummy_var_641 := __HAVOC_malloc(4);
    call {:si_unique_call 1275} vslice_dummy_var_642 := __HAVOC_malloc(4);
    call {:si_unique_call 1276} vslice_dummy_var_643 := __HAVOC_malloc(4);
    call {:si_unique_call 1277} vslice_dummy_var_644 := __HAVOC_malloc(4);
    call {:si_unique_call 1278} vslice_dummy_var_645 := __HAVOC_malloc(4);
    call {:si_unique_call 1279} vslice_dummy_var_646 := __HAVOC_malloc(4);
    call {:si_unique_call 1280} vslice_dummy_var_647 := __HAVOC_malloc(4);
    call {:si_unique_call 1281} vslice_dummy_var_648 := __HAVOC_malloc(4);
    call {:si_unique_call 1282} vslice_dummy_var_649 := __HAVOC_malloc(4);
    call {:si_unique_call 1283} vslice_dummy_var_650 := __HAVOC_malloc(4);
    call {:si_unique_call 1284} vslice_dummy_var_651 := __HAVOC_malloc(4);
    call {:si_unique_call 1285} vslice_dummy_var_652 := __HAVOC_malloc(4);
    call {:si_unique_call 1286} vslice_dummy_var_653 := __HAVOC_malloc(4);
    call {:si_unique_call 1287} vslice_dummy_var_654 := __HAVOC_malloc(4);
    call {:si_unique_call 1288} vslice_dummy_var_655 := __HAVOC_malloc(4);
    call {:si_unique_call 1289} vslice_dummy_var_656 := __HAVOC_malloc(4);
    call {:si_unique_call 1290} vslice_dummy_var_657 := __HAVOC_malloc(4);
    call {:si_unique_call 1291} vslice_dummy_var_658 := __HAVOC_malloc(4);
    call {:si_unique_call 1292} vslice_dummy_var_659 := __HAVOC_malloc(4);
    call {:si_unique_call 1293} vslice_dummy_var_660 := __HAVOC_malloc(4);
    call {:si_unique_call 1294} vslice_dummy_var_661 := __HAVOC_malloc(4);
    call {:si_unique_call 1295} vslice_dummy_var_662 := __HAVOC_malloc(4);
    call {:si_unique_call 1296} vslice_dummy_var_663 := __HAVOC_malloc(4);
    call {:si_unique_call 1297} vslice_dummy_var_664 := __HAVOC_malloc(4);
    call {:si_unique_call 1298} vslice_dummy_var_665 := __HAVOC_malloc(4);
    call {:si_unique_call 1299} vslice_dummy_var_666 := __HAVOC_malloc(4);
    call {:si_unique_call 1300} vslice_dummy_var_667 := __HAVOC_malloc(4);
    call {:si_unique_call 1301} vslice_dummy_var_668 := __HAVOC_malloc(4);
    call {:si_unique_call 1302} vslice_dummy_var_669 := __HAVOC_malloc(4);
    call {:si_unique_call 1303} vslice_dummy_var_670 := __HAVOC_malloc(4);
    call {:si_unique_call 1304} vslice_dummy_var_671 := __HAVOC_malloc(4);
    call {:si_unique_call 1305} vslice_dummy_var_672 := __HAVOC_malloc(4);
    call {:si_unique_call 1306} vslice_dummy_var_673 := __HAVOC_malloc(4);
    call {:si_unique_call 1307} vslice_dummy_var_674 := __HAVOC_malloc(4);
    call {:si_unique_call 1308} vslice_dummy_var_675 := __HAVOC_malloc(4);
    call {:si_unique_call 1309} vslice_dummy_var_676 := __HAVOC_malloc(4);
    call {:si_unique_call 1310} vslice_dummy_var_677 := __HAVOC_malloc(4);
    call {:si_unique_call 1311} vslice_dummy_var_678 := __HAVOC_malloc(4);
    call {:si_unique_call 1312} vslice_dummy_var_679 := __HAVOC_malloc(4);
    call {:si_unique_call 1313} vslice_dummy_var_680 := __HAVOC_malloc(4);
    call {:si_unique_call 1314} vslice_dummy_var_681 := __HAVOC_malloc(4);
    call {:si_unique_call 1315} vslice_dummy_var_682 := __HAVOC_malloc(4);
    call {:si_unique_call 1316} vslice_dummy_var_683 := __HAVOC_malloc(4);
    call {:si_unique_call 1317} vslice_dummy_var_684 := __HAVOC_malloc(4);
    call {:si_unique_call 1318} vslice_dummy_var_685 := __HAVOC_malloc(4);
    assume {:mainInitDone} true;
    call {:si_unique_call 1319} corralExtraInit();
    call {:si_unique_call 1320} corralExplainErrorInit();
    call {:si_unique_call 1321} _sdv_init23();
    call {:si_unique_call 1322} _sdv_init18();
    call {:si_unique_call 1323} _sdv_init19();
    call {:si_unique_call 1324} _sdv_init17();
    call {:si_unique_call 1325} _sdv_init1();
    call {:si_unique_call 1326} _sdv_init4();
    call {:si_unique_call 1327} _sdv_init5();
    call {:si_unique_call 1328} _sdv_init3();
    call {:si_unique_call 1329} _sdv_init16();
    call {:si_unique_call 1330} _sdv_init14();
    call {:si_unique_call 1331} _sdv_init21();
    call {:si_unique_call 1332} _sdv_init6();
    call {:si_unique_call 1333} _sdv_init15();
    call {:si_unique_call 1334} _sdv_init10();
    call {:si_unique_call 1335} _sdv_init11();
    call {:si_unique_call 1336} _sdv_init9();
    call {:si_unique_call 1337} _sdv_init12();
    call {:si_unique_call 1338} _sdv_init13();
    call {:si_unique_call 1339} _sdv_init7();
    call {:si_unique_call 1340} _sdv_init8();
    call {:si_unique_call 1341} _sdv_init2();
    call {:si_unique_call 1342} _sdv_init20();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_554 := 0;
    goto L46;

  L46:
    assume Tmp_554 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_553 := 0;
    goto L50;

  L50:
    assume Tmp_553 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_irp)))] := sdv_harnessStackLocation;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(sdv_other_irp)))] := sdv_other_harnessStackLocation;
    call {:si_unique_call 1343} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L44;

  L44:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L44;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_553 := 1;
    goto L50;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_554 := 1;
    goto L46;
}



procedure {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_555: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoGetConfigurationInformation"} {:osmodel} IoGetConfigurationInformation() returns (Tmp_555: int)
{
  var {:pointer} sdv_454: int;

  anon0:
    call {:si_unique_call 1344} sdv_454 := __HAVOC_malloc(1);
    Tmp_555 := sdv_454;
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc, Mem_T.MajorFunction__IO_STACK_LOCATION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_321: int;

  anon0:
    call {:si_unique_call 1345} vslice_dummy_var_321 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_harnessStackLocation)];
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_other_harnessStackLocation)];
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_14: int) returns (Tmp_559: int);
  free ensures {:va_keep} Tmp_559 == 0 || Tmp_559 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_14: int) returns (Tmp_559: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_559 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_559 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_561: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_561: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_561 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines(actual_DeviceObject_15: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_3: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_563: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_563 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RunPowerCompletionRoutines"} {:osmodel} sdv_RunPowerCompletionRoutines(actual_DeviceObject_15: int, actual_MinorFunction_1: int, actual_structPtr888PowerState: int, actual_Context_3: int, actual_IoStatus: int, actual_CompletionFunction_1: int) returns (Tmp_563: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} CompletionFunction_2: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 1346} PowerState := __HAVOC_malloc(8);
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    CompletionFunction_2 := 0;
    Tmp_563 := CompletionFunction_2;
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_322: int;

  anon0:
    call {:si_unique_call 1347} vslice_dummy_var_322 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_323: int;

  anon0:
    call {:si_unique_call 1348} vslice_dummy_var_323 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_324: int;

  anon0:
    call {:si_unique_call 1349} vslice_dummy_var_324 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_325: int;

  anon0:
    call {:si_unique_call 1350} vslice_dummy_var_325 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_326: int;

  anon0:
    call {:si_unique_call 1351} vslice_dummy_var_326 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_327: int;

  anon0:
    call {:si_unique_call 1352} vslice_dummy_var_327 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_4: int) returns (Tmp_577: int);
  free ensures {:va_keep} Tmp_577 == 0 || Tmp_577 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_4: int) returns (Tmp_577: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_577 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_577 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_328: int;

  anon0:
    call {:si_unique_call 1353} vslice_dummy_var_328 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_329: int;

  anon0:
    call {:si_unique_call 1354} vslice_dummy_var_329 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes_1: int)
{
  var vslice_dummy_var_330: int;

  anon0:
    call {:si_unique_call 1355} vslice_dummy_var_330 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_585: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_585: int)
{
  var {:pointer} ps: int;
  var {:scalar} Tmp_586: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_587: int;
  var {:scalar} sdv_465: int;
  var {:scalar} status_19: int;
  var {:pointer} po: int;
  var {:pointer} pirp_12: int;

  anon0:
    po := actual_po;
    pirp_12 := actual_pirp_12;
    status_19 := 0;
    minor := sdv_465;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    ps := Mem_T.CurrentStackLocation_unnamed_tag_7[CurrentStackLocation_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(pirp_12)))];
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 1356} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(pirp_12)] := 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1357} sdv_stub_dispatch_begin();
    goto anon121_Then, anon121_Else;

  anon121_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    goto anon137_Then, anon137_Else;

  anon137_Else:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon133_Then, anon133_Else;

  anon133_Else:
    goto anon132_Then, anon132_Else;

  anon132_Else:
    goto anon131_Then, anon131_Else;

  anon131_Else:
    goto anon130_Then, anon130_Else;

  anon130_Else:
    goto anon129_Then, anon129_Else;

  anon129_Else:
    goto anon128_Then, anon128_Else;

  anon128_Else:
    goto anon127_Then, anon127_Else;

  anon127_Else:
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 27;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    goto anon125_Then, anon125_Else;

  anon125_Else:
    Tmp_586 := 0;
    goto L271;

  L271:
    assume Tmp_586 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto L66;

  L66:
    call {:si_unique_call 1358} status_19 := SerialPnpDispatch(po, pirp_12);
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} yogi_error != 1;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1359} SLIC_SerialPnpDispatch_exit(strConst__li2bpl2, status_19);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1360} sdv_stub_dispatch_end(status_19, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_585 := status_19;
    goto LM2;

  LM2:
    return;

  anon180_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon153_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon179_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon124_Then:
    goto L66;

  anon125_Then:
    Tmp_586 := 1;
    goto L271;

  anon123_Then:
    goto L61;

  anon178_Then:
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_587 := 0;
    goto L278;

  L278:
    assume Tmp_587 != 0;
    goto L60;

  anon122_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_587 := 1;
    goto L278;

  anon126_Then:
    call {:si_unique_call 1361} status_19 := sdv_DoNothing();
    goto L72;

  anon127_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 23;
    call {:si_unique_call 1362} status_19 := SerialSystemControlDispatch(po, pirp_12);
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} yogi_error != 1;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1363} SLIC_SerialSystemControlDispatch_exit(strConst__li2bpl2, status_19);
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon177_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon152_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon176_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon128_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 22;
    call {:si_unique_call 1364} sdv_SetPowerIrpMinorFunction(pirp_12);
    call {:si_unique_call 1365} status_19 := SerialPowerDispatch(po, pirp_12);
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} yogi_error != 1;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1366} SLIC_SerialPowerDispatch_exit(strConst__li2bpl2, status_19);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon175_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon151_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon174_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon129_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 18;
    call {:si_unique_call 1367} status_19 := SerialCleanup(po, pirp_12);
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} yogi_error != 1;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1368} SLIC_SerialCleanup_exit(strConst__li2bpl2, status_19);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon173_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon150_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon172_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon130_Then:
    call {:si_unique_call 1369} status_19 := sdv_DoNothing();
    goto L72;

  anon131_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 16;
    call {:si_unique_call 1370} status_19 := sdv_DoNothing();
    goto L72;

  anon132_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 15;
    call {:si_unique_call 1371} status_19 := SerialInternalIoControl(po, pirp_12);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} yogi_error != 1;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1372} SLIC_SerialInternalIoControl_exit(strConst__li2bpl2, status_19);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon171_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon149_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon170_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon133_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 14;
    call {:si_unique_call 1373} status_19 := SerialIoControl(po, pirp_12);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} yogi_error != 1;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1374} SLIC_SerialIoControl_exit(strConst__li2bpl2, status_19);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon169_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon148_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon168_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon134_Then:
    call {:si_unique_call 1375} status_19 := sdv_DoNothing();
    goto L72;

  anon135_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 9;
    call {:si_unique_call 1376} status_19 := SerialFlush(po, pirp_12);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} yogi_error != 1;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1377} SLIC_SerialFlush_exit(strConst__li2bpl2, status_19);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon167_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon147_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon166_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon136_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 6;
    call {:si_unique_call 1378} status_19 := SerialSetInformationFile(po, pirp_12);
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} yogi_error != 1;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1379} SLIC_SerialSetInformationFile_exit(strConst__li2bpl2, status_19);
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon165_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon146_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon164_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon137_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 5;
    call {:si_unique_call 1380} status_19 := SerialQueryInformationFile(po, pirp_12);
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} yogi_error != 1;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1381} SLIC_SerialQueryInformationFile_exit(strConst__li2bpl2, status_19);
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon163_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon145_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon162_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon138_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 4;
    call {:si_unique_call 1382} status_19 := SerialWrite(po, pirp_12);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} yogi_error != 1;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1383} SLIC_SerialWrite_exit(strConst__li2bpl2, status_19);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon161_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon144_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon160_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon139_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 3;
    call {:si_unique_call 1384} status_19 := SerialRead(po, pirp_12);
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} yogi_error != 1;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1385} SLIC_SerialRead_exit(strConst__li2bpl2, status_19);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon159_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon143_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon158_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon140_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 2;
    call {:si_unique_call 1386} status_19 := SerialClose(po, pirp_12);
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} yogi_error != 1;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1387} SLIC_SerialClose_exit(strConst__li2bpl2, status_19);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon157_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon142_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon156_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon121_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(ps)] := 0;
    call {:si_unique_call 1388} status_19 := SerialCreateOpen(po, pirp_12);
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} yogi_error != 1;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume pirp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1389} SLIC_SerialCreateOpen_exit(strConst__li2bpl2, status_19);
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon155_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon141_Then:
    assume !(pirp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon154_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_589: int);
  free ensures {:va_keep} Tmp_589 == -1073741823 || Tmp_589 == -1073741808 || Tmp_589 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_589: int)
{
  var {:scalar} Tmp_591: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_589 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_589 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_591 := 0;
    goto L22;

  L22:
    assume Tmp_591 != 0;
    Tmp_589 := 0;
    goto L1;

  anon8_Then:
    Tmp_591 := 1;
    goto L22;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_2: int)
{
  var {:scalar} new_2: int;
  var vslice_dummy_var_331: int;

  anon0:
    call {:si_unique_call 1390} vslice_dummy_var_331 := __HAVOC_malloc(4);
    new_2 := actual_new_2;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_332: int;

  anon0:
    call {:si_unique_call 1391} vslice_dummy_var_332 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_333: int;

  anon0:
    call {:si_unique_call 1392} vslice_dummy_var_333 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_598: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_598 == -1073741811 || Tmp_598 == -1073741823 || Tmp_598 == 0 || Tmp_598 == 5 || Tmp_598 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_598: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_477: int;
  var {:scalar} Length_3: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_3 := actual_Length_3;
    ResultLength := actual_ResultLength;
    L := sdv_477;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_598 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_598 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_3 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_598 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_3 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_3;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_598 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_3 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_598 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_3;
    goto L13;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_2: int, actual_CacheType: int) returns (Tmp_600: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes_2: int, actual_CacheType: int) returns (Tmp_600: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 1393} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_600 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_334: int;

  anon0:
    call {:si_unique_call 1394} vslice_dummy_var_334 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_604: int);
  free ensures {:va_keep} Tmp_604 == 1 || Tmp_604 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_604: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 1395} b := OneOfTwoBOOLEAN();
    Tmp_604 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_335: int;

  anon0:
    call {:si_unique_call 1396} vslice_dummy_var_335 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_336: int;

  anon0:
    call {:si_unique_call 1397} vslice_dummy_var_336 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_612: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_612: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_612 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "ExReleaseFastMutex"} {:osmodel} ExReleaseFastMutex(actual_FastMutex_1: int)
{
  var vslice_dummy_var_337: int;

  anon0:
    call {:si_unique_call 1398} vslice_dummy_var_337 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_616: int);
  free ensures {:va_keep} Tmp_616 == 1 || Tmp_616 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_616: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_616 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_616 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_16: int, actual_Irp_15: int) returns (Tmp_618: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_618 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_16: int, actual_Irp_15: int) returns (Tmp_618: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_20: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_338: int;
  var vslice_dummy_var_339: int;
  var vslice_dummy_var_340: int;
  var vslice_dummy_var_341: int;
  var vslice_dummy_var_2559: int;
  var vslice_dummy_var_2560: int;
  var vslice_dummy_var_2561: int;
  var vslice_dummy_var_2562: int;

  anon0:
    call {:si_unique_call 1399} completion_1 := __HAVOC_malloc(4);
    Irp_15 := actual_Irp_15;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_20 := 259;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 259;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 259;
    goto L19;

  L19:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L21;

  L21:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 259;
    goto L23;

  L23:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L29;

  L29:
    Tmp_618 := status_20;
    return;

  anon47_Then:
    havoc vslice_dummy_var_2559;
    call {:si_unique_call 1400} vslice_dummy_var_338 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_15, vslice_dummy_var_2559, completion_1);
    goto L29;

  anon46_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L23;

  anon45_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L21;

  anon65_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L19;

  anon60_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741823;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741823;
    goto L58;

  L58:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L60;

  L60:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741823;
    goto L62;

  L62:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_2560;
    call {:si_unique_call 1401} vslice_dummy_var_341 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_15, vslice_dummy_var_2560, completion_1);
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L62;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L60;

  anon66_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L58;

  anon61_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := -1073741536;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := -1073741536;
    goto L32;

  L32:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L34;

  L34:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := -1073741536;
    goto L36;

  L36:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    havoc vslice_dummy_var_2561;
    call {:si_unique_call 1402} vslice_dummy_var_339 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_15, vslice_dummy_var_2561, completion_1);
    goto L29;

  anon51_Then:
    goto L29;

  anon50_Then:
    goto L29;

  anon49_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L36;

  anon48_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L34;

  anon64_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L32;

  anon62_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_15))] := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildDeviceIoControlRequest_IoStatusBlock)] := 0;
    goto L45;

  L45:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildSynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L47;

  L47:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_15;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock)] := 0;
    goto L49;

  L49:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    havoc vslice_dummy_var_2562;
    call {:si_unique_call 1403} vslice_dummy_var_340 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_15, vslice_dummy_var_2562, completion_1);
    goto L29;

  anon55_Then:
    goto L29;

  anon54_Then:
    goto L29;

  anon53_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_15;
    goto L49;

  anon52_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_15;
    goto L47;

  anon63_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_15;
    goto L45;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_342: int;

  anon0:
    call {:si_unique_call 1404} vslice_dummy_var_342 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_17: int, actual_Irp_16: int, actual_Context_5: int, actual_Completion: int) returns (Tmp_622: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_622 == -1073741802 || Tmp_622 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_17: int, actual_Irp_16: int, actual_Context_5: int, actual_Completion: int) returns (Tmp_622: int)
{
  var {:scalar} Status_3: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_16: int;
  var {:pointer} Context_5: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_16 := actual_Irp_16;
    Context_5 := actual_Context_5;
    Completion := actual_Completion;
    call {:si_unique_call 1405} irpsp := sdv_IoGetNextIrpStackLocation(Irp_16);
    Status_3 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1406} Status_3 := SerialSyncCompletion(DeviceObject_17, Irp_16, Context_5);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    Tmp_622 := Status_3;
    return;

  anon3_Then:
    goto L11;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_1: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_343: int;

  anon0:
    call {:si_unique_call 1407} vslice_dummy_var_343 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_1 := actual_Type_1;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int)
{
  var vslice_dummy_var_344: int;

  anon0:
    call {:si_unique_call 1408} vslice_dummy_var_344 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_18: int, actual_Irp_17: int) returns (Tmp_628: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_628 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_18: int, actual_Irp_17: int) returns (Tmp_628: int)
{
  var {:pointer} Irp_17: int;

  anon0:
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 1409} Tmp_628 := IofCallDriver(0, Irp_17);
    call {:si_unique_call 1410} SLIC_sdv_IoCallDriver_exit(0, Irp_17);
    return;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_3: int)
{
  var {:pointer} p_3: int;
  var vslice_dummy_var_345: int;
  var vslice_dummy_var_2563: int;

  anon0:
    call {:si_unique_call 1411} vslice_dummy_var_345 := __HAVOC_malloc(4);
    p_3 := actual_p_3;
    assume {:nonnull} p_3 != 0;
    assume p_3 > 0;
    havoc vslice_dummy_var_2563;
    Mem_T.INT4[p_3] := vslice_dummy_var_2563;
    return;
}



procedure {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_632: int);
  free ensures {:va_keep} Tmp_632 == 0 || Tmp_632 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_NT_ERROR"} {:osmodel} sdv_NT_ERROR(actual_Status_4: int) returns (Tmp_632: int)
{
  var {:scalar} Tmp_633: int;
  var {:scalar} choice_13: int;
  var {:scalar} Status_4: int;

  anon0:
    Status_4 := actual_Status_4;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 536870911 >= Status_4;
    Tmp_632 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Status_4 > 536870911;
    goto L9;

  L9:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} choice_13 != 0;
    Tmp_633 := 1;
    goto L14;

  L14:
    Tmp_632 := Tmp_633;
    goto L1;

  anon8_Then:
    assume {:partition} choice_13 == 0;
    Tmp_633 := 0;
    goto L14;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L9;
}



procedure {:origName "_sdv_init21"} {:osmodel} _sdv_init21();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init21"} {:osmodel} _sdv_init21()
{
  var vslice_dummy_var_346: int;

  anon0:
    call {:si_unique_call 1412} vslice_dummy_var_346 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant546;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant549;
    assume sdv_p_devobj_top == sdv_devobj_top;
    Mem_T.INT4[sdv_MmMapIoSpace_int] := 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_3: int, actual_Tag_1: int) returns (Tmp_637: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType_1: int, actual_NumberOfBytes_3: int, actual_Tag_1: int) returns (Tmp_637: int)
{
  var {:pointer} sdv_490: int;
  var {:scalar} NumberOfBytes_3: int;

  anon0:
    NumberOfBytes_3 := actual_NumberOfBytes_3;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1413} sdv_490 := __HAVOC_malloc(NumberOfBytes_3);
    Tmp_637 := sdv_490;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_637 := 0;
    goto L1;
}



procedure {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_639: int);
  free ensures {:va_keep} Tmp_639 == 0 || Tmp_639 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "RtlWriteRegistryValue"} {:osmodel} RtlWriteRegistryValue(actual_RelativeTo_1: int, actual_Path_1: int, actual_ValueName_2: int, actual_ValueType: int, actual_ValueData: int, actual_ValueLength: int) returns (Tmp_639: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_639 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_639 := -1073741823;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_641: int);
  free ensures {:va_keep} Tmp_641 == -1073741772 || Tmp_641 == -1073741824 || Tmp_641 == -1073741789 || Tmp_641 == -1073741670 || Tmp_641 == -1073741808 || Tmp_641 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_641: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_641 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_641 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_641 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_641 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_641 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_641 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_643: int);
  free ensures {:va_keep} Tmp_643 == -1073741811 || Tmp_643 == -1073741670 || Tmp_643 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_2: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_643: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_643 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_643 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_643 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_347: int;

  anon0:
    call {:si_unique_call 1414} vslice_dummy_var_347 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_348: int;

  anon0:
    call {:si_unique_call 1415} vslice_dummy_var_348 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_19: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_649: int);
  free ensures {:va_keep} Tmp_649 == -1073741811 || Tmp_649 == -1073741808 || Tmp_649 == -1073741823 || Tmp_649 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_19: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_649: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_649 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_649 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_649 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_649 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_651: int);
  free ensures {:va_keep} Tmp_651 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle_1: int) returns (Tmp_651: int)
{

  anon0:
    Tmp_651 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_653: int);
  free ensures {:va_keep} Tmp_653 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_653: int)
{

  anon0:
    Tmp_653 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_20: int, actual_Action: int) returns (Tmp_655: int);
  free ensures {:va_keep} Tmp_655 == -1073741823 || Tmp_655 == -1073741811 || Tmp_655 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_20: int, actual_Action: int) returns (Tmp_655: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_655 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_655 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_655 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_349: int;

  anon0:
    call {:si_unique_call 1416} vslice_dummy_var_349 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_9: int) returns (Tmp_659: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_659 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialRemoveDevObj"} SerialRemoveDevObj(actual_PDevObj_9: int) returns (Tmp_659: int)
{
  var {:pointer} Tmp_660: int;
  var {:pointer} Tmp_662: int;
  var {:pointer} pDevExt_9: int;
  var {:pointer} PDevObj_9: int;
  var vslice_dummy_var_350: int;
  var vslice_dummy_var_351: int;

  anon0:
    PDevObj_9 := actual_PDevObj_9;
    call {:si_unique_call 1417} Tmp_660 := __HAVOC_malloc(96);
    call {:si_unique_call 1418} Tmp_662 := __HAVOC_malloc(100);
    assume {:nonnull} PDevObj_9 != 0;
    assume PDevObj_9 > 0;
    havoc pDevExt_9;
    call {:si_unique_call 1419} sdv_do_paged_code_check();
    Tmp_662 := strConst__li2bpl161;
    call {:si_unique_call 1420} vslice_dummy_var_350 := SerialDbgPrintEx(2, Tmp_662);
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_9)], 8) != 0;
    goto L15;

  L15:
    call {:si_unique_call 1421} IoDetachDevice(0);
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    call {:si_unique_call 1422} sdv_ExFreePool(0);
    goto L19;

  L19:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    call {:si_unique_call 1423} sdv_ExFreePool(0);
    goto L23;

  L23:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    call {:si_unique_call 1424} sdv_ExFreePool(0);
    goto L27;

  L27:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pDevExt_9 != 0;
    assume pDevExt_9 > 0;
    call {:si_unique_call 1425} sdv_ExFreePool(0);
    goto L31;

  L31:
    call {:si_unique_call 1426} IoDeleteDevice(0);
    Tmp_660 := strConst__li2bpl162;
    call {:si_unique_call 1427} vslice_dummy_var_351 := SerialDbgPrintEx(2, Tmp_660);
    Tmp_659 := 0;
    return;

  anon15_Then:
    goto L31;

  anon14_Then:
    goto L27;

  anon13_Then:
    goto L23;

  anon12_Then:
    goto L19;

  anon11_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(pDevExt_9)], 8) == 0;
    call {:si_unique_call 1428} SerialDisableInterfacesResources(PDevObj_9, 1);
    goto L15;
}



procedure {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_10: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialKillPendingIrps"} SerialKillPendingIrps(actual_PDevObj_10: int)
{
  var {:pointer} Tmp_667: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} pDevExt_10: int;
  var {:pointer} Tmp_669: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} Tmp_670: int;
  var {:pointer} Tmp_671: int;
  var {:pointer} Tmp_672: int;
  var {:pointer} Tmp_673: int;
  var {:pointer} PDevObj_10: int;
  var vslice_dummy_var_352: int;
  var vslice_dummy_var_353: int;
  var vslice_dummy_var_354: int;
  var vslice_dummy_var_355: int;

  anon0:
    call {:si_unique_call 1429} vslice_dummy_var_352 := __HAVOC_malloc(4);
    PDevObj_10 := actual_PDevObj_10;
    call {:si_unique_call 1430} Tmp_667 := __HAVOC_malloc(112);
    call {:si_unique_call 1431} Tmp_669 := __HAVOC_malloc(96);
    assume {:nonnull} PDevObj_10 != 0;
    assume PDevObj_10 > 0;
    havoc pDevExt_10;
    Tmp_667 := strConst__li2bpl164;
    call {:si_unique_call 1432} vslice_dummy_var_354 := SerialDbgPrintEx(2, Tmp_667);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1433} SerialKillAllReadsOrWrites(PDevObj_10, WriteQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1434} SerialKillAllReadsOrWrites(PDevObj_10, ReadQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1435} SerialKillAllReadsOrWrites(PDevObj_10, PurgeQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10), CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1436} SerialKillAllReadsOrWrites(PDevObj_10, MaskQueue__SERIAL_DEVICE_EXTENSION(pDevExt_10), CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10));
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1437} Tmp_671 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    Mem_T.INT4[Tmp_671] := oldIrql_2;
    call {:si_unique_call 1438} IoAcquireCancelSpinLock(Tmp_671);
    assume {:nonnull} Tmp_671 != 0;
    assume Tmp_671 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_671];
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)] != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Tmp_673 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)];
    assume {:nonnull} Tmp_673 != 0;
    assume Tmp_673 > 0;
    havoc cancelRoutine;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Tmp_668 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)];
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(Tmp_668)] := 1;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} cancelRoutine != 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Tmp_670 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)];
    assume {:nonnull} Tmp_670 != 0;
    assume Tmp_670 > 0;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    Tmp_672 := Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)];
    assume {:nonnull} Tmp_672 != 0;
    assume Tmp_672 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant214;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1439} SerialCancelCurrentWrite(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    call {:si_unique_call 1440} vslice_dummy_var_353 := IoCancelIrp(0);
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    goto L41;

  L41:
    call {:si_unique_call 1441} SerialKillAllStalled(PDevObj_10);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    Tmp_669 := strConst__li2bpl163;
    call {:si_unique_call 1442} vslice_dummy_var_355 := SerialDbgPrintEx(2, Tmp_669);
    goto LM2;

  LM2:
    return;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L41;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant218;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1443} SerialCancelCurrentXoff(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant351;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1444} SerialCancelImmediate(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon42_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant166;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1445} SerialCancelQueued(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon41_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant197;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1446} SerialCancelWait(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon53_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon50_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine == li2bplFunctionConstant168;
    assume {:nonnull} pDevExt_10 != 0;
    assume pDevExt_10 > 0;
    call {:si_unique_call 1447} SerialFilterCancelQueued(PDevObj_10, Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)]);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  anon51_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 1448} IoReleaseCancelSpinLock(oldIrql_2);
    goto L40;

  anon39_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(pDevExt_10)] == 0;
    call {:si_unique_call 1449} IoReleaseCancelSpinLock(oldIrql_2);
    goto L40;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType_1: int, actual_BusNumber_1: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes_4: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_675: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetMappedAddress"} SerialGetMappedAddress(actual_BusType_1: int, actual_BusNumber_1: int, actual_structPtr888IoAddress: int, actual_NumberOfBytes_4: int, actual_AddressSpace: int, actual_MappedAddress: int) returns (Tmp_675: int)
{
  var {:scalar} IoAddress: int;
  var {:scalar} Tmp_676: int;
  var {:pointer} address: int;
  var {:scalar} Tmp_678: int;
  var {:pointer} structPtr888IoAddress: int;
  var {:scalar} NumberOfBytes_4: int;
  var {:scalar} AddressSpace: int;
  var {:pointer} MappedAddress: int;

  anon0:
    call {:si_unique_call 1450} IoAddress := __HAVOC_malloc(20);
    call {:si_unique_call 1451} Tmp_676 := __HAVOC_malloc(20);
    structPtr888IoAddress := actual_structPtr888IoAddress;
    NumberOfBytes_4 := actual_NumberOfBytes_4;
    AddressSpace := actual_AddressSpace;
    MappedAddress := actual_MappedAddress;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} structPtr888IoAddress != 0;
    assume structPtr888IoAddress > 0;
    call {:si_unique_call 1452} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} AddressSpace != 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    havoc address;
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := 0;
    goto L12;

  L12:
    Tmp_675 := address;
    return;

  anon5_Then:
    assume {:partition} AddressSpace == 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    assume {:nonnull} IoAddress != 0;
    assume IoAddress > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    call {:si_unique_call 1453} address := MmMapIoSpace(Tmp_676, NumberOfBytes_4, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} address != 0;
    Tmp_678 := 1;
    goto L20;

  L20:
    assume {:nonnull} MappedAddress != 0;
    assume MappedAddress > 0;
    Mem_T.INT4[MappedAddress] := Tmp_678;
    goto L12;

  anon6_Then:
    assume {:partition} address == 0;
    Tmp_678 := 0;
    goto L20;
}



procedure {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_7: int, actual_PConfigData: int, actual_PDevObj_11: int) returns (Tmp_679: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_679 == -1073741670 || Tmp_679 == 0 || Tmp_679 == -1073741709 || Tmp_679 == -1073741810;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialInitMultiPort"} SerialInitMultiPort(actual_PDevExt_7: int, actual_PConfigData: int, actual_PDevObj_11: int) returns (Tmp_679: int)
{
  var {:pointer} Tmp_681: int;
  var {:pointer} Tmp_682: int;
  var {:pointer} Tmp_683: int;
  var {:pointer} Tmp_684: int;
  var {:pointer} Tmp_685: int;
  var {:pointer} Tmp_686: int;
  var {:pointer} pNewExt: int;
  var {:scalar} status_21: int;
  var {:pointer} pDispatch: int;
  var {:pointer} PDevExt_7: int;
  var {:pointer} PConfigData: int;
  var {:pointer} PDevObj_11: int;
  var boogieTmp: int;
  var vslice_dummy_var_356: int;
  var vslice_dummy_var_357: int;
  var vslice_dummy_var_358: int;
  var vslice_dummy_var_359: int;
  var vslice_dummy_var_360: int;
  var vslice_dummy_var_361: int;

  anon0:
    PDevExt_7 := actual_PDevExt_7;
    PConfigData := actual_PConfigData;
    PDevObj_11 := actual_PDevObj_11;
    call {:si_unique_call 1454} Tmp_681 := __HAVOC_malloc(116);
    call {:si_unique_call 1455} Tmp_682 := __HAVOC_malloc(116);
    call {:si_unique_call 1456} Tmp_684 := __HAVOC_malloc(136);
    call {:si_unique_call 1457} Tmp_685 := __HAVOC_malloc(116);
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc pNewExt;
    call {:si_unique_call 1458} sdv_do_paged_code_check();
    Tmp_684 := strConst__li2bpl165;
    call {:si_unique_call 1459} vslice_dummy_var_357 := SerialDbgPrintEx(2, Tmp_684);
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} pNewExt != 0;
    assume pNewExt > 0;
    call {:si_unique_call 1460} status_21 := SerialInitOneController(PDevObj_11, PConfigData);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    call {:si_unique_call 1461} boogieTmp := ExAllocatePoolWithTag(0, 76, -666022077);
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    havoc pDispatch;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} pDispatch != 0;
    call {:si_unique_call 1462} sdv_RtlZeroMemory(0, 76);
    call {:si_unique_call 1463} vslice_dummy_var_356 := KeSynchronizeExecution(0, li2bplFunctionConstant383, 0);
    goto L26;

  L26:
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc Tmp_686;
    assume {:nonnull} Tmp_686 != 0;
    assume Tmp_686 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    havoc Tmp_683;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PConfigData != 0;
    assume PConfigData > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevExt_7 != 0;
    assume PDevExt_7 > 0;
    assume {:nonnull} PDevObj_11 != 0;
    assume PDevObj_11 > 0;
    call {:si_unique_call 1464} vslice_dummy_var_358 := KeSynchronizeExecution(0, li2bplFunctionConstant387, 0);
    Tmp_681 := strConst__li2bpl167;
    call {:si_unique_call 1465} vslice_dummy_var_359 := SerialDbgPrintEx(2, Tmp_681);
    Tmp_679 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} pDispatch == 0;
    status_21 := -1073741670;
    Tmp_682 := strConst__li2bpl168;
    call {:si_unique_call 1466} vslice_dummy_var_360 := SerialDbgPrintEx(2, Tmp_682);
    Tmp_679 := status_21;
    goto L1;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} 0 > status_21;
    Tmp_685 := strConst__li2bpl166;
    call {:si_unique_call 1467} vslice_dummy_var_361 := SerialDbgPrintEx(2, Tmp_685);
    Tmp_679 := status_21;
    goto L1;
}



procedure {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_8: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialReleaseResources"} SerialReleaseResources(actual_PDevExt_8: int)
{
  var {:scalar} i_1: int;
  var {:scalar} sdv_513: int;
  var {:pointer} Tmp_687: int;
  var {:scalar} sdv_514: int;
  var {:scalar} sdv_515: int;
  var {:scalar} sdv_517: int;
  var {:scalar} sdv_518: int;
  var {:scalar} sdv_519: int;
  var {:scalar} sdv_520: int;
  var {:pointer} Tmp_688: int;
  var {:scalar} sdv_522: int;
  var {:scalar} sdv_525: int;
  var {:pointer} Tmp_690: int;
  var {:scalar} sdv_533: int;
  var {:pointer} Tmp_691: int;
  var {:scalar} oldIrql_3: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} Tmp_693: int;
  var {:scalar} sdv_538: int;
  var {:scalar} sdv_540: int;
  var {:scalar} Tmp_694: int;
  var {:scalar} sdv_544: int;
  var {:pointer} Tmp_695: int;
  var {:pointer} PDevExt_8: int;
  var vslice_dummy_var_362: int;
  var vslice_dummy_var_363: int;
  var vslice_dummy_var_364: int;
  var vslice_dummy_var_365: int;
  var vslice_dummy_var_366: int;
  var vslice_dummy_var_367: int;
  var vslice_dummy_var_368: int;
  var vslice_dummy_var_369: int;
  var vslice_dummy_var_370: int;
  var vslice_dummy_var_371: int;
  var vslice_dummy_var_372: int;
  var vslice_dummy_var_373: int;
  var vslice_dummy_var_374: int;
  var vslice_dummy_var_375: int;
  var vslice_dummy_var_376: int;
  var vslice_dummy_var_377: int;
  var vslice_dummy_var_378: int;
  var vslice_dummy_var_379: int;
  var vslice_dummy_var_380: int;
  var vslice_dummy_var_381: int;
  var vslice_dummy_var_382: int;
  var vslice_dummy_var_383: int;
  var vslice_dummy_var_384: int;
  var vslice_dummy_var_385: int;
  var vslice_dummy_var_386: int;
  var vslice_dummy_var_387: int;
  var vslice_dummy_var_2564: int;
  var vslice_dummy_var_2565: int;
  var vslice_dummy_var_2566: int;
  var vslice_dummy_var_2567: int;
  var vslice_dummy_var_2568: int;
  var vslice_dummy_var_2569: int;
  var vslice_dummy_var_2570: int;
  var vslice_dummy_var_2571: int;
  var vslice_dummy_var_2572: int;
  var vslice_dummy_var_2573: int;
  var vslice_dummy_var_2574: int;
  var vslice_dummy_var_2575: int;
  var vslice_dummy_var_2576: int;
  var vslice_dummy_var_2577: int;
  var vslice_dummy_var_2578: int;

  anon0:
    call {:si_unique_call 1468} vslice_dummy_var_362 := __HAVOC_malloc(4);
    PDevExt_8 := actual_PDevExt_8;
    call {:si_unique_call 1469} Tmp_688 := __HAVOC_malloc(100);
    call {:si_unique_call 1470} Tmp_690 := __HAVOC_malloc(152);
    call {:si_unique_call 1471} Tmp_691 := __HAVOC_malloc(116);
    call {:si_unique_call 1472} Tmp_693 := __HAVOC_malloc(132);
    call {:si_unique_call 1473} Tmp_695 := __HAVOC_malloc(64);
    Tmp_691 := strConst__li2bpl169;
    call {:si_unique_call 1474} vslice_dummy_var_371 := SerialDbgPrintEx(2, Tmp_691);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 1475} vslice_dummy_var_363 := KeSynchronizeExecution(0, li2bplFunctionConstant377, 0);
    call {:si_unique_call 1476} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    Mem_T.INT4[Tmp_687] := oldIrql_3;
    call {:si_unique_call 1477} sdv_KeAcquireSpinLock(0, Tmp_687);
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_687];
    call {:si_unique_call 1478} vslice_dummy_var_364 := sdv_RemoveEntryList(0);
    call {:si_unique_call 1479} sdv_KeReleaseSpinLock(0, oldIrql_3);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1480} InitializeListHead(AllDevObjs__SERIAL_DEVICE_EXTENSION(PDevExt_8));
    goto L8;

  L8:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_690 := strConst__li2bpl170;
    call {:si_unique_call 1481} vslice_dummy_var_372 := SerialDbgPrintEx(12, Tmp_690);
    call {:si_unique_call 1482} IoDisconnectInterrupt(0);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 1483} sdv_ExFreePool(0);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto L24;

  L24:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    i_1 := 0;
    goto L42;

  L42:
    call {:si_unique_call 1484} i_1, Tmp_692, Tmp_694, Tmp_695 := SerialReleaseResources_loop_L42(i_1, Tmp_692, Tmp_694, Tmp_695, PDevExt_8);
    goto L42_last;

  L42_last:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} 16 > i_1;
    Tmp_694 := i_1;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc Tmp_692;
    assume {:nonnull} Tmp_692 != 0;
    assume Tmp_692 > 0;
    havoc Tmp_695;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    i_1 := i_1 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    assume false;
    return;

  anon66_Then:
    goto L43;

  L43:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} i_1 == 16;
    Tmp_693 := strConst__li2bpl171;
    call {:si_unique_call 1485} vslice_dummy_var_373 := SerialDbgPrintEx(12, Tmp_693);
    call {:si_unique_call 1486} sdv_ExFreePool(0);
    goto L37;

  L37:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1487} vslice_dummy_var_365 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1488} vslice_dummy_var_366 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1489} vslice_dummy_var_367 := SerialCancelTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1490} vslice_dummy_var_368 := SerialCancelTimer(ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1491} vslice_dummy_var_369 := SerialCancelTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    call {:si_unique_call 1492} vslice_dummy_var_370 := SerialCancelTimer(LowerRTSTimer__SERIAL_DEVICE_EXTENSION(PDevExt_8), PDevExt_8);
    call {:si_unique_call 1493} sdv_514 := KeRemoveQueueDpc(0);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_514 != 0;
    call {:si_unique_call 1494} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2564;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2564;
    call {:si_unique_call 1495} vslice_dummy_var_374 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L72;

  L72:
    call {:si_unique_call 1496} sdv_519 := KeRemoveQueueDpc(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_519 != 0;
    call {:si_unique_call 1497} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2565;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2565;
    call {:si_unique_call 1498} vslice_dummy_var_375 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L79;

  L79:
    call {:si_unique_call 1499} sdv_540 := KeRemoveQueueDpc(0);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_540 != 0;
    call {:si_unique_call 1500} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2566;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2566;
    call {:si_unique_call 1501} vslice_dummy_var_376 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L86;

  L86:
    call {:si_unique_call 1502} sdv_515 := KeRemoveQueueDpc(0);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_515 != 0;
    call {:si_unique_call 1503} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2567;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2567;
    call {:si_unique_call 1504} vslice_dummy_var_377 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L93;

  L93:
    call {:si_unique_call 1505} sdv_533 := KeRemoveQueueDpc(0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_533 != 0;
    call {:si_unique_call 1506} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2568;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2568;
    call {:si_unique_call 1507} vslice_dummy_var_378 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L100;

  L100:
    call {:si_unique_call 1508} sdv_520 := KeRemoveQueueDpc(0);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_520 != 0;
    call {:si_unique_call 1509} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2569;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2569;
    call {:si_unique_call 1510} vslice_dummy_var_379 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L107;

  L107:
    call {:si_unique_call 1511} sdv_522 := KeRemoveQueueDpc(0);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_522 != 0;
    call {:si_unique_call 1512} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2570;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2570;
    call {:si_unique_call 1513} vslice_dummy_var_380 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L114;

  L114:
    call {:si_unique_call 1514} sdv_517 := KeRemoveQueueDpc(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_517 != 0;
    call {:si_unique_call 1515} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2571;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2571;
    call {:si_unique_call 1516} vslice_dummy_var_381 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L121;

  L121:
    call {:si_unique_call 1517} sdv_544 := KeRemoveQueueDpc(0);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_544 != 0;
    call {:si_unique_call 1518} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2572;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2572;
    call {:si_unique_call 1519} vslice_dummy_var_382 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L128;

  L128:
    call {:si_unique_call 1520} sdv_525 := KeRemoveQueueDpc(0);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_525 != 0;
    call {:si_unique_call 1521} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2573;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2573;
    call {:si_unique_call 1522} vslice_dummy_var_383 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L135;

  L135:
    call {:si_unique_call 1523} sdv_513 := KeRemoveQueueDpc(0);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_513 != 0;
    call {:si_unique_call 1524} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2574;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2574;
    call {:si_unique_call 1525} vslice_dummy_var_384 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L142;

  L142:
    call {:si_unique_call 1526} sdv_538 := KeRemoveQueueDpc(0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_538 != 0;
    call {:si_unique_call 1527} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2575;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2575;
    call {:si_unique_call 1528} vslice_dummy_var_385 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L149;

  L149:
    call {:si_unique_call 1529} sdv_518 := KeRemoveQueueDpc(0);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_518 != 0;
    call {:si_unique_call 1530} Tmp_687 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    havoc vslice_dummy_var_2576;
    Mem_T.INT4[Tmp_687] := vslice_dummy_var_2576;
    call {:si_unique_call 1531} vslice_dummy_var_386 := sdv_InterlockedDecrement(Tmp_687);
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    goto L156;

  L156:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_8)] != 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc vslice_dummy_var_2577;
    call {:si_unique_call 1532} MmUnmapIoSpace(0, vslice_dummy_var_2577);
    goto L160;

  L160:
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_8)] != 0;
    assume {:nonnull} PDevExt_8 != 0;
    assume PDevExt_8 > 0;
    havoc vslice_dummy_var_2578;
    call {:si_unique_call 1533} MmUnmapIoSpace(0, vslice_dummy_var_2578);
    goto L164;

  L164:
    Tmp_688 := strConst__li2bpl172;
    call {:si_unique_call 1534} vslice_dummy_var_387 := SerialDbgPrintEx(2, Tmp_688);
    return;

  anon64_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(PDevExt_8)] == 0;
    goto L164;

  anon63_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(PDevExt_8)] == 0;
    goto L160;

  anon62_Then:
    assume {:partition} sdv_518 == 0;
    goto L156;

  anon61_Then:
    assume {:partition} sdv_538 == 0;
    goto L149;

  anon60_Then:
    assume {:partition} sdv_513 == 0;
    goto L142;

  anon59_Then:
    assume {:partition} sdv_525 == 0;
    goto L135;

  anon58_Then:
    assume {:partition} sdv_544 == 0;
    goto L128;

  anon57_Then:
    assume {:partition} sdv_517 == 0;
    goto L121;

  anon56_Then:
    assume {:partition} sdv_522 == 0;
    goto L114;

  anon55_Then:
    assume {:partition} sdv_520 == 0;
    goto L107;

  anon54_Then:
    assume {:partition} sdv_533 == 0;
    goto L100;

  anon53_Then:
    assume {:partition} sdv_515 == 0;
    goto L93;

  anon52_Then:
    assume {:partition} sdv_540 == 0;
    goto L86;

  anon51_Then:
    assume {:partition} sdv_519 == 0;
    goto L79;

  anon50_Then:
    assume {:partition} sdv_514 == 0;
    goto L72;

  anon49_Then:
    assume {:partition} i_1 != 16;
    goto L37;

  anon48_Then:
    assume {:partition} i_1 >= 16;
    goto L43;

  anon47_Then:
    goto L37;

  anon65_Then:
    goto L24;

  anon46_Then:
    goto L24;

  anon45_Then:
    goto L8;
}



procedure {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_12: int, actual_PConfig_1: int) returns (Tmp_696: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_696 == -1073741810 || Tmp_696 == -1073741670 || Tmp_696 == 0 || Tmp_696 == -1073741709;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialFindInitController"} SerialFindInitController(actual_PDevObj_12: int, actual_PConfig_1: int) returns (Tmp_696: int)
{
  var {:scalar} sdv_548: int;
  var {:pointer} Tmp_697: int;
  var {:pointer} sdv_549: int;
  var {:scalar} sdv_553: int;
  var {:scalar} sdv_554: int;
  var {:pointer} sdv_555: int;
  var {:scalar} sdv_556: int;
  var {:scalar} Tmp_698: int;
  var {:scalar} Tmp_699: int;
  var {:scalar} sdv_559: int;
  var {:pointer} sdv_560: int;
  var {:pointer} sdv_561: int;
  var {:pointer} pCurDevObj: int;
  var {:scalar} Tmp_700: int;
  var {:pointer} Tmp_701: int;
  var {:scalar} Tmp_702: int;
  var {:pointer} pDevExt_11: int;
  var {:pointer} Tmp_703: int;
  var {:scalar} Tmp_704: int;
  var {:pointer} Tmp_705: int;
  var {:pointer} Tmp_706: int;
  var {:scalar} Tmp_707: int;
  var {:pointer} Tmp_708: int;
  var {:scalar} sdv_563: int;
  var {:pointer} Tmp_709: int;
  var {:scalar} Tmp_710: int;
  var {:scalar} Tmp_711: int;
  var {:pointer} Tmp_712: int;
  var {:scalar} Tmp_713: int;
  var {:scalar} sdv_566: int;
  var {:pointer} Tmp_714: int;
  var {:scalar} sdv_568: int;
  var {:pointer} Tmp_715: int;
  var {:pointer} sdv_570: int;
  var {:pointer} Tmp_716: int;
  var {:scalar} Tmp_717: int;
  var {:pointer} pExtension: int;
  var {:scalar} oldIrql_4: int;
  var {:scalar} sdv_573: int;
  var {:scalar} sdv_575: int;
  var {:pointer} sdv_576: int;
  var {:scalar} sdv_577: int;
  var {:pointer} Tmp_718: int;
  var {:scalar} Tmp_719: int;
  var {:scalar} sdv_580: int;
  var {:scalar} Tmp_720: int;
  var {:scalar} sdv_582: int;
  var {:scalar} sdv_583: int;
  var {:scalar} status_22: int;
  var {:scalar} Tmp_721: int;
  var {:scalar} Tmp_722: int;
  var {:pointer} Tmp_723: int;
  var {:scalar} serialPhysicalMax: int;
  var {:scalar} Tmp_724: int;
  var {:scalar} Tmp_725: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} Tmp_727: int;
  var {:pointer} Tmp_728: int;
  var {:scalar} Tmp_729: int;
  var {:scalar} sdv_586: int;
  var {:scalar} Tmp_730: int;
  var {:scalar} sdv_587: int;
  var {:pointer} Tmp_731: int;
  var {:pointer} PDevObj_12: int;
  var {:pointer} PConfig_1: int;
  var vslice_dummy_var_388: int;
  var vslice_dummy_var_389: int;
  var vslice_dummy_var_390: int;
  var vslice_dummy_var_391: int;
  var vslice_dummy_var_392: int;
  var vslice_dummy_var_393: int;
  var vslice_dummy_var_394: int;
  var vslice_dummy_var_395: int;
  var vslice_dummy_var_396: int;
  var vslice_dummy_var_397: int;
  var vslice_dummy_var_398: int;
  var vslice_dummy_var_399: int;
  var vslice_dummy_var_400: int;
  var vslice_dummy_var_401: int;
  var vslice_dummy_var_402: int;
  var vslice_dummy_var_403: int;
  var vslice_dummy_var_2579: int;
  var vslice_dummy_var_2580: int;
  var vslice_dummy_var_2581: int;
  var vslice_dummy_var_2582: int;
  var vslice_dummy_var_2583: int;
  var vslice_dummy_var_2584: int;
  var vslice_dummy_var_2585: int;
  var vslice_dummy_var_2586: int;
  var vslice_dummy_var_2587: int;
  var vslice_dummy_var_2588: int;
  var vslice_dummy_var_2589: int;
  var vslice_dummy_var_2590: int;
  var vslice_dummy_var_2591: int;
  var vslice_dummy_var_2592: int;
  var vslice_dummy_var_2593: int;
  var vslice_dummy_var_2594: int;
  var vslice_dummy_var_2595: int;
  var vslice_dummy_var_2596: int;
  var vslice_dummy_var_2597: int;
  var vslice_dummy_var_2598: int;
  var vslice_dummy_var_2599: int;
  var vslice_dummy_var_2600: int;
  var vslice_dummy_var_2601: int;
  var vslice_dummy_var_2602: int;
  var vslice_dummy_var_2603: int;
  var vslice_dummy_var_2604: int;
  var vslice_dummy_var_2605: int;
  var vslice_dummy_var_2606: int;
  var vslice_dummy_var_2607: int;
  var vslice_dummy_var_2608: int;
  var vslice_dummy_var_2609: int;
  var vslice_dummy_var_2610: int;
  var vslice_dummy_var_2611: int;
  var vslice_dummy_var_2612: int;
  var vslice_dummy_var_2613: int;
  var vslice_dummy_var_2614: int;
  var vslice_dummy_var_2615: int;
  var vslice_dummy_var_2616: int;
  var vslice_dummy_var_2617: int;
  var vslice_dummy_var_2618: int;
  var vslice_dummy_var_2619: int;
  var vslice_dummy_var_2620: int;
  var vslice_dummy_var_2621: int;
  var vslice_dummy_var_2622: int;
  var vslice_dummy_var_2623: int;
  var vslice_dummy_var_2624: int;
  var vslice_dummy_var_2625: int;
  var vslice_dummy_var_2626: int;
  var vslice_dummy_var_2627: int;
  var vslice_dummy_var_2628: int;
  var vslice_dummy_var_2629: int;
  var vslice_dummy_var_2630: int;
  var vslice_dummy_var_2631: int;
  var vslice_dummy_var_2632: int;
  var vslice_dummy_var_2633: int;
  var vslice_dummy_var_2634: int;
  var vslice_dummy_var_2635: int;
  var vslice_dummy_var_2636: int;
  var vslice_dummy_var_2637: int;
  var vslice_dummy_var_2638: int;
  var vslice_dummy_var_2639: int;
  var vslice_dummy_var_2640: int;
  var vslice_dummy_var_2641: int;
  var vslice_dummy_var_2642: int;
  var vslice_dummy_var_2643: int;
  var vslice_dummy_var_2644: int;
  var vslice_dummy_var_2645: int;
  var vslice_dummy_var_2646: int;

  anon0:
    call {:si_unique_call 1535} Tmp_700 := __HAVOC_malloc(20);
    call {:si_unique_call 1536} Tmp_702 := __HAVOC_malloc(20);
    call {:si_unique_call 1537} Tmp_710 := __HAVOC_malloc(20);
    call {:si_unique_call 1538} Tmp_711 := __HAVOC_malloc(20);
    call {:si_unique_call 1539} Tmp_720 := __HAVOC_malloc(20);
    call {:si_unique_call 1540} Tmp_721 := __HAVOC_malloc(20);
    call {:si_unique_call 1541} serialPhysicalMax := __HAVOC_malloc(20);
    call {:si_unique_call 1542} Tmp_724 := __HAVOC_malloc(20);
    PDevObj_12 := actual_PDevObj_12;
    PConfig_1 := actual_PConfig_1;
    call {:si_unique_call 1543} Tmp_697 := __HAVOC_malloc(132);
    call {:si_unique_call 1544} Tmp_703 := __HAVOC_malloc(440);
    call {:si_unique_call 1545} Tmp_705 := __HAVOC_malloc(312);
    call {:si_unique_call 1546} Tmp_708 := __HAVOC_malloc(744);
    call {:si_unique_call 1547} Tmp_709 := __HAVOC_malloc(732);
    call {:si_unique_call 1548} Tmp_712 := __HAVOC_malloc(116);
    call {:si_unique_call 1549} Tmp_714 := __HAVOC_malloc(304);
    call {:si_unique_call 1550} Tmp_715 := __HAVOC_malloc(408);
    call {:si_unique_call 1551} Tmp_716 := __HAVOC_malloc(60);
    call {:si_unique_call 1552} Tmp_718 := __HAVOC_malloc(436);
    call {:si_unique_call 1553} Tmp_723 := __HAVOC_malloc(444);
    call {:si_unique_call 1554} Tmp_726 := __HAVOC_malloc(180);
    call {:si_unique_call 1555} Tmp_727 := __HAVOC_malloc(300);
    call {:si_unique_call 1556} Tmp_728 := __HAVOC_malloc(140);
    call {:si_unique_call 1557} Tmp_731 := __HAVOC_malloc(336);
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    havoc pDevExt_11;
    Tmp_728 := strConst__li2bpl186;
    call {:si_unique_call 1558} vslice_dummy_var_389 := SerialDbgPrintEx(2, Tmp_728);
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    assume {:nonnull} serialPhysicalMax != 0;
    assume serialPhysicalMax > 0;
    Tmp_709 := strConst__li2bpl187;
    call {:si_unique_call 1559} vslice_dummy_var_390 := SerialDbgPrintEx(4, Tmp_709);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2579;
    havoc vslice_dummy_var_2580;
    call {:si_unique_call 1560} sdv_573 := SerialMemCompare(vslice_dummy_var_2579, vslice_dummy_var_2580, serialPhysicalMax, 0);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_573 != 2;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_722;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_2581;
    havoc vslice_dummy_var_2582;
    havoc vslice_dummy_var_2583;
    call {:si_unique_call 1561} SerialLogError(vslice_dummy_var_2581, 0, vslice_dummy_var_2582, Tmp_724, 0, 0, 0, 43, 0, -1073348582, Tmp_722, vslice_dummy_var_2583, 0, 0);
    Tmp_705 := strConst__li2bpl173;
    call {:si_unique_call 1562} vslice_dummy_var_391 := SerialDbgPrintEx(1, Tmp_705);
    Tmp_696 := -1073741810;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:partition} sdv_573 == 2;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2584;
    havoc vslice_dummy_var_2585;
    call {:si_unique_call 1563} sdv_575 := SerialMemCompare(vslice_dummy_var_2584, vslice_dummy_var_2585, serialPhysicalMax, 0);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} sdv_575 != 2;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_713;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_2586;
    havoc vslice_dummy_var_2587;
    havoc vslice_dummy_var_2588;
    call {:si_unique_call 1564} SerialLogError(vslice_dummy_var_2586, 0, vslice_dummy_var_2587, Tmp_700, 0, 0, 0, 44, 0, -1073348581, Tmp_713, vslice_dummy_var_2588, 0, 0);
    Tmp_714 := strConst__li2bpl174;
    call {:si_unique_call 1565} vslice_dummy_var_392 := SerialDbgPrintEx(1, Tmp_714);
    Tmp_696 := -1073741810;
    goto L1;

  anon78_Then:
    assume {:partition} sdv_575 == 2;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2589;
    havoc vslice_dummy_var_2590;
    call {:si_unique_call 1566} sdv_582 := SerialMemCompare(vslice_dummy_var_2589, vslice_dummy_var_2590, Tmp_702, 0);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} sdv_582 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2591;
    havoc vslice_dummy_var_2592;
    havoc vslice_dummy_var_2593;
    havoc vslice_dummy_var_2594;
    call {:si_unique_call 1567} sdv_568 := SerialMemCompare(vslice_dummy_var_2591, vslice_dummy_var_2592, vslice_dummy_var_2593, vslice_dummy_var_2594);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_568 != 2;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_729;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc vslice_dummy_var_2595;
    havoc vslice_dummy_var_2596;
    havoc vslice_dummy_var_2597;
    havoc vslice_dummy_var_2598;
    call {:si_unique_call 1568} SerialLogError(vslice_dummy_var_2595, 0, vslice_dummy_var_2596, vslice_dummy_var_2597, 0, 0, 0, 45, 0, -1073348580, Tmp_729, vslice_dummy_var_2598, 0, 0);
    Tmp_731 := strConst__li2bpl175;
    call {:si_unique_call 1569} vslice_dummy_var_393 := SerialDbgPrintEx(1, Tmp_731);
    Tmp_696 := -1073741810;
    goto L1;

  anon80_Then:
    assume {:partition} sdv_568 == 2;
    goto L53;

  L53:
    call {:si_unique_call 1570} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1571} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    call {:si_unique_call 1572} sdv_586 := sdv_IsListEmpty(0);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} sdv_586 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L75;

  L75:
    call {:si_unique_call 1573} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto L78;

  L78:
    call {:si_unique_call 1574} sdv_553, sdv_554, sdv_559, sdv_560, pCurDevObj, Tmp_701, Tmp_708, sdv_563, sdv_566, pExtension, oldIrql_4, sdv_577, sdv_580, vslice_dummy_var_394 := SerialFindInitController_loop_L78(sdv_553, sdv_554, sdv_559, sdv_560, pCurDevObj, Tmp_701, Tmp_708, sdv_563, Tmp_710, sdv_566, pExtension, oldIrql_4, sdv_577, sdv_580, Tmp_720, Tmp_721, PConfig_1, vslice_dummy_var_394);
    goto L78_last;

  L78_last:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    Tmp_708 := strConst__li2bpl176;
    call {:si_unique_call 1575} vslice_dummy_var_394 := SerialDbgPrintEx(4, Tmp_708);
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2599;
    havoc vslice_dummy_var_2600;
    havoc vslice_dummy_var_2601;
    havoc vslice_dummy_var_2602;
    call {:si_unique_call 1576} sdv_553 := SerialMemCompare(vslice_dummy_var_2599, vslice_dummy_var_2600, vslice_dummy_var_2601, vslice_dummy_var_2602);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_553 != 2;
    Tmp_715 := strConst__li2bpl177;
    call {:si_unique_call 1577} vslice_dummy_var_395 := SerialDbgPrintEx(1, Tmp_715);
    Tmp_696 := -1073741810;
    goto L1;

  anon87_Then:
    assume {:partition} sdv_553 == 2;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2603;
    havoc vslice_dummy_var_2604;
    call {:si_unique_call 1578} sdv_577 := SerialMemCompare(vslice_dummy_var_2603, vslice_dummy_var_2604, Tmp_721, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_577 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2605;
    havoc vslice_dummy_var_2606;
    havoc vslice_dummy_var_2607;
    havoc vslice_dummy_var_2608;
    call {:si_unique_call 1579} sdv_580 := SerialMemCompare(vslice_dummy_var_2605, vslice_dummy_var_2606, vslice_dummy_var_2607, vslice_dummy_var_2608);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_580 != 2;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_707;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_699;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2609;
    havoc vslice_dummy_var_2610;
    havoc vslice_dummy_var_2611;
    havoc vslice_dummy_var_2612;
    havoc vslice_dummy_var_2613;
    call {:si_unique_call 1580} SerialLogError(vslice_dummy_var_2609, 0, vslice_dummy_var_2610, vslice_dummy_var_2611, 0, 0, 0, 47, 0, -1073348578, Tmp_699, vslice_dummy_var_2612, Tmp_707, vslice_dummy_var_2613);
    Tmp_703 := strConst__li2bpl178;
    call {:si_unique_call 1581} vslice_dummy_var_396 := SerialDbgPrintEx(1, Tmp_703);
    Tmp_696 := -1073741810;
    goto L1;

  anon89_Then:
    assume {:partition} sdv_580 == 2;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2614;
    havoc vslice_dummy_var_2615;
    call {:si_unique_call 1582} sdv_554 := SerialMemCompare(vslice_dummy_var_2614, vslice_dummy_var_2615, Tmp_720, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_554 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2616;
    havoc vslice_dummy_var_2617;
    havoc vslice_dummy_var_2618;
    havoc vslice_dummy_var_2619;
    call {:si_unique_call 1583} sdv_563 := SerialMemCompare(vslice_dummy_var_2616, vslice_dummy_var_2617, vslice_dummy_var_2618, vslice_dummy_var_2619);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_563 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_725;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_730;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2620;
    havoc vslice_dummy_var_2621;
    havoc vslice_dummy_var_2622;
    havoc vslice_dummy_var_2623;
    havoc vslice_dummy_var_2624;
    call {:si_unique_call 1584} SerialLogError(vslice_dummy_var_2620, 0, vslice_dummy_var_2621, vslice_dummy_var_2622, 0, 0, 0, 48, 0, -1073348577, Tmp_730, vslice_dummy_var_2623, Tmp_725, vslice_dummy_var_2624);
    Tmp_718 := strConst__li2bpl179;
    call {:si_unique_call 1585} vslice_dummy_var_397 := SerialDbgPrintEx(1, Tmp_718);
    Tmp_696 := -1073741810;
    goto L1;

  anon91_Then:
    assume {:partition} sdv_563 != 1;
    goto L105;

  L105:
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2625;
    havoc vslice_dummy_var_2626;
    call {:si_unique_call 1586} sdv_566 := SerialMemCompare(vslice_dummy_var_2625, vslice_dummy_var_2626, Tmp_710, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_566 != 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2627;
    havoc vslice_dummy_var_2628;
    havoc vslice_dummy_var_2629;
    havoc vslice_dummy_var_2630;
    call {:si_unique_call 1587} sdv_559 := SerialMemCompare(vslice_dummy_var_2627, vslice_dummy_var_2628, vslice_dummy_var_2629, vslice_dummy_var_2630);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_559 == 1;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_704;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_719;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2631;
    havoc vslice_dummy_var_2632;
    havoc vslice_dummy_var_2633;
    havoc vslice_dummy_var_2634;
    havoc vslice_dummy_var_2635;
    call {:si_unique_call 1588} SerialLogError(vslice_dummy_var_2631, 0, vslice_dummy_var_2632, vslice_dummy_var_2633, 0, 0, 0, 49, 0, -1073348576, Tmp_719, vslice_dummy_var_2634, Tmp_704, vslice_dummy_var_2635);
    Tmp_723 := strConst__li2bpl180;
    call {:si_unique_call 1589} vslice_dummy_var_398 := SerialDbgPrintEx(1, Tmp_723);
    Tmp_696 := -1073741810;
    goto L1;

  anon93_Then:
    assume {:partition} sdv_559 != 1;
    goto L84;

  L84:
    call {:si_unique_call 1590} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1591} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    call {:si_unique_call 1592} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 1593} sdv_560 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_560;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    assume false;
    return;

  anon92_Then:
    assume {:partition} sdv_566 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} sdv_554 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} sdv_577 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;

  anon83_Then:
    goto L79;

  L79:
    call {:si_unique_call 1594} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1595} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    call {:si_unique_call 1596} sdv_587 := sdv_IsListEmpty(0);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_587 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L170;

  L170:
    call {:si_unique_call 1597} sdv_KeReleaseSpinLock(0, oldIrql_4);
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    havoc vslice_dummy_var_2636;
    havoc vslice_dummy_var_2637;
    call {:si_unique_call 1598} sdv_556 := SerialMemCompare(vslice_dummy_var_2636, vslice_dummy_var_2637, Tmp_711, 0);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_556 != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto L182;

  L182:
    call {:si_unique_call 1599} pCurDevObj, Tmp_701, sdv_570, pExtension, oldIrql_4, sdv_583 := SerialFindInitController_loop_L182(pCurDevObj, Tmp_701, sdv_570, pExtension, oldIrql_4, sdv_583, PConfig_1);
    goto L182_last;

  L182_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2638;
    havoc vslice_dummy_var_2639;
    havoc vslice_dummy_var_2640;
    havoc vslice_dummy_var_2641;
    call {:si_unique_call 1600} sdv_583 := SerialMemCompare(vslice_dummy_var_2638, vslice_dummy_var_2639, vslice_dummy_var_2640, vslice_dummy_var_2641);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_583 == 0;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    goto L194;

  L194:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_698;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    havoc Tmp_717;
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} PDevObj_12 != 0;
    assume PDevObj_12 > 0;
    assume {:nonnull} pDevExt_11 != 0;
    assume pDevExt_11 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc vslice_dummy_var_2642;
    havoc vslice_dummy_var_2643;
    havoc vslice_dummy_var_2644;
    havoc vslice_dummy_var_2645;
    havoc vslice_dummy_var_2646;
    call {:si_unique_call 1601} SerialLogError(vslice_dummy_var_2642, 0, vslice_dummy_var_2643, vslice_dummy_var_2644, 0, 0, 0, 50, 0, -1073348575, Tmp_717, vslice_dummy_var_2645, Tmp_698, vslice_dummy_var_2646);
    Tmp_727 := strConst__li2bpl182;
    call {:si_unique_call 1602} vslice_dummy_var_401 := SerialDbgPrintEx(1, Tmp_727);
    Tmp_696 := -1073741810;
    goto L1;

  anon102_Then:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    Tmp_712 := strConst__li2bpl183;
    call {:si_unique_call 1603} vslice_dummy_var_402 := SerialDbgPrintEx(4, Tmp_712);
    Tmp_716 := strConst__li2bpl184;
    call {:si_unique_call 1604} vslice_dummy_var_403 := SerialDbgPrintEx(4, Tmp_716);
    call {:si_unique_call 1605} status_22 := SerialInitMultiPort(pExtension, PConfig_1, PDevObj_12);
    Tmp_696 := status_22;
    goto L1;

  anon103_Then:
    goto L194;

  anon101_Then:
    assume {:partition} sdv_583 != 0;
    goto L183;

  L183:
    call {:si_unique_call 1606} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1607} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 1608} sdv_570 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_570;
    goto L216;

  L216:
    call {:si_unique_call 1609} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    assume false;
    return;

  anon105_Then:
    goto L178;

  L178:
    Tmp_726 := strConst__li2bpl181;
    call {:si_unique_call 1610} vslice_dummy_var_399 := SerialDbgPrintEx(4, Tmp_726);
    call {:si_unique_call 1611} status_22 := SerialInitOneController(PDevObj_12, PConfig_1);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} status_22 >= 0;
    call {:si_unique_call 1612} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1613} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    call {:si_unique_call 1614} sdv_548 := sdv_IsListEmpty(0);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} sdv_548 != 0;
    pCurDevObj := 0;
    pExtension := 0;
    goto L241;

  L241:
    call {:si_unique_call 1615} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    goto L246;

  L246:
    call {:si_unique_call 1616} sdv_561, pCurDevObj, Tmp_701, pExtension, oldIrql_4 := SerialFindInitController_loop_L246(sdv_561, pCurDevObj, Tmp_701, pExtension, oldIrql_4, PConfig_1);
    goto L246_last;

  L246_last:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} PConfig_1 != 0;
    assume PConfig_1 > 0;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    call {:si_unique_call 1617} sdv_ExFreePool(0);
    Tmp_697 := strConst__li2bpl185;
    assume {:nonnull} pExtension != 0;
    assume pExtension > 0;
    havoc Tmp_706;
    call {:si_unique_call 1618} vslice_dummy_var_400 := SerialDbgPrintEx(4, Tmp_697);
    call {:si_unique_call 1619} vslice_dummy_var_388 := KeSynchronizeExecution(0, li2bplFunctionConstant398, 0);
    Tmp_696 := 0;
    goto L1;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 1620} Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    Mem_T.INT4[Tmp_701] := oldIrql_4;
    call {:si_unique_call 1621} sdv_KeAcquireSpinLock(0, Tmp_701);
    assume {:nonnull} Tmp_701 != 0;
    assume Tmp_701 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_701];
    assume {:nonnull} pCurDevObj != 0;
    assume pCurDevObj > 0;
    havoc pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 1622} sdv_561 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_561;
    goto L264;

  L264:
    call {:si_unique_call 1623} sdv_KeReleaseSpinLock(0, oldIrql_4);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    goto anon112_Then, anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    assume false;
    return;

  anon112_Then:
    goto L245;

  L245:
    Tmp_696 := 0;
    goto L1;

  anon111_Then:
    goto L245;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;

  anon108_Then:
    goto L245;

  anon107_Then:
    assume {:partition} sdv_548 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1624} sdv_555 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_555;
    goto L241;

  anon106_Then:
    assume {:partition} 0 > status_22;
    Tmp_696 := status_22;
    goto L1;

  anon104_Then:
    goto L178;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;

  anon97_Then:
    goto L178;

  anon96_Then:
    assume {:partition} sdv_556 == 0;
    goto L178;

  anon95_Then:
    assume {:partition} sdv_587 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1625} sdv_576 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_576;
    goto L170;

  anon82_Then:
    goto L79;

  anon81_Then:
    assume {:partition} sdv_586 == 0;
    havoc pCurDevObj;
    call {:si_unique_call 1626} sdv_549 := sdv_containing_record(pCurDevObj, 32);
    pExtension := sdv_549;
    goto L75;

  anon79_Then:
    assume {:partition} sdv_582 == 0;
    goto L53;
}



procedure {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_732: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_732 == -1073741811 || Tmp_732 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetDivisorFromBaud"} SerialGetDivisorFromBaud(actual_ClockRate: int, actual_DesiredBaud: int, actual_AppropriateDivisor_1: int) returns (Tmp_732: int)
{
  var {:scalar} maxRemain: int;
  var {:scalar} maxRemain80: int;
  var {:scalar} remainder: int;
  var {:scalar} maxRemain30: int;
  var {:scalar} maxRemain42: int;
  var {:scalar} maxRemain18: int;
  var {:scalar} calculatedDivisor: int;
  var {:scalar} status_23: int;
  var {:scalar} denominator: int;
  var {:scalar} ClockRate: int;
  var {:scalar} DesiredBaud: int;
  var {:pointer} AppropriateDivisor_1: int;

  anon0:
    ClockRate := actual_ClockRate;
    DesiredBaud := actual_DesiredBaud;
    AppropriateDivisor_1 := actual_AppropriateDivisor_1;
    status_23 := 0;
    maxRemain18 := 18432;
    maxRemain30 := 30720;
    maxRemain42 := 42336;
    maxRemain80 := 80000;
    denominator := DesiredBaud * 16;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} 0 >= DesiredBaud;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  L21:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] == -1;
    status_23 := -1073741811;
    goto L22;

  L22:
    Tmp_732 := status_23;
    return;

  anon52_Then:
    assume {:partition} Mem_T.INT4[AppropriateDivisor_1] != -1;
    goto L22;

  anon74_Then:
    assume {:partition} DesiredBaud > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} DesiredBaud > denominator;
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := -1;
    goto L21;

  anon51_Then:
    assume {:partition} denominator >= DesiredBaud;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} ClockRate == 1843200;
    maxRemain := maxRemain18;
    goto L28;

  L28:
    calculatedDivisor := INTDIV(ClockRate, denominator);
    remainder := INTMOD(ClockRate, denominator);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} remainder * 2 > ClockRate;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} DesiredBaud != 110;
    calculatedDivisor := calculatedDivisor + 1;
    goto L31;

  L31:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} DesiredBaud >= 9600;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} remainder >= maxRemain;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} ClockRate > remainder + maxRemain;
    calculatedDivisor := -1;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} denominator > ClockRate;
    calculatedDivisor := -1;
    goto L38;

  L38:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} ClockRate == 1843200;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 2;
    goto L42;

  L42:
    assume {:nonnull} AppropriateDivisor_1 != 0;
    assume AppropriateDivisor_1 > 0;
    Mem_T.INT4[AppropriateDivisor_1] := calculatedDivisor;
    goto L21;

  anon62_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon60_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} ClockRate == 3072000;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 13;
    goto L42;

  anon64_Then:
    assume {:partition} DesiredBaud != 14400;
    goto L42;

  anon61_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} ClockRate == 4233600;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} DesiredBaud == 9600;
    calculatedDivisor := 28;
    goto L42;

  anon66_Then:
    assume {:partition} DesiredBaud != 9600;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 18;
    goto L42;

  anon67_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} DesiredBaud == 19200;
    calculatedDivisor := 14;
    goto L42;

  anon68_Then:
    assume {:partition} DesiredBaud != 19200;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} DesiredBaud == 38400;
    calculatedDivisor := 7;
    goto L42;

  anon69_Then:
    assume {:partition} DesiredBaud != 38400;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 5;
    goto L42;

  anon70_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon63_Then:
    assume {:partition} ClockRate != 4233600;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} ClockRate == 8000000;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} DesiredBaud == 14400;
    calculatedDivisor := 35;
    goto L42;

  anon71_Then:
    assume {:partition} DesiredBaud != 14400;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} DesiredBaud == 56000;
    calculatedDivisor := 9;
    goto L42;

  anon72_Then:
    assume {:partition} DesiredBaud != 56000;
    goto L42;

  anon65_Then:
    assume {:partition} ClockRate != 8000000;
    goto L42;

  anon57_Then:
    assume {:partition} ClockRate >= denominator;
    goto L38;

  anon59_Then:
    assume {:partition} remainder + maxRemain >= ClockRate;
    goto L34;

  anon58_Then:
    assume {:partition} maxRemain > remainder;
    goto L34;

  anon55_Then:
    assume {:partition} 9600 > DesiredBaud;
    goto L34;

  anon56_Then:
    assume {:partition} DesiredBaud == 110;
    goto L31;

  anon75_Then:
    assume {:partition} ClockRate >= remainder * 2;
    goto L31;

  anon53_Then:
    assume {:partition} ClockRate != 1843200;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} ClockRate == 3072000;
    maxRemain := maxRemain30;
    goto L28;

  anon54_Then:
    assume {:partition} ClockRate != 3072000;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} ClockRate == 4233600;
    maxRemain := maxRemain42;
    goto L28;

  anon73_Then:
    assume {:partition} ClockRate != 4233600;
    maxRemain := maxRemain80;
    goto L28;
}



procedure {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_13: int, actual_DisableUART: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDisableInterfacesResources"} SerialDisableInterfacesResources(actual_PDevObj_13: int, actual_DisableUART: int)
{
  var {:pointer} pDevExt_12: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} sdv_589: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} countSoFar_1: int;
  var {:pointer} Tmp_739: int;
  var {:pointer} PDevObj_13: int;
  var {:scalar} DisableUART: int;
  var vslice_dummy_var_404: int;
  var vslice_dummy_var_405: int;
  var vslice_dummy_var_406: int;
  var vslice_dummy_var_407: int;

  anon0:
    call {:si_unique_call 1627} vslice_dummy_var_404 := __HAVOC_malloc(4);
    PDevObj_13 := actual_PDevObj_13;
    DisableUART := actual_DisableUART;
    call {:si_unique_call 1628} Tmp_736 := __HAVOC_malloc(104);
    call {:si_unique_call 1629} Tmp_738 := __HAVOC_malloc(136);
    assume {:nonnull} PDevObj_13 != 0;
    assume PDevObj_13 > 0;
    havoc pDevExt_12;
    call {:si_unique_call 1630} sdv_do_paged_code_check();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DisableUART != 0;
    Tmp_739 := strConst__li2bpl189;
    goto L11;

  L11:
    Tmp_738 := strConst__li2bpl190;
    call {:si_unique_call 1631} vslice_dummy_var_406 := SerialDbgPrintEx(2, Tmp_738);
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 1) != 0;
    call {:si_unique_call 1632} sdv_589 := IoGetConfigurationInformation();
    assume {:nonnull} sdv_589 != 0;
    assume sdv_589 > 0;
    countSoFar_1 := SerialCount__CONFIGURATION_INFORMATION(sdv_589);
    assume {:nonnull} countSoFar_1 != 0;
    assume countSoFar_1 > 0;
    Mem_T.INT4[countSoFar_1] := Mem_T.INT4[countSoFar_1] - 1;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 2) != 0;
    goto L26;

  L26:
    call {:si_unique_call 1633} vslice_dummy_var_405 := IoWMIRegistrationControl(0, 2);
    goto L15;

  L15:
    call {:si_unique_call 1634} SerialUndoExternalNaming(pDevExt_12);
    Tmp_736 := strConst__li2bpl191;
    call {:si_unique_call 1635} vslice_dummy_var_407 := SerialDbgPrintEx(2, Tmp_736);
    return;

  anon12_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 2) == 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} DisableUART != 0;
    assume {:nonnull} pDevExt_12 != 0;
    assume pDevExt_12 > 0;
    goto L29;

  L29:
    call {:si_unique_call 1636} SerialReleaseResources(pDevExt_12);
    goto L26;

  anon11_Then:
    assume {:partition} DisableUART == 0;
    goto L29;

  anon10_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(pDevExt_12)], 1) == 0;
    goto L15;

  anon9_Then:
    assume {:partition} DisableUART == 0;
    Tmp_739 := strConst__li2bpl188;
    goto L11;
}



procedure {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_740: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_740 == 0 || Tmp_740 == 2 || Tmp_740 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialMemCompare"} SerialMemCompare(actual_structPtr888A: int, actual_SpanOfA: int, actual_structPtr888B: int, actual_SpanOfB: int) returns (Tmp_740: int)
{
  var {:scalar} A: int;
  var {:scalar} B: int;
  var {:scalar} b_1: int;
  var {:scalar} higher: int;
  var {:scalar} lowerSpan: int;
  var {:scalar} lower: int;
  var {:scalar} a: int;
  var {:pointer} structPtr888A: int;
  var {:scalar} SpanOfA: int;
  var {:pointer} structPtr888B: int;
  var {:scalar} SpanOfB: int;

  anon0:
    call {:si_unique_call 1637} A := __HAVOC_malloc(20);
    call {:si_unique_call 1638} B := __HAVOC_malloc(20);
    call {:si_unique_call 1639} b_1 := __HAVOC_malloc(20);
    call {:si_unique_call 1640} higher := __HAVOC_malloc(20);
    call {:si_unique_call 1641} lower := __HAVOC_malloc(20);
    call {:si_unique_call 1642} a := __HAVOC_malloc(20);
    structPtr888A := actual_structPtr888A;
    SpanOfA := actual_SpanOfA;
    structPtr888B := actual_structPtr888B;
    SpanOfB := actual_SpanOfB;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} structPtr888A != 0;
    assume structPtr888A > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} structPtr888B != 0;
    assume structPtr888B > 0;
    call {:si_unique_call 1643} sdv_do_paged_code_check();
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} A != 0;
    assume A > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} B != 0;
    assume B > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_740 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfB;
    goto L20;

  L20:
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_740 := 2;
    goto L1;

  anon8_Then:
    Tmp_740 := 1;
    goto L1;

  anon7_Then:
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} b_1 != 0;
    assume b_1 > 0;
    assume {:nonnull} higher != 0;
    assume higher > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    assume {:nonnull} a != 0;
    assume a > 0;
    assume {:nonnull} lower != 0;
    assume lower > 0;
    lowerSpan := SpanOfA;
    goto L20;
}



procedure {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_14: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_742: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_742 == 0 || Tmp_742 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDoesPortExist"} SerialDoesPortExist(actual_Extension_14: int, actual_InsertString: int, actual_ForceFifo: int, actual_LogFifo: int) returns (Tmp_742: int)
{
  var {:scalar} oldLCRContents: int;
  var {:pointer} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:scalar} Tmp_746: int;
  var {:pointer} Tmp_749: int;
  var {:pointer} PDivisor: int;
  var {:scalar} regContents: int;
  var {:scalar} Lsb: int;
  var {:scalar} value1: int;
  var {:scalar} Tmp_759: int;
  var {:dopa} {:scalar} value2: int;
  var {:scalar} returnValue: int;
  var {:scalar} oldIrql_5: int;
  var {:scalar} sdv_597: int;
  var {:scalar} Tmp_764: int;
  var {:scalar} Tmp_765: int;
  var {:scalar} sdv_599: int;
  var {:scalar} LineControl_1: int;
  var {:pointer} Tmp_768: int;
  var {:pointer} Address_2: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} Extension_14: int;
  var {:pointer} InsertString: int;
  var {:scalar} ForceFifo: int;
  var {:scalar} LogFifo: int;
  var boogieTmp: int;
  var vslice_dummy_var_408: int;
  var vslice_dummy_var_409: int;
  var vslice_dummy_var_410: int;
  var vslice_dummy_var_411: int;
  var vslice_dummy_var_412: int;
  var vslice_dummy_var_2647: int;
  var vslice_dummy_var_2648: int;
  var vslice_dummy_var_2649: int;
  var vslice_dummy_var_2650: int;
  var vslice_dummy_var_2651: int;
  var vslice_dummy_var_2652: int;
  var vslice_dummy_var_2653: int;
  var vslice_dummy_var_2654: int;

  anon0:
    call {:si_unique_call 1644} Tmp_759 := __HAVOC_malloc(20);
    call {:si_unique_call 1645} value2 := __HAVOC_malloc(4);
    call {:si_unique_call 1646} Tmp_764 := __HAVOC_malloc(20);
    Extension_14 := actual_Extension_14;
    InsertString := actual_InsertString;
    ForceFifo := actual_ForceFifo;
    LogFifo := actual_LogFifo;
    call {:si_unique_call 1647} Tmp_744 := __HAVOC_malloc(148);
    returnValue := 1;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1648} oldLCRContents := corral_nondet();
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1649} vslice_dummy_var_409 := corral_nondet();
    call {:si_unique_call 1650} Tmp_745 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    Mem_T.INT4[Tmp_745] := oldIrql_5;
    call {:si_unique_call 1651} sdv_KeRaiseIrql(30, Tmp_745);
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_745];
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1652} sdv_597 := corral_nondet();
    value1 := sdv_597;
    call {:si_unique_call 1653} value1 := corral_nondet();
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1654} sdv_599 := corral_nondet();
    value1 := BOR(value1, sdv_599);
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    havoc Address_2;
    PDivisor := value2;
    call {:si_unique_call 1655} LineControl_1 := corral_nondet();
    call {:si_unique_call 1656} Lsb := corral_nondet();
    call {:si_unique_call 1657} vslice_dummy_var_410 := corral_nondet();
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    Mem_T.INT4[PDivisor] := Lsb;
    assume {:nonnull} PDivisor != 0;
    assume PDivisor > 0;
    call {:si_unique_call 1658} boogieTmp := corral_nondet();
    Mem_T.INT4[PDivisor] := boogieTmp;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1659} sdv_KeLowerIrql(oldIrql_5);
    assume {:nonnull} value2 != 0;
    assume value2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} value1 == Mem_T.INT4[value2];
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_746;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    havoc Tmp_768;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    havoc vslice_dummy_var_2647;
    havoc vslice_dummy_var_2648;
    havoc vslice_dummy_var_2649;
    havoc vslice_dummy_var_2650;
    call {:si_unique_call 1660} SerialLogError(vslice_dummy_var_2647, vslice_dummy_var_2648, vslice_dummy_var_2649, Tmp_759, 0, 0, 0, 62, 0, -1073348572, Tmp_746, vslice_dummy_var_2650, 0, 0);
    returnValue := 0;
    goto L89;

  L89:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} returnValue != 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1661} regContents := corral_nondet();
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(regContents, 192) != 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    call {:si_unique_call 1662} vslice_dummy_var_411 := corral_nondet();
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto L116;

  L116:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} ForceFifo != 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L133;

  L133:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} LogFifo != 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    havoc Tmp_765;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    havoc Tmp_770;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} InsertString != 0;
    assume InsertString > 0;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    havoc vslice_dummy_var_2651;
    havoc vslice_dummy_var_2652;
    havoc vslice_dummy_var_2653;
    havoc vslice_dummy_var_2654;
    call {:si_unique_call 1663} SerialLogError(vslice_dummy_var_2651, vslice_dummy_var_2652, vslice_dummy_var_2653, Tmp_764, 0, 0, 0, 15, 0, -1073348606, Tmp_765, vslice_dummy_var_2654, 0, 0);
    goto L136;

  L136:
    Tmp_744 := strConst__li2bpl192;
    call {:si_unique_call 1664} vslice_dummy_var_412 := SerialDbgPrintEx(4, Tmp_744);
    goto L134;

  L134:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L97;

  L97:
    Tmp_742 := returnValue;
    return;

  anon29_Then:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    call {:si_unique_call 1665} vslice_dummy_var_408 := corral_nondet();
    goto L97;

  anon30_Then:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    havoc Tmp_749;
    assume {:nonnull} Tmp_749 != 0;
    assume Tmp_749 > 0;
    goto L97;

  anon27_Then:
    goto L97;

  anon28_Then:
    assume {:partition} LogFifo == 0;
    goto L136;

  anon26_Then:
    goto L134;

  anon25_Then:
    goto L131;

  L131:
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    assume {:nonnull} Extension_14 != 0;
    assume Extension_14 > 0;
    goto L133;

  anon24_Then:
    assume {:partition} ForceFifo == 0;
    goto L131;

  anon23_Then:
    assume {:partition} BAND(regContents, 192) == 0;
    goto L116;

  anon22_Then:
    assume {:partition} returnValue == 0;
    goto L97;

  anon21_Then:
    assume {:partition} value1 != Mem_T.INT4[value2];
    goto L89;
}



procedure {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_14: int, actual_PConfigData_1: int) returns (Tmp_778: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_778 == -1073741670 || Tmp_778 == -1073741709 || Tmp_778 == -1073741810 || Tmp_778 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialInitOneController"} SerialInitOneController(actual_PDevObj_14: int, actual_PConfigData_1: int) returns (Tmp_778: int)
{
  var {:pointer} pDevExt_13: int;
  var {:scalar} status_24: int;
  var {:pointer} PDevObj_14: int;
  var {:pointer} PConfigData_1: int;

  anon0:
    PDevObj_14 := actual_PDevObj_14;
    PConfigData_1 := actual_PConfigData_1;
    call {:si_unique_call 1666} sdv_do_paged_code_check();
    call {:si_unique_call 1667} status_24 := SerialInitController(PDevObj_14, PConfigData_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} PDevObj_14 != 0;
    assume PDevObj_14 > 0;
    havoc pDevExt_13;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    assume {:nonnull} pDevExt_13 != 0;
    assume pDevExt_13 > 0;
    goto L13;

  L13:
    Tmp_778 := status_24;
    return;

  anon3_Then:
    assume {:partition} 0 > status_24;
    goto L13;
}



procedure {:origName "SerialInitController"} SerialInitController(actual_PDevObj_15: int, actual_PConfigData_2: int) returns (Tmp_780: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_780 == -1073741670 || Tmp_780 == -1073741709 || Tmp_780 == -1073741810 || Tmp_780 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialInitController"} SerialInitController(actual_PDevObj_15: int, actual_PConfigData_2: int) returns (Tmp_780: int)
{
  var {:scalar} sdv_603: int;
  var {:pointer} Tmp_781: int;
  var {:scalar} sdv_604: int;
  var {:scalar} sdv_605: int;
  var {:scalar} sdv_606: int;
  var {:scalar} Tmp_782: int;
  var {:scalar} sdv_608: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_784: int;
  var {:scalar} sdv_609: int;
  var {:scalar} Tmp_786: int;
  var {:scalar} Tmp_787: int;
  var {:scalar} sdv_610: int;
  var {:scalar} sdv_611: int;
  var {:scalar} sdv_612: int;
  var {:pointer} Tmp_788: int;
  var {:scalar} Tmp_789: int;
  var {:scalar} sdv_613: int;
  var {:pointer} Tmp_790: int;
  var {:scalar} sdv_614: int;
  var {:scalar} sdv_615: int;
  var {:scalar} sdv_616: int;
  var {:scalar} Tmp_791: int;
  var {:scalar} sdv_617: int;
  var {:scalar} Tmp_792: int;
  var {:scalar} sdv_618: int;
  var {:scalar} sdv_619: int;
  var {:scalar} Tmp_793: int;
  var {:pointer} pDevExt_14: int;
  var {:pointer} Tmp_794: int;
  var {:dopa} {:scalar} junk: int;
  var {:scalar} sdv_621: int;
  var {:scalar} sdv_622: int;
  var {:pointer} sdv_623: int;
  var {:scalar} Tmp_795: int;
  var {:scalar} sdv_624: int;
  var {:scalar} sdv_625: int;
  var {:scalar} sdv_627: int;
  var {:scalar} sdv_628: int;
  var {:scalar} sdv_631: int;
  var {:pointer} Tmp_796: int;
  var {:scalar} sdv_632: int;
  var {:pointer} sdv_634: int;
  var {:pointer} sdv_635: int;
  var {:scalar} sdv_636: int;
  var {:scalar} Tmp_797: int;
  var {:scalar} sdv_637: int;
  var {:scalar} sdv_638: int;
  var {:scalar} sdv_639: int;
  var {:scalar} sdv_640: int;
  var {:scalar} sdv_641: int;
  var {:scalar} sdv_642: int;
  var {:scalar} sdv_643: int;
  var {:scalar} sdv_645: int;
  var {:scalar} sdv_646: int;
  var {:scalar} status_25: int;
  var {:scalar} allocedISRSw: int;
  var {:scalar} sdv_647: int;
  var {:pointer} Tmp_798: int;
  var {:scalar} sdv_648: int;
  var {:pointer} Tmp_799: int;
  var {:scalar} Tmp_801: int;
  var {:scalar} sdv_649: int;
  var {:scalar} sdv_650: int;
  var {:scalar} sdv_652: int;
  var {:pointer} PDevObj_15: int;
  var {:pointer} PConfigData_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_413: int;
  var vslice_dummy_var_414: int;
  var vslice_dummy_var_415: int;
  var vslice_dummy_var_416: int;
  var vslice_dummy_var_417: int;
  var vslice_dummy_var_418: int;
  var vslice_dummy_var_419: int;
  var vslice_dummy_var_420: int;
  var vslice_dummy_var_2655: int;
  var vslice_dummy_var_2656: int;
  var vslice_dummy_var_2657: int;
  var vslice_dummy_var_2658: int;
  var vslice_dummy_var_2659: int;
  var vslice_dummy_var_2660: int;
  var vslice_dummy_var_2661: int;
  var vslice_dummy_var_2662: int;
  var vslice_dummy_var_2663: int;
  var vslice_dummy_var_2664: int;
  var vslice_dummy_var_2665: int;
  var vslice_dummy_var_2666: int;
  var vslice_dummy_var_2667: int;
  var vslice_dummy_var_2668: int;
  var vslice_dummy_var_2669: int;
  var vslice_dummy_var_2670: int;
  var vslice_dummy_var_2671: int;
  var vslice_dummy_var_2672: int;
  var vslice_dummy_var_2673: int;
  var vslice_dummy_var_2674: int;
  var vslice_dummy_var_2675: int;
  var vslice_dummy_var_2676: int;
  var vslice_dummy_var_2677: int;
  var vslice_dummy_var_2678: int;
  var vslice_dummy_var_2679: int;
  var vslice_dummy_var_2680: int;
  var vslice_dummy_var_2681: int;
  var vslice_dummy_var_2682: int;
  var vslice_dummy_var_2683: int;
  var vslice_dummy_var_2684: int;
  var vslice_dummy_var_2685: int;
  var vslice_dummy_var_2686: int;
  var vslice_dummy_var_2687: int;
  var vslice_dummy_var_2688: int;
  var vslice_dummy_var_2689: int;
  var vslice_dummy_var_2690: int;
  var vslice_dummy_var_2691: int;
  var vslice_dummy_var_2692: int;
  var vslice_dummy_var_2693: int;
  var vslice_dummy_var_2694: int;
  var vslice_dummy_var_2695: int;
  var vslice_dummy_var_2696: int;
  var vslice_dummy_var_2697: int;
  var vslice_dummy_var_2698: int;

  anon0:
    call {:si_unique_call 1668} Tmp_787 := __HAVOC_malloc(20);
    call {:si_unique_call 1669} Tmp_789 := __HAVOC_malloc(20);
    call {:si_unique_call 1670} Tmp_791 := __HAVOC_malloc(20);
    call {:si_unique_call 1671} junk := __HAVOC_malloc(4);
    call {:si_unique_call 1672} Tmp_801 := __HAVOC_malloc(20);
    PDevObj_15 := actual_PDevObj_15;
    PConfigData_2 := actual_PConfigData_2;
    call {:si_unique_call 1673} Tmp_781 := __HAVOC_malloc(204);
    call {:si_unique_call 1674} Tmp_783 := __HAVOC_malloc(204);
    call {:si_unique_call 1675} Tmp_784 := __HAVOC_malloc(196);
    call {:si_unique_call 1676} Tmp_790 := __HAVOC_malloc(136);
    call {:si_unique_call 1677} Tmp_794 := __HAVOC_malloc(140);
    call {:si_unique_call 1678} Tmp_796 := __HAVOC_malloc(840);
    call {:si_unique_call 1679} Tmp_798 := __HAVOC_malloc(184);
    call {:si_unique_call 1680} Tmp_799 := __HAVOC_malloc(180);
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    havoc pDevExt_14;
    status_25 := 0;
    allocedISRSw := 0;
    call {:si_unique_call 1681} sdv_do_paged_code_check();
    Tmp_798 := strConst__li2bpl193;
    call {:si_unique_call 1682} vslice_dummy_var_413 := SerialDbgPrintEx(4, Tmp_798);
    assume {:nonnull} KdComPortInUse != 0;
    assume KdComPortInUse > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    Tmp_799 := strConst__li2bpl194;
    call {:si_unique_call 1683} vslice_dummy_var_414 := SerialDbgPrintEx(0, Tmp_799);
    Tmp_790 := strConst__li2bpl195;
    call {:si_unique_call 1684} vslice_dummy_var_415 := SerialDbgPrintEx(0, Tmp_790);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_786;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2655;
    havoc vslice_dummy_var_2656;
    havoc vslice_dummy_var_2657;
    call {:si_unique_call 1685} SerialLogError(vslice_dummy_var_2655, 0, vslice_dummy_var_2656, Tmp_791, 0, 0, 0, 3, 0, -1073348607, Tmp_786, vslice_dummy_var_2657, 0, 0);
    Tmp_780 := -1073741670;
    goto L1;

  L1:
    return;

  anon77_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto L36;

  L36:
    call {:si_unique_call 1686} KeInitializeTimer(0);
    call {:si_unique_call 1687} KeInitializeTimer(0);
    call {:si_unique_call 1688} KeInitializeTimer(0);
    call {:si_unique_call 1689} KeInitializeTimer(0);
    call {:si_unique_call 1690} KeInitializeTimer(0);
    call {:si_unique_call 1691} KeInitializeTimer(0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1692} KeInitializeDpc(CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant220, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1693} KeInitializeDpc(CompleteReadDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant139, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1694} KeInitializeDpc(TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant143, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1695} KeInitializeDpc(IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant145, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1696} KeInitializeDpc(TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant222, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1697} KeInitializeDpc(CommErrorDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant112, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1698} KeInitializeDpc(CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant353, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1699} KeInitializeDpc(TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant355, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1700} KeInitializeDpc(CommWaitDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant200, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1701} KeInitializeDpc(XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant224, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1702} KeInitializeDpc(XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant223, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1703} KeInitializeDpc(StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant390, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1704} KeInitializeDpc(PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant391, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1705} KeInitializeDpc(IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant179, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1706} KeInitializeDpc(SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(pDevExt_14), li2bplFunctionConstant174, 0);
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_782;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2658;
    havoc vslice_dummy_var_2659;
    havoc vslice_dummy_var_2660;
    havoc vslice_dummy_var_2661;
    call {:si_unique_call 1707} sdv_634 := SerialGetMappedAddress(vslice_dummy_var_2658, vslice_dummy_var_2659, vslice_dummy_var_2660, vslice_dummy_var_2661, Tmp_782, UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14));
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc Tmp_793;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2662;
    havoc vslice_dummy_var_2663;
    havoc vslice_dummy_var_2664;
    havoc vslice_dummy_var_2665;
    call {:si_unique_call 1708} sdv_623 := SerialGetMappedAddress(vslice_dummy_var_2662, vslice_dummy_var_2663, vslice_dummy_var_2664, vslice_dummy_var_2665, Tmp_793, UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_14));
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L113;

  L113:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L154;

  L154:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 4;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 8;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 14;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L174;

  L174:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} 1 > Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)];
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L177;

  L177:
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2666;
    call {:si_unique_call 1709} sdv_628 := SerialDoesPortExist(pDevExt_14, DeviceName__SERIAL_DEVICE_EXTENSION(pDevExt_14), Mem_T.INT4[ForceFifoEnable__CONFIG_DATA(PConfigData_2)], vslice_dummy_var_2666);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} sdv_628 != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] != 0;
    Tmp_784 := strConst__li2bpl198;
    call {:si_unique_call 1710} vslice_dummy_var_416 := SerialDbgPrintEx(3, Tmp_784);
    status_25 := -1073741810;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_795;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2667;
    havoc vslice_dummy_var_2668;
    havoc vslice_dummy_var_2669;
    call {:si_unique_call 1711} SerialLogError(vslice_dummy_var_2667, PDevObj_15, vslice_dummy_var_2668, Tmp_787, 0, 0, 0, 57, 0, -1073348574, Tmp_795, vslice_dummy_var_2669, 0, 0);
    goto L139;

  L139:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_25 >= 0;
    goto L141;

  L141:
    Tmp_780 := status_25;
    goto L1;

  anon81_Then:
    assume {:partition} 0 > status_25;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} allocedISRSw != 0;
    call {:si_unique_call 1712} sdv_ExFreePool(0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L142;

  L142:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] != 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2670;
    call {:si_unique_call 1713} MmUnmapIoSpace(0, vslice_dummy_var_2670);
    goto L147;

  L147:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_14)] != 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2671;
    call {:si_unique_call 1714} MmUnmapIoSpace(0, vslice_dummy_var_2671);
    goto L141;

  anon84_Then:
    assume {:partition} Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_14)] == 0;
    goto L141;

  anon83_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] == 0;
    goto L147;

  anon82_Then:
    assume {:partition} allocedISRSw == 0;
    goto L142;

  anon87_Then:
    assume {:partition} Mem_T.INT4[DisablePort__CONFIG_DATA(PConfigData_2)] == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1715} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1716} boogieTmp := corral_nondet();
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    call {:si_unique_call 1717} boogieTmp := corral_nondet();
    Tmp_796 := strConst__li2bpl200;
    call {:si_unique_call 1718} vslice_dummy_var_417 := SerialDbgPrintEx(4, Tmp_796);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2672;
    call {:si_unique_call 1719} sdv_612 := SerialGetDivisorFromBaud(vslice_dummy_var_2672, 75, junk);
    call {:si_unique_call 1720} sdv_615 := sdv_NT_ERROR(sdv_612);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} sdv_615 != 0;
    goto L218;

  L218:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2673;
    call {:si_unique_call 1721} sdv_637 := SerialGetDivisorFromBaud(vslice_dummy_var_2673, 110, junk);
    call {:si_unique_call 1722} sdv_641 := sdv_NT_ERROR(sdv_637);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_641 != 0;
    goto L226;

  L226:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2674;
    call {:si_unique_call 1723} sdv_645 := SerialGetDivisorFromBaud(vslice_dummy_var_2674, 135, junk);
    call {:si_unique_call 1724} sdv_611 := sdv_NT_ERROR(sdv_645);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} sdv_611 != 0;
    goto L234;

  L234:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2675;
    call {:si_unique_call 1725} sdv_621 := SerialGetDivisorFromBaud(vslice_dummy_var_2675, 150, junk);
    call {:si_unique_call 1726} sdv_632 := sdv_NT_ERROR(sdv_621);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} sdv_632 != 0;
    goto L242;

  L242:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2676;
    call {:si_unique_call 1727} sdv_624 := SerialGetDivisorFromBaud(vslice_dummy_var_2676, 300, junk);
    call {:si_unique_call 1728} sdv_617 := sdv_NT_ERROR(sdv_624);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} sdv_617 != 0;
    goto L250;

  L250:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2677;
    call {:si_unique_call 1729} sdv_648 := SerialGetDivisorFromBaud(vslice_dummy_var_2677, 600, junk);
    call {:si_unique_call 1730} sdv_618 := sdv_NT_ERROR(sdv_648);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} sdv_618 != 0;
    goto L258;

  L258:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2678;
    call {:si_unique_call 1731} sdv_652 := SerialGetDivisorFromBaud(vslice_dummy_var_2678, 1200, junk);
    call {:si_unique_call 1732} sdv_614 := sdv_NT_ERROR(sdv_652);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} sdv_614 != 0;
    goto L266;

  L266:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2679;
    call {:si_unique_call 1733} sdv_639 := SerialGetDivisorFromBaud(vslice_dummy_var_2679, 1800, junk);
    call {:si_unique_call 1734} sdv_646 := sdv_NT_ERROR(sdv_639);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} sdv_646 != 0;
    goto L274;

  L274:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2680;
    call {:si_unique_call 1735} sdv_605 := SerialGetDivisorFromBaud(vslice_dummy_var_2680, 2400, junk);
    call {:si_unique_call 1736} sdv_622 := sdv_NT_ERROR(sdv_605);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} sdv_622 != 0;
    goto L282;

  L282:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2681;
    call {:si_unique_call 1737} sdv_642 := SerialGetDivisorFromBaud(vslice_dummy_var_2681, 4800, junk);
    call {:si_unique_call 1738} sdv_609 := sdv_NT_ERROR(sdv_642);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} sdv_609 != 0;
    goto L290;

  L290:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2682;
    call {:si_unique_call 1739} sdv_631 := SerialGetDivisorFromBaud(vslice_dummy_var_2682, 7200, junk);
    call {:si_unique_call 1740} sdv_638 := sdv_NT_ERROR(sdv_631);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} sdv_638 != 0;
    goto L298;

  L298:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2683;
    call {:si_unique_call 1741} sdv_603 := SerialGetDivisorFromBaud(vslice_dummy_var_2683, 9600, junk);
    call {:si_unique_call 1742} sdv_616 := sdv_NT_ERROR(sdv_603);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} sdv_616 != 0;
    goto L306;

  L306:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2684;
    call {:si_unique_call 1743} sdv_608 := SerialGetDivisorFromBaud(vslice_dummy_var_2684, 14400, junk);
    call {:si_unique_call 1744} sdv_619 := sdv_NT_ERROR(sdv_608);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} sdv_619 != 0;
    goto L314;

  L314:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2685;
    call {:si_unique_call 1745} sdv_613 := SerialGetDivisorFromBaud(vslice_dummy_var_2685, 19200, junk);
    call {:si_unique_call 1746} sdv_636 := sdv_NT_ERROR(sdv_613);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} sdv_636 != 0;
    goto L322;

  L322:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2686;
    call {:si_unique_call 1747} sdv_604 := SerialGetDivisorFromBaud(vslice_dummy_var_2686, 38400, junk);
    call {:si_unique_call 1748} sdv_606 := sdv_NT_ERROR(sdv_604);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} sdv_606 != 0;
    goto L330;

  L330:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2687;
    call {:si_unique_call 1749} sdv_649 := SerialGetDivisorFromBaud(vslice_dummy_var_2687, 56000, junk);
    call {:si_unique_call 1750} sdv_610 := sdv_NT_ERROR(sdv_649);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} sdv_610 != 0;
    goto L338;

  L338:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2688;
    call {:si_unique_call 1751} sdv_647 := SerialGetDivisorFromBaud(vslice_dummy_var_2688, 57600, junk);
    call {:si_unique_call 1752} sdv_627 := sdv_NT_ERROR(sdv_647);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} sdv_627 != 0;
    goto L346;

  L346:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2689;
    call {:si_unique_call 1753} sdv_643 := SerialGetDivisorFromBaud(vslice_dummy_var_2689, 115200, junk);
    call {:si_unique_call 1754} sdv_650 := sdv_NT_ERROR(sdv_643);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} sdv_650 != 0;
    goto L354;

  L354:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2690;
    call {:si_unique_call 1755} sdv_625 := SerialGetDivisorFromBaud(vslice_dummy_var_2690, 128000, junk);
    call {:si_unique_call 1756} sdv_640 := sdv_NT_ERROR(sdv_625);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} sdv_640 != 0;
    goto L362;

  L362:
    call {:si_unique_call 1757} SetDeviceIsOpened(pDevExt_14, 0, 0);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L139;

  anon106_Then:
    assume {:partition} sdv_640 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L362;

  anon105_Then:
    assume {:partition} sdv_650 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L354;

  anon104_Then:
    assume {:partition} sdv_627 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L346;

  anon103_Then:
    assume {:partition} sdv_610 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L338;

  anon102_Then:
    assume {:partition} sdv_606 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L330;

  anon101_Then:
    assume {:partition} sdv_636 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L322;

  anon100_Then:
    assume {:partition} sdv_619 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L314;

  anon99_Then:
    assume {:partition} sdv_616 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L306;

  anon98_Then:
    assume {:partition} sdv_638 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L298;

  anon97_Then:
    assume {:partition} sdv_609 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L290;

  anon96_Then:
    assume {:partition} sdv_622 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L282;

  anon95_Then:
    assume {:partition} sdv_646 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L274;

  anon94_Then:
    assume {:partition} sdv_614 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L266;

  anon93_Then:
    assume {:partition} sdv_618 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L258;

  anon92_Then:
    assume {:partition} sdv_617 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L250;

  anon91_Then:
    assume {:partition} sdv_632 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L242;

  anon90_Then:
    assume {:partition} sdv_611 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L234;

  anon89_Then:
    assume {:partition} sdv_641 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L226;

  anon88_Then:
    assume {:partition} sdv_615 == 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L218;

  anon86_Then:
    assume {:partition} sdv_628 == 0;
    Tmp_794 := strConst__li2bpl197;
    call {:si_unique_call 1758} vslice_dummy_var_418 := SerialDbgPrintEx(1, Tmp_794);
    status_25 := -1073741810;
    goto L139;

  anon85_Then:
    assume {:partition} Mem_T.INT4[TxFIFO__CONFIG_DATA(PConfigData_2)] >= 1;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L177;

  anon107_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] != 14;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L174;

  anon108_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 8;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L174;

  anon109_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 4;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L174;

  anon113_Then:
    assume {:partition} Mem_T.INT4[RxFIFO__CONFIG_DATA(PConfigData_2)] == 1;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto L174;

  anon79_Then:
    goto L154;

  anon112_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_797;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2691;
    havoc vslice_dummy_var_2692;
    havoc vslice_dummy_var_2693;
    call {:si_unique_call 1759} SerialLogError(vslice_dummy_var_2691, PDevObj_15, vslice_dummy_var_2692, Tmp_789, 0, 0, 0, 8, 0, -1073348598, Tmp_797, vslice_dummy_var_2693, 0, 0);
    Tmp_783 := strConst__li2bpl196;
    call {:si_unique_call 1760} vslice_dummy_var_419 := SerialDbgPrintEx(1, Tmp_783);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] != 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    havoc vslice_dummy_var_2694;
    call {:si_unique_call 1761} MmUnmapIoSpace(0, vslice_dummy_var_2694);
    goto L131;

  L131:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] := 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    Mem_T.INT4[UnMapStatus__SERIAL_DEVICE_EXTENSION(pDevExt_14)] := 0;
    status_25 := -1073741709;
    goto L139;

  anon80_Then:
    assume {:partition} Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] == 0;
    goto L131;

  anon111_Then:
    goto L113;

  anon110_Then:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_792;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    assume {:nonnull} PConfigData_2 != 0;
    assume PConfigData_2 > 0;
    assume {:nonnull} PDevObj_15 != 0;
    assume PDevObj_15 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc vslice_dummy_var_2695;
    havoc vslice_dummy_var_2696;
    havoc vslice_dummy_var_2697;
    havoc vslice_dummy_var_2698;
    call {:si_unique_call 1762} SerialLogError(vslice_dummy_var_2695, vslice_dummy_var_2696, vslice_dummy_var_2697, Tmp_801, 0, 0, 0, 7, 0, -1073348598, Tmp_792, vslice_dummy_var_2698, 0, 0);
    Tmp_781 := strConst__li2bpl199;
    call {:si_unique_call 1763} vslice_dummy_var_420 := SerialDbgPrintEx(1, Tmp_781);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    Mem_T.INT4[UnMapRegisters__SERIAL_DEVICE_EXTENSION(pDevExt_14)] := 0;
    status_25 := -1073741709;
    goto L139;

  anon78_Then:
    call {:si_unique_call 1764} sdv_635 := ExAllocatePoolWithTag(0, 16, -666022077);
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:nonnull} pDevExt_14 != 0;
    assume pDevExt_14 > 0;
    havoc Tmp_788;
    assume {:nonnull} Tmp_788 != 0;
    assume Tmp_788 > 0;
    call {:si_unique_call 1765} InitializeListHead(SharerList__SERIAL_CISR_SW(Tmp_788));
    allocedISRSw := 1;
    goto L36;

  anon114_Then:
    Tmp_780 := -1073741670;
    goto L1;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_421: int;

  anon0:
    call {:si_unique_call 1766} vslice_dummy_var_421 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init16"} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init16"} _sdv_init16()
{
  var vslice_dummy_var_422: int;

  anon0:
    call {:si_unique_call 1767} vslice_dummy_var_422 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_806: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartRead"} SerialStartRead(actual_Extension_15: int) returns (Tmp_806: int)
{
  var {:pointer} Tmp_807: int;
  var {:scalar} localStatus: int;
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} sdv_653: int;
  var {:pointer} sdv_654: int;
  var {:pointer} Tmp_808: int;
  var {:scalar} totalTime: int;
  var {:pointer} Tmp_809: int;
  var {:scalar} os2ssreturn: int;
  var {:scalar} updateChar: int;
  var {:scalar} timeoutsForIrp: int;
  var {:scalar} setFirstStatus: int;
  var {:scalar} useTotalTimer: int;
  var {:pointer} newIrp: int;
  var {:pointer} Tmp_810: int;
  var {:scalar} multiplierVal: int;
  var {:scalar} crunchDownToOne: int;
  var {:pointer} sdv_659: int;
  var {:pointer} Tmp_811: int;
  var {:scalar} s_p_e_c_i_a_l_16: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_661: int;
  var {:pointer} Tmp_812: int;
  var {:pointer} s_p_e_c_i_a_l_17: int;
  var {:scalar} constantVal: int;
  var {:pointer} Tmp_813: int;
  var {:pointer} Tmp_814: int;
  var {:pointer} sdv_665: int;
  var {:pointer} Tmp_815: int;
  var {:scalar} controlIrql: int;
  var {:pointer} Tmp_816: int;
  var {:scalar} s_p_e_c_i_a_l_18: int;
  var {:scalar} returnWithWhatsPresent: int;
  var {:scalar} useIntervalTimer: int;
  var {:pointer} sdv_668: int;
  var {:scalar} firstStatus: int;
  var {:pointer} Extension_15: int;
  var boogieTmp: int;
  var vslice_dummy_var_423: int;
  var vslice_dummy_var_424: int;
  var vslice_dummy_var_425: int;
  var vslice_dummy_var_426: int;
  var vslice_dummy_var_427: int;
  var vslice_dummy_var_428: int;
  var vslice_dummy_var_429: int;
  var vslice_dummy_var_430: int;
  var vslice_dummy_var_2699: int;

  anon0:
    call {:si_unique_call 1768} totalTime := __HAVOC_malloc(20);
    call {:si_unique_call 1769} updateChar := __HAVOC_malloc(12);
    call {:si_unique_call 1770} timeoutsForIrp := __HAVOC_malloc(20);
    call {:si_unique_call 1771} newIrp := __HAVOC_malloc(4);
    Extension_15 := actual_Extension_15;
    call {:si_unique_call 1772} Tmp_809 := __HAVOC_malloc(84);
    call {:si_unique_call 1773} Tmp_812 := __HAVOC_malloc(88);
    setFirstStatus := 0;
    Tmp_812 := strConst__li2bpl202;
    call {:si_unique_call 1774} vslice_dummy_var_426 := SerialDbgPrintEx(2, Tmp_812);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto L23;

  L23:
    call {:si_unique_call 1775} Tmp_807, localStatus, sdv_653, Tmp_808, os2ssreturn, setFirstStatus, useTotalTimer, Tmp_810, multiplierVal, crunchDownToOne, sdv_659, Tmp_811, oldIrql_6, sdv_661, constantVal, Tmp_813, Tmp_814, controlIrql, Tmp_816, returnWithWhatsPresent, useIntervalTimer, sdv_668, firstStatus, boogieTmp, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_428 := SerialStartRead_loop_L23(Tmp_807, localStatus, sdv_653, Tmp_808, totalTime, os2ssreturn, updateChar, timeoutsForIrp, setFirstStatus, useTotalTimer, newIrp, Tmp_810, multiplierVal, crunchDownToOne, sdv_659, Tmp_811, oldIrql_6, sdv_661, constantVal, Tmp_813, Tmp_814, controlIrql, Tmp_816, returnWithWhatsPresent, useIntervalTimer, sdv_668, firstStatus, Extension_15, boogieTmp, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_428);
    goto L23_last;

  L23_last:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1806} sdv_659 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} sdv_659 != 0;
    assume sdv_659 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_659)] != 3;
    call {:si_unique_call 1776} localStatus := SerialResizeBuffer(Extension_15);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1777} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_15), newIrp, 1, Extension_15);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Mem_T.P_IRP[newIrp] == 0;
    Tmp_809 := strConst__li2bpl201;
    call {:si_unique_call 1778} vslice_dummy_var_427 := SerialDbgPrintEx(2, Tmp_809);
    Tmp_806 := firstStatus;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon63_Then:
    assume {:partition} Mem_T.P_IRP[newIrp] != 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    assume false;
    return;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := localStatus;
    setFirstStatus := 1;
    goto L37;

  anon61_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_659)] == 3;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1779} sdv_661 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} sdv_661 != 0;
    assume sdv_661 > 0;
    useTotalTimer := 0;
    returnWithWhatsPresent := 0;
    os2ssreturn := 0;
    crunchDownToOne := 0;
    useIntervalTimer := 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1780} vslice_dummy_var_428 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1781} vslice_dummy_var_423 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    call {:si_unique_call 1782} Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    Mem_T.INT4[Tmp_807] := controlIrql;
    call {:si_unique_call 1783} sdv_KeAcquireSpinLock(0, Tmp_807);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    controlIrql := Mem_T.INT4[Tmp_807];
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    call {:si_unique_call 1784} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    useIntervalTimer := 1;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L76;

  L76:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  L83:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} useTotalTimer != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} totalTime != 0;
    assume totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 1785} Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    Mem_T.INT4[Tmp_807] := controlIrql;
    call {:si_unique_call 1786} sdv_KeAcquireSpinLock(0, Tmp_807);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    controlIrql := Mem_T.INT4[Tmp_807];
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    call {:si_unique_call 1787} boogieTmp := SerialGetCharsFromIntBuffer(Extension_15);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 1788} vslice_dummy_var_424 := KeSynchronizeExecution(0, li2bplFunctionConstant137, 0);
    call {:si_unique_call 1789} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_810 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_810))] := 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon74_Then:
    assume {:partition} returnWithWhatsPresent == 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} os2ssreturn != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_813 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_813 != 0;
    assume Tmp_813 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L105;

  L105:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1790} sdv_668 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} sdv_668 != 0;
    assume sdv_668 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_668)))] := 0;
    call {:si_unique_call 1791} Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    Mem_T.INT4[Tmp_807] := oldIrql_6;
    call {:si_unique_call 1792} IoAcquireCancelSpinLock(Tmp_807);
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_807];
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_811 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_811 != 0;
    assume Tmp_811 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_811)] != 0;
    call {:si_unique_call 1793} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 1794} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_808 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_808 != 0;
    assume Tmp_808 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_808))] := -1073741536;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_816 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_816 != 0;
    assume Tmp_816 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := -1073741536;
    setFirstStatus := 1;
    goto L37;

  anon89_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon88_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_811)] == 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} crunchDownToOne != 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1795} sdv_653 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} sdv_653 != 0;
    assume sdv_653 > 0;
    goto L126;

  L126:
    call {:si_unique_call 1796} vslice_dummy_var_425 := KeSynchronizeExecution(0, li2bplFunctionConstant138, 0);
    assume {:nonnull} updateChar != 0;
    assume updateChar > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    call {:si_unique_call 1797} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 1798} sdv_KeReleaseSpinLock(0, controlIrql);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    Tmp_814 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)];
    assume {:nonnull} Tmp_814 != 0;
    assume Tmp_814 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_814))] := 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 0;
    setFirstStatus := 1;
    goto L37;

  anon90_Then:
    assume {:partition} setFirstStatus != 0;
    goto L37;

  anon78_Then:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} useTotalTimer != 0;
    s_p_e_c_i_a_l_16 := 4;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1799} sdv_654 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} sdv_654 != 0;
    assume sdv_654 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_654)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_15] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_15], s_p_e_c_i_a_l_16);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1800} vslice_dummy_var_429 := SerialSetTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), totalTime, TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L146;

  L146:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} useIntervalTimer != 0;
    s_p_e_c_i_a_l_18 := 8;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    call {:si_unique_call 1801} sdv_665 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_15)]);
    assume {:nonnull} sdv_665 != 0;
    assume sdv_665 > 0;
    s_p_e_c_i_a_l_17 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_665)));
    assume {:nonnull} s_p_e_c_i_a_l_17 != 0;
    assume s_p_e_c_i_a_l_17 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_17] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_17], s_p_e_c_i_a_l_18);
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    havoc Tmp_815;
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    assume {:nonnull} Tmp_815 != 0;
    assume Tmp_815 > 0;
    havoc vslice_dummy_var_2699;
    call {:si_unique_call 1802} vslice_dummy_var_430 := SerialSetTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(Extension_15), vslice_dummy_var_2699, IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_15), Extension_15);
    goto L158;

  L158:
    call {:si_unique_call 1803} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1804} IoReleaseCancelSpinLock(oldIrql_6);
    call {:si_unique_call 1805} sdv_KeReleaseSpinLock(0, controlIrql);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} setFirstStatus != 0;
    goto L183;

  L183:
    Tmp_806 := firstStatus;
    goto L1;

  anon81_Then:
    assume {:partition} setFirstStatus == 0;
    firstStatus := 259;
    goto L183;

  anon80_Then:
    assume {:partition} useIntervalTimer == 0;
    goto L158;

  anon79_Then:
    assume {:partition} useTotalTimer == 0;
    goto L146;

  anon77_Then:
    assume {:partition} crunchDownToOne == 0;
    goto L126;

  anon87_Then:
    goto L94;

  anon76_Then:
    assume {:partition} os2ssreturn == 0;
    goto L105;

  anon75_Then:
    goto L94;

  anon73_Then:
    assume {:partition} useTotalTimer == 0;
    goto L84;

  anon72_Then:
    goto L77;

  L77:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    useTotalTimer := 1;
    os2ssreturn := 1;
    crunchDownToOne := 1;
    multiplierVal := 0;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon82_Then:
    goto L83;

  anon71_Then:
    goto L83;

  anon70_Then:
    goto L77;

  anon68_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    returnWithWhatsPresent := 1;
    goto L83;

  anon69_Then:
    goto L76;

  anon65_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L192;

  L192:
    useTotalTimer := 1;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc multiplierVal;
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    havoc constantVal;
    goto L83;

  anon67_Then:
    assume {:nonnull} timeoutsForIrp != 0;
    assume timeoutsForIrp > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L192;

  anon83_Then:
    goto L83;

  anon85_Then:
    assume {:nonnull} Extension_15 != 0;
    assume Extension_15 > 0;
    goto L66;

  anon66_Then:
    goto L66;

  anon64_Then:
    goto L66;
}



procedure {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_817: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialMoveToNewIntBuffer"} SerialMoveToNewIntBuffer(actual_Extension_16: int, actual_NewBuffer: int) returns (Tmp_817: int)
{
  var {:scalar} firstTryNumberToGet: int;
  var {:scalar} numberOfCharsMoved: int;
  var {:scalar} Tmp_820: int;
  var {:pointer} Extension_16: int;
  var {:pointer} NewBuffer: int;

  anon0:
    Extension_16 := actual_Extension_16;
    NewBuffer := actual_NewBuffer;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc numberOfCharsMoved;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} numberOfCharsMoved != 0;
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    havoc firstTryNumberToGet;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} firstTryNumberToGet >= numberOfCharsMoved;
    call {:si_unique_call 1807} sdv_RtlMoveMemory(0, 0, numberOfCharsMoved);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  L6:
    Tmp_817 := numberOfCharsMoved;
    return;

  anon7_Then:
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon9_Then:
    assume {:partition} numberOfCharsMoved > firstTryNumberToGet;
    call {:si_unique_call 1808} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet);
    Tmp_820 := numberOfCharsMoved - firstTryNumberToGet;
    call {:si_unique_call 1809} sdv_RtlMoveMemory(0, 0, Tmp_820);
    assume {:nonnull} Extension_16 != 0;
    assume Extension_16 > 0;
    goto L6;

  anon8_Then:
    assume {:partition} numberOfCharsMoved == 0;
    goto L6;
}



procedure {:origName "SerialRead"} SerialRead(actual_DeviceObject_21: int, actual_Irp_18: int) returns (Tmp_821: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, Mem_T.Cancel__IRP, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialRead"} SerialRead(actual_DeviceObject_21: int, actual_Irp_18: int) returns (Tmp_821: int)
{
  var {:pointer} Tmp_822: int;
  var {:pointer} Tmp_823: int;
  var {:pointer} Tmp_824: int;
  var {:scalar} sdv_671: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} sdv_673: int;
  var {:pointer} Tmp_827: int;
  var {:pointer} Tmp_828: int;
  var {:pointer} Tmp_829: int;
  var {:pointer} Tmp_830: int;
  var {:scalar} status_26: int;
  var {:pointer} extension: int;
  var {:pointer} DeviceObject_21: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_431: int;
  var vslice_dummy_var_432: int;
  var vslice_dummy_var_433: int;
  var vslice_dummy_var_434: int;
  var vslice_dummy_var_435: int;
  var vslice_dummy_var_436: int;
  var vslice_dummy_var_437: int;
  var vslice_dummy_var_438: int;

  anon0:
    DeviceObject_21 := actual_DeviceObject_21;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 1810} Tmp_822 := __HAVOC_malloc(96);
    call {:si_unique_call 1811} Tmp_823 := __HAVOC_malloc(80);
    call {:si_unique_call 1812} Tmp_824 := __HAVOC_malloc(84);
    call {:si_unique_call 1813} Tmp_826 := __HAVOC_malloc(80);
    call {:si_unique_call 1814} Tmp_827 := __HAVOC_malloc(80);
    call {:si_unique_call 1815} Tmp_828 := __HAVOC_malloc(80);
    call {:si_unique_call 1816} Tmp_829 := __HAVOC_malloc(72);
    call {:si_unique_call 1817} Tmp_830 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_21 != 0;
    assume DeviceObject_21 > 0;
    havoc extension;
    Tmp_824 := strConst__li2bpl207;
    call {:si_unique_call 1818} vslice_dummy_var_431 := SerialDbgPrintEx(2, Tmp_824);
    call {:si_unique_call 1819} status_26 := SerialIRPPrologue(Irp_18, extension);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_26 != 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_26 != 259;
    Tmp_829 := strConst__li2bpl1;
    call {:si_unique_call 1820} vslice_dummy_var_432 := SerialDbgPrintEx(9, Tmp_829);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_18 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1821} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_18);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L69;

  L69:
    call {:si_unique_call 1822} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1823} SerialIRPEpilogue(extension);
    goto L19;

  L19:
    Tmp_826 := strConst__li2bpl203;
    call {:si_unique_call 1824} vslice_dummy_var_433 := SerialDbgPrintEx(2, Tmp_826);
    Tmp_821 := status_26;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume !(Irp_18 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon22_Then:
    assume {:partition} status_26 == 259;
    goto L19;

  anon21_Then:
    assume {:partition} status_26 == 0;
    Tmp_822 := strConst__li2bpl0;
    call {:si_unique_call 1825} vslice_dummy_var_434 := SerialDbgPrintEx(9, Tmp_822);
    call {:si_unique_call 1826} sdv_671 := SerialCompleteIfError(DeviceObject_21, Irp_18);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_671 != 0;
    Tmp_827 := strConst__li2bpl204;
    call {:si_unique_call 1827} vslice_dummy_var_435 := SerialDbgPrintEx(2, Tmp_827);
    Tmp_821 := -1073741536;
    goto L1;

  anon24_Then:
    assume {:partition} sdv_671 == 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    call {:si_unique_call 1828} sdv_673 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    assume {:nonnull} sdv_673 != 0;
    assume sdv_673 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 1829} status_26 := SerialStartOrQueue(extension, Irp_18, ReadQueue__SERIAL_DEVICE_EXTENSION(extension), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(extension), li2bplFunctionConstant136);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    Tmp_823 := strConst__li2bpl205;
    call {:si_unique_call 1830} vslice_dummy_var_436 := SerialDbgPrintEx(2, Tmp_823);
    Tmp_821 := status_26;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_18))] := 0;
    Tmp_830 := strConst__li2bpl1;
    call {:si_unique_call 1831} vslice_dummy_var_437 := SerialDbgPrintEx(9, Tmp_830);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_18 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1832} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_18);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1833} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1834} SerialIRPEpilogue(extension);
    Tmp_828 := strConst__li2bpl206;
    call {:si_unique_call 1835} vslice_dummy_var_438 := SerialDbgPrintEx(2, Tmp_828);
    Tmp_821 := 0;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_18 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_831: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetCharsFromIntBuffer"} SerialGetCharsFromIntBuffer(actual_Extension_17: int) returns (Tmp_831: int)
{
  var {:scalar} numberOfCharsToGet: int;
  var {:scalar} firstTryNumberToGet_1: int;
  var {:pointer} Tmp_834: int;
  var {:pointer} Tmp_835: int;
  var {:pointer} Tmp_836: int;
  var {:scalar} Tmp_838: int;
  var {:pointer} Tmp_839: int;
  var {:pointer} Tmp_840: int;
  var {:pointer} Extension_17: int;
  var vslice_dummy_var_439: int;
  var vslice_dummy_var_440: int;
  var vslice_dummy_var_441: int;

  anon0:
    Extension_17 := actual_Extension_17;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc numberOfCharsToGet;
    goto L7;

  L7:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} numberOfCharsToGet != 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    havoc firstTryNumberToGet_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} firstTryNumberToGet_1 > numberOfCharsToGet;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    call {:si_unique_call 1836} vslice_dummy_var_440 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)]);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_840 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)];
    assume {:nonnull} Tmp_840 != 0;
    assume Tmp_840 > 0;
    call {:si_unique_call 1837} sdv_RtlMoveMemory(0, 0, numberOfCharsToGet);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  L9:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_836 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)];
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_834 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)];
    assume {:nonnull} Tmp_834 != 0;
    assume Tmp_834 > 0;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    Tmp_831 := numberOfCharsToGet;
    return;

  anon12_Then:
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon11_Then:
    assume {:partition} numberOfCharsToGet >= firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    call {:si_unique_call 1838} vslice_dummy_var_439 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)]);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_839 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)];
    assume {:nonnull} Tmp_839 != 0;
    assume Tmp_839 > 0;
    call {:si_unique_call 1839} sdv_RtlMoveMemory(0, 0, firstTryNumberToGet_1);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_838 := numberOfCharsToGet - firstTryNumberToGet_1;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    call {:si_unique_call 1840} vslice_dummy_var_441 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)]);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    Tmp_835 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_17)];
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    call {:si_unique_call 1841} sdv_RtlMoveMemory(0, 0, Tmp_838);
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    assume {:nonnull} Extension_17 != 0;
    assume Extension_17 > 0;
    goto L9;

  anon9_Then:
    assume {:partition} numberOfCharsToGet == 0;
    goto L9;

  anon10_Then:
    goto L7;
}



procedure {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_842: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_842 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialResizeBuffer"} SerialResizeBuffer(actual_Extension_18: int) returns (Tmp_842: int)
{
  var {:pointer} Tmp_843: int;
  var {:pointer} irpSp_1: int;
  var {:pointer} newBuffer: int;
  var {:pointer} Tmp_844: int;
  var {:pointer} rs: int;
  var {:pointer} Tmp_845: int;
  var {:scalar} controlIrql_1: int;
  var {:scalar} rp: int;
  var {:pointer} Tmp_846: int;
  var {:pointer} Extension_18: int;
  var boogieTmp: int;
  var vslice_dummy_var_442: int;

  anon0:
    call {:si_unique_call 1842} rp := __HAVOC_malloc(20);
    Extension_18 := actual_Extension_18;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    Tmp_845 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_18)];
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    havoc rs;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    call {:si_unique_call 1843} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_18)]);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    havoc newBuffer;
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    Tmp_846 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_18)];
    assume {:nonnull} Tmp_846 != 0;
    assume Tmp_846 > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    Tmp_843 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_18)];
    assume {:nonnull} Tmp_843 != 0;
    assume Tmp_843 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_843))] := 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} Extension_18 != 0;
    assume Extension_18 > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rp != 0;
    assume rp > 0;
    assume {:nonnull} rs != 0;
    assume rs > 0;
    call {:si_unique_call 1844} Tmp_844 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    Mem_T.INT4[Tmp_844] := controlIrql_1;
    call {:si_unique_call 1845} sdv_KeAcquireSpinLock(0, Tmp_844);
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    controlIrql_1 := Mem_T.INT4[Tmp_844];
    assume {:nonnull} rp != 0;
    assume rp > 0;
    call {:si_unique_call 1846} boogieTmp := SerialMoveToNewIntBuffer(Extension_18, newBuffer);
    call {:si_unique_call 1847} vslice_dummy_var_442 := KeSynchronizeExecution(0, li2bplFunctionConstant148, 0);
    call {:si_unique_call 1848} sdv_KeReleaseSpinLock(0, controlIrql_1);
    call {:si_unique_call 1849} sdv_ExFreePool(0);
    goto L20;

  L20:
    Tmp_842 := 0;
    return;

  anon3_Then:
    call {:si_unique_call 1850} sdv_ExFreePool(0);
    goto L20;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_443: int;

  anon0:
    call {:si_unique_call 1851} vslice_dummy_var_443 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject_22: int, actual_Irp_19: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelWait"} SerialCancelWait(actual_DeviceObject_22: int, actual_Irp_19: int)
{
  var {:pointer} Tmp_850: int;
  var {:pointer} Tmp_852: int;
  var {:pointer} Extension_19: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_444: int;
  var vslice_dummy_var_445: int;
  var vslice_dummy_var_446: int;
  var vslice_dummy_var_2700: int;

  anon0:
    call {:si_unique_call 1852} vslice_dummy_var_444 := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_19 := actual_Irp_19;
    call {:si_unique_call 1853} Tmp_850 := __HAVOC_malloc(84);
    call {:si_unique_call 1854} Tmp_852 := __HAVOC_malloc(108);
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc Extension_19;
    Tmp_850 := strConst__li2bpl209;
    call {:si_unique_call 1855} vslice_dummy_var_445 := SerialDbgPrintEx(6, Tmp_850);
    Tmp_852 := strConst__li2bpl208;
    call {:si_unique_call 1856} vslice_dummy_var_446 := SerialDbgPrintEx(7, Tmp_852);
    assume {:nonnull} Extension_19 != 0;
    assume Extension_19 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc vslice_dummy_var_2700;
    call {:si_unique_call 1857} SerialTryToCompleteCurrent#1(Extension_19, li2bplFunctionConstant199, vslice_dummy_var_2700, -1073741536, CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_19), 0, 0, 0, 0, 0, 2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialStartMask"} SerialStartMask(actual_Extension_20: int) returns (Tmp_853: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartMask"} SerialStartMask(actual_Extension_20: int) returns (Tmp_853: int)
{
  var {:pointer} Tmp_854: int;
  var {:pointer} s_p_e_c_i_a_l_19: int;
  var {:pointer} Tmp_855: int;
  var {:scalar} FirstStatus_1: int;
  var {:pointer} Tmp_856: int;
  var {:scalar} SetFirstStatus_1: int;
  var {:pointer} Tmp_857: int;
  var {:pointer} Tmp_858: int;
  var {:pointer} Tmp_859: int;
  var {:pointer} Tmp_860: int;
  var {:pointer} Tmp_861: int;
  var {:pointer} Tmp_862: int;
  var {:pointer} Tmp_863: int;
  var {:pointer} IrpSp_3: int;
  var {:pointer} Tmp_864: int;
  var {:scalar} OldIrql_8: int;
  var {:pointer} Tmp_865: int;
  var {:pointer} NewIrp_4: int;
  var {:scalar} s_p_e_c_i_a_l_20: int;
  var {:pointer} Tmp_866: int;
  var {:pointer} Tmp_867: int;
  var {:pointer} Tmp_868: int;
  var {:pointer} sdv_704: int;
  var {:pointer} Tmp_869: int;
  var {:pointer} Tmp_870: int;
  var {:pointer} sdv_707: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Extension_20: int;
  var vslice_dummy_var_447: int;
  var vslice_dummy_var_448: int;
  var vslice_dummy_var_449: int;
  var vslice_dummy_var_450: int;
  var vslice_dummy_var_451: int;
  var vslice_dummy_var_452: int;
  var vslice_dummy_var_453: int;
  var vslice_dummy_var_454: int;
  var vslice_dummy_var_455: int;
  var vslice_dummy_var_456: int;
  var vslice_dummy_var_457: int;
  var vslice_dummy_var_458: int;
  var vslice_dummy_var_459: int;
  var vslice_dummy_var_460: int;
  var vslice_dummy_var_461: int;
  var vslice_dummy_var_462: int;
  var vslice_dummy_var_463: int;

  anon0:
    call {:si_unique_call 1858} NewIrp_4 := __HAVOC_malloc(4);
    Extension_20 := actual_Extension_20;
    call {:si_unique_call 1859} Tmp_854 := __HAVOC_malloc(128);
    call {:si_unique_call 1860} Tmp_855 := __HAVOC_malloc(368);
    call {:si_unique_call 1861} Tmp_856 := __HAVOC_malloc(160);
    call {:si_unique_call 1862} Tmp_858 := __HAVOC_malloc(368);
    call {:si_unique_call 1863} Tmp_861 := __HAVOC_malloc(288);
    call {:si_unique_call 1864} Tmp_862 := __HAVOC_malloc(288);
    call {:si_unique_call 1865} Tmp_864 := __HAVOC_malloc(120);
    call {:si_unique_call 1866} Tmp_865 := __HAVOC_malloc(288);
    call {:si_unique_call 1867} Tmp_866 := __HAVOC_malloc(80);
    call {:si_unique_call 1868} Tmp_867 := __HAVOC_malloc(148);
    call {:si_unique_call 1869} Tmp_868 := __HAVOC_malloc(284);
    call {:si_unique_call 1870} Tmp_869 := __HAVOC_malloc(288);
    call {:si_unique_call 1871} Tmp_871 := __HAVOC_malloc(368);
    call {:si_unique_call 1872} Tmp_872 := __HAVOC_malloc(368);
    SetFirstStatus_1 := 0;
    Tmp_866 := strConst__li2bpl217;
    call {:si_unique_call 1873} vslice_dummy_var_448 := SerialDbgPrintEx(6, Tmp_866);
    goto L11;

  L11:
    call {:si_unique_call 1874} Tmp_854, s_p_e_c_i_a_l_19, Tmp_855, FirstStatus_1, Tmp_856, SetFirstStatus_1, Tmp_857, Tmp_858, Tmp_859, Tmp_860, Tmp_861, Tmp_862, Tmp_863, IrpSp_3, Tmp_864, OldIrql_8, Tmp_865, s_p_e_c_i_a_l_20, Tmp_867, Tmp_868, sdv_704, Tmp_869, Tmp_870, sdv_707, Tmp_871, Tmp_872, vslice_dummy_var_447, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451, vslice_dummy_var_452, vslice_dummy_var_453, vslice_dummy_var_454, vslice_dummy_var_455, vslice_dummy_var_456, vslice_dummy_var_457, vslice_dummy_var_458, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463 := SerialStartMask_loop_L11(Tmp_854, s_p_e_c_i_a_l_19, Tmp_855, FirstStatus_1, Tmp_856, SetFirstStatus_1, Tmp_857, Tmp_858, Tmp_859, Tmp_860, Tmp_861, Tmp_862, Tmp_863, IrpSp_3, Tmp_864, OldIrql_8, Tmp_865, NewIrp_4, s_p_e_c_i_a_l_20, Tmp_867, Tmp_868, sdv_704, Tmp_869, Tmp_870, sdv_707, Tmp_871, Tmp_872, Extension_20, vslice_dummy_var_447, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451, vslice_dummy_var_452, vslice_dummy_var_453, vslice_dummy_var_454, vslice_dummy_var_455, vslice_dummy_var_456, vslice_dummy_var_457, vslice_dummy_var_458, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463);
    goto L11_last;

  L11_last:
    Tmp_854 := strConst__li2bpl210;
    call {:si_unique_call 1900} vslice_dummy_var_449 := SerialDbgPrintEx(7, Tmp_854);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1901} IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)]);
    assume {:nonnull} IrpSp_3 != 0;
    assume IrpSp_3 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_864 := strConst__li2bpl211;
    call {:si_unique_call 1875} vslice_dummy_var_450 := SerialDbgPrintEx(7, Tmp_864);
    call {:si_unique_call 1876} vslice_dummy_var_447 := KeSynchronizeExecution(0, li2bplFunctionConstant196, 0);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Tmp_870 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)];
    assume {:nonnull} Tmp_870 != 0;
    assume Tmp_870 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_870))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1877} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_20), NewIrp_4, 1, Extension_20);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    Tmp_871 := strConst__li2bpl213;
    call {:si_unique_call 1878} vslice_dummy_var_451 := SerialDbgPrintEx(7, Tmp_871);
    goto L37;

  L37:
    assume {:nonnull} NewIrp_4 != 0;
    assume NewIrp_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_4] == 0;
    Tmp_853 := FirstStatus_1;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_4] != 0;
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    assume false;
    return;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_862 := strConst__li2bpl212;
    call {:si_unique_call 1879} vslice_dummy_var_452 := SerialDbgPrintEx(7, Tmp_862);
    FirstStatus_1 := 0;
    SetFirstStatus_1 := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)] == 0;
    call {:si_unique_call 1880} Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    Mem_T.INT4[Tmp_860] := OldIrql_8;
    call {:si_unique_call 1881} IoAcquireCancelSpinLock(Tmp_860);
    assume {:nonnull} Tmp_860 != 0;
    assume Tmp_860 > 0;
    OldIrql_8 := Mem_T.INT4[Tmp_860];
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Tmp_859 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)];
    assume {:nonnull} Tmp_859 != 0;
    assume Tmp_859 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_859)] != 0;
    Tmp_856 := strConst__li2bpl216;
    call {:si_unique_call 1882} vslice_dummy_var_456 := SerialDbgPrintEx(7, Tmp_856);
    call {:si_unique_call 1883} IoReleaseCancelSpinLock(OldIrql_8);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Tmp_857 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)];
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_857))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L64;

  L64:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1884} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_20), NewIrp_4, 1, Extension_20);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    Tmp_872 := strConst__li2bpl213;
    call {:si_unique_call 1885} vslice_dummy_var_457 := SerialDbgPrintEx(7, Tmp_872);
    goto L37;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_865 := strConst__li2bpl212;
    call {:si_unique_call 1886} vslice_dummy_var_458 := SerialDbgPrintEx(7, Tmp_865);
    FirstStatus_1 := -1073741536;
    SetFirstStatus_1 := 1;
    goto L64;

  anon36_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_859)] == 0;
    Tmp_867 := strConst__li2bpl215;
    call {:si_unique_call 1887} vslice_dummy_var_459 := SerialDbgPrintEx(7, Tmp_867);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L76;

  L76:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)] := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)];
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1888} sdv_704 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)]);
    assume {:nonnull} sdv_704 != 0;
    assume sdv_704 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_704)))] := 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1889} vslice_dummy_var_460 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)], li2bplFunctionConstant197);
    s_p_e_c_i_a_l_20 := 2;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1890} sdv_707 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)]);
    assume {:nonnull} sdv_707 != 0;
    assume sdv_707 > 0;
    s_p_e_c_i_a_l_19 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_707)));
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_19] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_19], s_p_e_c_i_a_l_20);
    call {:si_unique_call 1891} vslice_dummy_var_461 := KeSynchronizeExecution(0, li2bplFunctionConstant198, 0);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)] := 0;
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1892} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_20), NewIrp_4, 0, Extension_20, OldIrql_8);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    Tmp_855 := strConst__li2bpl213;
    call {:si_unique_call 1893} vslice_dummy_var_462 := SerialDbgPrintEx(7, Tmp_855);
    goto L37;

  anon39_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon31_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_869 := strConst__li2bpl212;
    call {:si_unique_call 1894} vslice_dummy_var_463 := SerialDbgPrintEx(7, Tmp_869);
    FirstStatus_1 := 259;
    SetFirstStatus_1 := 1;
    call {:si_unique_call 1895} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(Extension_20)] != 0;
    goto L41;

  L41:
    Tmp_868 := strConst__li2bpl214;
    call {:si_unique_call 1896} vslice_dummy_var_453 := SerialDbgPrintEx(7, Tmp_868);
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    Tmp_863 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20)];
    assume {:nonnull} Tmp_863 != 0;
    assume Tmp_863 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_863))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus_1 != 0;
    goto L112;

  L112:
    assume {:nonnull} Extension_20 != 0;
    assume Extension_20 > 0;
    call {:si_unique_call 1897} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(Extension_20), NewIrp_4, 1, Extension_20);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    Tmp_858 := strConst__li2bpl213;
    call {:si_unique_call 1898} vslice_dummy_var_454 := SerialDbgPrintEx(7, Tmp_858);
    goto L37;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus_1 == 0;
    Tmp_861 := strConst__li2bpl212;
    call {:si_unique_call 1899} vslice_dummy_var_455 := SerialDbgPrintEx(7, Tmp_861);
    FirstStatus_1 := -1073741811;
    SetFirstStatus_1 := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_464: int;

  anon0:
    call {:si_unique_call 1902} vslice_dummy_var_464 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_23: int, actual_Irp_20: int) returns (Tmp_875: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCompleteIfError"} SerialCompleteIfError(actual_DeviceObject_23: int, actual_Irp_20: int) returns (Tmp_875: int)
{
  var {:pointer} Tmp_876: int;
  var {:pointer} irpSp_2: int;
  var {:scalar} status_27: int;
  var {:pointer} extension_1: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_465: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 1903} Tmp_876 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc extension_1;
    status_27 := 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 1904} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] != 14;
    goto L17;

  L17:
    status_27 := -1073741536;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_20))] := -1073741536;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    Tmp_876 := strConst__li2bpl1;
    call {:si_unique_call 1905} vslice_dummy_var_465 := SerialDbgPrintEx(9, Tmp_876);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_20 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1906} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_20);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L35;

  L35:
    call {:si_unique_call 1907} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1908} SerialIRPEpilogue(extension_1);
    goto L8;

  L8:
    Tmp_875 := status_27;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume !(Irp_20 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L35;

  anon14_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_2)] == 14;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L17;

  anon15_Then:
    goto L8;

  anon13_Then:
    goto L8;

  anon17_Then:
    goto L8;
}



procedure {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_16: int, actual_PIrp_6: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialFilterCancelQueued"} SerialFilterCancelQueued(actual_PDevObj_16: int, actual_PIrp_6: int)
{
  var {:pointer} pDevExt_15: int;
  var {:pointer} Tmp_880: int;
  var {:pointer} PDevObj_16: int;
  var {:pointer} PIrp_6: int;
  var vslice_dummy_var_466: int;
  var vslice_dummy_var_467: int;
  var vslice_dummy_var_468: int;
  var vslice_dummy_var_469: int;
  var vslice_dummy_var_2701: int;

  anon0:
    call {:si_unique_call 1909} vslice_dummy_var_466 := __HAVOC_malloc(4);
    PDevObj_16 := actual_PDevObj_16;
    PIrp_6 := actual_PIrp_6;
    call {:si_unique_call 1910} Tmp_880 := __HAVOC_malloc(72);
    assume {:nonnull} PDevObj_16 != 0;
    assume PDevObj_16 > 0;
    havoc pDevExt_15;
    call {:si_unique_call 1911} vslice_dummy_var_467 := sdv_IoGetCurrentIrpStackLocation(PIrp_6);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_6))] := -1073741536;
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    call {:si_unique_call 1912} vslice_dummy_var_468 := sdv_RemoveEntryList(0);
    assume {:nonnull} PIrp_6 != 0;
    assume PIrp_6 > 0;
    havoc vslice_dummy_var_2701;
    call {:si_unique_call 1913} IoReleaseCancelSpinLock(vslice_dummy_var_2701);
    Tmp_880 := strConst__li2bpl1;
    call {:si_unique_call 1914} vslice_dummy_var_469 := SerialDbgPrintEx(9, Tmp_880);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume PIrp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1915} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, PIrp_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L28;

  L28:
    call {:si_unique_call 1916} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1917} SerialIRPEpilogue(pDevExt_15);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(PIrp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L28;
}



procedure {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_21: int, actual_Irp_21: int, actual_QueueToExamine: int, actual_CurrentOpIrp_2: int, actual_Starter: int) returns (Tmp_881: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, Mem_T.Cancel__IRP, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartOrQueue"} SerialStartOrQueue(actual_Extension_21: int, actual_Irp_21: int, actual_QueueToExamine: int, actual_CurrentOpIrp_2: int, actual_Starter: int) returns (Tmp_881: int)
{
  var {:pointer} Tmp_882: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} sdv_714: int;
  var {:pointer} Tmp_883: int;
  var {:pointer} sdv_716: int;
  var {:pointer} sdv_718: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} sdv_719: int;
  var {:scalar} sdv_721: int;
  var {:pointer} sdv_723: int;
  var {:pointer} Extension_21: int;
  var {:pointer} Irp_21: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp_2: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_470: int;
  var vslice_dummy_var_471: int;
  var vslice_dummy_var_472: int;

  anon0:
    Extension_21 := actual_Extension_21;
    Irp_21 := actual_Irp_21;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp_2 := actual_CurrentOpIrp_2;
    Starter := actual_Starter;
    call {:si_unique_call 1918} Tmp_882 := __HAVOC_malloc(72);
    call {:si_unique_call 1919} Tmp_883 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    Mem_T.INT4[Tmp_883] := oldIrql_7;
    call {:si_unique_call 1920} IoAcquireCancelSpinLock(Tmp_883);
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_883];
    call {:si_unique_call 1921} sdv_714 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_714 != 0;
    assume sdv_714 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_714)] == 4;
    call {:si_unique_call 1922} sdv_719 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    assume {:nonnull} sdv_719 != 0;
    assume sdv_719 > 0;
    goto L18;

  L18:
    call {:si_unique_call 1923} sdv_721 := sdv_IsListEmpty(0);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_721 != 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_2] == 0;
    assume {:nonnull} CurrentOpIrp_2 != 0;
    assume CurrentOpIrp_2 > 0;
    Mem_T.P_IRP[CurrentOpIrp_2] := Irp_21;
    call {:si_unique_call 1924} IoReleaseCancelSpinLock(oldIrql_7);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant124;
    call {:si_unique_call 1925} Tmp_881 := SerialStartFlush(Extension_21);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant195;
    call {:si_unique_call 1926} Tmp_881 := SerialStartMask(Extension_21);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon59_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon52_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant424;
    call {:si_unique_call 1927} Tmp_881 := SerialStartPurge(Extension_21);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon58_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant136;
    call {:si_unique_call 1928} Tmp_881 := SerialStartRead(Extension_21);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon45_Then:
    assume {:IndirectCall} true;
    assume Starter == li2bplFunctionConstant212;
    call {:si_unique_call 1929} Tmp_881 := SerialStartWrite#1(Extension_21);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_2] != 0;
    goto L22;

  L22:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_21)] != 0;
    call {:si_unique_call 1930} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    call {:si_unique_call 1931} IoReleaseCancelSpinLock(oldIrql_7);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 1932} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    goto L42;

  L42:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_21))] := -1073741536;
    Tmp_882 := strConst__li2bpl1;
    call {:si_unique_call 1933} vslice_dummy_var_472 := SerialDbgPrintEx(9, Tmp_882);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume Irp_21 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1934} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_21);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L98;

  L98:
    call {:si_unique_call 1935} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1936} SerialIRPEpilogue(Extension_21);
    Tmp_881 := -1073741536;
    goto L1;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon47_Then:
    assume !(Irp_21 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L98;

  anon46_Then:
    goto L42;

  anon43_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Irp_21)] == 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_21))] := 259;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume Irp_21 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1937} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl2);
    goto L101;

  L101:
    call {:si_unique_call 1938} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    call {:si_unique_call 1939} vslice_dummy_var_470 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(Irp_21))));
    call {:si_unique_call 1940} vslice_dummy_var_471 := sdv_IoSetCancelRoutine(Irp_21, li2bplFunctionConstant166);
    call {:si_unique_call 1941} IoReleaseCancelSpinLock(oldIrql_7);
    Tmp_881 := 259;
    goto L1;

  anon55_Then:
    assume !(Irp_21 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L101;

  anon42_Then:
    assume {:partition} sdv_721 == 0;
    goto L22;

  anon41_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_714)] != 4;
    call {:si_unique_call 1942} sdv_718 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_718 != 0;
    assume sdv_718 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_718)] == 14;
    call {:si_unique_call 1943} sdv_716 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_716 != 0;
    assume sdv_716 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto L78;

  L78:
    assume {:nonnull} Extension_21 != 0;
    assume Extension_21 > 0;
    goto L18;

  anon49_Then:
    call {:si_unique_call 1944} sdv_723 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} sdv_723 != 0;
    assume sdv_723 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto L78;

  anon50_Then:
    goto L18;

  anon48_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(sdv_718)] != 14;
    goto L18;
}



procedure {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_9: int, actual_PFlags: int, actual_Value: int, actual_Set: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetDeviceFlags"} SerialSetDeviceFlags(actual_PDevExt_9: int, actual_PFlags: int, actual_Value: int, actual_Set: int)
{
  var {:pointer} Tmp_884: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} PFlags: int;
  var {:scalar} Value: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_473: int;

  anon0:
    call {:si_unique_call 1945} vslice_dummy_var_473 := __HAVOC_malloc(4);
    PFlags := actual_PFlags;
    Value := actual_Value;
    Set := actual_Set;
    call {:si_unique_call 1946} Tmp_884 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    Mem_T.INT4[Tmp_884] := oldIrql_8;
    call {:si_unique_call 1947} sdv_KeAcquireSpinLock(0, Tmp_884);
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_884];
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BOR(Mem_T.INT4[PFlags], Value);
    goto L10;

  L10:
    call {:si_unique_call 1948} sdv_KeReleaseSpinLock(0, oldIrql_8);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    assume {:nonnull} PFlags != 0;
    assume PFlags > 0;
    Mem_T.INT4[PFlags] := BAND(Mem_T.INT4[PFlags], BNOT(Value));
    goto L10;
}



procedure {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_10: int, actual_PDevObj_17: int, actual_PIrp_7: int) returns (Tmp_886: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_886 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialPoCallDriver"} SerialPoCallDriver(actual_PDevExt_10: int, actual_PDevObj_17: int, actual_PIrp_7: int) returns (Tmp_886: int)
{
  var {:scalar} status_28: int;
  var {:pointer} PDevExt_10: int;
  var {:pointer} PIrp_7: int;

  anon0:
    PDevExt_10 := actual_PDevExt_10;
    PIrp_7 := actual_PIrp_7;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume PIrp_7 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1949} SLIC_PoCallDriver_entry(strConst__li2bpl2);
    goto L13;

  L13:
    call {:si_unique_call 1950} status_28 := PoCallDriver(0, PIrp_7);
    call {:si_unique_call 1951} SerialIRPEpilogue(PDevExt_10);
    Tmp_886 := status_28;
    return;

  anon3_Then:
    assume !(PIrp_7 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L13;
}



procedure {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_11: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialIRPEpilogue"} SerialIRPEpilogue(actual_PDevExt_11: int)
{
  var {:pointer} Tmp_888: int;
  var {:scalar} pendingCnt: int;
  var {:pointer} PDevExt_11: int;
  var vslice_dummy_var_474: int;
  var vslice_dummy_var_475: int;
  var vslice_dummy_var_2702: int;

  anon0:
    call {:si_unique_call 1952} vslice_dummy_var_474 := __HAVOC_malloc(4);
    PDevExt_11 := actual_PDevExt_11;
    call {:si_unique_call 1953} Tmp_888 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    havoc vslice_dummy_var_2702;
    Mem_T.INT4[Tmp_888] := vslice_dummy_var_2702;
    call {:si_unique_call 1954} pendingCnt := sdv_InterlockedDecrement(Tmp_888);
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt == 0;
    assume {:nonnull} PDevExt_11 != 0;
    assume PDevExt_11 > 0;
    call {:si_unique_call 1955} vslice_dummy_var_475 := KeSetEvent(PendingIRPEvent__SERIAL_DEVICE_EXTENSION(PDevExt_11), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt != 0;
    goto L1;
}



procedure {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_12: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialMarkHardwareBroken"} SerialMarkHardwareBroken(actual_PDevExt_12: int)
{
  var {:scalar} Tmp_891: int;
  var {:scalar} Tmp_893: int;
  var {:scalar} Tmp_894: int;
  var {:pointer} PDevExt_12: int;
  var vslice_dummy_var_476: int;
  var vslice_dummy_var_2703: int;
  var vslice_dummy_var_2704: int;

  anon0:
    call {:si_unique_call 1956} Tmp_891 := __HAVOC_malloc(20);
    call {:si_unique_call 1957} vslice_dummy_var_476 := __HAVOC_malloc(4);
    call {:si_unique_call 1958} Tmp_894 := __HAVOC_malloc(20);
    PDevExt_12 := actual_PDevExt_12;
    call {:si_unique_call 1959} sdv_do_paged_code_check();
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    call {:si_unique_call 1960} SerialSetDeviceFlags(PDevExt_12, Flags__SERIAL_DEVICE_EXTENSION(PDevExt_12), 4, 1);
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    havoc Tmp_893;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} PDevExt_12 != 0;
    assume PDevExt_12 > 0;
    havoc vslice_dummy_var_2703;
    havoc vslice_dummy_var_2704;
    call {:si_unique_call 1961} SerialLogError(vslice_dummy_var_2703, 0, Tmp_891, Tmp_894, 0, 0, 0, 88, 0, -1073348563, Tmp_893, vslice_dummy_var_2704, 0, 0);
    call {:si_unique_call 1962} IoInvalidateDeviceState(0);
    return;
}



procedure {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_18: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialKillAllStalled"} SerialKillAllStalled(actual_PDevObj_18: int)
{
  var {:pointer} currentLastIrp: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} pDevExt_16: int;
  var {:scalar} sdv_732: int;
  var {:pointer} Tmp_901: int;
  var {:pointer} sdv_733: int;
  var {:scalar} cancelRoutine_1: int;
  var {:pointer} PDevObj_18: int;
  var vslice_dummy_var_477: int;
  var vslice_dummy_var_478: int;
  var vslice_dummy_var_2705: int;

  anon0:
    call {:si_unique_call 1963} vslice_dummy_var_477 := __HAVOC_malloc(4);
    PDevObj_18 := actual_PDevObj_18;
    assume {:nonnull} PDevObj_18 != 0;
    assume PDevObj_18 > 0;
    havoc pDevExt_16;
    call {:si_unique_call 1964} Tmp_901 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    Mem_T.INT4[Tmp_901] := cancelIrql;
    call {:si_unique_call 1965} IoAcquireCancelSpinLock(Tmp_901);
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    cancelIrql := Mem_T.INT4[Tmp_901];
    goto L10;

  L10:
    call {:si_unique_call 1966} currentLastIrp, cancelIrql, sdv_732, Tmp_901, sdv_733, cancelRoutine_1, vslice_dummy_var_478 := SerialKillAllStalled_loop_L10(currentLastIrp, cancelIrql, pDevExt_16, sdv_732, Tmp_901, sdv_733, cancelRoutine_1, PDevObj_18, vslice_dummy_var_478);
    goto L10_last;

  L10_last:
    call {:si_unique_call 1978} sdv_732 := sdv_IsListEmpty(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_732 == 0;
    assume {:nonnull} pDevExt_16 != 0;
    assume pDevExt_16 > 0;
    havoc vslice_dummy_var_2705;
    call {:si_unique_call 1967} sdv_733 := sdv_containing_record(vslice_dummy_var_2705, 88);
    currentLastIrp := sdv_733;
    call {:si_unique_call 1968} vslice_dummy_var_478 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    havoc cancelRoutine_1;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    assume {:nonnull} currentLastIrp != 0;
    assume currentLastIrp > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(currentLastIrp)] := 1;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant214;
    call {:si_unique_call 1969} SerialCancelCurrentWrite(PDevObj_18, currentLastIrp);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 1970} Tmp_901 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    Mem_T.INT4[Tmp_901] := cancelIrql;
    call {:si_unique_call 1971} IoAcquireCancelSpinLock(Tmp_901);
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    cancelIrql := Mem_T.INT4[Tmp_901];
    goto L32_dummy;

  L32_dummy:
    assume false;
    return;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant218;
    call {:si_unique_call 1972} SerialCancelCurrentXoff(PDevObj_18, currentLastIrp);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant351;
    call {:si_unique_call 1973} SerialCancelImmediate(PDevObj_18, currentLastIrp);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant166;
    call {:si_unique_call 1974} SerialCancelQueued(PDevObj_18, currentLastIrp);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 1975} SerialCancelWait(PDevObj_18, currentLastIrp);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_1 == li2bplFunctionConstant168;
    call {:si_unique_call 1976} SerialFilterCancelQueued(PDevObj_18, currentLastIrp);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} sdv_732 != 0;
    call {:si_unique_call 1977} IoReleaseCancelSpinLock(cancelIrql);
    goto LM2;
}



procedure {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer_3: int, actual_PDevExt_13: int) returns (Tmp_902: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_902 == 1 || Tmp_902 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelTimer"} SerialCancelTimer(actual_Timer_3: int, actual_PDevExt_13: int) returns (Tmp_902: int)
{
  var {:scalar} cancelled: int;
  var {:pointer} Timer_3: int;
  var {:pointer} PDevExt_13: int;
  var vslice_dummy_var_2706: int;

  anon0:
    Timer_3 := actual_Timer_3;
    PDevExt_13 := actual_PDevExt_13;
    call {:si_unique_call 1979} cancelled := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} cancelled != 0;
    assume {:nonnull} Timer_3 != 0;
    assume Timer_3 > 0;
    havoc vslice_dummy_var_2706;
    call {:si_unique_call 1980} SerialDpcEpilogue(PDevExt_13, vslice_dummy_var_2706);
    goto L9;

  L9:
    Tmp_902 := cancelled;
    return;

  anon3_Then:
    assume {:partition} cancelled == 0;
    goto L9;
}



procedure {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_14: int) returns (Tmp_904: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_904 == 0 || Tmp_904 == -1073741536 || Tmp_904 == 259 || Tmp_904 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialIRPPrologue"} SerialIRPPrologue(actual_PIrp_8: int, actual_PDevExt_14: int) returns (Tmp_904: int)
{
  var {:pointer} Tmp_905: int;
  var {:pointer} PIrp_8: int;
  var {:pointer} PDevExt_14: int;
  var vslice_dummy_var_479: int;
  var vslice_dummy_var_2707: int;

  anon0:
    PIrp_8 := actual_PIrp_8;
    PDevExt_14 := actual_PDevExt_14;
    call {:si_unique_call 1981} Tmp_905 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    havoc vslice_dummy_var_2707;
    Mem_T.INT4[Tmp_905] := vslice_dummy_var_2707;
    call {:si_unique_call 1982} vslice_dummy_var_479 := sdv_InterlockedIncrement(Tmp_905);
    assume {:nonnull} PDevExt_14 != 0;
    assume PDevExt_14 > 0;
    assume {:nonnull} Tmp_905 != 0;
    assume Tmp_905 > 0;
    call {:si_unique_call 1983} Tmp_904 := SerialFilterIrps(PIrp_8, PDevExt_14);
    return;
}



procedure {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_4: int, actual_QueueToProcess_3: int, actual_NextIrp: int, actual_CompleteCurrent_3: int, actual_extension_2: int, actual_OldIrql_9: int);
  modifies alloc, Mem_T.P_IRP, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetNextIrpLocked"} SerialGetNextIrpLocked(actual_CurrentOpIrp_4: int, actual_QueueToProcess_3: int, actual_NextIrp: int, actual_CompleteCurrent_3: int, actual_extension_2: int, actual_OldIrql_9: int)
{
  var {:scalar} sdv_738: int;
  var {:pointer} Tmp_908: int;
  var {:pointer} sdv_742: int;
  var {:pointer} oldIrp_1: int;
  var {:pointer} headOfList: int;
  var {:pointer} CurrentOpIrp_4: int;
  var {:pointer} QueueToProcess_3: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent_3: int;
  var {:pointer} extension_2: int;
  var {:scalar} OldIrql_9: int;
  var vslice_dummy_var_480: int;
  var vslice_dummy_var_481: int;
  var vslice_dummy_var_482: int;

  anon0:
    call {:si_unique_call 1984} vslice_dummy_var_480 := __HAVOC_malloc(4);
    CurrentOpIrp_4 := actual_CurrentOpIrp_4;
    QueueToProcess_3 := actual_QueueToProcess_3;
    NextIrp := actual_NextIrp;
    CompleteCurrent_3 := actual_CompleteCurrent_3;
    extension_2 := actual_extension_2;
    OldIrql_9 := actual_OldIrql_9;
    call {:si_unique_call 1985} Tmp_908 := __HAVOC_malloc(72);
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    oldIrp_1 := Mem_T.P_IRP[CurrentOpIrp_4];
    call {:si_unique_call 1986} sdv_738 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_738 == 0;
    call {:si_unique_call 1987} headOfList := RemoveHeadList(QueueToProcess_3);
    call {:si_unique_call 1988} sdv_742 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Mem_T.P_IRP[CurrentOpIrp_4] := sdv_742;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    call {:si_unique_call 1989} vslice_dummy_var_482 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentOpIrp_4], 0);
    goto L11;

  L11:
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    Mem_T.P_IRP[NextIrp] := Mem_T.P_IRP[CurrentOpIrp_4];
    call {:si_unique_call 1990} IoReleaseCancelSpinLock(OldIrql_9);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} CompleteCurrent_3 != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} oldIrp_1 != 0;
    Tmp_908 := strConst__li2bpl1;
    call {:si_unique_call 1991} vslice_dummy_var_481 := SerialDbgPrintEx(9, Tmp_908);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume oldIrp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1992} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, oldIrp_1);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    call {:si_unique_call 1993} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 1994} SerialIRPEpilogue(extension_2);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume !(oldIrp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L40;

  anon13_Then:
    assume {:partition} oldIrp_1 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} CompleteCurrent_3 == 0;
    goto L1;

  anon11_Then:
    assume {:partition} sdv_738 != 0;
    assume {:nonnull} CurrentOpIrp_4 != 0;
    assume CurrentOpIrp_4 > 0;
    Mem_T.P_IRP[CurrentOpIrp_4] := 0;
    goto L11;
}



procedure {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_15: int, actual_PDevObj_19: int, actual_PIrp_9: int) returns (Tmp_909: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_909 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialIoCallDriver"} SerialIoCallDriver(actual_PDevExt_15: int, actual_PDevObj_19: int, actual_PIrp_9: int) returns (Tmp_909: int)
{
  var {:scalar} status_29: int;
  var {:pointer} PDevExt_15: int;
  var {:pointer} PDevObj_19: int;
  var {:pointer} PIrp_9: int;

  anon0:
    PDevExt_15 := actual_PDevExt_15;
    PDevObj_19 := actual_PDevObj_19;
    PIrp_9 := actual_PIrp_9;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume PIrp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1995} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl2);
    goto L13;

  L13:
    call {:si_unique_call 1996} status_29 := sdv_IoCallDriver(PDevObj_19, PIrp_9);
    call {:si_unique_call 1997} SerialIRPEpilogue(PDevExt_15);
    Tmp_909 := status_29;
    return;

  anon3_Then:
    assume !(PIrp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L13;
}



procedure {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_16: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialUnstallIrps"} SerialUnstallIrps(actual_PDevExt_16: int)
{
  var {:pointer} Tmp_912: int;
  var {:scalar} Tmp_913: int;
  var {:pointer} Tmp_914: int;
  var {:pointer} sdv_747: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} pIrpStack_6: int;
  var {:pointer} Tmp_915: int;
  var {:pointer} pIrp_1: int;
  var {:pointer} pDevObj_2: int;
  var {:pointer} Tmp_916: int;
  var {:pointer} pIrpLink: int;
  var {:pointer} pDrvObj_1: int;
  var {:pointer} Tmp_917: int;
  var {:pointer} PDevExt_16: int;
  var vslice_dummy_var_483: int;
  var vslice_dummy_var_484: int;
  var vslice_dummy_var_485: int;
  var vslice_dummy_var_486: int;
  var vslice_dummy_var_487: int;
  var vslice_dummy_var_488: int;

  anon0:
    call {:si_unique_call 1998} vslice_dummy_var_483 := __HAVOC_malloc(4);
    PDevExt_16 := actual_PDevExt_16;
    call {:si_unique_call 1999} Tmp_912 := __HAVOC_malloc(80);
    call {:si_unique_call 2000} Tmp_915 := __HAVOC_malloc(96);
    call {:si_unique_call 2001} Tmp_916 := __HAVOC_malloc(112);
    call {:si_unique_call 2002} Tmp_917 := __HAVOC_malloc(124);
    Tmp_915 := strConst__li2bpl218;
    call {:si_unique_call 2003} vslice_dummy_var_484 := SerialDbgPrintEx(2, Tmp_915);
    call {:si_unique_call 2004} Tmp_914 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    Mem_T.INT4[Tmp_914] := oldIrql_9;
    call {:si_unique_call 2005} IoAcquireCancelSpinLock(Tmp_914);
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_914];
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    havoc pIrpLink;
    goto L16;

  L16:
    call {:si_unique_call 2006} Tmp_913, Tmp_914, sdv_747, oldIrql_9, pIrpStack_6, pIrp_1, pDevObj_2, Tmp_916, pIrpLink, pDrvObj_1, Tmp_917, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487 := SerialUnstallIrps_loop_L16(Tmp_913, Tmp_914, sdv_747, oldIrql_9, pIrpStack_6, pIrp_1, pDevObj_2, Tmp_916, pIrpLink, pDrvObj_1, Tmp_917, PDevExt_16, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487);
    goto L16_last;

  L16_last:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    call {:si_unique_call 2007} sdv_747 := sdv_containing_record(pIrpLink, 88);
    pIrp_1 := sdv_747;
    call {:si_unique_call 2008} vslice_dummy_var_485 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2009} pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(pIrp_1);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    havoc pDevObj_2;
    assume {:nonnull} pDevObj_2 != 0;
    assume pDevObj_2 > 0;
    havoc pDrvObj_1;
    call {:si_unique_call 2010} vslice_dummy_var_486 := sdv_IoSetCancelRoutine(pIrp_1, 0);
    call {:si_unique_call 2011} IoReleaseCancelSpinLock(oldIrql_9);
    Tmp_917 := strConst__li2bpl219;
    call {:si_unique_call 2012} vslice_dummy_var_487 := SerialDbgPrintEx(12, Tmp_917);
    assume {:nonnull} pIrpStack_6 != 0;
    assume pIrpStack_6 > 0;
    Tmp_913 := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_6)];
    assume {:nonnull} pDrvObj_1 != 0;
    assume pDrvObj_1 > 0;
    havoc Tmp_916;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Tmp_913 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume Tmp_913 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Tmp_913 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume Tmp_913 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Tmp_913 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume Tmp_913 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume Tmp_913 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Tmp_913 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Tmp_913 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume Tmp_913 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume Tmp_913 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Tmp_913 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume Tmp_913 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume Tmp_913 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume Tmp_913 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume Tmp_913 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume Tmp_913 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Tmp_913 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Tmp_913 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Tmp_913 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Tmp_913 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Tmp_913 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Tmp_913 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Tmp_913 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume Tmp_913 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume Tmp_913 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume Tmp_913 != 1;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume false;
    return;

  anon87_Then:
    assume Tmp_913 == 0;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916] == 0;
    goto L45;

  L45:
    call {:si_unique_call 2013} Tmp_914 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    Mem_T.INT4[Tmp_914] := oldIrql_9;
    call {:si_unique_call 2014} IoAcquireCancelSpinLock(Tmp_914);
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_914];
    assume {:nonnull} PDevExt_16 != 0;
    assume PDevExt_16 > 0;
    havoc pIrpLink;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon86_Then:
    assume Tmp_913 == 1;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume Tmp_913 == 2;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume Tmp_913 == 3;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume Tmp_913 == 4;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume Tmp_913 == 5;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume Tmp_913 == 6;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume Tmp_913 == 7;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume Tmp_913 == 8;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume Tmp_913 == 9;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume Tmp_913 == 10;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume Tmp_913 == 11;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume Tmp_913 == 12;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume Tmp_913 == 13;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume Tmp_913 == 14;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume Tmp_913 == 15;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume Tmp_913 == 16;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume Tmp_913 == 17;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume Tmp_913 == 18;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume Tmp_913 == 19;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume Tmp_913 == 20;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume Tmp_913 == 21;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume Tmp_913 == 22;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume Tmp_913 == 23;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume Tmp_913 == 24;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume Tmp_913 == 25;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume Tmp_913 == 26;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume Tmp_913 == 27;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume Mem_T.INT4[Tmp_916 + 27 * 4] == 0;
    goto L45;

  anon59_Then:
    call {:si_unique_call 2015} IoReleaseCancelSpinLock(oldIrql_9);
    Tmp_912 := strConst__li2bpl220;
    call {:si_unique_call 2016} vslice_dummy_var_488 := SerialDbgPrintEx(2, Tmp_912);
    return;
}



procedure {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_24: int, actual_QueueToClean: int, actual_CurrentOpIrp_5: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialKillAllReadsOrWrites"} SerialKillAllReadsOrWrites(actual_DeviceObject_24: int, actual_QueueToClean: int, actual_CurrentOpIrp_5: int)
{
  var {:pointer} currentLastIrp_1: int;
  var {:scalar} cancelIrql_1: int;
  var {:scalar} sdv_752: int;
  var {:pointer} Tmp_918: int;
  var {:pointer} sdv_753: int;
  var {:pointer} Tmp_919: int;
  var {:scalar} cancelRoutine_2: int;
  var {:pointer} Tmp_920: int;
  var {:pointer} Tmp_922: int;
  var {:pointer} Tmp_923: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} QueueToClean: int;
  var {:pointer} CurrentOpIrp_5: int;
  var vslice_dummy_var_489: int;
  var vslice_dummy_var_490: int;
  var vslice_dummy_var_2708: int;

  anon0:
    call {:si_unique_call 2017} vslice_dummy_var_489 := __HAVOC_malloc(4);
    DeviceObject_24 := actual_DeviceObject_24;
    QueueToClean := actual_QueueToClean;
    CurrentOpIrp_5 := actual_CurrentOpIrp_5;
    call {:si_unique_call 2018} Tmp_918 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_918 != 0;
    assume Tmp_918 > 0;
    Mem_T.INT4[Tmp_918] := cancelIrql_1;
    call {:si_unique_call 2019} IoAcquireCancelSpinLock(Tmp_918);
    assume {:nonnull} Tmp_918 != 0;
    assume Tmp_918 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_918];
    goto L8;

  L8:
    call {:si_unique_call 2020} currentLastIrp_1, cancelIrql_1, sdv_752, Tmp_918, sdv_753, cancelRoutine_2, vslice_dummy_var_490 := SerialKillAllReadsOrWrites_loop_L8(currentLastIrp_1, cancelIrql_1, sdv_752, Tmp_918, sdv_753, cancelRoutine_2, DeviceObject_24, QueueToClean, vslice_dummy_var_490);
    goto L8_last;

  L8_last:
    call {:si_unique_call 2039} sdv_752 := sdv_IsListEmpty(0);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} sdv_752 == 0;
    assume {:nonnull} QueueToClean != 0;
    assume QueueToClean > 0;
    havoc vslice_dummy_var_2708;
    call {:si_unique_call 2021} sdv_753 := sdv_containing_record(vslice_dummy_var_2708, 88);
    currentLastIrp_1 := sdv_753;
    call {:si_unique_call 2022} vslice_dummy_var_490 := sdv_RemoveEntryList(0);
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    havoc cancelRoutine_2;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    assume {:nonnull} currentLastIrp_1 != 0;
    assume currentLastIrp_1 > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(currentLastIrp_1)] := 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant214;
    call {:si_unique_call 2023} SerialCancelCurrentWrite(DeviceObject_24, currentLastIrp_1);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 2024} Tmp_918 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_918 != 0;
    assume Tmp_918 > 0;
    Mem_T.INT4[Tmp_918] := cancelIrql_1;
    call {:si_unique_call 2025} IoAcquireCancelSpinLock(Tmp_918);
    assume {:nonnull} Tmp_918 != 0;
    assume Tmp_918 > 0;
    cancelIrql_1 := Mem_T.INT4[Tmp_918];
    goto L42_dummy;

  L42_dummy:
    assume false;
    return;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  LM2:
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant218;
    call {:si_unique_call 2026} SerialCancelCurrentXoff(DeviceObject_24, currentLastIrp_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant351;
    call {:si_unique_call 2027} SerialCancelImmediate(DeviceObject_24, currentLastIrp_1);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant166;
    call {:si_unique_call 2028} SerialCancelQueued(DeviceObject_24, currentLastIrp_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon57_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant197;
    call {:si_unique_call 2029} SerialCancelWait(DeviceObject_24, currentLastIrp_1);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon69_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant168;
    call {:si_unique_call 2030} SerialFilterCancelQueued(DeviceObject_24, currentLastIrp_1);
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon70_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    assume {:partition} sdv_752 != 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_5] != 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    Tmp_920 := Mem_T.P_IRP[CurrentOpIrp_5];
    assume {:nonnull} Tmp_920 != 0;
    assume Tmp_920 > 0;
    havoc cancelRoutine_2;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    Tmp_923 := Mem_T.P_IRP[CurrentOpIrp_5];
    assume {:nonnull} Tmp_923 != 0;
    assume Tmp_923 > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(Tmp_923)] := 1;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} cancelRoutine_2 != 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    Tmp_919 := Mem_T.P_IRP[CurrentOpIrp_5];
    assume {:nonnull} Tmp_919 != 0;
    assume Tmp_919 > 0;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    Tmp_922 := Mem_T.P_IRP[CurrentOpIrp_5];
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant214;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2031} SerialCancelCurrentWrite(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  anon68_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon56_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant218;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2032} SerialCancelCurrentXoff(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon67_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant351;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2033} SerialCancelImmediate(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant166;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2034} SerialCancelQueued(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant197;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2035} SerialCancelWait(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon64_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:IndirectCall} true;
    assume cancelRoutine_2 == li2bplFunctionConstant168;
    assume {:nonnull} CurrentOpIrp_5 != 0;
    assume CurrentOpIrp_5 > 0;
    call {:si_unique_call 2036} SerialFilterCancelQueued(DeviceObject_24, Mem_T.P_IRP[CurrentOpIrp_5]);
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon63_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon61_Then:
    assume {:partition} cancelRoutine_2 == 0;
    call {:si_unique_call 2037} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;

  anon52_Then:
    assume {:partition} Mem_T.P_IRP[CurrentOpIrp_5] == 0;
    call {:si_unique_call 2038} IoReleaseCancelSpinLock(cancelIrql_1);
    goto L1;
}



procedure {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_4: int, actual_structPtr888DueTime: int, actual_Dpc_3: int, actual_PDevExt_17: int) returns (Tmp_924: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_924 == 1 || Tmp_924 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialSetTimer"} SerialSetTimer(actual_Timer_4: int, actual_structPtr888DueTime: int, actual_Dpc_3: int, actual_PDevExt_17: int) returns (Tmp_924: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} Tmp_925: int;
  var {:scalar} set: int;
  var {:pointer} structPtr888DueTime: int;
  var {:pointer} PDevExt_17: int;
  var vslice_dummy_var_491: int;
  var vslice_dummy_var_492: int;
  var vslice_dummy_var_2709: int;
  var vslice_dummy_var_2710: int;

  anon0:
    call {:si_unique_call 2040} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    PDevExt_17 := actual_PDevExt_17;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    call {:si_unique_call 2041} Tmp_925 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_925 != 0;
    assume Tmp_925 > 0;
    havoc vslice_dummy_var_2709;
    Mem_T.INT4[Tmp_925] := vslice_dummy_var_2709;
    call {:si_unique_call 2042} vslice_dummy_var_491 := sdv_InterlockedIncrement(Tmp_925);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_925 != 0;
    assume Tmp_925 > 0;
    call {:si_unique_call 2043} set := KeSetTimer(0, DueTime, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} set != 0;
    call {:si_unique_call 2044} Tmp_925 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_925 != 0;
    assume Tmp_925 > 0;
    havoc vslice_dummy_var_2710;
    Mem_T.INT4[Tmp_925] := vslice_dummy_var_2710;
    call {:si_unique_call 2045} vslice_dummy_var_492 := sdv_InterlockedDecrement(Tmp_925);
    assume {:nonnull} PDevExt_17 != 0;
    assume PDevExt_17 > 0;
    assume {:nonnull} Tmp_925 != 0;
    assume Tmp_925 > 0;
    goto L12;

  L12:
    Tmp_924 := set;
    return;

  anon3_Then:
    assume {:partition} set == 0;
    goto L12;
}



procedure {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_18: int, actual_PDpc: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDpcEpilogue"} SerialDpcEpilogue(actual_PDevExt_18: int, actual_PDpc: int)
{
  var {:pointer} Tmp_926: int;
  var {:scalar} pendingCnt_1: int;
  var {:pointer} PDevExt_18: int;
  var vslice_dummy_var_493: int;
  var vslice_dummy_var_494: int;
  var vslice_dummy_var_2711: int;

  anon0:
    call {:si_unique_call 2046} vslice_dummy_var_493 := __HAVOC_malloc(4);
    PDevExt_18 := actual_PDevExt_18;
    call {:si_unique_call 2047} Tmp_926 := __HAVOC_malloc(4);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    havoc vslice_dummy_var_2711;
    Mem_T.INT4[Tmp_926] := vslice_dummy_var_2711;
    call {:si_unique_call 2048} pendingCnt_1 := sdv_InterlockedDecrement(Tmp_926);
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} pendingCnt_1 == 0;
    assume {:nonnull} PDevExt_18 != 0;
    assume PDevExt_18 > 0;
    call {:si_unique_call 2049} vslice_dummy_var_494 := KeSetEvent(PendingDpcEvent__SERIAL_DEVICE_EXTENSION(PDevExt_18), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} pendingCnt_1 != 0;
    goto L1;
}



procedure {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_6: int, actual_QueueToProcess_4: int, actual_NextIrp_1: int, actual_CompleteCurrent_4: int, actual_extension_3: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetNextIrp"} SerialGetNextIrp(actual_CurrentOpIrp_6: int, actual_QueueToProcess_4: int, actual_NextIrp_1: int, actual_CompleteCurrent_4: int, actual_extension_3: int)
{
  var {:pointer} Tmp_928: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} CurrentOpIrp_6: int;
  var {:pointer} QueueToProcess_4: int;
  var {:pointer} NextIrp_1: int;
  var {:scalar} CompleteCurrent_4: int;
  var {:pointer} extension_3: int;
  var vslice_dummy_var_495: int;

  anon0:
    call {:si_unique_call 2050} vslice_dummy_var_495 := __HAVOC_malloc(4);
    CurrentOpIrp_6 := actual_CurrentOpIrp_6;
    QueueToProcess_4 := actual_QueueToProcess_4;
    NextIrp_1 := actual_NextIrp_1;
    CompleteCurrent_4 := actual_CompleteCurrent_4;
    extension_3 := actual_extension_3;
    call {:si_unique_call 2051} Tmp_928 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_928 != 0;
    assume Tmp_928 > 0;
    Mem_T.INT4[Tmp_928] := oldIrql_10;
    call {:si_unique_call 2052} IoAcquireCancelSpinLock(Tmp_928);
    assume {:nonnull} Tmp_928 != 0;
    assume Tmp_928 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_928];
    call {:si_unique_call 2053} SerialGetNextIrpLocked(CurrentOpIrp_6, QueueToProcess_4, NextIrp_1, CompleteCurrent_4, extension_3, oldIrql_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_496: int;

  anon0:
    call {:si_unique_call 2054} vslice_dummy_var_496 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_25: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialLogError"} SerialLogError(actual_DriverObject: int, actual_DeviceObject_25: int, actual_structPtr888P1: int, actual_structPtr888P2: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:scalar} P1: int;
  var {:scalar} P2: int;
  var {:pointer} Tmp_933: int;
  var {:pointer} Tmp_934: int;
  var {:pointer} Tmp_935: int;
  var {:pointer} Tmp_936: int;
  var {:pointer} Tmp_937: int;
  var {:scalar} Tmp_939: int;
  var {:scalar} sdv_760: int;
  var {:pointer} errorLogEntry: int;
  var {:scalar} Tmp_940: int;
  var {:scalar} sdv_761: int;
  var {:scalar} dumpToAllocate: int;
  var {:pointer} sdv_762: int;
  var {:scalar} Tmp_943: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:pointer} DriverObject: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} structPtr888P1: int;
  var {:pointer} structPtr888P2: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_497: int;

  anon0:
    call {:si_unique_call 2055} P1 := __HAVOC_malloc(20);
    call {:si_unique_call 2056} P2 := __HAVOC_malloc(20);
    call {:si_unique_call 2057} Tmp_939 := __HAVOC_malloc(20);
    call {:si_unique_call 2058} Tmp_940 := __HAVOC_malloc(20);
    call {:si_unique_call 2059} vslice_dummy_var_497 := __HAVOC_malloc(4);
    DriverObject := actual_DriverObject;
    DeviceObject_25 := actual_DeviceObject_25;
    structPtr888P1 := actual_structPtr888P1;
    structPtr888P2 := actual_structPtr888P2;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P1 != 0;
    assume P1 > 0;
    assume {:nonnull} structPtr888P1 != 0;
    assume structPtr888P1 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    assume {:nonnull} P2 != 0;
    assume P2 > 0;
    assume {:nonnull} structPtr888P2 != 0;
    assume structPtr888P2 > 0;
    call {:si_unique_call 2060} Tmp_933 := __HAVOC_malloc(4);
    call {:si_unique_call 2061} Tmp_934 := __HAVOC_malloc(4);
    call {:si_unique_call 2062} Tmp_935 := __HAVOC_malloc(4);
    call {:si_unique_call 2063} Tmp_936 := __HAVOC_malloc(4);
    call {:si_unique_call 2064} Tmp_937 := __HAVOC_malloc(4);
    dumpToAllocate := 0;
    call {:si_unique_call 2065} sdv_do_paged_code_check();
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Insert1 != 0;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Insert2 != 0;
    goto L16;

  L16:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} DeviceObject_25 != 0;
    goto L19;

  L19:
    assume {:nonnull} Tmp_939 != 0;
    assume Tmp_939 > 0;
    assume {:nonnull} Tmp_939 != 0;
    assume Tmp_939 > 0;
    assume {:nonnull} Tmp_939 != 0;
    assume Tmp_939 > 0;
    assume {:nonnull} Tmp_939 != 0;
    assume Tmp_939 > 0;
    assume {:nonnull} Tmp_939 != 0;
    assume Tmp_939 > 0;
    call {:si_unique_call 2066} sdv_760 := SerialMemCompare(P1, 1, Tmp_939, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_760 != 0;
    dumpToAllocate := 8;
    goto L24;

  L24:
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    call {:si_unique_call 2067} sdv_761 := SerialMemCompare(P2, 1, Tmp_940, 1);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} sdv_761 != 0;
    dumpToAllocate := dumpToAllocate + 8;
    goto L30;

  L30:
    Tmp_943 := 48 + dumpToAllocate + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 2068} sdv_762 := IoAllocateErrorLogEntry(0, Tmp_943);
    errorLogEntry := sdv_762;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} dumpToAllocate != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_936;
    call {:si_unique_call 2069} sdv_RtlCopyMemory(0, 0, 8);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} dumpToAllocate > 8;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_937;
    call {:si_unique_call 2070} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_934;
    ptrToFirstInsert := Tmp_934;
    goto L57;

  L57:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} LengthOfInsert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 2071} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} LengthOfInsert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 2072} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L59;

  L59:
    call {:si_unique_call 2073} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L59;

  anon30_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L59;

  anon26_Then:
    assume {:partition} 8 >= dumpToAllocate;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_935;
    ptrToFirstInsert := Tmp_935;
    goto L57;

  anon29_Then:
    assume {:partition} dumpToAllocate == 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_933;
    ptrToFirstInsert := Tmp_933;
    goto L57;

  anon28_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon25_Then:
    assume {:partition} sdv_761 == 0;
    goto L30;

  anon24_Then:
    assume {:partition} sdv_760 == 0;
    goto L24;

  anon23_Then:
    assume {:partition} DeviceObject_25 == 0;
    goto L19;

  anon22_Then:
    assume {:partition} Insert2 == 0;
    LengthOfInsert2 := 0;
    goto L16;

  anon21_Then:
    assume {:partition} Insert1 == 0;
    LengthOfInsert1 := 0;
    goto L14;
}



procedure {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_26: int, actual_Irp_22: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCancelQueued"} SerialCancelQueued(actual_DeviceObject_26: int, actual_Irp_22: int)
{
  var {:pointer} irpSp_4: int;
  var {:pointer} Tmp_945: int;
  var {:pointer} extension_4: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_498: int;
  var vslice_dummy_var_499: int;
  var vslice_dummy_var_500: int;
  var vslice_dummy_var_2712: int;

  anon0:
    call {:si_unique_call 2074} vslice_dummy_var_498 := __HAVOC_malloc(4);
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 2075} Tmp_945 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_26 != 0;
    assume DeviceObject_26 > 0;
    havoc extension_4;
    call {:si_unique_call 2076} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_22))] := -1073741536;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 2077} vslice_dummy_var_499 := sdv_RemoveEntryList(0);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_4)] == 4;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    havoc vslice_dummy_var_2712;
    call {:si_unique_call 2078} IoReleaseCancelSpinLock(vslice_dummy_var_2712);
    Tmp_945 := strConst__li2bpl1;
    call {:si_unique_call 2079} vslice_dummy_var_500 := SerialDbgPrintEx(9, Tmp_945);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2080} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_22);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  L43:
    call {:si_unique_call 2081} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2082} SerialIRPEpilogue(extension_4);
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L43;

  anon15_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_4)] != 4;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_4)] == 14;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L32;

  L32:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto L18;

  anon18_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 2083} sdv_ExFreePool(0);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto L18;

  anon20_Then:
    goto L18;

  anon19_Then:
    goto L32;

  anon16_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(irpSp_4)] != 14;
    goto L18;
}



procedure {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_7: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_19: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialRundownIrpRefs"} SerialRundownIrpRefs(actual_CurrentOpIrp_7: int, actual_IntervalTimer_1: int, actual_TotalTimer_1: int, actual_PDevExt_19: int)
{
  var {:pointer} Tmp_948: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} sdv_766: int;
  var {:pointer} sdv_767: int;
  var {:pointer} s_p_e_c_i_a_l_24: int;
  var {:scalar} s_p_e_c_i_a_l_25: int;
  var {:scalar} sdv_769: int;
  var {:pointer} sdv_770: int;
  var {:scalar} sdv_771: int;
  var {:pointer} s_p_e_c_i_a_l_26: int;
  var {:scalar} s_p_e_c_i_a_l_27: int;
  var {:scalar} s_p_e_c_i_a_l_28: int;
  var {:pointer} CurrentOpIrp_7: int;
  var {:pointer} IntervalTimer_1: int;
  var {:pointer} TotalTimer_1: int;
  var {:pointer} PDevExt_19: int;
  var vslice_dummy_var_501: int;
  var vslice_dummy_var_502: int;

  anon0:
    call {:si_unique_call 2084} vslice_dummy_var_501 := __HAVOC_malloc(4);
    CurrentOpIrp_7 := actual_CurrentOpIrp_7;
    IntervalTimer_1 := actual_IntervalTimer_1;
    TotalTimer_1 := actual_TotalTimer_1;
    PDevExt_19 := actual_PDevExt_19;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    Tmp_948 := Mem_T.P_IRP[CurrentOpIrp_7];
    assume {:nonnull} Tmp_948 != 0;
    assume Tmp_948 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    s_p_e_c_i_a_l_25 := 2;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    call {:si_unique_call 2085} sdv_766 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_7]);
    assume {:nonnull} sdv_766 != 0;
    assume sdv_766 > 0;
    s_p_e_c_i_a_l_23 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_766)));
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_23] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_23], BNOT(s_p_e_c_i_a_l_25));
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    call {:si_unique_call 2086} vslice_dummy_var_502 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentOpIrp_7], 0);
    goto L4;

  L4:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IntervalTimer_1 != 0;
    call {:si_unique_call 2087} sdv_769 := SerialCancelTimer(IntervalTimer_1, PDevExt_19);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_769 != 0;
    s_p_e_c_i_a_l_27 := 8;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    call {:si_unique_call 2088} sdv_770 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_7]);
    assume {:nonnull} sdv_770 != 0;
    assume sdv_770 > 0;
    s_p_e_c_i_a_l_26 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_770)));
    assume {:nonnull} s_p_e_c_i_a_l_26 != 0;
    assume s_p_e_c_i_a_l_26 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_26] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_26], BNOT(s_p_e_c_i_a_l_27));
    goto L16;

  L16:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} TotalTimer_1 != 0;
    call {:si_unique_call 2089} sdv_771 := SerialCancelTimer(TotalTimer_1, PDevExt_19);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_771 != 0;
    s_p_e_c_i_a_l_28 := 4;
    assume {:nonnull} CurrentOpIrp_7 != 0;
    assume CurrentOpIrp_7 > 0;
    call {:si_unique_call 2090} sdv_767 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_7]);
    assume {:nonnull} sdv_767 != 0;
    assume sdv_767 > 0;
    s_p_e_c_i_a_l_24 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_767)));
    assume {:nonnull} s_p_e_c_i_a_l_24 != 0;
    assume s_p_e_c_i_a_l_24 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_24] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_24], BNOT(s_p_e_c_i_a_l_28));
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} sdv_771 == 0;
    goto L1;

  anon12_Then:
    assume {:partition} TotalTimer_1 == 0;
    goto L1;

  anon13_Then:
    assume {:partition} sdv_769 == 0;
    goto L16;

  anon11_Then:
    assume {:partition} IntervalTimer_1 == 0;
    goto L16;

  anon15_Then:
    goto L4;
}



procedure {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_20: int) returns (Tmp_950: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_950 == 0 || Tmp_950 == -1073741536 || Tmp_950 == 259 || Tmp_950 == -1073741738;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialFilterIrps"} SerialFilterIrps(actual_PIrp_10: int, actual_PDevExt_20: int) returns (Tmp_950: int)
{
  var {:scalar} oldIrqlFlags: int;
  var {:scalar} oldIrql_11: int;
  var {:pointer} pIrpStack_7: int;
  var {:pointer} Tmp_951: int;
  var {:pointer} PIrp_10: int;
  var {:pointer} PDevExt_20: int;
  var vslice_dummy_var_503: int;
  var vslice_dummy_var_504: int;

  anon0:
    PIrp_10 := actual_PIrp_10;
    PDevExt_20 := actual_PDevExt_20;
    call {:si_unique_call 2091} pIrpStack_7 := sdv_IoGetCurrentIrpStackLocation(PIrp_10);
    call {:si_unique_call 2092} Tmp_951 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    Mem_T.INT4[Tmp_951] := oldIrqlFlags;
    call {:si_unique_call 2093} sdv_KeAcquireSpinLock(0, Tmp_951);
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    oldIrqlFlags := Mem_T.INT4[Tmp_951];
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)] != 0;
    goto L14;

  L14:
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 1) != 0;
    goto L16;

  L16:
    call {:si_unique_call 2094} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] == 27;
    Tmp_950 := 0;
    goto L1;

  L1:
    return;

  anon31_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] != 27;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741738;
    Tmp_950 := -1073741738;
    goto L1;

  anon29_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 1) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 8) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 2) != 0;
    goto L27;

  L27:
    call {:si_unique_call 2095} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] == 27;
    Tmp_950 := 0;
    goto L1;

  anon35_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] != 27;
    assume {:nonnull} pIrpStack_7 != 0;
    assume pIrpStack_7 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] == 22;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) != 0;
    Tmp_950 := 0;
    goto L1;

  anon37_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) == 0;
    goto L33;

  L33:
    call {:si_unique_call 2096} Tmp_951 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    Mem_T.INT4[Tmp_951] := oldIrql_11;
    call {:si_unique_call 2097} IoAcquireCancelSpinLock(Tmp_951);
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_951];
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(PIrp_10)] != 0;
    call {:si_unique_call 2098} IoReleaseCancelSpinLock(oldIrql_11);
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := -1073741536;
    Tmp_950 := -1073741536;
    goto L1;

  anon38_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(PIrp_10)] == 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PIrp_10))] := 259;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume PIrp_10 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2099} SLIC_sdv_IoMarkIrpPending_entry(strConst__li2bpl2);
    goto L80;

  L80:
    call {:si_unique_call 2100} sdv_IoMarkIrpPending(0);
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    assume {:nonnull} PIrp_10 != 0;
    assume PIrp_10 > 0;
    call {:si_unique_call 2101} vslice_dummy_var_503 := sdv_InsertTailList(StalledIrpQueue__SERIAL_DEVICE_EXTENSION(PDevExt_20), ListEntry_unnamed_tag_7(Overlay_unnamed_tag_6(Tail__IRP(PIrp_10))));
    call {:si_unique_call 2102} vslice_dummy_var_504 := sdv_IoSetCancelRoutine(PIrp_10, li2bplFunctionConstant168);
    call {:si_unique_call 2103} IoReleaseCancelSpinLock(oldIrql_11);
    Tmp_950 := 259;
    goto L1;

  anon39_Then:
    assume !(PIrp_10 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L80;

  anon36_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(pIrpStack_7)] != 22;
    goto L33;

  anon33_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 2) == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) == 0;
    call {:si_unique_call 2104} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_950 := 0;
    goto L1;

  anon34_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 16) != 0;
    goto L27;

  anon32_Then:
    assume {:partition} BAND(Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 8) != 0;
    goto L16;

  anon30_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) != 0;
    goto L16;

  anon27_Then:
    assume {:partition} Mem_T.INT4[DevicePNPAccept__SERIAL_DEVICE_EXTENSION(PDevExt_20)] == 0;
    assume {:nonnull} PDevExt_20 != 0;
    assume PDevExt_20 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) == 0;
    call {:si_unique_call 2105} sdv_KeReleaseSpinLock(0, oldIrqlFlags);
    Tmp_950 := 0;
    goto L1;

  anon28_Then:
    assume {:partition} BAND(Mem_T.INT4[Flags__SERIAL_DEVICE_EXTENSION(PDevExt_20)], 4) != 0;
    goto L14;
}



procedure {:origName "SLIC_ABORT_9_0"} SLIC_ABORT_9_0(actual_caller: int, actual_SerialPnpDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_9_0"} SLIC_ABORT_9_0(actual_caller: int, actual_SerialPnpDispatch_1: int)
{
  var {:pointer} caller: int;
  var {:scalar} SerialPnpDispatch_1: int;

  anon0:
    caller := actual_caller;
    SerialPnpDispatch_1 := actual_SerialPnpDispatch_1;
    call {:si_unique_call 2106} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_1: int, actual_SerialInternalIoControl_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialInternalIoControl_exit"} {:osmodel} SLIC_SerialInternalIoControl_exit(actual_caller_1: int, actual_SerialInternalIoControl_1: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} SerialInternalIoControl_1: int;

  anon0:
    caller_1 := actual_caller_1;
    SerialInternalIoControl_1 := actual_SerialInternalIoControl_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialInternalIoControl_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2107} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialInternalIoControl_1 == 259;
    call {:si_unique_call 2108} SLIC_ABORT_17_0(caller_1, SerialInternalIoControl_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_2: int, actual_SerialQueryInformationFile_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_2: int, actual_SerialQueryInformationFile_1: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} SerialQueryInformationFile_1: int;

  anon0:
    caller_2 := actual_caller_2;
    SerialQueryInformationFile_1 := actual_SerialQueryInformationFile_1;
    call {:si_unique_call 2109} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_entry"} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_sdv_IoCallDriver_entry"} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int)
{

  anon0:
    call {:si_unique_call 2110} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    return;
}



procedure {:origName "SLIC_ABORT_33_0"} SLIC_ABORT_33_0(actual_caller_4: int, actual_SerialCreateOpen_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_33_0"} SLIC_ABORT_33_0(actual_caller_4: int, actual_SerialCreateOpen_1: int)
{
  var {:pointer} caller_4: int;
  var {:scalar} SerialCreateOpen_1: int;

  anon0:
    caller_4 := actual_caller_4;
    SerialCreateOpen_1 := actual_SerialCreateOpen_1;
    call {:si_unique_call 2111} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_5: int, actual_SerialPnpDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialPnpDispatch_exit"} {:osmodel} SLIC_SerialPnpDispatch_exit(actual_caller_5: int, actual_SerialPnpDispatch_2: int)
{
  var {:pointer} caller_5: int;
  var {:scalar} SerialPnpDispatch_2: int;

  anon0:
    caller_5 := actual_caller_5;
    SerialPnpDispatch_2 := actual_SerialPnpDispatch_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialPnpDispatch_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2112} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialPnpDispatch_2 == 259;
    call {:si_unique_call 2113} SLIC_ABORT_9_0(caller_5, SerialPnpDispatch_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_PoCallDriver_entry"} SLIC_PoCallDriver_entry(actual_caller_6: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_PoCallDriver_entry"} SLIC_PoCallDriver_entry(actual_caller_6: int)
{

  anon0:
    call {:si_unique_call 2114} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    return;
}



procedure {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_7: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_7: int)
{

  anon0:
    call {:si_unique_call 2115} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    return;
}



procedure {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int, actual_SerialIoControl_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_8: int, actual_SerialIoControl_1: int)
{
  var {:pointer} caller_8: int;
  var {:scalar} SerialIoControl_1: int;

  anon0:
    caller_8 := actual_caller_8;
    SerialIoControl_1 := actual_SerialIoControl_1;
    call {:si_unique_call 2116} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_9: int, actual_sdv_774: int);
  modifies io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_9: int, actual_sdv_774: int)
{
  var {:pointer} caller_9: int;
  var {:pointer} sdv_774: int;

  anon0:
    caller_9 := actual_caller_9;
    sdv_774 := actual_sdv_774;
    assume {:nonnull} sdv_774 != 0;
    assume sdv_774 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_774))] != 259;
    io_complete_request_called := 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_774))] == 259;
    call {:si_unique_call 2117} SLIC_ABORT_7_0(caller_9, sdv_774);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_10: int, actual_SerialCleanup_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialCleanup_exit"} {:osmodel} SLIC_SerialCleanup_exit(actual_caller_10: int, actual_SerialCleanup_1: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} SerialCleanup_1: int;

  anon0:
    caller_10 := actual_caller_10;
    SerialCleanup_1 := actual_SerialCleanup_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialCleanup_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2118} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialCleanup_1 == 259;
    call {:si_unique_call 2119} SLIC_ABORT_15_0(caller_10, SerialCleanup_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_11: int, actual_SerialPowerDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialPowerDispatch_exit"} {:osmodel} SLIC_SerialPowerDispatch_exit(actual_caller_11: int, actual_SerialPowerDispatch_1: int)
{
  var {:pointer} caller_11: int;
  var {:scalar} SerialPowerDispatch_1: int;

  anon0:
    caller_11 := actual_caller_11;
    SerialPowerDispatch_1 := actual_SerialPowerDispatch_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialPowerDispatch_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2120} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialPowerDispatch_1 == 259;
    call {:si_unique_call 2121} SLIC_ABORT_13_0(caller_11, SerialPowerDispatch_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_12: int, actual_PoCallDriver_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_PoCallDriver_exit"} {:osmodel} SLIC_PoCallDriver_exit(actual_caller_12: int, actual_PoCallDriver_1: int)
{
  var {:pointer} PoCallDriver_1: int;

  anon0:
    PoCallDriver_1 := actual_PoCallDriver_1;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PoCallDriver_1))] == 259;
    call {:si_unique_call 2122} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(PoCallDriver_1))] != 259;
    goto L2;
}



procedure {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_13: int, actual_SerialRead_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialRead_exit"} {:osmodel} SLIC_SerialRead_exit(actual_caller_13: int, actual_SerialRead_1: int)
{
  var {:pointer} caller_13: int;
  var {:scalar} SerialRead_1: int;

  anon0:
    caller_13 := actual_caller_13;
    SerialRead_1 := actual_SerialRead_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialRead_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2123} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialRead_1 == 259;
    call {:si_unique_call 2124} SLIC_ABORT_29_0(caller_13, SerialRead_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_14: int, actual_SerialQueryInformationFile_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialQueryInformationFile_exit"} {:osmodel} SLIC_SerialQueryInformationFile_exit(actual_caller_14: int, actual_SerialQueryInformationFile_2: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} SerialQueryInformationFile_2: int;

  anon0:
    caller_14 := actual_caller_14;
    SerialQueryInformationFile_2 := actual_SerialQueryInformationFile_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialQueryInformationFile_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2125} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialQueryInformationFile_2 == 259;
    call {:si_unique_call 2126} SLIC_ABORT_25_0(caller_14, SerialQueryInformationFile_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_sdv_IoMarkIrpPending_entry"} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_sdv_IoMarkIrpPending_entry"} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int)
{

  anon0:
    call {:si_unique_call 2127} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    return;
}



procedure {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_16: int, actual_SerialIoControl_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialIoControl_exit"} {:osmodel} SLIC_SerialIoControl_exit(actual_caller_16: int, actual_SerialIoControl_2: int)
{
  var {:pointer} caller_16: int;
  var {:scalar} SerialIoControl_2: int;

  anon0:
    caller_16 := actual_caller_16;
    SerialIoControl_2 := actual_SerialIoControl_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialIoControl_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2128} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialIoControl_2 == 259;
    call {:si_unique_call 2129} SLIC_ABORT_19_0(caller_16, SerialIoControl_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_17: int, actual_SerialCleanup_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_17: int, actual_SerialCleanup_2: int)
{
  var {:pointer} caller_17: int;
  var {:scalar} SerialCleanup_2: int;

  anon0:
    caller_17 := actual_caller_17;
    SerialCleanup_2 := actual_SerialCleanup_2;
    call {:si_unique_call 2130} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_18: int, actual_sdv_775: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_sdv_IoCallDriver_exit"} {:osmodel} SLIC_sdv_IoCallDriver_exit(actual_caller_18: int, actual_sdv_775: int)
{
  var {:pointer} sdv_775: int;

  anon0:
    sdv_775 := actual_sdv_775;
    assume {:nonnull} sdv_775 != 0;
    assume sdv_775 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_775))] == 259;
    call {:si_unique_call 2131} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(sdv_775))] != 259;
    goto L2;
}



procedure {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_19: int, actual_SerialCreateOpen_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialCreateOpen_exit"} {:osmodel} SLIC_SerialCreateOpen_exit(actual_caller_19: int, actual_SerialCreateOpen_2: int)
{
  var {:pointer} caller_19: int;
  var {:scalar} SerialCreateOpen_2: int;

  anon0:
    caller_19 := actual_caller_19;
    SerialCreateOpen_2 := actual_SerialCreateOpen_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialCreateOpen_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2132} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialCreateOpen_2 == 259;
    call {:si_unique_call 2133} SLIC_ABORT_33_0(caller_19, SerialCreateOpen_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_20: int, actual_SerialSystemControlDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_20: int, actual_SerialSystemControlDispatch_1: int)
{
  var {:pointer} caller_20: int;
  var {:scalar} SerialSystemControlDispatch_1: int;

  anon0:
    caller_20 := actual_caller_20;
    SerialSystemControlDispatch_1 := actual_SerialSystemControlDispatch_1;
    call {:si_unique_call 2134} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_21: int, actual_SerialInternalIoControl_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_21: int, actual_SerialInternalIoControl_2: int)
{
  var {:pointer} caller_21: int;
  var {:scalar} SerialInternalIoControl_2: int;

  anon0:
    caller_21 := actual_caller_21;
    SerialInternalIoControl_2 := actual_SerialInternalIoControl_2;
    call {:si_unique_call 2135} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_22: int, actual_SerialWrite_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialWrite_exit"} {:osmodel} SLIC_SerialWrite_exit(actual_caller_22: int, actual_SerialWrite_1: int)
{
  var {:pointer} caller_22: int;
  var {:scalar} SerialWrite_1: int;

  anon0:
    caller_22 := actual_caller_22;
    SerialWrite_1 := actual_SerialWrite_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialWrite_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2136} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialWrite_1 == 259;
    call {:si_unique_call 2137} SLIC_ABORT_27_0(caller_22, SerialWrite_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_7_0"} SLIC_ABORT_7_0(actual_caller_23: int, actual_sdv_776: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_7_0"} SLIC_ABORT_7_0(actual_caller_23: int, actual_sdv_776: int)
{
  var {:pointer} caller_23: int;
  var {:pointer} sdv_776: int;

  anon0:
    caller_23 := actual_caller_23;
    sdv_776 := actual_sdv_776;
    call {:si_unique_call 2138} SLIC_ERROR_ROUTINE(strConst__li2bpl223);
    return;
}



procedure {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_24: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_24: int)
{

  anon0:
    call {:si_unique_call 2139} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    return;
}



procedure {:origName "SLIC_ABORT_29_0"} SLIC_ABORT_29_0(actual_caller_25: int, actual_SerialRead_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_29_0"} SLIC_ABORT_29_0(actual_caller_25: int, actual_SerialRead_2: int)
{
  var {:pointer} caller_25: int;
  var {:scalar} SerialRead_2: int;

  anon0:
    caller_25 := actual_caller_25;
    SerialRead_2 := actual_SerialRead_2;
    call {:si_unique_call 2140} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_26: int, actual_SerialSetInformationFile_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialSetInformationFile_exit"} {:osmodel} SLIC_SerialSetInformationFile_exit(actual_caller_26: int, actual_SerialSetInformationFile_1: int)
{
  var {:pointer} caller_26: int;
  var {:scalar} SerialSetInformationFile_1: int;

  anon0:
    caller_26 := actual_caller_26;
    SerialSetInformationFile_1 := actual_SerialSetInformationFile_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialSetInformationFile_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2141} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialSetInformationFile_1 == 259;
    call {:si_unique_call 2142} SLIC_ABORT_23_0(caller_26, SerialSetInformationFile_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_ABORT_27_0"} SLIC_ABORT_27_0(actual_caller_27: int, actual_SerialWrite_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_27_0"} SLIC_ABORT_27_0(actual_caller_27: int, actual_SerialWrite_2: int)
{
  var {:pointer} caller_27: int;
  var {:scalar} SerialWrite_2: int;

  anon0:
    caller_27 := actual_caller_27;
    SerialWrite_2 := actual_SerialWrite_2;
    call {:si_unique_call 2143} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_28: int, actual_SerialFlush_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialFlush_exit"} {:osmodel} SLIC_SerialFlush_exit(actual_caller_28: int, actual_SerialFlush_1: int)
{
  var {:pointer} caller_28: int;
  var {:scalar} SerialFlush_1: int;

  anon0:
    caller_28 := actual_caller_28;
    SerialFlush_1 := actual_SerialFlush_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialFlush_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2144} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialFlush_1 == 259;
    call {:si_unique_call 2145} SLIC_ABORT_21_0(caller_28, SerialFlush_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_KeWaitForSingleObject_exit"} {:osmodel} SLIC_KeWaitForSingleObject_exit(actual_caller_29: int, actual_KeWaitForSingleObject_1: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_KeWaitForSingleObject_exit"} {:osmodel} SLIC_KeWaitForSingleObject_exit(actual_caller_29: int, actual_KeWaitForSingleObject_1: int)
{
  var {:scalar} KeWaitForSingleObject_1: int;

  anon0:
    KeWaitForSingleObject_1 := actual_KeWaitForSingleObject_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} KeWaitForSingleObject_1 != 0;
    call {:si_unique_call 2146} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} KeWaitForSingleObject_1 == 0;
    goto L2;
}



procedure {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_30: int, actual_SerialClose_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialClose_exit"} {:osmodel} SLIC_SerialClose_exit(actual_caller_30: int, actual_SerialClose_1: int)
{
  var {:pointer} caller_30: int;
  var {:scalar} SerialClose_1: int;

  anon0:
    caller_30 := actual_caller_30;
    SerialClose_1 := actual_SerialClose_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialClose_1 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2147} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialClose_1 == 259;
    call {:si_unique_call 2148} SLIC_ABORT_31_0(caller_30, SerialClose_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_31: int, actual_SerialSystemControlDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_SerialSystemControlDispatch_exit"} {:osmodel} SLIC_SerialSystemControlDispatch_exit(actual_caller_31: int, actual_SerialSystemControlDispatch_2: int)
{
  var {:pointer} caller_31: int;
  var {:scalar} SerialSystemControlDispatch_2: int;

  anon0:
    caller_31 := actual_caller_31;
    SerialSystemControlDispatch_2 := actual_SerialSystemControlDispatch_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} io_complete_request_called != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} SerialSystemControlDispatch_2 != 259;
    goto L6;

  L6:
    call {:si_unique_call 2149} SLIC_EXIT_ROUTINE(strConst__li2bpl222);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} SerialSystemControlDispatch_2 == 259;
    call {:si_unique_call 2150} SLIC_ABORT_11_0(caller_31, SerialSystemControlDispatch_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} io_complete_request_called == 0;
    goto L6;
}



procedure {:origName "_sdv_init23"} {:osmodel} _sdv_init23();
  modifies SLAM_guard_S_0, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init23"} {:osmodel} _sdv_init23()
{

  anon0:
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    io_complete_request_called := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_32: int, actual_SerialClose_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_31_0"} SLIC_ABORT_31_0(actual_caller_32: int, actual_SerialClose_2: int)
{
  var {:pointer} caller_32: int;
  var {:scalar} SerialClose_2: int;

  anon0:
    caller_32 := actual_caller_32;
    SerialClose_2 := actual_SerialClose_2;
    call {:si_unique_call 2151} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_33: int, actual_SerialSetInformationFile_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_33: int, actual_SerialSetInformationFile_2: int)
{
  var {:pointer} caller_33: int;
  var {:scalar} SerialSetInformationFile_2: int;

  anon0:
    caller_33 := actual_caller_33;
    SerialSetInformationFile_2 := actual_SerialSetInformationFile_2;
    call {:si_unique_call 2152} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_34: int, actual_SerialFlush_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_34: int, actual_SerialFlush_2: int)
{
  var {:pointer} caller_34: int;
  var {:scalar} SerialFlush_2: int;

  anon0:
    caller_34 := actual_caller_34;
    SerialFlush_2 := actual_SerialFlush_2;
    call {:si_unique_call 2153} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_35: int, actual_SerialPowerDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_35: int, actual_SerialPowerDispatch_2: int)
{
  var {:pointer} caller_35: int;
  var {:scalar} SerialPowerDispatch_2: int;

  anon0:
    caller_35 := actual_caller_35;
    SerialPowerDispatch_2 := actual_SerialPowerDispatch_2;
    call {:si_unique_call 2154} SLIC_ERROR_ROUTINE(strConst__li2bpl221);
    return;
}



procedure {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_952: int);
  free ensures {:va_keep} Tmp_952 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDbgPrintEx"} SerialDbgPrintEx(actual_Level: int, actual_Format: int) returns (Tmp_952: int)
{

  anon0:
    Tmp_952 := 0;
    return;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_1: int)
{
  var {:pointer} ListHead_1: int;
  var vslice_dummy_var_505: int;

  anon0:
    call {:si_unique_call 2155} vslice_dummy_var_505 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_956: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_956: int)
{
  var {:pointer} Entry_1: int;
  var {:pointer} Flink: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    call {:si_unique_call 2156} SLIC_RemoveHeadList_entry(strConst__li2bpl160);
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc Flink;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} Flink != 0;
    assume Flink > 0;
    Tmp_956 := Entry_1;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_506: int;

  anon0:
    call {:si_unique_call 2157} vslice_dummy_var_506 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_6: int) returns (Tmp_960: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_960 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialClrRTS"} SerialClrRTS(actual_Context_6: int) returns (Tmp_960: int)
{
  var {:pointer} Tmp_961: int;
  var {:pointer} Extension_23: int;
  var {:scalar} ModemControl_1: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_507: int;

  anon0:
    Context_6 := actual_Context_6;
    call {:si_unique_call 2158} Tmp_961 := __HAVOC_malloc(84);
    Extension_23 := Context_6;
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    call {:si_unique_call 2159} ModemControl_1 := corral_nondet();
    ModemControl_1 := BAND(ModemControl_1, BNOT(2));
    Tmp_961 := strConst__li2bpl224;
    call {:si_unique_call 2160} vslice_dummy_var_507 := SerialDbgPrintEx(13, Tmp_961);
    assume {:nonnull} Extension_23 != 0;
    assume Extension_23 > 0;
    Tmp_960 := 0;
    return;
}



procedure {:origName "_sdv_init17"} _sdv_init17();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init17"} _sdv_init17()
{
  var vslice_dummy_var_508: int;

  anon0:
    call {:si_unique_call 2161} vslice_dummy_var_508 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_7: int) returns (Tmp_967: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_967 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialClrDTR"} SerialClrDTR(actual_Context_7: int) returns (Tmp_967: int)
{
  var {:pointer} Tmp_969: int;
  var {:pointer} Extension_24: int;
  var {:scalar} ModemControl_2: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_509: int;

  anon0:
    Context_7 := actual_Context_7;
    call {:si_unique_call 2162} Tmp_969 := __HAVOC_malloc(84);
    Extension_24 := Context_7;
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    call {:si_unique_call 2163} ModemControl_2 := corral_nondet();
    ModemControl_2 := BAND(ModemControl_2, BNOT(1));
    Tmp_969 := strConst__li2bpl225;
    call {:si_unique_call 2164} vslice_dummy_var_509 := SerialDbgPrintEx(13, Tmp_969);
    assume {:nonnull} Extension_24 != 0;
    assume Extension_24 > 0;
    Tmp_967 := 0;
    return;
}



procedure {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_25: int) returns (Tmp_972: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartPurge"} SerialStartPurge(actual_Extension_25: int) returns (Tmp_972: int)
{
  var {:pointer} Tmp_973: int;
  var {:pointer} Tmp_974: int;
  var {:scalar} Mask_2: int;
  var {:scalar} OldIrql_10: int;
  var {:pointer} NewIrp_5: int;
  var {:pointer} Tmp_975: int;
  var {:pointer} Tmp_976: int;
  var {:pointer} Tmp_977: int;
  var {:pointer} Extension_25: int;
  var vslice_dummy_var_510: int;
  var vslice_dummy_var_2713: int;
  var vslice_dummy_var_2714: int;
  var vslice_dummy_var_2715: int;

  anon0:
    call {:si_unique_call 2165} NewIrp_5 := __HAVOC_malloc(4);
    Extension_25 := actual_Extension_25;
    goto L5;

  L5:
    call {:si_unique_call 2166} Tmp_973, Tmp_974, Mask_2, OldIrql_10, Tmp_975, Tmp_976, Tmp_977, vslice_dummy_var_510 := SerialStartPurge_loop_L5(Tmp_973, Tmp_974, Mask_2, OldIrql_10, NewIrp_5, Tmp_975, Tmp_976, Tmp_977, Extension_25, vslice_dummy_var_510);
    goto L5_last;

  L5_last:
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_977 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Tmp_977 != 0;
    assume Tmp_977 > 0;
    havoc Tmp_976;
    assume {:nonnull} Tmp_976 != 0;
    assume Tmp_976 > 0;
    Mask_2 := Mem_T.INT4[Tmp_976];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(Mask_2, 1) != 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    havoc vslice_dummy_var_2713;
    call {:si_unique_call 2167} SerialKillAllReadsOrWrites(vslice_dummy_var_2713, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_25), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_25));
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    havoc vslice_dummy_var_2714;
    call {:si_unique_call 2168} SerialKillAllReadsOrWrites(vslice_dummy_var_2714, WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_25), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_25));
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mask_2, 2) != 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    havoc vslice_dummy_var_2715;
    call {:si_unique_call 2169} SerialKillAllReadsOrWrites(vslice_dummy_var_2715, ReadQueue__SERIAL_DEVICE_EXTENSION(Extension_25), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(Extension_25));
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(Mask_2, 8) != 0;
    call {:si_unique_call 2170} Tmp_975 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    Mem_T.INT4[Tmp_975] := OldIrql_10;
    call {:si_unique_call 2171} sdv_KeAcquireSpinLock(0, Tmp_975);
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    OldIrql_10 := Mem_T.INT4[Tmp_975];
    call {:si_unique_call 2172} vslice_dummy_var_510 := KeSynchronizeExecution(0, li2bplFunctionConstant484, 0);
    call {:si_unique_call 2173} sdv_KeReleaseSpinLock(0, OldIrql_10);
    goto L18;

  L18:
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_974 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Tmp_974 != 0;
    assume Tmp_974 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_974))] := 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    Tmp_973 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_25)];
    assume {:nonnull} Tmp_973 != 0;
    assume Tmp_973 > 0;
    assume {:nonnull} Extension_25 != 0;
    assume Extension_25 > 0;
    call {:si_unique_call 2174} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(Extension_25), PurgeQueue__SERIAL_DEVICE_EXTENSION(Extension_25), NewIrp_5, 1, Extension_25);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_5 != 0;
    assume NewIrp_5 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_5] == 0;
    Tmp_972 := 0;
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_5] != 0;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} BAND(Mask_2, 8) == 0;
    goto L18;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:partition} BAND(Mask_2, 2) == 0;
    goto L14;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} BAND(Mask_2, 1) == 0;
    goto L7;
}



procedure {:origName "_sdv_init19"} _sdv_init19();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init19"} _sdv_init19()
{
  var vslice_dummy_var_511: int;

  anon0:
    call {:si_unique_call 2175} vslice_dummy_var_511 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "_sdv_init18"} _sdv_init18()
{
  var vslice_dummy_var_512: int;

  anon0:
    call {:si_unique_call 2176} vslice_dummy_var_512 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "SerialClose"} SerialClose(actual_DeviceObject_27: int, actual_Irp_23: int) returns (Tmp_982: int);
  modifies alloc, Mem_T.INT4, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialClose"} SerialClose(actual_DeviceObject_27: int, actual_Irp_23: int) returns (Tmp_982: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:scalar} flushCount: int;
  var {:scalar} sdv_784: int;
  var {:scalar} sdv_785: int;
  var {:scalar} charTime_1: int;
  var {:scalar} Tmp_984: int;
  var {:scalar} pendingDPCs: int;
  var {:pointer} Tmp_986: int;
  var {:scalar} tenCharDelay: int;
  var {:pointer} Tmp_987: int;
  var {:pointer} Tmp_988: int;
  var {:pointer} Tmp_989: int;
  var {:pointer} Tmp_990: int;
  var {:pointer} Tmp_991: int;
  var {:scalar} sdv_806: int;
  var {:pointer} Tmp_992: int;
  var {:pointer} Tmp_994: int;
  var {:pointer} Tmp_995: int;
  var {:scalar} Tmp_996: int;
  var {:scalar} status_30: int;
  var {:scalar} sdv_809: int;
  var {:pointer} Tmp_998: int;
  var {:pointer} extension_5: int;
  var {:pointer} Tmp_999: int;
  var {:scalar} sdv: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_513: int;
  var vslice_dummy_var_514: int;
  var vslice_dummy_var_515: int;
  var vslice_dummy_var_516: int;
  var vslice_dummy_var_517: int;
  var vslice_dummy_var_518: int;
  var vslice_dummy_var_519: int;
  var vslice_dummy_var_520: int;
  var vslice_dummy_var_521: int;
  var vslice_dummy_var_522: int;
  var vslice_dummy_var_523: int;
  var vslice_dummy_var_524: int;
  var vslice_dummy_var_525: int;
  var vslice_dummy_var_526: int;
  var vslice_dummy_var_527: int;
  var vslice_dummy_var_528: int;
  var vslice_dummy_var_529: int;
  var vslice_dummy_var_530: int;
  var vslice_dummy_var_531: int;
  var vslice_dummy_var_532: int;
  var vslice_dummy_var_533: int;
  var vslice_dummy_var_534: int;
  var vslice_dummy_var_535: int;
  var vslice_dummy_var_536: int;
  var vslice_dummy_var_537: int;
  var vslice_dummy_var_538: int;
  var vslice_dummy_var_2716: int;
  var vslice_dummy_var_2717: int;

  anon0:
    call {:si_unique_call 2177} charTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2178} tenCharDelay := __HAVOC_malloc(20);
    call {:si_unique_call 2179} sdv := __HAVOC_malloc(20);
    DeviceObject_27 := actual_DeviceObject_27;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 2180} Tmp_986 := __HAVOC_malloc(72);
    call {:si_unique_call 2181} Tmp_987 := __HAVOC_malloc(96);
    call {:si_unique_call 2182} Tmp_988 := __HAVOC_malloc(92);
    call {:si_unique_call 2183} Tmp_989 := __HAVOC_malloc(64);
    call {:si_unique_call 2184} Tmp_990 := __HAVOC_malloc(124);
    call {:si_unique_call 2185} Tmp_992 := __HAVOC_malloc(72);
    call {:si_unique_call 2186} Tmp_994 := __HAVOC_malloc(80);
    call {:si_unique_call 2187} Tmp_995 := __HAVOC_malloc(76);
    call {:si_unique_call 2188} Tmp_998 := __HAVOC_malloc(128);
    call {:si_unique_call 2189} Tmp_999 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc extension_5;
    call {:si_unique_call 2190} ExAcquireFastMutex(0);
    call {:si_unique_call 2191} status_30 := SerialIRPPrologue(Irp_23, extension_5);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} status_30 != 0;
    Tmp_990 := strConst__li2bpl226;
    call {:si_unique_call 2192} vslice_dummy_var_525 := SerialDbgPrintEx(3, Tmp_990);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_30 == -1073741738;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 2193} sdv_ExFreePool(0);
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_5)] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_30 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))];
    goto L25;

  L25:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} status_30 != 259;
    Tmp_999 := strConst__li2bpl1;
    call {:si_unique_call 2194} vslice_dummy_var_526 := SerialDbgPrintEx(9, Tmp_999);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume Irp_23 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2195} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_23);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} yogi_error != 1;
    goto L237;

  L237:
    call {:si_unique_call 2196} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2197} SerialIRPEpilogue(extension_5);
    call {:si_unique_call 2198} Tmp_991 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.INT4[Tmp_991] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)];
    call {:si_unique_call 2199} vslice_dummy_var_527 := sdv_InterlockedDecrement(Tmp_991);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)] := Mem_T.INT4[Tmp_991];
    goto L33;

  L33:
    call {:si_unique_call 2200} ExReleaseFastMutex(0);
    Tmp_982 := status_30;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon65_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon53_Then:
    assume !(Irp_23 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L237;

  anon52_Then:
    assume {:partition} status_30 == 259;
    goto L33;

  anon51_Then:
    assume {:partition} status_30 != -1073741738;
    goto L25;

  anon49_Then:
    assume {:partition} status_30 == 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} 1 > Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)];
    Tmp_998 := strConst__li2bpl227;
    call {:si_unique_call 2201} vslice_dummy_var_528 := SerialDbgPrintEx(0, Tmp_998);
    Tmp_988 := strConst__li2bpl228;
    call {:si_unique_call 2202} vslice_dummy_var_529 := SerialDbgPrintEx(0, Tmp_988);
    call {:si_unique_call 2203} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := -1073741808;
    Tmp_986 := strConst__li2bpl1;
    call {:si_unique_call 2204} vslice_dummy_var_530 := SerialDbgPrintEx(9, Tmp_986);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume Irp_23 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2205} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_23);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} yogi_error != 1;
    goto L240;

  L240:
    call {:si_unique_call 2206} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2207} SerialIRPEpilogue(extension_5);
    Tmp_982 := -1073741808;
    goto L1;

  anon66_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume !(Irp_23 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L240;

  anon50_Then:
    assume {:partition} Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)] >= 1;
    Tmp_987 := strConst__li2bpl0;
    call {:si_unique_call 2208} vslice_dummy_var_531 := SerialDbgPrintEx(9, Tmp_987);
    Tmp_989 := strConst__li2bpl229;
    call {:si_unique_call 2209} vslice_dummy_var_532 := SerialDbgPrintEx(6, Tmp_989);
    call {:si_unique_call 2210} structPtr888sdv := SerialGetCharTime(extension_5);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    call {:si_unique_call 2211} SetDeviceIsOpened(extension_5, 0, 0);
    call {:si_unique_call 2212} vslice_dummy_var_513 := KeSynchronizeExecution(0, li2bplFunctionConstant427, 0);
    flushCount := 320;
    goto L87;

  L87:
    call {:si_unique_call 2213} flushCount, sdv_785, Tmp_996, vslice_dummy_var_514 := SerialClose_loop_L87(flushCount, sdv_785, Tmp_996, extension_5, vslice_dummy_var_514);
    goto L87_last;

  L87_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 2214} sdv_785 := corral_nondet();
    Tmp_996 := BAND(sdv_785, BOR(32, 64));
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Tmp_996 != 96;
    call {:si_unique_call 2215} vslice_dummy_var_514 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon67_Else_dummy;

  anon67_Else_dummy:
    assume false;
    return;

  anon67_Then:
    assume {:partition} Tmp_996 == 96;
    goto L88;

  L88:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} flushCount != 0;
    goto L103;

  L103:
    call {:si_unique_call 2216} vslice_dummy_var_515 := KeSynchronizeExecution(0, li2bplFunctionConstant249, 0);
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L108;

  L108:
    call {:si_unique_call 2217} sdv_806, vslice_dummy_var_516 := SerialClose_loop_L108(sdv_806, extension_5, vslice_dummy_var_516);
    goto L108_last;

  L108_last:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 2247} sdv_806 := corral_nondet();
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} BAND(sdv_806, 32) != 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    flushCount := 320;
    goto L121;

  L121:
    call {:si_unique_call 2218} flushCount, sdv_784, Tmp_984, vslice_dummy_var_517 := SerialClose_loop_L121(flushCount, sdv_784, Tmp_984, extension_5, vslice_dummy_var_517);
    goto L121_last;

  L121_last:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} flushCount != 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 2219} sdv_784 := corral_nondet();
    Tmp_984 := BAND(sdv_784, BOR(32, 64));
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Tmp_984 != 96;
    call {:si_unique_call 2220} vslice_dummy_var_517 := KeDelayExecutionThread(0, 0, 0);
    flushCount := flushCount - 1;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    assume false;
    return;

  anon68_Then:
    assume {:partition} Tmp_984 == 96;
    goto L122;

  L122:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 2221} SerialMarkHardwareBroken(extension_5);
    goto L107;

  L107:
    assume {:nonnull} charTime_1 != 0;
    assume charTime_1 > 0;
    assume {:nonnull} tenCharDelay != 0;
    assume tenCharDelay > 0;
    call {:si_unique_call 2222} vslice_dummy_var_533 := KeDelayExecutionThread(0, 1, 0);
    call {:si_unique_call 2223} vslice_dummy_var_518 := SerialClrDTR(extension_5);
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto L147;

  L147:
    call {:si_unique_call 2224} vslice_dummy_var_520 := SerialClose_loop_L147(extension_5, vslice_dummy_var_520);
    goto L147_last;

  L147_last:
    call {:si_unique_call 2248} vslice_dummy_var_520 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    call {:si_unique_call 2225} vslice_dummy_var_521 := KeSynchronizeExecution(0, li2bplFunctionConstant468, 0);
    goto L144;

  L144:
    call {:si_unique_call 2226} vslice_dummy_var_519 := SerialClrRTS(extension_5);
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_5)] != 0;
    call {:si_unique_call 2227} sdv_ExFreePool(0);
    goto L159;

  L159:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_5)] := 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    call {:si_unique_call 2228} vslice_dummy_var_522 := IoCancelIrp(0);
    goto L165;

  L165:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L172;

  L172:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_23))] := 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    Tmp_992 := strConst__li2bpl1;
    call {:si_unique_call 2229} vslice_dummy_var_534 := SerialDbgPrintEx(9, Tmp_992);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume Irp_23 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2230} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_23);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L243;

  L243:
    call {:si_unique_call 2231} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2232} SerialIRPEpilogue(extension_5);
    call {:si_unique_call 2233} Tmp_991 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc vslice_dummy_var_2716;
    Mem_T.INT4[Tmp_991] := vslice_dummy_var_2716;
    call {:si_unique_call 2234} sdv_809 := sdv_InterlockedDecrement(Tmp_991);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    pendingDPCs := sdv_809;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} pendingDPCs != 0;
    Tmp_994 := strConst__li2bpl231;
    call {:si_unique_call 2235} vslice_dummy_var_535 := SerialDbgPrintEx(4, Tmp_994);
    call {:si_unique_call 2236} vslice_dummy_var_524 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L188;

  L188:
    Tmp_995 := strConst__li2bpl230;
    call {:si_unique_call 2237} vslice_dummy_var_536 := SerialDbgPrintEx(4, Tmp_995);
    call {:si_unique_call 2238} ExReleaseFastMutex(0);
    call {:si_unique_call 2239} Tmp_991 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc vslice_dummy_var_2717;
    Mem_T.INT4[Tmp_991] := vslice_dummy_var_2717;
    call {:si_unique_call 2240} vslice_dummy_var_537 := sdv_InterlockedIncrement(Tmp_991);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 2241} Tmp_991 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.INT4[Tmp_991] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)];
    call {:si_unique_call 2242} vslice_dummy_var_538 := sdv_InterlockedDecrement(Tmp_991);
    assume {:nonnull} Tmp_991 != 0;
    assume Tmp_991 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_5)] := Mem_T.INT4[Tmp_991];
    call {:si_unique_call 2243} MmUnlockPagableImageSection(0);
    Tmp_982 := 0;
    goto L1;

  anon72_Then:
    assume {:partition} pendingDPCs == 0;
    goto L188;

  anon71_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    assume !(Irp_23 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L243;

  anon63_Then:
    call {:si_unique_call 2244} vslice_dummy_var_523 := SerialGotoPowerState(DeviceObject_27, extension_5, 4);
    goto L172;

  anon70_Then:
    goto L165;

  anon69_Then:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_5)] == 0;
    goto L159;

  anon62_Then:
    goto anon62_Then_dummy;

  anon62_Then_dummy:
    assume false;
    return;

  anon61_Then:
    goto L144;

  anon60_Then:
    assume {:partition} flushCount != 0;
    goto L107;

  anon59_Then:
    assume {:partition} flushCount == 0;
    goto L122;

  anon58_Then:
    assume {:partition} BAND(sdv_806, 32) == 0;
    call {:si_unique_call 2245} vslice_dummy_var_516 := KeDelayExecutionThread(0, 0, 0);
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    assume false;
    return;

  anon57_Then:
    goto L107;

  anon56_Then:
    assume {:partition} flushCount == 0;
    call {:si_unique_call 2246} SerialMarkHardwareBroken(extension_5);
    goto L103;

  anon55_Then:
    assume {:partition} flushCount == 0;
    goto L88;
}



procedure {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_28: int, actual_Irp_24: int) returns (Tmp_1000: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.Cancel__IRP, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCleanup"} SerialCleanup(actual_DeviceObject_28: int, actual_Irp_24: int) returns (Tmp_1000: int)
{
  var {:pointer} Tmp_1001: int;
  var {:pointer} Tmp_1002: int;
  var {:scalar} status_31: int;
  var {:pointer} extension_6: int;
  var {:pointer} Tmp_1003: int;
  var {:pointer} DeviceObject_28: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_539: int;
  var vslice_dummy_var_540: int;
  var vslice_dummy_var_541: int;

  anon0:
    DeviceObject_28 := actual_DeviceObject_28;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2249} Tmp_1001 := __HAVOC_malloc(96);
    call {:si_unique_call 2250} Tmp_1002 := __HAVOC_malloc(72);
    call {:si_unique_call 2251} Tmp_1003 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc extension_6;
    call {:si_unique_call 2252} sdv_do_paged_code_check();
    call {:si_unique_call 2253} status_31 := SerialIRPPrologue(Irp_24, extension_6);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_31 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_31 == -1073741738;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))] := 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    status_31 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))];
    goto L18;

  L18:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_31 != 259;
    Tmp_1002 := strConst__li2bpl1;
    call {:si_unique_call 2254} vslice_dummy_var_539 := SerialDbgPrintEx(9, Tmp_1002);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume Irp_24 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2255} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_24);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L49;

  L49:
    call {:si_unique_call 2256} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2257} SerialIRPEpilogue(extension_6);
    goto L21;

  L21:
    Tmp_1000 := status_31;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume !(Irp_24 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L49;

  anon19_Then:
    assume {:partition} status_31 == 259;
    goto L21;

  anon18_Then:
    assume {:partition} status_31 != -1073741738;
    goto L18;

  anon17_Then:
    assume {:partition} status_31 == 0;
    Tmp_1001 := strConst__li2bpl0;
    call {:si_unique_call 2258} vslice_dummy_var_540 := SerialDbgPrintEx(9, Tmp_1001);
    call {:si_unique_call 2259} SerialKillPendingIrps(DeviceObject_28);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_24))] := 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    Tmp_1003 := strConst__li2bpl1;
    call {:si_unique_call 2260} vslice_dummy_var_541 := SerialDbgPrintEx(9, Tmp_1003);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume Irp_24 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2261} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_24);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  L52:
    call {:si_unique_call 2262} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2263} SerialIRPEpilogue(extension_6);
    Tmp_1000 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    assume !(Irp_24 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L52;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_29: int, actual_Irp_25: int) returns (Tmp_1005: int);
  modifies alloc, Mem_T.INT4, io_complete_request_called, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialCreateOpen"} SerialCreateOpen(actual_DeviceObject_29: int, actual_Irp_25: int) returns (Tmp_1005: int)
{
  var {:scalar} localStatus_1: int;
  var {:pointer} Tmp_1006: int;
  var {:pointer} sdv_817: int;
  var {:pointer} Tmp_1007: int;
  var {:pointer} sdv_819: int;
  var {:pointer} Tmp_1008: int;
  var {:pointer} sdv_827: int;
  var {:scalar} sdv_828: int;
  var {:scalar} sdv_829: int;
  var {:pointer} Tmp_1009: int;
  var {:pointer} sdv_834: int;
  var {:pointer} Tmp_1010: int;
  var {:pointer} Tmp_1011: int;
  var {:pointer} Tmp_1012: int;
  var {:pointer} extension_7: int;
  var {:pointer} Tmp_1013: int;
  var {:scalar} checkOpen: int;
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_25: int;
  var boogieTmp: int;
  var vslice_dummy_var_542: int;
  var vslice_dummy_var_543: int;
  var vslice_dummy_var_544: int;
  var vslice_dummy_var_545: int;
  var vslice_dummy_var_546: int;
  var vslice_dummy_var_547: int;
  var vslice_dummy_var_548: int;
  var vslice_dummy_var_549: int;
  var vslice_dummy_var_550: int;
  var vslice_dummy_var_551: int;
  var vslice_dummy_var_552: int;
  var vslice_dummy_var_553: int;
  var vslice_dummy_var_554: int;
  var vslice_dummy_var_555: int;
  var vslice_dummy_var_556: int;
  var vslice_dummy_var_557: int;
  var vslice_dummy_var_2718: int;
  var vslice_dummy_var_2719: int;
  var vslice_dummy_var_2720: int;

  anon0:
    call {:si_unique_call 2264} checkOpen := __HAVOC_malloc(8);
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 2265} Tmp_1006 := __HAVOC_malloc(72);
    call {:si_unique_call 2266} Tmp_1007 := __HAVOC_malloc(96);
    call {:si_unique_call 2267} Tmp_1008 := __HAVOC_malloc(72);
    call {:si_unique_call 2268} Tmp_1009 := __HAVOC_malloc(84);
    call {:si_unique_call 2269} Tmp_1010 := __HAVOC_malloc(72);
    call {:si_unique_call 2270} Tmp_1011 := __HAVOC_malloc(72);
    call {:si_unique_call 2271} Tmp_1013 := __HAVOC_malloc(72);
    assume {:nonnull} DeviceObject_29 != 0;
    assume DeviceObject_29 > 0;
    havoc extension_7;
    call {:si_unique_call 2272} sdv_do_paged_code_check();
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741670;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2273} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L224;

  L224:
    call {:si_unique_call 2274} sdv_IoCompleteRequest(0, 0);
    Tmp_1005 := -1073741670;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L224;

  anon55_Then:
    call {:si_unique_call 2275} ExAcquireFastMutex(0);
    call {:si_unique_call 2276} localStatus_1 := SerialIRPPrologue(Irp_25, extension_7);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} localStatus_1 != 0;
    call {:si_unique_call 2277} ExReleaseFastMutex(0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} localStatus_1 != 259;
    Tmp_1010 := strConst__li2bpl1;
    call {:si_unique_call 2278} vslice_dummy_var_545 := SerialDbgPrintEx(9, Tmp_1010);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2279} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L227;

  L227:
    call {:si_unique_call 2280} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2281} SerialIRPEpilogue(extension_7);
    goto L32;

  L32:
    Tmp_1005 := localStatus_1;
    goto L1;

  anon73_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon58_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L227;

  anon57_Then:
    assume {:partition} localStatus_1 == 259;
    goto L32;

  anon56_Then:
    assume {:partition} localStatus_1 == 0;
    call {:si_unique_call 2282} Tmp_1012 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[Tmp_1012] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)];
    call {:si_unique_call 2283} sdv_828 := sdv_InterlockedIncrement(Tmp_1012);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)] := Mem_T.INT4[Tmp_1012];
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_828 != 1;
    call {:si_unique_call 2284} ExReleaseFastMutex(0);
    call {:si_unique_call 2285} Tmp_1012 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[Tmp_1012] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)];
    call {:si_unique_call 2286} vslice_dummy_var_546 := sdv_InterlockedDecrement(Tmp_1012);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)] := Mem_T.INT4[Tmp_1012];
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741790;
    Tmp_1013 := strConst__li2bpl1;
    call {:si_unique_call 2287} vslice_dummy_var_547 := SerialDbgPrintEx(9, Tmp_1013);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2288} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L230;

  L230:
    call {:si_unique_call 2289} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2290} SerialIRPEpilogue(extension_7);
    Tmp_1005 := -1073741790;
    goto L1;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L230;

  anon59_Then:
    assume {:partition} sdv_828 == 1;
    Tmp_1007 := strConst__li2bpl0;
    call {:si_unique_call 2291} vslice_dummy_var_548 := SerialDbgPrintEx(9, Tmp_1007);
    Tmp_1009 := strConst__li2bpl232;
    call {:si_unique_call 2292} vslice_dummy_var_549 := SerialDbgPrintEx(6, Tmp_1009);
    call {:si_unique_call 2293} sdv_827 := sdv_IoGetCurrentIrpStackLocation(Irp_25);
    assume {:nonnull} sdv_827 != 0;
    assume sdv_827 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    call {:si_unique_call 2294} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741565;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    call {:si_unique_call 2295} Tmp_1012 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[Tmp_1012] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)];
    call {:si_unique_call 2296} vslice_dummy_var_550 := sdv_InterlockedDecrement(Tmp_1012);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)] := Mem_T.INT4[Tmp_1012];
    Tmp_1008 := strConst__li2bpl1;
    call {:si_unique_call 2297} vslice_dummy_var_551 := SerialDbgPrintEx(9, Tmp_1008);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2298} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L233;

  L233:
    call {:si_unique_call 2299} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2300} SerialIRPEpilogue(extension_7);
    Tmp_1005 := -1073741565;
    goto L1;

  anon75_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L233;

  anon61_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] := 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 2301} sdv_829 := corral_nondet();
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_829 != 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_829 != 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_829 == 2;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc vslice_dummy_var_2718;
    call {:si_unique_call 2302} sdv_817 := ExAllocatePoolWithTag(0, vslice_dummy_var_2718, -666022077);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] := sdv_817;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] == 0;
    goto L96;

  L96:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc vslice_dummy_var_2719;
    call {:si_unique_call 2303} sdv_819 := ExAllocatePoolWithTag(0, vslice_dummy_var_2719, -666022077);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] := sdv_819;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] == 0;
    goto L95;

  L95:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc vslice_dummy_var_2720;
    call {:si_unique_call 2304} sdv_834 := ExAllocatePoolWithTag(0, vslice_dummy_var_2720, -666022077);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] := sdv_834;
    goto L94;

  L94:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] != 0;
    call {:si_unique_call 2305} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 2306} vslice_dummy_var_542 := SerialGotoPowerState(DeviceObject_29, extension_7, 1);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 2307} boogieTmp := corral_nondet();
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 2308} boogieTmp := corral_nondet();
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 2309} boogieTmp := corral_nondet();
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 2310} vslice_dummy_var_552 := KeSynchronizeExecution(0, li2bplFunctionConstant411, 0);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    call {:si_unique_call 2311} vslice_dummy_var_543 := KeSynchronizeExecution(0, li2bplFunctionConstant469, 0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := 0;
    goto L151;

  L151:
    call {:si_unique_call 2312} ExReleaseFastMutex(0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    localStatus_1 := Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))];
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} localStatus_1 >= 0;
    goto L158;

  L158:
    Tmp_1011 := strConst__li2bpl1;
    call {:si_unique_call 2313} vslice_dummy_var_553 := SerialDbgPrintEx(9, Tmp_1011);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2314} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L236;

  L236:
    call {:si_unique_call 2315} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2316} SerialIRPEpilogue(extension_7);
    Tmp_1005 := localStatus_1;
    goto L1;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L236;

  anon77_Then:
    assume {:partition} 0 > localStatus_1;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] != 0;
    call {:si_unique_call 2317} sdv_ExFreePool(0);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] := 0;
    goto L168;

  L168:
    call {:si_unique_call 2318} Tmp_1012 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[Tmp_1012] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)];
    call {:si_unique_call 2319} vslice_dummy_var_554 := sdv_InterlockedDecrement(Tmp_1012);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)] := Mem_T.INT4[Tmp_1012];
    goto L158;

  anon66_Then:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] == 0;
    goto L168;

  anon76_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 2320} vslice_dummy_var_544 := KeSynchronizeExecution(0, li2bplFunctionConstant469, 0);
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := 0;
    goto L151;

  anon65_Then:
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} checkOpen != 0;
    assume checkOpen > 0;
    call {:si_unique_call 2321} vslice_dummy_var_555 := KeSynchronizeExecution(0, li2bplFunctionConstant470, 0);
    goto L151;

  anon64_Then:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] == 0;
    call {:si_unique_call 2322} ExReleaseFastMutex(0);
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Irp_25))] := -1073741670;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    call {:si_unique_call 2323} Tmp_1012 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[Tmp_1012] := Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)];
    call {:si_unique_call 2324} vslice_dummy_var_556 := sdv_InterlockedDecrement(Tmp_1012);
    assume {:nonnull} Tmp_1012 != 0;
    assume Tmp_1012 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    Mem_T.INT4[OpenCount__SERIAL_DEVICE_EXTENSION(extension_7)] := Mem_T.INT4[Tmp_1012];
    Tmp_1006 := strConst__li2bpl1;
    call {:si_unique_call 2325} vslice_dummy_var_557 := SerialDbgPrintEx(9, Tmp_1006);
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2326} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, Irp_25);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L239;

  L239:
    call {:si_unique_call 2327} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2328} SerialIRPEpilogue(extension_7);
    Tmp_1005 := -1073741670;
    goto L1;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L239;

  anon80_Then:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] != 0;
    goto L94;

  anon81_Then:
    assume {:partition} Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION[InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(extension_7)] != 0;
    goto L94;

  anon69_Then:
    assume {:partition} sdv_829 != 2;
    goto L94;

  anon70_Then:
    assume {:partition} sdv_829 == 1;
    goto L96;

  anon63_Then:
    assume {:partition} sdv_829 == 0;
    goto L95;
}



procedure {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_26: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialGetCharTime"} SerialGetCharTime(actual_Extension_26: int) returns (structPtr888Tmp: int)
{
  var {:scalar} Tmp_1014: int;
  var {:scalar} dataSize: int;
  var {:scalar} charTime_2: int;
  var {:scalar} Tmp_1015: int;
  var {:scalar} bitTime: int;
  var {:scalar} paritySize: int;
  var {:scalar} Tmp_1017: int;
  var {:scalar} tmp: int;
  var {:scalar} stopSize: int;
  var {:scalar} Tmp: int;
  var {:pointer} Extension_26: int;

  anon0:
    call {:si_unique_call 2329} tmp := __HAVOC_malloc(20);
    call {:si_unique_call 2330} Tmp := __HAVOC_malloc(20);
    Extension_26 := actual_Extension_26;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1017;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_1017 == 1;
    dataSize := 6;
    goto L15;

  L15:
    paritySize := 1;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L18;

  L18:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    stopSize := 2;
    goto L21;

  L21:
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc bitTime;
    charTime_2 := bitTime + (dataSize + paritySize + stopSize) * bitTime;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} tmp != 0;
    assume tmp > 0;
    structPtr888Tmp := Tmp;
    return;

  anon14_Then:
    stopSize := 1;
    goto L21;

  anon16_Then:
    paritySize := 0;
    goto L18;

  anon15_Then:
    assume {:partition} Tmp_1017 != 1;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1014;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_1014 == 2;
    dataSize := 7;
    goto L15;

  anon17_Then:
    assume {:partition} Tmp_1014 != 2;
    assume {:nonnull} Extension_26 != 0;
    assume Extension_26 > 0;
    havoc Tmp_1015;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Tmp_1015 == 3;
    dataSize := 8;
    goto L15;

  anon18_Then:
    assume {:partition} Tmp_1015 != 3;
    goto L15;

  anon13_Then:
    dataSize := 5;
    goto L15;
}



procedure {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_8: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDisableUART"} SerialDisableUART(actual_Context_8: int)
{
  var {:scalar} sdv_840: int;
  var {:pointer} extension_8: int;
  var {:pointer} Context_8: int;
  var vslice_dummy_var_558: int;

  anon0:
    call {:si_unique_call 2331} vslice_dummy_var_558 := __HAVOC_malloc(4);
    Context_8 := actual_Context_8;
    extension_8 := Context_8;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    call {:si_unique_call 2332} sdv_840 := corral_nondet();
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} extension_8 != 0;
    assume extension_8 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_21: int, actual_PDrainTime: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialDrainUART"} SerialDrainUART(actual_PDevExt_21: int, actual_PDrainTime: int)
{
  var {:scalar} Tmp_1025: int;
  var {:scalar} sdv_841: int;
  var {:pointer} PDevExt_21: int;
  var vslice_dummy_var_559: int;
  var vslice_dummy_var_560: int;

  anon0:
    call {:si_unique_call 2333} vslice_dummy_var_559 := __HAVOC_malloc(4);
    PDevExt_21 := actual_PDevExt_21;
    call {:si_unique_call 2334} sdv_do_paged_code_check();
    goto L6;

  L6:
    call {:si_unique_call 2335} Tmp_1025, sdv_841, vslice_dummy_var_560 := SerialDrainUART_loop_L6(Tmp_1025, sdv_841, PDevExt_21, vslice_dummy_var_560);
    goto L6_last;

  L6_last:
    assume {:nonnull} PDevExt_21 != 0;
    assume PDevExt_21 > 0;
    call {:si_unique_call 2337} sdv_841 := corral_nondet();
    Tmp_1025 := BAND(sdv_841, BOR(32, 64));
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Tmp_1025 != 96;
    call {:si_unique_call 2336} vslice_dummy_var_560 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Tmp_1025 == 96;
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_851: int, actual_sdv_852: int) returns (Tmp_1034: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_851: int, actual_sdv_852: int) returns (Tmp_1034: int)
{
  var {:scalar} sdv_853: int;

  anon0:
    call {:si_unique_call 2338} Tmp_1034 := __HAVOC_malloc(4);
    call {:si_unique_call 2339} sdv_853 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_1034 != 0;
    assume Tmp_1034 > 0;
    assume {:nonnull} sdv_853 != 0;
    assume sdv_853 > 0;
    Mem_T.INT4[Tmp_1034] := Mem_T.INT4[sdv_853];
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddressSpace__CONFIG_DATA"} {:fieldname "AddressSpace"} AddressSpace__CONFIG_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.AddressSpace__SERIAL_DEVICE_EXTENSION"} {:fieldname "AddressSpace"} AddressSpace__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.Affinity__CONFIG_DATA"} {:fieldname "Affinity"} Affinity__CONFIG_DATA(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_43"} {:fieldname "Affinity"} Affinity_unnamed_tag_43(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "AllDevObjs"} AllDevObjs__SERIAL_GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_38"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_38(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_38"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_38(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__FILE_STANDARD_INFORMATION"} {:fieldname "AllocationSize"} AllocationSize__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_40(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.unnamed_tag_3"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BaseIOAddress__SERIAL_WMI_HW_DATA"} {:fieldname "BaseIOAddress"} BaseIOAddress__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.BaudClock__CM_SERIAL_DEVICE_DATA"} {:fieldname "BaudClock"} BaudClock__CM_SERIAL_DEVICE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BaudRate__SERIAL_BAUD_RATE"} {:fieldname "BaudRate"} BaudRate__SERIAL_BAUD_RATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.BitsPerByte__SERIAL_WMI_COMM_DATA"} {:fieldname "BitsPerByte"} BitsPerByte__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BreakChar__SERIAL_CHARS"} {:fieldname "BreakChar"} BreakChar__SERIAL_CHARS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BufferSizePt8__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSizePt8"} BufferSizePt8__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.BufferSize__SERIAL_DEVICE_EXTENSION"} {:fieldname "BufferSize"} BufferSize__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CONFIG_DATA"} {:fieldname "BusNumber"} BusNumber__CONFIG_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__SERIAL_DEVICE_EXTENSION"} {:fieldname "BusNumber"} BusNumber__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.CIsrSw__SERIAL_DEVICE_EXTENSION"} {:fieldname "CIsrSw"} CIsrSw__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2360
}

function {:inline true} {:fieldmap "Mem_T.CancelIrql__IRP"} {:fieldname "CancelIrql"} CancelIrql__IRP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_28"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CharsCopied__SERIAL_UPDATE_CHAR"} {:fieldname "CharsCopied"} CharsCopied__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "CharsInInterruptBuffer"} CharsInInterruptBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ClockRate"} ClockRate__CONFIG_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.ClockRate__SERIAL_DEVICE_EXTENSION"} {:fieldname "ClockRate"} ClockRate__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 424
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommErrorDpc"} CommErrorDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 852
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CommWaitDpc"} CommWaitDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 892
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteImmediateDpc"} CompleteImmediateDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 932
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteReadDpc"} CompleteReadDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 692
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "CompleteWriteDpc"} CompleteWriteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 652
}

function {:inline true} {:fieldmap "Mem_T.Completed__SERIAL_UPDATE_CHAR"} {:fieldname "Completed"} Completed__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.Context__SERIAL_CISR_SW"} {:fieldname "Context"} Context__SERIAL_CISR_SW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ControlHandShake__SERIAL_HANDFLOW"} {:fieldname "ControlHandShake"} ControlHandShake__SERIAL_HANDFLOW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__CONFIG_DATA"} {:fieldname "Controller"} Controller__CONFIG_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Controller__SERIAL_DEVICE_EXTENSION"} {:fieldname "Controller"} Controller__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION"} {:fieldname "CountOfTryingToLowerRTS"} CountOfTryingToLowerRTS__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 408
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Counter__SERIAL_XOFF_COUNTER"} {:fieldname "Counter"} Counter__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSerialCommEntry"} CreatedSerialCommEntry__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 640
}

function {:inline true} {:fieldmap "Mem_T.CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION"} {:fieldname "CreatedSymbolicLink"} CreatedSymbolicLink__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 636
}

function {:inline true} {:fieldmap "Mem_T.CurrentBaud__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentBaud"} CurrentBaud__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 400
}

function {:inline true} {:fieldmap "Mem_T.CurrentByteOffset__FILE_POSITION_INFORMATION"} {:fieldname "CurrentByteOffset"} CurrentByteOffset__FILE_POSITION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "CurrentCharSlot"} CurrentCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 336
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentImmediateIrp"} CurrentImmediateIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskIrp"} CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPurgeIrp"} CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 300
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentReadIrp"} CurrentReadIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.CurrentRxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentRxQueue"} CurrentRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_7"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_7(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentTxQueue__SERIAL_COMMPROP"} {:fieldname "CurrentTxQueue"} CurrentTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWaitIrp"} CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentWriteIrp"} CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 292
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentXoffIrp"} CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T.CutOverAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "CutOverAmount"} CutOverAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__SERIAL_IOCTL_SYNC"} {:fieldname "Data"} Data__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DeletePending__FILE_STANDARD_INFORMATION"} {:fieldname "DeletePending"} DeletePending__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 312
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceClassSymbolicName"} DeviceClassSymbolicName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2348
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DeviceIsOpened__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceIsOpened"} DeviceIsOpened__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 524
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DeviceName"} DeviceName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 488
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DevicePNPAccept"} DevicePNPAccept__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2368
}

function {:inline true} {:fieldmap "Mem_T.DeviceStateMap__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceStateMap"} DeviceStateMap__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2648
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_DEVICE_STATE"} {:fieldname "DeviceState"} DeviceState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2632
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3104
}

function {:inline true} {:fieldmap "Mem_T.Directory__FILE_STANDARD_INFORMATION"} {:fieldname "Directory"} Directory__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DisablePort"} DisablePort__CONFIG_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.DisablePort__SERIAL_USER_DATA"} {:fieldname "DisablePort"} DisablePort__SERIAL_USER_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "DosName"} DosName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.DpcCount__SERIAL_DEVICE_EXTENSION"} {:fieldname "DpcCount"} DpcCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3312
}

function {:inline true} {:fieldmap "Mem_T.Dpc__KTIMER"} {:fieldname "Dpc"} Dpc__KTIMER(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__DEVICE_OBJECT"} {:fieldname "DriverObject"} DriverObject__DEVICE_OBJECT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DriverObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "DriverObject"} DriverObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2220
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EndOfFile__FILE_STANDARD_INFORMATION"} {:fieldname "EndOfFile"} EndOfFile__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EofChar__SERIAL_CHARS"} {:fieldname "EofChar"} EofChar__SERIAL_CHARS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ErrorChar__SERIAL_CHARS"} {:fieldname "ErrorChar"} ErrorChar__SERIAL_CHARS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ErrorWord__SERIAL_DEVICE_EXTENSION"} {:fieldname "ErrorWord"} ErrorWord__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.EscapeChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "EscapeChar"} EscapeChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.EventChar__SERIAL_CHARS"} {:fieldname "EventChar"} EventChar__SERIAL_CHARS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_CHECK_OPEN"} {:fieldname "Extension"} Extension__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_IOCTL_SYNC"} {:fieldname "Extension"} Extension__SERIAL_IOCTL_SYNC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_RESIZE_PARAMS"} {:fieldname "Extension"} Extension__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extension__SERIAL_UPDATE_CHAR"} {:fieldname "Extension"} Extension__SERIAL_UPDATE_CHAR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Extensions__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "Extensions"} Extensions__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FifoPresent__SERIAL_DEVICE_EXTENSION"} {:fieldname "FifoPresent"} FifoPresent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_13"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_13(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 316
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstReadableChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "FirstReadableChar"} FirstReadableChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 344
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Flags"} Flags__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2500
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FlowReplace__SERIAL_HANDFLOW"} {:fieldname "FlowReplace"} FlowReplace__SERIAL_HANDFLOW(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnableDefault__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnableDefault"} ForceFIFOEnableDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.ForceFIFOEnable__SERIAL_USER_DATA"} {:fieldname "ForceFIFOEnable"} ForceFIFOEnable__SERIAL_USER_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "ForceFifoEnableDefault"} ForceFifoEnableDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ForceFifoEnable"} ForceFifoEnable__CONFIG_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._SERIAL_HANDFLOW"} {:fieldname "HandFlow"} HandFlow__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.HandFlow__SERIAL_DEVICE_EXTENSION"} {:fieldname "HandFlow"} HandFlow__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "HistoryMask"} HistoryMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.IER__SERIAL_DEVICE_STATE"} {:fieldname "IER"} IER__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_32"} {:fieldname "IdType"} IdType_unnamed_tag_32(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ImmediateTotalTimer"} ImmediateTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1732
}

function {:inline true} {:fieldmap "Mem_T.InSize__SERIAL_QUEUE_SIZE"} {:fieldname "InSize"} InSize__SERIAL_QUEUE_SIZE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Indexed"} Indexed__CONFIG_DATA(x: int) : int
{
  x + 164
}

function {:inline true} {:fieldmap "Mem_T.Indexed__SERIAL_DEVICE_EXTENSION"} {:fieldname "Indexed"} Indexed__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_20"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CONFIG_DATA"} {:fieldname "InterfaceType"} InterfaceType__CONFIG_DATA(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterfaceType"} InterfaceType__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__CONFIG_DATA"} {:fieldname "InterruptMode"} InterruptMode__CONFIG_DATA(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptReadBuffer"} InterruptReadBuffer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.InterruptShareable__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptShareable"} InterruptShareable__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__CONFIG_DATA"} {:fieldname "InterruptStatus"} InterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.InterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "InterruptStatus"} InterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 248
}

function {:inline true} {:fieldmap "Mem_T.InterruptType__SERIAL_WMI_HW_DATA"} {:fieldname "InterruptType"} InterruptType__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "Interrupt"} Interrupt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 252
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_41"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_41(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IntervalReadTimeoutDpc"} IntervalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 772
}

function {:inline true} {:fieldmap "Mem_T.IntervalTimeToUse__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTimeToUse"} IntervalTimeToUse__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.IntervalTime__SERIAL_DEVICE_EXTENSION"} {:fieldname "IntervalTime"} IntervalTime__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_20"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_20(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_29"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IrpMaskLocation__SERIAL_DEVICE_EXTENSION"} {:fieldname "IrpMaskLocation"} IrpMaskLocation__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.IrqAffinityMask__SERIAL_WMI_HW_DATA"} {:fieldname "IrqAffinityMask"} IrqAffinityMask__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IrqLevel__SERIAL_WMI_HW_DATA"} {:fieldname "IrqLevel"} IrqLevel__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IrqNumber__SERIAL_WMI_HW_DATA"} {:fieldname "IrqNumber"} IrqNumber__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IrqVector__SERIAL_WMI_HW_DATA"} {:fieldname "IrqVector"} IrqVector__SERIAL_WMI_HW_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Irql__SERIAL_DEVICE_EXTENSION"} {:fieldname "Irql"} Irql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T.IsBusy__SERIAL_WMI_COMM_DATA"} {:fieldname "IsBusy"} IsBusy__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IsrFunc__SERIAL_CISR_SW"} {:fieldname "IsrFunc"} IsrFunc__SERIAL_CISR_SW(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IsrUnlockPagesDpc"} IsrUnlockPagesDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1172
}

function {:inline true} {:fieldmap "Mem_T.IsrWaitMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "IsrWaitMask"} IsrWaitMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.LCR__SERIAL_DEVICE_STATE"} {:fieldname "LCR"} LCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.LastCharSlot__SERIAL_DEVICE_EXTENSION"} {:fieldname "LastCharSlot"} LastCharSlot__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_16"} {:fieldname "Length"} Length_unnamed_tag_16(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_42"} {:fieldname "Length"} Length_unnamed_tag_42(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_43"} {:fieldname "Level"} Level_unnamed_tag_43(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LineControl__SERIAL_DEVICE_EXTENSION"} {:fieldname "LineControl"} LineControl__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 520
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_7(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LogFifoDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "LogFifoDefault"} LogFifoDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.LogFifo__CONFIG_DATA"} {:fieldname "LogFifo"} LogFifo__CONFIG_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "LongIntervalAmount"} LongIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDeviceObject__SERIAL_DEVICE_EXTENSION"} {:fieldname "LowerDeviceObject"} LowerDeviceObject__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2212
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "LowerRTSTimer"} LowerRTSTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2052
}

function {:inline true} {:fieldmap "Mem_T.MCR__SERIAL_DEVICE_STATE"} {:fieldname "MCR"} MCR__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MaskInverted"} MaskInverted__CONFIG_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.MaskInverted__SERIAL_USER_DATA"} {:fieldname "MaskInverted"} MaskInverted__SERIAL_USER_DATA(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskQueue"} MaskQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.MaxBaud__SERIAL_COMMPROP"} {:fieldname "MaxBaud"} MaxBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.MaxRxQueue__SERIAL_COMMPROP"} {:fieldname "MaxRxQueue"} MaxRxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.MaxTxQueue__SERIAL_COMMPROP"} {:fieldname "MaxTxQueue"} MaxTxQueue__SERIAL_COMMPROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumBaudRate"} MaximumBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.MaximumInputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumInputBufferSize"} MaximumInputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA"} {:fieldname "MaximumOutputBufferSize"} MaximumOutputBufferSize__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_41"} {:fieldname "Memory"} Memory_unnamed_tag_41(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NewBufferSize__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBufferSize"} NewBufferSize__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NewBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "NewBuffer"} NewBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewDevicePowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewDevicePowerState"} NewDevicePowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3448
}

function {:inline true} {:fieldmap "Mem_T.NewExtension__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewExtension"} NewExtension__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.NewMaskInverted__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewMaskInverted"} NewMaskInverted__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.NewPortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "NewPortIndex"} NewPortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.NumberMoved__SERIAL_RESIZE_PARAMS"} {:fieldname "NumberMoved"} NumberMoved__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberNeededForRead__SERIAL_DEVICE_EXTENSION"} {:fieldname "NumberNeededForRead"} NumberNeededForRead__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.NumberOfLinks__FILE_STANDARD_INFORMATION"} {:fieldname "NumberOfLinks"} NumberOfLinks__FILE_STANDARD_INFORMATION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "ObjectDirectory"} ObjectDirectory__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.OldBuffer__SERIAL_RESIZE_PARAMS"} {:fieldname "OldBuffer"} OldBuffer__SERIAL_RESIZE_PARAMS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "OpenCount"} OpenCount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2504
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OriginalController__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalController"} OriginalController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalInterruptStatus"} OriginalInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__CONFIG_DATA"} {:fieldname "OriginalIrql"} OriginalIrql__CONFIG_DATA(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.OriginalIrql__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalIrql"} OriginalIrql__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__CONFIG_DATA"} {:fieldname "OriginalVector"} OriginalVector__CONFIG_DATA(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.OriginalVector__SERIAL_DEVICE_EXTENSION"} {:fieldname "OriginalVector"} OriginalVector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T.OurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsrContext"} OurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.OurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "OurIsr"} OurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_20"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_6"} {:fieldname "Overlay"} Overlay_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION"} {:fieldname "OwnsPowerPolicy"} OwnsPowerPolicy__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3088
}

function {:inline true} {:fieldmap "Mem_T.PNPState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PNPState"} PNPState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2496
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketVersion__SERIAL_COMMPROP"} {:fieldname "PacketVersion"} PacketVersion__SERIAL_COMMPROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParityCheckEnable__SERIAL_WMI_COMM_DATA"} {:fieldname "ParityCheckEnable"} ParityCheckEnable__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_LINE_CONTROL"} {:fieldname "Parity"} Parity__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Parity__SERIAL_WMI_COMM_DATA"} {:fieldname "Parity"} Parity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Pdo__SERIAL_DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3108
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingDpcEvent"} PendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3316
}

function {:inline true} {:fieldmap "Mem_T.PendingIRPCnt__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingIRPCnt"} PendingIRPCnt__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2364
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PendingIRPEvent"} PendingIRPEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2372
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingWakeIrp__SERIAL_DEVICE_EXTENSION"} {:fieldname "PendingWakeIrp"} PendingWakeIrp__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3116
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "PerhapsLowerRTSDpc"} PerhapsLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1132
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_FIRMWARE_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.PermitShareDefault__SERIAL_USER_DATA"} {:fieldname "PermitShareDefault"} PermitShareDefault__SERIAL_USER_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PermitShare"} PermitShare__CONFIG_DATA(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.PermitShare__SERIAL_DEVICE_EXTENSION"} {:fieldname "PermitShare"} PermitShare__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T.PermitSystemWideShare__CONFIG_DATA"} {:fieldname "PermitSystemWideShare"} PermitSystemWideShare__CONFIG_DATA(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PortIndex"} PortIndex__CONFIG_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.PortIndex__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortIndex"} PortIndex__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION"} {:fieldname "PortOnAMultiportCard"} PortOnAMultiportCard__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 548
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_41"} {:fieldname "Port"} Port_unnamed_tag_41(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_53"} {:fieldname "Port"} Port_unnamed_tag_53(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerD0Event"} PowerD0Event__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2676
}

function {:inline true} {:fieldmap "Mem_T.PowerState__SERIAL_DEVICE_EXTENSION"} {:fieldname "PowerState"} PowerState__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2216
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ProvCapabilities__SERIAL_COMMPROP"} {:fieldname "ProvCapabilities"} ProvCapabilities__SERIAL_COMMPROP(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PurgeQueue"} PurgeQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 340
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.RXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "RXHolding"} RXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.ReadBufferBase__SERIAL_DEVICE_EXTENSION"} {:fieldname "ReadBufferBase"} ReadBufferBase__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.ReadIntervalTimeout__SERIAL_TIMEOUTS"} {:fieldname "ReadIntervalTimeout"} ReadIntervalTimeout__SERIAL_TIMEOUTS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ReadQueue"} ReadQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestIntervalTimer"} ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1412
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "ReadRequestTotalTimer"} ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1252
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutConstant"} ReadTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "ReadTotalTimeoutMultiplier"} ReadTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Reopen__SERIAL_DEVICE_STATE"} {:fieldname "Reopen"} Reopen__SERIAL_DEVICE_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RetainPowerOnClose__SERIAL_DEVICE_EXTENSION"} {:fieldname "RetainPowerOnClose"} RetainPowerOnClose__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3092
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.RxFIFODefault__SERIAL_USER_DATA"} {:fieldname "RxFIFODefault"} RxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "RxFIFO"} RxFIFO__CONFIG_DATA(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.RxFIFO__SERIAL_USER_DATA"} {:fieldname "RxFIFO"} RxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.RxFifoTrigger__SERIAL_DEVICE_EXTENSION"} {:fieldname "RxFifoTrigger"} RxFifoTrigger__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 628
}

function {:inline true} {:fieldmap "Mem_T.RxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "RxFifo"} RxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SendWaitWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendWaitWake"} SendWaitWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3112
}

function {:inline true} {:fieldmap "Mem_T.SendXoffChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXoffChar"} SendXoffChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.SendXonChar__SERIAL_DEVICE_EXTENSION"} {:fieldname "SendXonChar"} SendXonChar__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SerialCount"} SerialCount__CONFIGURATION_INFORMATION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "SerialStartEvent"} SerialStartEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2508
}

function {:inline true} {:fieldmap "Mem_T.ServiceMask__SERIAL_COMMPROP"} {:fieldname "ServiceMask"} ServiceMask__SERIAL_COMMPROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SetPendingDpcEvent"} SetPendingDpcEvent__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1212
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.SettableBaudRate__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableBaudRate"} SettableBaudRate__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.SettableBaud__SERIAL_COMMPROP"} {:fieldname "SettableBaud"} SettableBaud__SERIAL_COMMPROP(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.SettableDataBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableDataBits"} SettableDataBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.SettableData__SERIAL_COMMPROP"} {:fieldname "SettableData"} SettableData__SERIAL_COMMPROP(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SettableFlowControl__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableFlowControl"} SettableFlowControl__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SettableParams__SERIAL_COMMPROP"} {:fieldname "SettableParams"} SettableParams__SERIAL_COMMPROP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SettableParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParityCheck"} SettableParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.SettableParity__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableParity"} SettableParity__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SettableStopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "SettableStopBits"} SettableStopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.SettableStopParity__SERIAL_COMMPROP"} {:fieldname "SettableStopParity"} SettableStopParity__SERIAL_COMMPROP(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SharerList"} SharerList__SERIAL_CISR_SW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "ShortIntervalAmount"} ShortIntervalAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SkipNaming"} SkipNaming__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3440
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__CONFIG_DATA"} {:fieldname "SpanOfController"} SpanOfController__CONFIG_DATA(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.SpanOfController__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfController"} SpanOfController__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__CONFIG_DATA"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpanOfInterruptStatus"} SpanOfInterruptStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.SpecialChars__SERIAL_DEVICE_EXTENSION"} {:fieldname "SpecialChars"} SpecialChars__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "StalledIrpQueue"} StalledIrpQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 2800
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 432
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "StartTimerLowerRTSDpc"} StartTimerLowerRTSDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1092
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_42"} {:fieldname "Start"} Start_unnamed_tag_42(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_37"} {:fieldname "State"} State_unnamed_tag_37(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatusOfOpen__SERIAL_CHECK_OPEN"} {:fieldname "StatusOfOpen"} StatusOfOpen__SERIAL_CHECK_OPEN(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_LINE_CONTROL"} {:fieldname "StopBits"} StopBits__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StopBits__SERIAL_WMI_COMM_DATA"} {:fieldname "StopBits"} StopBits__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Support16BitMode__SERIAL_WMI_COMM_DATA"} {:fieldname "Support16BitMode"} Support16BitMode__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SupportDTRDSR__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportDTRDSR"} SupportDTRDSR__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportIntervalTimeouts"} SupportIntervalTimeouts__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.SupportParityCheck__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportParityCheck"} SupportParityCheck__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.SupportRTSCTS__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportRTSCTS"} SupportRTSCTS__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.SupportXonXoff__SERIAL_WMI_COMM_DATA"} {:fieldname "SupportXonXoff"} SupportXonXoff__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.SupportedBauds__SERIAL_DEVICE_EXTENSION"} {:fieldname "SupportedBauds"} SupportedBauds__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SymbolicLinkName"} SymbolicLinkName__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_3"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_3(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__SERIAL_DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__CONFIG_DATA(x: int) : int
{
  x + 168
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_DEVICE_EXTENSION"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3444
}

function {:inline true} {:fieldmap "Mem_T.TL16C550CAFC__SERIAL_USER_DATA"} {:fieldname "TL16C550CAFC"} TL16C550CAFC__SERIAL_USER_DATA(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.TXHolding__SERIAL_DEVICE_EXTENSION"} {:fieldname "TXHolding"} TXHolding__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Timeout__SERIAL_XOFF_COUNTER"} {:fieldname "Timeout"} Timeout__SERIAL_XOFF_COUNTER(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Timeouts__SERIAL_DEVICE_EXTENSION"} {:fieldname "Timeouts"} Timeouts__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 436
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsrContext"} TopLevelOurIsrContext__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TopLevelOurIsr__SERIAL_DEVICE_EXTENSION"} {:fieldname "TopLevelOurIsr"} TopLevelOurIsr__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TotalCharsQueued__SERIAL_DEVICE_EXTENSION"} {:fieldname "TotalCharsQueued"} TotalCharsQueued__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 388
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalImmediateTimeoutDpc"} TotalImmediateTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 972
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalReadTimeoutDpc"} TotalReadTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 732
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "TotalWriteTimeoutDpc"} TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 812
}

function {:inline true} {:fieldmap "Mem_T.TrController__CONFIG_DATA"} {:fieldname "TrController"} TrController__CONFIG_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.TrInterruptStatus__CONFIG_DATA"} {:fieldname "TrInterruptStatus"} TrInterruptStatus__CONFIG_DATA(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.TrIrql__CONFIG_DATA"} {:fieldname "TrIrql"} TrIrql__CONFIG_DATA(x: int) : int
{
  x + 156
}

function {:inline true} {:fieldmap "Mem_T.TrVector__CONFIG_DATA"} {:fieldname "TrVector"} TrVector__CONFIG_DATA(x: int) : int
{
  x + 152
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_FIRMWARE_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_FIRMWARE_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.TxFIFODefault__SERIAL_USER_DATA"} {:fieldname "TxFIFODefault"} TxFIFODefault__SERIAL_USER_DATA(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "TxFIFO"} TxFIFO__CONFIG_DATA(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.TxFIFO__SERIAL_USER_DATA"} {:fieldname "TxFIFO"} TxFIFO__SERIAL_USER_DATA(x: int) : int
{
  x + 104
}

function {:inline true} {:fieldmap "Mem_T.TxFifoAmount__SERIAL_DEVICE_EXTENSION"} {:fieldname "TxFifoAmount"} TxFifoAmount__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 428
}

function {:inline true} {:fieldmap "Mem_T.TxFifo__SERIAL_BASIC_SETTINGS"} {:fieldname "TxFifo"} TxFifo__SERIAL_BASIC_SETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_20"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_20(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_26"} {:fieldname "Type"} Type_unnamed_tag_26(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_37"} {:fieldname "Type"} Type_unnamed_tag_37(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapRegisters"} UnMapRegisters__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "UnMapStatus"} UnMapStatus__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UsablePortMask__SERIAL_MULTIPORT_DISPATCH"} {:fieldname "UsablePortMask"} UsablePortMask__SERIAL_MULTIPORT_DISPATCH(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserClockRate__SERIAL_USER_DATA"} {:fieldname "UserClockRate"} UserClockRate__SERIAL_USER_DATA(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.UserIndexed__SERIAL_USER_DATA"} {:fieldname "UserIndexed"} UserIndexed__SERIAL_USER_DATA(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UserPortIndex__SERIAL_USER_DATA"} {:fieldname "UserPortIndex"} UserPortIndex__SERIAL_USER_DATA(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.ValidDataMask__SERIAL_DEVICE_EXTENSION"} {:fieldname "ValidDataMask"} ValidDataMask__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Vector__SERIAL_DEVICE_EXTENSION"} {:fieldname "Vector"} Vector__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_43"} {:fieldname "Vector"} Vector_unnamed_tag_43(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.WmiCommData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiCommData"} WmiCommData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3164
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiHwData__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiHwData"} WmiHwData__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3264
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WmiIdentifier"} WmiIdentifier__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3152
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo__SERIAL_DEVICE_EXTENSION"} {:fieldname "WmiLibInfo"} WmiLibInfo__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 3120
}

function {:inline true} {:fieldmap "Mem_T.WordLength__SERIAL_LINE_CONTROL"} {:fieldname "WordLength"} WordLength__SERIAL_LINE_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "WriteQueue"} WriteQueue__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 264
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "WriteRequestTotalTimer"} WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1572
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutConstant__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutConstant"} WriteTotalTimeoutConstant__SERIAL_TIMEOUTS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS"} {:fieldname "WriteTotalTimeoutMultiplier"} WriteTotalTimeoutMultiplier__SERIAL_TIMEOUTS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.XoffChar__SERIAL_CHARS"} {:fieldname "XoffChar"} XoffChar__SERIAL_CHARS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XoffCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffCharacter"} XoffCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountCompleteDpc"} XoffCountCompleteDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1052
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "XoffCountTimeoutDpc"} XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1012
}

function {:inline true} {:fieldmap "Mem_T._KTIMER"} {:fieldname "XoffCountTimer"} XoffCountTimer__SERIAL_DEVICE_EXTENSION(x: int) : int
{
  x + 1892
}

function {:inline true} {:fieldmap "Mem_T.XoffLimit__SERIAL_HANDFLOW"} {:fieldname "XoffLimit"} XoffLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.XoffXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XoffXmitThreshold"} XoffXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XonChar__SERIAL_CHARS"} {:fieldname "XonChar"} XonChar__SERIAL_CHARS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XonCharacter__SERIAL_WMI_COMM_DATA"} {:fieldname "XonCharacter"} XonCharacter__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XonLimit__SERIAL_HANDFLOW"} {:fieldname "XonLimit"} XonLimit__SERIAL_HANDFLOW(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XonXmitThreshold__SERIAL_WMI_COMM_DATA"} {:fieldname "XonXmitThreshold"} XonXmitThreshold__SERIAL_WMI_COMM_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl3: int;

const {:string " The default interrupt read buffer size is: %d\n------  The XoffLimit is                         : %d\n------  The XonLimit is                          : %d\n------  The pt 8 size is                         : %d\n"} unique strConst__li2bpl200: int;

const {:string "%x irp was already marked as cancelled\n"} unique strConst__li2bpl216: int;

const {:string "%x was the first irp processed by this\n------- invocation of startmask\n"} unique strConst__li2bpl212: int;

const {:string "%x will become the current wait irp\n"} unique strConst__li2bpl215: int;

const {:string "*PNP0501"} unique strConst__li2bpl88: int;

const {:string "*PNP0502"} unique strConst__li2bpl89: int;

const {:string "------- BusRelations Query\n"} unique strConst__li2bpl95: int;

const {:string "------- EjectionRelations Query\n"} unique strConst__li2bpl96: int;

const {:string "------- PowerRelations Query\n"} unique strConst__li2bpl97: int;

const {:string "------- RemovalRelations Query\n"} unique strConst__li2bpl98: int;

const {:string "------- TargetDeviceRelation Query\n"} unique strConst__li2bpl99: int;

const {:string "------- Unknown Query\n"} unique strConst__li2bpl94: int;

const {:string "------- failing; multiport node\n"} unique strConst__li2bpl106: int;

const {:string "<SerialDisableInterfaces\n"} unique strConst__li2bpl191: int;

const {:string "<SerialFlush (1) %X\n"} unique strConst__li2bpl6: int;

const {:string "<SerialFlush (2) %X\n"} unique strConst__li2bpl7: int;

const {:string "<SerialFlush (3) %X\n"} unique strConst__li2bpl5: int;

const {:string "<SerialGetNextWrite\n"} unique strConst__li2bpl156: int;

const {:string "<SerialGetRegistryKeyValue %X\n"} unique strConst__li2bpl9: int;

const {:string "<SerialInitMultiPort (1) %X\n"} unique strConst__li2bpl166: int;

const {:string "<SerialInitMultiPort (2) %X\n"} unique strConst__li2bpl168: int;

const {:string "<SerialInitMultiPort (3) %X\n"} unique strConst__li2bpl167: int;

const {:string "<SerialKillPendingIrps\n"} unique strConst__li2bpl163: int;

const {:string "<SerialRead (1) %X\n"} unique strConst__li2bpl203: int;

const {:string "<SerialRead (2) %X\n"} unique strConst__li2bpl204: int;

const {:string "<SerialRead (3) %X\n"} unique strConst__li2bpl205: int;

const {:string "<SerialRead (4) %X\n"} unique strConst__li2bpl206: int;

const {:string "<SerialReleaseResources\n"} unique strConst__li2bpl172: int;

const {:string "<SerialRemoveDevObj %X\n"} unique strConst__li2bpl162: int;

const {:string "<SerialStartImmediate\n"} unique strConst__li2bpl120: int;

const {:string "<SerialStartRead %X\n"} unique strConst__li2bpl201: int;

const {:string "<SerialStartWrite %X\n"} unique strConst__li2bpl158: int;

const {:string "<SerialUnstallIrps\n"} unique strConst__li2bpl220: int;

const {:string "<SerialWrite (1) %X\n"} unique strConst__li2bpl151: int;

const {:string "<SerialWrite (2) %X\n"} unique strConst__li2bpl152: int;

const {:string "<SerialWrite (3) %X\n"} unique strConst__li2bpl153: int;

const {:string "<SerialWrite (4) %X\n"} unique strConst__li2bpl154: int;

const {:string ">SerialDisableInterfaces(%X, %s)\n"} unique strConst__li2bpl190: int;

const {:string ">SerialFindInitController(%X, %X)\n"} unique strConst__li2bpl186: int;

const {:string ">SerialFlush(%X, %X)\n"} unique strConst__li2bpl4: int;

const {:string ">SerialGetNextWrite(XXX)\n"} unique strConst__li2bpl157: int;

const {:string ">SerialGetRegistryKeyValue(XXX)\n"} unique strConst__li2bpl8: int;

const {:string ">SerialInitMultiPort(%X, %X, %X)\n"} unique strConst__li2bpl165: int;

const {:string ">SerialKillPendingIrps(%X)\n"} unique strConst__li2bpl164: int;

const {:string ">SerialRead(%X, %X)\n"} unique strConst__li2bpl207: int;

const {:string ">SerialReleaseResources(%X)\n"} unique strConst__li2bpl169: int;

const {:string ">SerialRemoveDevObj(%X)\n"} unique strConst__li2bpl161: int;

const {:string ">SerialStartImmediate(%X)\n"} unique strConst__li2bpl119: int;

const {:string ">SerialStartRead(%X)\n"} unique strConst__li2bpl202: int;

const {:string ">SerialStartWrite(%X)\n"} unique strConst__li2bpl159: int;

const {:string ">SerialUnstallIrps(%X)\n"} unique strConst__li2bpl218: int;

const {:string ">SerialWrite(%X, %X)\n"} unique strConst__li2bpl155: int;

const {:string "A pending Irp should not be completed with a call to IoCompleteRequest."} unique strConst__li2bpl223: int;

const {:string "About to connect to interrupt for port %wZ\n------- address of extension is %x\n"} unique strConst__li2bpl71: int;

const {:string "Aha! It is a multiport node\n"} unique strConst__li2bpl183: int;

const {:string "Aha! It is a standalone node or first multi\n"} unique strConst__li2bpl181: int;

const {:string "Already in requested power state\n"} unique strConst__li2bpl134: int;

const {:string "Attempting to init %wZ\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n------- Interrupt Mode is %d\n"} unique strConst__li2bpl187: int;

const {:string "Becoming sharer: %08X %08X %08X\n"} unique strConst__li2bpl185: int;

const {:string "Bogus port address %x\n"} unique strConst__li2bpl48: int;

const {:string "Bogus port index %x\n"} unique strConst__li2bpl32: int;

const {:string "Bogus vector %x\n"} unique strConst__li2bpl47: int;

const {:string "Calling next driver\n"} unique strConst__li2bpl125: int;

const {:string "Can't filter NULL resources!\n"} unique strConst__li2bpl91: int;

const {:string "Canceling wait for irp %x\n"} unique strConst__li2bpl208: int;

const {:string "Cleaning up failed start\n"} unique strConst__li2bpl64: int;

const {:string "Clearing DTR for %x\n"} unique strConst__li2bpl225: int;

const {:string "Clearing Rts for %x\n"} unique strConst__li2bpl224: int;

const {:string "ClockRate"} unique strConst__li2bpl58: int;

const {:string "Close open count bad for: 0x%x\n"} unique strConst__li2bpl227: int;

const {:string "Close prologue failed for: %x\n"} unique strConst__li2bpl226: int;

const {:string "Com AddressSpace: %x\n"} unique strConst__li2bpl41: int;

const {:string "Com Indexed: %x\n"} unique strConst__li2bpl46: int;

const {:string "Com InterfaceType: %x\n"} unique strConst__li2bpl43: int;

const {:string "Com Interrupt Status: %x\n"} unique strConst__li2bpl61: int;

const {:string "Com InterruptMode: %x\n"} unique strConst__li2bpl42: int;

const {:string "Com OriginalIrql: %x\n"} unique strConst__li2bpl45: int;

const {:string "Com OriginalVector: %x\n"} unique strConst__li2bpl44: int;

const {:string "Com Port BusNumber: %x\n"} unique strConst__li2bpl40: int;

const {:string "Com Port ClockRate: %x\n"} unique strConst__li2bpl39: int;

const {:string "Com Port Index: %x\n"} unique strConst__li2bpl38: int;

const {:string "Com Port address: %x\n"} unique strConst__li2bpl60: int;

const {:string "Comparing it to %wZ\n------- already in the device list\n------- PortAddress is %x\n------- Interrupt Status is %x\n------- BusNumber is %d\n------- BusType is %d\n------- AddressSpace is %d\n"} unique strConst__li2bpl176: int;

const {:string "Complete Irp: %X\n"} unique strConst__li2bpl1: int;

const {:string "Configuration error for %wZ\n------- Same multiport - different interrupts\n"} unique strConst__li2bpl182: int;

const {:string "Connected interrupt %08X\n"} unique strConst__li2bpl68: int;

const {:string "Could not map memory for device registers for %wZ\n"} unique strConst__li2bpl199: int;

const {:string "Could not map memory for interrupt status for %wZ\n"} unique strConst__li2bpl196: int;

const {:string "Couldn't allocate memory for Dos name\n"} unique strConst__li2bpl17: int;

const {:string "Couldn't allocate memory for WMI name\n"} unique strConst__li2bpl18: int;

const {:string "Couldn't allocate memory for buffer\n"} unique strConst__li2bpl25: int;

const {:string "Couldn't allocate memory for device name\n"} unique strConst__li2bpl26: int;

const {:string "Couldn't allocate memory for the\n------  user configuration record\n"} unique strConst__li2bpl74: int;

const {:string "Couldn't connect to interrupt for %wZ\n"} unique strConst__li2bpl73: int;

const {:string "Couldn't create the device map entry\n------- for port %wZ\n"} unique strConst__li2bpl15: int;

const {:string "Couldn't create the symbolic link\nfor port %wZ\n"} unique strConst__li2bpl16: int;

const {:string "Couldn't delete value entry %wZ\n"} unique strConst__li2bpl118: int;

const {:string "Couldn't register class association\nfor port %wZ\n"} unique strConst__li2bpl12: int;

const {:string "Couldn't set class association\n for port %wZ\n"} unique strConst__li2bpl13: int;

const {:string "Count: %x  Addr: 0x%x\n"} unique strConst__li2bpl228: int;

const {:string "DPC's drained: %x\n"} unique strConst__li2bpl230: int;

const {:string "Deleting Link %wZ\n"} unique strConst__li2bpl117: int;

const {:string "DevicePowerState\n"} unique strConst__li2bpl133: int;

const {:string "DisablePort"} unique strConst__li2bpl50: int;

const {:string "Dispatch entry for: %x\n"} unique strConst__li2bpl0: int;

const {:string "DoesPortExist test failed for %wZ\n"} unique strConst__li2bpl197: int;

const {:string "DosDevices"} unique strConst__li2bpl22: int;

const {:string "DosName is %wZ\n"} unique strConst__li2bpl11: int;

const {:string "Draining DPC's: %x\n"} unique strConst__li2bpl231: int;

const {:string "EnablePowerManagement"} unique strConst__li2bpl76: int;

const {:string "Enter SerialRestoreDeviceState\n"} unique strConst__li2bpl141: int;

const {:string "Entering SerialSaveDeviceState\n"} unique strConst__li2bpl138: int;

const {:string "Error in config record for %wZ\n------  registers wrap around physical memory\n"} unique strConst__li2bpl173: int;

const {:string "Error in config record for %wZ\n------  status wraps around physical memory\n"} unique strConst__li2bpl174: int;

const {:string "Error in config record for %wZ\n------- Interrupt status overlaps regular registers\n"} unique strConst__li2bpl175: int;

const {:string "Error in config record for %wZ\n------- Register address overlaps with\n------- previous serial device\n"} unique strConst__li2bpl177: int;

const {:string "Error in config record for %wZ\n------- register address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl180: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial device registers\n"} unique strConst__li2bpl178: int;

const {:string "Error in config record for %wZ\n------- status address overlaps with\n------- previous serial status register\n"} unique strConst__li2bpl179: int;

const {:string "External Naming Failed - Status %x\n"} unique strConst__li2bpl70: int;

const {:string "FALSE"} unique strConst__li2bpl188: int;

const {:string "Fifo's detected at port address: %x\n"} unique strConst__li2bpl192: int;

const {:string "ForceFifoEnable"} unique strConst__li2bpl51: int;

const {:string "Getting PortName/Identifier failed - %x\n"} unique strConst__li2bpl24: int;

const {:string "Globally sharing interrupt for device %x\n"} unique strConst__li2bpl112: int;

const {:string "Going to power state D0\n"} unique strConst__li2bpl135: int;

const {:string "Going to power state D3\n"} unique strConst__li2bpl136: int;

const {:string "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl77: int;

const {:string "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n"} unique strConst__li2bpl78: int;

const {:string "Got IRP_MN_EJECT Irp\n"} unique strConst__li2bpl84: int;

const {:string "Got IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl107: int;

const {:string "Got IRP_MN_POWER_SEQUENCE Irp\n"} unique strConst__li2bpl129: int;

const {:string "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n"} unique strConst__li2bpl92: int;

const {:string "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n"} unique strConst__li2bpl79: int;

const {:string "Got IRP_MN_QUERY_ID Irp\n"} unique strConst__li2bpl113: int;

const {:string "Got IRP_MN_QUERY_INTERFACE Irp\n"} unique strConst__li2bpl80: int;

const {:string "Got IRP_MN_QUERY_POWER Irp\n"} unique strConst__li2bpl131: int;

const {:string "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl103: int;

const {:string "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp\n"} unique strConst__li2bpl81: int;

const {:string "Got IRP_MN_QUERY_STOP_DEVICE Irp\n"} unique strConst__li2bpl100: int;

const {:string "Got IRP_MN_READ_CONFIG Irp\n"} unique strConst__li2bpl82: int;

const {:string "Got IRP_MN_REMOVE_DEVICE Irp\n"} unique strConst__li2bpl102: int;

const {:string "Got IRP_MN_SET_LOCK Irp\n"} unique strConst__li2bpl85: int;

const {:string "Got IRP_MN_SET_POWER Irp\n"} unique strConst__li2bpl130: int;

const {:string "Got IRP_MN_START_DEVICE Irp\n"} unique strConst__li2bpl104: int;

const {:string "Got IRP_MN_STOP_DEVICE Irp\n"} unique strConst__li2bpl101: int;

const {:string "Got IRP_MN_SURPRISE_REMOVAL Irp\n"} unique strConst__li2bpl86: int;

const {:string "Got IRP_MN_WAIT_WAKE Irp\n"} unique strConst__li2bpl128: int;

const {:string "Got IRP_MN_WRITE_CONFIG Irp\n"} unique strConst__li2bpl83: int;

const {:string "ID is sole ID\n"} unique strConst__li2bpl90: int;

const {:string "Identifier"} unique strConst__li2bpl20: int;

const {:string "In Ioctl processing for set mask\n"} unique strConst__li2bpl147: int;

const {:string "In Ioctl processing for wait mask\n"} unique strConst__li2bpl144: int;

const {:string "In SerialCancelWait\n"} unique strConst__li2bpl209: int;

const {:string "In SerialClose\n"} unique strConst__li2bpl229: int;

const {:string "In SerialCreateOpen\n"} unique strConst__li2bpl232: int;

const {:string "In SerialGotoPowerState\n"} unique strConst__li2bpl121: int;

const {:string "In SerialSetPowerD0\n"} unique strConst__li2bpl123: int;

const {:string "In SerialSetPowerD3\n"} unique strConst__li2bpl140: int;

const {:string "In SerialStartMask\n"} unique strConst__li2bpl217: int;

const {:string "In SerialUndoExternalNaming for\nextension: %x of port %wZ\n"} unique strConst__li2bpl116: int;

const {:string "Indexed"} unique strConst__li2bpl57: int;

const {:string "Initializing for configuration record of %wZ\n"} unique strConst__li2bpl193: int;

const {:string "Interrupt"} unique strConst__li2bpl62: int;

const {:string "Invalid Bus type %x\n"} unique strConst__li2bpl35: int;

const {:string "Invalid size fo the buffer %d\n"} unique strConst__li2bpl148: int;

const {:string "Invalid size for the buffer %d\n"} unique strConst__li2bpl146: int;

const {:string "IoConnectInterrupt Args:\nInterrupt           %x\nOurIsr              %x\nOurIsrContext       %x\nNULL\nVector              %x\nIrql                %x\nInterruptMode       %x\nInterruptShareable  %x\nProcessorAffinity   %x\nFALSE\n"} unique strConst__li2bpl72: int;

const {:string "IoOpenDeviceRegistryKey failed - %x \n"} unique strConst__li2bpl49: int;

const {:string "Kernel debugger is using port at address %X\n"} unique strConst__li2bpl194: int;

const {:string "Latched interrupts and MicroChannel\nbusses don't mix\n"} unique strConst__li2bpl37: int;

const {:string "Leaving SerialGotoPowerState\n"} unique strConst__li2bpl122: int;

const {:string "Leaving SerialSaveDeviceState\n"} unique strConst__li2bpl139: int;

const {:string "Leaving SerialSetPowerD0\n"} unique strConst__li2bpl127: int;

const {:string "List has %x lists (including alternatives)\n"} unique strConst__li2bpl108: int;

const {:string "List has %x resources in it\n"} unique strConst__li2bpl109: int;

const {:string "Mapping power capabilities\n"} unique strConst__li2bpl93: int;

const {:string "MaskInverted"} unique strConst__li2bpl54: int;

const {:string "Matched to %x\n"} unique strConst__li2bpl184: int;

const {:string "MultiportDevice"} unique strConst__li2bpl30: int;

const {:string "Not doing external naming -- state is %x\n"} unique strConst__li2bpl69: int;

const {:string "PDevExt: %x\n"} unique strConst__li2bpl142: int;

const {:string "Perhaps another mask irp was found in the queue\n------- %x/%x <- values should be the same\n"} unique strConst__li2bpl213: int;

const {:string "Port index must be > 0 for any\nport on a multiport card: %x\n"} unique strConst__li2bpl34: int;

const {:string "PortAddress"} unique strConst__li2bpl63: int;

const {:string "PortIndex"} unique strConst__li2bpl56: int;

const {:string "PortName"} unique strConst__li2bpl19: int;

const {:string "Read name %wZ\n"} unique strConst__li2bpl23: int;

const {:string "Release - disconnecting interrupt %X\n"} unique strConst__li2bpl170: int;

const {:string "Release - freeing multi context\n"} unique strConst__li2bpl171: int;

const {:string "Reopening device\n"} unique strConst__li2bpl143: int;

const {:string "RxFIFO"} unique strConst__li2bpl52: int;

const {:string "SERIAL - %x is a SETMASK irp\n"} unique strConst__li2bpl211: int;

const {:string "SERIALCOMM"} unique strConst__li2bpl14: int;

const {:string "STARTMASK - CurrentMaskIrp: %x\n"} unique strConst__li2bpl210: int;

const {:string "Serial driver will not load port\n"} unique strConst__li2bpl195: int;

const {:string "SerialFinishStartDevice got NULL pDevExt\n"} unique strConst__li2bpl66: int;

const {:string "SerialIoResourcesIndex"} unique strConst__li2bpl31: int;

const {:string "SerialRelinquishPowerPolicy"} unique strConst__li2bpl75: int;

const {:string "SerialSkipExternalNaming"} unique strConst__li2bpl10: int;

const {:string "SetPowerD0 has IRP %x\n"} unique strConst__li2bpl124: int;

const {:string "Share System Interrupt"} unique strConst__li2bpl55: int;

const {:string "Sharing I/O port for device %x\n"} unique strConst__li2bpl110: int;

const {:string "Sharing interrupt for device %x\n"} unique strConst__li2bpl111: int;

const {:string "Starting or queuing set mask irp %x\n"} unique strConst__li2bpl149: int;

const {:string "Starting or queuing wait mask irp%x\n"} unique strConst__li2bpl145: int;

const {:string "SystemPowerState\n"} unique strConst__li2bpl137: int;

const {:string "TL16C550C Auto Flow Control"} unique strConst__li2bpl59: int;

const {:string "TR resource pointer is %x\n"} unique strConst__li2bpl29: int;

const {:string "TRUE"} unique strConst__li2bpl189: int;

const {:string "The dispatch routine is returning STATUS_PENDING, but it has also called IoCompleteRequest on the incoming IRP."} unique strConst__li2bpl221: int;

const {:string "There aren't that many of those\nbusses on this system,%x\n"} unique strConst__li2bpl36: int;

const {:string "TxFIFO"} unique strConst__li2bpl53: int;

const {:string "UNKNOWN PowerState\n"} unique strConst__li2bpl132: int;

const {:string "Unknown mask %x\n"} unique strConst__li2bpl150: int;

const {:string "Unstalling Irp 0x%x with 0x%x\n"} unique strConst__li2bpl219: int;

const {:string "WaitIrp is invalid\n------- IsrWaitMask: %x\n------- CurrentWaitIrp: %x\n"} unique strConst__li2bpl214: int;

const {:string "Waiting for next driver\n"} unique strConst__li2bpl126: int;

const {:string "\\"} unique strConst__li2bpl21: int;

const {:string "callee"} unique strConst__li2bpl160: int;

const {:string "caller"} unique strConst__li2bpl2: int;

const {:string "disabled port %wZ as requested in configuration\n"} unique strConst__li2bpl198: int;

const {:string "entering SerialGetPortInfo\n"} unique strConst__li2bpl27: int;

const {:string "entering SerialStartDevice\n"} unique strConst__li2bpl114: int;

const {:string "error with IoCallDriver %x\n"} unique strConst__li2bpl115: int;

const {:string "failing; device open\n"} unique strConst__li2bpl105: int;

const {:string "for device %x\n"} unique strConst__li2bpl87: int;

const {:string "halt"} unique strConst__li2bpl222: int;

const {:string "leaving SerialFinishStartDevice\n"} unique strConst__li2bpl65: int;

const {:string "pDevExt: Interrupt %x\n-------               OurIsr %x\n"} unique strConst__li2bpl67: int;

const {:string "port index to large %x\n"} unique strConst__li2bpl33: int;

const {:string "resource pointer is %x\n"} unique strConst__li2bpl28: int;

const {:allocated} li2bplFunctionConstant112: int;

axiom li2bplFunctionConstant112 == 112;

const {:allocated} li2bplFunctionConstant124: int;

axiom li2bplFunctionConstant124 == 124;

const {:allocated} li2bplFunctionConstant136: int;

axiom li2bplFunctionConstant136 == 136;

const {:allocated} li2bplFunctionConstant137: int;

axiom li2bplFunctionConstant137 == 137;

const {:allocated} li2bplFunctionConstant138: int;

axiom li2bplFunctionConstant138 == 138;

const {:allocated} li2bplFunctionConstant139: int;

axiom li2bplFunctionConstant139 == 139;

const {:allocated} li2bplFunctionConstant140: int;

axiom li2bplFunctionConstant140 == 140;

const {:allocated} li2bplFunctionConstant143: int;

axiom li2bplFunctionConstant143 == 143;

const {:allocated} li2bplFunctionConstant145: int;

axiom li2bplFunctionConstant145 == 145;

const {:allocated} li2bplFunctionConstant148: int;

axiom li2bplFunctionConstant148 == 148;

const {:allocated} li2bplFunctionConstant166: int;

axiom li2bplFunctionConstant166 == 166;

const {:allocated} li2bplFunctionConstant168: int;

axiom li2bplFunctionConstant168 == 168;

const {:allocated} li2bplFunctionConstant174: int;

axiom li2bplFunctionConstant174 == 174;

const {:allocated} li2bplFunctionConstant179: int;

axiom li2bplFunctionConstant179 == 179;

const {:allocated} li2bplFunctionConstant195: int;

axiom li2bplFunctionConstant195 == 195;

const {:allocated} li2bplFunctionConstant196: int;

axiom li2bplFunctionConstant196 == 196;

const {:allocated} li2bplFunctionConstant197: int;

axiom li2bplFunctionConstant197 == 197;

const {:allocated} li2bplFunctionConstant198: int;

axiom li2bplFunctionConstant198 == 198;

const {:allocated} li2bplFunctionConstant199: int;

axiom li2bplFunctionConstant199 == 199;

const {:allocated} li2bplFunctionConstant200: int;

axiom li2bplFunctionConstant200 == 200;

const {:allocated} li2bplFunctionConstant212: int;

axiom li2bplFunctionConstant212 == 212;

const {:allocated} li2bplFunctionConstant213: int;

axiom li2bplFunctionConstant213 == 213;

const {:allocated} li2bplFunctionConstant214: int;

axiom li2bplFunctionConstant214 == 214;

const {:allocated} li2bplFunctionConstant215: int;

axiom li2bplFunctionConstant215 == 215;

const {:allocated} li2bplFunctionConstant216: int;

axiom li2bplFunctionConstant216 == 216;

const {:allocated} li2bplFunctionConstant217: int;

axiom li2bplFunctionConstant217 == 217;

const {:allocated} li2bplFunctionConstant218: int;

axiom li2bplFunctionConstant218 == 218;

const {:allocated} li2bplFunctionConstant219: int;

axiom li2bplFunctionConstant219 == 219;

const {:allocated} li2bplFunctionConstant220: int;

axiom li2bplFunctionConstant220 == 220;

const {:allocated} li2bplFunctionConstant221: int;

axiom li2bplFunctionConstant221 == 221;

const {:allocated} li2bplFunctionConstant222: int;

axiom li2bplFunctionConstant222 == 222;

const {:allocated} li2bplFunctionConstant223: int;

axiom li2bplFunctionConstant223 == 223;

const {:allocated} li2bplFunctionConstant224: int;

axiom li2bplFunctionConstant224 == 224;

const {:allocated} li2bplFunctionConstant237: int;

axiom li2bplFunctionConstant237 == 237;

const {:allocated} li2bplFunctionConstant244: int;

axiom li2bplFunctionConstant244 == 244;

const {:allocated} li2bplFunctionConstant245: int;

axiom li2bplFunctionConstant245 == 245;

const {:allocated} li2bplFunctionConstant246: int;

axiom li2bplFunctionConstant246 == 246;

const {:allocated} li2bplFunctionConstant247: int;

axiom li2bplFunctionConstant247 == 247;

const {:allocated} li2bplFunctionConstant248: int;

axiom li2bplFunctionConstant248 == 248;

const {:allocated} li2bplFunctionConstant249: int;

axiom li2bplFunctionConstant249 == 249;

const {:allocated} li2bplFunctionConstant250: int;

axiom li2bplFunctionConstant250 == 250;

const {:allocated} li2bplFunctionConstant251: int;

axiom li2bplFunctionConstant251 == 251;

const {:allocated} li2bplFunctionConstant252: int;

axiom li2bplFunctionConstant252 == 252;

const {:allocated} li2bplFunctionConstant254: int;

axiom li2bplFunctionConstant254 == 254;

const {:allocated} li2bplFunctionConstant318: int;

axiom li2bplFunctionConstant318 == 318;

const {:allocated} li2bplFunctionConstant322: int;

axiom li2bplFunctionConstant322 == 322;

const {:allocated} li2bplFunctionConstant328: int;

axiom li2bplFunctionConstant328 == 328;

const {:allocated} li2bplFunctionConstant351: int;

axiom li2bplFunctionConstant351 == 351;

const {:allocated} li2bplFunctionConstant352: int;

axiom li2bplFunctionConstant352 == 352;

const {:allocated} li2bplFunctionConstant353: int;

axiom li2bplFunctionConstant353 == 353;

const {:allocated} li2bplFunctionConstant354: int;

axiom li2bplFunctionConstant354 == 354;

const {:allocated} li2bplFunctionConstant355: int;

axiom li2bplFunctionConstant355 == 355;

const {:allocated} li2bplFunctionConstant356: int;

axiom li2bplFunctionConstant356 == 356;

const {:allocated} li2bplFunctionConstant377: int;

axiom li2bplFunctionConstant377 == 377;

const {:allocated} li2bplFunctionConstant383: int;

axiom li2bplFunctionConstant383 == 383;

const {:allocated} li2bplFunctionConstant387: int;

axiom li2bplFunctionConstant387 == 387;

const {:allocated} li2bplFunctionConstant390: int;

axiom li2bplFunctionConstant390 == 390;

const {:allocated} li2bplFunctionConstant391: int;

axiom li2bplFunctionConstant391 == 391;

const {:allocated} li2bplFunctionConstant392: int;

axiom li2bplFunctionConstant392 == 392;

const {:allocated} li2bplFunctionConstant398: int;

axiom li2bplFunctionConstant398 == 398;

const {:allocated} li2bplFunctionConstant410: int;

axiom li2bplFunctionConstant410 == 410;

const {:allocated} li2bplFunctionConstant411: int;

axiom li2bplFunctionConstant411 == 411;

const {:allocated} li2bplFunctionConstant412: int;

axiom li2bplFunctionConstant412 == 412;

const {:allocated} li2bplFunctionConstant413: int;

axiom li2bplFunctionConstant413 == 413;

const {:allocated} li2bplFunctionConstant414: int;

axiom li2bplFunctionConstant414 == 414;

const {:allocated} li2bplFunctionConstant415: int;

axiom li2bplFunctionConstant415 == 415;

const {:allocated} li2bplFunctionConstant416: int;

axiom li2bplFunctionConstant416 == 416;

const {:allocated} li2bplFunctionConstant417: int;

axiom li2bplFunctionConstant417 == 417;

const {:allocated} li2bplFunctionConstant418: int;

axiom li2bplFunctionConstant418 == 418;

const {:allocated} li2bplFunctionConstant419: int;

axiom li2bplFunctionConstant419 == 419;

const {:allocated} li2bplFunctionConstant420: int;

axiom li2bplFunctionConstant420 == 420;

const {:allocated} li2bplFunctionConstant421: int;

axiom li2bplFunctionConstant421 == 421;

const {:allocated} li2bplFunctionConstant422: int;

axiom li2bplFunctionConstant422 == 422;

const {:allocated} li2bplFunctionConstant423: int;

axiom li2bplFunctionConstant423 == 423;

const {:allocated} li2bplFunctionConstant424: int;

axiom li2bplFunctionConstant424 == 424;

const {:allocated} li2bplFunctionConstant425: int;

axiom li2bplFunctionConstant425 == 425;

const {:allocated} li2bplFunctionConstant426: int;

axiom li2bplFunctionConstant426 == 426;

const {:allocated} li2bplFunctionConstant427: int;

axiom li2bplFunctionConstant427 == 427;

const {:allocated} li2bplFunctionConstant428: int;

axiom li2bplFunctionConstant428 == 428;

const {:allocated} li2bplFunctionConstant468: int;

axiom li2bplFunctionConstant468 == 468;

const {:allocated} li2bplFunctionConstant469: int;

axiom li2bplFunctionConstant469 == 469;

const {:allocated} li2bplFunctionConstant470: int;

axiom li2bplFunctionConstant470 == 470;

const {:allocated} li2bplFunctionConstant484: int;

axiom li2bplFunctionConstant484 == 484;

const {:allocated} li2bplFunctionConstant544: int;

axiom li2bplFunctionConstant544 == 544;

const {:allocated} li2bplFunctionConstant546: int;

axiom li2bplFunctionConstant546 == 546;

const {:allocated} li2bplFunctionConstant549: int;

axiom li2bplFunctionConstant549 == 549;

implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_22: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_895: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} sdv_727: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:pointer} sdv_729: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_899: int;
  var {:pointer} Extension_22: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_561: int;
  var vslice_dummy_var_562: int;
  var vslice_dummy_var_563: int;
  var vslice_dummy_var_564: int;
  var vslice_dummy_var_565: int;

  anon0:
    call {:si_unique_call 2340} newIrp_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2341} vslice_dummy_var_561 := __HAVOC_malloc(4);
    Extension_22 := actual_Extension_22;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2342} Tmp_899 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_22 := RefType;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2343} sdv_727 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_3]);
    assume {:nonnull} sdv_727 != 0;
    assume sdv_727 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_727)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_21], BNOT(s_p_e_c_i_a_l_22));
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2344} vslice_dummy_var_562 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2345} SerialRundownIrpRefs(CurrentOpIrp_3, IntervalTimer, TotalTimer, Extension_22);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2346} sdv_729 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_3]);
    assume {:nonnull} sdv_729 != 0;
    assume sdv_729 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_729)))] == 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Tmp_896 := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_896))] := StatusToUse;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Tmp_895 := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} Tmp_895 != 0;
    assume Tmp_895 > 0;
    goto L28;

  L28:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    oldIrp := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Mem_T.P_IRP[CurrentOpIrp_3] := 0;
    call {:si_unique_call 2347} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_899 := strConst__li2bpl1;
    call {:si_unique_call 2348} vslice_dummy_var_565 := SerialDbgPrintEx(9, Tmp_899);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume oldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2349} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, oldIrp);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2350} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2351} SerialIRPEpilogue(Extension_22);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume !(oldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L65;

  anon32_Then:
    call {:si_unique_call 2352} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant354;
    call {:si_unique_call 2353} SerialGetNextImmediate(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.P_IRP[newIrp_1] != 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant136;
    call {:si_unique_call 2354} vslice_dummy_var_564 := SerialStartRead(Extension_22);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant212;
    call {:si_unique_call 2355} vslice_dummy_var_563 := SerialStartWrite#0(Extension_22);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} Mem_T.P_IRP[newIrp_1] == 0;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant140;
    call {:si_unique_call 2356} SerialGetNextIrp(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant216;
    call {:si_unique_call 2357} SerialGetNextWrite(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon31_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_729)))] != 0;
    call {:si_unique_call 2358} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon38_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#0(actual_Extension_22: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_22: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int)
{
  var {:pointer} Tmp_895: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} sdv_727: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} s_p_e_c_i_a_l_22: int;
  var {:pointer} sdv_729: int;
  var {:pointer} oldIrp: int;
  var {:pointer} Tmp_899: int;
  var {:pointer} Extension_22: int;
  var {:scalar} SynchRoutine: int;
  var {:scalar} IrqlForRelease: int;
  var {:scalar} StatusToUse: int;
  var {:pointer} CurrentOpIrp_3: int;
  var {:pointer} QueueToProcess_2: int;
  var {:pointer} IntervalTimer: int;
  var {:pointer} TotalTimer: int;
  var {:scalar} Starter_1: int;
  var {:scalar} GetNextIrp: int;
  var {:scalar} RefType: int;
  var vslice_dummy_var_566: int;
  var vslice_dummy_var_567: int;
  var vslice_dummy_var_568: int;
  var vslice_dummy_var_569: int;
  var vslice_dummy_var_570: int;

  anon0:
    call {:si_unique_call 2359} newIrp_1 := __HAVOC_malloc(4);
    call {:si_unique_call 2360} vslice_dummy_var_566 := __HAVOC_malloc(4);
    Extension_22 := actual_Extension_22;
    SynchRoutine := actual_SynchRoutine;
    IrqlForRelease := actual_IrqlForRelease;
    StatusToUse := actual_StatusToUse;
    CurrentOpIrp_3 := actual_CurrentOpIrp_3;
    QueueToProcess_2 := actual_QueueToProcess_2;
    IntervalTimer := actual_IntervalTimer;
    TotalTimer := actual_TotalTimer;
    Starter_1 := actual_Starter_1;
    GetNextIrp := actual_GetNextIrp;
    RefType := actual_RefType;
    call {:si_unique_call 2361} Tmp_899 := __HAVOC_malloc(72);
    s_p_e_c_i_a_l_22 := RefType;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2362} sdv_727 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_3]);
    assume {:nonnull} sdv_727 != 0;
    assume sdv_727 > 0;
    s_p_e_c_i_a_l_21 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_727)));
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_21] := BAND(Mem_T.INT4[s_p_e_c_i_a_l_21], BNOT(s_p_e_c_i_a_l_22));
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} SynchRoutine != 0;
    call {:si_unique_call 2363} vslice_dummy_var_567 := KeSynchronizeExecution(0, SynchRoutine, 0);
    goto L12;

  L12:
    call {:si_unique_call 2364} SerialRundownIrpRefs(CurrentOpIrp_3, IntervalTimer, TotalTimer, Extension_22);
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    call {:si_unique_call 2365} sdv_729 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentOpIrp_3]);
    assume {:nonnull} sdv_729 != 0;
    assume sdv_729 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_729)))] == 0;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Tmp_896 := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_896))] := StatusToUse;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} StatusToUse == -1073741536;
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Tmp_895 := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} Tmp_895 != 0;
    assume Tmp_895 > 0;
    goto L28;

  L28:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    oldIrp := Mem_T.P_IRP[CurrentOpIrp_3];
    assume {:nonnull} CurrentOpIrp_3 != 0;
    assume CurrentOpIrp_3 > 0;
    Mem_T.P_IRP[CurrentOpIrp_3] := 0;
    call {:si_unique_call 2366} IoReleaseCancelSpinLock(IrqlForRelease);
    Tmp_899 := strConst__li2bpl1;
    call {:si_unique_call 2367} vslice_dummy_var_570 := SerialDbgPrintEx(9, Tmp_899);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume oldIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2368} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl2, oldIrp);
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} yogi_error != 1;
    goto L65;

  L65:
    call {:si_unique_call 2369} sdv_IoCompleteRequest(0, 2);
    call {:si_unique_call 2370} SerialIRPEpilogue(Extension_22);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon45_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon36_Then:
    assume !(oldIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L65;

  anon32_Then:
    call {:si_unique_call 2371} IoReleaseCancelSpinLock(IrqlForRelease);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant354;
    call {:si_unique_call 2372} SerialGetNextImmediate(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} Mem_T.P_IRP[newIrp_1] != 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant136;
    call {:si_unique_call 2373} vslice_dummy_var_569 := SerialStartRead(Extension_22);
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon42_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon35_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant212;
    call {:si_unique_call 2374} vslice_dummy_var_568 := SerialStartWrite#1(Extension_22);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon41_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} Mem_T.P_IRP[newIrp_1] == 0;
    goto L1;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon37_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant140;
    call {:si_unique_call 2375} SerialGetNextIrp(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon43_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon33_Then:
    assume {:IndirectCall} true;
    assume GetNextIrp == li2bplFunctionConstant216;
    call {:si_unique_call 2376} SerialGetNextWrite(CurrentOpIrp_3, QueueToProcess_2, newIrp_1, 1, Extension_22);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon40_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon39_Then:
    assume {:partition} StatusToUse != -1073741536;
    goto L28;

  anon31_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_729)))] != 0;
    call {:si_unique_call 2377} IoReleaseCancelSpinLock(IrqlForRelease);
    goto L1;

  anon38_Then:
    assume {:partition} SynchRoutine == 0;
    goto L12;
}



procedure {:origName "SerialTryToCompleteCurrent"} SerialTryToCompleteCurrent#1(actual_Extension_22: int, actual_SynchRoutine: int, actual_IrqlForRelease: int, actual_StatusToUse: int, actual_CurrentOpIrp_3: int, actual_QueueToProcess_2: int, actual_IntervalTimer: int, actual_TotalTimer: int, actual_Starter_1: int, actual_GetNextIrp: int, actual_RefType: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_12: int) returns (Tmp_464: int)
{
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_465: int;
  var {:scalar} FirstStatus: int;
  var {:scalar} TotalTime_1: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_466: int;
  var {:pointer} Tmp_467: int;
  var {:pointer} Tmp_468: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} IrpSp_2: int;
  var {:pointer} sdv_417: int;
  var {:pointer} sdv_418: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_419: int;
  var {:pointer} NewIrp_3: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:pointer} Tmp_469: int;
  var {:pointer} sdv_420: int;
  var {:pointer} sdv_421: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var {:scalar} Tmp_470: int;
  var {:scalar} s_p_e_c_i_a_l_13: int;
  var {:scalar} Timeouts_1: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} Tmp_471: int;
  var {:pointer} Extension_12: int;
  var vslice_dummy_var_571: int;
  var vslice_dummy_var_572: int;
  var vslice_dummy_var_573: int;
  var vslice_dummy_var_574: int;
  var vslice_dummy_var_575: int;

  anon0:
    call {:si_unique_call 2378} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2379} NewIrp_3 := __HAVOC_malloc(4);
    call {:si_unique_call 2380} Timeouts_1 := __HAVOC_malloc(20);
    Extension_12 := actual_Extension_12;
    call {:si_unique_call 2381} Tmp_465 := __HAVOC_malloc(92);
    call {:si_unique_call 2382} Tmp_469 := __HAVOC_malloc(88);
    SetFirstStatus := 0;
    Tmp_465 := strConst__li2bpl159;
    call {:si_unique_call 2383} vslice_dummy_var_574 := SerialDbgPrintEx(2, Tmp_465);
    goto L14;

  L14:
    call {:si_unique_call 2384} FirstStatus, SetFirstStatus, Tmp_466, Tmp_468, UseATimer_1, IrpSp_2, sdv_418, OldIrql_7, sdv_421, Tmp_470, Tmp_471 := SerialStartWrite#0_loop_L14(FirstStatus, TotalTime_1, SetFirstStatus, Tmp_466, Tmp_468, UseATimer_1, IrpSp_2, sdv_418, OldIrql_7, NewIrp_3, sdv_421, Tmp_470, Timeouts_1, Tmp_471, Extension_12);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2406} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2407} IoAcquireCancelSpinLock(Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)] != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2385} sdv_418 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_418 != 0;
    assume sdv_418 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_418)))] != 0;
    s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2386} sdv_420 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_420 != 0;
    assume sdv_420 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_420)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_9], s_p_e_c_i_a_l_11);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_467 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_467 != 0;
    assume Tmp_467 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume false;
    return;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_418)))] == 0;
    call {:si_unique_call 2387} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  L40:
    UseATimer_1 := 0;
    call {:si_unique_call 2388} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2389} sdv_KeAcquireSpinLock(0, Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2390} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2391} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    UseATimer_1 := 1;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_2)] == 4;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    havoc Tmp_470;
    goto L59;

  L59:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2392} sdv_421 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_421 != 0;
    assume sdv_421 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_421)))] := 0;
    call {:si_unique_call 2393} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2394} IoAcquireCancelSpinLock(Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_466 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_466 != 0;
    assume Tmp_466 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_466)] != 0;
    call {:si_unique_call 2395} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_468 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_468 != 0;
    assume Tmp_468 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_468))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2396} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), NewIrp_3, 1, Extension_12);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] == 0;
    goto L79;

  L79:
    Tmp_469 := strConst__li2bpl158;
    call {:si_unique_call 2397} vslice_dummy_var_575 := SerialDbgPrintEx(2, Tmp_469);
    Tmp_464 := FirstStatus;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus == 0;
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L75;

  anon33_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_466)] == 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2398} vslice_dummy_var_571 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)], li2bplFunctionConstant214);
    s_p_e_c_i_a_l_13 := 2;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2399} sdv_417 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_417 != 0;
    assume sdv_417 > 0;
    s_p_e_c_i_a_l_12 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_417)));
    assume {:nonnull} s_p_e_c_i_a_l_12 != 0;
    assume s_p_e_c_i_a_l_12 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_12] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_12], s_p_e_c_i_a_l_13);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2400} vslice_dummy_var_573 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_12), TotalTime_1, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_12), Extension_12);
    s_p_e_c_i_a_l_14 := 4;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2401} sdv_419 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_419 != 0;
    assume sdv_419 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_419)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_14);
    goto L99;

  L99:
    call {:si_unique_call 2402} vslice_dummy_var_572 := KeSynchronizeExecution(0, li2bplFunctionConstant215, 0);
    call {:si_unique_call 2403} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus == 0;
    call {:si_unique_call 2404} sdv_IoMarkIrpPending(0);
    SetFirstStatus := 1;
    FirstStatus := 259;
    goto L87;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_2)] != 4;
    Tmp_470 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)] == 0;
    call {:si_unique_call 2405} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#0(actual_Extension_12: int) returns (Tmp_464: int);
  modifies alloc, Mem_T.INT4, Mem_T.PVOID, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_12: int) returns (Tmp_464: int)
{
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_465: int;
  var {:scalar} FirstStatus: int;
  var {:scalar} TotalTime_1: int;
  var {:scalar} SetFirstStatus: int;
  var {:pointer} Tmp_466: int;
  var {:pointer} Tmp_467: int;
  var {:pointer} Tmp_468: int;
  var {:pointer} s_p_e_c_i_a_l_10: int;
  var {:scalar} UseATimer_1: int;
  var {:pointer} IrpSp_2: int;
  var {:pointer} sdv_417: int;
  var {:pointer} sdv_418: int;
  var {:scalar} OldIrql_7: int;
  var {:pointer} sdv_419: int;
  var {:pointer} NewIrp_3: int;
  var {:scalar} s_p_e_c_i_a_l_11: int;
  var {:pointer} Tmp_469: int;
  var {:pointer} sdv_420: int;
  var {:pointer} sdv_421: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var {:scalar} Tmp_470: int;
  var {:scalar} s_p_e_c_i_a_l_13: int;
  var {:scalar} Timeouts_1: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} Tmp_471: int;
  var {:pointer} Extension_12: int;
  var vslice_dummy_var_576: int;
  var vslice_dummy_var_577: int;
  var vslice_dummy_var_578: int;
  var vslice_dummy_var_579: int;
  var vslice_dummy_var_580: int;

  anon0:
    call {:si_unique_call 2408} TotalTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2409} NewIrp_3 := __HAVOC_malloc(4);
    call {:si_unique_call 2410} Timeouts_1 := __HAVOC_malloc(20);
    Extension_12 := actual_Extension_12;
    call {:si_unique_call 2411} Tmp_465 := __HAVOC_malloc(92);
    call {:si_unique_call 2412} Tmp_469 := __HAVOC_malloc(88);
    SetFirstStatus := 0;
    Tmp_465 := strConst__li2bpl159;
    call {:si_unique_call 2413} vslice_dummy_var_579 := SerialDbgPrintEx(2, Tmp_465);
    goto L14;

  L14:
    call {:si_unique_call 2414} s_p_e_c_i_a_l_9, FirstStatus, SetFirstStatus, Tmp_466, Tmp_467, Tmp_468, UseATimer_1, IrpSp_2, sdv_418, OldIrql_7, s_p_e_c_i_a_l_11, sdv_420, sdv_421, Tmp_470, Tmp_471 := SerialStartWrite#1_loop_L14(s_p_e_c_i_a_l_9, FirstStatus, TotalTime_1, SetFirstStatus, Tmp_466, Tmp_467, Tmp_468, UseATimer_1, IrpSp_2, sdv_418, OldIrql_7, NewIrp_3, s_p_e_c_i_a_l_11, sdv_420, sdv_421, Tmp_470, Timeouts_1, Tmp_471, Extension_12);
    goto L14_last;

  L14_last:
    call {:si_unique_call 2437} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2438} IoAcquireCancelSpinLock(Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)] != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2415} sdv_418 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_418 != 0;
    assume sdv_418 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_418)))] != 0;
    s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2416} sdv_420 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_420 != 0;
    assume sdv_420 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_420)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_9], s_p_e_c_i_a_l_11);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_467 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_467 != 0;
    assume Tmp_467 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2417} SerialTryToCompleteCurrent#0(Extension_12, li2bplFunctionConstant213, OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(Extension_12), 0, 0, 16);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    UseATimer_1 := 0;
    call {:si_unique_call 2418} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2419} sdv_KeAcquireSpinLock(0, Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    call {:si_unique_call 2420} sdv_KeReleaseSpinLock(0, OldIrql_7);
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2421} IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    UseATimer_1 := 1;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_2)] == 4;
    assume {:nonnull} IrpSp_2 != 0;
    assume IrpSp_2 > 0;
    havoc Tmp_470;
    goto L59;

  L59:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    assume {:nonnull} TotalTime_1 != 0;
    assume TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2422} sdv_421 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_421 != 0;
    assume sdv_421 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_421)))] := 0;
    call {:si_unique_call 2423} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Mem_T.INT4[Tmp_471] := OldIrql_7;
    call {:si_unique_call 2424} IoAcquireCancelSpinLock(Tmp_471);
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    OldIrql_7 := Mem_T.INT4[Tmp_471];
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_466 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_466 != 0;
    assume Tmp_466 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_466)] != 0;
    call {:si_unique_call 2425} IoReleaseCancelSpinLock(OldIrql_7);
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    Tmp_468 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)];
    assume {:nonnull} Tmp_468 != 0;
    assume Tmp_468 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(Tmp_468))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2426} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12), WriteQueue__SERIAL_DEVICE_EXTENSION(Extension_12), NewIrp_3, 1, Extension_12);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} NewIrp_3 != 0;
    assume NewIrp_3 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] == 0;
    goto L79;

  L79:
    Tmp_469 := strConst__li2bpl158;
    call {:si_unique_call 2427} vslice_dummy_var_580 := SerialDbgPrintEx(2, Tmp_469);
    Tmp_464 := FirstStatus;
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[NewIrp_3] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    assume false;
    return;

  anon35_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon34_Then:
    assume {:partition} SetFirstStatus == 0;
    FirstStatus := -1073741536;
    SetFirstStatus := 1;
    goto L75;

  anon33_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(Tmp_466)] == 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} SetFirstStatus != 0;
    goto L87;

  L87:
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2428} vslice_dummy_var_576 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)], li2bplFunctionConstant214);
    s_p_e_c_i_a_l_13 := 2;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2429} sdv_417 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_417 != 0;
    assume sdv_417 > 0;
    s_p_e_c_i_a_l_12 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_417)));
    assume {:nonnull} s_p_e_c_i_a_l_12 != 0;
    assume s_p_e_c_i_a_l_12 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_12] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_12], s_p_e_c_i_a_l_13);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} UseATimer_1 != 0;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2430} vslice_dummy_var_578 := SerialSetTimer(WriteRequestTotalTimer__SERIAL_DEVICE_EXTENSION(Extension_12), TotalTime_1, TotalWriteTimeoutDpc__SERIAL_DEVICE_EXTENSION(Extension_12), Extension_12);
    s_p_e_c_i_a_l_14 := 4;
    assume {:nonnull} Extension_12 != 0;
    assume Extension_12 > 0;
    call {:si_unique_call 2431} sdv_419 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(Extension_12)]);
    assume {:nonnull} sdv_419 != 0;
    assume sdv_419 > 0;
    s_p_e_c_i_a_l_10 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_419)));
    assume {:nonnull} s_p_e_c_i_a_l_10 != 0;
    assume s_p_e_c_i_a_l_10 > 0;
    Mem_T.INT4[s_p_e_c_i_a_l_10] := BOR(Mem_T.INT4[s_p_e_c_i_a_l_10], s_p_e_c_i_a_l_14);
    goto L99;

  L99:
    call {:si_unique_call 2432} vslice_dummy_var_577 := KeSynchronizeExecution(0, li2bplFunctionConstant215, 0);
    call {:si_unique_call 2433} IoReleaseCancelSpinLock(OldIrql_7);
    goto L79;

  anon36_Then:
    assume {:partition} UseATimer_1 == 0;
    goto L99;

  anon29_Then:
    assume {:partition} SetFirstStatus == 0;
    call {:si_unique_call 2434} sdv_IoMarkIrpPending(0);
    SetFirstStatus := 1;
    FirstStatus := 259;
    goto L87;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(IrpSp_2)] != 4;
    Tmp_470 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} Timeouts_1 != 0;
    assume Timeouts_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_418)))] == 0;
    call {:si_unique_call 2435} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(Extension_12)] == 0;
    call {:si_unique_call 2436} IoReleaseCancelSpinLock(OldIrql_7);
    goto L40;
}



procedure {:origName "SerialStartWrite"} SerialStartWrite#1(actual_Extension_12: int) returns (Tmp_464: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int)
{
  var vslice_dummy_var_2721: int;

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_sDeviceData, in_gotISR, in_gotMem;
    goto L95, exit;

  exit:
    return;

  L95:
    goto anon132_Else;

  anon132_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    goto L105;

  L105:
    out_i := out_i + 1;
    goto L105_dummy;

  L105_dummy:
    call {:si_unique_call 2439} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L95(in_ioResIndex, in_isMulti, in_count, out_gotIO, out_curIoIndex, out_gotInt, out_i, out_sDeviceData, out_gotISR, out_gotMem, in_pPartialResourceDesc, in_PConfig);
    return;

  anon172_Then:
    out_sDeviceData := in_pPartialResourceDesc;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} out_sDeviceData != 0;
    assume out_sDeviceData > 0;
    havoc vslice_dummy_var_2721;
    Mem_T.INT4[ClockRate__CONFIG_DATA(in_PConfig)] := vslice_dummy_var_2721;
    goto L105;

  anon173_Then:
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} out_gotMem == 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon138_Then:
    goto L105;

  anon137_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon136_Then:
    assume {:partition} out_gotMem != 0;
    goto L105;

  anon174_Then:
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon178_Then:
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L105;

  anon135_Then:
    assume {:partition} out_gotInt != 0;
    goto L105;

  anon133_Then:
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon141_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L105;

  anon140_Then:
    assume {:partition} out_gotISR != 0;
    goto L121;

  L121:
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialResourceDesc != 0;
    assume in_pPartialResourceDesc > 0;
    goto L105;

  anon142_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L105;

  anon139_Then:
    assume {:partition} out_gotIO != 0;
    goto L105;

  anon134_Then:
    goto L121;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L95(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_sDeviceData: int, in_gotISR: int, in_gotMem: int, in_pPartialResourceDesc: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_sDeviceData: int, out_gotISR: int, out_gotMem: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_sDeviceData == in_sDeviceData || out_sDeviceData == in_pPartialResourceDesc;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int)
{

  entry:
    out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := in_gotIO, in_curIoIndex, in_gotInt, in_i, in_gotISR, in_gotMem;
    goto L148, exit;

  exit:
    return;

  L148:
    goto anon143_Else;

  anon143_Else:
    assume {:partition} in_count > out_i;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    goto L156;

  L156:
    out_i := out_i + 1;
    goto L156_dummy;

  L156_dummy:
    call {:si_unique_call 2440} {:si_old_unique_call 1} out_gotIO, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem := SerialGetPortInfo_loop_L148(in_ioResIndex, in_isMulti, in_count, out_gotIO, in_pPartialTrResourceDesc, out_curIoIndex, out_gotInt, out_i, out_gotISR, out_gotMem, in_PConfig);
    return;

  anon175_Then:
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} out_gotMem != 0;
    goto L156;

  anon147_Then:
    assume {:partition} out_gotMem == 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    out_gotMem := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    goto L156;

  anon149_Then:
    goto L156;

  anon148_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon176_Then:
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} out_gotInt == 0;
    out_gotInt := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon146_Then:
    assume {:partition} out_gotInt != 0;
    goto L156;

  anon144_Then:
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} out_gotISR == 0;
    assume {:nonnull} in_isMulti != 0;
    assume in_isMulti > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} Mem_T.INT4[in_isMulti] != 0;
    out_gotISR := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon152_Then:
    assume {:partition} Mem_T.INT4[in_isMulti] == 0;
    goto L156;

  anon151_Then:
    assume {:partition} out_gotISR != 0;
    goto L167;

  L167:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} out_gotIO == 0;
    assume {:nonnull} in_ioResIndex != 0;
    assume in_ioResIndex > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} out_curIoIndex == Mem_T.INT4[in_ioResIndex];
    out_gotIO := 1;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    assume {:nonnull} in_PConfig != 0;
    assume in_PConfig > 0;
    assume {:nonnull} in_pPartialTrResourceDesc != 0;
    assume in_pPartialTrResourceDesc > 0;
    goto L156;

  anon153_Then:
    assume {:partition} out_curIoIndex != Mem_T.INT4[in_ioResIndex];
    out_curIoIndex := out_curIoIndex + 1;
    goto L156;

  anon150_Then:
    assume {:partition} out_gotIO != 0;
    goto L156;

  anon145_Then:
    goto L167;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L148(in_ioResIndex: int, in_isMulti: int, in_count: int, in_gotIO: int, in_pPartialTrResourceDesc: int, in_curIoIndex: int, in_gotInt: int, in_i: int, in_gotISR: int, in_gotMem: int, in_PConfig: int) returns (out_gotIO: int, out_curIoIndex: int, out_gotInt: int, out_i: int, out_gotISR: int, out_gotMem: int);
  free ensures {:va_keep} out_gotIO == 1 || out_gotIO == in_gotIO;
  free ensures {:va_keep} out_gotInt == 1 || out_gotInt == in_gotInt;
  free ensures {:va_keep} out_gotISR == 1 || out_gotISR == in_gotISR;
  free ensures {:va_keep} out_gotMem == 1 || out_gotMem == in_gotMem;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_52: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_52: int)
{

  entry:
    out_interfaceType, out_foundOne, out_vslice_dummy_var_52 := in_interfaceType, in_foundOne, in_vslice_dummy_var_52;
    goto L191, exit;

  exit:
    return;

  L191:
    assume {:CounterLoop 17} {:Counter "interfaceType"} true;
    goto anon154_Else;

  anon154_Else:
    assume {:partition} 17 > out_interfaceType;
    out_foundOne := 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} out_interfaceType != 0;
    call {:si_unique_call 2441} out_vslice_dummy_var_52 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant254, 0);
    goto anon156_Then;

  anon156_Then:
    assume {:partition} out_foundOne == 0;
    goto L198;

  L198:
    out_interfaceType := out_interfaceType + 1;
    goto L198_dummy;

  L198_dummy:
    havoc out_interfaceType;
    return;

  anon180_Then:
    assume {:partition} out_interfaceType == 0;
    goto L198;
}



procedure {:LoopProcedure} SerialGetPortInfo_loop_L191(in_interfaceType: int, in_foundOne: int, in_vslice_dummy_var_52: int) returns (out_interfaceType: int, out_foundOne: int, out_vslice_dummy_var_52: int);
  free ensures {:va_keep} out_foundOne == 0 || out_foundOne == in_foundOne;
  free ensures {:va_keep} out_vslice_dummy_var_52 == 0 || out_vslice_dummy_var_52 == -1073741823 || out_vslice_dummy_var_52 == in_vslice_dummy_var_52;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialPnpDispatch_loop_L179(in_sdv_143: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int)
{

  entry:
    out_allocLen, out_curStrLen := in_allocLen, in_curStrLen;
    goto L179, exit;

  exit:
    return;

  L179:
    out_curStrLen := in_sdv_143;
    goto anon308_Else;

  anon308_Else:
    assume {:partition} out_curStrLen != 0;
    out_allocLen := out_allocLen + out_curStrLen * 2 + 2;
    goto anon308_Else_dummy;

  anon308_Else_dummy:
    havoc out_allocLen;
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L179(in_sdv_143: int, in_allocLen: int, in_curStrLen: int, in_curStr: int) returns (out_allocLen: int, out_curStrLen: int);
  free ensures {:va_keep} out_curStrLen == in_sdv_143 || out_curStrLen == in_curStrLen;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_2: int, in_Tmp_200: int, in_Tmp_203: int, in_isMulti_2: int, in_pLowerDevObj_2: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_238: int, in_Tmp_241: int, in_j: int, in_Tmp_247: int, in_gotISR_1: int, in_vslice_dummy_var_151: int, in_vslice_dummy_var_152: int, in_vslice_dummy_var_153: int) returns (out_Tmp_200: int, out_Tmp_203: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_238: int, out_Tmp_241: int, out_j: int, out_Tmp_247: int, out_gotISR_1: int, out_vslice_dummy_var_151: int, out_vslice_dummy_var_152: int, out_vslice_dummy_var_153: int)
{

  entry:
    out_Tmp_200, out_Tmp_203, out_gotInt_1, out_pResDesc, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153 := in_Tmp_200, in_Tmp_203, in_gotInt_1, in_pResDesc, in_Tmp_238, in_Tmp_241, in_j, in_Tmp_247, in_gotISR_1, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153;
    goto L354, exit;

  exit:
    return;

  L354:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon230_Else;

  anon230_Else:
    out_Tmp_200 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_203;
    out_pResDesc := out_Tmp_203 + out_Tmp_200 * 380;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon236_Else;

  anon236_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    goto L369_dummy;

  L369_dummy:
    call {:si_unique_call 2445} {:si_old_unique_call 1} out_Tmp_200, out_Tmp_203, out_gotInt_1, out_pResDesc, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_2, out_Tmp_200, out_Tmp_203, in_isMulti_2, in_pLowerDevObj_2, out_gotInt_1, out_pResDesc, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153);
    return;

  anon234_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon237_Else;

  anon237_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon235_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon233_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon285_Then:
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon232_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_241 := strConst__li2bpl111;
    call {:si_unique_call 2442} out_vslice_dummy_var_152 := SerialDbgPrintEx(12, out_Tmp_241);
    goto L363;

  anon301_Then:
    assume {:nonnull} in_pDevExt_2 != 0;
    assume in_pDevExt_2 > 0;
    out_Tmp_238 := strConst__li2bpl112;
    call {:si_unique_call 2443} out_vslice_dummy_var_153 := SerialDbgPrintEx(12, out_Tmp_238);
    goto L363;

  anon300_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_247 := strConst__li2bpl110;
    call {:si_unique_call 2444} out_vslice_dummy_var_151 := SerialDbgPrintEx(12, out_Tmp_247);
    goto L363;

  anon239_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon238_Then:
    goto L363;

  anon231_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L354(in_pResList: int, in_pDevExt_2: int, in_Tmp_200: int, in_Tmp_203: int, in_isMulti_2: int, in_pLowerDevObj_2: int, in_gotInt_1: int, in_pResDesc: int, in_Tmp_238: int, in_Tmp_241: int, in_j: int, in_Tmp_247: int, in_gotISR_1: int, in_vslice_dummy_var_151: int, in_vslice_dummy_var_152: int, in_vslice_dummy_var_153: int) returns (out_Tmp_200: int, out_Tmp_203: int, out_gotInt_1: int, out_pResDesc: int, out_Tmp_238: int, out_Tmp_241: int, out_j: int, out_Tmp_247: int, out_gotISR_1: int, out_vslice_dummy_var_151: int, out_vslice_dummy_var_152: int, out_vslice_dummy_var_153: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_151 == 0 || out_vslice_dummy_var_151 == in_vslice_dummy_var_151;
  free ensures {:va_keep} out_vslice_dummy_var_152 == 0 || out_vslice_dummy_var_152 == in_vslice_dummy_var_152;
  free ensures {:va_keep} out_vslice_dummy_var_153 == 0 || out_vslice_dummy_var_153 == in_vslice_dummy_var_153;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_2: int, in_Tmp_200: int, in_Tmp_201: int, in_Tmp_203: int, in_isMulti_2: int, in_pLowerDevObj_2: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_pReqList: int, in_Tmp_238: int, in_Tmp_241: int, in_j: int, in_Tmp_247: int, in_gotISR_1: int, in_vslice_dummy_var_150: int, in_vslice_dummy_var_151: int, in_vslice_dummy_var_152: int, in_vslice_dummy_var_153: int) returns (out_Tmp_200: int, out_Tmp_201: int, out_Tmp_203: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_238: int, out_Tmp_241: int, out_j: int, out_Tmp_247: int, out_gotISR_1: int, out_vslice_dummy_var_150: int, out_vslice_dummy_var_151: int, out_vslice_dummy_var_152: int, out_vslice_dummy_var_153: int)
{

  entry:
    out_Tmp_200, out_Tmp_201, out_Tmp_203, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153 := in_Tmp_200, in_Tmp_201, in_Tmp_203, in_gotInt_1, in_pResDesc, in_listNum, in_Tmp_238, in_Tmp_241, in_j, in_Tmp_247, in_gotISR_1, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153;
    goto L346, exit;

  exit:
    return;

  L346:
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    goto anon229_Else;

  anon229_Else:
    out_gotISR_1 := 0;
    out_gotInt_1 := 0;
    out_Tmp_201 := strConst__li2bpl109;
    call {:si_unique_call 2447} out_vslice_dummy_var_150 := SerialDbgPrintEx(12, out_Tmp_201);
    out_j := 0;
    goto L354;

  L354:
    call {:si_unique_call 2446} out_Tmp_200, out_Tmp_203, out_gotInt_1, out_pResDesc, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153 := SerialPnpDispatch_loop_L354(in_pResList, in_pDevExt_2, out_Tmp_200, out_Tmp_203, in_isMulti_2, in_pLowerDevObj_2, out_gotInt_1, out_pResDesc, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153);
    goto L354_last;

  L354_last:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    out_Tmp_200 := out_j;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_203;
    out_pResDesc := out_Tmp_203 + out_Tmp_200 * 380;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    goto L363;

  L363:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    assume {:partition} out_gotISR_1 == 0;
    goto L364;

  L364:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    goto L369;

  L369:
    out_j := out_j + 1;
    assume false;
    return;

  anon234_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:partition} out_gotInt_1 == 0;
    goto L369;

  anon237_Then:
    assume {:partition} out_gotInt_1 != 0;
    goto L355;

  L355:
    out_listNum := out_listNum + 1;
    goto L355_dummy;

  L355_dummy:
    call {:si_unique_call 2451} {:si_old_unique_call 1} out_Tmp_200, out_Tmp_201, out_Tmp_203, out_gotInt_1, out_pResDesc, out_listNum, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153 := SerialPnpDispatch_loop_L346(in_pResList, in_pDevExt_2, out_Tmp_200, out_Tmp_201, out_Tmp_203, in_isMulti_2, in_pLowerDevObj_2, out_gotInt_1, out_pResDesc, out_listNum, in_pReqList, out_Tmp_238, out_Tmp_241, out_j, out_Tmp_247, out_gotISR_1, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153);
    return;

  anon236_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L355;

  anon235_Then:
    assume {:partition} out_gotInt_1 == 0;
    goto L364;

  anon233_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L364;

  anon285_Then:
    goto anon232_Then, anon232_Else;

  anon232_Else:
    assume {:partition} out_gotInt_1 != 0;
    goto L363;

  anon232_Then:
    assume {:partition} out_gotInt_1 == 0;
    out_gotInt_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_241 := strConst__li2bpl111;
    call {:si_unique_call 2448} out_vslice_dummy_var_152 := SerialDbgPrintEx(12, out_Tmp_241);
    goto L363;

  anon301_Then:
    assume {:nonnull} in_pDevExt_2 != 0;
    assume in_pDevExt_2 > 0;
    out_Tmp_238 := strConst__li2bpl112;
    call {:si_unique_call 2449} out_vslice_dummy_var_153 := SerialDbgPrintEx(12, out_Tmp_238);
    goto L363;

  anon300_Then:
    assume {:nonnull} in_isMulti_2 != 0;
    assume in_isMulti_2 > 0;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    assume {:partition} Mem_T.INT4[in_isMulti_2] != 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} out_gotISR_1 == 0;
    out_gotISR_1 := 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    out_Tmp_247 := strConst__li2bpl110;
    call {:si_unique_call 2450} out_vslice_dummy_var_151 := SerialDbgPrintEx(12, out_Tmp_247);
    goto L363;

  anon239_Then:
    assume {:partition} out_gotISR_1 != 0;
    goto L363;

  anon238_Then:
    goto L363;

  anon231_Then:
    assume {:partition} Mem_T.INT4[in_isMulti_2] == 0;
    goto L363;

  anon230_Then:
    goto L355;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L346(in_pResList: int, in_pDevExt_2: int, in_Tmp_200: int, in_Tmp_201: int, in_Tmp_203: int, in_isMulti_2: int, in_pLowerDevObj_2: int, in_gotInt_1: int, in_pResDesc: int, in_listNum: int, in_pReqList: int, in_Tmp_238: int, in_Tmp_241: int, in_j: int, in_Tmp_247: int, in_gotISR_1: int, in_vslice_dummy_var_150: int, in_vslice_dummy_var_151: int, in_vslice_dummy_var_152: int, in_vslice_dummy_var_153: int) returns (out_Tmp_200: int, out_Tmp_201: int, out_Tmp_203: int, out_gotInt_1: int, out_pResDesc: int, out_listNum: int, out_Tmp_238: int, out_Tmp_241: int, out_j: int, out_Tmp_247: int, out_gotISR_1: int, out_vslice_dummy_var_150: int, out_vslice_dummy_var_151: int, out_vslice_dummy_var_152: int, out_vslice_dummy_var_153: int);
  free ensures {:va_keep} out_gotInt_1 == 1 || out_gotInt_1 == 0 || out_gotInt_1 == in_gotInt_1;
  free ensures {:va_keep} out_gotISR_1 == 1 || out_gotISR_1 == 0 || out_gotISR_1 == in_gotISR_1;
  free ensures {:va_keep} out_vslice_dummy_var_150 == 0 || out_vslice_dummy_var_150 == in_vslice_dummy_var_150;
  free ensures {:va_keep} out_vslice_dummy_var_151 == 0 || out_vslice_dummy_var_151 == in_vslice_dummy_var_151;
  free ensures {:va_keep} out_vslice_dummy_var_152 == 0 || out_vslice_dummy_var_152 == in_vslice_dummy_var_152;
  free ensures {:va_keep} out_vslice_dummy_var_153 == 0 || out_vslice_dummy_var_153 == in_vslice_dummy_var_153;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:SIextraRecBound 5} SerialPnpDispatch_loop_L476(in_Tmp_190: int, in_pDevExt_2: int, in_cap: int, in_Tmp_221: int, in_Tmp_235: int, in_Tmp_255: int, in_pDevCaps: int) returns (out_Tmp_190: int, out_cap: int, out_Tmp_221: int, out_Tmp_235: int, out_Tmp_255: int)
{

  entry:
    out_Tmp_190, out_cap, out_Tmp_221, out_Tmp_235, out_Tmp_255 := in_Tmp_190, in_cap, in_Tmp_221, in_Tmp_235, in_Tmp_255;
    goto L476, exit;

  exit:
    return;

  L476:
    assume {:CounterLoop 5} {:Counter "cap"} true;
    goto anon246_Else;

  anon246_Else:
    assume {:partition} 7 > out_cap;
    out_Tmp_255 := out_cap;
    assume {:nonnull} in_pDevExt_2 != 0;
    assume in_pDevExt_2 > 0;
    havoc out_Tmp_235;
    out_Tmp_190 := out_cap;
    assume {:nonnull} in_pDevCaps != 0;
    assume in_pDevCaps > 0;
    havoc out_Tmp_221;
    assume {:nonnull} out_Tmp_221 != 0;
    assume out_Tmp_221 > 0;
    assume {:nonnull} out_Tmp_235 != 0;
    assume out_Tmp_235 > 0;
    Mem_T.INT4[out_Tmp_235 + out_Tmp_255 * 4] := Mem_T.INT4[out_Tmp_221 + out_Tmp_190 * 4];
    out_cap := out_cap + 1;
    goto anon246_Else_dummy;

  anon246_Else_dummy:
    call {:si_unique_call 2452} {:si_old_unique_call 1} out_Tmp_190, out_cap, out_Tmp_221, out_Tmp_235, out_Tmp_255 := SerialPnpDispatch_loop_L476(out_Tmp_190, in_pDevExt_2, out_cap, out_Tmp_221, out_Tmp_235, out_Tmp_255, in_pDevCaps);
    return;
}



procedure {:LoopProcedure} SerialPnpDispatch_loop_L476(in_Tmp_190: int, in_pDevExt_2: int, in_cap: int, in_Tmp_221: int, in_Tmp_235: int, in_Tmp_255: int, in_pDevCaps: int) returns (out_Tmp_190: int, out_cap: int, out_Tmp_221: int, out_Tmp_235: int, out_Tmp_255: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialInternalIoControl_loop_L126(in_Tmp_430: int, in_pDevExt_8: int, in_Tmp_433: int, in_cap_1: int, in_Tmp_434: int, in_Tmp_436: int) returns (out_Tmp_430: int, out_Tmp_433: int, out_cap_1: int, out_Tmp_434: int, out_Tmp_436: int)
{

  entry:
    out_Tmp_430, out_Tmp_433, out_cap_1, out_Tmp_434, out_Tmp_436 := in_Tmp_430, in_Tmp_433, in_cap_1, in_Tmp_434, in_Tmp_436;
    goto L126, exit;

  exit:
    return;

  L126:
    assume {:CounterLoop 5} {:Counter "cap_1"} true;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} 7 > out_cap_1;
    out_Tmp_434 := out_cap_1;
    assume {:nonnull} in_pDevExt_8 != 0;
    assume in_pDevExt_8 > 0;
    havoc out_Tmp_430;
    assume {:nonnull} out_Tmp_430 != 0;
    assume out_Tmp_430 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Mem_T.INT4[out_Tmp_430 + out_Tmp_434 * 4] >= 1;
    out_Tmp_436 := out_cap_1;
    assume {:nonnull} in_pDevExt_8 != 0;
    assume in_pDevExt_8 > 0;
    havoc out_Tmp_433;
    assume {:nonnull} out_Tmp_433 != 0;
    assume out_Tmp_433 > 0;
    assume {:nonnull} in_pDevExt_8 != 0;
    assume in_pDevExt_8 > 0;
    goto anon61_Else;

  anon61_Else:
    goto L129;

  L129:
    out_cap_1 := out_cap_1 + 1;
    goto L129_dummy;

  L129_dummy:
    havoc out_cap_1;
    return;

  anon60_Then:
    assume {:partition} 1 > Mem_T.INT4[out_Tmp_430 + out_Tmp_434 * 4];
    goto L129;
}



procedure {:LoopProcedure} SerialInternalIoControl_loop_L126(in_Tmp_430: int, in_pDevExt_8: int, in_Tmp_433: int, in_cap_1: int, in_Tmp_434: int, in_Tmp_436: int) returns (out_Tmp_430: int, out_Tmp_433: int, out_cap_1: int, out_Tmp_434: int, out_Tmp_436: int);
  free ensures {:va_keep} out_Tmp_434 == in_cap_1 || out_Tmp_434 == in_Tmp_434;
  free ensures {:va_keep} out_Tmp_436 == in_cap_1 || out_Tmp_436 == in_Tmp_436;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_5: int, in_sdv_402: int, in_Irp_9: int, in_Tmp_461: int, in_OldIrql_5: int, in_sdv_405: int, in_OldIrql_6: int, in_sdv_407: int, in_CompleteCurrent_2: int, in_s_p_e_c_i_a_l_6: int, in_sdv_409: int, in_sdv_410: int, in_sdv_411: int, in_s_p_e_c_i_a_l_7: int, in_delta: int, in_Xc_1: int, in_s_p_e_c_i_a_l_8: int, in_Tmp_463: int, in_CurrentOpIrp_1: int, in_QueueToProcess_1: int, in_NewIrp_2: int, in_CompleteCurrent_1: int, in_Extension_11: int, in_vslice_dummy_var_292: int, in_vslice_dummy_var_295: int, in_vslice_dummy_var_296: int) returns (out_s_p_e_c_i_a_l_5: int, out_sdv_402: int, out_Irp_9: int, out_Tmp_461: int, out_OldIrql_5: int, out_sdv_405: int, out_OldIrql_6: int, out_sdv_407: int, out_s_p_e_c_i_a_l_6: int, out_sdv_409: int, out_sdv_410: int, out_sdv_411: int, out_s_p_e_c_i_a_l_7: int, out_Xc_1: int, out_s_p_e_c_i_a_l_8: int, out_Tmp_463: int, out_CompleteCurrent_1: int, out_vslice_dummy_var_292: int, out_vslice_dummy_var_295: int, out_vslice_dummy_var_296: int)
{

  entry:
    out_s_p_e_c_i_a_l_5, out_sdv_402, out_Irp_9, out_Tmp_461, out_OldIrql_5, out_sdv_405, out_OldIrql_6, out_sdv_407, out_s_p_e_c_i_a_l_6, out_sdv_409, out_sdv_410, out_sdv_411, out_s_p_e_c_i_a_l_7, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_463, out_CompleteCurrent_1, out_vslice_dummy_var_292, out_vslice_dummy_var_295, out_vslice_dummy_var_296 := in_s_p_e_c_i_a_l_5, in_sdv_402, in_Irp_9, in_Tmp_461, in_OldIrql_5, in_sdv_405, in_OldIrql_6, in_sdv_407, in_s_p_e_c_i_a_l_6, in_sdv_409, in_sdv_410, in_sdv_411, in_s_p_e_c_i_a_l_7, in_Xc_1, in_s_p_e_c_i_a_l_8, in_Tmp_463, in_CompleteCurrent_1, in_vslice_dummy_var_292, in_vslice_dummy_var_295, in_vslice_dummy_var_296;
    goto L8, exit;

  exit:
    return;

  L8:
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    call {:si_unique_call 2453} out_sdv_407 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp_1]);
    assume {:nonnull} out_sdv_407 != 0;
    assume out_sdv_407 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_407)] == 4;
    call {:si_unique_call 2456} out_Tmp_461 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_461 != 0;
    assume out_Tmp_461 > 0;
    Mem_T.INT4[out_Tmp_461] := out_OldIrql_6;
    call {:si_unique_call 2457} IoAcquireCancelSpinLock(out_Tmp_461);
    assume {:nonnull} out_Tmp_461 != 0;
    assume out_Tmp_461 > 0;
    out_OldIrql_6 := Mem_T.INT4[out_Tmp_461];
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    call {:si_unique_call 2458} out_sdv_410 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp_1]);
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} out_sdv_410 != 0;
    assume out_sdv_410 > 0;
    call {:si_unique_call 2459} IoReleaseCancelSpinLock(out_OldIrql_6);
    goto L26;

  L26:
    call {:si_unique_call 2455} SerialGetNextIrp(in_CurrentOpIrp_1, in_QueueToProcess_1, in_NewIrp_2, out_CompleteCurrent_1, in_Extension_11);
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    goto anon18_Then;

  anon18_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_2] != 0;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    call {:si_unique_call 2454} out_sdv_411 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_NewIrp_2]);
    assume {:nonnull} out_sdv_411 != 0;
    assume out_sdv_411 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_411)] == 9;
    assume {:nonnull} in_NewIrp_2 != 0;
    assume in_NewIrp_2 > 0;
    out_Tmp_463 := Mem_T.P_IRP[in_NewIrp_2];
    assume {:nonnull} out_Tmp_463 != 0;
    assume out_Tmp_463 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_463))] := 0;
    out_CompleteCurrent_1 := in_CompleteCurrent_2;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2469} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_5, out_sdv_402, out_Irp_9, out_Tmp_461, out_OldIrql_5, out_sdv_405, out_OldIrql_6, out_sdv_407, out_s_p_e_c_i_a_l_6, out_sdv_409, out_sdv_410, out_sdv_411, out_s_p_e_c_i_a_l_7, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_463, out_CompleteCurrent_1, out_vslice_dummy_var_292, out_vslice_dummy_var_295, out_vslice_dummy_var_296 := SerialGetNextWrite_loop_L8(out_s_p_e_c_i_a_l_5, out_sdv_402, out_Irp_9, out_Tmp_461, out_OldIrql_5, out_sdv_405, out_OldIrql_6, out_sdv_407, in_CompleteCurrent_2, out_s_p_e_c_i_a_l_6, out_sdv_409, out_sdv_410, out_sdv_411, out_s_p_e_c_i_a_l_7, in_delta, out_Xc_1, out_s_p_e_c_i_a_l_8, out_Tmp_463, in_CurrentOpIrp_1, in_QueueToProcess_1, in_NewIrp_2, out_CompleteCurrent_1, in_Extension_11, out_vslice_dummy_var_292, out_vslice_dummy_var_295, out_vslice_dummy_var_296);
    return;

  anon17_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_407)] != 4;
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    call {:si_unique_call 2461} out_sdv_409 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[in_CurrentOpIrp_1]);
    assume {:nonnull} out_sdv_409 != 0;
    assume out_sdv_409 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_409)] == 14;
    call {:si_unique_call 2467} out_Tmp_461 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_461 != 0;
    assume out_Tmp_461 > 0;
    Mem_T.INT4[out_Tmp_461] := out_OldIrql_5;
    call {:si_unique_call 2468} IoAcquireCancelSpinLock(out_Tmp_461);
    assume {:nonnull} out_Tmp_461 != 0;
    assume out_Tmp_461 > 0;
    out_OldIrql_5 := Mem_T.INT4[out_Tmp_461];
    assume {:nonnull} in_CurrentOpIrp_1 != 0;
    assume in_CurrentOpIrp_1 > 0;
    out_Irp_9 := Mem_T.P_IRP[in_CurrentOpIrp_1];
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    havoc out_Xc_1;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] != 0;
    goto L64;

  L64:
    call {:si_unique_call 2460} IoReleaseCancelSpinLock(out_OldIrql_5);
    goto L26;

  anon24_Then:
    assume {:partition} Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] == 0;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Irp_9)] != 0;
    assume {:nonnull} out_Irp_9 != 0;
    assume out_Irp_9 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Irp_9))] := -1073741536;
    goto L64;

  anon21_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Irp_9)] == 0;
    call {:si_unique_call 2464} out_vslice_dummy_var_292 := sdv_IoSetCancelRoutine(out_Irp_9, li2bplFunctionConstant218);
    out_s_p_e_c_i_a_l_6 := 2;
    call {:si_unique_call 2465} out_sdv_405 := sdv_IoGetCurrentIrpStackLocation(out_Irp_9);
    assume {:nonnull} out_sdv_405 != 0;
    assume out_sdv_405 > 0;
    out_s_p_e_c_i_a_l_5 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_405)));
    assume {:nonnull} out_s_p_e_c_i_a_l_5 != 0;
    assume out_s_p_e_c_i_a_l_5 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_5] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_5], out_s_p_e_c_i_a_l_6);
    out_CompleteCurrent_1 := 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_11)] := out_Irp_9;
    call {:si_unique_call 2466} out_vslice_dummy_var_295 := KeSynchronizeExecution(0, li2bplFunctionConstant219, 0);
    assume {:nonnull} out_Xc_1 != 0;
    assume out_Xc_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} out_Xc_1 != 0;
    assume out_Xc_1 > 0;
    assume {:nonnull} in_delta != 0;
    assume in_delta > 0;
    assume {:nonnull} in_Extension_11 != 0;
    assume in_Extension_11 > 0;
    call {:si_unique_call 2462} out_vslice_dummy_var_296 := SerialSetTimer(XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_11), in_delta, XoffCountTimeoutDpc__SERIAL_DEVICE_EXTENSION(in_Extension_11), in_Extension_11);
    out_s_p_e_c_i_a_l_8 := 4;
    call {:si_unique_call 2463} out_sdv_402 := sdv_IoGetCurrentIrpStackLocation(out_Irp_9);
    assume {:nonnull} out_sdv_402 != 0;
    assume out_sdv_402 > 0;
    out_s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_402)));
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_7] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_7], out_s_p_e_c_i_a_l_8);
    goto L64;

  anon22_Then:
    goto L64;

  anon20_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_409)] != 14;
    goto L26;
}



procedure {:LoopProcedure} SerialGetNextWrite_loop_L8(in_s_p_e_c_i_a_l_5: int, in_sdv_402: int, in_Irp_9: int, in_Tmp_461: int, in_OldIrql_5: int, in_sdv_405: int, in_OldIrql_6: int, in_sdv_407: int, in_CompleteCurrent_2: int, in_s_p_e_c_i_a_l_6: int, in_sdv_409: int, in_sdv_410: int, in_sdv_411: int, in_s_p_e_c_i_a_l_7: int, in_delta: int, in_Xc_1: int, in_s_p_e_c_i_a_l_8: int, in_Tmp_463: int, in_CurrentOpIrp_1: int, in_QueueToProcess_1: int, in_NewIrp_2: int, in_CompleteCurrent_1: int, in_Extension_11: int, in_vslice_dummy_var_292: int, in_vslice_dummy_var_295: int, in_vslice_dummy_var_296: int) returns (out_s_p_e_c_i_a_l_5: int, out_sdv_402: int, out_Irp_9: int, out_Tmp_461: int, out_OldIrql_5: int, out_sdv_405: int, out_OldIrql_6: int, out_sdv_407: int, out_s_p_e_c_i_a_l_6: int, out_sdv_409: int, out_sdv_410: int, out_sdv_411: int, out_s_p_e_c_i_a_l_7: int, out_Xc_1: int, out_s_p_e_c_i_a_l_8: int, out_Tmp_463: int, out_CompleteCurrent_1: int, out_vslice_dummy_var_292: int, out_vslice_dummy_var_295: int, out_vslice_dummy_var_296: int);
  modifies Mem_T.INT4, alloc, Mem_T.P_IRP, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_s_p_e_c_i_a_l_6 == 2 || out_s_p_e_c_i_a_l_6 == in_s_p_e_c_i_a_l_6;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_8 == 4 || out_s_p_e_c_i_a_l_8 == in_s_p_e_c_i_a_l_8;
  free ensures {:va_keep} out_CompleteCurrent_1 == in_CompleteCurrent_1 || out_CompleteCurrent_1 == in_CompleteCurrent_2;
  free ensures {:va_keep} out_vslice_dummy_var_295 == 1 || out_vslice_dummy_var_295 == 0 || out_vslice_dummy_var_295 == in_vslice_dummy_var_295;
  free ensures {:va_keep} out_vslice_dummy_var_296 == 1 || out_vslice_dummy_var_296 == 0 || out_vslice_dummy_var_296 == in_vslice_dummy_var_296;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_PDevExt_8: int) returns (out_i_1: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int)
{

  entry:
    out_i_1, out_Tmp_692, out_Tmp_694, out_Tmp_695 := in_i_1, in_Tmp_692, in_Tmp_694, in_Tmp_695;
    goto L42, exit;

  exit:
    return;

  L42:
    assume {:CounterLoop 16} {:Counter "i_1"} true;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} 16 > out_i_1;
    out_Tmp_694 := out_i_1;
    assume {:nonnull} in_PDevExt_8 != 0;
    assume in_PDevExt_8 > 0;
    havoc out_Tmp_692;
    assume {:nonnull} out_Tmp_692 != 0;
    assume out_Tmp_692 > 0;
    havoc out_Tmp_695;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    goto anon66_Else;

  anon66_Else:
    out_i_1 := out_i_1 + 1;
    goto anon66_Else_dummy;

  anon66_Else_dummy:
    havoc out_i_1;
    return;
}



procedure {:LoopProcedure} SerialReleaseResources_loop_L42(in_i_1: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_PDevExt_8: int) returns (out_i_1: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int);
  free ensures {:va_keep} out_Tmp_694 == in_i_1 || out_Tmp_694 == in_Tmp_694;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialFindInitController_loop_L182(in_pCurDevObj: int, in_Tmp_701: int, in_sdv_570: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_583: int, in_PConfig_1: int) returns (out_pCurDevObj: int, out_Tmp_701: int, out_sdv_570: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_583: int)
{
  var vslice_dummy_var_2722: int;
  var vslice_dummy_var_2723: int;
  var vslice_dummy_var_2724: int;
  var vslice_dummy_var_2725: int;

  entry:
    out_pCurDevObj, out_Tmp_701, out_sdv_570, out_pExtension, out_oldIrql_4, out_sdv_583 := in_pCurDevObj, in_Tmp_701, in_sdv_570, in_pExtension, in_oldIrql_4, in_sdv_583;
    goto L182, exit;

  exit:
    return;

  L182:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2722;
    havoc vslice_dummy_var_2723;
    havoc vslice_dummy_var_2724;
    havoc vslice_dummy_var_2725;
    call {:si_unique_call 2474} out_sdv_583 := SerialMemCompare(vslice_dummy_var_2722, vslice_dummy_var_2723, vslice_dummy_var_2724, vslice_dummy_var_2725);
    goto anon101_Then;

  anon101_Then:
    assume {:partition} out_sdv_583 != 0;
    goto L183;

  L183:
    call {:si_unique_call 2472} out_Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    Mem_T.INT4[out_Tmp_701] := out_oldIrql_4;
    call {:si_unique_call 2473} sdv_KeAcquireSpinLock(0, out_Tmp_701);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_701];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 2471} out_sdv_570 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_570;
    goto L216;

  L216:
    call {:si_unique_call 2470} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon104_Else;

  anon104_Else:
    goto anon105_Else;

  anon105_Else:
    goto anon105_Else_dummy;

  anon105_Else_dummy:
    call {:si_unique_call 2475} {:si_old_unique_call 1} out_pCurDevObj, out_Tmp_701, out_sdv_570, out_pExtension, out_oldIrql_4, out_sdv_583 := SerialFindInitController_loop_L182(out_pCurDevObj, out_Tmp_701, out_sdv_570, out_pExtension, out_oldIrql_4, out_sdv_583, in_PConfig_1);
    return;

  anon113_Then:
    goto L216;

  anon100_Then:
    goto L183;

  anon99_Then:
    goto L183;

  anon98_Then:
    goto L183;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L182(in_pCurDevObj: int, in_Tmp_701: int, in_sdv_570: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_583: int, in_PConfig_1: int) returns (out_pCurDevObj: int, out_Tmp_701: int, out_sdv_570: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_583: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_570 == in_sdv_570;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} out_sdv_583 == 0 || out_sdv_583 == 2 || out_sdv_583 == 1 || out_sdv_583 == in_sdv_583;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialFindInitController_loop_L246(in_sdv_561: int, in_pCurDevObj: int, in_Tmp_701: int, in_pExtension: int, in_oldIrql_4: int, in_PConfig_1: int) returns (out_sdv_561: int, out_pCurDevObj: int, out_Tmp_701: int, out_pExtension: int, out_oldIrql_4: int)
{

  entry:
    out_sdv_561, out_pCurDevObj, out_Tmp_701, out_pExtension, out_oldIrql_4 := in_sdv_561, in_pCurDevObj, in_Tmp_701, in_pExtension, in_oldIrql_4;
    goto L246, exit;

  exit:
    return;

  L246:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon110_Then;

  anon110_Then:
    goto L247;

  L247:
    call {:si_unique_call 2478} out_Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    Mem_T.INT4[out_Tmp_701] := out_oldIrql_4;
    call {:si_unique_call 2479} sdv_KeAcquireSpinLock(0, out_Tmp_701);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_701];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    call {:si_unique_call 2477} out_sdv_561 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_561;
    goto L264;

  L264:
    call {:si_unique_call 2476} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon111_Else;

  anon111_Else:
    goto anon112_Else;

  anon112_Else:
    goto anon112_Else_dummy;

  anon112_Else_dummy:
    havoc out_pCurDevObj;
    return;

  anon114_Then:
    goto L264;

  anon109_Then:
    goto L247;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L246(in_sdv_561: int, in_pCurDevObj: int, in_Tmp_701: int, in_pExtension: int, in_oldIrql_4: int, in_PConfig_1: int) returns (out_sdv_561: int, out_pCurDevObj: int, out_Tmp_701: int, out_pExtension: int, out_oldIrql_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_561 == in_sdv_561;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialFindInitController_loop_L78(in_sdv_553: int, in_sdv_554: int, in_sdv_559: int, in_sdv_560: int, in_pCurDevObj: int, in_Tmp_701: int, in_Tmp_708: int, in_sdv_563: int, in_Tmp_710: int, in_sdv_566: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_577: int, in_sdv_580: int, in_Tmp_720: int, in_Tmp_721: int, in_PConfig_1: int, in_vslice_dummy_var_394: int) returns (out_sdv_553: int, out_sdv_554: int, out_sdv_559: int, out_sdv_560: int, out_pCurDevObj: int, out_Tmp_701: int, out_Tmp_708: int, out_sdv_563: int, out_sdv_566: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_577: int, out_sdv_580: int, out_vslice_dummy_var_394: int)
{
  var vslice_dummy_var_2726: int;
  var vslice_dummy_var_2727: int;
  var vslice_dummy_var_2728: int;
  var vslice_dummy_var_2729: int;
  var vslice_dummy_var_2730: int;
  var vslice_dummy_var_2731: int;
  var vslice_dummy_var_2732: int;
  var vslice_dummy_var_2733: int;
  var vslice_dummy_var_2734: int;
  var vslice_dummy_var_2735: int;
  var vslice_dummy_var_2736: int;
  var vslice_dummy_var_2737: int;
  var vslice_dummy_var_2738: int;
  var vslice_dummy_var_2739: int;
  var vslice_dummy_var_2740: int;
  var vslice_dummy_var_2741: int;
  var vslice_dummy_var_2742: int;
  var vslice_dummy_var_2743: int;
  var vslice_dummy_var_2744: int;
  var vslice_dummy_var_2745: int;
  var vslice_dummy_var_2746: int;
  var vslice_dummy_var_2747: int;

  entry:
    out_sdv_553, out_sdv_554, out_sdv_559, out_sdv_560, out_pCurDevObj, out_Tmp_701, out_Tmp_708, out_sdv_563, out_sdv_566, out_pExtension, out_oldIrql_4, out_sdv_577, out_sdv_580, out_vslice_dummy_var_394 := in_sdv_553, in_sdv_554, in_sdv_559, in_sdv_560, in_pCurDevObj, in_Tmp_701, in_Tmp_708, in_sdv_563, in_sdv_566, in_pExtension, in_oldIrql_4, in_sdv_577, in_sdv_580, in_vslice_dummy_var_394;
    goto L78, exit;

  exit:
    return;

  L78:
    goto anon82_Else;

  anon82_Else:
    goto anon83_Else;

  anon83_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    out_Tmp_708 := strConst__li2bpl176;
    call {:si_unique_call 2486} out_vslice_dummy_var_394 := SerialDbgPrintEx(4, out_Tmp_708);
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2730;
    havoc vslice_dummy_var_2731;
    havoc vslice_dummy_var_2732;
    havoc vslice_dummy_var_2733;
    call {:si_unique_call 2487} out_sdv_553 := SerialMemCompare(vslice_dummy_var_2730, vslice_dummy_var_2731, vslice_dummy_var_2732, vslice_dummy_var_2733);
    goto anon87_Then;

  anon87_Then:
    assume {:partition} out_sdv_553 == 2;
    assume {:nonnull} in_Tmp_721 != 0;
    assume in_Tmp_721 > 0;
    assume {:nonnull} in_Tmp_721 != 0;
    assume in_Tmp_721 > 0;
    assume {:nonnull} in_Tmp_721 != 0;
    assume in_Tmp_721 > 0;
    assume {:nonnull} in_Tmp_721 != 0;
    assume in_Tmp_721 > 0;
    assume {:nonnull} in_Tmp_721 != 0;
    assume in_Tmp_721 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_2728;
    havoc vslice_dummy_var_2729;
    call {:si_unique_call 2485} out_sdv_577 := SerialMemCompare(vslice_dummy_var_2728, vslice_dummy_var_2729, in_Tmp_721, 0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_sdv_577 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2736;
    havoc vslice_dummy_var_2737;
    havoc vslice_dummy_var_2738;
    havoc vslice_dummy_var_2739;
    call {:si_unique_call 2489} out_sdv_580 := SerialMemCompare(vslice_dummy_var_2736, vslice_dummy_var_2737, vslice_dummy_var_2738, vslice_dummy_var_2739);
    goto anon89_Then;

  anon89_Then:
    assume {:partition} out_sdv_580 == 2;
    assume {:nonnull} in_Tmp_720 != 0;
    assume in_Tmp_720 > 0;
    assume {:nonnull} in_Tmp_720 != 0;
    assume in_Tmp_720 > 0;
    assume {:nonnull} in_Tmp_720 != 0;
    assume in_Tmp_720 > 0;
    assume {:nonnull} in_Tmp_720 != 0;
    assume in_Tmp_720 > 0;
    assume {:nonnull} in_Tmp_720 != 0;
    assume in_Tmp_720 > 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    havoc vslice_dummy_var_2734;
    havoc vslice_dummy_var_2735;
    call {:si_unique_call 2488} out_sdv_554 := SerialMemCompare(vslice_dummy_var_2734, vslice_dummy_var_2735, in_Tmp_720, 0);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_sdv_554 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2740;
    havoc vslice_dummy_var_2741;
    havoc vslice_dummy_var_2742;
    havoc vslice_dummy_var_2743;
    call {:si_unique_call 2490} out_sdv_563 := SerialMemCompare(vslice_dummy_var_2740, vslice_dummy_var_2741, vslice_dummy_var_2742, vslice_dummy_var_2743);
    goto anon91_Then;

  anon91_Then:
    assume {:partition} out_sdv_563 != 1;
    goto L105;

  L105:
    assume {:nonnull} in_Tmp_710 != 0;
    assume in_Tmp_710 > 0;
    assume {:nonnull} in_Tmp_710 != 0;
    assume in_Tmp_710 > 0;
    assume {:nonnull} in_Tmp_710 != 0;
    assume in_Tmp_710 > 0;
    assume {:nonnull} in_Tmp_710 != 0;
    assume in_Tmp_710 > 0;
    assume {:nonnull} in_Tmp_710 != 0;
    assume in_Tmp_710 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2726;
    havoc vslice_dummy_var_2727;
    call {:si_unique_call 2484} out_sdv_566 := SerialMemCompare(vslice_dummy_var_2726, vslice_dummy_var_2727, in_Tmp_710, 0);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} out_sdv_566 != 0;
    assume {:nonnull} in_PConfig_1 != 0;
    assume in_PConfig_1 > 0;
    assume {:nonnull} out_pExtension != 0;
    assume out_pExtension > 0;
    havoc vslice_dummy_var_2744;
    havoc vslice_dummy_var_2745;
    havoc vslice_dummy_var_2746;
    havoc vslice_dummy_var_2747;
    call {:si_unique_call 2491} out_sdv_559 := SerialMemCompare(vslice_dummy_var_2744, vslice_dummy_var_2745, vslice_dummy_var_2746, vslice_dummy_var_2747);
    goto anon93_Then;

  anon93_Then:
    assume {:partition} out_sdv_559 != 1;
    goto L84;

  L84:
    call {:si_unique_call 2481} out_Tmp_701 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    Mem_T.INT4[out_Tmp_701] := out_oldIrql_4;
    call {:si_unique_call 2482} sdv_KeAcquireSpinLock(0, out_Tmp_701);
    assume {:nonnull} out_Tmp_701 != 0;
    assume out_Tmp_701 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_701];
    assume {:nonnull} out_pCurDevObj != 0;
    assume out_pCurDevObj > 0;
    havoc out_pCurDevObj;
    call {:si_unique_call 2483} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    call {:si_unique_call 2480} out_sdv_560 := sdv_containing_record(out_pCurDevObj, 32);
    out_pExtension := out_sdv_560;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2492} {:si_old_unique_call 1} out_sdv_553, out_sdv_554, out_sdv_559, out_sdv_560, out_pCurDevObj, out_Tmp_701, out_Tmp_708, out_sdv_563, out_sdv_566, out_pExtension, out_oldIrql_4, out_sdv_577, out_sdv_580, out_vslice_dummy_var_394 := SerialFindInitController_loop_L78(out_sdv_553, out_sdv_554, out_sdv_559, out_sdv_560, out_pCurDevObj, out_Tmp_701, out_Tmp_708, out_sdv_563, in_Tmp_710, out_sdv_566, out_pExtension, out_oldIrql_4, out_sdv_577, out_sdv_580, in_Tmp_720, in_Tmp_721, in_PConfig_1, out_vslice_dummy_var_394);
    return;

  anon94_Then:
    goto anon94_Then_dummy;

  anon94_Then_dummy:
    goto L_BAF_0;

  anon92_Then:
    assume {:partition} out_sdv_566 == 0;
    goto L84;

  anon90_Then:
    assume {:partition} out_sdv_554 == 0;
    goto L105;

  anon88_Then:
    assume {:partition} out_sdv_577 == 0;
    goto L105;

  anon86_Then:
    goto L84;

  anon85_Then:
    goto L84;

  anon84_Then:
    goto L84;
}



procedure {:LoopProcedure} SerialFindInitController_loop_L78(in_sdv_553: int, in_sdv_554: int, in_sdv_559: int, in_sdv_560: int, in_pCurDevObj: int, in_Tmp_701: int, in_Tmp_708: int, in_sdv_563: int, in_Tmp_710: int, in_sdv_566: int, in_pExtension: int, in_oldIrql_4: int, in_sdv_577: int, in_sdv_580: int, in_Tmp_720: int, in_Tmp_721: int, in_PConfig_1: int, in_vslice_dummy_var_394: int) returns (out_sdv_553: int, out_sdv_554: int, out_sdv_559: int, out_sdv_560: int, out_pCurDevObj: int, out_Tmp_701: int, out_Tmp_708: int, out_sdv_563: int, out_sdv_566: int, out_pExtension: int, out_oldIrql_4: int, out_sdv_577: int, out_sdv_580: int, out_vslice_dummy_var_394: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_553 == 0 || out_sdv_553 == 2 || out_sdv_553 == 1 || out_sdv_553 == in_sdv_553;
  free ensures {:va_keep} out_sdv_554 == 0 || out_sdv_554 == 2 || out_sdv_554 == 1 || out_sdv_554 == in_sdv_554;
  free ensures {:va_keep} out_sdv_559 == 0 || out_sdv_559 == 2 || out_sdv_559 == 1 || out_sdv_559 == in_sdv_559;
  free ensures {:va_keep} out_sdv_560 == in_sdv_560;
  free ensures {:va_keep} out_sdv_563 == 0 || out_sdv_563 == 2 || out_sdv_563 == 1 || out_sdv_563 == in_sdv_563;
  free ensures {:va_keep} out_sdv_566 == 0 || out_sdv_566 == 2 || out_sdv_566 == 1 || out_sdv_566 == in_sdv_566;
  free ensures {:va_keep} out_pExtension == in_pExtension;
  free ensures {:va_keep} out_sdv_577 == 0 || out_sdv_577 == 2 || out_sdv_577 == 1 || out_sdv_577 == in_sdv_577;
  free ensures {:va_keep} out_sdv_580 == 0 || out_sdv_580 == 2 || out_sdv_580 == 1 || out_sdv_580 == in_sdv_580;
  free ensures {:va_keep} out_vslice_dummy_var_394 == 0 || out_vslice_dummy_var_394 == in_vslice_dummy_var_394;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialStartRead_loop_L23(in_Tmp_807: int, in_localStatus: int, in_sdv_653: int, in_Tmp_808: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp: int, in_Tmp_810: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_659: int, in_Tmp_811: int, in_oldIrql_6: int, in_sdv_661: int, in_constantVal: int, in_Tmp_813: int, in_Tmp_814: int, in_controlIrql: int, in_Tmp_816: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_sdv_668: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_423: int, in_vslice_dummy_var_424: int, in_vslice_dummy_var_425: int, in_vslice_dummy_var_428: int) returns (out_Tmp_807: int, out_localStatus: int, out_sdv_653: int, out_Tmp_808: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_Tmp_810: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_659: int, out_Tmp_811: int, out_oldIrql_6: int, out_sdv_661: int, out_constantVal: int, out_Tmp_813: int, out_Tmp_814: int, out_controlIrql: int, out_Tmp_816: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_sdv_668: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_423: int, out_vslice_dummy_var_424: int, out_vslice_dummy_var_425: int, out_vslice_dummy_var_428: int)
{

  entry:
    out_Tmp_807, out_localStatus, out_sdv_653, out_Tmp_808, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_Tmp_810, out_multiplierVal, out_crunchDownToOne, out_sdv_659, out_Tmp_811, out_oldIrql_6, out_sdv_661, out_constantVal, out_Tmp_813, out_Tmp_814, out_controlIrql, out_Tmp_816, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_668, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_428 := in_Tmp_807, in_localStatus, in_sdv_653, in_Tmp_808, in_os2ssreturn, in_setFirstStatus, in_useTotalTimer, in_Tmp_810, in_multiplierVal, in_crunchDownToOne, in_sdv_659, in_Tmp_811, in_oldIrql_6, in_sdv_661, in_constantVal, in_Tmp_813, in_Tmp_814, in_controlIrql, in_Tmp_816, in_returnWithWhatsPresent, in_useIntervalTimer, in_sdv_668, in_firstStatus, in_boogieTmp, in_vslice_dummy_var_423, in_vslice_dummy_var_424, in_vslice_dummy_var_425, in_vslice_dummy_var_428;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2493} out_sdv_659 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)]);
    assume {:nonnull} out_sdv_659 != 0;
    assume out_sdv_659 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_659)] != 3;
    call {:si_unique_call 2515} out_localStatus := SerialResizeBuffer(in_Extension_15);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  L37:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2494} SerialGetNextIrp(CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15), ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_newIrp, 1, in_Extension_15);
    goto anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_newIrp != 0;
    assume in_newIrp > 0;
    goto anon63_Then;

  anon63_Then:
    assume {:partition} Mem_T.P_IRP[in_newIrp] != 0;
    goto anon63_Then_dummy;

  anon63_Then_dummy:
    call {:si_unique_call 2516} {:si_old_unique_call 1} out_Tmp_807, out_localStatus, out_sdv_653, out_Tmp_808, out_os2ssreturn, out_setFirstStatus, out_useTotalTimer, out_Tmp_810, out_multiplierVal, out_crunchDownToOne, out_sdv_659, out_Tmp_811, out_oldIrql_6, out_sdv_661, out_constantVal, out_Tmp_813, out_Tmp_814, out_controlIrql, out_Tmp_816, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_668, out_firstStatus, out_boogieTmp, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_428 := SerialStartRead_loop_L23(out_Tmp_807, out_localStatus, out_sdv_653, out_Tmp_808, in_totalTime, out_os2ssreturn, in_updateChar, in_timeoutsForIrp, out_setFirstStatus, out_useTotalTimer, in_newIrp, out_Tmp_810, out_multiplierVal, out_crunchDownToOne, out_sdv_659, out_Tmp_811, out_oldIrql_6, out_sdv_661, out_constantVal, out_Tmp_813, out_Tmp_814, out_controlIrql, out_Tmp_816, out_returnWithWhatsPresent, out_useIntervalTimer, out_sdv_668, out_firstStatus, in_Extension_15, out_boogieTmp, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_428);
    return;

  anon62_Then:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := out_localStatus;
    out_setFirstStatus := 1;
    goto L37;

  anon61_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_sdv_659)] == 3;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2505} out_sdv_661 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)]);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} out_sdv_661 != 0;
    assume out_sdv_661 > 0;
    out_useTotalTimer := 0;
    out_returnWithWhatsPresent := 0;
    out_os2ssreturn := 0;
    out_crunchDownToOne := 0;
    out_useIntervalTimer := 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2506} out_vslice_dummy_var_428 := SerialCancelTimer(ReadRequestTotalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2507} out_vslice_dummy_var_423 := SerialCancelTimer(ReadRequestIntervalTimer__SERIAL_DEVICE_EXTENSION(in_Extension_15), in_Extension_15);
    call {:si_unique_call 2508} out_Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    Mem_T.INT4[out_Tmp_807] := out_controlIrql;
    call {:si_unique_call 2509} sdv_KeAcquireSpinLock(0, out_Tmp_807);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_807];
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    call {:si_unique_call 2510} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    out_useIntervalTimer := 1;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  L66:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L76;

  L76:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  L83:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} out_useTotalTimer != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_totalTime != 0;
    assume in_totalTime > 0;
    goto L84;

  L84:
    call {:si_unique_call 2502} out_Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    Mem_T.INT4[out_Tmp_807] := out_controlIrql;
    call {:si_unique_call 2503} sdv_KeAcquireSpinLock(0, out_Tmp_807);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    out_controlIrql := Mem_T.INT4[out_Tmp_807];
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    call {:si_unique_call 2504} out_boogieTmp := SerialGetCharsFromIntBuffer(in_Extension_15);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_returnWithWhatsPresent != 0;
    goto L94;

  L94:
    call {:si_unique_call 2513} out_vslice_dummy_var_424 := KeSynchronizeExecution(0, li2bplFunctionConstant137, 0);
    call {:si_unique_call 2514} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_810 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_810 != 0;
    assume out_Tmp_810 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_810))] := 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon86_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon74_Then:
    assume {:partition} out_returnWithWhatsPresent == 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} out_os2ssreturn != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_813 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_813 != 0;
    assume out_Tmp_813 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L105;

  L105:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2499} out_sdv_668 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)]);
    assume {:nonnull} out_sdv_668 != 0;
    assume out_sdv_668 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_668)))] := 0;
    call {:si_unique_call 2500} out_Tmp_807 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    Mem_T.INT4[out_Tmp_807] := out_oldIrql_6;
    call {:si_unique_call 2501} IoAcquireCancelSpinLock(out_Tmp_807);
    assume {:nonnull} out_Tmp_807 != 0;
    assume out_Tmp_807 > 0;
    out_oldIrql_6 := Mem_T.INT4[out_Tmp_807];
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_811 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_811 != 0;
    assume out_Tmp_811 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_811)] != 0;
    call {:si_unique_call 2511} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2512} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_808 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_808 != 0;
    assume out_Tmp_808 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_808))] := -1073741536;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_816 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_816 != 0;
    assume out_Tmp_816 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := -1073741536;
    out_setFirstStatus := 1;
    goto L37;

  anon89_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon88_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_811)] == 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_crunchDownToOne != 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    call {:si_unique_call 2498} out_sdv_653 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)]);
    assume {:nonnull} out_sdv_653 != 0;
    assume out_sdv_653 > 0;
    goto L126;

  L126:
    call {:si_unique_call 2497} out_vslice_dummy_var_425 := KeSynchronizeExecution(0, li2bplFunctionConstant138, 0);
    assume {:nonnull} in_updateChar != 0;
    assume in_updateChar > 0;
    goto anon78_Else;

  anon78_Else:
    call {:si_unique_call 2495} IoReleaseCancelSpinLock(out_oldIrql_6);
    call {:si_unique_call 2496} sdv_KeReleaseSpinLock(0, out_controlIrql);
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    out_Tmp_814 := Mem_T.P_IRP[CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_15)];
    assume {:nonnull} out_Tmp_814 != 0;
    assume out_Tmp_814 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_814))] := 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_setFirstStatus == 0;
    out_firstStatus := 0;
    out_setFirstStatus := 1;
    goto L37;

  anon90_Then:
    assume {:partition} out_setFirstStatus != 0;
    goto L37;

  anon77_Then:
    assume {:partition} out_crunchDownToOne == 0;
    goto L126;

  anon87_Then:
    goto L94;

  anon76_Then:
    assume {:partition} out_os2ssreturn == 0;
    goto L105;

  anon75_Then:
    goto L94;

  anon73_Then:
    assume {:partition} out_useTotalTimer == 0;
    goto L84;

  anon72_Then:
    goto L77;

  L77:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    out_useTotalTimer := 1;
    out_os2ssreturn := 1;
    out_crunchDownToOne := 1;
    out_multiplierVal := 0;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon82_Then:
    goto L83;

  anon71_Then:
    goto L83;

  anon70_Then:
    goto L77;

  anon68_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    out_returnWithWhatsPresent := 1;
    goto L83;

  anon69_Then:
    goto L76;

  anon65_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L192;

  L192:
    out_useTotalTimer := 1;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_multiplierVal;
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    havoc out_constantVal;
    goto L83;

  anon67_Then:
    assume {:nonnull} in_timeoutsForIrp != 0;
    assume in_timeoutsForIrp > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto L192;

  anon83_Then:
    goto L83;

  anon85_Then:
    assume {:nonnull} in_Extension_15 != 0;
    assume in_Extension_15 > 0;
    goto L66;

  anon66_Then:
    goto L66;

  anon64_Then:
    goto L66;
}



procedure {:LoopProcedure} SerialStartRead_loop_L23(in_Tmp_807: int, in_localStatus: int, in_sdv_653: int, in_Tmp_808: int, in_totalTime: int, in_os2ssreturn: int, in_updateChar: int, in_timeoutsForIrp: int, in_setFirstStatus: int, in_useTotalTimer: int, in_newIrp: int, in_Tmp_810: int, in_multiplierVal: int, in_crunchDownToOne: int, in_sdv_659: int, in_Tmp_811: int, in_oldIrql_6: int, in_sdv_661: int, in_constantVal: int, in_Tmp_813: int, in_Tmp_814: int, in_controlIrql: int, in_Tmp_816: int, in_returnWithWhatsPresent: int, in_useIntervalTimer: int, in_sdv_668: int, in_firstStatus: int, in_Extension_15: int, in_boogieTmp: int, in_vslice_dummy_var_423: int, in_vslice_dummy_var_424: int, in_vslice_dummy_var_425: int, in_vslice_dummy_var_428: int) returns (out_Tmp_807: int, out_localStatus: int, out_sdv_653: int, out_Tmp_808: int, out_os2ssreturn: int, out_setFirstStatus: int, out_useTotalTimer: int, out_Tmp_810: int, out_multiplierVal: int, out_crunchDownToOne: int, out_sdv_659: int, out_Tmp_811: int, out_oldIrql_6: int, out_sdv_661: int, out_constantVal: int, out_Tmp_813: int, out_Tmp_814: int, out_controlIrql: int, out_Tmp_816: int, out_returnWithWhatsPresent: int, out_useIntervalTimer: int, out_sdv_668: int, out_firstStatus: int, out_boogieTmp: int, out_vslice_dummy_var_423: int, out_vslice_dummy_var_424: int, out_vslice_dummy_var_425: int, out_vslice_dummy_var_428: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_localStatus == 0 || out_localStatus == in_localStatus;
  free ensures {:va_keep} out_os2ssreturn == 0 || out_os2ssreturn == 1 || out_os2ssreturn == in_os2ssreturn;
  free ensures {:va_keep} out_setFirstStatus == 1 || out_setFirstStatus == in_setFirstStatus;
  free ensures {:va_keep} out_useTotalTimer == 0 || out_useTotalTimer == 1 || out_useTotalTimer == in_useTotalTimer;
  free ensures {:va_keep} out_crunchDownToOne == 0 || out_crunchDownToOne == 1 || out_crunchDownToOne == in_crunchDownToOne;
  free ensures {:va_keep} out_returnWithWhatsPresent == 1 || out_returnWithWhatsPresent == 0 || out_returnWithWhatsPresent == in_returnWithWhatsPresent;
  free ensures {:va_keep} out_useIntervalTimer == 1 || out_useIntervalTimer == 0 || out_useIntervalTimer == in_useIntervalTimer;
  free ensures {:va_keep} out_firstStatus == 0 || out_firstStatus == -1073741536 || out_firstStatus == in_firstStatus;
  free ensures {:va_keep} out_vslice_dummy_var_423 == 1 || out_vslice_dummy_var_423 == 0 || out_vslice_dummy_var_423 == in_vslice_dummy_var_423;
  free ensures {:va_keep} out_vslice_dummy_var_424 == 1 || out_vslice_dummy_var_424 == 0 || out_vslice_dummy_var_424 == in_vslice_dummy_var_424;
  free ensures {:va_keep} out_vslice_dummy_var_425 == 1 || out_vslice_dummy_var_425 == 0 || out_vslice_dummy_var_425 == in_vslice_dummy_var_425;
  free ensures {:va_keep} out_vslice_dummy_var_428 == 1 || out_vslice_dummy_var_428 == 0 || out_vslice_dummy_var_428 == in_vslice_dummy_var_428;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialStartMask_loop_L11(in_Tmp_854: int, in_s_p_e_c_i_a_l_19: int, in_Tmp_855: int, in_FirstStatus_1: int, in_Tmp_856: int, in_SetFirstStatus_1: int, in_Tmp_857: int, in_Tmp_858: int, in_Tmp_859: int, in_Tmp_860: int, in_Tmp_861: int, in_Tmp_862: int, in_Tmp_863: int, in_IrpSp_3: int, in_Tmp_864: int, in_OldIrql_8: int, in_Tmp_865: int, in_NewIrp_4: int, in_s_p_e_c_i_a_l_20: int, in_Tmp_867: int, in_Tmp_868: int, in_sdv_704: int, in_Tmp_869: int, in_Tmp_870: int, in_sdv_707: int, in_Tmp_871: int, in_Tmp_872: int, in_Extension_20: int, in_vslice_dummy_var_447: int, in_vslice_dummy_var_449: int, in_vslice_dummy_var_450: int, in_vslice_dummy_var_451: int, in_vslice_dummy_var_452: int, in_vslice_dummy_var_453: int, in_vslice_dummy_var_454: int, in_vslice_dummy_var_455: int, in_vslice_dummy_var_456: int, in_vslice_dummy_var_457: int, in_vslice_dummy_var_458: int, in_vslice_dummy_var_459: int, in_vslice_dummy_var_460: int, in_vslice_dummy_var_461: int, in_vslice_dummy_var_462: int, in_vslice_dummy_var_463: int) returns (out_Tmp_854: int, out_s_p_e_c_i_a_l_19: int, out_Tmp_855: int, out_FirstStatus_1: int, out_Tmp_856: int, out_SetFirstStatus_1: int, out_Tmp_857: int, out_Tmp_858: int, out_Tmp_859: int, out_Tmp_860: int, out_Tmp_861: int, out_Tmp_862: int, out_Tmp_863: int, out_IrpSp_3: int, out_Tmp_864: int, out_OldIrql_8: int, out_Tmp_865: int, out_s_p_e_c_i_a_l_20: int, out_Tmp_867: int, out_Tmp_868: int, out_sdv_704: int, out_Tmp_869: int, out_Tmp_870: int, out_sdv_707: int, out_Tmp_871: int, out_Tmp_872: int, out_vslice_dummy_var_447: int, out_vslice_dummy_var_449: int, out_vslice_dummy_var_450: int, out_vslice_dummy_var_451: int, out_vslice_dummy_var_452: int, out_vslice_dummy_var_453: int, out_vslice_dummy_var_454: int, out_vslice_dummy_var_455: int, out_vslice_dummy_var_456: int, out_vslice_dummy_var_457: int, out_vslice_dummy_var_458: int, out_vslice_dummy_var_459: int, out_vslice_dummy_var_460: int, out_vslice_dummy_var_461: int, out_vslice_dummy_var_462: int, out_vslice_dummy_var_463: int)
{

  entry:
    out_Tmp_854, out_s_p_e_c_i_a_l_19, out_Tmp_855, out_FirstStatus_1, out_Tmp_856, out_SetFirstStatus_1, out_Tmp_857, out_Tmp_858, out_Tmp_859, out_Tmp_860, out_Tmp_861, out_Tmp_862, out_Tmp_863, out_IrpSp_3, out_Tmp_864, out_OldIrql_8, out_Tmp_865, out_s_p_e_c_i_a_l_20, out_Tmp_867, out_Tmp_868, out_sdv_704, out_Tmp_869, out_Tmp_870, out_sdv_707, out_Tmp_871, out_Tmp_872, out_vslice_dummy_var_447, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463 := in_Tmp_854, in_s_p_e_c_i_a_l_19, in_Tmp_855, in_FirstStatus_1, in_Tmp_856, in_SetFirstStatus_1, in_Tmp_857, in_Tmp_858, in_Tmp_859, in_Tmp_860, in_Tmp_861, in_Tmp_862, in_Tmp_863, in_IrpSp_3, in_Tmp_864, in_OldIrql_8, in_Tmp_865, in_s_p_e_c_i_a_l_20, in_Tmp_867, in_Tmp_868, in_sdv_704, in_Tmp_869, in_Tmp_870, in_sdv_707, in_Tmp_871, in_Tmp_872, in_vslice_dummy_var_447, in_vslice_dummy_var_449, in_vslice_dummy_var_450, in_vslice_dummy_var_451, in_vslice_dummy_var_452, in_vslice_dummy_var_453, in_vslice_dummy_var_454, in_vslice_dummy_var_455, in_vslice_dummy_var_456, in_vslice_dummy_var_457, in_vslice_dummy_var_458, in_vslice_dummy_var_459, in_vslice_dummy_var_460, in_vslice_dummy_var_461, in_vslice_dummy_var_462, in_vslice_dummy_var_463;
    goto L11, exit;

  exit:
    return;

  L11:
    out_Tmp_854 := strConst__li2bpl210;
    call {:si_unique_call 2517} out_vslice_dummy_var_449 := SerialDbgPrintEx(7, out_Tmp_854);
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2518} out_IrpSp_3 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)]);
    assume {:nonnull} out_IrpSp_3 != 0;
    assume out_IrpSp_3 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    out_Tmp_864 := strConst__li2bpl211;
    call {:si_unique_call 2542} out_vslice_dummy_var_450 := SerialDbgPrintEx(7, out_Tmp_864);
    call {:si_unique_call 2543} out_vslice_dummy_var_447 := KeSynchronizeExecution(0, li2bplFunctionConstant196, 0);
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    out_Tmp_870 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)];
    assume {:nonnull} out_Tmp_870 != 0;
    assume out_Tmp_870 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_870))] := 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L31;

  L31:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2540} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_20), in_NewIrp_4, 1, in_Extension_20);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_871 := strConst__li2bpl213;
    call {:si_unique_call 2519} out_vslice_dummy_var_451 := SerialDbgPrintEx(7, out_Tmp_871);
    goto L37;

  L37:
    assume {:nonnull} in_NewIrp_4 != 0;
    assume in_NewIrp_4 > 0;
    goto anon29_Then;

  anon29_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_4] != 0;
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    call {:si_unique_call 2544} {:si_old_unique_call 1} out_Tmp_854, out_s_p_e_c_i_a_l_19, out_Tmp_855, out_FirstStatus_1, out_Tmp_856, out_SetFirstStatus_1, out_Tmp_857, out_Tmp_858, out_Tmp_859, out_Tmp_860, out_Tmp_861, out_Tmp_862, out_Tmp_863, out_IrpSp_3, out_Tmp_864, out_OldIrql_8, out_Tmp_865, out_s_p_e_c_i_a_l_20, out_Tmp_867, out_Tmp_868, out_sdv_704, out_Tmp_869, out_Tmp_870, out_sdv_707, out_Tmp_871, out_Tmp_872, out_vslice_dummy_var_447, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463 := SerialStartMask_loop_L11(out_Tmp_854, out_s_p_e_c_i_a_l_19, out_Tmp_855, out_FirstStatus_1, out_Tmp_856, out_SetFirstStatus_1, out_Tmp_857, out_Tmp_858, out_Tmp_859, out_Tmp_860, out_Tmp_861, out_Tmp_862, out_Tmp_863, out_IrpSp_3, out_Tmp_864, out_OldIrql_8, out_Tmp_865, in_NewIrp_4, out_s_p_e_c_i_a_l_20, out_Tmp_867, out_Tmp_868, out_sdv_704, out_Tmp_869, out_Tmp_870, out_sdv_707, out_Tmp_871, out_Tmp_872, in_Extension_20, out_vslice_dummy_var_447, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463);
    return;

  anon32_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_862 := strConst__li2bpl212;
    call {:si_unique_call 2541} out_vslice_dummy_var_452 := SerialDbgPrintEx(7, out_Tmp_862);
    out_FirstStatus_1 := 0;
    out_SetFirstStatus_1 := 1;
    goto L31;

  anon27_Then:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)] == 0;
    call {:si_unique_call 2534} out_Tmp_860 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    Mem_T.INT4[out_Tmp_860] := out_OldIrql_8;
    call {:si_unique_call 2535} IoAcquireCancelSpinLock(out_Tmp_860);
    assume {:nonnull} out_Tmp_860 != 0;
    assume out_Tmp_860 > 0;
    out_OldIrql_8 := Mem_T.INT4[out_Tmp_860];
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    out_Tmp_859 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)];
    assume {:nonnull} out_Tmp_859 != 0;
    assume out_Tmp_859 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_859)] != 0;
    out_Tmp_856 := strConst__li2bpl216;
    call {:si_unique_call 2538} out_vslice_dummy_var_456 := SerialDbgPrintEx(7, out_Tmp_856);
    call {:si_unique_call 2539} IoReleaseCancelSpinLock(out_OldIrql_8);
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    out_Tmp_857 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)];
    assume {:nonnull} out_Tmp_857 != 0;
    assume out_Tmp_857 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_857))] := -1073741536;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L64;

  L64:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2536} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_20), in_NewIrp_4, 1, in_Extension_20);
    goto anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_872 := strConst__li2bpl213;
    call {:si_unique_call 2520} out_vslice_dummy_var_457 := SerialDbgPrintEx(7, out_Tmp_872);
    goto L37;

  anon37_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_865 := strConst__li2bpl212;
    call {:si_unique_call 2537} out_vslice_dummy_var_458 := SerialDbgPrintEx(7, out_Tmp_865);
    out_FirstStatus_1 := -1073741536;
    out_SetFirstStatus_1 := 1;
    goto L64;

  anon36_Then:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_859)] == 0;
    out_Tmp_867 := strConst__li2bpl215;
    call {:si_unique_call 2533} out_vslice_dummy_var_459 := SerialDbgPrintEx(7, out_Tmp_867);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L76;

  L76:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)] := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)];
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2526} out_sdv_704 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)]);
    assume {:nonnull} out_sdv_704 != 0;
    assume out_sdv_704 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_704)))] := 0;
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2527} out_vslice_dummy_var_460 := sdv_IoSetCancelRoutine(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)], li2bplFunctionConstant197);
    out_s_p_e_c_i_a_l_20 := 2;
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2528} out_sdv_707 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)]);
    assume {:nonnull} out_sdv_707 != 0;
    assume out_sdv_707 > 0;
    out_s_p_e_c_i_a_l_19 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_707)));
    assume {:nonnull} out_s_p_e_c_i_a_l_19 != 0;
    assume out_s_p_e_c_i_a_l_19 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_19] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_19], out_s_p_e_c_i_a_l_20);
    call {:si_unique_call 2529} out_vslice_dummy_var_461 := KeSynchronizeExecution(0, li2bplFunctionConstant198, 0);
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)] := 0;
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2530} SerialGetNextIrpLocked(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_20), in_NewIrp_4, 0, in_Extension_20, out_OldIrql_8);
    goto anon39_Else;

  anon39_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_855 := strConst__li2bpl213;
    call {:si_unique_call 2521} out_vslice_dummy_var_462 := SerialDbgPrintEx(7, out_Tmp_855);
    goto L37;

  anon31_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_869 := strConst__li2bpl212;
    call {:si_unique_call 2531} out_vslice_dummy_var_463 := SerialDbgPrintEx(7, out_Tmp_869);
    out_FirstStatus_1 := 259;
    out_SetFirstStatus_1 := 1;
    call {:si_unique_call 2532} sdv_IoMarkIrpPending(0);
    goto L76;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[CurrentWaitIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)] != 0;
    goto L41;

  L41:
    out_Tmp_868 := strConst__li2bpl214;
    call {:si_unique_call 2525} out_vslice_dummy_var_453 := SerialDbgPrintEx(7, out_Tmp_868);
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    out_Tmp_863 := Mem_T.P_IRP[CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20)];
    assume {:nonnull} out_Tmp_863 != 0;
    assume out_Tmp_863 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_863))] := -1073741811;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus_1 != 0;
    goto L112;

  L112:
    assume {:nonnull} in_Extension_20 != 0;
    assume in_Extension_20 > 0;
    call {:si_unique_call 2523} SerialGetNextIrp(CurrentMaskIrp__SERIAL_DEVICE_EXTENSION(in_Extension_20), MaskQueue__SERIAL_DEVICE_EXTENSION(in_Extension_20), in_NewIrp_4, 1, in_Extension_20);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    out_Tmp_858 := strConst__li2bpl213;
    call {:si_unique_call 2522} out_vslice_dummy_var_454 := SerialDbgPrintEx(7, out_Tmp_858);
    goto L37;

  anon34_Then:
    assume {:partition} out_SetFirstStatus_1 == 0;
    out_Tmp_861 := strConst__li2bpl212;
    call {:si_unique_call 2524} out_vslice_dummy_var_455 := SerialDbgPrintEx(7, out_Tmp_861);
    out_FirstStatus_1 := -1073741811;
    out_SetFirstStatus_1 := 1;
    goto L112;

  anon28_Then:
    goto L41;
}



procedure {:LoopProcedure} SerialStartMask_loop_L11(in_Tmp_854: int, in_s_p_e_c_i_a_l_19: int, in_Tmp_855: int, in_FirstStatus_1: int, in_Tmp_856: int, in_SetFirstStatus_1: int, in_Tmp_857: int, in_Tmp_858: int, in_Tmp_859: int, in_Tmp_860: int, in_Tmp_861: int, in_Tmp_862: int, in_Tmp_863: int, in_IrpSp_3: int, in_Tmp_864: int, in_OldIrql_8: int, in_Tmp_865: int, in_NewIrp_4: int, in_s_p_e_c_i_a_l_20: int, in_Tmp_867: int, in_Tmp_868: int, in_sdv_704: int, in_Tmp_869: int, in_Tmp_870: int, in_sdv_707: int, in_Tmp_871: int, in_Tmp_872: int, in_Extension_20: int, in_vslice_dummy_var_447: int, in_vslice_dummy_var_449: int, in_vslice_dummy_var_450: int, in_vslice_dummy_var_451: int, in_vslice_dummy_var_452: int, in_vslice_dummy_var_453: int, in_vslice_dummy_var_454: int, in_vslice_dummy_var_455: int, in_vslice_dummy_var_456: int, in_vslice_dummy_var_457: int, in_vslice_dummy_var_458: int, in_vslice_dummy_var_459: int, in_vslice_dummy_var_460: int, in_vslice_dummy_var_461: int, in_vslice_dummy_var_462: int, in_vslice_dummy_var_463: int) returns (out_Tmp_854: int, out_s_p_e_c_i_a_l_19: int, out_Tmp_855: int, out_FirstStatus_1: int, out_Tmp_856: int, out_SetFirstStatus_1: int, out_Tmp_857: int, out_Tmp_858: int, out_Tmp_859: int, out_Tmp_860: int, out_Tmp_861: int, out_Tmp_862: int, out_Tmp_863: int, out_IrpSp_3: int, out_Tmp_864: int, out_OldIrql_8: int, out_Tmp_865: int, out_s_p_e_c_i_a_l_20: int, out_Tmp_867: int, out_Tmp_868: int, out_sdv_704: int, out_Tmp_869: int, out_Tmp_870: int, out_sdv_707: int, out_Tmp_871: int, out_Tmp_872: int, out_vslice_dummy_var_447: int, out_vslice_dummy_var_449: int, out_vslice_dummy_var_450: int, out_vslice_dummy_var_451: int, out_vslice_dummy_var_452: int, out_vslice_dummy_var_453: int, out_vslice_dummy_var_454: int, out_vslice_dummy_var_455: int, out_vslice_dummy_var_456: int, out_vslice_dummy_var_457: int, out_vslice_dummy_var_458: int, out_vslice_dummy_var_459: int, out_vslice_dummy_var_460: int, out_vslice_dummy_var_461: int, out_vslice_dummy_var_462: int, out_vslice_dummy_var_463: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus_1 == 0 || out_FirstStatus_1 == -1073741536 || out_FirstStatus_1 == 259 || out_FirstStatus_1 == -1073741811 || out_FirstStatus_1 == in_FirstStatus_1;
  free ensures {:va_keep} out_SetFirstStatus_1 == 1 || out_SetFirstStatus_1 == in_SetFirstStatus_1;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_20 == 2 || out_s_p_e_c_i_a_l_20 == in_s_p_e_c_i_a_l_20;
  free ensures {:va_keep} out_vslice_dummy_var_447 == 1 || out_vslice_dummy_var_447 == 0 || out_vslice_dummy_var_447 == in_vslice_dummy_var_447;
  free ensures {:va_keep} out_vslice_dummy_var_449 == 0 || out_vslice_dummy_var_449 == in_vslice_dummy_var_449;
  free ensures {:va_keep} out_vslice_dummy_var_450 == 0 || out_vslice_dummy_var_450 == in_vslice_dummy_var_450;
  free ensures {:va_keep} out_vslice_dummy_var_451 == 0 || out_vslice_dummy_var_451 == in_vslice_dummy_var_451;
  free ensures {:va_keep} out_vslice_dummy_var_452 == 0 || out_vslice_dummy_var_452 == in_vslice_dummy_var_452;
  free ensures {:va_keep} out_vslice_dummy_var_453 == 0 || out_vslice_dummy_var_453 == in_vslice_dummy_var_453;
  free ensures {:va_keep} out_vslice_dummy_var_454 == 0 || out_vslice_dummy_var_454 == in_vslice_dummy_var_454;
  free ensures {:va_keep} out_vslice_dummy_var_455 == 0 || out_vslice_dummy_var_455 == in_vslice_dummy_var_455;
  free ensures {:va_keep} out_vslice_dummy_var_456 == 0 || out_vslice_dummy_var_456 == in_vslice_dummy_var_456;
  free ensures {:va_keep} out_vslice_dummy_var_457 == 0 || out_vslice_dummy_var_457 == in_vslice_dummy_var_457;
  free ensures {:va_keep} out_vslice_dummy_var_458 == 0 || out_vslice_dummy_var_458 == in_vslice_dummy_var_458;
  free ensures {:va_keep} out_vslice_dummy_var_459 == 0 || out_vslice_dummy_var_459 == in_vslice_dummy_var_459;
  free ensures {:va_keep} out_vslice_dummy_var_461 == 1 || out_vslice_dummy_var_461 == 0 || out_vslice_dummy_var_461 == in_vslice_dummy_var_461;
  free ensures {:va_keep} out_vslice_dummy_var_462 == 0 || out_vslice_dummy_var_462 == in_vslice_dummy_var_462;
  free ensures {:va_keep} out_vslice_dummy_var_463 == 0 || out_vslice_dummy_var_463 == in_vslice_dummy_var_463;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_pDevExt_16: int, in_sdv_732: int, in_Tmp_901: int, in_sdv_733: int, in_cancelRoutine_1: int, in_PDevObj_18: int, in_vslice_dummy_var_478: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_sdv_732: int, out_Tmp_901: int, out_sdv_733: int, out_cancelRoutine_1: int, out_vslice_dummy_var_478: int)
{
  var vslice_dummy_var_2748: int;

  entry:
    out_currentLastIrp, out_cancelIrql, out_sdv_732, out_Tmp_901, out_sdv_733, out_cancelRoutine_1, out_vslice_dummy_var_478 := in_currentLastIrp, in_cancelIrql, in_sdv_732, in_Tmp_901, in_sdv_733, in_cancelRoutine_1, in_vslice_dummy_var_478;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2545} out_sdv_732 := sdv_IsListEmpty(0);
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_sdv_732 == 0;
    assume {:nonnull} in_pDevExt_16 != 0;
    assume in_pDevExt_16 > 0;
    havoc vslice_dummy_var_2748;
    call {:si_unique_call 2549} out_sdv_733 := sdv_containing_record(vslice_dummy_var_2748, 88);
    out_currentLastIrp := out_sdv_733;
    call {:si_unique_call 2550} out_vslice_dummy_var_478 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    havoc out_cancelRoutine_1;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    assume {:nonnull} out_currentLastIrp != 0;
    assume out_currentLastIrp > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(out_currentLastIrp)] := 1;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant214;
    call {:si_unique_call 2555} SerialCancelCurrentWrite(in_PDevObj_18, out_currentLastIrp);
    goto anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  L32:
    call {:si_unique_call 2546} out_Tmp_901 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_901 != 0;
    assume out_Tmp_901 > 0;
    Mem_T.INT4[out_Tmp_901] := out_cancelIrql;
    call {:si_unique_call 2547} IoAcquireCancelSpinLock(out_Tmp_901);
    assume {:nonnull} out_Tmp_901 != 0;
    assume out_Tmp_901 > 0;
    out_cancelIrql := Mem_T.INT4[out_Tmp_901];
    goto L32_dummy;

  L32_dummy:
    call {:si_unique_call 2556} {:si_old_unique_call 1} out_currentLastIrp, out_cancelIrql, out_sdv_732, out_Tmp_901, out_sdv_733, out_cancelRoutine_1, out_vslice_dummy_var_478 := SerialKillAllStalled_loop_L10(out_currentLastIrp, out_cancelIrql, in_pDevExt_16, out_sdv_732, out_Tmp_901, out_sdv_733, out_cancelRoutine_1, in_PDevObj_18, out_vslice_dummy_var_478);
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant218;
    call {:si_unique_call 2554} SerialCancelCurrentXoff(in_PDevObj_18, out_currentLastIrp);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon28_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant351;
    call {:si_unique_call 2553} SerialCancelImmediate(in_PDevObj_18, out_currentLastIrp);
    goto anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon27_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant166;
    call {:si_unique_call 2552} SerialCancelQueued(in_PDevObj_18, out_currentLastIrp);
    goto anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon26_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant197;
    call {:si_unique_call 2551} SerialCancelWait(in_PDevObj_18, out_currentLastIrp);
    goto anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L32;

  anon30_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_1 == li2bplFunctionConstant168;
    call {:si_unique_call 2548} SerialFilterCancelQueued(in_PDevObj_18, out_currentLastIrp);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L32;
}



procedure {:LoopProcedure} SerialKillAllStalled_loop_L10(in_currentLastIrp: int, in_cancelIrql: int, in_pDevExt_16: int, in_sdv_732: int, in_Tmp_901: int, in_sdv_733: int, in_cancelRoutine_1: int, in_PDevObj_18: int, in_vslice_dummy_var_478: int) returns (out_currentLastIrp: int, out_cancelIrql: int, out_sdv_732: int, out_Tmp_901: int, out_sdv_733: int, out_cancelRoutine_1: int, out_vslice_dummy_var_478: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} out_currentLastIrp == in_currentLastIrp;
  free ensures {:va_keep} out_cancelIrql == in_cancelIrql;
  free ensures {:va_keep} out_sdv_732 == in_sdv_732;
  free ensures {:va_keep} out_Tmp_901 == in_Tmp_901;
  free ensures {:va_keep} out_sdv_733 == in_sdv_733;
  free ensures {:va_keep} out_cancelRoutine_1 == in_cancelRoutine_1;
  free ensures {:va_keep} out_vslice_dummy_var_478 == in_vslice_dummy_var_478;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialUnstallIrps_loop_L16(in_Tmp_913: int, in_Tmp_914: int, in_sdv_747: int, in_oldIrql_9: int, in_pIrpStack_6: int, in_pIrp_1: int, in_pDevObj_2: int, in_Tmp_916: int, in_pIrpLink: int, in_pDrvObj_1: int, in_Tmp_917: int, in_PDevExt_16: int, in_vslice_dummy_var_485: int, in_vslice_dummy_var_486: int, in_vslice_dummy_var_487: int) returns (out_Tmp_913: int, out_Tmp_914: int, out_sdv_747: int, out_oldIrql_9: int, out_pIrpStack_6: int, out_pIrp_1: int, out_pDevObj_2: int, out_Tmp_916: int, out_pIrpLink: int, out_pDrvObj_1: int, out_Tmp_917: int, out_vslice_dummy_var_485: int, out_vslice_dummy_var_486: int, out_vslice_dummy_var_487: int)
{

  entry:
    out_Tmp_913, out_Tmp_914, out_sdv_747, out_oldIrql_9, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_916, out_pIrpLink, out_pDrvObj_1, out_Tmp_917, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487 := in_Tmp_913, in_Tmp_914, in_sdv_747, in_oldIrql_9, in_pIrpStack_6, in_pIrp_1, in_pDevObj_2, in_Tmp_916, in_pIrpLink, in_pDrvObj_1, in_Tmp_917, in_vslice_dummy_var_485, in_vslice_dummy_var_486, in_vslice_dummy_var_487;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon59_Else;

  anon59_Else:
    call {:si_unique_call 2559} out_sdv_747 := sdv_containing_record(out_pIrpLink, 88);
    out_pIrp_1 := out_sdv_747;
    call {:si_unique_call 2560} out_vslice_dummy_var_485 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2561} out_pIrpStack_6 := sdv_IoGetCurrentIrpStackLocation(out_pIrp_1);
    assume {:nonnull} out_pIrpStack_6 != 0;
    assume out_pIrpStack_6 > 0;
    havoc out_pDevObj_2;
    assume {:nonnull} out_pDevObj_2 != 0;
    assume out_pDevObj_2 > 0;
    havoc out_pDrvObj_1;
    call {:si_unique_call 2562} out_vslice_dummy_var_486 := sdv_IoSetCancelRoutine(out_pIrp_1, 0);
    call {:si_unique_call 2563} IoReleaseCancelSpinLock(out_oldIrql_9);
    out_Tmp_917 := strConst__li2bpl219;
    call {:si_unique_call 2564} out_vslice_dummy_var_487 := SerialDbgPrintEx(12, out_Tmp_917);
    assume {:nonnull} out_pIrpStack_6 != 0;
    assume out_pIrpStack_6 > 0;
    out_Tmp_913 := Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_pIrpStack_6)];
    assume {:nonnull} out_pDrvObj_1 != 0;
    assume out_pDrvObj_1 > 0;
    havoc out_Tmp_916;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume out_Tmp_913 != 27;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume out_Tmp_913 != 26;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume out_Tmp_913 != 25;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume out_Tmp_913 != 24;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume out_Tmp_913 != 23;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume out_Tmp_913 != 22;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume out_Tmp_913 != 21;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume out_Tmp_913 != 20;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume out_Tmp_913 != 19;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume out_Tmp_913 != 18;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume out_Tmp_913 != 17;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume out_Tmp_913 != 16;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume out_Tmp_913 != 15;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume out_Tmp_913 != 14;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume out_Tmp_913 != 13;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume out_Tmp_913 != 12;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume out_Tmp_913 != 11;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume out_Tmp_913 != 10;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume out_Tmp_913 != 9;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume out_Tmp_913 != 8;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume out_Tmp_913 != 7;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume out_Tmp_913 != 6;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume out_Tmp_913 != 5;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume out_Tmp_913 != 4;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume out_Tmp_913 != 3;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume out_Tmp_913 != 2;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume out_Tmp_913 != 1;
    goto anon87_Then;

  anon87_Then:
    assume out_Tmp_913 == 0;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916] == 0;
    goto L45;

  L45:
    call {:si_unique_call 2557} out_Tmp_914 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_914 != 0;
    assume out_Tmp_914 > 0;
    Mem_T.INT4[out_Tmp_914] := out_oldIrql_9;
    call {:si_unique_call 2558} IoAcquireCancelSpinLock(out_Tmp_914);
    assume {:nonnull} out_Tmp_914 != 0;
    assume out_Tmp_914 > 0;
    out_oldIrql_9 := Mem_T.INT4[out_Tmp_914];
    assume {:nonnull} in_PDevExt_16 != 0;
    assume in_PDevExt_16 > 0;
    havoc out_pIrpLink;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 2565} {:si_old_unique_call 1} out_Tmp_913, out_Tmp_914, out_sdv_747, out_oldIrql_9, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_916, out_pIrpLink, out_pDrvObj_1, out_Tmp_917, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487 := SerialUnstallIrps_loop_L16(out_Tmp_913, out_Tmp_914, out_sdv_747, out_oldIrql_9, out_pIrpStack_6, out_pIrp_1, out_pDevObj_2, out_Tmp_916, out_pIrpLink, out_pDrvObj_1, out_Tmp_917, in_PDevExt_16, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487);
    return;

  anon86_Then:
    assume out_Tmp_913 == 1;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 1 * 4] == 0;
    goto L45;

  anon85_Then:
    assume out_Tmp_913 == 2;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 2 * 4] == 0;
    goto L45;

  anon84_Then:
    assume out_Tmp_913 == 3;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 3 * 4] == 0;
    goto L45;

  anon83_Then:
    assume out_Tmp_913 == 4;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 4 * 4] == 0;
    goto L45;

  anon82_Then:
    assume out_Tmp_913 == 5;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 5 * 4] == 0;
    goto L45;

  anon81_Then:
    assume out_Tmp_913 == 6;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 6 * 4] == 0;
    goto L45;

  anon80_Then:
    assume out_Tmp_913 == 7;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 7 * 4] == 0;
    goto L45;

  anon79_Then:
    assume out_Tmp_913 == 8;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 8 * 4] == 0;
    goto L45;

  anon78_Then:
    assume out_Tmp_913 == 9;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 9 * 4] == 0;
    goto L45;

  anon77_Then:
    assume out_Tmp_913 == 10;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 10 * 4] == 0;
    goto L45;

  anon76_Then:
    assume out_Tmp_913 == 11;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 11 * 4] == 0;
    goto L45;

  anon75_Then:
    assume out_Tmp_913 == 12;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 12 * 4] == 0;
    goto L45;

  anon74_Then:
    assume out_Tmp_913 == 13;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 13 * 4] == 0;
    goto L45;

  anon73_Then:
    assume out_Tmp_913 == 14;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 14 * 4] == 0;
    goto L45;

  anon72_Then:
    assume out_Tmp_913 == 15;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 15 * 4] == 0;
    goto L45;

  anon71_Then:
    assume out_Tmp_913 == 16;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 16 * 4] == 0;
    goto L45;

  anon70_Then:
    assume out_Tmp_913 == 17;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 17 * 4] == 0;
    goto L45;

  anon69_Then:
    assume out_Tmp_913 == 18;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 18 * 4] == 0;
    goto L45;

  anon68_Then:
    assume out_Tmp_913 == 19;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 19 * 4] == 0;
    goto L45;

  anon67_Then:
    assume out_Tmp_913 == 20;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 20 * 4] == 0;
    goto L45;

  anon66_Then:
    assume out_Tmp_913 == 21;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 21 * 4] == 0;
    goto L45;

  anon65_Then:
    assume out_Tmp_913 == 22;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 22 * 4] == 0;
    goto L45;

  anon64_Then:
    assume out_Tmp_913 == 23;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 23 * 4] == 0;
    goto L45;

  anon63_Then:
    assume out_Tmp_913 == 24;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 24 * 4] == 0;
    goto L45;

  anon62_Then:
    assume out_Tmp_913 == 25;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 25 * 4] == 0;
    goto L45;

  anon61_Then:
    assume out_Tmp_913 == 26;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 26 * 4] == 0;
    goto L45;

  anon60_Then:
    assume out_Tmp_913 == 27;
    assume {:nonnull} out_Tmp_916 != 0;
    assume out_Tmp_916 > 0;
    assume Mem_T.INT4[out_Tmp_916 + 27 * 4] == 0;
    goto L45;
}



procedure {:LoopProcedure} SerialUnstallIrps_loop_L16(in_Tmp_913: int, in_Tmp_914: int, in_sdv_747: int, in_oldIrql_9: int, in_pIrpStack_6: int, in_pIrp_1: int, in_pDevObj_2: int, in_Tmp_916: int, in_pIrpLink: int, in_pDrvObj_1: int, in_Tmp_917: int, in_PDevExt_16: int, in_vslice_dummy_var_485: int, in_vslice_dummy_var_486: int, in_vslice_dummy_var_487: int) returns (out_Tmp_913: int, out_Tmp_914: int, out_sdv_747: int, out_oldIrql_9: int, out_pIrpStack_6: int, out_pIrp_1: int, out_pDevObj_2: int, out_Tmp_916: int, out_pIrpLink: int, out_pDrvObj_1: int, out_Tmp_917: int, out_vslice_dummy_var_485: int, out_vslice_dummy_var_486: int, out_vslice_dummy_var_487: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} out_Tmp_913 == in_Tmp_913;
  free ensures {:va_keep} out_Tmp_914 == in_Tmp_914;
  free ensures {:va_keep} out_sdv_747 == in_sdv_747;
  free ensures {:va_keep} out_oldIrql_9 == in_oldIrql_9;
  free ensures {:va_keep} out_pIrpStack_6 == in_pIrpStack_6;
  free ensures {:va_keep} out_pIrp_1 == in_pIrp_1;
  free ensures {:va_keep} out_pDevObj_2 == in_pDevObj_2;
  free ensures {:va_keep} out_Tmp_916 == in_Tmp_916;
  free ensures {:va_keep} out_pIrpLink == in_pIrpLink;
  free ensures {:va_keep} out_pDrvObj_1 == in_pDrvObj_1;
  free ensures {:va_keep} out_Tmp_917 == in_Tmp_917;
  free ensures {:va_keep} out_vslice_dummy_var_485 == in_vslice_dummy_var_485;
  free ensures {:va_keep} out_vslice_dummy_var_486 == in_vslice_dummy_var_486;
  free ensures {:va_keep} out_vslice_dummy_var_487 == in_vslice_dummy_var_487;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_sdv_752: int, in_Tmp_918: int, in_sdv_753: int, in_cancelRoutine_2: int, in_DeviceObject_24: int, in_QueueToClean: int, in_vslice_dummy_var_490: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_sdv_752: int, out_Tmp_918: int, out_sdv_753: int, out_cancelRoutine_2: int, out_vslice_dummy_var_490: int)
{
  var vslice_dummy_var_2749: int;

  entry:
    out_currentLastIrp_1, out_cancelIrql_1, out_sdv_752, out_Tmp_918, out_sdv_753, out_cancelRoutine_2, out_vslice_dummy_var_490 := in_currentLastIrp_1, in_cancelIrql_1, in_sdv_752, in_Tmp_918, in_sdv_753, in_cancelRoutine_2, in_vslice_dummy_var_490;
    goto L8, exit;

  exit:
    return;

  L8:
    call {:si_unique_call 2566} out_sdv_752 := sdv_IsListEmpty(0);
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_sdv_752 == 0;
    assume {:nonnull} in_QueueToClean != 0;
    assume in_QueueToClean > 0;
    havoc vslice_dummy_var_2749;
    call {:si_unique_call 2570} out_sdv_753 := sdv_containing_record(vslice_dummy_var_2749, 88);
    out_currentLastIrp_1 := out_sdv_753;
    call {:si_unique_call 2571} out_vslice_dummy_var_490 := sdv_RemoveEntryList(0);
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    havoc out_cancelRoutine_2;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    assume {:nonnull} out_currentLastIrp_1 != 0;
    assume out_currentLastIrp_1 > 0;
    Mem_T.Cancel__IRP[Cancel__IRP(out_currentLastIrp_1)] := 1;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant214;
    call {:si_unique_call 2576} SerialCancelCurrentWrite(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon75_Else;

  anon75_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 2567} out_Tmp_918 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_918 != 0;
    assume out_Tmp_918 > 0;
    Mem_T.INT4[out_Tmp_918] := out_cancelIrql_1;
    call {:si_unique_call 2568} IoAcquireCancelSpinLock(out_Tmp_918);
    assume {:nonnull} out_Tmp_918 != 0;
    assume out_Tmp_918 > 0;
    out_cancelIrql_1 := Mem_T.INT4[out_Tmp_918];
    goto L42_dummy;

  L42_dummy:
    call {:si_unique_call 2577} {:si_old_unique_call 1} out_currentLastIrp_1, out_cancelIrql_1, out_sdv_752, out_Tmp_918, out_sdv_753, out_cancelRoutine_2, out_vslice_dummy_var_490 := SerialKillAllReadsOrWrites_loop_L8(out_currentLastIrp_1, out_cancelIrql_1, out_sdv_752, out_Tmp_918, out_sdv_753, out_cancelRoutine_2, in_DeviceObject_24, in_QueueToClean, out_vslice_dummy_var_490);
    return;

  anon60_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant218;
    call {:si_unique_call 2575} SerialCancelCurrentXoff(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon59_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant351;
    call {:si_unique_call 2574} SerialCancelImmediate(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon73_Else;

  anon73_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon58_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant166;
    call {:si_unique_call 2573} SerialCancelQueued(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon57_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant197;
    call {:si_unique_call 2572} SerialCancelWait(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon71_Else;

  anon71_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  anon69_Then:
    assume {:IndirectCall} true;
    assume out_cancelRoutine_2 == li2bplFunctionConstant168;
    call {:si_unique_call 2569} SerialFilterCancelQueued(in_DeviceObject_24, out_currentLastIrp_1);
    goto anon70_Else;

  anon70_Else:
    assume {:partition} yogi_error != 1;
    goto L42;
}



procedure {:LoopProcedure} SerialKillAllReadsOrWrites_loop_L8(in_currentLastIrp_1: int, in_cancelIrql_1: int, in_sdv_752: int, in_Tmp_918: int, in_sdv_753: int, in_cancelRoutine_2: int, in_DeviceObject_24: int, in_QueueToClean: int, in_vslice_dummy_var_490: int) returns (out_currentLastIrp_1: int, out_cancelIrql_1: int, out_sdv_752: int, out_Tmp_918: int, out_sdv_753: int, out_cancelRoutine_2: int, out_vslice_dummy_var_490: int);
  modifies alloc, Mem_T.INT4, Mem_T.Cancel__IRP, io_complete_request_called, Mem_T.P_IRP, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(io_complete_request_called) == 0 ==> io_complete_request_called != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == old(yogi_error);
  free ensures {:va_keep} out_currentLastIrp_1 == in_currentLastIrp_1;
  free ensures {:va_keep} out_cancelIrql_1 == in_cancelIrql_1;
  free ensures {:va_keep} out_sdv_752 == in_sdv_752;
  free ensures {:va_keep} out_Tmp_918 == in_Tmp_918;
  free ensures {:va_keep} out_sdv_753 == in_sdv_753;
  free ensures {:va_keep} out_cancelRoutine_2 == in_cancelRoutine_2;
  free ensures {:va_keep} out_vslice_dummy_var_490 == in_vslice_dummy_var_490;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialStartPurge_loop_L5(in_Tmp_973: int, in_Tmp_974: int, in_Mask_2: int, in_OldIrql_10: int, in_NewIrp_5: int, in_Tmp_975: int, in_Tmp_976: int, in_Tmp_977: int, in_Extension_25: int, in_vslice_dummy_var_510: int) returns (out_Tmp_973: int, out_Tmp_974: int, out_Mask_2: int, out_OldIrql_10: int, out_Tmp_975: int, out_Tmp_976: int, out_Tmp_977: int, out_vslice_dummy_var_510: int)
{
  var vslice_dummy_var_2750: int;
  var vslice_dummy_var_2751: int;
  var vslice_dummy_var_2752: int;

  entry:
    out_Tmp_973, out_Tmp_974, out_Mask_2, out_OldIrql_10, out_Tmp_975, out_Tmp_976, out_Tmp_977, out_vslice_dummy_var_510 := in_Tmp_973, in_Tmp_974, in_Mask_2, in_OldIrql_10, in_Tmp_975, in_Tmp_976, in_Tmp_977, in_vslice_dummy_var_510;
    goto L5, exit;

  exit:
    return;

  L5:
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    out_Tmp_977 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25)];
    assume {:nonnull} out_Tmp_977 != 0;
    assume out_Tmp_977 > 0;
    havoc out_Tmp_976;
    assume {:nonnull} out_Tmp_976 != 0;
    assume out_Tmp_976 > 0;
    out_Mask_2 := Mem_T.INT4[out_Tmp_976];
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(out_Mask_2, 1) != 0;
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    havoc vslice_dummy_var_2751;
    call {:si_unique_call 2584} SerialKillAllReadsOrWrites(vslice_dummy_var_2751, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_25), CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25));
    goto anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    havoc vslice_dummy_var_2750;
    call {:si_unique_call 2583} SerialKillAllReadsOrWrites(vslice_dummy_var_2750, WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_25), CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25));
    goto anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L7;

  L7:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(out_Mask_2, 2) != 0;
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    havoc vslice_dummy_var_2752;
    call {:si_unique_call 2585} SerialKillAllReadsOrWrites(vslice_dummy_var_2752, ReadQueue__SERIAL_DEVICE_EXTENSION(in_Extension_25), CurrentReadIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25));
    goto anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L14;

  L14:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(out_Mask_2, 8) != 0;
    call {:si_unique_call 2579} out_Tmp_975 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_975 != 0;
    assume out_Tmp_975 > 0;
    Mem_T.INT4[out_Tmp_975] := out_OldIrql_10;
    call {:si_unique_call 2580} sdv_KeAcquireSpinLock(0, out_Tmp_975);
    assume {:nonnull} out_Tmp_975 != 0;
    assume out_Tmp_975 > 0;
    out_OldIrql_10 := Mem_T.INT4[out_Tmp_975];
    call {:si_unique_call 2581} out_vslice_dummy_var_510 := KeSynchronizeExecution(0, li2bplFunctionConstant484, 0);
    call {:si_unique_call 2582} sdv_KeReleaseSpinLock(0, out_OldIrql_10);
    goto L18;

  L18:
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    out_Tmp_974 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25)];
    assume {:nonnull} out_Tmp_974 != 0;
    assume out_Tmp_974 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_974))] := 0;
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    out_Tmp_973 := Mem_T.P_IRP[CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25)];
    assume {:nonnull} out_Tmp_973 != 0;
    assume out_Tmp_973 > 0;
    assume {:nonnull} in_Extension_25 != 0;
    assume in_Extension_25 > 0;
    call {:si_unique_call 2578} SerialGetNextIrp(CurrentPurgeIrp__SERIAL_DEVICE_EXTENSION(in_Extension_25), PurgeQueue__SERIAL_DEVICE_EXTENSION(in_Extension_25), in_NewIrp_5, 1, in_Extension_25);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_5 != 0;
    assume in_NewIrp_5 > 0;
    goto anon19_Then;

  anon19_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_5] != 0;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    call {:si_unique_call 2586} {:si_old_unique_call 1} out_Tmp_973, out_Tmp_974, out_Mask_2, out_OldIrql_10, out_Tmp_975, out_Tmp_976, out_Tmp_977, out_vslice_dummy_var_510 := SerialStartPurge_loop_L5(out_Tmp_973, out_Tmp_974, out_Mask_2, out_OldIrql_10, in_NewIrp_5, out_Tmp_975, out_Tmp_976, out_Tmp_977, in_Extension_25, out_vslice_dummy_var_510);
    return;

  anon18_Then:
    assume {:partition} BAND(out_Mask_2, 8) == 0;
    goto L18;

  anon17_Then:
    assume {:partition} BAND(out_Mask_2, 2) == 0;
    goto L14;

  anon20_Then:
    assume {:partition} BAND(out_Mask_2, 1) == 0;
    goto L7;
}



procedure {:LoopProcedure} SerialStartPurge_loop_L5(in_Tmp_973: int, in_Tmp_974: int, in_Mask_2: int, in_OldIrql_10: int, in_NewIrp_5: int, in_Tmp_975: int, in_Tmp_976: int, in_Tmp_977: int, in_Extension_25: int, in_vslice_dummy_var_510: int) returns (out_Tmp_973: int, out_Tmp_974: int, out_Mask_2: int, out_OldIrql_10: int, out_Tmp_975: int, out_Tmp_976: int, out_Tmp_977: int, out_vslice_dummy_var_510: int);
  modifies Mem_T.INT4, alloc, Mem_T.P_IRP, Mem_T.Cancel__IRP, io_complete_request_called, Mem_T.PVOID, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_vslice_dummy_var_510 == 1 || out_vslice_dummy_var_510 == 0 || out_vslice_dummy_var_510 == in_vslice_dummy_var_510;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialClose_loop_L121(in_flushCount: int, in_sdv_784: int, in_Tmp_984: int, in_extension_5: int, in_vslice_dummy_var_517: int) returns (out_flushCount: int, out_sdv_784: int, out_Tmp_984: int, out_vslice_dummy_var_517: int)
{

  entry:
    out_flushCount, out_sdv_784, out_Tmp_984, out_vslice_dummy_var_517 := in_flushCount, in_sdv_784, in_Tmp_984, in_vslice_dummy_var_517;
    goto L121, exit;

  exit:
    return;

  L121:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon59_Else;

  anon59_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension_5 != 0;
    assume in_extension_5 > 0;
    call {:si_unique_call 2588} out_sdv_784 := corral_nondet();
    out_Tmp_984 := BAND(out_sdv_784, BOR(32, 64));
    goto anon68_Else;

  anon68_Else:
    assume {:partition} out_Tmp_984 != 96;
    call {:si_unique_call 2587} out_vslice_dummy_var_517 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon68_Else_dummy;

  anon68_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L121(in_flushCount: int, in_sdv_784: int, in_Tmp_984: int, in_extension_5: int, in_vslice_dummy_var_517: int) returns (out_flushCount: int, out_sdv_784: int, out_Tmp_984: int, out_vslice_dummy_var_517: int);
  free ensures {:va_keep} out_vslice_dummy_var_517 == 0 || out_vslice_dummy_var_517 == -1073741823 || out_vslice_dummy_var_517 == in_vslice_dummy_var_517;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialClose_loop_L108(in_sdv_806: int, in_extension_5: int, in_vslice_dummy_var_516: int) returns (out_sdv_806: int, out_vslice_dummy_var_516: int)
{

  entry:
    out_sdv_806, out_vslice_dummy_var_516 := in_sdv_806, in_vslice_dummy_var_516;
    goto L108, exit;

  exit:
    return;

  L108:
    assume {:nonnull} in_extension_5 != 0;
    assume in_extension_5 > 0;
    call {:si_unique_call 2589} out_sdv_806 := corral_nondet();
    goto anon58_Then;

  anon58_Then:
    assume {:partition} BAND(out_sdv_806, 32) == 0;
    call {:si_unique_call 2590} out_vslice_dummy_var_516 := KeDelayExecutionThread(0, 0, 0);
    goto anon58_Then_dummy;

  anon58_Then_dummy:
    call {:si_unique_call 2591} {:si_old_unique_call 1} out_sdv_806, out_vslice_dummy_var_516 := SerialClose_loop_L108(out_sdv_806, in_extension_5, out_vslice_dummy_var_516);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L108(in_sdv_806: int, in_extension_5: int, in_vslice_dummy_var_516: int) returns (out_sdv_806: int, out_vslice_dummy_var_516: int);
  free ensures {:va_keep} out_vslice_dummy_var_516 == 0 || out_vslice_dummy_var_516 == -1073741823 || out_vslice_dummy_var_516 == in_vslice_dummy_var_516;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialClose_loop_L147(in_extension_5: int, in_vslice_dummy_var_520: int) returns (out_vslice_dummy_var_520: int)
{

  entry:
    out_vslice_dummy_var_520 := in_vslice_dummy_var_520;
    goto L147, exit;

  exit:
    return;

  L147:
    call {:si_unique_call 2592} out_vslice_dummy_var_520 := KeDelayExecutionThread(0, 0, 0);
    assume {:nonnull} in_extension_5 != 0;
    assume in_extension_5 > 0;
    goto anon62_Then;

  anon62_Then:
    goto anon62_Then_dummy;

  anon62_Then_dummy:
    call {:si_unique_call 2593} {:si_old_unique_call 1} out_vslice_dummy_var_520 := SerialClose_loop_L147(in_extension_5, out_vslice_dummy_var_520);
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L147(in_extension_5: int, in_vslice_dummy_var_520: int) returns (out_vslice_dummy_var_520: int);
  free ensures {:va_keep} out_vslice_dummy_var_520 == 0 || out_vslice_dummy_var_520 == -1073741823 || out_vslice_dummy_var_520 == in_vslice_dummy_var_520;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialClose_loop_L87(in_flushCount: int, in_sdv_785: int, in_Tmp_996: int, in_extension_5: int, in_vslice_dummy_var_514: int) returns (out_flushCount: int, out_sdv_785: int, out_Tmp_996: int, out_vslice_dummy_var_514: int)
{

  entry:
    out_flushCount, out_sdv_785, out_Tmp_996, out_vslice_dummy_var_514 := in_flushCount, in_sdv_785, in_Tmp_996, in_vslice_dummy_var_514;
    goto L87, exit;

  exit:
    return;

  L87:
    assume {:CounterLoop 320} {:Counter "flushCount"} true;
    goto anon55_Else;

  anon55_Else:
    assume {:partition} out_flushCount != 0;
    assume {:nonnull} in_extension_5 != 0;
    assume in_extension_5 > 0;
    call {:si_unique_call 2595} out_sdv_785 := corral_nondet();
    out_Tmp_996 := BAND(out_sdv_785, BOR(32, 64));
    goto anon67_Else;

  anon67_Else:
    assume {:partition} out_Tmp_996 != 96;
    call {:si_unique_call 2594} out_vslice_dummy_var_514 := KeDelayExecutionThread(0, 0, 0);
    out_flushCount := out_flushCount - 1;
    goto anon67_Else_dummy;

  anon67_Else_dummy:
    havoc out_flushCount;
    return;
}



procedure {:LoopProcedure} SerialClose_loop_L87(in_flushCount: int, in_sdv_785: int, in_Tmp_996: int, in_extension_5: int, in_vslice_dummy_var_514: int) returns (out_flushCount: int, out_sdv_785: int, out_Tmp_996: int, out_vslice_dummy_var_514: int);
  free ensures {:va_keep} out_vslice_dummy_var_514 == 0 || out_vslice_dummy_var_514 == -1073741823 || out_vslice_dummy_var_514 == in_vslice_dummy_var_514;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialDrainUART_loop_L6(in_Tmp_1025: int, in_sdv_841: int, in_PDevExt_21: int, in_vslice_dummy_var_560: int) returns (out_Tmp_1025: int, out_sdv_841: int, out_vslice_dummy_var_560: int)
{

  entry:
    out_Tmp_1025, out_sdv_841, out_vslice_dummy_var_560 := in_Tmp_1025, in_sdv_841, in_vslice_dummy_var_560;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_PDevExt_21 != 0;
    assume in_PDevExt_21 > 0;
    call {:si_unique_call 2596} out_sdv_841 := corral_nondet();
    out_Tmp_1025 := BAND(out_sdv_841, BOR(32, 64));
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Tmp_1025 != 96;
    call {:si_unique_call 2597} out_vslice_dummy_var_560 := KeDelayExecutionThread(0, 0, 0);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2598} {:si_old_unique_call 1} out_Tmp_1025, out_sdv_841, out_vslice_dummy_var_560 := SerialDrainUART_loop_L6(out_Tmp_1025, out_sdv_841, in_PDevExt_21, out_vslice_dummy_var_560);
    return;
}



procedure {:LoopProcedure} SerialDrainUART_loop_L6(in_Tmp_1025: int, in_sdv_841: int, in_PDevExt_21: int, in_vslice_dummy_var_560: int) returns (out_Tmp_1025: int, out_sdv_841: int, out_vslice_dummy_var_560: int);
  free ensures {:va_keep} out_vslice_dummy_var_560 == 0 || out_vslice_dummy_var_560 == -1073741823 || out_vslice_dummy_var_560 == in_vslice_dummy_var_560;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialStartWrite#0_loop_L14(in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_466: int, in_Tmp_468: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_418: int, in_OldIrql_7: int, in_NewIrp_3: int, in_sdv_421: int, in_Tmp_470: int, in_Timeouts_1: int, in_Tmp_471: int, in_Extension_12: int) returns (out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_466: int, out_Tmp_468: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_418: int, out_OldIrql_7: int, out_sdv_421: int, out_Tmp_470: int, out_Tmp_471: int)
{

  entry:
    out_FirstStatus, out_SetFirstStatus, out_Tmp_466, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, out_sdv_421, out_Tmp_470, out_Tmp_471 := in_FirstStatus, in_SetFirstStatus, in_Tmp_466, in_Tmp_468, in_UseATimer_1, in_IrpSp_2, in_sdv_418, in_OldIrql_7, in_sdv_421, in_Tmp_470, in_Tmp_471;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2599} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2600} IoAcquireCancelSpinLock(out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)] != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2611} out_sdv_418 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    assume {:nonnull} out_sdv_418 != 0;
    assume out_sdv_418 > 0;
    goto anon26_Then;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_418)))] == 0;
    call {:si_unique_call 2609} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  L40:
    out_UseATimer_1 := 0;
    call {:si_unique_call 2606} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2607} sdv_KeAcquireSpinLock(0, out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    call {:si_unique_call 2608} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2612} out_IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    out_UseATimer_1 := 1;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_2)] == 4;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    havoc out_Tmp_470;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_TotalTime_1 != 0;
    assume in_TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2603} out_sdv_421 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    assume {:nonnull} out_sdv_421 != 0;
    assume out_sdv_421 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_421)))] := 0;
    call {:si_unique_call 2604} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2605} IoAcquireCancelSpinLock(out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    out_Tmp_466 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)];
    assume {:nonnull} out_Tmp_466 != 0;
    assume out_Tmp_466 > 0;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_466)] != 0;
    call {:si_unique_call 2602} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    out_Tmp_468 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)];
    assume {:nonnull} out_Tmp_468 != 0;
    assume out_Tmp_468 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_468))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2601} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), in_NewIrp_3, 1, in_Extension_12);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon30_Then;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_3] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2613} {:si_old_unique_call 1} out_FirstStatus, out_SetFirstStatus, out_Tmp_466, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, out_sdv_421, out_Tmp_470, out_Tmp_471 := SerialStartWrite#0_loop_L14(out_FirstStatus, in_TotalTime_1, out_SetFirstStatus, out_Tmp_466, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, in_NewIrp_3, out_sdv_421, out_Tmp_470, in_Timeouts_1, out_Tmp_471, in_Extension_12);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L75;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_2)] != 4;
    out_Tmp_470 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)] == 0;
    call {:si_unique_call 2610} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#0_loop_L14(in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_466: int, in_Tmp_468: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_418: int, in_OldIrql_7: int, in_NewIrp_3: int, in_sdv_421: int, in_Tmp_470: int, in_Timeouts_1: int, in_Tmp_471: int, in_Extension_12: int) returns (out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_466: int, out_Tmp_468: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_418: int, out_OldIrql_7: int, out_sdv_421: int, out_Tmp_470: int, out_Tmp_471: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus == -1073741536 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_UseATimer_1 == 0 || out_UseATimer_1 == 1 || out_UseATimer_1 == in_UseATimer_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation SerialStartWrite#1_loop_L14(in_s_p_e_c_i_a_l_9: int, in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_466: int, in_Tmp_467: int, in_Tmp_468: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_418: int, in_OldIrql_7: int, in_NewIrp_3: int, in_s_p_e_c_i_a_l_11: int, in_sdv_420: int, in_sdv_421: int, in_Tmp_470: int, in_Timeouts_1: int, in_Tmp_471: int, in_Extension_12: int) returns (out_s_p_e_c_i_a_l_9: int, out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_466: int, out_Tmp_467: int, out_Tmp_468: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_418: int, out_OldIrql_7: int, out_s_p_e_c_i_a_l_11: int, out_sdv_420: int, out_sdv_421: int, out_Tmp_470: int, out_Tmp_471: int)
{

  entry:
    out_s_p_e_c_i_a_l_9, out_FirstStatus, out_SetFirstStatus, out_Tmp_466, out_Tmp_467, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, out_s_p_e_c_i_a_l_11, out_sdv_420, out_sdv_421, out_Tmp_470, out_Tmp_471 := in_s_p_e_c_i_a_l_9, in_FirstStatus, in_SetFirstStatus, in_Tmp_466, in_Tmp_467, in_Tmp_468, in_UseATimer_1, in_IrpSp_2, in_sdv_418, in_OldIrql_7, in_s_p_e_c_i_a_l_11, in_sdv_420, in_sdv_421, in_Tmp_470, in_Tmp_471;
    goto L14, exit;

  exit:
    return;

  L14:
    call {:si_unique_call 2614} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2615} IoAcquireCancelSpinLock(out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)] != 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2626} out_sdv_418 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    assume {:nonnull} out_sdv_418 != 0;
    assume out_sdv_418 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_418)))] != 0;
    out_s_p_e_c_i_a_l_11 := 16;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2627} out_sdv_420 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    assume {:nonnull} out_sdv_420 != 0;
    assume out_sdv_420 > 0;
    out_s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_420)));
    assume {:nonnull} out_s_p_e_c_i_a_l_9 != 0;
    assume out_s_p_e_c_i_a_l_9 > 0;
    Mem_T.INT4[out_s_p_e_c_i_a_l_9] := BOR(Mem_T.INT4[out_s_p_e_c_i_a_l_9], out_s_p_e_c_i_a_l_11);
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    out_Tmp_467 := Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)];
    assume {:nonnull} out_Tmp_467 != 0;
    assume out_Tmp_467 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2628} SerialTryToCompleteCurrent#0(in_Extension_12, li2bplFunctionConstant213, out_OldIrql_7, -1073741816, CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12), 0, 0, XoffCountTimer__SERIAL_DEVICE_EXTENSION(in_Extension_12), 0, 0, 16);
    goto anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L40;

  L40:
    out_UseATimer_1 := 0;
    call {:si_unique_call 2621} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2622} sdv_KeAcquireSpinLock(0, out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    call {:si_unique_call 2623} sdv_KeReleaseSpinLock(0, out_OldIrql_7);
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L51;

  L51:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2629} out_IrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    out_UseATimer_1 := 1;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_2)] == 4;
    assume {:nonnull} out_IrpSp_2 != 0;
    assume out_IrpSp_2 > 0;
    havoc out_Tmp_470;
    goto L59;

  L59:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    assume {:nonnull} in_TotalTime_1 != 0;
    assume in_TotalTime_1 > 0;
    goto L60;

  L60:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2618} out_sdv_421 := sdv_IoGetCurrentIrpStackLocation(Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)]);
    assume {:nonnull} out_sdv_421 != 0;
    assume out_sdv_421 > 0;
    Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_421)))] := 0;
    call {:si_unique_call 2619} out_Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    Mem_T.INT4[out_Tmp_471] := out_OldIrql_7;
    call {:si_unique_call 2620} IoAcquireCancelSpinLock(out_Tmp_471);
    assume {:nonnull} out_Tmp_471 != 0;
    assume out_Tmp_471 > 0;
    out_OldIrql_7 := Mem_T.INT4[out_Tmp_471];
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    out_Tmp_466 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)];
    assume {:nonnull} out_Tmp_466 != 0;
    assume out_Tmp_466 > 0;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} Mem_T.Cancel__IRP[Cancel__IRP(out_Tmp_466)] != 0;
    call {:si_unique_call 2617} IoReleaseCancelSpinLock(out_OldIrql_7);
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    out_Tmp_468 := Mem_T.P_IRP[CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)];
    assume {:nonnull} out_Tmp_468 != 0;
    assume out_Tmp_468 > 0;
    Mem_T.INT4[Status__IO_STATUS_BLOCK(IoStatus__IRP(out_Tmp_468))] := -1073741536;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} out_SetFirstStatus != 0;
    goto L75;

  L75:
    assume {:nonnull} in_Extension_12 != 0;
    assume in_Extension_12 > 0;
    call {:si_unique_call 2616} SerialGetNextWrite(CurrentWriteIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12), WriteQueue__SERIAL_DEVICE_EXTENSION(in_Extension_12), in_NewIrp_3, 1, in_Extension_12);
    goto anon35_Else;

  anon35_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} in_NewIrp_3 != 0;
    assume in_NewIrp_3 > 0;
    goto anon30_Then;

  anon30_Then:
    assume {:partition} Mem_T.P_IRP[in_NewIrp_3] != 0;
    goto anon30_Then_dummy;

  anon30_Then_dummy:
    call {:si_unique_call 2630} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_9, out_FirstStatus, out_SetFirstStatus, out_Tmp_466, out_Tmp_467, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, out_s_p_e_c_i_a_l_11, out_sdv_420, out_sdv_421, out_Tmp_470, out_Tmp_471 := SerialStartWrite#1_loop_L14(out_s_p_e_c_i_a_l_9, out_FirstStatus, in_TotalTime_1, out_SetFirstStatus, out_Tmp_466, out_Tmp_467, out_Tmp_468, out_UseATimer_1, out_IrpSp_2, out_sdv_418, out_OldIrql_7, in_NewIrp_3, out_s_p_e_c_i_a_l_11, out_sdv_420, out_sdv_421, out_Tmp_470, in_Timeouts_1, out_Tmp_471, in_Extension_12);
    return;

  anon34_Then:
    assume {:partition} out_SetFirstStatus == 0;
    out_FirstStatus := -1073741536;
    out_SetFirstStatus := 1;
    goto L75;

  anon32_Then:
    assume {:partition} Mem_T.MajorFunction__IO_STACK_LOCATION[MajorFunction__IO_STACK_LOCATION(out_IrpSp_2)] != 4;
    out_Tmp_470 := 1;
    goto L59;

  anon27_Then:
    assume {:nonnull} in_Timeouts_1 != 0;
    assume in_Timeouts_1 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L60;

  anon28_Then:
    goto L51;

  anon26_Then:
    assume {:partition} Mem_T.PVOID[Argument4_unnamed_tag_40(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(out_sdv_418)))] == 0;
    call {:si_unique_call 2624} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;

  anon25_Then:
    assume {:partition} Mem_T.P_IRP[CurrentXoffIrp__SERIAL_DEVICE_EXTENSION(in_Extension_12)] == 0;
    call {:si_unique_call 2625} IoReleaseCancelSpinLock(out_OldIrql_7);
    goto L40;
}



procedure {:LoopProcedure} SerialStartWrite#1_loop_L14(in_s_p_e_c_i_a_l_9: int, in_FirstStatus: int, in_TotalTime_1: int, in_SetFirstStatus: int, in_Tmp_466: int, in_Tmp_467: int, in_Tmp_468: int, in_UseATimer_1: int, in_IrpSp_2: int, in_sdv_418: int, in_OldIrql_7: int, in_NewIrp_3: int, in_s_p_e_c_i_a_l_11: int, in_sdv_420: int, in_sdv_421: int, in_Tmp_470: int, in_Timeouts_1: int, in_Tmp_471: int, in_Extension_12: int) returns (out_s_p_e_c_i_a_l_9: int, out_FirstStatus: int, out_SetFirstStatus: int, out_Tmp_466: int, out_Tmp_467: int, out_Tmp_468: int, out_UseATimer_1: int, out_IrpSp_2: int, out_sdv_418: int, out_OldIrql_7: int, out_s_p_e_c_i_a_l_11: int, out_sdv_420: int, out_sdv_421: int, out_Tmp_470: int, out_Tmp_471: int);
  modifies alloc, Mem_T.INT4, Mem_T.P_IRP, Mem_T.PVOID, io_complete_request_called, yogi_error;
  free ensures {:va_keep} old(io_complete_request_called) == 1 ==> io_complete_request_called != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} io_complete_request_called == 1 || io_complete_request_called == old(io_complete_request_called);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} out_FirstStatus == -1073741536 || out_FirstStatus == in_FirstStatus;
  free ensures {:va_keep} out_SetFirstStatus == 1 || out_SetFirstStatus == in_SetFirstStatus;
  free ensures {:va_keep} out_UseATimer_1 == 0 || out_UseATimer_1 == 1 || out_UseATimer_1 == in_UseATimer_1;
  free ensures {:va_keep} out_s_p_e_c_i_a_l_11 == 16 || out_s_p_e_c_i_a_l_11 == in_s_p_e_c_i_a_l_11;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



procedure fakeMain() returns (Tmp_551: int, dup_assertVar: bool);
  modifies alloc, Mem_T.INT4, Mem_T.CurrentStackLocation_unnamed_tag_7, SLAM_guard_S_0, io_complete_request_called, yogi_error, Mem_T.Cancel__IRP, Mem_T.MajorFunction__IO_STACK_LOCATION, Mem_T.P_IRP, Mem_T.PVOID, Mem_T.InterruptReadBuffer__SERIAL_DEVICE_EXTENSION;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(io_complete_request_called) == 1 || old(io_complete_request_called) == 0;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || io_complete_request_called == 1 || io_complete_request_called == 0;



implementation {:entrypoint} fakeMain() returns (Tmp_551: int, dup_assertVar: bool)
{

  start:
    call Tmp_551, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


