var {:scalar} alloc: int;

var {:scalar} queued: int;

var {:scalar} yogi_error: int;

var {:scalar} stack_location: int;

var {:scalar} locked: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} markedPending: int;

var {:scalar} queuedWithoutMarking: int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const NMI_NOTIFY_TYPE_GUID: int;

const GUID_POWERBUTTON_ACTION: int;

const GUID_LIDOPEN_POWERSTATE: int;

const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: int;

const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: int;

const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: int;

const GUID_PROCESSOR_PERF_INCREASE_TIME: int;

const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: int;

const GUID_AUDIO_PLAYBACK: int;

const IPF_SAL_RECORD_SECTION_GUID: int;

const PROCESSOR_GENERIC_ERROR_SECTION_GUID: int;

const GUID_USERINTERFACEBUTTON_ACTION: int;

const GUID_PROCESSOR_THROTTLE_POLICY: int;

const GUID_PCIEXPRESS_ASPM_POLICY: int;

const GUID_BATTERY_PERCENTAGE_REMAINING: int;

const INIT_NOTIFY_TYPE_GUID: int;

const PCIXDEVICE_ERROR_SECTION_GUID: int;

const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: int;

const GUID_ALLOW_RTC_WAKE: int;

const GUID_GLOBAL_USER_PRESENCE: int;

const GUID_BATTERY_DISCHARGE_ACTION_2: int;

const GUID_BATTERY_DISCHARGE_LEVEL_2: int;

const GUID_APPLAUNCH_BUTTON: int;

const GUID_BATTERY_DISCHARGE_FLAGS_1: int;

const GUID_PROCESSOR_ALLOW_THROTTLING: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: int;

const WHEA_TLBCHECK_GUID: int;

const GUID_MONITOR_POWER_ON: int;

const GUID_IDLE_RESILIENCY_PERIOD: int;

const GUID_PROCESSOR_DISTRIBUTE_UTILITY: int;

const GUID_DEVINTERFACE_MODEM: int;

const GUID_PROCESSOR_PERF_INCREASE_HISTORY: int;

const GUID_INTSTEER_SUBGROUP: int;

const GUID_DISK_BURST_IGNORE_THRESHOLD: int;

const GUID_SLEEPBUTTON_ACTION: int;

const IPF_PROCESSOR_ERROR_SECTION_GUID: int;

const XPF_MCA_SECTION_GUID: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: int;

const MCE_NOTIFY_TYPE_GUID: int;

const GUID_PROCESSOR_IDLE_DISABLE: int;

const WHEA_CACHECHECK_GUID: int;

const GUID_DISK_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: int;

const GUID_DISK_IDLE_TIMEOUT: int;

const GUID_CONSOLE_DISPLAY_STATE: int;

const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_0: int;

const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: int;

const GUID_ACDC_POWER_SOURCE: int;

const WHEA_MSCHECK_GUID: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: int;

const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: int;

const FIRMWARE_ERROR_RECORD_REFERENCE_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: int;

const NMI_SECTION_GUID: int;

const GUID_PROCESSOR_THROTTLE_MINIMUM: int;

const GUID_ALLOW_AWAYMODE: int;

const NO_SUBGROUP_GUID: int;

const GUID_DISK_ADAPTIVE_POWERDOWN: int;

const GUID_VIDEO_FULLSCREEN_PLAYBACK: int;

const GUID_SYSTEM_BUTTON_SUBGROUP: int;

const GUID_INTSTEER_TIME_UNPARK_TRIGGER: int;

const GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR: int;

const GUID_SYSTEM_COOLING_POLICY: int;

const WHEA_RECORD_CREATOR_GUID: int;

const GUID_PROCESSOR_PERF_BOOST_MODE: int;

const ALL_POWERSCHEMES_GUID: int;

const GUID_LIDSWITCH_STATE_CHANGE: int;

const GUID_BATTERY_DISCHARGE_LEVEL_3: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: int;

const GUID_ALLOW_SYSTEM_REQUIRED: int;

const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: int;

const GUID_PROCESSOR_IDLE_ALLOW_SCALING: int;

const GUID_LOCK_CONSOLE_ON_WAKE: int;

const GUID_VIDEO_POWERDOWN_TIMEOUT: int;

const GUID_SESSION_DISPLAY_STATUS: int;

const GUID_PROCESSOR_IDLESTATE_POLICY: int;

const GUID_PROCESSOR_IDLE_TIME_CHECK: int;

const CPE_NOTIFY_TYPE_GUID: int;

const GUID_ALLOW_DISPLAY_REQUIRED: int;

const GUID_UNATTEND_SLEEP_TIMEOUT: int;

const GUID_INTSTEER_MODE: int;

const GUID_IDLE_RESILIENCY_PLATFORM_STATE: int;

const GENERIC_SECTION_GUID: int;

const GUID_CRITICAL_POWER_TRANSITION: int;

const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: int;

const GUID_BACKGROUND_TASK_NOTIFICATION: int;

const BOOT_NOTIFY_TYPE_GUID: int;

const GENERIC_NOTIFY_TYPE_GUID: int;

const GUID_SLEEP_IDLE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: int;

const GUID_PROCESSOR_PERF_HISTORY: int;

const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: int;

const GUID_VIDEO_ANNOYANCE_TIMEOUT: int;

const GUID_BATTERY_DISCHARGE_FLAGS_3: int;

const GUID_PROCESSOR_THROTTLE_MAXIMUM: int;

const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: int;

const GUID_PROCESSOR_PARKING_PERF_STATE: int;

const GUID_PROCESSOR_PERF_DECREASE_POLICY: int;

const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: int;

const GUID_VIDEO_ADAPTIVE_POWERDOWN: int;

const PCIe_NOTIFY_TYPE_GUID: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: int;

const GUID_MIN_POWER_SAVINGS: int;

const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: int;

const GUID_ALLOW_STANDBY_STATES: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT: int;

const GUID_STANDBY_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: int;

const GUID_DEVICE_IDLE_POLICY: int;

const GUID_PROCESSOR_PERFSTATE_POLICY: int;

const GUID_PROCESSOR_PERF_BOOST_POLICY: int;

const GUID_SESSION_USER_PRESENCE: int;

const GUID_LIDCLOSE_ACTION: int;

const PCIEXPRESS_ERROR_SECTION_GUID: int;

const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: int;

const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: int;

const GUID_SLEEP_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_ACTION_1: int;

const GUID_PROCESSOR_PERF_INCREASE_POLICY: int;

const MEMORY_ERROR_SECTION_GUID: int;

const GUID_DEVINTERFACE_COMPORT: int;

const GUID_VIDEO_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_TIME: int;

const GUID_MAX_POWER_SAVINGS: int;

const GUID_TYPICAL_POWER_SAVINGS: int;

const GUID_HIBERNATE_FASTS4_POLICY: int;

const GUID_BATTERY_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_HISTORY: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: int;

const XPF_PROCESSOR_ERROR_SECTION_GUID: int;

const GUID_PROCESSOR_SETTINGS_SUBGROUP: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: int;

const GUID_IDLE_BACKGROUND_TASK: int;

const WHEA_BUSCHECK_GUID: int;

const GUID_BATTERY_DISCHARGE_FLAGS_2: int;

const GUID_DISK_SUBGROUP: int;

const GUID_HIBERNATE_TIMEOUT: int;

const CMC_NOTIFY_TYPE_GUID: int;

const GUID_POWERSCHEME_PERSONALITY: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: int;

const GUID_BATTERY_DISCHARGE_LEVEL_1: int;

const GUID_BATTERY_DISCHARGE_ACTION_0: int;

const PCIXBUS_ERROR_SECTION_GUID: int;

const GUID_IDLE_RESILIENCY_SUBGROUP: int;

const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: int;

const GUID_BATTERY_DISCHARGE_ACTION_3: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: int;

const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: int;

const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: int;

const GUID_BATTERY_DISCHARGE_LEVEL_0: int;

const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: int;

const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: int;

const GUID_VIDEO_DIM_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: int;

const GUID_ACTIVE_POWERSCHEME: int;

const GUID_SYSTEM_AWAYMODE: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: int;

const GUID_PROCESSOR_PERF_TIME_CHECK: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const KdDebuggerNotPresent: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const KdDebuggerEnabled: int;

const sdv_isr_routine: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_pDpcContext: int;

const sdv_harnessDeviceExtension: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const DriverEntryRegPath: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_0_init: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_ISAPNP: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const GUID_BUS_TYPE_ACPI: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const GUID_BUS_TYPE_EISA: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_IRDA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const GUID_BUS_TYPE_MCA: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCI: int;

const WmiGuidInfo: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const GUID_BUS_TYPE_SD: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_HID: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_BUS_TYPE_1394: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const WmiContext: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_BUS_TYPE_SERENUM: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_BUS_TYPE_AVC: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USB: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USBPRINT: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "QueueMessageIrp"} QueueMessageIrp(actual_Extension: int, actual_Irp: int);
  modifies alloc, queued, markedPending, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "QueueMessageIrp"} QueueMessageIrp(actual_Extension: int, actual_Irp: int)
{
  var {:scalar} Tmp_2: int;
  var {:pointer} irpSp: int;
  var {:pointer} Tmp_3: int;
  var {:pointer} Tmp_4: int;
  var {:scalar} OwnerClient: int;
  var {:scalar} origIrql: int;
  var {:scalar} Tmp_6: int;
  var {:pointer} Tmp_7: int;
  var {:pointer} ListToUse: int;
  var {:scalar} CancelIrql: int;
  var {:pointer} Tmp_8: int;
  var {:pointer} Tmp_9: int;
  var {:pointer} Extension: int;
  var {:pointer} Irp: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;

  anon0:
    call {:si_unique_call 1} vslice_dummy_var_1 := __HAVOC_malloc(4);
    Extension := actual_Extension;
    Irp := actual_Irp;
    call {:si_unique_call 2} Tmp_3 := __HAVOC_malloc(48);
    call {:si_unique_call 3} Tmp_7 := __HAVOC_malloc(48);
    call {:si_unique_call 4} irpSp := sdv_IoGetCurrentIrpStackLocation(Irp);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    havoc Tmp_4;
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    havoc OwnerClient;
    call {:si_unique_call 5} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_2 := OwnerClient;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc Tmp_3;
    assume {:nonnull} Tmp_3 != 0;
    assume Tmp_3 > 0;
    Tmp_8 := GetList__IPC_CONTROL(Tmp_3 + Tmp_2 * 24);
    goto L20;

  L20:
    ListToUse := Tmp_8;
    call {:si_unique_call 6} Tmp_9 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    call {:si_unique_call 7} sdv_KeAcquireSpinLock(0, Tmp_9);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    havoc origIrql;
    assume {:nonnull} Irp != 0;
    assume Irp > 0;
    call {:si_unique_call 8} vslice_dummy_var_2 := sdv_InsertTailList(ListToUse, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp))));
    call {:si_unique_call 9} Tmp_9 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    call {:si_unique_call 10} IoAcquireCancelSpinLock(Tmp_9);
    assume {:nonnull} Tmp_9 != 0;
    assume Tmp_9 > 0;
    havoc CancelIrql;
    call {:si_unique_call 11} vslice_dummy_var_3 := sdv_IoSetCancelRoutine(Irp, li2bplFunctionConstant587);
    call {:si_unique_call 12} IoReleaseCancelSpinLock(CancelIrql);
    call {:si_unique_call 13} sdv_KeReleaseSpinLock(0, origIrql);
    call {:si_unique_call 14} HandleIpc#1(Extension);
    return;

  anon3_Then:
    Tmp_6 := OwnerClient;
    assume {:nonnull} Extension != 0;
    assume Extension > 0;
    havoc Tmp_7;
    assume {:nonnull} Tmp_7 != 0;
    assume Tmp_7 > 0;
    Tmp_8 := PutList__IPC_CONTROL(Tmp_7 + Tmp_6 * 24);
    goto L20;
}



procedure {:origName "QueueLoopbackMessageIrp"} QueueLoopbackMessageIrp(actual_Extension_1: int, actual_Irp_1: int);
  modifies alloc, queued, markedPending, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "QueueLoopbackMessageIrp"} QueueLoopbackMessageIrp(actual_Extension_1: int, actual_Irp_1: int)
{
  var {:pointer} irpSp_1: int;
  var {:scalar} OwnerClient_1: int;
  var {:scalar} origIrql_1: int;
  var {:pointer} Tmp_11: int;
  var {:pointer} Tmp_12: int;
  var {:scalar} Tmp_13: int;
  var {:scalar} Tmp_14: int;
  var {:pointer} ListToUse_1: int;
  var {:scalar} CancelIrql_1: int;
  var {:pointer} Tmp_15: int;
  var {:pointer} Extension_1: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 15} vslice_dummy_var_4 := __HAVOC_malloc(4);
    Extension_1 := actual_Extension_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 16} Tmp_11 := __HAVOC_malloc(48);
    call {:si_unique_call 17} irpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    havoc Tmp_12;
    assume {:nonnull} Tmp_12 != 0;
    assume Tmp_12 > 0;
    havoc OwnerClient_1;
    call {:si_unique_call 18} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} OwnerClient_1 != 0;
    Tmp_14 := 0;
    goto L20;

  L20:
    Tmp_13 := Tmp_14;
    assume {:nonnull} Extension_1 != 0;
    assume Extension_1 > 0;
    havoc Tmp_11;
    assume {:nonnull} Tmp_11 != 0;
    assume Tmp_11 > 0;
    ListToUse_1 := PutList__IPC_CONTROL(Tmp_11 + Tmp_13 * 24);
    call {:si_unique_call 19} Tmp_15 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    call {:si_unique_call 20} sdv_KeAcquireSpinLock(0, Tmp_15);
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc origIrql_1;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 21} vslice_dummy_var_5 := sdv_InsertTailList(ListToUse_1, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_1))));
    call {:si_unique_call 22} Tmp_15 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    call {:si_unique_call 23} IoAcquireCancelSpinLock(Tmp_15);
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc CancelIrql_1;
    call {:si_unique_call 24} vslice_dummy_var_6 := sdv_IoSetCancelRoutine(Irp_1, li2bplFunctionConstant587);
    call {:si_unique_call 25} IoReleaseCancelSpinLock(CancelIrql_1);
    call {:si_unique_call 26} sdv_KeReleaseSpinLock(0, origIrql_1);
    call {:si_unique_call 27} HandleIpc#1(Extension_1);
    return;

  anon3_Then:
    assume {:partition} OwnerClient_1 == 0;
    Tmp_14 := 1;
    goto L20;
}



procedure {:origName "GetUsableIrp"} GetUsableIrp(actual_List: int) returns (Tmp_31: int);
  modifies alloc;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} Tmp_31 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "GetUsableIrp"} GetUsableIrp(actual_List: int) returns (Tmp_31: int)
{
  var {:pointer} Irp_2: int;
  var {:scalar} sdv_14: int;
  var {:pointer} sdv_16: int;
  var {:pointer} ListElement: int;
  var {:pointer} List: int;

  anon0:
    List := actual_List;
    goto L5;

  L5:
    call {:si_unique_call 28} Irp_2, sdv_14, sdv_16, ListElement := GetUsableIrp_loop_L5(Irp_2, sdv_14, sdv_16, ListElement, List);
    goto L5_last;

  L5_last:
    call {:si_unique_call 31} sdv_14 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_14 != 0;
    Tmp_31 := 0;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} sdv_14 == 0;
    call {:si_unique_call 29} ListElement := RemoveTailList(List);
    call {:si_unique_call 30} sdv_16 := sdv_containing_record(ListElement, 88);
    Irp_2 := sdv_16;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    Irp_2 := 0;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    Tmp_31 := Irp_2;
    goto L1;
}



procedure {:origName "EmptyIpcQueue"} EmptyIpcQueue(actual_DeviceExtension_1: int, actual_List_1: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "EmptyIpcQueue"} EmptyIpcQueue(actual_DeviceExtension_1: int, actual_List_1: int)
{
  var {:pointer} Irp_3: int;
  var {:pointer} Tmp_33: int;
  var {:scalar} origIrql_3: int;
  var {:scalar} CancelIrql_3: int;
  var {:pointer} DeviceExtension_1: int;
  var {:pointer} List_1: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 32} vslice_dummy_var_7 := __HAVOC_malloc(4);
    DeviceExtension_1 := actual_DeviceExtension_1;
    List_1 := actual_List_1;
    call {:si_unique_call 33} Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    call {:si_unique_call 34} sdv_KeAcquireSpinLock(0, Tmp_33);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    havoc origIrql_3;
    call {:si_unique_call 35} Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    call {:si_unique_call 36} IoAcquireCancelSpinLock(Tmp_33);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    havoc CancelIrql_3;
    call {:si_unique_call 37} Irp_3 := GetUsableIrp(List_1);
    goto L16;

  L16:
    call {:si_unique_call 38} Irp_3, Tmp_33, origIrql_3, CancelIrql_3, vslice_dummy_var_8 := EmptyIpcQueue_loop_L16(Irp_3, Tmp_33, origIrql_3, CancelIrql_3, DeviceExtension_1, List_1, vslice_dummy_var_8);
    goto L16_last;

  L16_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Irp_3 != 0;
    call {:si_unique_call 39} vslice_dummy_var_8 := sdv_IoSetCancelRoutine(Irp_3, 0);
    call {:si_unique_call 40} IoReleaseCancelSpinLock(CancelIrql_3);
    call {:si_unique_call 41} sdv_KeReleaseSpinLock(0, origIrql_3);
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    havoc vslice_dummy_var_0;
    call {:si_unique_call 42} RemoveReferenceAndCompleteRequest(vslice_dummy_var_0, Irp_3, -1073741536);
    call {:si_unique_call 43} Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    call {:si_unique_call 44} sdv_KeAcquireSpinLock(0, Tmp_33);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    havoc origIrql_3;
    call {:si_unique_call 45} Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    call {:si_unique_call 46} IoAcquireCancelSpinLock(Tmp_33);
    assume {:nonnull} Tmp_33 != 0;
    assume Tmp_33 > 0;
    havoc CancelIrql_3;
    call {:si_unique_call 47} Irp_3 := GetUsableIrp(List_1);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} Irp_3 == 0;
    call {:si_unique_call 48} IoReleaseCancelSpinLock(CancelIrql_3);
    call {:si_unique_call 49} sdv_KeReleaseSpinLock(0, origIrql_3);
    return;
}



procedure {:origName "UniIoControl"} UniIoControl(actual_DeviceObject: int, actual_Irp_4: int) returns (Tmp_35: int);
  modifies alloc, queued, stack_location, yogi_error, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniIoControl"} UniIoControl(actual_DeviceObject: int, actual_Irp_4: int) returns (Tmp_35: int)
{
  var {:pointer} nextSp: int;
  var {:pointer} Tmp_36: int;
  var {:pointer} Tmp_37: int;
  var {:pointer} Tmp_38: int;
  var {:pointer} Tmp_39: int;
  var {:pointer} Tmp_40: int;
  var {:scalar} ServerState: int;
  var {:pointer} Tmp_41: int;
  var {:scalar} Tmp_42: int;
  var {:pointer} Tmp_43: int;
  var {:pointer} WakeIrp: int;
  var {:scalar} Tmp_44: int;
  var {:scalar} sdv_20: int;
  var {:pointer} Tmp_46: int;
  var {:scalar} Tmp_47: int;
  var {:pointer} Tmp_49: int;
  var {:scalar} Tmp_50: int;
  var {:pointer} irpSp_2: int;
  var {:scalar} Tmp_51: int;
  var {:pointer} Tmp_52: int;
  var {:pointer} ModemMessage: int;
  var {:scalar} PurgeFlags: int;
  var {:scalar} Tmp_53: int;
  var {:pointer} Tmp_54: int;
  var {:pointer} Tmp_55: int;
  var {:pointer} Tmp_56: int;
  var {:scalar} SerialConfigSize: int;
  var {:pointer} Tmp_57: int;
  var {:pointer} sdv_25: int;
  var {:scalar} Function: int;
  var {:scalar} Function_1: int;
  var {:pointer} Tmp_58: int;
  var {:scalar} Tmp_59: int;
  var {:pointer} Tmp_60: int;
  var {:pointer} localConf: int;
  var {:pointer} Tmp_61: int;
  var {:scalar} OwnerClient_2: int;
  var {:pointer} Tmp_62: int;
  var {:pointer} Tmp_63: int;
  var {:scalar} origIrql_4: int;
  var {:scalar} CancelIrql_4: int;
  var {:pointer} sdv_29: int;
  var {:pointer} Tmp_64: int;
  var {:pointer} ModemMessage_1: int;
  var {:pointer} Tmp_65: int;
  var {:pointer} Tmp_67: int;
  var {:pointer} Tmp_68: int;
  var {:pointer} sdv_33: int;
  var {:scalar} BytesToTransfer: int;
  var {:scalar} Tmp_69: int;
  var {:scalar} sdv_34: int;
  var {:pointer} Tmp_70: int;
  var {:scalar} sdv_35: int;
  var {:pointer} Tmp_71: int;
  var {:pointer} OldIrp: int;
  var {:pointer} WaitIrp: int;
  var {:scalar} Function_2: int;
  var {:scalar} Tmp_72: int;
  var {:pointer} Tmp_73: int;
  var {:scalar} sdv_36: int;
  var {:scalar} status: int;
  var {:scalar} Tmp_74: int;
  var {:scalar} CancelIrql_5: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} Tmp_76: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} Function_3: int;
  var {:pointer} Tmp_78: int;
  var {:pointer} extension: int;
  var {:pointer} Tmp_79: int;
  var {:pointer} Tmp_80: int;
  var {:pointer} ModemMessage_2: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp_4: int;
  var boogieTmp: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    Irp_4 := actual_Irp_4;
    call {:si_unique_call 50} Tmp_37 := __HAVOC_malloc(48);
    call {:si_unique_call 51} Tmp_38 := __HAVOC_malloc(48);
    call {:si_unique_call 52} Tmp_39 := __HAVOC_malloc(48);
    call {:si_unique_call 53} Tmp_43 := __HAVOC_malloc(48);
    call {:si_unique_call 54} Tmp_49 := __HAVOC_malloc(72);
    call {:si_unique_call 55} Tmp_54 := __HAVOC_malloc(48);
    call {:si_unique_call 56} Tmp_55 := __HAVOC_malloc(48);
    call {:si_unique_call 57} Tmp_56 := __HAVOC_malloc(48);
    call {:si_unique_call 58} Tmp_62 := __HAVOC_malloc(48);
    call {:si_unique_call 59} vslice_dummy_var_12 := __HAVOC_malloc(48);
    call {:si_unique_call 60} Tmp_67 := __HAVOC_malloc(4);
    call {:si_unique_call 61} Tmp_70 := __HAVOC_malloc(48);
    call {:si_unique_call 62} Tmp_75 := __HAVOC_malloc(48);
    call {:si_unique_call 63} Tmp_79 := __HAVOC_malloc(48);
    call {:si_unique_call 64} Tmp_80 := __HAVOC_malloc(48);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc extension;
    call {:si_unique_call 65} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_4);
    call {:si_unique_call 66} status := CheckStateAndAddReference(DeviceObject, Irp_4);
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} status != 0;
    Tmp_35 := status;
    goto L1;

  L1:
    call {:si_unique_call 67} SLIC_UniIoControl_exit(strConst__li2bpl0, Tmp_35);
    goto anon297_Then, anon297_Else;

  anon297_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon297_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon211_Then:
    assume {:partition} status == 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc Tmp_58;
    assume {:nonnull} Tmp_58 != 0;
    assume Tmp_58 > 0;
    havoc OwnerClient_2;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    status := -1073741811;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon298_Then, anon298_Else;

  anon298_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon296_Then, anon296_Else;

  anon296_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon295_Then, anon295_Else;

  anon295_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon294_Then, anon294_Else;

  anon294_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon293_Then, anon293_Else;

  anon293_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon292_Then, anon292_Else;

  anon292_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon291_Then, anon291_Else;

  anon291_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon290_Then, anon290_Else;

  anon290_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon289_Then, anon289_Else;

  anon289_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon288_Then, anon288_Else;

  anon288_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon287_Then, anon287_Else;

  anon287_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon286_Then, anon286_Else;

  anon286_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon285_Then, anon285_Else;

  anon285_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon284_Then, anon284_Else;

  anon284_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon283_Then, anon283_Else;

  anon283_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon282_Then, anon282_Else;

  anon282_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon281_Then, anon281_Else;

  anon281_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon280_Then, anon280_Else;

  anon280_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon279_Then, anon279_Else;

  anon279_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon278_Then, anon278_Else;

  anon278_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon277_Then, anon277_Else;

  anon277_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon276_Then, anon276_Else;

  anon276_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon275_Then, anon275_Else;

  anon275_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon274_Then, anon274_Else;

  anon274_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon273_Then, anon273_Else;

  anon273_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon272_Then, anon272_Else;

  anon272_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon271_Then, anon271_Else;

  anon271_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon270_Then, anon270_Else;

  anon270_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon269_Then, anon269_Else;

  anon269_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon268_Then, anon268_Else;

  anon268_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon267_Then, anon267_Else;

  anon267_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon266_Then, anon266_Else;

  anon266_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon265_Then, anon265_Else;

  anon265_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon264_Then, anon264_Else;

  anon264_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon263_Then, anon263_Else;

  anon263_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon262_Then, anon262_Else;

  anon262_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon261_Then, anon261_Else;

  anon261_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon260_Then, anon260_Else;

  anon260_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon259_Then, anon259_Else;

  anon259_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon258_Then, anon258_Else;

  anon258_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon257_Then, anon257_Else;

  anon257_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon256_Then, anon256_Else;

  anon256_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon255_Then, anon255_Else;

  anon255_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon254_Then, anon254_Else;

  anon254_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon253_Then, anon253_Else;

  anon253_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon252_Then, anon252_Else;

  anon252_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon251_Then, anon251_Else;

  anon251_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon250_Then, anon250_Else;

  anon250_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon249_Then, anon249_Else;

  anon249_Else:
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} OwnerClient_2 != 1;
    status := -1073741811;
    goto L52;

  L52:
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} status != 259;
    call {:si_unique_call 68} RemoveReferenceAndCompleteRequest(DeviceObject, Irp_4, status);
    goto L53;

  L53:
    call {:si_unique_call 69} RemoveReference(DeviceObject);
    Tmp_35 := status;
    goto L1;

  anon217_Then:
    assume {:partition} status == 259;
    goto L53;

  anon215_Then:
    assume {:partition} OwnerClient_2 == 1;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    status := -1073741789;
    goto L52;

  anon216_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_68;
    assume {:nonnull} Tmp_68 != 0;
    assume Tmp_68 > 0;
    havoc ServerState;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    status := 0;
    goto L52;

  anon249_Then:
    goto L24;

  L24:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc Tmp_57;
    assume {:nonnull} Tmp_57 != 0;
    assume Tmp_57 > 0;
    goto anon299_Then, anon299_Else;

  anon299_Else:
    call {:si_unique_call 70} status := UniSniffOwnerSettings(DeviceObject, Irp_4);
    goto L473;

  L473:
    call {:si_unique_call 71} RemoveReference(DeviceObject);
    Tmp_35 := status;
    goto L1;

  anon299_Then:
    call {:si_unique_call 72} status := UniCheckPassThrough(DeviceObject, Irp_4);
    goto L473;

  anon250_Then:
    Tmp_51 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_56;
    assume {:nonnull} Tmp_56 != 0;
    assume Tmp_56 > 0;
    Tmp_76 := GetList__IPC_CONTROL(Tmp_56 + Tmp_51 * 24);
    call {:si_unique_call 73} EmptyIpcQueue(extension, Tmp_76);
    Tmp_47 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_54;
    assume {:nonnull} Tmp_54 != 0;
    assume Tmp_54 > 0;
    Tmp_40 := PutList__IPC_CONTROL(Tmp_54 + Tmp_47 * 24);
    call {:si_unique_call 74} EmptyIpcQueue(extension, Tmp_40);
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} OwnerClient_2 == 1;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_80;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    Tmp_60 := GetList__IPC_CONTROL(Tmp_80);
    call {:si_unique_call 75} EmptyIpcQueue(extension, Tmp_60);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_55;
    assume {:nonnull} Tmp_55 != 0;
    assume Tmp_55 > 0;
    Tmp_63 := PutList__IPC_CONTROL(Tmp_55);
    call {:si_unique_call 76} EmptyIpcQueue(extension, Tmp_63);
    goto L74;

  L74:
    status := 0;
    goto L52;

  anon218_Then:
    assume {:partition} OwnerClient_2 != 1;
    goto L74;

  anon251_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon219_Then, anon219_Else;

  anon219_Else:
    status := -1073741789;
    goto L52;

  anon219_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_41;
    assume {:nonnull} Tmp_41 != 0;
    assume Tmp_41 > 0;
    havoc Function;
    call {:si_unique_call 77} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 78} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    goto anon220_Then, anon220_Else;

  anon220_Else:
    assume {:partition} Function != 0;
    call {:si_unique_call 79} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    status := 259;
    call {:si_unique_call 80} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 81} IoAcquireCancelSpinLock(Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc CancelIrql_5;
    call {:si_unique_call 82} vslice_dummy_var_9 := sdv_IoSetCancelRoutine(Irp_4, li2bplFunctionConstant1651);
    call {:si_unique_call 83} IoReleaseCancelSpinLock(CancelIrql_5);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 84} sdv_25 := _InlineInterlockedExchangePointer(WakeUpIrp__DEVICE_EXTENSION(extension), Irp_4);
    WakeIrp := sdv_25;
    goto L115;

  L115:
    goto anon221_Then, anon221_Else;

  anon221_Else:
    assume {:partition} WakeIrp != 0;
    call {:si_unique_call 85} sdv_36 := HasIrpBeenCanceled(WakeIrp);
    goto anon222_Then, anon222_Else;

  anon222_Else:
    assume {:partition} sdv_36 != 0;
    WakeIrp := 0;
    goto L116;

  L116:
    call {:si_unique_call 86} sdv_KeReleaseSpinLock(0, origIrql_4);
    goto anon223_Then, anon223_Else;

  anon223_Else:
    assume {:partition} WakeIrp != 0;
    assume {:nonnull} WakeIrp != 0;
    assume WakeIrp > 0;
    call {:si_unique_call 87} RemoveReferenceAndCompleteRequest(DeviceObject, WakeIrp, -1073741536);
    goto L52;

  anon223_Then:
    assume {:partition} WakeIrp == 0;
    goto L52;

  anon222_Then:
    assume {:partition} sdv_36 == 0;
    goto L116;

  anon221_Then:
    assume {:partition} WakeIrp == 0;
    goto L116;

  anon220_Then:
    assume {:partition} Function == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 88} sdv_33 := _InlineInterlockedExchangePointer(WakeUpIrp__DEVICE_EXTENSION(extension), 0);
    WakeIrp := sdv_33;
    status := 0;
    goto L115;

  anon252_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon224_Then, anon224_Else;

  anon224_Else:
    status := -1073741789;
    goto L52;

  anon224_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_78;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    havoc Function_2;
    goto anon314_Then, anon314_Else;

  anon314_Else:
    assume {:partition} Function_2 != 0;
    Tmp_69 := 5;
    goto L139;

  L139:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon315_Then, anon315_Else;

  anon315_Else:
    assume {:partition} Function_2 != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon225_Then, anon225_Else;

  anon225_Else:
    call {:si_unique_call 89} PoUnregisterSystemState(0);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L145;

  L145:
    status := 0;
    goto L52;

  anon225_Then:
    goto L145;

  anon315_Then:
    assume {:partition} Function_2 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 90} boogieTmp := PoRegisterSystemState(0, 1);
    goto L145;

  anon314_Then:
    assume {:partition} Function_2 == 0;
    Tmp_69 := 1;
    goto L139;

  anon253_Then:
    status := 0;
    goto L52;

  anon254_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc ModemMessage_1;
    goto anon313_Then, anon313_Else;

  anon313_Else:
    assume {:partition} OwnerClient_2 != 1;
    status := -1073741811;
    goto L52;

  anon313_Then:
    assume {:partition} OwnerClient_2 == 1;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon226_Then, anon226_Else;

  anon226_Else:
    status := -1073741789;
    goto L52;

  anon226_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} ModemMessage_1 != 0;
    assume ModemMessage_1 > 0;
    assume {:nonnull} ModemMessage_1 != 0;
    assume ModemMessage_1 > 0;
    status := 259;
    call {:si_unique_call 91} QueueLoopbackMessageIrp(extension, Irp_4);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_79;
    assume {:nonnull} Tmp_79 != 0;
    assume Tmp_79 > 0;
    Tmp_73 := GetList__IPC_CONTROL(Tmp_79);
    call {:si_unique_call 92} EmptyIpcQueue(extension, Tmp_73);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_38;
    assume {:nonnull} Tmp_38 != 0;
    assume Tmp_38 > 0;
    Tmp_65 := PutList__IPC_CONTROL(Tmp_38);
    call {:si_unique_call 93} EmptyIpcQueue(extension, Tmp_65);
    goto L52;

  anon255_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc ModemMessage_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon312_Then, anon312_Else;

  anon312_Else:
    status := -1073741811;
    goto L52;

  anon312_Then:
    goto anon227_Then, anon227_Else;

  anon227_Else:
    assume {:partition} OwnerClient_2 != 0;
    status := -1073741811;
    goto L52;

  anon227_Then:
    assume {:partition} OwnerClient_2 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon228_Then, anon228_Else;

  anon228_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon229_Then, anon229_Else;

  anon229_Else:
    status := -1073741789;
    goto L52;

  anon229_Then:
    Tmp_72 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_62;
    Tmp_50 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_39;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} Tmp_39 != 0;
    assume Tmp_39 > 0;
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    Tmp_53 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_70;
    assume {:nonnull} ModemMessage_2 != 0;
    assume ModemMessage_2 > 0;
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    Tmp_42 := OwnerClient_2;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_43;
    assume {:nonnull} ModemMessage_2 != 0;
    assume ModemMessage_2 > 0;
    assume {:nonnull} Tmp_43 != 0;
    assume Tmp_43 > 0;
    status := 259;
    call {:si_unique_call 94} QueueMessageIrp(extension, Irp_4);
    goto L52;

  anon228_Then:
    status := -1073741811;
    goto L52;

  anon256_Then:
    status := 259;
    call {:si_unique_call 95} QueueMessageIrp(extension, Irp_4);
    goto L52;

  anon257_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc ModemMessage;
    goto anon309_Then, anon309_Else;

  anon309_Else:
    assume {:partition} OwnerClient_2 != 1;
    status := -1073741811;
    goto L52;

  anon309_Then:
    assume {:partition} OwnerClient_2 == 1;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon230_Then, anon230_Else;

  anon230_Else:
    status := -1073741811;
    goto L52;

  anon230_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon231_Then, anon231_Else;

  anon231_Else:
    status := -1073741789;
    goto L52;

  anon231_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_37;
    assume {:nonnull} ModemMessage != 0;
    assume ModemMessage > 0;
    assume {:nonnull} Tmp_37 != 0;
    assume Tmp_37 > 0;
    goto anon310_Then, anon310_Else;

  anon310_Else:
    goto L213;

  L213:
    status := -1073741823;
    goto L52;

  anon310_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_75;
    assume {:nonnull} ModemMessage != 0;
    assume ModemMessage > 0;
    assume {:nonnull} Tmp_75 != 0;
    assume Tmp_75 > 0;
    goto anon311_Then, anon311_Else;

  anon311_Else:
    status := 259;
    call {:si_unique_call 96} QueueMessageIrp(extension, Irp_4);
    goto L52;

  anon311_Then:
    goto L213;

  anon258_Then:
    call {:si_unique_call 97} nextSp := sdv_IoGetNextIrpStackLocation(Irp_4);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon232_Then, anon232_Else;

  anon232_Else:
    status := -1073741789;
    goto L52;

  anon232_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    assume {:nonnull} nextSp != 0;
    assume nextSp > 0;
    call {:si_unique_call 98} sdv_IoSetCompletionRoutine(Irp_4, li2bplFunctionConstant1652, extension, 1, 1, 1);
    call {:si_unique_call 99} sdv_IoMarkIrpPending(0);
    status := 259;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon308_Then, anon308_Else;

  anon308_Else:
    assume Irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 100} SLIC_sdv_IoCallDriver_entry(0);
    goto L596;

  L596:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_1;
    call {:si_unique_call 101} vslice_dummy_var_11 := sdv_IoCallDriver(vslice_dummy_var_1, Irp_4);
    goto L52;

  anon308_Then:
    assume !(Irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L596;

  anon259_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon233_Then, anon233_Else;

  anon233_Else:
    status := -1073741789;
    goto L52;

  anon233_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_52;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    havoc Function_3;
    goto anon307_Then, anon307_Else;

  anon307_Else:
    assume {:partition} Function_3 == 1;
    call {:si_unique_call 102} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 103} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 104} sdv_KeReleaseSpinLock(0, origIrql_4);
    status := 0;
    goto L52;

  anon307_Then:
    assume {:partition} Function_3 != 1;
    goto anon234_Then, anon234_Else;

  anon234_Else:
    assume {:partition} Function_3 == 0;
    call {:si_unique_call 105} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 106} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 107} sdv_KeReleaseSpinLock(0, origIrql_4);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 108} CleanUpQueuedIrps(WriteIrpControl__DEVICE_EXTENSION(extension), 0);
    status := 0;
    goto L52;

  anon234_Then:
    assume {:partition} Function_3 != 0;
    status := -1073741811;
    goto L52;

  anon260_Then:
    call {:si_unique_call 109} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 110} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon235_Then, anon235_Else;

  anon235_Else:
    OldIrp := 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 111} sdv_29 := _InlineInterlockedExchangePointer(DleWaitIrp__DEVICE_EXTENSION(extension), 0);
    OldIrp := sdv_29;
    goto anon305_Then, anon305_Else;

  anon305_Else:
    assume {:partition} OldIrp != 0;
    call {:si_unique_call 112} sdv_20 := HasIrpBeenCanceled(OldIrp);
    goto anon237_Then, anon237_Else;

  anon237_Else:
    assume {:partition} sdv_20 != 0;
    OldIrp := 0;
    goto L285;

  L285:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon236_Then, anon236_Else;

  anon236_Else:
    call {:si_unique_call 113} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    status := 259;
    call {:si_unique_call 114} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 115} IoAcquireCancelSpinLock(Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc CancelIrql_4;
    call {:si_unique_call 116} vslice_dummy_var_10 := sdv_IoSetCancelRoutine(Irp_4, li2bplFunctionConstant1653);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 117} IoReleaseCancelSpinLock(CancelIrql_4);
    call {:si_unique_call 118} sdv_KeReleaseSpinLock(0, origIrql_4);
    goto anon239_Then, anon239_Else;

  anon239_Else:
    assume {:partition} OldIrp != 0;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    call {:si_unique_call 119} RemoveReferenceAndCompleteRequest(DeviceObject, OldIrp, -1073741536);
    goto L52;

  anon239_Then:
    assume {:partition} OldIrp == 0;
    goto L52;

  anon236_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon238_Then, anon238_Else;

  anon238_Else:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_74;
    goto L296;

  L296:
    BytesToTransfer := Tmp_74;
    call {:si_unique_call 120} sdv_RtlCopyMemory(0, 0, BytesToTransfer);
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 121} sdv_KeReleaseSpinLock(0, origIrql_4);
    status := 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto anon306_Then, anon306_Else;

  anon306_Else:
    assume {:partition} OldIrp != 0;
    assume {:nonnull} OldIrp != 0;
    assume OldIrp > 0;
    call {:si_unique_call 122} RemoveReferenceAndCompleteRequest(DeviceObject, OldIrp, -1073741536);
    goto L52;

  anon306_Then:
    assume {:partition} OldIrp == 0;
    goto L52;

  anon238_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc Tmp_74;
    goto L296;

  anon237_Then:
    assume {:partition} sdv_20 == 0;
    goto L285;

  anon305_Then:
    assume {:partition} OldIrp == 0;
    goto L285;

  anon235_Then:
    call {:si_unique_call 123} sdv_KeReleaseSpinLock(0, origIrql_4);
    status := -1073741811;
    goto L52;

  anon261_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon240_Then, anon240_Else;

  anon240_Else:
    status := -1073741789;
    goto L52;

  anon240_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_46;
    assume {:nonnull} Tmp_46 != 0;
    assume Tmp_46 > 0;
    havoc Function_1;
    goto anon304_Then, anon304_Else;

  anon304_Else:
    assume {:partition} Function_1 == 1;
    call {:si_unique_call 124} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 125} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 126} sdv_KeReleaseSpinLock(0, origIrql_4);
    status := 0;
    goto L52;

  anon304_Then:
    assume {:partition} Function_1 != 1;
    goto anon241_Then, anon241_Else;

  anon241_Else:
    assume {:partition} Function_1 == 0;
    WaitIrp := 0;
    call {:si_unique_call 127} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 128} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon242_Then, anon242_Else;

  anon242_Else:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_2;
    call {:si_unique_call 129} sdv_34 := HasIrpBeenCanceled(vslice_dummy_var_2);
    goto anon243_Then, anon243_Else;

  anon243_Else:
    assume {:partition} sdv_34 == 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc WaitIrp;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L363;

  L363:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 130} sdv_KeReleaseSpinLock(0, origIrql_4);
    goto anon244_Then, anon244_Else;

  anon244_Else:
    assume {:partition} WaitIrp != 0;
    assume {:nonnull} WaitIrp != 0;
    assume WaitIrp > 0;
    call {:si_unique_call 131} RemoveReferenceAndCompleteRequest(DeviceObject, WaitIrp, 0);
    goto L376;

  L376:
    status := 0;
    goto L52;

  anon244_Then:
    assume {:partition} WaitIrp == 0;
    goto L376;

  anon243_Then:
    assume {:partition} sdv_34 != 0;
    goto L363;

  anon242_Then:
    goto L363;

  anon241_Then:
    assume {:partition} Function_1 != 0;
    status := -1073741811;
    goto L52;

  anon262_Then:
    goto L25;

  L25:
    call {:si_unique_call 132} status := UniNoCheckPassThrough(DeviceObject, Irp_4);
    call {:si_unique_call 133} RemoveReference(DeviceObject);
    Tmp_35 := status;
    goto L1;

  anon263_Then:
    goto L25;

  anon264_Then:
    goto L24;

  anon265_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc localConf;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon303_Then, anon303_Else;

  anon303_Else:
    status := -1073741789;
    goto L52;

  anon303_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    call {:si_unique_call 134} Tmp_64 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    call {:si_unique_call 135} sdv_KeAcquireSpinLock(0, Tmp_64);
    assume {:nonnull} Tmp_64 != 0;
    assume Tmp_64 > 0;
    havoc origIrql_4;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    havoc Tmp_67;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc vslice_dummy_var_3;
    call {:si_unique_call 136} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_3);
    call {:si_unique_call 137} sdv_KeReleaseSpinLock(0, origIrql_4);
    status := 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    assume {:nonnull} localConf != 0;
    assume localConf > 0;
    goto L52;

  anon266_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    status := -1073741789;
    goto L52;

  anon214_Then:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc SerialConfigSize;
    goto anon302_Then, anon302_Else;

  anon302_Else:
    assume {:partition} SerialConfigSize > -1;
    status := -1073741670;
    goto L52;

  anon302_Then:
    assume {:partition} -1 >= SerialConfigSize;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_61;
    assume {:nonnull} Tmp_61 != 0;
    assume Tmp_61 > 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    status := 0;
    goto L52;

  anon267_Then:
    goto L24;

  anon268_Then:
    goto L25;

  anon269_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon245_Then, anon245_Else;

  anon245_Else:
    call {:si_unique_call 138} status := UniNoCheckPassThrough(DeviceObject, Irp_4);
    call {:si_unique_call 139} RemoveReference(DeviceObject);
    Tmp_35 := status;
    goto L1;

  anon245_Then:
    status := -1073741789;
    goto L52;

  anon213_Then:
    call {:si_unique_call 140} sdv_35 := sdv_KeGetCurrentIrql();
    goto anon246_Then, anon246_Else;

  anon246_Else:
    assume {:partition} 1 >= sdv_35;
    call {:si_unique_call 141} status := GetPropertiesHandler(DeviceObject, Irp_4);
    call {:si_unique_call 142} RemoveReference(DeviceObject);
    Tmp_35 := status;
    goto L1;

  anon246_Then:
    assume {:partition} sdv_35 > 1;
    status := -1073741808;
    goto L52;

  anon270_Then:
    goto L24;

  anon271_Then:
    goto L25;

  anon272_Then:
    goto L25;

  anon273_Then:
    goto L24;

  anon274_Then:
    goto L25;

  anon275_Then:
    goto L24;

  anon276_Then:
    goto L25;

  anon277_Then:
    goto L25;

  anon278_Then:
    goto L25;

  anon279_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon247_Then, anon247_Else;

  anon247_Else:
    status := -1073741789;
    goto L52;

  anon247_Then:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_71;
    assume {:nonnull} Tmp_71 != 0;
    assume Tmp_71 > 0;
    havoc PurgeFlags;
    goto anon301_Then, anon301_Else;

  anon301_Else:
    assume {:partition} BAND(PurgeFlags, 5) != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 143} MarkQueueToEmpty(WriteIrpControl__DEVICE_EXTENSION(extension));
    goto L445;

  L445:
    goto anon248_Then, anon248_Else;

  anon248_Else:
    assume {:partition} BAND(PurgeFlags, 10) != 0;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    call {:si_unique_call 144} MarkQueueToEmpty(ReadIrpControl__DEVICE_EXTENSION(extension));
    goto L24;

  anon248_Then:
    assume {:partition} BAND(PurgeFlags, 10) == 0;
    goto L24;

  anon301_Then:
    assume {:partition} BAND(PurgeFlags, 5) == 0;
    goto L445;

  anon280_Then:
    goto L24;

  anon281_Then:
    goto L24;

  anon282_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    status := -1073741789;
    goto L52;

  anon212_Then:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    havoc Tmp_36;
    assume {:nonnull} Tmp_36 != 0;
    assume Tmp_36 > 0;
    goto anon300_Then, anon300_Else;

  anon300_Else:
    Tmp_44 := 1;
    goto L457;

  L457:
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc Tmp_77;
    Tmp_59 := Tmp_44;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    havoc Tmp_49;
    assume {:nonnull} Tmp_49 != 0;
    assume Tmp_49 > 0;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    status := 0;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    goto L52;

  anon300_Then:
    Tmp_44 := 0;
    goto L457;

  anon283_Then:
    goto L24;

  anon284_Then:
    goto L24;

  anon285_Then:
    goto L24;

  anon286_Then:
    goto L24;

  anon287_Then:
    goto L24;

  anon288_Then:
    goto L24;

  anon289_Then:
    goto L24;

  anon290_Then:
    goto L25;

  anon291_Then:
    goto L24;

  anon292_Then:
    goto L24;

  anon293_Then:
    goto L24;

  anon294_Then:
    goto L24;

  anon295_Then:
    goto L24;

  anon296_Then:
    goto L25;

  anon298_Then:
    goto L24;
}



procedure {:origName "GetPropertiesHandler"} GetPropertiesHandler(actual_DeviceObject_1: int, actual_Irp_5: int) returns (Tmp_81: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "GetPropertiesHandler"} GetPropertiesHandler(actual_DeviceObject_1: int, actual_Irp_5: int) returns (Tmp_81: int)
{
  var {:scalar} LengthOfString: int;
  var {:scalar} LengthOfString_1: int;
  var {:scalar} accessMask: int;
  var {:pointer} localCaps: int;
  var {:scalar} maxName: int;
  var {:scalar} LengthOfString_2: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} irpSp_3: int;
  var {:scalar} Tmp_84: int;
  var {:pointer} Tmp_85: int;
  var {:pointer} Tmp_86: int;
  var {:scalar} junkLength: int;
  var {:scalar} Tmp_88: int;
  var {:scalar} currentOffset: int;
  var {:pointer} sdv_43: int;
  var {:scalar} endingOffset: int;
  var {:scalar} sdv_45: int;
  var {:pointer} Tmp_89: int;
  var {:scalar} Tmp_91: int;
  var {:pointer} Tmp_92: int;
  var {:scalar} valueEntryName: int;
  var {:scalar} status_1: int;
  var {:pointer} currentLocation: int;
  var {:pointer} Tmp_93: int;
  var {:scalar} Tmp_94: int;
  var {:pointer} extension_1: int;
  var {:pointer} partialInf: int;
  var {:pointer} Tmp_95: int;
  var {:pointer} Tmp_96: int;
  var {:pointer} localProp: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;

  anon0:
    call {:si_unique_call 145} valueEntryName := __HAVOC_malloc(12);
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 146} Tmp_82 := __HAVOC_malloc(4);
    call {:si_unique_call 147} Tmp_86 := __HAVOC_malloc(4);
    call {:si_unique_call 148} Tmp_89 := __HAVOC_malloc(52);
    call {:si_unique_call 149} Tmp_92 := __HAVOC_malloc(24);
    call {:si_unique_call 150} Tmp_93 := __HAVOC_malloc(4);
    call {:si_unique_call 151} Tmp_95 := __HAVOC_malloc(32);
    call {:si_unique_call 152} Tmp_96 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc extension_1;
    call {:si_unique_call 153} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc localProp;
    assume {:nonnull} localProp != 0;
    assume localProp > 0;
    havoc Tmp_96;
    localCaps := Tmp_96;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc vslice_dummy_var_4;
    call {:si_unique_call 154} status_1 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_4, Irp_5, 1);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_1 >= 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc maxName;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc maxName;
    goto L29;

  L29:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc maxName;
    goto L31;

  L31:
    maxName := maxName + 2;
    Tmp_91 := 16 + maxName;
    call {:si_unique_call 155} sdv_43 := ExAllocatePoolWithTag(1, Tmp_91, -851161771);
    partialInf := sdv_43;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} partialInf != 0;
    accessMask := 2032127;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc currentLocation;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    havoc endingOffset;
    currentOffset := 60;
    currentOffset := currentOffset + 76;
    call {:si_unique_call 156} sdv_45 := IoOpenDeviceRegistryKey(0, 2, accessMask, 0);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_45 >= 0;
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    Tmp_89 := strConst__li2bpl1;
    call {:si_unique_call 157} RtlInitUnicodeString(valueEntryName, Tmp_89);
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc Tmp_84;
    call {:si_unique_call 158} Tmp_85 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    call {:si_unique_call 159} status_1 := ZwQueryValueKey(0, 0, 2, 0, Tmp_84, Tmp_85);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    havoc junkLength;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_1 == 0;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc LengthOfString_2;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc Tmp_93;
    call {:si_unique_call 160} sdv_RtlCopyMemory(0, 0, LengthOfString_2);
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    havoc currentOffset;
    goto L61;

  L61:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    Tmp_92 := strConst__li2bpl2;
    call {:si_unique_call 161} RtlInitUnicodeString(valueEntryName, Tmp_92);
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc Tmp_88;
    call {:si_unique_call 162} Tmp_85 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    call {:si_unique_call 163} status_1 := ZwQueryValueKey(0, 0, 2, 0, Tmp_88, Tmp_85);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    havoc junkLength;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} status_1 == 0;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc LengthOfString;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc Tmp_86;
    call {:si_unique_call 164} sdv_RtlCopyMemory(0, 0, LengthOfString);
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    havoc currentOffset;
    goto L84;

  L84:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    Tmp_95 := strConst__li2bpl3;
    call {:si_unique_call 165} RtlInitUnicodeString(valueEntryName, Tmp_95);
    assume {:nonnull} extension_1 != 0;
    assume extension_1 > 0;
    havoc Tmp_94;
    call {:si_unique_call 166} Tmp_85 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    call {:si_unique_call 167} status_1 := ZwQueryValueKey(0, 0, 2, 0, Tmp_94, Tmp_85);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    havoc junkLength;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_1 == 0;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc LengthOfString_1;
    assume {:nonnull} partialInf != 0;
    assume partialInf > 0;
    havoc Tmp_82;
    call {:si_unique_call 168} sdv_RtlCopyMemory(0, 0, LengthOfString_1);
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    havoc currentOffset;
    goto L107;

  L107:
    call {:si_unique_call 169} vslice_dummy_var_13 := ZwClose(0);
    goto L55;

  L55:
    call {:si_unique_call 170} sdv_ExFreePool(0);
    partialInf := 0;
    goto L39;

  L39:
    assume {:nonnull} localProp != 0;
    assume localProp > 0;
    assume {:nonnull} localCaps != 0;
    assume localCaps > 0;
    assume {:nonnull} localProp != 0;
    assume localProp > 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    assume {:nonnull} localProp != 0;
    assume localProp > 0;
    goto L22;

  L22:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc status_1;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc vslice_dummy_var_5;
    call {:si_unique_call 171} RemoveReferenceAndCompleteRequest(DeviceObject_1, Irp_5, vslice_dummy_var_5);
    Tmp_81 := status_1;
    return;

  anon49_Then:
    goto L107;

  anon48_Then:
    assume {:partition} status_1 != 0;
    goto L107;

  anon47_Then:
    goto L107;

  anon43_Then:
    goto L107;

  anon46_Then:
    goto L84;

  anon45_Then:
    assume {:partition} status_1 != 0;
    goto L84;

  anon44_Then:
    goto L84;

  anon39_Then:
    goto L84;

  anon42_Then:
    goto L61;

  anon41_Then:
    assume {:partition} status_1 != 0;
    goto L61;

  anon40_Then:
    goto L61;

  anon38_Then:
    goto L61;

  anon37_Then:
    assume {:partition} 0 > sdv_45;
    goto L55;

  anon51_Then:
    assume {:partition} partialInf == 0;
    goto L39;

  anon36_Then:
    goto L31;

  anon50_Then:
    goto L29;

  anon35_Then:
    assume {:partition} 0 > status_1;
    goto L22;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 172} vslice_dummy_var_14 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "UniRundownShuttledWait"} UniRundownShuttledWait(actual_Extension_2: int, actual_ShuttlePointer: int, actual_ReferenceMask: int, actual_IrpToRunDown: int, actual_DeviceLockIrql: int, actual_StatusToComplete: int, actual_MaskCompleteValue: int);
  modifies alloc, queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniRundownShuttledWait"} UniRundownShuttledWait(actual_Extension_2: int, actual_ShuttlePointer: int, actual_ReferenceMask: int, actual_IrpToRunDown: int, actual_DeviceLockIrql: int, actual_StatusToComplete: int, actual_MaskCompleteValue: int)
{
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} cancelIrql: int;
  var {:pointer} irpSp_4: int;
  var {:pointer} sdv_48: int;
  var {:scalar} actuallyCompleteIt: int;
  var {:pointer} s_p_e_c_i_a_l_2: int;
  var {:scalar} s_p_e_c_i_a_l_3: int;
  var {:pointer} maskValue: int;
  var {:pointer} sdv_50: int;
  var {:pointer} sdv_51: int;
  var {:pointer} sdv_52: int;
  var {:pointer} s_p_e_c_i_a_l_4: int;
  var {:pointer} Tmp_101: int;
  var {:scalar} s_p_e_c_i_a_l_5: int;
  var {:scalar} s_p_e_c_i_a_l_6: int;
  var {:pointer} Extension_2: int;
  var {:pointer} ShuttlePointer: int;
  var {:scalar} ReferenceMask: int;
  var {:pointer} IrpToRunDown: int;
  var {:scalar} DeviceLockIrql: int;
  var {:scalar} StatusToComplete: int;
  var {:scalar} MaskCompleteValue: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_6: int;

  anon0:
    call {:si_unique_call 173} vslice_dummy_var_15 := __HAVOC_malloc(4);
    Extension_2 := actual_Extension_2;
    ShuttlePointer := actual_ShuttlePointer;
    ReferenceMask := actual_ReferenceMask;
    IrpToRunDown := actual_IrpToRunDown;
    DeviceLockIrql := actual_DeviceLockIrql;
    StatusToComplete := actual_StatusToComplete;
    MaskCompleteValue := actual_MaskCompleteValue;
    call {:si_unique_call 174} vslice_dummy_var_16 := __HAVOC_malloc(176);
    actuallyCompleteIt := 0;
    call {:si_unique_call 175} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(IrpToRunDown);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L16;

  L16:
    s_p_e_c_i_a_l_3 := ReferenceMask;
    call {:si_unique_call 176} sdv_50 := sdv_IoGetCurrentIrpStackLocation(IrpToRunDown);
    assume {:nonnull} sdv_50 != 0;
    assume sdv_50 > 0;
    s_p_e_c_i_a_l_1 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_50)));
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    call {:si_unique_call 177} Tmp_101 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    call {:si_unique_call 178} IoAcquireCancelSpinLock(Tmp_101);
    assume {:nonnull} Tmp_101 != 0;
    assume Tmp_101 > 0;
    havoc cancelIrql;
    assume {:nonnull} IrpToRunDown != 0;
    assume IrpToRunDown > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} IrpToRunDown != 0;
    assume IrpToRunDown > 0;
    s_p_e_c_i_a_l_5 := 2;
    call {:si_unique_call 179} sdv_51 := sdv_IoGetCurrentIrpStackLocation(IrpToRunDown);
    assume {:nonnull} sdv_51 != 0;
    assume sdv_51 > 0;
    s_p_e_c_i_a_l_4 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_51)));
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    goto L27;

  L27:
    call {:si_unique_call 180} IoReleaseCancelSpinLock(cancelIrql);
    assume {:nonnull} ShuttlePointer != 0;
    assume ShuttlePointer > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} ShuttlePointer != 0;
    assume ShuttlePointer > 0;
    s_p_e_c_i_a_l_6 := 1;
    call {:si_unique_call 181} sdv_48 := sdv_IoGetCurrentIrpStackLocation(IrpToRunDown);
    assume {:nonnull} sdv_48 != 0;
    assume sdv_48 > 0;
    s_p_e_c_i_a_l_2 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_48)));
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    goto L40;

  L40:
    call {:si_unique_call 182} sdv_52 := sdv_IoGetCurrentIrpStackLocation(IrpToRunDown);
    assume {:nonnull} sdv_52 != 0;
    assume sdv_52 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    actuallyCompleteIt := 0;
    goto L88;

  L88:
    call {:si_unique_call 183} sdv_KeReleaseSpinLock(0, DeviceLockIrql);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} actuallyCompleteIt != 0;
    assume {:nonnull} IrpToRunDown != 0;
    assume IrpToRunDown > 0;
    havoc maskValue;
    assume {:nonnull} IrpToRunDown != 0;
    assume IrpToRunDown > 0;
    assume {:nonnull} maskValue != 0;
    assume maskValue > 0;
    assume {:nonnull} Extension_2 != 0;
    assume Extension_2 > 0;
    havoc vslice_dummy_var_6;
    call {:si_unique_call 184} RemoveReferenceAndCompleteRequest(vslice_dummy_var_6, IrpToRunDown, StatusToComplete);
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} actuallyCompleteIt == 0;
    goto L1;

  anon14_Then:
    actuallyCompleteIt := 1;
    goto L88;

  anon13_Then:
    goto L40;

  anon12_Then:
    goto L27;

  anon11_Then:
    call {:si_unique_call 185} vslice_dummy_var_17 := corral_nondet();
    goto L16;
}



procedure {:origName "UniMaskStarter"} UniMaskStarter(actual_Extension_3: int) returns (Tmp_114: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_114 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniMaskStarter"} UniMaskStarter(actual_Extension_3: int) returns (Tmp_114: int)
{
  var {:scalar} Tmp_115: int;
  var {:pointer} otherMaskState: int;
  var {:scalar} Tmp_116: int;
  var {:pointer} maskValue_1: int;
  var {:pointer} Tmp_117: int;
  var {:pointer} Tmp_118: int;
  var {:pointer} irpSp_6: int;
  var {:pointer} thisMaskState: int;
  var {:scalar} Tmp_119: int;
  var {:pointer} Tmp_120: int;
  var {:pointer} Tmp_121: int;
  var {:pointer} Tmp_122: int;
  var {:pointer} Tmp_123: int;
  var {:pointer} Tmp_124: int;
  var {:pointer} newIrp: int;
  var {:pointer} Tmp_125: int;
  var {:scalar} ownerHandle: int;
  var {:pointer} Tmp_126: int;
  var {:pointer} Tmp_127: int;
  var {:scalar} origIrql_5: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} maskValue_2: int;
  var {:pointer} Tmp_130: int;
  var {:pointer} origMask: int;
  var {:pointer} Tmp_131: int;
  var {:pointer} savedIrp_1: int;
  var {:pointer} Tmp_132: int;
  var {:pointer} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} Tmp_135: int;
  var {:pointer} Extension_3: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 186} newIrp := __HAVOC_malloc(4);
    Extension_3 := actual_Extension_3;
    call {:si_unique_call 187} Tmp_131 := __HAVOC_malloc(72);
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto L6;

  L6:
    call {:si_unique_call 188} Tmp_115, otherMaskState, Tmp_116, maskValue_1, Tmp_117, Tmp_118, irpSp_6, thisMaskState, Tmp_119, Tmp_120, Tmp_121, Tmp_122, Tmp_123, Tmp_124, Tmp_125, ownerHandle, Tmp_126, Tmp_127, origIrql_5, Tmp_128, Tmp_129, maskValue_2, Tmp_130, origMask, Tmp_131, savedIrp_1, Tmp_132, Tmp_133, Tmp_134, Tmp_135, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20 := UniMaskStarter_loop_L6(Tmp_115, otherMaskState, Tmp_116, maskValue_1, Tmp_117, Tmp_118, irpSp_6, thisMaskState, Tmp_119, Tmp_120, Tmp_121, Tmp_122, Tmp_123, Tmp_124, newIrp, Tmp_125, ownerHandle, Tmp_126, Tmp_127, origIrql_5, Tmp_128, Tmp_129, maskValue_2, Tmp_130, origMask, Tmp_131, savedIrp_1, Tmp_132, Tmp_133, Tmp_134, Tmp_135, Extension_3, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20);
    goto L6_last;

  L6_last:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_29;
    call {:si_unique_call 219} irpSp_6 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_29);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_120;
    assume {:nonnull} Tmp_120 != 0;
    assume Tmp_120 > 0;
    havoc origMask;
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    havoc Tmp_123;
    assume {:nonnull} Tmp_123 != 0;
    assume Tmp_123 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    Tmp_116 := 1;
    goto L17;

  L17:
    ownerHandle := Tmp_116;
    Tmp_119 := ownerHandle;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_131;
    thisMaskState := Tmp_131 + Tmp_119 * 36;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    havoc otherMaskState;
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_124;
    assume {:nonnull} Tmp_124 != 0;
    assume Tmp_124 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_128;
    assume {:nonnull} Tmp_128 != 0;
    assume Tmp_128 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_7;
    call {:si_unique_call 189} UniGetNextIrp(vslice_dummy_var_7, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  L34:
    assume {:nonnull} newIrp != 0;
    assume newIrp > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    Tmp_114 := 259;
    return;

  anon45_Then:
    goto anon45_Then_dummy;

  anon45_Then_dummy:
    assume false;
    return;

  anon44_Then:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_8;
    call {:si_unique_call 190} sdv_IoCopyCurrentIrpStackLocationToNext(vslice_dummy_var_8);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_9;
    call {:si_unique_call 191} sdv_IoSetCompletionRoutine(vslice_dummy_var_9, li2bplFunctionConstant1477, thisMaskState, 1, 1, 1);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_10;
    call {:si_unique_call 192} UNI_SAVE_OLD_SETMASK(vslice_dummy_var_10);
    call {:si_unique_call 193} Tmp_133 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    call {:si_unique_call 194} sdv_KeAcquireSpinLock(0, Tmp_133);
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    havoc origIrql_5;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    Tmp_115 := 48;
    goto L48;

  L48:
    assume {:nonnull} origMask != 0;
    assume origMask > 0;
    assume {:nonnull} otherMaskState != 0;
    assume otherMaskState > 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    havoc savedIrp_1;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    call {:si_unique_call 195} UniRundownShuttledWait(Extension_3, ShuttledWait__MASKSTATE(thisMaskState), 1, savedIrp_1, origIrql_5, 0, 0);
    goto L58;

  L58:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 196} SLIC_sdv_IoCallDriver_entry(0);
    goto L172;

  L172:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_11;
    havoc vslice_dummy_var_12;
    call {:si_unique_call 197} vslice_dummy_var_19 := sdv_IoCallDriver(vslice_dummy_var_11, vslice_dummy_var_12);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_13;
    call {:si_unique_call 198} UniGetNextIrp(vslice_dummy_var_13, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 0);
    goto L34;

  anon48_Then:
    goto L172;

  anon63_Then:
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 199} SetPassdownToComplete(thisMaskState);
    goto L65;

  L65:
    call {:si_unique_call 200} sdv_KeReleaseSpinLock(0, origIrql_5);
    goto L58;

  anon47_Then:
    goto L65;

  anon46_Then:
    Tmp_115 := 0;
    goto L48;

  anon62_Then:
    assume {:nonnull} irpSp_6 != 0;
    assume irpSp_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_134;
    assume {:nonnull} Tmp_134 != 0;
    assume Tmp_134 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_118;
    assume {:nonnull} Tmp_118 != 0;
    assume Tmp_118 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_14;
    call {:si_unique_call 201} UniGetNextIrp(vslice_dummy_var_14, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  anon43_Then:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} ownerHandle != 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L81;

  L81:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_132;
    assume {:nonnull} Tmp_132 != 0;
    assume Tmp_132 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_126;
    assume {:nonnull} Tmp_126 != 0;
    assume Tmp_126 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_15;
    call {:si_unique_call 202} UniGetNextIrp(vslice_dummy_var_15, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  anon52_Then:
    goto L78;

  L78:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} ownerHandle != 0;
    goto L88;

  L88:
    call {:si_unique_call 203} Tmp_133 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    call {:si_unique_call 204} sdv_KeAcquireSpinLock(0, Tmp_133);
    assume {:nonnull} Tmp_133 != 0;
    assume Tmp_133 > 0;
    havoc origIrql_5;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L93;

  L93:
    call {:si_unique_call 205} sdv_KeReleaseSpinLock(0, origIrql_5);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_117;
    assume {:nonnull} Tmp_117 != 0;
    assume Tmp_117 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_135;
    assume {:nonnull} Tmp_135 != 0;
    assume Tmp_135 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_16;
    call {:si_unique_call 206} UniGetNextIrp(vslice_dummy_var_16, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  anon54_Then:
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_127;
    assume {:nonnull} Tmp_127 != 0;
    assume Tmp_127 > 0;
    havoc maskValue_2;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_130;
    assume {:nonnull} Tmp_130 != 0;
    assume Tmp_130 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_122;
    assume {:nonnull} Tmp_122 != 0;
    assume Tmp_122 > 0;
    assume {:nonnull} maskValue_2 != 0;
    assume maskValue_2 > 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    call {:si_unique_call 207} sdv_KeReleaseSpinLock(0, origIrql_5);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_17;
    call {:si_unique_call 208} UniGetNextIrp(vslice_dummy_var_17, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  anon56_Then:
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_121;
    assume {:nonnull} Tmp_121 != 0;
    assume Tmp_121 > 0;
    havoc maskValue_1;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_129;
    assume {:nonnull} Tmp_129 != 0;
    assume Tmp_129 > 0;
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc Tmp_125;
    assume {:nonnull} Tmp_125 != 0;
    assume Tmp_125 > 0;
    assume {:nonnull} maskValue_1 != 0;
    assume maskValue_1 > 0;
    call {:si_unique_call 209} sdv_KeReleaseSpinLock(0, origIrql_5);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_21;
    call {:si_unique_call 210} UniGetNextIrp(vslice_dummy_var_21, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 1);
    goto L34;

  anon57_Then:
    assume {:nonnull} otherMaskState != 0;
    assume otherMaskState > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L131;

  L131:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_22;
    call {:si_unique_call 211} vslice_dummy_var_18 := UniMakeIrpShuttledWait(thisMaskState, vslice_dummy_var_22, origIrql_5, 1, newIrp);
    goto L34;

  anon58_Then:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_23;
    call {:si_unique_call 212} MakeIrpCurrentPassedDown(thisMaskState, vslice_dummy_var_23);
    call {:si_unique_call 213} sdv_KeReleaseSpinLock(0, origIrql_5);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_24;
    call {:si_unique_call 214} sdv_IoCopyCurrentIrpStackLocationToNext(vslice_dummy_var_24);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_25;
    call {:si_unique_call 215} sdv_IoSetCompletionRoutine(vslice_dummy_var_25, li2bplFunctionConstant1478, thisMaskState, 1, 1, 1);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 216} SLIC_sdv_IoCallDriver_entry(0);
    goto L175;

  L175:
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_26;
    havoc vslice_dummy_var_27;
    call {:si_unique_call 217} vslice_dummy_var_20 := sdv_IoCallDriver(vslice_dummy_var_26, vslice_dummy_var_27);
    assume {:nonnull} Extension_3 != 0;
    assume Extension_3 > 0;
    havoc vslice_dummy_var_28;
    call {:si_unique_call 218} UniGetNextIrp(vslice_dummy_var_28, DeviceLock__DEVICE_EXTENSION(Extension_3), CurrentMaskOp__DEVICE_EXTENSION(Extension_3), MaskOps__DEVICE_EXTENSION(Extension_3), newIrp, 0);
    goto L34;

  anon60_Then:
    goto L175;

  anon59_Then:
    goto L131;

  anon55_Then:
    goto L93;

  anon50_Then:
    assume {:partition} ownerHandle == 0;
    assume {:nonnull} thisMaskState != 0;
    assume thisMaskState > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L88;

  anon53_Then:
    goto L81;

  anon51_Then:
    goto L78;

  anon49_Then:
    assume {:partition} ownerHandle == 0;
    goto L78;

  anon61_Then:
    Tmp_116 := 0;
    goto L17;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_21: int;

  anon0:
    call {:si_unique_call 220} vslice_dummy_var_21 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "UniMakeIrpShuttledWait"} UniMakeIrpShuttledWait(actual_MaskState: int, actual_Irp_6: int, actual_OrigIrql_1: int, actual_GetNextIrpInQueue: int, actual_NewIrp: int) returns (Tmp_138: int);
  modifies alloc, queuedWithoutMarking, locked, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_138 == -1073741536 || Tmp_138 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniMakeIrpShuttledWait"} UniMakeIrpShuttledWait(actual_MaskState: int, actual_Irp_6: int, actual_OrigIrql_1: int, actual_GetNextIrpInQueue: int, actual_NewIrp: int) returns (Tmp_138: int)
{
  var {:pointer} Tmp_139: int;
  var {:pointer} s_p_e_c_i_a_l_12: int;
  var {:scalar} cancelIrql_2: int;
  var {:pointer} sdv_64: int;
  var {:pointer} Tmp_141: int;
  var {:pointer} Tmp_142: int;
  var {:pointer} sdv_65: int;
  var {:pointer} s_p_e_c_i_a_l_13: int;
  var {:scalar} s_p_e_c_i_a_l_14: int;
  var {:pointer} Tmp_143: int;
  var {:pointer} sdv_66: int;
  var {:pointer} sdv_68: int;
  var {:pointer} s_p_e_c_i_a_l_15: int;
  var {:pointer} Tmp_144: int;
  var {:pointer} Tmp_145: int;
  var {:pointer} Tmp_146: int;
  var {:pointer} Tmp_147: int;
  var {:scalar} s_p_e_c_i_a_l_16: int;
  var {:pointer} Tmp_149: int;
  var {:pointer} s_p_e_c_i_a_l_17: int;
  var {:pointer} MaskState: int;
  var {:pointer} Irp_6: int;
  var {:scalar} OrigIrql_1: int;
  var {:scalar} GetNextIrpInQueue: int;
  var {:pointer} NewIrp: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;

  anon0:
    MaskState := actual_MaskState;
    Irp_6 := actual_Irp_6;
    OrigIrql_1 := actual_OrigIrql_1;
    GetNextIrpInQueue := actual_GetNextIrpInQueue;
    NewIrp := actual_NewIrp;
    call {:si_unique_call 221} Tmp_141 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    call {:si_unique_call 222} IoAcquireCancelSpinLock(Tmp_141);
    assume {:nonnull} Tmp_141 != 0;
    assume Tmp_141 > 0;
    havoc cancelIrql_2;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 223} IoReleaseCancelSpinLock(cancelIrql_2);
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    call {:si_unique_call 224} sdv_KeReleaseSpinLock(0, OrigIrql_1);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} GetNextIrpInQueue != 0;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_139;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_147;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_149;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_139 != 0;
    assume Tmp_139 > 0;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    havoc vslice_dummy_var_30;
    call {:si_unique_call 225} UniGetNextIrp(vslice_dummy_var_30, DeviceLock__DEVICE_EXTENSION(Tmp_147), CurrentMaskOp__DEVICE_EXTENSION(Tmp_149), MaskOps__DEVICE_EXTENSION(Tmp_146), NewIrp, 1);
    goto L20;

  L20:
    Tmp_138 := -1073741536;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} GetNextIrpInQueue == 0;
    goto L20;

  anon7_Then:
    call {:si_unique_call 226} sdv_IoMarkIrpPending(0);
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    call {:si_unique_call 227} sdv_64 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} sdv_64 != 0;
    assume sdv_64 > 0;
    s_p_e_c_i_a_l_14 := 2;
    call {:si_unique_call 228} sdv_65 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} sdv_65 != 0;
    assume sdv_65 > 0;
    s_p_e_c_i_a_l_12 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_65)));
    assume {:nonnull} s_p_e_c_i_a_l_12 != 0;
    assume s_p_e_c_i_a_l_12 > 0;
    s_p_e_c_i_a_l_16 := 1;
    call {:si_unique_call 229} sdv_66 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} sdv_66 != 0;
    assume sdv_66 > 0;
    s_p_e_c_i_a_l_15 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_66)));
    assume {:nonnull} s_p_e_c_i_a_l_15 != 0;
    assume s_p_e_c_i_a_l_15 > 0;
    s_p_e_c_i_a_l_13 := MaskState;
    call {:si_unique_call 230} sdv_68 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} sdv_68 != 0;
    assume sdv_68 > 0;
    s_p_e_c_i_a_l_17 := Argument3_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_68)));
    assume {:nonnull} s_p_e_c_i_a_l_17 != 0;
    assume s_p_e_c_i_a_l_17 > 0;
    call {:si_unique_call 231} vslice_dummy_var_22 := sdv_IoSetCancelRoutine(Irp_6, li2bplFunctionConstant1480);
    call {:si_unique_call 232} IoReleaseCancelSpinLock(cancelIrql_2);
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    call {:si_unique_call 233} sdv_KeReleaseSpinLock(0, OrigIrql_1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} GetNextIrpInQueue != 0;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_142;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_144;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_143;
    assume {:nonnull} MaskState != 0;
    assume MaskState > 0;
    havoc Tmp_145;
    assume {:nonnull} Tmp_142 != 0;
    assume Tmp_142 > 0;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    assume {:nonnull} Tmp_144 != 0;
    assume Tmp_144 > 0;
    assume {:nonnull} Tmp_145 != 0;
    assume Tmp_145 > 0;
    havoc vslice_dummy_var_31;
    call {:si_unique_call 234} UniGetNextIrp(vslice_dummy_var_31, DeviceLock__DEVICE_EXTENSION(Tmp_144), CurrentMaskOp__DEVICE_EXTENSION(Tmp_143), MaskOps__DEVICE_EXTENSION(Tmp_145), NewIrp, 0);
    goto L63;

  L63:
    Tmp_138 := 259;
    goto L1;

  anon8_Then:
    assume {:partition} GetNextIrpInQueue == 0;
    goto L63;
}



procedure {:origName "UNI_SAVE_OLD_SETMASK"} UNI_SAVE_OLD_SETMASK(actual_Irp_7: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UNI_SAVE_OLD_SETMASK"} UNI_SAVE_OLD_SETMASK(actual_Irp_7: int)
{
  var {:pointer} irpSp_7: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_23: int;

  anon0:
    call {:si_unique_call 235} vslice_dummy_var_23 := __HAVOC_malloc(4);
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 236} irpSp_7 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} irpSp_7 != 0;
    assume irpSp_7 > 0;
    return;
}



procedure {:origName "ExReleaseResourceLite"} {:osmodel} ExReleaseResourceLite(actual_Resource: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ExReleaseResourceLite"} {:osmodel} ExReleaseResourceLite(actual_Resource: int)
{
  var vslice_dummy_var_24: int;

  anon0:
    call {:si_unique_call 237} vslice_dummy_var_24 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 238} vslice_dummy_var_25 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_157: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_157: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    call {:si_unique_call 239} SLIC_sdv_containing_record_entry(strConst__li2bpl0);
    record := Address;
    Tmp_157 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int);
  modifies alloc, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 0;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} locked == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_26: int;

  anon0:
    call {:si_unique_call 240} vslice_dummy_var_26 := __HAVOC_malloc(4);
    p := actual_p;
    call {:si_unique_call 241} SLIC_sdv_KeAcquireSpinLock_entry(0);
    assume {:nonnull} p != 0;
    assume p > 0;
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_161: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_161 == 0 || Tmp_161 == -1073741823 || Tmp_161 == -1073741584 || Tmp_161 == -1073741808 || Tmp_161 == -1073741789 || Tmp_161 == -1073741670 || Tmp_161 == -1073741824 || Tmp_161 == -1073741771;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_161: int)
{
  var {:scalar} status_2: int;
  var {:pointer} p1: int;
  var {:pointer} p2: int;

  anon0:
    p1 := actual_p1;
    p2 := actual_p2;
    status_2 := 0;
    call {:si_unique_call 242} sdv_stub_add_begin();
    call {:si_unique_call 243} status_2 := ModemAddDevice(p1, p2);
    call {:si_unique_call 244} sdv_stub_add_end();
    Tmp_161 := status_2;
    return;
}



procedure {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "MmLockPagableSectionByHandle"} {:osmodel} MmLockPagableSectionByHandle(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_27: int;

  anon0:
    call {:si_unique_call 245} vslice_dummy_var_27 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoGetDeviceProperty"} {:osmodel} IoGetDeviceProperty(actual_DeviceObject_2: int, actual_DeviceProperty: int, actual_BufferLength: int, actual_PropertyBuffer: int, actual_ResultLength: int) returns (Tmp_165: int);
  free ensures {:va_keep} Tmp_165 == -1073741584 || Tmp_165 == -1073741808 || Tmp_165 == -1073741823 || Tmp_165 == 0 || Tmp_165 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoGetDeviceProperty"} {:osmodel} IoGetDeviceProperty(actual_DeviceObject_2: int, actual_DeviceProperty: int, actual_BufferLength: int, actual_PropertyBuffer: int, actual_ResultLength: int) returns (Tmp_165: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_71: int;
  var {:scalar} BufferLength: int;
  var {:pointer} ResultLength: int;

  anon0:
    BufferLength := actual_BufferLength;
    ResultLength := actual_ResultLength;
    L := sdv_71;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} 0 >= L;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} L != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == -1;
    Tmp_165 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} L != -1;
    Tmp_165 := -1073741808;
    goto L1;

  anon10_Then:
    assume {:partition} L == 0;
    Tmp_165 := -1073741823;
    goto L1;

  anon12_Then:
    assume {:partition} L > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BufferLength >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_165 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} L > BufferLength;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_165 := -1073741789;
    goto L1;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_167: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_167: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_167 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_167 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_167 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion()
{
  var vslice_dummy_var_28: int;

  anon0:
    call {:si_unique_call 246} vslice_dummy_var_28 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 247} vslice_dummy_var_29 := __HAVOC_malloc(4);
    Dpc := actual_Dpc;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc != 0;
    assume Dpc > 0;
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_3: int) returns (Tmp_173: int);
  free ensures {:va_keep} Tmp_173 == -1073741824 || Tmp_173 == -1073741771 || Tmp_173 == -1073741670 || Tmp_173 == -1073741823 || Tmp_173 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_3: int) returns (Tmp_173: int)
{
  var {:pointer} DeviceObject_3: int;

  anon0:
    DeviceObject_3 := actual_DeviceObject_3;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_173 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_173 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_173 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    Tmp_173 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    goto L21;

  L21:
    Tmp_173 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    goto L21;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 248} vslice_dummy_var_30 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_177: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_177: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_177 := r;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 249} vslice_dummy_var_31 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "ExAcquireResourceExclusiveLite"} {:osmodel} ExAcquireResourceExclusiveLite(actual_Resource_1: int, actual_Wait: int) returns (Tmp_181: int);
  free ensures {:va_keep} Tmp_181 == 0 || Tmp_181 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ExAcquireResourceExclusiveLite"} {:osmodel} ExAcquireResourceExclusiveLite(actual_Resource_1: int, actual_Wait: int) returns (Tmp_181: int)
{
  var {:scalar} Wait: int;

  anon0:
    Wait := actual_Wait;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Wait == 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_181 := 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_181 := 1;
    goto L1;

  anon5_Then:
    assume {:partition} Wait != 0;
    Tmp_181 := 1;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_32: int;

  anon0:
    call {:si_unique_call 250} vslice_dummy_var_32 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context: int, actual_Environment: int) returns (Tmp_185: int);
  free ensures {:va_keep} Tmp_185 == 0 || Tmp_185 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context: int, actual_Environment: int) returns (Tmp_185: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_185 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_185 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_33: int;

  anon0:
    call {:si_unique_call 251} vslice_dummy_var_33 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_189: int);
  free ensures {:va_keep} Tmp_189 == 0 || Tmp_189 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_189: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_189 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_189 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, queued, stack_location, yogi_error, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} u: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 252} u := __HAVOC_malloc(12);
    call {:si_unique_call 253} vslice_dummy_var_34 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    assume {:nonnull} KdDebuggerEnabled != 0;
    assume KdDebuggerEnabled > 0;
    assume {:nonnull} KdDebuggerNotPresent != 0;
    assume KdDebuggerNotPresent > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 254} sdv_RunUnload(sdv_driver_object);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon16_Then:
    goto L1;

  anon17_Then:
    call {:si_unique_call 255} sdv_stub_driver_init();
    call {:si_unique_call 256} vslice_dummy_var_36 := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    call {:si_unique_call 257} vslice_dummy_var_35 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto L1;

  anon19_Then:
    call {:si_unique_call 258} vslice_dummy_var_38 := DriverEntry(sdv_driver_object, u);
    goto L1;

  anon15_Then:
    call {:si_unique_call 259} sdv_stub_driver_init();
    call {:si_unique_call 260} vslice_dummy_var_37 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_193: int);
  free ensures {:va_keep} Tmp_193 == 0 || Tmp_193 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoCreateSymbolicLink"} {:osmodel} IoCreateSymbolicLink(actual_SymbolicLinkName: int, actual_DeviceName_1: int) returns (Tmp_193: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_193 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_193 := -1073741823;
    goto L1;
}



procedure {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_195: int);
  free ensures {:va_keep} Tmp_195 == 0 || Tmp_195 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoDeleteSymbolicLink"} {:osmodel} IoDeleteSymbolicLink(actual_SymbolicLinkName_1: int) returns (Tmp_195: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_195 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_195 := -1073741823;
    goto L1;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_197: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_197: int)
{
  var {:pointer} sdv_87: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 261} sdv_87 := __HAVOC_malloc(1);
    Tmp_197 := sdv_87;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_197 := 0;
    goto L1;
}



procedure {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion()
{
  var vslice_dummy_var_39: int;

  anon0:
    call {:si_unique_call 262} vslice_dummy_var_39 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_4: int, actual_Irp_8: int) returns (Tmp_201: int);
  free ensures {:va_keep} Tmp_201 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_4: int, actual_Irp_8: int) returns (Tmp_201: int)
{
  var {:scalar} status_4: int;
  var {:pointer} Irp_8: int;

  anon0:
    Irp_8 := actual_Irp_8;
    status_4 := 259;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L19;

  L19:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L25;

  L25:
    Tmp_201 := status_4;
    return;

  anon33_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon32_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L19;

  anon40_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L44;

  L44:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon39_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L44;

  anon41_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L28;

  L28:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L28;

  anon31_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L36;

  L36:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L36;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_5: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_203: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_203 == 0 || Tmp_203 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_5: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_203: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 263} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_203 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    call {:si_unique_call 264} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 265} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 266} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 267} vslice_dummy_var_40 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_1: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp_8: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_1: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 268} vslice_dummy_var_41 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_1 := actual_Context_1;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 269} irpSp_8 := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp_8 != 0;
    assume irpSp_8 > 0;
    return;
}



procedure {:origName "PoRegisterSystemState"} {:osmodel} PoRegisterSystemState(actual_StateHandle: int, actual_Flags: int) returns (Tmp_209: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "PoRegisterSystemState"} {:osmodel} PoRegisterSystemState(actual_StateHandle: int, actual_Flags: int) returns (Tmp_209: int)
{
  var {:pointer} r_2: int;
  var {:pointer} sdv_92: int;

  anon0:
    call {:si_unique_call 270} sdv_92 := __HAVOC_malloc(1);
    r_2 := sdv_92;
    Tmp_209 := r_2;
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_42: int;

  anon0:
    call {:si_unique_call 271} vslice_dummy_var_42 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_9: int)
{
  var vslice_dummy_var_43: int;

  anon0:
    call {:si_unique_call 272} vslice_dummy_var_43 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_215: int);
  free ensures {:va_keep} Tmp_215 == 258 || Tmp_215 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_215: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_215 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_215 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_215 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_6: int)
{
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 273} vslice_dummy_var_44 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_219: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_219: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_219 := OldState;
    return;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_223: int);
  free ensures {:va_keep} Tmp_223 == actual_AddressWithinSection;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_223: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_223 := AddressWithinSection;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_225: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_225: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_225;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_1: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_1: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_45: int;

  anon0:
    call {:si_unique_call 274} vslice_dummy_var_45 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoReleaseCancelSpinLock"} {:osmodel} IoReleaseCancelSpinLock(actual_new: int)
{
  var {:scalar} new: int;
  var vslice_dummy_var_46: int;

  anon0:
    call {:si_unique_call 275} vslice_dummy_var_46 := __HAVOC_malloc(4);
    new := actual_new;
    return;
}



procedure {:origName "ExDeleteResourceLite"} {:osmodel} ExDeleteResourceLite(actual_Resource_2: int) returns (Tmp_231: int);
  free ensures {:va_keep} Tmp_231 == 0 || Tmp_231 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ExDeleteResourceLite"} {:osmodel} ExDeleteResourceLite(actual_Resource_2: int) returns (Tmp_231: int)
{
  var {:scalar} x_5: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} x_5 != 0;
    Tmp_231 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} x_5 == 0;
    Tmp_231 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_233: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_233: int)
{

  anon0:
    havoc Tmp_233;
    return;
}



procedure {:origName "RtlStringFromGUID"} {:osmodel} RtlStringFromGUID(actual_Guid: int, actual_GuidString: int) returns (Tmp_235: int);
  free ensures {:va_keep} Tmp_235 == 0 || Tmp_235 == -1073741801;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RtlStringFromGUID"} {:osmodel} RtlStringFromGUID(actual_Guid: int, actual_GuidString: int) returns (Tmp_235: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_235 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_235 := -1073741801;
    goto L1;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_2: int, actual_Irp_10: int) returns (Tmp_237: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_237 == -1073741584 || Tmp_237 == 259 || Tmp_237 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_7: int, actual_MinorFunction: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_2: int, actual_Irp_10: int) returns (Tmp_237: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 276} PowerState := __HAVOC_malloc(8);
    MinorFunction := actual_MinorFunction;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_237 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_237 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_237 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_239: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, stack_location, markedPending, queuedWithoutMarking, queued, locked, yogi_error;
  free ensures {:va_keep} queued == 1 || queued == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} stack_location == 1 || stack_location == 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_239: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_241: int;
  var {:scalar} Tmp_242: int;
  var boogieTmp: int;
  var NMI_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_POWERBUTTON_ACTION__Loc: int;
  var GUID_LIDOPEN_POWERSTATE__Loc: int;
  var GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc: int;
  var GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc: int;
  var GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_TIME__Loc: int;
  var GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_AUDIO_PLAYBACK__Loc: int;
  var IPF_SAL_RECORD_SECTION_GUID__Loc: int;
  var PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc: int;
  var GUID_USERINTERFACEBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_THROTTLE_POLICY__Loc: int;
  var GUID_PCIEXPRESS_ASPM_POLICY__Loc: int;
  var GUID_BATTERY_PERCENTAGE_REMAINING__Loc: int;
  var INIT_NOTIFY_TYPE_GUID__Loc: int;
  var PCIXDEVICE_ERROR_SECTION_GUID__Loc: int;
  var GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc: int;
  var GUID_ALLOW_RTC_WAKE__Loc: int;
  var GUID_GLOBAL_USER_PRESENCE__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_2__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_2__Loc: int;
  var GUID_APPLAUNCH_BUTTON__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_1__Loc: int;
  var GUID_PROCESSOR_ALLOW_THROTTLING__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc: int;
  var WHEA_TLBCHECK_GUID__Loc: int;
  var GUID_MONITOR_POWER_ON__Loc: int;
  var GUID_IDLE_RESILIENCY_PERIOD__Loc: int;
  var GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc: int;
  var GUID_DEVINTERFACE_MODEM__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc: int;
  var GUID_INTSTEER_SUBGROUP__Loc: int;
  var GUID_DISK_BURST_IGNORE_THRESHOLD__Loc: int;
  var GUID_SLEEPBUTTON_ACTION__Loc: int;
  var IPF_PROCESSOR_ERROR_SECTION_GUID__Loc: int;
  var XPF_MCA_SECTION_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc: int;
  var MCE_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_PROCESSOR_IDLE_DISABLE__Loc: int;
  var WHEA_CACHECHECK_GUID__Loc: int;
  var GUID_DISK_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc: int;
  var GUID_DISK_IDLE_TIMEOUT__Loc: int;
  var GUID_CONSOLE_DISPLAY_STATE__Loc: int;
  var GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_0__Loc: int;
  var GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc: int;
  var GUID_ACDC_POWER_SOURCE__Loc: int;
  var WHEA_MSCHECK_GUID__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc: int;
  var FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc: int;
  var NMI_SECTION_GUID__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MINIMUM__Loc: int;
  var GUID_ALLOW_AWAYMODE__Loc: int;
  var NO_SUBGROUP_GUID__Loc: int;
  var GUID_DISK_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc: int;
  var GUID_SYSTEM_BUTTON_SUBGROUP__Loc: int;
  var GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc: int;
  var GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR__Loc: int;
  var GUID_SYSTEM_COOLING_POLICY__Loc: int;
  var WHEA_RECORD_CREATOR_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_MODE__Loc: int;
  var ALL_POWERSCHEMES_GUID__Loc: int;
  var GUID_LIDSWITCH_STATE_CHANGE__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc: int;
  var GUID_ALLOW_SYSTEM_REQUIRED__Loc: int;
  var GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc: int;
  var GUID_LOCK_CONSOLE_ON_WAKE__Loc: int;
  var GUID_VIDEO_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_SESSION_DISPLAY_STATUS__Loc: int;
  var GUID_PROCESSOR_IDLESTATE_POLICY__Loc: int;
  var GUID_PROCESSOR_IDLE_TIME_CHECK__Loc: int;
  var CPE_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_ALLOW_DISPLAY_REQUIRED__Loc: int;
  var GUID_UNATTEND_SLEEP_TIMEOUT__Loc: int;
  var GUID_INTSTEER_MODE__Loc: int;
  var GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc: int;
  var GENERIC_SECTION_GUID__Loc: int;
  var GUID_CRITICAL_POWER_TRANSITION__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc: int;
  var GUID_BACKGROUND_TASK_NOTIFICATION__Loc: int;
  var BOOT_NOTIFY_TYPE_GUID__Loc: int;
  var GENERIC_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_SLEEP_IDLE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_PERF_HISTORY__Loc: int;
  var GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc: int;
  var GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_3__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc: int;
  var GUID_PROCESSOR_PARKING_PERF_STATE__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc: int;
  var GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc: int;
  var GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc: int;
  var PCIe_NOTIFY_TYPE_GUID__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc: int;
  var GUID_MIN_POWER_SAVINGS__Loc: int;
  var GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc: int;
  var GUID_ALLOW_STANDBY_STATES__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT__Loc: int;
  var GUID_STANDBY_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc: int;
  var GUID_DEVICE_IDLE_POLICY__Loc: int;
  var GUID_PROCESSOR_PERFSTATE_POLICY__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_POLICY__Loc: int;
  var GUID_SESSION_USER_PRESENCE__Loc: int;
  var GUID_LIDCLOSE_ACTION__Loc: int;
  var PCIEXPRESS_ERROR_SECTION_GUID__Loc: int;
  var GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc: int;
  var GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc: int;
  var GUID_SLEEP_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc: int;
  var MEMORY_ERROR_SECTION_GUID__Loc: int;
  var GUID_DEVINTERFACE_COMPORT__Loc: int;
  var GUID_VIDEO_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_TIME__Loc: int;
  var GUID_MAX_POWER_SAVINGS__Loc: int;
  var GUID_TYPICAL_POWER_SAVINGS__Loc: int;
  var GUID_HIBERNATE_FASTS4_POLICY__Loc: int;
  var GUID_BATTERY_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc: int;
  var XPF_PROCESSOR_ERROR_SECTION_GUID__Loc: int;
  var GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc: int;
  var GUID_IDLE_BACKGROUND_TASK__Loc: int;
  var WHEA_BUSCHECK_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_2__Loc: int;
  var GUID_DISK_SUBGROUP__Loc: int;
  var GUID_HIBERNATE_TIMEOUT__Loc: int;
  var CMC_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_POWERSCHEME_PERSONALITY__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_1__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_0__Loc: int;
  var PCIXBUS_ERROR_SECTION_GUID__Loc: int;
  var GUID_IDLE_RESILIENCY_SUBGROUP__Loc: int;
  var GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc: int;
  var GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_0__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc: int;
  var GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc: int;
  var GUID_VIDEO_DIM_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc: int;
  var GUID_ACTIVE_POWERSCHEME__Loc: int;
  var GUID_SYSTEM_AWAYMODE__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc: int;
  var GUID_PROCESSOR_PERF_TIME_CHECK__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var DriverEntryRegPath__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var WmiGuidInfo__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var WmiContext__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 277} NMI_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NMI_NOTIFY_TYPE_GUID__Loc == NMI_NOTIFY_TYPE_GUID;
    assume NMI_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 278} GUID_POWERBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERBUTTON_ACTION__Loc == GUID_POWERBUTTON_ACTION;
    assume GUID_POWERBUTTON_ACTION != 0;
    call {:si_unique_call 279} GUID_LIDOPEN_POWERSTATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDOPEN_POWERSTATE__Loc == GUID_LIDOPEN_POWERSTATE;
    assume GUID_LIDOPEN_POWERSTATE != 0;
    call {:si_unique_call 280} GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc == GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE != 0;
    call {:si_unique_call 281} GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc == GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY != 0;
    call {:si_unique_call 282} GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc == GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 283} GUID_PROCESSOR_PERF_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_TIME__Loc == GUID_PROCESSOR_PERF_INCREASE_TIME;
    assume GUID_PROCESSOR_PERF_INCREASE_TIME != 0;
    call {:si_unique_call 284} GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc == GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 285} GUID_AUDIO_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AUDIO_PLAYBACK__Loc == GUID_AUDIO_PLAYBACK;
    assume GUID_AUDIO_PLAYBACK != 0;
    call {:si_unique_call 286} IPF_SAL_RECORD_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IPF_SAL_RECORD_SECTION_GUID__Loc == IPF_SAL_RECORD_SECTION_GUID;
    assume IPF_SAL_RECORD_SECTION_GUID != 0;
    call {:si_unique_call 287} PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc == PROCESSOR_GENERIC_ERROR_SECTION_GUID;
    assume PROCESSOR_GENERIC_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 288} GUID_USERINTERFACEBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USERINTERFACEBUTTON_ACTION__Loc == GUID_USERINTERFACEBUTTON_ACTION;
    assume GUID_USERINTERFACEBUTTON_ACTION != 0;
    call {:si_unique_call 289} GUID_PROCESSOR_THROTTLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_POLICY__Loc == GUID_PROCESSOR_THROTTLE_POLICY;
    assume GUID_PROCESSOR_THROTTLE_POLICY != 0;
    call {:si_unique_call 290} GUID_PCIEXPRESS_ASPM_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_ASPM_POLICY__Loc == GUID_PCIEXPRESS_ASPM_POLICY;
    assume GUID_PCIEXPRESS_ASPM_POLICY != 0;
    call {:si_unique_call 291} GUID_BATTERY_PERCENTAGE_REMAINING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_PERCENTAGE_REMAINING__Loc == GUID_BATTERY_PERCENTAGE_REMAINING;
    assume GUID_BATTERY_PERCENTAGE_REMAINING != 0;
    call {:si_unique_call 292} INIT_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume INIT_NOTIFY_TYPE_GUID__Loc == INIT_NOTIFY_TYPE_GUID;
    assume INIT_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 293} PCIXDEVICE_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIXDEVICE_ERROR_SECTION_GUID__Loc == PCIXDEVICE_ERROR_SECTION_GUID;
    assume PCIXDEVICE_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 294} GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc == GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT != 0;
    call {:si_unique_call 295} GUID_ALLOW_RTC_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_RTC_WAKE__Loc == GUID_ALLOW_RTC_WAKE;
    assume GUID_ALLOW_RTC_WAKE != 0;
    call {:si_unique_call 296} GUID_GLOBAL_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_GLOBAL_USER_PRESENCE__Loc == GUID_GLOBAL_USER_PRESENCE;
    assume GUID_GLOBAL_USER_PRESENCE != 0;
    call {:si_unique_call 297} GUID_BATTERY_DISCHARGE_ACTION_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_2__Loc == GUID_BATTERY_DISCHARGE_ACTION_2;
    assume GUID_BATTERY_DISCHARGE_ACTION_2 != 0;
    call {:si_unique_call 298} GUID_BATTERY_DISCHARGE_LEVEL_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_2__Loc == GUID_BATTERY_DISCHARGE_LEVEL_2;
    assume GUID_BATTERY_DISCHARGE_LEVEL_2 != 0;
    call {:si_unique_call 299} GUID_APPLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_APPLAUNCH_BUTTON__Loc == GUID_APPLAUNCH_BUTTON;
    assume GUID_APPLAUNCH_BUTTON != 0;
    call {:si_unique_call 300} GUID_BATTERY_DISCHARGE_FLAGS_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_1__Loc == GUID_BATTERY_DISCHARGE_FLAGS_1;
    assume GUID_BATTERY_DISCHARGE_FLAGS_1 != 0;
    call {:si_unique_call 301} GUID_PROCESSOR_ALLOW_THROTTLING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_ALLOW_THROTTLING__Loc == GUID_PROCESSOR_ALLOW_THROTTLING;
    assume GUID_PROCESSOR_ALLOW_THROTTLING != 0;
    call {:si_unique_call 302} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 303} WHEA_TLBCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_TLBCHECK_GUID__Loc == WHEA_TLBCHECK_GUID;
    assume WHEA_TLBCHECK_GUID != 0;
    call {:si_unique_call 304} GUID_MONITOR_POWER_ON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MONITOR_POWER_ON__Loc == GUID_MONITOR_POWER_ON;
    assume GUID_MONITOR_POWER_ON != 0;
    call {:si_unique_call 305} GUID_IDLE_RESILIENCY_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PERIOD__Loc == GUID_IDLE_RESILIENCY_PERIOD;
    assume GUID_IDLE_RESILIENCY_PERIOD != 0;
    call {:si_unique_call 306} GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc == GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY != 0;
    call {:si_unique_call 307} GUID_DEVINTERFACE_MODEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_MODEM__Loc == GUID_DEVINTERFACE_MODEM;
    assume GUID_DEVINTERFACE_MODEM != 0;
    call {:si_unique_call 308} GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_INCREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY != 0;
    call {:si_unique_call 309} GUID_INTSTEER_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_SUBGROUP__Loc == GUID_INTSTEER_SUBGROUP;
    assume GUID_INTSTEER_SUBGROUP != 0;
    call {:si_unique_call 310} GUID_DISK_BURST_IGNORE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_BURST_IGNORE_THRESHOLD__Loc == GUID_DISK_BURST_IGNORE_THRESHOLD;
    assume GUID_DISK_BURST_IGNORE_THRESHOLD != 0;
    call {:si_unique_call 311} GUID_SLEEPBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEPBUTTON_ACTION__Loc == GUID_SLEEPBUTTON_ACTION;
    assume GUID_SLEEPBUTTON_ACTION != 0;
    call {:si_unique_call 312} IPF_PROCESSOR_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IPF_PROCESSOR_ERROR_SECTION_GUID__Loc == IPF_PROCESSOR_ERROR_SECTION_GUID;
    assume IPF_PROCESSOR_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 313} XPF_MCA_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume XPF_MCA_SECTION_GUID__Loc == XPF_MCA_SECTION_GUID;
    assume XPF_MCA_SECTION_GUID != 0;
    call {:si_unique_call 314} GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF != 0;
    call {:si_unique_call 315} MCE_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MCE_NOTIFY_TYPE_GUID__Loc == MCE_NOTIFY_TYPE_GUID;
    assume MCE_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 316} GUID_PROCESSOR_IDLE_DISABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DISABLE__Loc == GUID_PROCESSOR_IDLE_DISABLE;
    assume GUID_PROCESSOR_IDLE_DISABLE != 0;
    call {:si_unique_call 317} WHEA_CACHECHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_CACHECHECK_GUID__Loc == WHEA_CACHECHECK_GUID;
    assume WHEA_CACHECHECK_GUID != 0;
    call {:si_unique_call 318} GUID_DISK_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_POWERDOWN_TIMEOUT__Loc == GUID_DISK_POWERDOWN_TIMEOUT;
    assume GUID_DISK_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 319} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 320} GUID_DISK_IDLE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_IDLE_TIMEOUT__Loc == GUID_DISK_IDLE_TIMEOUT;
    assume GUID_DISK_IDLE_TIMEOUT != 0;
    call {:si_unique_call 321} GUID_CONSOLE_DISPLAY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CONSOLE_DISPLAY_STATE__Loc == GUID_CONSOLE_DISPLAY_STATE;
    assume GUID_CONSOLE_DISPLAY_STATE != 0;
    call {:si_unique_call 322} GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc == GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP != 0;
    call {:si_unique_call 323} GUID_BATTERY_DISCHARGE_FLAGS_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_0__Loc == GUID_BATTERY_DISCHARGE_FLAGS_0;
    assume GUID_BATTERY_DISCHARGE_FLAGS_0 != 0;
    call {:si_unique_call 324} GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD != 0;
    call {:si_unique_call 325} GUID_ACDC_POWER_SOURCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACDC_POWER_SOURCE__Loc == GUID_ACDC_POWER_SOURCE;
    assume GUID_ACDC_POWER_SOURCE != 0;
    call {:si_unique_call 326} WHEA_MSCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_MSCHECK_GUID__Loc == WHEA_MSCHECK_GUID;
    assume WHEA_MSCHECK_GUID != 0;
    call {:si_unique_call 327} GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS != 0;
    call {:si_unique_call 328} GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD != 0;
    call {:si_unique_call 329} FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc == FIRMWARE_ERROR_RECORD_REFERENCE_GUID;
    assume FIRMWARE_ERROR_RECORD_REFERENCE_GUID != 0;
    call {:si_unique_call 330} GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME != 0;
    call {:si_unique_call 331} NMI_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NMI_SECTION_GUID__Loc == NMI_SECTION_GUID;
    assume NMI_SECTION_GUID != 0;
    call {:si_unique_call 332} GUID_PROCESSOR_THROTTLE_MINIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MINIMUM__Loc == GUID_PROCESSOR_THROTTLE_MINIMUM;
    assume GUID_PROCESSOR_THROTTLE_MINIMUM != 0;
    call {:si_unique_call 333} GUID_ALLOW_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_AWAYMODE__Loc == GUID_ALLOW_AWAYMODE;
    assume GUID_ALLOW_AWAYMODE != 0;
    call {:si_unique_call 334} NO_SUBGROUP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NO_SUBGROUP_GUID__Loc == NO_SUBGROUP_GUID;
    assume NO_SUBGROUP_GUID != 0;
    call {:si_unique_call 335} GUID_DISK_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_ADAPTIVE_POWERDOWN__Loc == GUID_DISK_ADAPTIVE_POWERDOWN;
    assume GUID_DISK_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 336} GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc == GUID_VIDEO_FULLSCREEN_PLAYBACK;
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK != 0;
    call {:si_unique_call 337} GUID_SYSTEM_BUTTON_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_BUTTON_SUBGROUP__Loc == GUID_SYSTEM_BUTTON_SUBGROUP;
    assume GUID_SYSTEM_BUTTON_SUBGROUP != 0;
    call {:si_unique_call 338} GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc == GUID_INTSTEER_TIME_UNPARK_TRIGGER;
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER != 0;
    call {:si_unique_call 339} GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR__Loc == GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
    assume GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR != 0;
    call {:si_unique_call 340} GUID_SYSTEM_COOLING_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_COOLING_POLICY__Loc == GUID_SYSTEM_COOLING_POLICY;
    assume GUID_SYSTEM_COOLING_POLICY != 0;
    call {:si_unique_call 341} WHEA_RECORD_CREATOR_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_RECORD_CREATOR_GUID__Loc == WHEA_RECORD_CREATOR_GUID;
    assume WHEA_RECORD_CREATOR_GUID != 0;
    call {:si_unique_call 342} GUID_PROCESSOR_PERF_BOOST_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_MODE__Loc == GUID_PROCESSOR_PERF_BOOST_MODE;
    assume GUID_PROCESSOR_PERF_BOOST_MODE != 0;
    call {:si_unique_call 343} ALL_POWERSCHEMES_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ALL_POWERSCHEMES_GUID__Loc == ALL_POWERSCHEMES_GUID;
    assume ALL_POWERSCHEMES_GUID != 0;
    call {:si_unique_call 344} GUID_LIDSWITCH_STATE_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDSWITCH_STATE_CHANGE__Loc == GUID_LIDSWITCH_STATE_CHANGE;
    assume GUID_LIDSWITCH_STATE_CHANGE != 0;
    call {:si_unique_call 345} GUID_BATTERY_DISCHARGE_LEVEL_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_3__Loc == GUID_BATTERY_DISCHARGE_LEVEL_3;
    assume GUID_BATTERY_DISCHARGE_LEVEL_3 != 0;
    call {:si_unique_call 346} GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY != 0;
    call {:si_unique_call 347} GUID_ALLOW_SYSTEM_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_SYSTEM_REQUIRED__Loc == GUID_ALLOW_SYSTEM_REQUIRED;
    assume GUID_ALLOW_SYSTEM_REQUIRED != 0;
    call {:si_unique_call 348} GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc == GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS != 0;
    call {:si_unique_call 349} GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc == GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING != 0;
    call {:si_unique_call 350} GUID_LOCK_CONSOLE_ON_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LOCK_CONSOLE_ON_WAKE__Loc == GUID_LOCK_CONSOLE_ON_WAKE;
    assume GUID_LOCK_CONSOLE_ON_WAKE != 0;
    call {:si_unique_call 351} GUID_VIDEO_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_POWERDOWN_TIMEOUT__Loc == GUID_VIDEO_POWERDOWN_TIMEOUT;
    assume GUID_VIDEO_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 352} GUID_SESSION_DISPLAY_STATUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_DISPLAY_STATUS__Loc == GUID_SESSION_DISPLAY_STATUS;
    assume GUID_SESSION_DISPLAY_STATUS != 0;
    call {:si_unique_call 353} GUID_PROCESSOR_IDLESTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLESTATE_POLICY__Loc == GUID_PROCESSOR_IDLESTATE_POLICY;
    assume GUID_PROCESSOR_IDLESTATE_POLICY != 0;
    call {:si_unique_call 354} GUID_PROCESSOR_IDLE_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_TIME_CHECK__Loc == GUID_PROCESSOR_IDLE_TIME_CHECK;
    assume GUID_PROCESSOR_IDLE_TIME_CHECK != 0;
    call {:si_unique_call 355} CPE_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume CPE_NOTIFY_TYPE_GUID__Loc == CPE_NOTIFY_TYPE_GUID;
    assume CPE_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 356} GUID_ALLOW_DISPLAY_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_DISPLAY_REQUIRED__Loc == GUID_ALLOW_DISPLAY_REQUIRED;
    assume GUID_ALLOW_DISPLAY_REQUIRED != 0;
    call {:si_unique_call 357} GUID_UNATTEND_SLEEP_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_UNATTEND_SLEEP_TIMEOUT__Loc == GUID_UNATTEND_SLEEP_TIMEOUT;
    assume GUID_UNATTEND_SLEEP_TIMEOUT != 0;
    call {:si_unique_call 358} GUID_INTSTEER_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_MODE__Loc == GUID_INTSTEER_MODE;
    assume GUID_INTSTEER_MODE != 0;
    call {:si_unique_call 359} GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc == GUID_IDLE_RESILIENCY_PLATFORM_STATE;
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE != 0;
    call {:si_unique_call 360} GENERIC_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume GENERIC_SECTION_GUID__Loc == GENERIC_SECTION_GUID;
    assume GENERIC_SECTION_GUID != 0;
    call {:si_unique_call 361} GUID_CRITICAL_POWER_TRANSITION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CRITICAL_POWER_TRANSITION__Loc == GUID_CRITICAL_POWER_TRANSITION;
    assume GUID_CRITICAL_POWER_TRANSITION != 0;
    call {:si_unique_call 362} GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 363} GUID_BACKGROUND_TASK_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BACKGROUND_TASK_NOTIFICATION__Loc == GUID_BACKGROUND_TASK_NOTIFICATION;
    assume GUID_BACKGROUND_TASK_NOTIFICATION != 0;
    call {:si_unique_call 364} BOOT_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume BOOT_NOTIFY_TYPE_GUID__Loc == BOOT_NOTIFY_TYPE_GUID;
    assume BOOT_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 365} GENERIC_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume GENERIC_NOTIFY_TYPE_GUID__Loc == GENERIC_NOTIFY_TYPE_GUID;
    assume GENERIC_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 366} GUID_SLEEP_IDLE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_IDLE_THRESHOLD__Loc == GUID_SLEEP_IDLE_THRESHOLD;
    assume GUID_SLEEP_IDLE_THRESHOLD != 0;
    call {:si_unique_call 367} GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY != 0;
    call {:si_unique_call 368} GUID_PROCESSOR_PERF_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_HISTORY__Loc == GUID_PROCESSOR_PERF_HISTORY;
    assume GUID_PROCESSOR_PERF_HISTORY != 0;
    call {:si_unique_call 369} GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc == GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM != 0;
    call {:si_unique_call 370} GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc == GUID_VIDEO_ANNOYANCE_TIMEOUT;
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT != 0;
    call {:si_unique_call 371} GUID_BATTERY_DISCHARGE_FLAGS_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_3__Loc == GUID_BATTERY_DISCHARGE_FLAGS_3;
    assume GUID_BATTERY_DISCHARGE_FLAGS_3 != 0;
    call {:si_unique_call 372} GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc == GUID_PROCESSOR_THROTTLE_MAXIMUM;
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM != 0;
    call {:si_unique_call 373} GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES != 0;
    call {:si_unique_call 374} GUID_PROCESSOR_PARKING_PERF_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_PERF_STATE__Loc == GUID_PROCESSOR_PARKING_PERF_STATE;
    assume GUID_PROCESSOR_PARKING_PERF_STATE != 0;
    call {:si_unique_call 375} GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc == GUID_PROCESSOR_PERF_DECREASE_POLICY;
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY != 0;
    call {:si_unique_call 376} GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc == GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE != 0;
    call {:si_unique_call 377} GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc == GUID_VIDEO_ADAPTIVE_POWERDOWN;
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 378} PCIe_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIe_NOTIFY_TYPE_GUID__Loc == PCIe_NOTIFY_TYPE_GUID;
    assume PCIe_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 379} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 380} GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 381} GUID_MIN_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MIN_POWER_SAVINGS__Loc == GUID_MIN_POWER_SAVINGS;
    assume GUID_MIN_POWER_SAVINGS != 0;
    call {:si_unique_call 382} GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc == GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT != 0;
    call {:si_unique_call 383} GUID_ALLOW_STANDBY_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_STANDBY_STATES__Loc == GUID_ALLOW_STANDBY_STATES;
    assume GUID_ALLOW_STANDBY_STATES != 0;
    call {:si_unique_call 384} GUID_PROCESSOR_PERF_LATENCY_HINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT != 0;
    call {:si_unique_call 385} GUID_STANDBY_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_STANDBY_TIMEOUT__Loc == GUID_STANDBY_TIMEOUT;
    assume GUID_STANDBY_TIMEOUT != 0;
    call {:si_unique_call 386} GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD != 0;
    call {:si_unique_call 387} GUID_DEVICE_IDLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_IDLE_POLICY__Loc == GUID_DEVICE_IDLE_POLICY;
    assume GUID_DEVICE_IDLE_POLICY != 0;
    call {:si_unique_call 388} GUID_PROCESSOR_PERFSTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERFSTATE_POLICY__Loc == GUID_PROCESSOR_PERFSTATE_POLICY;
    assume GUID_PROCESSOR_PERFSTATE_POLICY != 0;
    call {:si_unique_call 389} GUID_PROCESSOR_PERF_BOOST_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_POLICY__Loc == GUID_PROCESSOR_PERF_BOOST_POLICY;
    assume GUID_PROCESSOR_PERF_BOOST_POLICY != 0;
    call {:si_unique_call 390} GUID_SESSION_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_USER_PRESENCE__Loc == GUID_SESSION_USER_PRESENCE;
    assume GUID_SESSION_USER_PRESENCE != 0;
    call {:si_unique_call 391} GUID_LIDCLOSE_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDCLOSE_ACTION__Loc == GUID_LIDCLOSE_ACTION;
    assume GUID_LIDCLOSE_ACTION != 0;
    call {:si_unique_call 392} PCIEXPRESS_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIEXPRESS_ERROR_SECTION_GUID__Loc == PCIEXPRESS_ERROR_SECTION_GUID;
    assume PCIEXPRESS_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 393} GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc == GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS != 0;
    call {:si_unique_call 394} GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc == GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT != 0;
    call {:si_unique_call 395} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD != 0;
    call {:si_unique_call 396} GUID_SLEEP_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_SUBGROUP__Loc == GUID_SLEEP_SUBGROUP;
    assume GUID_SLEEP_SUBGROUP != 0;
    call {:si_unique_call 397} GUID_BATTERY_DISCHARGE_ACTION_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_1__Loc == GUID_BATTERY_DISCHARGE_ACTION_1;
    assume GUID_BATTERY_DISCHARGE_ACTION_1 != 0;
    call {:si_unique_call 398} GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc == GUID_PROCESSOR_PERF_INCREASE_POLICY;
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY != 0;
    call {:si_unique_call 399} MEMORY_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MEMORY_ERROR_SECTION_GUID__Loc == MEMORY_ERROR_SECTION_GUID;
    assume MEMORY_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 400} GUID_DEVINTERFACE_COMPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_COMPORT__Loc == GUID_DEVINTERFACE_COMPORT;
    assume GUID_DEVINTERFACE_COMPORT != 0;
    call {:si_unique_call 401} GUID_VIDEO_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_SUBGROUP__Loc == GUID_VIDEO_SUBGROUP;
    assume GUID_VIDEO_SUBGROUP != 0;
    call {:si_unique_call 402} GUID_PROCESSOR_PERF_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_TIME__Loc == GUID_PROCESSOR_PERF_DECREASE_TIME;
    assume GUID_PROCESSOR_PERF_DECREASE_TIME != 0;
    call {:si_unique_call 403} GUID_MAX_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MAX_POWER_SAVINGS__Loc == GUID_MAX_POWER_SAVINGS;
    assume GUID_MAX_POWER_SAVINGS != 0;
    call {:si_unique_call 404} GUID_TYPICAL_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TYPICAL_POWER_SAVINGS__Loc == GUID_TYPICAL_POWER_SAVINGS;
    assume GUID_TYPICAL_POWER_SAVINGS != 0;
    call {:si_unique_call 405} GUID_HIBERNATE_FASTS4_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_FASTS4_POLICY__Loc == GUID_HIBERNATE_FASTS4_POLICY;
    assume GUID_HIBERNATE_FASTS4_POLICY != 0;
    call {:si_unique_call 406} GUID_BATTERY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_SUBGROUP__Loc == GUID_BATTERY_SUBGROUP;
    assume GUID_BATTERY_SUBGROUP != 0;
    call {:si_unique_call 407} GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_DECREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY != 0;
    call {:si_unique_call 408} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 409} XPF_PROCESSOR_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume XPF_PROCESSOR_ERROR_SECTION_GUID__Loc == XPF_PROCESSOR_ERROR_SECTION_GUID;
    assume XPF_PROCESSOR_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 410} GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc == GUID_PROCESSOR_SETTINGS_SUBGROUP;
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 411} GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS != 0;
    call {:si_unique_call 412} GUID_IDLE_BACKGROUND_TASK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_BACKGROUND_TASK__Loc == GUID_IDLE_BACKGROUND_TASK;
    assume GUID_IDLE_BACKGROUND_TASK != 0;
    call {:si_unique_call 413} WHEA_BUSCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_BUSCHECK_GUID__Loc == WHEA_BUSCHECK_GUID;
    assume WHEA_BUSCHECK_GUID != 0;
    call {:si_unique_call 414} GUID_BATTERY_DISCHARGE_FLAGS_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_2__Loc == GUID_BATTERY_DISCHARGE_FLAGS_2;
    assume GUID_BATTERY_DISCHARGE_FLAGS_2 != 0;
    call {:si_unique_call 415} GUID_DISK_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_SUBGROUP__Loc == GUID_DISK_SUBGROUP;
    assume GUID_DISK_SUBGROUP != 0;
    call {:si_unique_call 416} GUID_HIBERNATE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_TIMEOUT__Loc == GUID_HIBERNATE_TIMEOUT;
    assume GUID_HIBERNATE_TIMEOUT != 0;
    call {:si_unique_call 417} CMC_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume CMC_NOTIFY_TYPE_GUID__Loc == CMC_NOTIFY_TYPE_GUID;
    assume CMC_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 418} GUID_POWERSCHEME_PERSONALITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERSCHEME_PERSONALITY__Loc == GUID_POWERSCHEME_PERSONALITY;
    assume GUID_POWERSCHEME_PERSONALITY != 0;
    call {:si_unique_call 419} GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME != 0;
    call {:si_unique_call 420} GUID_BATTERY_DISCHARGE_LEVEL_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_1__Loc == GUID_BATTERY_DISCHARGE_LEVEL_1;
    assume GUID_BATTERY_DISCHARGE_LEVEL_1 != 0;
    call {:si_unique_call 421} GUID_BATTERY_DISCHARGE_ACTION_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_0__Loc == GUID_BATTERY_DISCHARGE_ACTION_0;
    assume GUID_BATTERY_DISCHARGE_ACTION_0 != 0;
    call {:si_unique_call 422} PCIXBUS_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIXBUS_ERROR_SECTION_GUID__Loc == PCIXBUS_ERROR_SECTION_GUID;
    assume PCIXBUS_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 423} GUID_IDLE_RESILIENCY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_SUBGROUP__Loc == GUID_IDLE_RESILIENCY_SUBGROUP;
    assume GUID_IDLE_RESILIENCY_SUBGROUP != 0;
    call {:si_unique_call 424} GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc == GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN != 0;
    call {:si_unique_call 425} GUID_BATTERY_DISCHARGE_ACTION_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_3__Loc == GUID_BATTERY_DISCHARGE_ACTION_3;
    assume GUID_BATTERY_DISCHARGE_ACTION_3 != 0;
    call {:si_unique_call 426} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING != 0;
    call {:si_unique_call 427} GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc == GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER != 0;
    call {:si_unique_call 428} GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 429} GUID_BATTERY_DISCHARGE_LEVEL_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_0__Loc == GUID_BATTERY_DISCHARGE_LEVEL_0;
    assume GUID_BATTERY_DISCHARGE_LEVEL_0 != 0;
    call {:si_unique_call 430} GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES != 0;
    call {:si_unique_call 431} GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD != 0;
    call {:si_unique_call 432} GUID_VIDEO_DIM_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_DIM_TIMEOUT__Loc == GUID_VIDEO_DIM_TIMEOUT;
    assume GUID_VIDEO_DIM_TIMEOUT != 0;
    call {:si_unique_call 433} GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 434} GUID_ACTIVE_POWERSCHEME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACTIVE_POWERSCHEME__Loc == GUID_ACTIVE_POWERSCHEME;
    assume GUID_ACTIVE_POWERSCHEME != 0;
    call {:si_unique_call 435} GUID_SYSTEM_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_AWAYMODE__Loc == GUID_SYSTEM_AWAYMODE;
    assume GUID_SYSTEM_AWAYMODE != 0;
    call {:si_unique_call 436} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 437} GUID_PROCESSOR_PERF_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_TIME_CHECK__Loc == GUID_PROCESSOR_PERF_TIME_CHECK;
    assume GUID_PROCESSOR_PERF_TIME_CHECK != 0;
    call {:si_unique_call 438} GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING != 0;
    call {:si_unique_call 439} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 440} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 441} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 442} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 443} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 444} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 445} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 446} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 447} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 448} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 449} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 450} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 451} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 452} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 453} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 454} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 455} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 456} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 457} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 458} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 459} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 460} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 461} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 462} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 463} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 464} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 465} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 466} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 467} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 468} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 469} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 470} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 471} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 472} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 473} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 474} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 475} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 476} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 477} DriverEntryRegPath__Loc := __HAVOC_malloc_or_null(12);
    assume DriverEntryRegPath__Loc == DriverEntryRegPath;
    assume DriverEntryRegPath != 0;
    call {:si_unique_call 478} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 479} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 480} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 481} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 482} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 483} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 484} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 485} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 486} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 487} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 488} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 489} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 490} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 491} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 492} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 493} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 494} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 495} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 496} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 497} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 498} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 499} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 500} WmiGuidInfo__Loc := __HAVOC_malloc_or_null(12);
    assume WmiGuidInfo__Loc == WmiGuidInfo;
    assume WmiGuidInfo != 0;
    call {:si_unique_call 501} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 502} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 503} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 504} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 505} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 506} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 507} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 508} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 509} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 510} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 511} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 512} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 513} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 514} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 515} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 516} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 517} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 518} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 519} WmiContext__Loc := __HAVOC_malloc_or_null(32);
    assume WmiContext__Loc == WmiContext;
    assume WmiContext != 0;
    call {:si_unique_call 520} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 521} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 522} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 523} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 524} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 525} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 526} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 527} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 528} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 529} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 530} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 531} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 532} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 533} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 534} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 535} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 536} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 537} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 538} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 539} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 540} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 541} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 542} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 543} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 544} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 545} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 546} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 547} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdDebuggerNotPresent == boogieTmp;
    call {:si_unique_call 548} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdDebuggerEnabled == boogieTmp;
    call {:si_unique_call 549} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 550} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pDpcContext == boogieTmp;
    call {:si_unique_call 551} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 552} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 553} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 554} boogieTmp := __HAVOC_malloc_or_null(4);
    assume {:mainInitDone} true;
    call {:si_unique_call 555} corralExtraInit();
    call {:si_unique_call 556} corralExplainErrorInit();
    call {:si_unique_call 557} _sdv_init15();
    call {:si_unique_call 558} _sdv_init1();
    call {:si_unique_call 559} _sdv_init4();
    call {:si_unique_call 560} _sdv_init5();
    call {:si_unique_call 561} _sdv_init3();
    call {:si_unique_call 562} _sdv_init6();
    call {:si_unique_call 563} _sdv_init10();
    call {:si_unique_call 564} _sdv_init11();
    call {:si_unique_call 565} _sdv_init9();
    call {:si_unique_call 566} _sdv_init12();
    call {:si_unique_call 567} _sdv_init13();
    call {:si_unique_call 568} _sdv_init7();
    call {:si_unique_call 569} _sdv_init8();
    call {:si_unique_call 570} _sdv_init2();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_242 := 0;
    goto L38;

  L38:
    assume Tmp_242 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_241 := 0;
    goto L42;

  L42:
    assume Tmp_241 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 571} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L36;

  L36:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L36;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_241 := 1;
    goto L42;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_242 := 1;
    goto L38;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type: int, actual_Data: int, actual_DataSize: int) returns (Tmp_243: int);
  free ensures {:va_keep} Tmp_243 == -1073741790 || Tmp_243 == -1073741816 || Tmp_243 == -1073741823 || Tmp_243 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type: int, actual_Data: int, actual_DataSize: int) returns (Tmp_243: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_243 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_243 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_243 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_243 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_47: int;

  anon0:
    call {:si_unique_call 572} vslice_dummy_var_47 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_247: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_247: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    havoc Tmp_247;
    return;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_48: int;

  anon0:
    call {:si_unique_call 573} vslice_dummy_var_48 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 574} vslice_dummy_var_49 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle_1: int)
{
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 575} vslice_dummy_var_50 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_255: int);
  free ensures {:va_keep} Tmp_255 == 0 || Tmp_255 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_255: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_255 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_255 := 0;
    goto L1;
}



procedure {:origName "PoUnregisterSystemState"} {:osmodel} PoUnregisterSystemState(actual_StateHandle_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "PoUnregisterSystemState"} {:osmodel} PoUnregisterSystemState(actual_StateHandle_1: int)
{
  var vslice_dummy_var_51: int;

  anon0:
    call {:si_unique_call 576} vslice_dummy_var_51 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwDeleteKey"} {:osmodel} ZwDeleteKey(actual_KeyHandle_1: int) returns (Tmp_259: int);
  free ensures {:va_keep} Tmp_259 == -1073741790 || Tmp_259 == -1073741816 || Tmp_259 == -1073741823 || Tmp_259 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwDeleteKey"} {:osmodel} ZwDeleteKey(actual_KeyHandle_1: int) returns (Tmp_259: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_259 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_259 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_259 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_259 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination: int, actual_Length: int)
{
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 577} vslice_dummy_var_52 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_263: int);
  modifies alloc, stack_location, locked, queuedWithoutMarking, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po: int, actual_pirp_10: int) returns (Tmp_263: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_6: int;
  var {:pointer} po: int;
  var {:pointer} pirp_10: int;

  anon0:
    po := actual_po;
    pirp_10 := actual_pirp_10;
    status_6 := 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    havoc ps;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    assume {:nonnull} pirp_10 != 0;
    assume pirp_10 > 0;
    call {:si_unique_call 578} sdv_SetStatus(pirp_10);
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 579} sdv_stub_dispatch_begin();
    call {:si_unique_call 580} status_6 := ModemPnP(po, pirp_10);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 581} sdv_stub_dispatch_end(status_6, 0);
    Tmp_263 := status_6;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ExInitializeResourceLite"} {:osmodel} ExInitializeResourceLite(actual_Resource_3: int) returns (Tmp_265: int);
  free ensures {:va_keep} Tmp_265 == 0 || Tmp_265 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ExInitializeResourceLite"} {:osmodel} ExInitializeResourceLite(actual_Resource_3: int) returns (Tmp_265: int)
{
  var {:scalar} x_8: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} x_8 != 0;
    Tmp_265 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} x_8 == 0;
    Tmp_265 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_53: int;

  anon0:
    call {:si_unique_call 582} vslice_dummy_var_53 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwCreateKey"} {:osmodel} ZwCreateKey(actual_KeyHandle_2: int, actual_DesiredAccess: int, actual_ObjectAttributes: int, actual_TitleIndex_1: int, actual_Class: int, actual_CreateOptions: int, actual_Disposition: int) returns (Tmp_269: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_269 == 0 || Tmp_269 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwCreateKey"} {:osmodel} ZwCreateKey(actual_KeyHandle_2: int, actual_DesiredAccess: int, actual_ObjectAttributes: int, actual_TitleIndex_1: int, actual_Class: int, actual_CreateOptions: int, actual_Disposition: int) returns (Tmp_269: int)
{
  var {:pointer} sdv_102: int;
  var {:pointer} KeyHandle_2: int;

  anon0:
    KeyHandle_2 := actual_KeyHandle_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 583} sdv_102 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_2 != 0;
    assume KeyHandle_2 > 0;
    Tmp_269 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_2 != 0;
    assume KeyHandle_2 > 0;
    Tmp_269 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int);
  modifies alloc, markedPending;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int)
{
  var vslice_dummy_var_54: int;

  anon0:
    call {:si_unique_call 584} vslice_dummy_var_54 := __HAVOC_malloc(4);
    call {:si_unique_call 585} SLIC_sdv_IoMarkIrpPending_entry(0);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int)
{
  var vslice_dummy_var_55: int;

  anon0:
    call {:si_unique_call 586} vslice_dummy_var_55 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_13: int) returns (Tmp_275: int);
  modifies alloc, queued, stack_location, yogi_error, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_13: int) returns (Tmp_275: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_276: int;
  var {:scalar} Tmp_277: int;
  var {:scalar} sdv_111: int;
  var {:scalar} status_7: int;
  var {:pointer} po_1: int;
  var {:pointer} pirp_13: int;

  anon0:
    po_1 := actual_po_1;
    pirp_13 := actual_pirp_13;
    status_7 := 0;
    minor := sdv_111;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    havoc ps_1;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    call {:si_unique_call 587} sdv_SetStatus(pirp_13);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 588} sdv_stub_dispatch_begin();
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    goto L60;

  L60:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    Tmp_277 := 0;
    goto L219;

  L219:
    assume Tmp_277 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto L66;

  L66:
    call {:si_unique_call 589} status_7 := ModemPnP(po_1, pirp_13);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 590} sdv_stub_dispatch_end(status_7, 0);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    Tmp_275 := status_7;
    goto LM2;

  LM2:
    return;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon70_Then:
    goto L66;

  anon71_Then:
    Tmp_277 := 1;
    goto L219;

  anon69_Then:
    goto L61;

  anon98_Then:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    Tmp_276 := 0;
    goto L225;

  L225:
    assume Tmp_276 != 0;
    goto L60;

  anon68_Then:
    Tmp_276 := 1;
    goto L225;

  anon72_Then:
    call {:si_unique_call 591} status_7 := sdv_DoNothing();
    goto L72;

  anon73_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 592} status_7 := ModemWmi(po_1, pirp_13);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 593} sdv_SetPowerIrpMinorFunction(pirp_13);
    call {:si_unique_call 594} status_7 := ModemPower(po_1, pirp_13);
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon96_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 595} status_7 := UniCleanup(po_1, pirp_13);
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon95_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    call {:si_unique_call 596} status_7 := sdv_DoNothing();
    goto L72;

  anon77_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 597} status_7 := sdv_DoNothing();
    goto L72;

  anon78_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 598} status_7 := sdv_DoNothing();
    goto L72;

  anon79_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 599} status_7 := UniIoControl(po_1, pirp_13);
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon94_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    call {:si_unique_call 600} status_7 := sdv_DoNothing();
    goto L72;

  anon81_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 601} status_7 := UniDispatch(po_1, pirp_13);
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon93_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon82_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 602} status_7 := UniDispatch(po_1, pirp_13);
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon92_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon83_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 603} status_7 := UniDispatch(po_1, pirp_13);
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon91_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon84_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 604} status_7 := UniWrite(po_1, pirp_13);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon85_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 605} status_7 := UniRead(po_1, pirp_13);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon89_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon86_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 606} status_7 := UniClose(po_1, pirp_13);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 607} status_7 := UniOpen(po_1, pirp_13);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_56: int;

  anon0:
    call {:si_unique_call 608} vslice_dummy_var_56 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_281: int);
  free ensures {:va_keep} Tmp_281 == -1073741823 || Tmp_281 == -1073741808 || Tmp_281 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName_2: int) returns (Tmp_281: int)
{
  var {:scalar} Tmp_283: int;
  var {:pointer} SymbolicLinkName_2: int;

  anon0:
    SymbolicLinkName_2 := actual_SymbolicLinkName_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_281 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_281 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName_2 != 0;
    assume SymbolicLinkName_2 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_283 := 0;
    goto L22;

  L22:
    assume Tmp_283 != 0;
    Tmp_281 := 0;
    goto L1;

  anon8_Then:
    Tmp_283 := 1;
    goto L22;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_1: int);
  modifies alloc, queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_1: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_57: int;

  anon0:
    call {:si_unique_call 609} vslice_dummy_var_57 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    call {:si_unique_call 610} SLIC_sdv_KeReleaseSpinLock_entry(0);
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_58: int;

  anon0:
    call {:si_unique_call 611} vslice_dummy_var_58 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_1: int, actual_Source_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_59: int;

  anon0:
    call {:si_unique_call 612} vslice_dummy_var_59 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_3: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_2: int, actual_ResultLength_1: int) returns (Tmp_290: int);
  free ensures {:va_keep} Tmp_290 == -1073741811 || Tmp_290 == -1073741823 || Tmp_290 == 0 || Tmp_290 == 5 || Tmp_290 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle_3: int, actual_ValueName_1: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_2: int, actual_ResultLength_1: int) returns (Tmp_290: int)
{
  var {:scalar} L_1: int;
  var {:scalar} sdv_123: int;
  var {:scalar} Length_2: int;
  var {:pointer} ResultLength_1: int;

  anon0:
    Length_2 := actual_Length_2;
    ResultLength_1 := actual_ResultLength_1;
    L_1 := sdv_123;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L_1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L_1 == 0;
    Tmp_290 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L_1 != 0;
    Tmp_290 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L_1 == Length_2;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_2 != 0;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_290 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_2 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L_1 > Length_2;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_290 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_2 >= L_1;
    assume {:nonnull} ResultLength_1 != 0;
    assume ResultLength_1 > 0;
    Tmp_290 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L_1 != Length_2;
    goto L13;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int)
{
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 613} vslice_dummy_var_60 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_61: int;

  anon0:
    call {:si_unique_call 614} vslice_dummy_var_61 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int)
{
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 615} vslice_dummy_var_62 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_300: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_300: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    havoc Tmp_300;
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_302: int);
  free ensures {:va_keep} Tmp_302 == 1 || Tmp_302 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_302: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_302 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_302 := 0;
    goto L1;
}



procedure {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_304: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_304: int)
{
  var {:pointer} irpSp_9: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 616} irpSp_9 := sdv_IoGetNextIrpStackLocation(sdv_other_irp);
    assume {:nonnull} irpSp_9 != 0;
    assume irpSp_9 > 0;
    Tmp_304 := sdv_other_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_304 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_8: int, actual_Irp_11: int) returns (Tmp_306: int);
  free ensures {:va_keep} Tmp_306 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_8: int, actual_Irp_11: int) returns (Tmp_306: int)
{
  var {:scalar} status_8: int;
  var {:pointer} Irp_11: int;

  anon0:
    Irp_11 := actual_Irp_11;
    status_8 := 259;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    goto L19;

  L19:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  L25:
    Tmp_306 := status_8;
    return;

  anon32_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon31_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L19;

  anon39_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    goto L44;

  L44:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L44;

  anon40_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    goto L28;

  L28:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon33_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L28;

  anon41_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_11;
    goto L36;

  L36:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_11;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_11;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_11;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_11;
    goto L36;
}



procedure {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_1: int) returns (Tmp_308: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_ObReferenceObject"} {:osmodel} sdv_ObReferenceObject(actual_Object_1: int) returns (Tmp_308: int)
{
  var {:scalar} p_3: int;

  anon0:
    Tmp_308 := p_3;
    return;
}



procedure {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_4: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int) returns (Tmp_310: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_310 == 0 || Tmp_310 == -1073741727;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_4: int, actual_DesiredAccess_1: int, actual_ObjectAttributes_1: int) returns (Tmp_310: int)
{
  var {:pointer} sdv_130: int;
  var {:pointer} KeyHandle_4: int;

  anon0:
    KeyHandle_4 := actual_KeyHandle_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 617} sdv_130 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_4 != 0;
    assume KeyHandle_4 > 0;
    Tmp_310 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_4 != 0;
    assume KeyHandle_4 > 0;
    Tmp_310 := -1073741727;
    goto L1;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_1: int, actual_State: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_1: int;
  var {:scalar} State: int;
  var vslice_dummy_var_63: int;

  anon0:
    call {:si_unique_call 618} vslice_dummy_var_63 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_1 := actual_Type_1;
    State := actual_State;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_9: int, actual_Irp_12: int) returns (Tmp_314: int);
  free ensures {:va_keep} Tmp_314 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_9: int, actual_Irp_12: int) returns (Tmp_314: int)
{
  var {:pointer} Irp_12: int;

  anon0:
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 619} Tmp_314 := IofCallDriver(0, Irp_12);
    return;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_10: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_316: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_10: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_2: int, actual_IoStatusBlock: int) returns (Tmp_316: int)
{
  var {:pointer} Tmp_318: int;
  var {:pointer} Tmp_319: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_318;
    assume {:nonnull} Tmp_318 != 0;
    assume Tmp_318 > 0;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_316 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_319;
    assume {:nonnull} Tmp_319 != 0;
    assume Tmp_319 > 0;
    goto L14;

  anon5_Then:
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_316 := 0;
    goto L1;
}



procedure {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoAcquireCancelSpinLock"} {:osmodel} IoAcquireCancelSpinLock(actual_p_4: int)
{
  var {:pointer} p_4: int;
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 620} vslice_dummy_var_64 := __HAVOC_malloc(4);
    p_4 := actual_p_4;
    assume {:nonnull} p_4 != 0;
    assume p_4 > 0;
    return;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_17: int)
{
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 621} vslice_dummy_var_65 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_2: int)
{
  var {:pointer} SpinLock_2: int;
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 622} vslice_dummy_var_66 := __HAVOC_malloc(4);
    SpinLock_2 := actual_SpinLock_2;
    assume {:nonnull} SpinLock_2 != 0;
    assume SpinLock_2 > 0;
    return;
}



procedure {:origName "_sdv_init13"} {:osmodel} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init13"} {:osmodel} _sdv_init13()
{
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 623} vslice_dummy_var_67 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_isr_routine == li2bplFunctionConstant2397;
    assume sdv_ke_dpc == li2bplFunctionConstant2399;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant2402;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_328: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes: int, actual_Tag: int) returns (Tmp_328: int)
{
  var {:pointer} sdv_134: int;
  var {:scalar} NumberOfBytes: int;

  anon0:
    NumberOfBytes := actual_NumberOfBytes;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 624} sdv_134 := __HAVOC_malloc(NumberOfBytes);
    Tmp_328 := sdv_134;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_328 := 0;
    goto L1;
}



procedure {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int)
{
  var {:pointer} pdrivo: int;
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 625} vslice_dummy_var_68 := __HAVOC_malloc(4);
    pdrivo := actual_pdrivo;
    call {:si_unique_call 626} UniUnload(pdrivo);
    return;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_332: int);
  free ensures {:va_keep} Tmp_332 == -1073741772 || Tmp_332 == -1073741824 || Tmp_332 == -1073741789 || Tmp_332 == -1073741670 || Tmp_332 == -1073741808 || Tmp_332 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_3: int, actual_Enable: int) returns (Tmp_332: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_332 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_332 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_332 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_332 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_332 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_332 := 0;
    goto L1;
}



procedure {:origName "IoGetCurrentProcess"} {:osmodel} IoGetCurrentProcess() returns (Tmp_334: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoGetCurrentProcess"} {:osmodel} IoGetCurrentProcess() returns (Tmp_334: int)
{
  var {:pointer} sdv_136: int;
  var {:pointer} p_5: int;

  anon0:
    call {:si_unique_call 627} sdv_136 := __HAVOC_malloc(1);
    p_5 := sdv_136;
    Tmp_334 := p_5;
    return;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 628} vslice_dummy_var_69 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_70: int;

  anon0:
    call {:si_unique_call 629} vslice_dummy_var_70 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_11: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_340: int);
  free ensures {:va_keep} Tmp_340 == -1073741811 || Tmp_340 == -1073741808 || Tmp_340 == -1073741823 || Tmp_340 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_11: int, actual_DevInstKeyType: int, actual_DesiredAccess_2: int, actual_DevInstRegKey: int) returns (Tmp_340: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_340 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_340 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_340 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_340 := 0;
    goto L1;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_342: int);
  free ensures {:va_keep} Tmp_342 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_342: int)
{

  anon0:
    Tmp_342 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_344: int);
  free ensures {:va_keep} Tmp_344 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_344: int)
{

  anon0:
    Tmp_344 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_12: int, actual_Action: int) returns (Tmp_346: int);
  free ensures {:va_keep} Tmp_346 == -1073741823 || Tmp_346 == -1073741811 || Tmp_346 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_12: int, actual_Action: int) returns (Tmp_346: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_346 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_346 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_346 := 0;
    goto L1;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 630} vslice_dummy_var_71 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ModemSetRegistryKeyValue"} ModemSetRegistryKeyValue(actual_Pdo: int, actual_DevInstKeyType_1: int, actual_KeyNameString: int, actual_DataType: int, actual_Data_1: int, actual_DataLength: int) returns (Tmp_350: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_350 == -1073741790 || Tmp_350 == -1073741816 || Tmp_350 == -1073741823 || Tmp_350 == 0 || Tmp_350 == -1073741811 || Tmp_350 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemSetRegistryKeyValue"} ModemSetRegistryKeyValue(actual_Pdo: int, actual_DevInstKeyType_1: int, actual_KeyNameString: int, actual_DataType: int, actual_Data_1: int, actual_DataLength: int) returns (Tmp_350: int)
{
  var {:scalar} ntStatus: int;
  var {:scalar} keyName: int;
  var {:scalar} DevInstKeyType_1: int;
  var {:pointer} KeyNameString: int;
  var {:scalar} DataType: int;
  var {:scalar} DataLength: int;
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 631} keyName := __HAVOC_malloc(12);
    DevInstKeyType_1 := actual_DevInstKeyType_1;
    KeyNameString := actual_KeyNameString;
    DataType := actual_DataType;
    DataLength := actual_DataLength;
    ntStatus := -1073741670;
    call {:si_unique_call 632} sdv_do_paged_code_check();
    call {:si_unique_call 633} ntStatus := IoOpenDeviceRegistryKey(0, DevInstKeyType_1, 983103, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ntStatus >= 0;
    call {:si_unique_call 634} RtlInitUnicodeString(keyName, KeyNameString);
    call {:si_unique_call 635} ntStatus := ZwSetValueKey(0, 0, 0, DataType, 0, DataLength);
    goto L26;

  L26:
    Tmp_350 := ntStatus;
    return;

  anon3_Then:
    assume {:partition} 0 > ntStatus;
    call {:si_unique_call 636} vslice_dummy_var_72 := ZwClose(0);
    goto L26;
}



procedure {:origName "QueryDeviceCaps"} QueryDeviceCaps(actual_Pdo_1: int, actual_Capabilities: int) returns (Tmp_352: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "QueryDeviceCaps"} QueryDeviceCaps(actual_Pdo_1: int, actual_Capabilities: int) returns (Tmp_352: int)
{
  var {:pointer} deviceObject: int;
  var {:scalar} Status: int;
  var {:pointer} irp: int;
  var {:pointer} NextSp: int;
  var {:pointer} Pdo_1: int;
  var {:pointer} Capabilities: int;
  var vslice_dummy_var_32: int;

  anon0:
    Pdo_1 := actual_Pdo_1;
    Capabilities := actual_Capabilities;
    deviceObject := Pdo_1;
    goto L9;

  L9:
    call {:si_unique_call 637} deviceObject := QueryDeviceCaps_loop_L9(deviceObject);
    goto L9_last;

  L9_last:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc deviceObject;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc vslice_dummy_var_32;
    call {:si_unique_call 638} irp := IoAllocateIrp(vslice_dummy_var_32, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} irp != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 639} sdv_RtlZeroMemory(0, 64);
    assume {:nonnull} Capabilities != 0;
    assume Capabilities > 0;
    assume {:nonnull} Capabilities != 0;
    assume Capabilities > 0;
    assume {:nonnull} Capabilities != 0;
    assume Capabilities > 0;
    assume {:nonnull} Capabilities != 0;
    assume Capabilities > 0;
    call {:si_unique_call 640} NextSp := sdv_IoGetNextIrpStackLocation(irp);
    assume {:nonnull} NextSp != 0;
    assume NextSp > 0;
    assume {:nonnull} NextSp != 0;
    assume NextSp > 0;
    assume {:nonnull} NextSp != 0;
    assume NextSp > 0;
    call {:si_unique_call 641} Status := WaitForLowerDriverToCompleteIrp(deviceObject, irp, 0);
    call {:si_unique_call 642} IoFreeIrp(0);
    Tmp_352 := Status;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} irp == 0;
    Tmp_352 := -1073741670;
    goto L1;
}



procedure {:origName "UniLogError"} UniLogError(actual_DriverObject_1: int, actual_DeviceObject_13: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniLogError"} UniLogError(actual_DriverObject_1: int, actual_DeviceObject_13: int, actual_SequenceNumber: int, actual_MajorFunctionCode: int, actual_RetryCount: int, actual_UniqueErrorValue: int, actual_FinalStatus: int, actual_SpecificIOStatus: int, actual_LengthOfInsert1: int, actual_Insert1: int, actual_LengthOfInsert2: int, actual_Insert2: int)
{
  var {:pointer} sdv_145: int;
  var {:scalar} ErrorLogEntrySize: int;
  var {:pointer} errorLogEntry: int;
  var {:scalar} Tmp_354: int;
  var {:pointer} Tmp_356: int;
  var {:pointer} ptrToFirstInsert: int;
  var {:pointer} DriverObject_1: int;
  var {:pointer} DeviceObject_13: int;
  var {:scalar} SequenceNumber: int;
  var {:scalar} MajorFunctionCode: int;
  var {:scalar} RetryCount: int;
  var {:scalar} UniqueErrorValue: int;
  var {:scalar} FinalStatus: int;
  var {:scalar} SpecificIOStatus: int;
  var {:scalar} LengthOfInsert1: int;
  var {:pointer} Insert1: int;
  var {:scalar} LengthOfInsert2: int;
  var {:pointer} Insert2: int;
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 643} vslice_dummy_var_73 := __HAVOC_malloc(4);
    DriverObject_1 := actual_DriverObject_1;
    DeviceObject_13 := actual_DeviceObject_13;
    SequenceNumber := actual_SequenceNumber;
    MajorFunctionCode := actual_MajorFunctionCode;
    RetryCount := actual_RetryCount;
    UniqueErrorValue := actual_UniqueErrorValue;
    FinalStatus := actual_FinalStatus;
    SpecificIOStatus := actual_SpecificIOStatus;
    LengthOfInsert1 := actual_LengthOfInsert1;
    Insert1 := actual_Insert1;
    LengthOfInsert2 := actual_LengthOfInsert2;
    Insert2 := actual_Insert2;
    call {:si_unique_call 644} Tmp_356 := __HAVOC_malloc(4);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} DeviceObject_13 != 0;
    goto L11;

  L11:
    ErrorLogEntrySize := 48 + LengthOfInsert1 + LengthOfInsert2;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} 255 >= ErrorLogEntrySize;
    Tmp_354 := 48 + LengthOfInsert1 + LengthOfInsert2;
    call {:si_unique_call 645} sdv_145 := IoAllocateErrorLogEntry(0, Tmp_354);
    errorLogEntry := sdv_145;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_356;
    ptrToFirstInsert := Tmp_356;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} LengthOfInsert1 != 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Insert1 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 646} sdv_RtlCopyMemory(0, 0, LengthOfInsert1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} LengthOfInsert2 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Insert2 != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    call {:si_unique_call 647} sdv_RtlCopyMemory(0, 0, LengthOfInsert2);
    goto L28;

  L28:
    call {:si_unique_call 648} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} Insert2 == 0;
    goto L28;

  anon17_Then:
    assume {:partition} LengthOfInsert2 == 0;
    goto L28;

  anon16_Then:
    assume {:partition} Insert1 == 0;
    goto L28;

  anon21_Then:
    assume {:partition} LengthOfInsert1 == 0;
    goto L28;

  anon20_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon19_Then:
    assume {:partition} ErrorLogEntrySize > 255;
    goto L1;

  anon15_Then:
    assume {:partition} DeviceObject_13 == 0;
    goto L11;
}



procedure {:origName "HasIrpBeenCanceled"} HasIrpBeenCanceled(actual_Irp_13: int) returns (Tmp_358: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "HasIrpBeenCanceled"} HasIrpBeenCanceled(actual_Irp_13: int) returns (Tmp_358: int)
{
  var {:pointer} Tmp_359: int;
  var {:scalar} Canceled: int;
  var {:scalar} CancelIrql_6: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_74: int;

  anon0:
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 649} Tmp_359 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_359 != 0;
    assume Tmp_359 > 0;
    call {:si_unique_call 650} IoAcquireCancelSpinLock(Tmp_359);
    assume {:nonnull} Tmp_359 != 0;
    assume Tmp_359 > 0;
    havoc CancelIrql_6;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    havoc Canceled;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    goto L10;

  L10:
    call {:si_unique_call 651} vslice_dummy_var_74 := sdv_IoSetCancelRoutine(Irp_13, 0);
    call {:si_unique_call 652} IoReleaseCancelSpinLock(CancelIrql_6);
    Tmp_358 := Canceled;
    return;

  anon3_Then:
    goto L10;
}



procedure {:origName "ModemAddDevice"} ModemAddDevice(actual_DriverObject_2: int, actual_Pdo_2: int) returns (Tmp_360: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_360 == 0 || Tmp_360 == -1073741823 || Tmp_360 == -1073741584 || Tmp_360 == -1073741808 || Tmp_360 == -1073741789 || Tmp_360 == -1073741670 || Tmp_360 == -1073741824 || Tmp_360 == -1073741771;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemAddDevice"} ModemAddDevice(actual_DriverObject_2: int, actual_Pdo_2: int) returns (Tmp_360: int)
{
  var {:pointer} Tmp_361: int;
  var {:pointer} Tmp_362: int;
  var {:dopa} {:scalar} dwRegval: int;
  var {:pointer} Tmp_363: int;
  var {:dopa} {:scalar} dwTemp: int;
  var {:pointer} Tmp_364: int;
  var {:pointer} Fdo: int;
  var {:pointer} Tmp_365: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} Tmp_368: int;
  var {:pointer} Tmp_369: int;
  var {:pointer} Tmp_370: int;
  var {:pointer} LowerDevice: int;
  var {:pointer} Tmp_371: int;
  var {:pointer} Tmp_372: int;
  var {:pointer} Tmp_373: int;
  var {:pointer} Tmp_374: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_375: int;
  var {:pointer} Tmp_376: int;
  var {:pointer} deviceExtension: int;
  var {:pointer} Tmp_377: int;
  var {:pointer} DriverObject_2: int;
  var {:pointer} Pdo_2: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 653} dwRegval := __HAVOC_malloc(4);
    call {:si_unique_call 654} dwTemp := __HAVOC_malloc(4);
    call {:si_unique_call 655} Fdo := __HAVOC_malloc(4);
    DriverObject_2 := actual_DriverObject_2;
    Pdo_2 := actual_Pdo_2;
    call {:si_unique_call 656} Tmp_361 := __HAVOC_malloc(72);
    call {:si_unique_call 657} Tmp_362 := __HAVOC_malloc(48);
    call {:si_unique_call 658} Tmp_364 := __HAVOC_malloc(72);
    call {:si_unique_call 659} Tmp_367 := __HAVOC_malloc(72);
    call {:si_unique_call 660} Tmp_368 := __HAVOC_malloc(48);
    call {:si_unique_call 661} Tmp_369 := __HAVOC_malloc(72);
    call {:si_unique_call 662} Tmp_370 := __HAVOC_malloc(44);
    call {:si_unique_call 663} Tmp_371 := __HAVOC_malloc(72);
    call {:si_unique_call 664} Tmp_372 := __HAVOC_malloc(72);
    call {:si_unique_call 665} Tmp_375 := __HAVOC_malloc(48);
    call {:si_unique_call 666} Tmp_376 := __HAVOC_malloc(44);
    call {:si_unique_call 667} Tmp_377 := __HAVOC_malloc(48);
    assume {:nonnull} dwTemp != 0;
    assume dwTemp > 0;
    status_9 := 0;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    deviceExtension := 0;
    call {:si_unique_call 668} status_9 := IoCreateDevice(0, 688, 0, 43, 128, 0, Fdo);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_9 >= 0;
    assume {:nonnull} Pdo_2 != 0;
    assume Pdo_2 > 0;
    call {:si_unique_call 669} LowerDevice := IoAttachDeviceToDeviceStack(0, Pdo_2);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} LowerDevice != 0;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc deviceExtension;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 670} status_9 := ExInitializeResourceLite(0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_9 != 0;
    call {:si_unique_call 671} IoDetachDevice(0);
    call {:si_unique_call 672} IoDeleteDevice(0);
    Tmp_360 := status_9;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} status_9 == 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    Tmp_370 := strConst__li2bpl5;
    call {:si_unique_call 673} status_9 := ModemGetRegistryKeyValue(Pdo_2, 1, Tmp_370, dwTemp, 4);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_9 < 0;
    assume {:nonnull} dwRegval != 0;
    assume dwRegval > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} dwRegval != 0;
    assume dwRegval > 0;
    goto L127;

  L127:
    Tmp_376 := strConst__li2bpl5;
    call {:si_unique_call 674} status_9 := ModemSetRegistryKeyValue(Pdo_2, 1, Tmp_376, 4, dwRegval, 4);
    goto L59;

  L59:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 675} KeInitializeEvent(RemoveEvent__DEVICE_EXTENSION(deviceExtension), 0, 0);
    call {:si_unique_call 676} Tmp_374 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 677} sdv_KeInitializeSpinLock(Tmp_374);
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 678} InitializeListHead(PassThroughQueue__DEVICE_EXTENSION(deviceExtension));
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 679} InitializeListHead(MaskOps__DEVICE_EXTENSION(deviceExtension));
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_368;
    assume {:nonnull} Tmp_368 != 0;
    assume Tmp_368 > 0;
    Tmp_363 := GetList__IPC_CONTROL(Tmp_368);
    call {:si_unique_call 680} InitializeListHead(Tmp_363);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_362;
    assume {:nonnull} Tmp_362 != 0;
    assume Tmp_362 > 0;
    Tmp_366 := PutList__IPC_CONTROL(Tmp_362);
    call {:si_unique_call 681} InitializeListHead(Tmp_366);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_375;
    assume {:nonnull} Tmp_375 != 0;
    assume Tmp_375 > 0;
    Tmp_365 := GetList__IPC_CONTROL(Tmp_375 + 1 * 24);
    call {:si_unique_call 682} InitializeListHead(Tmp_365);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_377;
    assume {:nonnull} Tmp_377 != 0;
    assume Tmp_377 > 0;
    Tmp_373 := PutList__IPC_CONTROL(Tmp_377 + 1 * 24);
    call {:si_unique_call 683} InitializeListHead(Tmp_373);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc vslice_dummy_var_33;
    call {:si_unique_call 684} InitIrpQueue(WriteIrpControl__DEVICE_EXTENSION(deviceExtension), vslice_dummy_var_33, li2bplFunctionConstant1123);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc vslice_dummy_var_34;
    call {:si_unique_call 685} InitIrpQueue(ReadIrpControl__DEVICE_EXTENSION(deviceExtension), vslice_dummy_var_34, li2bplFunctionConstant1119);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 686} KeInitializeDpc(WaveStopDpc__DEVICE_EXTENSION(deviceExtension), li2bplFunctionConstant1655, 0);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_367;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_372;
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_361;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_369;
    assume {:nonnull} Tmp_361 != 0;
    assume Tmp_361 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_371;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc Tmp_364;
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 687} status_9 := ModemHandleSymbolicLink(Pdo_2, InterfaceNameString__DEVICE_EXTENSION(deviceExtension), 1);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_9 >= 0;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    call {:si_unique_call 688} vslice_dummy_var_76 := IoWMIRegistrationControl(0, 1);
    goto L114;

  L114:
    Tmp_360 := status_9;
    goto L1;

  anon20_Then:
    assume {:partition} 0 > status_9;
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc vslice_dummy_var_35;
    call {:si_unique_call 689} UniLogError(DriverObject_2, vslice_dummy_var_35, 0, 0, 0, 52, status_9, -1073414143, 0, 0, 0, 0);
    call {:si_unique_call 690} IoDetachDevice(0);
    call {:si_unique_call 691} vslice_dummy_var_75 := ExDeleteResourceLite(0);
    call {:si_unique_call 692} IoDeleteDevice(0);
    goto L114;

  anon21_Then:
    goto L127;

  anon18_Then:
    assume {:partition} 0 <= status_9;
    assume {:nonnull} dwTemp != 0;
    assume dwTemp > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto L59;

  anon19_Then:
    goto L59;

  anon16_Then:
    assume {:partition} LowerDevice == 0;
    call {:si_unique_call 693} UniLogError(DriverObject_2, 0, 0, 0, 0, 5, status_9, -1073414142, 0, 0, 0, 0);
    call {:si_unique_call 694} IoDeleteDevice(0);
    Tmp_360 := -1073741670;
    goto L1;

  anon15_Then:
    assume {:partition} 0 > status_9;
    call {:si_unique_call 695} UniLogError(DriverObject_2, 0, 0, 0, 0, 5, status_9, -1073414142, 0, 0, 0, 0);
    Tmp_360 := status_9;
    goto L1;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 696} vslice_dummy_var_77 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_3: int, actual_RegistryPath: int) returns (Tmp_380: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_380 == 0 || Tmp_380 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_3: int, actual_RegistryPath: int) returns (Tmp_380: int)
{
  var {:dopa} {:scalar} shouldBreak: int;
  var {:pointer} paramTable: int;
  var {:scalar} Tmp_382: int;
  var {:pointer} Tmp_383: int;
  var {:pointer} Tmp_384: int;
  var {:pointer} sdv_155: int;
  var {:dopa} {:scalar} debugLevel: int;
  var {:pointer} Tmp_387: int;
  var {:pointer} Tmp_388: int;
  var {:scalar} Tmp_389: int;
  var {:pointer} Tmp_390: int;
  var {:scalar} sdv_156: int;
  var {:pointer} sdv_157: int;
  var {:pointer} Tmp_391: int;
  var {:pointer} Tmp_392: int;
  var {:pointer} Tmp_393: int;
  var {:pointer} Tmp_394: int;
  var {:dopa} {:scalar} debugFlags: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} Tmp_396: int;
  var {:scalar} Tmp_397: int;
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_399: int;
  var {:dopa} {:scalar} zero: int;
  var {:pointer} DriverObject_3: int;
  var {:pointer} RegistryPath: int;

  anon0:
    call {:si_unique_call 697} shouldBreak := __HAVOC_malloc(4);
    call {:si_unique_call 698} debugLevel := __HAVOC_malloc(4);
    call {:si_unique_call 699} debugFlags := __HAVOC_malloc(4);
    call {:si_unique_call 700} zero := __HAVOC_malloc(4);
    DriverObject_3 := actual_DriverObject_3;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 701} paramTable := __HAVOC_malloc(112);
    call {:si_unique_call 702} Tmp_383 := __HAVOC_malloc(112);
    call {:si_unique_call 703} Tmp_384 := __HAVOC_malloc(112);
    call {:si_unique_call 704} Tmp_387 := __HAVOC_malloc(112);
    call {:si_unique_call 705} Tmp_388 := __HAVOC_malloc(112);
    call {:si_unique_call 706} Tmp_390 := __HAVOC_malloc(112);
    call {:si_unique_call 707} Tmp_391 := __HAVOC_malloc(112);
    call {:si_unique_call 708} Tmp_392 := __HAVOC_malloc(112);
    call {:si_unique_call 709} Tmp_394 := __HAVOC_malloc(112);
    call {:si_unique_call 710} Tmp_395 := __HAVOC_malloc(112);
    call {:si_unique_call 711} Tmp_396 := __HAVOC_malloc(112);
    call {:si_unique_call 712} Tmp_398 := __HAVOC_malloc(112);
    call {:si_unique_call 713} Tmp_399 := __HAVOC_malloc(112);
    assume {:nonnull} zero != 0;
    assume zero > 0;
    assume {:nonnull} debugLevel != 0;
    assume debugLevel > 0;
    assume {:nonnull} debugFlags != 0;
    assume debugFlags > 0;
    assume {:nonnull} shouldBreak != 0;
    assume shouldBreak > 0;
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_382;
    call {:si_unique_call 714} sdv_155 := ExAllocatePoolWithTag(1, Tmp_382, -851161771);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_397;
    call {:si_unique_call 715} sdv_RtlCopyMemory(0, 0, Tmp_397);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_389;
    call {:si_unique_call 716} sdv_RtlZeroMemory(0, 112);
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    assume {:nonnull} paramTable != 0;
    assume paramTable > 0;
    call {:si_unique_call 717} sdv_156 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_156 >= 0;
    goto L55;

  L55:
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_393;
    assume {:nonnull} Tmp_393 != 0;
    assume Tmp_393 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_399;
    assume {:nonnull} Tmp_399 != 0;
    assume Tmp_399 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_387;
    assume {:nonnull} Tmp_387 != 0;
    assume Tmp_387 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_396;
    assume {:nonnull} Tmp_396 != 0;
    assume Tmp_396 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_395;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_391;
    assume {:nonnull} Tmp_391 != 0;
    assume Tmp_391 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_384;
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_398;
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_388;
    assume {:nonnull} Tmp_388 != 0;
    assume Tmp_388 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_394;
    assume {:nonnull} Tmp_394 != 0;
    assume Tmp_394 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_383;
    assume {:nonnull} Tmp_383 != 0;
    assume Tmp_383 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_390;
    assume {:nonnull} Tmp_390 != 0;
    assume Tmp_390 > 0;
    assume {:nonnull} DriverObject_3 != 0;
    assume DriverObject_3 > 0;
    havoc Tmp_392;
    assume {:nonnull} Tmp_392 != 0;
    assume Tmp_392 > 0;
    call {:si_unique_call 718} sdv_157 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant1826);
    call {:si_unique_call 719} MmUnlockPagableImageSection(0);
    Tmp_380 := 0;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} 0 > sdv_156;
    assume {:nonnull} shouldBreak != 0;
    assume shouldBreak > 0;
    assume {:nonnull} debugLevel != 0;
    assume debugLevel > 0;
    goto L55;

  anon6_Then:
    Tmp_380 := -1073741670;
    goto L1;
}



procedure {:origName "ModemHandleSymbolicLink"} ModemHandleSymbolicLink(actual_Pdo_3: int, actual_InterfaceName: int, actual_Create: int) returns (Tmp_400: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_400 == -1073741584 || Tmp_400 == -1073741808 || Tmp_400 == -1073741823 || Tmp_400 == 0 || Tmp_400 == -1073741789 || Tmp_400 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemHandleSymbolicLink"} ModemHandleSymbolicLink(actual_Pdo_3: int, actual_InterfaceName: int, actual_Create: int) returns (Tmp_400: int)
{
  var {:scalar} SymbolicLink: int;
  var {:scalar} Tmp_401: int;
  var {:scalar} Tmp_402: int;
  var {:pointer} Tmp_403: int;
  var {:pointer} sdv_158: int;
  var {:scalar} Status_1: int;
  var {:scalar} Tmp_404: int;
  var {:scalar} Tmp_405: int;
  var {:scalar} Tmp_407: int;
  var {:scalar} StringLength: int;
  var {:pointer} sdv_165: int;
  var {:scalar} PdoName: int;
  var {:pointer} InterfaceName: int;
  var {:scalar} Create: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;

  anon0:
    call {:si_unique_call 720} SymbolicLink := __HAVOC_malloc(12);
    call {:si_unique_call 721} PdoName := __HAVOC_malloc(12);
    InterfaceName := actual_InterfaceName;
    Create := actual_Create;
    call {:si_unique_call 722} vslice_dummy_var_80 := __HAVOC_malloc(52);
    StringLength := 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    havoc Tmp_407;
    call {:si_unique_call 723} sdv_158 := ExAllocatePoolWithTag(1, Tmp_407, -851161771);
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    havoc Tmp_401;
    call {:si_unique_call 724} sdv_RtlZeroMemory(0, Tmp_401);
    call {:si_unique_call 725} vslice_dummy_var_81 := corral_nondet();
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    havoc Tmp_402;
    call {:si_unique_call 726} Tmp_403 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    call {:si_unique_call 727} Status_1 := IoGetDeviceProperty(0, 4105, Tmp_402, 0, Tmp_403);
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    havoc StringLength;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Status_1 >= 0;
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Create != 0;
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    havoc Tmp_405;
    call {:si_unique_call 728} sdv_165 := ExAllocatePoolWithTag(1, Tmp_405, -851161771);
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    havoc Tmp_404;
    call {:si_unique_call 729} Tmp_403 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    call {:si_unique_call 730} Status_1 := IoGetDeviceProperty(0, 4107, Tmp_404, 0, Tmp_403);
    assume {:nonnull} Tmp_403 != 0;
    assume Tmp_403 > 0;
    havoc StringLength;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Status_1 >= 0;
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    call {:si_unique_call 731} Status_1 := IoCreateSymbolicLink(0, 0);
    call {:si_unique_call 732} sdv_ExFreePool(0);
    assume {:nonnull} PdoName != 0;
    assume PdoName > 0;
    call {:si_unique_call 733} Status_1 := IoRegisterDeviceInterface(0, 0, 0, InterfaceName);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Status_1 >= 0;
    call {:si_unique_call 734} vslice_dummy_var_78 := IoSetDeviceInterfaceState(0, 1);
    goto L71;

  L71:
    call {:si_unique_call 735} sdv_ExFreePool(0);
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    Tmp_400 := Status_1;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} 0 > Status_1;
    goto L71;

  anon17_Then:
    assume {:partition} 0 > Status_1;
    call {:si_unique_call 736} sdv_ExFreePool(0);
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    Tmp_400 := Status_1;
    goto L1;

  anon21_Then:
    call {:si_unique_call 737} sdv_ExFreePool(0);
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    Tmp_400 := -1073741670;
    goto L1;

  anon20_Then:
    assume {:partition} Create == 0;
    assume {:nonnull} InterfaceName != 0;
    assume InterfaceName > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 738} vslice_dummy_var_79 := IoSetDeviceInterfaceState(0, 0);
    call {:si_unique_call 739} RtlFreeUnicodeString(0);
    goto L83;

  L83:
    call {:si_unique_call 740} Status_1 := IoDeleteSymbolicLink(0);
    goto L71;

  anon16_Then:
    goto L83;

  anon15_Then:
    assume {:partition} 0 > Status_1;
    call {:si_unique_call 741} sdv_ExFreePool(0);
    assume {:nonnull} SymbolicLink != 0;
    assume SymbolicLink > 0;
    Tmp_400 := Status_1;
    goto L1;

  anon19_Then:
    Tmp_400 := -1073741670;
    goto L1;
}



procedure {:origName "ForwardIrp"} ForwardIrp(actual_NextDevice: int, actual_Irp_14: int) returns (Tmp_409: int);
  modifies alloc, stack_location;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} Tmp_409 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ForwardIrp"} ForwardIrp(actual_NextDevice: int, actual_Irp_14: int) returns (Tmp_409: int)
{
  var {:pointer} NextDevice: int;
  var {:pointer} Irp_14: int;

  anon0:
    NextDevice := actual_NextDevice;
    Irp_14 := actual_Irp_14;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 742} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L11;

  L11:
    call {:si_unique_call 743} sdv_IoSkipCurrentIrpStackLocation(Irp_14);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 744} SLIC_sdv_IoCallDriver_entry(0);
    goto L14;

  L14:
    call {:si_unique_call 745} Tmp_409 := sdv_IoCallDriver(NextDevice, Irp_14);
    return;

  anon6_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L14;

  anon5_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L11;
}



procedure {:origName "IsDeviceMultifunctionEnumerated"} IsDeviceMultifunctionEnumerated(actual_Pdo_4: int, actual_Match: int) returns (Tmp_411: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_411 == -1073741584 || Tmp_411 == -1073741808 || Tmp_411 == -1073741823 || Tmp_411 == 0 || Tmp_411 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "IsDeviceMultifunctionEnumerated"} IsDeviceMultifunctionEnumerated(actual_Pdo_4: int, actual_Match: int) returns (Tmp_411: int)
{
  var {:scalar} Status_2: int;
  var {:scalar} sdv_170: int;
  var {:scalar} BytesUsed: int;
  var {:pointer} Tmp_412: int;
  var {:pointer} Match: int;
  var vslice_dummy_var_82: int;

  anon0:
    Match := actual_Match;
    call {:si_unique_call 746} vslice_dummy_var_82 := __HAVOC_malloc(1040);
    call {:si_unique_call 747} Tmp_412 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    call {:si_unique_call 748} Status_2 := IoGetDeviceProperty(0, 4111, 520, 0, Tmp_412);
    assume {:nonnull} Tmp_412 != 0;
    assume Tmp_412 > 0;
    havoc BytesUsed;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Status_2 >= 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} 0 != sdv_170;
    assume {:nonnull} Match != 0;
    assume Match > 0;
    goto L24;

  L24:
    goto L11;

  L11:
    Tmp_411 := Status_2;
    return;

  anon6_Then:
    assume {:partition} 0 == sdv_170;
    assume {:nonnull} Match != 0;
    assume Match > 0;
    goto L24;

  anon5_Then:
    assume {:partition} 0 > Status_2;
    goto L11;
}



procedure {:origName "ModemPnP"} ModemPnP(actual_DeviceObject_14: int, actual_Irp_15: int) returns (Tmp_413: int);
  modifies alloc, stack_location, locked, queuedWithoutMarking, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemPnP"} ModemPnP(actual_DeviceObject_14: int, actual_Irp_15: int) returns (Tmp_413: int)
{
  var {:scalar} i: int;
  var {:scalar} i_1: int;
  var {:scalar} Tmp_414: int;
  var {:pointer} PdoDeviceExtension: int;
  var {:pointer} irpSp_10: int;
  var {:pointer} Tmp_415: int;
  var {:pointer} Tmp_416: int;
  var {:scalar} Tmp_417: int;
  var {:pointer} Tmp_418: int;
  var {:pointer} CurrentRelations: int;
  var {:pointer} Tmp_419: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_420: int;
  var {:pointer} Tmp_421: int;
  var {:pointer} sdv_183: int;
  var {:pointer} Tmp_422: int;
  var {:pointer} NewRelations: int;
  var {:pointer} Tmp_423: int;
  var {:pointer} sdv_192: int;
  var {:pointer} Descriptor: int;
  var {:dopa} {:scalar} MultifunctionEnumerated: int;
  var {:scalar} Tmp_424: int;
  var {:pointer} ResourceRequirementsList: int;
  var {:scalar} Tmp_425: int;
  var {:pointer} Tmp_426: int;
  var {:scalar} sdv_200: int;
  var {:scalar} NewReferenceCount: int;
  var {:pointer} ResourceList: int;
  var {:scalar} Tmp_427: int;
  var {:scalar} CurrentRelationsSize: int;
  var {:pointer} Tmp_428: int;
  var {:scalar} status_10: int;
  var {:scalar} Tmp_429: int;
  var {:scalar} Tmp_430: int;
  var {:pointer} Tmp_431: int;
  var {:pointer} deviceExtension_1: int;
  var {:pointer} Tmp_432: int;
  var {:pointer} Tmp_434: int;
  var {:pointer} Tmp_435: int;
  var {:pointer} DeviceObject_14: int;
  var {:pointer} Irp_15: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 749} MultifunctionEnumerated := __HAVOC_malloc(4);
    DeviceObject_14 := actual_DeviceObject_14;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 750} Tmp_416 := __HAVOC_malloc(28);
    call {:si_unique_call 751} Tmp_419 := __HAVOC_malloc(432);
    call {:si_unique_call 752} Tmp_423 := __HAVOC_malloc(28);
    call {:si_unique_call 753} Tmp_426 := __HAVOC_malloc(28);
    call {:si_unique_call 754} Tmp_428 := __HAVOC_malloc(28);
    call {:si_unique_call 755} Tmp_431 := __HAVOC_malloc(4);
    call {:si_unique_call 756} Tmp_432 := __HAVOC_malloc(420);
    call {:si_unique_call 757} vslice_dummy_var_96 := __HAVOC_malloc(116);
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc deviceExtension_1;
    call {:si_unique_call 758} irpSp_10 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    goto L17;

  L17:
    call {:si_unique_call 759} Tmp_413 := ModemPdoPnp(DeviceObject_14, Irp_15);
    goto L1;

  L1:
    call {:si_unique_call 760} SLIC_ModemPnP_exit(strConst__li2bpl0, Tmp_413);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon115_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon114_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    call {:si_unique_call 761} vslice_dummy_var_97 := corral_nondet();
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 762} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := 0;
    goto L1;

  anon86_Then:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_36;
    call {:si_unique_call 763} vslice_dummy_var_99 := ModemHandleSymbolicLink(vslice_dummy_var_36, InterfaceNameString__DEVICE_EXTENSION(deviceExtension_1), 0);
    call {:si_unique_call 764} vslice_dummy_var_83 := IoWMIRegistrationControl(0, 2);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 765} vslice_dummy_var_84 := IoSetDeviceInterfaceState(0, 0);
    goto L60;

  L60:
    call {:si_unique_call 766} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 767} KeEnterCriticalRegion();
    call {:si_unique_call 768} vslice_dummy_var_85 := ExAcquireResourceExclusiveLite(0, 1);
    call {:si_unique_call 769} CleanUpOnRemove(DeviceObject_14, Irp_15);
    call {:si_unique_call 770} ExReleaseResourceLite(0);
    call {:si_unique_call 771} KeLeaveCriticalRegion();
    call {:si_unique_call 772} MmUnlockPagableImageSection(0);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_37;
    call {:si_unique_call 773} Tmp_413 := ForwardIrp(vslice_dummy_var_37, Irp_15);
    goto L1;

  anon88_Then:
    goto L60;

  anon104_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_38;
    call {:si_unique_call 774} Tmp_413 := ForwardIrp(vslice_dummy_var_38, Irp_15);
    goto L1;

  anon105_Then:
    assume {:nonnull} MultifunctionEnumerated != 0;
    assume MultifunctionEnumerated > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_39;
    call {:si_unique_call 775} status_10 := IsDeviceMultifunctionEnumerated(vslice_dummy_var_39, MultifunctionEnumerated);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_40;
    call {:si_unique_call 776} status_10 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_40, Irp_15, 1);
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} status_10 < 0;
    goto L106;

  L106:
    call {:si_unique_call 777} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon89_Then:
    assume {:partition} 0 <= status_10;
    assume {:nonnull} MultifunctionEnumerated != 0;
    assume MultifunctionEnumerated > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto L106;

  anon90_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc ResourceRequirementsList;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:partition} ResourceRequirementsList != 0;
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    havoc Tmp_419;
    ResourceList := Tmp_419;
    i := 0;
    goto L111;

  L111:
    call {:si_unique_call 778} i, j, Descriptor, Tmp_424, Tmp_432 := ModemPnP_loop_L111(i, j, Descriptor, Tmp_424, ResourceRequirementsList, ResourceList, Tmp_432);
    goto L111_last;

  L111_last:
    assume {:nonnull} ResourceRequirementsList != 0;
    assume ResourceRequirementsList > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    j := 0;
    goto L113;

  L113:
    call {:si_unique_call 779} j, Descriptor, Tmp_424, Tmp_432 := ModemPnP_loop_L113(j, Descriptor, Tmp_424, ResourceList, Tmp_432);
    goto L113_last;

  L113_last:
    assume {:nonnull} ResourceList != 0;
    assume ResourceList > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    Tmp_424 := j;
    assume {:nonnull} ResourceList != 0;
    assume ResourceList > 0;
    havoc Tmp_432;
    Descriptor := Tmp_432 + Tmp_424 * 420;
    assume {:nonnull} Descriptor != 0;
    assume Descriptor > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} Descriptor != 0;
    assume Descriptor > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} Descriptor != 0;
    assume Descriptor > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} Descriptor != 0;
    assume Descriptor > 0;
    goto L118;

  L118:
    j := j + 1;
    goto L118_dummy;

  L118_dummy:
    assume false;
    return;

  anon94_Then:
    goto L118;

  anon93_Then:
    goto L118;

  anon126_Then:
    goto L118;

  anon92_Then:
    i := i + 1;
    goto anon92_Then_dummy;

  anon92_Then_dummy:
    assume false;
    return;

  anon91_Then:
    goto L106;

  anon125_Then:
    assume {:partition} ResourceRequirementsList == 0;
    goto L106;

  anon106_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_41;
    call {:si_unique_call 780} status_10 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_41, Irp_15, 1);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 781} irpSp_10 := sdv_IoGetCurrentIrpStackLocation(Irp_15);
    i_1 := 0;
    goto L134;

  L134:
    call {:si_unique_call 782} i_1, Tmp_423, Tmp_425 := ModemPnP_loop_L134(i_1, Tmp_423, Tmp_425, deviceExtension_1);
    goto L134_last;

  L134_last:
    assume {:CounterLoop 7} {:Counter "i_1"} true;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} 7 > i_1;
    Tmp_425 := i_1;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_423;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    i_1 := i_1 + 1;
    goto anon95_Else_dummy;

  anon95_Else_dummy:
    assume false;
    return;

  anon95_Then:
    assume {:partition} i_1 >= 7;
    i_1 := 1;
    goto L138;

  L138:
    call {:si_unique_call 783} i_1, Tmp_415, Tmp_416, Tmp_417, Tmp_428, Tmp_429 := ModemPnP_loop_L138(i_1, irpSp_10, Tmp_415, Tmp_416, Tmp_417, Tmp_428, Tmp_429, deviceExtension_1);
    goto L138_last;

  L138_last:
    assume {:CounterLoop 5} {:Counter "i_1"} true;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} 6 > i_1;
    Tmp_429 := i_1;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_416;
    Tmp_417 := i_1;
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc Tmp_415;
    assume {:nonnull} Tmp_415 != 0;
    assume Tmp_415 > 0;
    havoc Tmp_428;
    assume {:nonnull} Tmp_416 != 0;
    assume Tmp_416 > 0;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    i_1 := i_1 + 1;
    goto anon96_Else_dummy;

  anon96_Else_dummy:
    assume false;
    return;

  anon96_Then:
    assume {:partition} i_1 >= 6;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_426;
    assume {:nonnull} Tmp_426 != 0;
    assume Tmp_426 > 0;
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc Tmp_421;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    havoc Tmp_418;
    assume {:nonnull} Tmp_418 != 0;
    assume Tmp_418 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 784} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon107_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc CurrentRelations;
    NewRelations := 0;
    assume {:nonnull} irpSp_10 != 0;
    assume irpSp_10 > 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_42;
    call {:si_unique_call 785} Tmp_413 := ForwardIrp(vslice_dummy_var_42, Irp_15);
    goto L1;

  anon119_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_43;
    call {:si_unique_call 786} status_10 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_43, Irp_15, 1);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc CurrentRelations;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} status_10 >= 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} CurrentRelations != 0;
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    havoc CurrentRelationsSize;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} CurrentRelationsSize > -1;
    call {:si_unique_call 787} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon121_Then:
    assume {:partition} -1 >= CurrentRelationsSize;
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    havoc Tmp_427;
    call {:si_unique_call 788} sdv_192 := ExAllocatePoolWithTag(1, Tmp_427, -851161771);
    NewRelations := sdv_192;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} NewRelations != 0;
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    havoc Tmp_430;
    call {:si_unique_call 789} sdv_RtlCopyMemory(0, 0, Tmp_430);
    call {:si_unique_call 790} sdv_ExFreePool(0);
    CurrentRelations := 0;
    CurrentRelations := NewRelations;
    NewRelations := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto L191;

  L191:
    call {:si_unique_call 791} KeEnterCriticalRegion();
    call {:si_unique_call 792} vslice_dummy_var_86 := ExAcquireResourceExclusiveLite(0, 1);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_434;
    assume {:nonnull} Tmp_434 != 0;
    assume Tmp_434 > 0;
    havoc Tmp_422;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    goto anon123_Then, anon123_Else;

  anon123_Else:
    call {:si_unique_call 793} vslice_dummy_var_87 := sdv_ObReferenceObject(0);
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    havoc Tmp_414;
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    havoc Tmp_431;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} CurrentRelations != 0;
    assume CurrentRelations > 0;
    goto L198;

  L198:
    call {:si_unique_call 794} ExReleaseResourceLite(0);
    call {:si_unique_call 795} KeLeaveCriticalRegion();
    status_10 := 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 796} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon123_Then:
    goto L198;

  anon98_Then:
    goto L198;

  anon122_Then:
    assume {:partition} NewRelations == 0;
    call {:si_unique_call 797} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon97_Then:
    assume {:partition} CurrentRelations == 0;
    goto L161;

  L161:
    call {:si_unique_call 798} sdv_183 := ExAllocatePoolWithTag(1, 8, -851161771);
    CurrentRelations := sdv_183;
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} CurrentRelations != 0;
    call {:si_unique_call 799} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    goto L191;

  anon124_Then:
    assume {:partition} CurrentRelations == 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 800} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := -1073741670;
    goto L1;

  anon120_Then:
    assume {:partition} 0 > status_10;
    goto L161;

  anon108_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_44;
    call {:si_unique_call 801} status_10 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_44, Irp_15, 1);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 802} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon109_Then:
    call {:si_unique_call 803} KeEnterCriticalRegion();
    call {:si_unique_call 804} vslice_dummy_var_88 := ExAcquireResourceExclusiveLite(0, 1);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    call {:si_unique_call 805} ExReleaseResourceLite(0);
    call {:si_unique_call 806} KeLeaveCriticalRegion();
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 807} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := -1073741823;
    goto L1;

  anon99_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 808} ExReleaseResourceLite(0);
    call {:si_unique_call 809} KeLeaveCriticalRegion();
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_45;
    call {:si_unique_call 810} Tmp_413 := ForwardIrp(vslice_dummy_var_45, Irp_15);
    goto L1;

  anon110_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_46;
    call {:si_unique_call 811} Tmp_413 := ForwardIrp(vslice_dummy_var_46, Irp_15);
    goto L1;

  anon111_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_47;
    call {:si_unique_call 812} Tmp_413 := ForwardIrp(vslice_dummy_var_47, Irp_15);
    goto L1;

  anon112_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    goto L280;

  L280:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_48;
    call {:si_unique_call 813} vslice_dummy_var_90 := RemoveWaveDriverRegKeyValue(vslice_dummy_var_48);
    call {:si_unique_call 814} MmLockPagableSectionByHandle(0);
    call {:si_unique_call 815} KeEnterCriticalRegion();
    call {:si_unique_call 816} vslice_dummy_var_91 := ExAcquireResourceExclusiveLite(0, 1);
    call {:si_unique_call 817} CleanUpOnRemove(DeviceObject_14, Irp_15);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_420;
    assume {:nonnull} Tmp_420 != 0;
    assume Tmp_420 > 0;
    havoc PdoDeviceExtension;
    assume {:nonnull} PdoDeviceExtension != 0;
    assume PdoDeviceExtension > 0;
    assume {:nonnull} PdoDeviceExtension != 0;
    assume PdoDeviceExtension > 0;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:nonnull} PdoDeviceExtension != 0;
    assume PdoDeviceExtension > 0;
    call {:si_unique_call 818} IoDeleteDevice(0);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto L296;

  L296:
    call {:si_unique_call 819} ExReleaseResourceLite(0);
    call {:si_unique_call 820} KeLeaveCriticalRegion();
    call {:si_unique_call 821} MmUnlockPagableImageSection(0);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    goto L318;

  L318:
    call {:si_unique_call 822} Tmp_435 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_435 != 0;
    assume Tmp_435 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 823} sdv_200 := sdv_InterlockedDecrement(Tmp_435);
    assume {:nonnull} Tmp_435 != 0;
    assume Tmp_435 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    NewReferenceCount := sdv_200;
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} NewReferenceCount > 0;
    call {:si_unique_call 824} vslice_dummy_var_93 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L323;

  L323:
    call {:si_unique_call 825} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_15);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume Irp_15 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 826} SLIC_sdv_IoCallDriver_entry(0);
    goto L410;

  L410:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_49;
    call {:si_unique_call 827} status_10 := sdv_IoCallDriver(vslice_dummy_var_49, Irp_15);
    call {:si_unique_call 828} IoDetachDevice(0);
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 829} vslice_dummy_var_98 := ExDeleteResourceLite(0);
    call {:si_unique_call 830} IoDeleteDevice(0);
    Tmp_413 := status_10;
    goto L1;

  anon102_Then:
    assume !(Irp_15 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L410;

  anon118_Then:
    assume {:partition} 0 >= NewReferenceCount;
    goto L323;

  anon101_Then:
    call {:si_unique_call 831} vslice_dummy_var_92 := IoWMIRegistrationControl(0, 2);
    goto L318;

  anon117_Then:
    goto L296;

  anon100_Then:
    goto L296;

  anon116_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_50;
    call {:si_unique_call 832} vslice_dummy_var_89 := ModemHandleSymbolicLink(vslice_dummy_var_50, InterfaceNameString__DEVICE_EXTENSION(deviceExtension_1), 0);
    goto L280;

  anon113_Then:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_51;
    call {:si_unique_call 833} Tmp_413 := ForwardIrp(vslice_dummy_var_51, Irp_15);
    goto L1;

  anon87_Then:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_52;
    call {:si_unique_call 834} status_10 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_52, Irp_15, 1);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} status_10 >= 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    call {:si_unique_call 835} KeEnterCriticalRegion();
    call {:si_unique_call 836} vslice_dummy_var_94 := ExAcquireResourceExclusiveLite(0, 1);
    call {:si_unique_call 837} vslice_dummy_var_95 := CreateChildPdo(deviceExtension_1);
    call {:si_unique_call 838} ExReleaseResourceLite(0);
    call {:si_unique_call 839} KeLeaveCriticalRegion();
    goto L350;

  L350:
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    call {:si_unique_call 840} sdv_IoCompleteRequest(0, 0);
    Tmp_413 := status_10;
    goto L1;

  anon103_Then:
    assume {:partition} 0 > status_10;
    goto L350;

  anon85_Then:
    goto L17;
}



procedure {:origName "UniDispatch"} UniDispatch(actual_DeviceObject_15: int, actual_Irp_16: int) returns (Tmp_436: int);
  modifies alloc, stack_location, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} Tmp_436 == -1073741823 || Tmp_436 == 0 || Tmp_436 == -1073741769 || Tmp_436 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniDispatch"} UniDispatch(actual_DeviceObject_15: int, actual_Irp_16: int) returns (Tmp_436: int)
{
  var {:pointer} irpSp_11: int;
  var {:pointer} Tmp_437: int;
  var {:scalar} status_11: int;
  var {:pointer} deviceExtension_2: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_53: int;

  anon0:
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_16 := actual_Irp_16;
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc deviceExtension_2;
    call {:si_unique_call 841} irpSp_11 := sdv_IoGetCurrentIrpStackLocation(Irp_16);
    call {:si_unique_call 842} status_11 := CheckStateAndAddReference(DeviceObject_15, Irp_16);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_11 != 0;
    Tmp_436 := status_11;
    goto L1;

  L1:
    call {:si_unique_call 843} SLIC_UniDispatch_exit(strConst__li2bpl0, Tmp_436);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} status_11 == 0;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L19;

  L19:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume Irp_16 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 844} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L45;

  L45:
    call {:si_unique_call 845} sdv_IoSkipCurrentIrpStackLocation(Irp_16);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_16 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 846} SLIC_sdv_IoCallDriver_entry(0);
    goto L48;

  L48:
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    havoc vslice_dummy_var_53;
    call {:si_unique_call 847} status_11 := sdv_IoCallDriver(vslice_dummy_var_53, Irp_16);
    call {:si_unique_call 848} RemoveReference(DeviceObject_15);
    call {:si_unique_call 849} RemoveReference(DeviceObject_15);
    Tmp_436 := status_11;
    goto L1;

  anon16_Then:
    assume !(Irp_16 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L48;

  anon15_Then:
    assume !(Irp_16 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L45;

  anon14_Then:
    assume {:nonnull} irpSp_11 != 0;
    assume irpSp_11 > 0;
    havoc Tmp_437;
    assume {:nonnull} Tmp_437 != 0;
    assume Tmp_437 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 850} RemoveReferenceAndCompleteRequest(DeviceObject_15, Irp_16, -1073741769);
    call {:si_unique_call 851} RemoveReference(DeviceObject_15);
    Tmp_436 := -1073741769;
    goto L1;

  anon18_Then:
    goto L19;
}



procedure {:origName "WaitForLowerDriverToCompleteIrp"} WaitForLowerDriverToCompleteIrp(actual_TargetDeviceObject: int, actual_Irp_17: int, actual_CopyCurrentToNext: int) returns (Tmp_439: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "WaitForLowerDriverToCompleteIrp"} WaitForLowerDriverToCompleteIrp(actual_TargetDeviceObject: int, actual_Irp_17: int, actual_CopyCurrentToNext: int) returns (Tmp_439: int)
{
  var {:scalar} Status_3: int;
  var {:scalar} Event_3: int;
  var {:pointer} TargetDeviceObject: int;
  var {:pointer} Irp_17: int;
  var {:scalar} CopyCurrentToNext: int;
  var vslice_dummy_var_100: int;

  anon0:
    call {:si_unique_call 852} Event_3 := __HAVOC_malloc(156);
    TargetDeviceObject := actual_TargetDeviceObject;
    Irp_17 := actual_Irp_17;
    CopyCurrentToNext := actual_CopyCurrentToNext;
    call {:si_unique_call 853} KeInitializeEvent(Event_3, 0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} CopyCurrentToNext != 0;
    call {:si_unique_call 854} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_17);
    goto L9;

  L9:
    call {:si_unique_call 855} sdv_IoSetCompletionRoutine(Irp_17, li2bplFunctionConstant1837, Event_3, 1, 1, 1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume Irp_17 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 856} SLIC_sdv_IoCallDriver_entry(0);
    goto L27;

  L27:
    call {:si_unique_call 857} Status_3 := sdv_IoCallDriver(TargetDeviceObject, Irp_17);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Status_3 == 259;
    call {:si_unique_call 858} vslice_dummy_var_100 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L20;

  L20:
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    havoc Tmp_439;
    return;

  anon9_Then:
    assume {:partition} Status_3 != 259;
    goto L20;

  anon8_Then:
    assume !(Irp_17 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L27;

  anon7_Then:
    assume {:partition} CopyCurrentToNext == 0;
    goto L9;
}



procedure {:origName "CleanUpOnRemove"} CleanUpOnRemove(actual_DeviceObject_16: int, actual_Irp_18: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CleanUpOnRemove"} CleanUpOnRemove(actual_DeviceObject_16: int, actual_Irp_18: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_441: int;
  var {:pointer} nextSp_2: int;
  var {:pointer} Tmp_442: int;
  var {:pointer} DleIrp: int;
  var {:pointer} Tmp_443: int;
  var {:pointer} Tmp_444: int;
  var {:pointer} OldSystemBuffer: int;
  var {:pointer} irpSp_12: int;
  var {:pointer} thisMaskState_1: int;
  var {:pointer} Tmp_445: int;
  var {:pointer} Tmp_446: int;
  var {:scalar} Tmp_447: int;
  var {:scalar} Tmp_448: int;
  var {:scalar} OwnerClient_3: int;
  var {:scalar} origIrql_6: int;
  var {:scalar} sdv_216: int;
  var {:pointer} savedIrp_2: int;
  var {:dopa} {:scalar} MaskValue: int;
  var {:scalar} Tmp_450: int;
  var {:pointer} Tmp_451: int;
  var {:pointer} deviceExtension_3: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;

  anon0:
    call {:si_unique_call 859} vslice_dummy_var_101 := __HAVOC_malloc(4);
    call {:si_unique_call 860} MaskValue := __HAVOC_malloc(4);
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 861} Tmp_441 := __HAVOC_malloc(72);
    call {:si_unique_call 862} Tmp_445 := __HAVOC_malloc(48);
    call {:si_unique_call 863} Tmp_451 := __HAVOC_malloc(48);
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc deviceExtension_3;
    call {:si_unique_call 864} irpSp_12 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    call {:si_unique_call 865} nextSp_2 := sdv_IoGetNextIrpStackLocation(Irp_18);
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} MaskValue != 0;
    assume MaskValue > 0;
    i_2 := 0;
    goto L25;

  L25:
    call {:si_unique_call 866} i_2, Tmp_441, Tmp_442, thisMaskState_1, Tmp_448, origIrql_6, savedIrp_2 := CleanUpOnRemove_loop_L25(i_2, Tmp_441, Tmp_442, thisMaskState_1, Tmp_448, origIrql_6, savedIrp_2, deviceExtension_3);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 2} {:Counter "i_2"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 2 > i_2;
    Tmp_448 := i_2;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc Tmp_441;
    thisMaskState_1 := Tmp_441 + Tmp_448 * 36;
    call {:si_unique_call 867} Tmp_442 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    call {:si_unique_call 868} sdv_KeAcquireSpinLock(0, Tmp_442);
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    havoc origIrql_6;
    assume {:nonnull} thisMaskState_1 != 0;
    assume thisMaskState_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 869} SetPassdownToComplete(thisMaskState_1);
    goto L32;

  L32:
    assume {:nonnull} thisMaskState_1 != 0;
    assume thisMaskState_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} thisMaskState_1 != 0;
    assume thisMaskState_1 > 0;
    havoc savedIrp_2;
    assume {:nonnull} thisMaskState_1 != 0;
    assume thisMaskState_1 > 0;
    assume {:nonnull} thisMaskState_1 != 0;
    assume thisMaskState_1 > 0;
    call {:si_unique_call 870} UniRundownShuttledWait(deviceExtension_3, ShuttledWait__MASKSTATE(thisMaskState_1), 1, savedIrp_2, origIrql_6, 0, 0);
    goto L45;

  L45:
    i_2 := i_2 + 1;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon20_Then:
    call {:si_unique_call 871} sdv_KeReleaseSpinLock(0, origIrql_6);
    goto L45;

  anon19_Then:
    goto L32;

  anon18_Then:
    assume {:partition} i_2 >= 2;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} irpSp_12 != 0;
    assume irpSp_12 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc OldSystemBuffer;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc vslice_dummy_var_54;
    call {:si_unique_call 872} vslice_dummy_var_102 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_54, Irp_18, 0);
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} nextSp_2 != 0;
    assume nextSp_2 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_444;
    assume {:nonnull} Tmp_444 != 0;
    assume Tmp_444 > 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc vslice_dummy_var_55;
    call {:si_unique_call 873} vslice_dummy_var_103 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_55, Irp_18, 0);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    i_2 := 0;
    goto L72;

  L72:
    call {:si_unique_call 874} i_2, Tmp_443, Tmp_445, Tmp_446, Tmp_447, OwnerClient_3, Tmp_450, Tmp_451 := CleanUpOnRemove_loop_L72(i_2, Tmp_443, Tmp_445, Tmp_446, Tmp_447, OwnerClient_3, Tmp_450, Tmp_451, deviceExtension_3);
    goto L72_last;

  L72_last:
    assume {:CounterLoop 2} {:Counter "i_2"} true;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} 2 > i_2;
    OwnerClient_3 := i_2;
    Tmp_450 := OwnerClient_3;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc Tmp_451;
    assume {:nonnull} Tmp_451 != 0;
    assume Tmp_451 > 0;
    Tmp_443 := GetList__IPC_CONTROL(Tmp_451 + Tmp_450 * 24);
    call {:si_unique_call 875} EmptyIpcQueue(deviceExtension_3, Tmp_443);
    Tmp_447 := OwnerClient_3;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc Tmp_445;
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Tmp_446 := PutList__IPC_CONTROL(Tmp_445 + Tmp_447 * 24);
    call {:si_unique_call 876} EmptyIpcQueue(deviceExtension_3, Tmp_446);
    i_2 := i_2 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    assume {:partition} i_2 >= 2;
    call {:si_unique_call 877} CompletePowerWait(DeviceObject_16, -1073741536);
    DleIrp := 0;
    call {:si_unique_call 878} Tmp_442 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    call {:si_unique_call 879} sdv_KeAcquireSpinLock(0, Tmp_442);
    assume {:nonnull} Tmp_442 != 0;
    assume Tmp_442 > 0;
    havoc origIrql_6;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc vslice_dummy_var_56;
    call {:si_unique_call 880} sdv_216 := HasIrpBeenCanceled(vslice_dummy_var_56);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} sdv_216 == 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc DleIrp;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    goto L93;

  L93:
    call {:si_unique_call 881} sdv_KeReleaseSpinLock(0, origIrql_6);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} DleIrp != 0;
    assume {:nonnull} DleIrp != 0;
    assume DleIrp > 0;
    call {:si_unique_call 882} RemoveReferenceAndCompleteRequest(DeviceObject_16, DleIrp, 0);
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} DleIrp == 0;
    goto L1;

  anon23_Then:
    assume {:partition} sdv_216 != 0;
    goto L93;

  anon22_Then:
    goto L93;

  anon17_Then:
    goto L1;
}



procedure {:origName "ModemGetRegistryKeyValue"} ModemGetRegistryKeyValue(actual_Pdo_5: int, actual_DevInstKeyType_2: int, actual_KeyNameString_1: int, actual_Data_2: int, actual_DataLength_1: int) returns (Tmp_452: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_452 == -1073741811 || Tmp_452 == -1073741823 || Tmp_452 == 0 || Tmp_452 == 5 || Tmp_452 == -1073741789 || Tmp_452 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemGetRegistryKeyValue"} ModemGetRegistryKeyValue(actual_Pdo_5: int, actual_DevInstKeyType_2: int, actual_KeyNameString_1: int, actual_Data_2: int, actual_DataLength_1: int) returns (Tmp_452: int)
{
  var {:pointer} Tmp_453: int;
  var {:scalar} length: int;
  var {:pointer} sdv_218: int;
  var {:scalar} ntStatus_1: int;
  var {:pointer} PartialInfo: int;
  var {:scalar} keyName_1: int;
  var {:scalar} DevInstKeyType_2: int;
  var {:pointer} KeyNameString_1: int;
  var {:scalar} DataLength_1: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_57: int;

  anon0:
    call {:si_unique_call 883} keyName_1 := __HAVOC_malloc(12);
    DevInstKeyType_2 := actual_DevInstKeyType_2;
    KeyNameString_1 := actual_KeyNameString_1;
    DataLength_1 := actual_DataLength_1;
    ntStatus_1 := -1073741670;
    call {:si_unique_call 884} sdv_do_paged_code_check();
    call {:si_unique_call 885} ntStatus_1 := IoOpenDeviceRegistryKey(0, DevInstKeyType_2, 131072, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} ntStatus_1 >= 0;
    call {:si_unique_call 886} RtlInitUnicodeString(keyName_1, KeyNameString_1);
    length := 24 + DataLength_1;
    call {:si_unique_call 887} sdv_218 := ExAllocatePoolWithTag(1, length, -851161771);
    PartialInfo := sdv_218;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} PartialInfo != 0;
    call {:si_unique_call 888} Tmp_453 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    call {:si_unique_call 889} ntStatus_1 := ZwQueryValueKey(0, 0, 2, 0, length, Tmp_453);
    assume {:nonnull} Tmp_453 != 0;
    assume Tmp_453 > 0;
    havoc length;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} ntStatus_1 >= 0;
    assume {:nonnull} PartialInfo != 0;
    assume PartialInfo > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} PartialInfo != 0;
    assume PartialInfo > 0;
    havoc vslice_dummy_var_57;
    call {:si_unique_call 890} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_57);
    goto L35;

  L35:
    call {:si_unique_call 891} sdv_ExFreePool(0);
    PartialInfo := 0;
    goto L27;

  L27:
    call {:si_unique_call 892} vslice_dummy_var_104 := ZwClose(0);
    goto L17;

  L17:
    Tmp_452 := ntStatus_1;
    return;

  anon11_Then:
    goto L35;

  anon10_Then:
    assume {:partition} 0 > ntStatus_1;
    goto L35;

  anon12_Then:
    assume {:partition} PartialInfo == 0;
    goto L27;

  anon9_Then:
    assume {:partition} 0 > ntStatus_1;
    goto L17;
}



procedure {:origName "UniUnload"} UniUnload(actual_DriverObject_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniUnload"} UniUnload(actual_DriverObject_4: int)
{
  var vslice_dummy_var_105: int;

  anon0:
    call {:si_unique_call 893} vslice_dummy_var_105 := __HAVOC_malloc(4);
    call {:si_unique_call 894} sdv_ExFreePool(0);
    return;
}



procedure {:origName "ModemGetVolatileWaveKey"} ModemGetVolatileWaveKey(actual_Pdo_6: int, actual_Handle_3: int) returns (Tmp_456: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_456 == 0 || Tmp_456 == -1073741823 || Tmp_456 == -1073741727 || Tmp_456 == -1073741811 || Tmp_456 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemGetVolatileWaveKey"} ModemGetVolatileWaveKey(actual_Pdo_6: int, actual_Handle_3: int) returns (Tmp_456: int)
{
  var {:pointer} SubKey: int;
  var {:scalar} AccessMask: int;
  var {:pointer} WaveSubKey: int;
  var {:scalar} Status_4: int;
  var {:pointer} Tmp_457: int;
  var {:pointer} Tmp_458: int;
  var {:scalar} SubKeyName: int;
  var {:pointer} Handle_3: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;

  anon0:
    call {:si_unique_call 895} SubKey := __HAVOC_malloc(4);
    call {:si_unique_call 896} WaveSubKey := __HAVOC_malloc(4);
    call {:si_unique_call 897} vslice_dummy_var_106 := __HAVOC_malloc(24);
    call {:si_unique_call 898} SubKeyName := __HAVOC_malloc(12);
    Handle_3 := actual_Handle_3;
    call {:si_unique_call 899} Tmp_457 := __HAVOC_malloc(44);
    call {:si_unique_call 900} Tmp_458 := __HAVOC_malloc(44);
    AccessMask := 2032127;
    assume {:nonnull} Handle_3 != 0;
    assume Handle_3 > 0;
    call {:si_unique_call 901} Status_4 := IoOpenDeviceRegistryKey(0, 2, AccessMask, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Status_4 >= 0;
    Tmp_458 := strConst__li2bpl11;
    call {:si_unique_call 902} RtlInitUnicodeString(SubKeyName, Tmp_458);
    call {:si_unique_call 903} sdv_InitializeObjectAttributes(0, 0, 576, 0, 0);
    call {:si_unique_call 904} Status_4 := ZwOpenKey(WaveSubKey, AccessMask, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Status_4 >= 0;
    assume {:nonnull} SubKey != 0;
    assume SubKey > 0;
    Tmp_457 := strConst__li2bpl12;
    call {:si_unique_call 905} RtlInitUnicodeString(SubKeyName, Tmp_457);
    call {:si_unique_call 906} sdv_InitializeObjectAttributes(0, 0, 576, 0, 0);
    call {:si_unique_call 907} Status_4 := ZwCreateKey(SubKey, 2, 0, 0, 0, 1, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Status_4 >= 0;
    assume {:nonnull} Handle_3 != 0;
    assume Handle_3 > 0;
    assume {:nonnull} SubKey != 0;
    assume SubKey > 0;
    goto L45;

  L45:
    call {:si_unique_call 908} vslice_dummy_var_108 := ZwClose(0);
    goto L28;

  L28:
    call {:si_unique_call 909} vslice_dummy_var_107 := ZwClose(0);
    goto L13;

  L13:
    Tmp_456 := Status_4;
    return;

  anon9_Then:
    assume {:partition} 0 > Status_4;
    goto L45;

  anon8_Then:
    assume {:partition} 0 > Status_4;
    goto L28;

  anon7_Then:
    assume {:partition} 0 > Status_4;
    goto L13;
}



procedure {:origName "RemoveWaveDriverRegKeyValue"} RemoveWaveDriverRegKeyValue(actual_Pdo_7: int) returns (Tmp_460: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_460 == 0 || Tmp_460 == -1073741823 || Tmp_460 == -1073741727 || Tmp_460 == -1073741811 || Tmp_460 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RemoveWaveDriverRegKeyValue"} RemoveWaveDriverRegKeyValue(actual_Pdo_7: int) returns (Tmp_460: int)
{
  var {:scalar} Status_5: int;
  var {:pointer} hKey_1: int;
  var {:pointer} Pdo_7: int;
  var vslice_dummy_var_109: int;

  anon0:
    call {:si_unique_call 910} hKey_1 := __HAVOC_malloc(4);
    Pdo_7 := actual_Pdo_7;
    call {:si_unique_call 911} Status_5 := ModemGetVolatileWaveKey(Pdo_7, hKey_1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Status_5 >= 0;
    call {:si_unique_call 912} vslice_dummy_var_109 := ZwDeleteKey(0);
    goto L10;

  L10:
    Tmp_460 := Status_5;
    return;

  anon3_Then:
    assume {:partition} 0 > Status_5;
    goto L10;
}



procedure {:origName "ModemPdoWmi"} ModemPdoWmi(actual_DeviceObject_17: int, actual_Irp_19: int) returns (Tmp_462: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemPdoWmi"} ModemPdoWmi(actual_DeviceObject_17: int, actual_Irp_19: int) returns (Tmp_462: int)
{
  var {:scalar} Status_6: int;
  var {:pointer} Irp_19: int;

  anon0:
    Irp_19 := actual_Irp_19;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc Status_6;
    call {:si_unique_call 913} sdv_IoCompleteRequest(0, 0);
    Tmp_462 := Status_6;
    return;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_110: int;

  anon0:
    call {:si_unique_call 914} vslice_dummy_var_110 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ModemPdoPower"} ModemPdoPower(actual_DeviceObject_18: int, actual_Irp_20: int) returns (Tmp_466: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemPdoPower"} ModemPdoPower(actual_DeviceObject_18: int, actual_Irp_20: int) returns (Tmp_466: int)
{
  var {:pointer} irpSp_13: int;
  var {:scalar} Status_7: int;
  var {:pointer} Irp_20: int;

  anon0:
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 915} irpSp_13 := sdv_IoGetCurrentIrpStackLocation(Irp_20);
    call {:si_unique_call 916} sdv_do_paged_code_check();
    call {:si_unique_call 917} PoStartNextPowerIrp(0);
    assume {:nonnull} irpSp_13 != 0;
    assume irpSp_13 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L17;

  L17:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    goto L18;

  L18:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    havoc Status_7;
    call {:si_unique_call 918} sdv_IoCompleteRequest(0, 0);
    Tmp_466 := Status_7;
    return;

  anon5_Then:
    assume {:nonnull} irpSp_13 != 0;
    assume irpSp_13 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L18;

  anon6_Then:
    goto L17;
}



procedure {:origName "ModemCreateWaveDriverRegValue"} ModemCreateWaveDriverRegValue(actual_Pdo_8: int, actual_Started: int) returns (Tmp_468: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_468 == -1073741790 || Tmp_468 == -1073741816 || Tmp_468 == -1073741823 || Tmp_468 == 0 || Tmp_468 == -1073741727 || Tmp_468 == -1073741811 || Tmp_468 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemCreateWaveDriverRegValue"} ModemCreateWaveDriverRegValue(actual_Pdo_8: int, actual_Started: int) returns (Tmp_468: int)
{
  var {:scalar} ValueName_2: int;
  var {:scalar} Status_8: int;
  var {:pointer} hKey_2: int;
  var {:pointer} Tmp_470: int;
  var {:pointer} Pdo_8: int;
  var vslice_dummy_var_111: int;

  anon0:
    call {:si_unique_call 919} ValueName_2 := __HAVOC_malloc(12);
    call {:si_unique_call 920} hKey_2 := __HAVOC_malloc(4);
    Pdo_8 := actual_Pdo_8;
    call {:si_unique_call 921} Tmp_470 := __HAVOC_malloc(32);
    call {:si_unique_call 922} Status_8 := ModemGetVolatileWaveKey(Pdo_8, hKey_2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Status_8 >= 0;
    Tmp_470 := strConst__li2bpl13;
    call {:si_unique_call 923} RtlInitUnicodeString(ValueName_2, Tmp_470);
    call {:si_unique_call 924} Status_8 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    call {:si_unique_call 925} vslice_dummy_var_111 := ZwClose(0);
    goto L10;

  L10:
    Tmp_468 := Status_8;
    return;

  anon3_Then:
    assume {:partition} 0 > Status_8;
    goto L10;
}



procedure {:origName "CreateChildPdo"} CreateChildPdo(actual_DeviceExtension_2: int) returns (Tmp_471: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_471 == 0 || Tmp_471 == -1073741824 || Tmp_471 == -1073741771 || Tmp_471 == -1073741670 || Tmp_471 == -1073741823 || Tmp_471 == -1073741811 || Tmp_471 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CreateChildPdo"} CreateChildPdo(actual_DeviceExtension_2: int) returns (Tmp_471: int)
{
  var {:pointer} Id: int;
  var {:pointer} Parameters: int;
  var {:scalar} AccessMask_1: int;
  var {:scalar} Status_9: int;
  var {:dopa} {:scalar} DuplexSupport: int;
  var {:pointer} NewPdo: int;
  var {:pointer} PdoExtension: int;
  var {:scalar} HardwareId: int;
  var {:pointer} ParamTable: int;
  var {:scalar} PermanentGuid: int;
  var {:pointer} Duplex: int;
  var {:pointer} DeviceExtension_2: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_58: int;

  anon0:
    call {:si_unique_call 926} DuplexSupport := __HAVOC_malloc(4);
    call {:si_unique_call 927} NewPdo := __HAVOC_malloc(4);
    call {:si_unique_call 928} HardwareId := __HAVOC_malloc(12);
    call {:si_unique_call 929} PermanentGuid := __HAVOC_malloc(16);
    DeviceExtension_2 := actual_DeviceExtension_2;
    call {:si_unique_call 930} ParamTable := __HAVOC_malloc(140);
    AccessMask_1 := 2032127;
    call {:si_unique_call 931} sdv_do_paged_code_check();
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_471 := 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_471 := 0;
    goto L1;

  anon12_Then:
    call {:si_unique_call 932} Status_9 := IoOpenDeviceRegistryKey(0, 2, AccessMask_1, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} DuplexSupport != 0;
    assume DuplexSupport > 0;
    Parameters := strConst__li2bpl11;
    Id := strConst__li2bpl14;
    Duplex := strConst__li2bpl15;
    call {:si_unique_call 933} RtlInitUnicodeString(HardwareId, 0);
    assume {:nonnull} HardwareId != 0;
    assume HardwareId > 0;
    call {:si_unique_call 934} sdv_RtlZeroMemory(0, 140);
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} PermanentGuid != 0;
    assume PermanentGuid > 0;
    assume {:nonnull} PermanentGuid != 0;
    assume PermanentGuid > 0;
    assume {:nonnull} PermanentGuid != 0;
    assume PermanentGuid > 0;
    assume {:nonnull} PermanentGuid != 0;
    assume PermanentGuid > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    assume {:nonnull} ParamTable != 0;
    assume ParamTable > 0;
    call {:si_unique_call 935} Status_9 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    call {:si_unique_call 936} Status_9 := IoCreateDevice(0, 44, 0, 42, 128, 0, NewPdo);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Status_9 >= 0;
    assume {:nonnull} NewPdo != 0;
    assume NewPdo > 0;
    havoc PdoExtension;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} HardwareId != 0;
    assume HardwareId > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} HardwareId != 0;
    assume HardwareId > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} HardwareId != 0;
    assume HardwareId > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    assume {:nonnull} DuplexSupport != 0;
    assume DuplexSupport > 0;
    assume {:nonnull} PdoExtension != 0;
    assume PdoExtension > 0;
    call {:si_unique_call 937} sdv_RtlCopyMemory(0, 0, 16);
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    assume {:nonnull} NewPdo != 0;
    assume NewPdo > 0;
    assume {:nonnull} NewPdo != 0;
    assume NewPdo > 0;
    assume {:nonnull} NewPdo != 0;
    assume NewPdo > 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc vslice_dummy_var_58;
    call {:si_unique_call 938} vslice_dummy_var_113 := ModemCreateWaveDriverRegValue(vslice_dummy_var_58, 0);
    goto L62;

  L62:
    call {:si_unique_call 939} vslice_dummy_var_112 := ZwClose(0);
    goto L19;

  L19:
    Tmp_471 := Status_9;
    goto L1;

  anon15_Then:
    assume {:partition} 0 > Status_9;
    goto L62;

  anon14_Then:
    assume {:partition} 0 > Status_9;
    goto L62;

  anon13_Then:
    assume {:partition} 0 > Status_9;
    goto L19;
}



procedure {:origName "ModemPdoPnp"} ModemPdoPnp(actual_DeviceObject_19: int, actual_Irp_21: int) returns (Tmp_474: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemPdoPnp"} ModemPdoPnp(actual_DeviceObject_19: int, actual_Irp_21: int) returns (Tmp_474: int)
{
  var {:pointer} FdoExtension: int;
  var {:pointer} Tmp_475: int;
  var {:pointer} PdoDeviceExtension_1: int;
  var {:scalar} length_1: int;
  var {:scalar} InstanceString: int;
  var {:pointer} CurrentRelations_1: int;
  var {:scalar} Tmp_476: int;
  var {:pointer} Tmp_477: int;
  var {:pointer} sdv_240: int;
  var {:pointer} Tmp_480: int;
  var {:pointer} IrpSp: int;
  var {:scalar} Tmp_481: int;
  var {:pointer} sdv_241: int;
  var {:scalar} BufferLength_1: int;
  var {:pointer} deviceCapabilities: int;
  var {:pointer} buffer: int;
  var {:pointer} sdv_245: int;
  var {:pointer} sdv_246: int;
  var {:pointer} sdv_247: int;
  var {:scalar} NameLength: int;
  var {:scalar} Tmp_484: int;
  var {:pointer} Tmp_485: int;
  var {:pointer} Tmp_487: int;
  var {:scalar} status_13: int;
  var {:pointer} Tmp_488: int;
  var {:pointer} FdoExtension_1: int;
  var {:scalar} NameLength_1: int;
  var {:scalar} Tmp_489: int;
  var {:pointer} sdv_250: int;
  var {:pointer} DeviceObject_19: int;
  var {:pointer} Irp_21: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 940} InstanceString := __HAVOC_malloc(12);
    DeviceObject_19 := actual_DeviceObject_19;
    Irp_21 := actual_Irp_21;
    call {:si_unique_call 941} vslice_dummy_var_117 := __HAVOC_malloc(44);
    call {:si_unique_call 942} vslice_dummy_var_118 := __HAVOC_malloc(24);
    call {:si_unique_call 943} Tmp_480 := __HAVOC_malloc(4);
    call {:si_unique_call 944} vslice_dummy_var_119 := __HAVOC_malloc(48);
    call {:si_unique_call 945} vslice_dummy_var_120 := __HAVOC_malloc(76);
    call {:si_unique_call 946} IrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} DeviceObject_19 != 0;
    assume DeviceObject_19 > 0;
    havoc PdoDeviceExtension_1;
    buffer := 0;
    call {:si_unique_call 947} sdv_do_paged_code_check();
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    havoc status_13;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto L40;

  L40:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    call {:si_unique_call 948} sdv_IoCompleteRequest(0, 0);
    Tmp_474 := status_13;
    return;

  anon90_Then:
    status_13 := 0;
    goto L40;

  anon91_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    buffer := 0;
    call {:si_unique_call 949} status_13 := RtlStringFromGUID(0, 0);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} status_13 >= 0;
    assume {:nonnull} InstanceString != 0;
    assume InstanceString > 0;
    havoc Tmp_489;
    call {:si_unique_call 950} sdv_245 := ExAllocatePoolWithTag(1, Tmp_489, -851161771);
    buffer := sdv_245;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} buffer != 0;
    assume {:nonnull} InstanceString != 0;
    assume InstanceString > 0;
    havoc Tmp_476;
    call {:si_unique_call 951} sdv_RtlZeroMemory(0, Tmp_476);
    assume {:nonnull} InstanceString != 0;
    assume InstanceString > 0;
    havoc Tmp_481;
    call {:si_unique_call 952} sdv_RtlCopyMemory(0, 0, Tmp_481);
    goto L72;

  L72:
    call {:si_unique_call 953} RtlFreeUnicodeString(0);
    goto L56;

  L56:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon114_Then:
    assume {:partition} buffer == 0;
    status_13 := -1073741801;
    goto L72;

  anon80_Then:
    assume {:partition} 0 > status_13;
    goto L56;

  anon105_Then:
    goto L40;

  anon106_Then:
    length_1 := 4;
    call {:si_unique_call 954} sdv_246 := ExAllocatePoolWithTag(1, length_1, -851161771);
    buffer := sdv_246;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 955} sdv_RtlZeroMemory(0, length_1);
    status_13 := 0;
    goto L88;

  L88:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon113_Then:
    assume {:partition} buffer == 0;
    status_13 := -1073741670;
    goto L88;

  anon107_Then:
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    havoc length_1;
    call {:si_unique_call 956} sdv_247 := ExAllocatePoolWithTag(1, length_1, -851161771);
    buffer := sdv_247;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} buffer != 0;
    status_13 := 0;
    call {:si_unique_call 957} sdv_RtlZeroMemory(0, length_1);
    call {:si_unique_call 958} sdv_RtlCopyMemory(0, 0, 20);
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    havoc Tmp_484;
    call {:si_unique_call 959} sdv_RtlCopyMemory(0, 0, Tmp_484);
    goto L108;

  L108:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon112_Then:
    assume {:partition} buffer == 0;
    status_13 := -1073741670;
    goto L108;

  anon79_Then:
    length_1 := 24;
    call {:si_unique_call 960} sdv_240 := ExAllocatePoolWithTag(1, length_1, -851161771);
    buffer := sdv_240;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} buffer != 0;
    status_13 := 0;
    call {:si_unique_call 961} sdv_RtlZeroMemory(0, length_1);
    call {:si_unique_call 962} sdv_RtlCopyMemory(0, 0, length_1);
    goto L123;

  L123:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon111_Then:
    assume {:partition} buffer == 0;
    status_13 := -1073741670;
    goto L123;

  anon92_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    havoc Tmp_477;
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    assume {:nonnull} Tmp_477 != 0;
    assume Tmp_477 > 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    status_13 := 0;
    goto L40;

  anon82_Then:
    status_13 := -1073741789;
    goto L40;

  anon102_Then:
    goto L40;

  anon103_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    havoc BufferLength_1;
    call {:si_unique_call 963} Tmp_487 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    call {:si_unique_call 964} status_13 := IoGetDeviceProperty(0, 4107, BufferLength_1, 0, Tmp_487);
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    havoc NameLength_1;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} status_13 == 0;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    call {:si_unique_call 965} sdv_RtlCopyMemory(0, 0, 12);
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon84_Then:
    assume {:partition} status_13 != 0;
    goto L40;

  anon83_Then:
    goto L40;

  anon104_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 966} Tmp_487 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    call {:si_unique_call 967} status_13 := IoGetDeviceProperty(0, 4107, 0, 0, Tmp_487);
    assume {:nonnull} Tmp_487 != 0;
    assume Tmp_487 > 0;
    havoc NameLength;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} status_13 == -1073741789;
    NameLength := NameLength + 12;
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    havoc Tmp_488;
    assume {:nonnull} Tmp_488 != 0;
    assume Tmp_488 > 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    status_13 := 0;
    goto L40;

  anon86_Then:
    assume {:partition} status_13 != -1073741789;
    goto L40;

  anon85_Then:
    status_13 := -1073741789;
    goto L40;

  anon78_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    call {:si_unique_call 968} sdv_RtlCopyMemory(0, 0, 16);
    status_13 := 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon81_Then:
    status_13 := -1073741789;
    goto L40;

  anon93_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    call {:si_unique_call 969} sdv_241 := ExAllocatePoolWithTag(1, 38, -851161771);
    buffer := sdv_241;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 970} sdv_RtlCopyMemory(0, 0, 38);
    status_13 := 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto L40;

  anon110_Then:
    assume {:partition} buffer == 0;
    status_13 := -1073741670;
    goto L40;

  anon77_Then:
    goto L40;

  anon94_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    havoc deviceCapabilities;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    assume {:nonnull} deviceCapabilities != 0;
    assume deviceCapabilities > 0;
    status_13 := 0;
    goto L40;

  anon95_Then:
    assume {:nonnull} IrpSp != 0;
    assume IrpSp > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    call {:si_unique_call 971} sdv_250 := ExAllocatePoolWithTag(1, 8, -851161771);
    CurrentRelations_1 := sdv_250;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} CurrentRelations_1 != 0;
    call {:si_unique_call 972} vslice_dummy_var_114 := sdv_ObReferenceObject(0);
    assume {:nonnull} CurrentRelations_1 != 0;
    assume CurrentRelations_1 > 0;
    havoc Tmp_480;
    assume {:nonnull} Tmp_480 != 0;
    assume Tmp_480 > 0;
    assume {:nonnull} CurrentRelations_1 != 0;
    assume CurrentRelations_1 > 0;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    status_13 := 0;
    goto L40;

  anon109_Then:
    assume {:partition} CurrentRelations_1 == 0;
    status_13 := -1073741670;
    goto L40;

  anon87_Then:
    goto L40;

  anon96_Then:
    status_13 := 0;
    goto L40;

  anon97_Then:
    status_13 := 0;
    goto L40;

  anon98_Then:
    status_13 := 0;
    goto L40;

  anon99_Then:
    status_13 := 0;
    goto L40;

  anon100_Then:
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    havoc Tmp_485;
    assume {:nonnull} Tmp_485 != 0;
    assume Tmp_485 > 0;
    havoc FdoExtension;
    call {:si_unique_call 973} KeEnterCriticalRegion();
    call {:si_unique_call 974} vslice_dummy_var_115 := ExAcquireResourceExclusiveLite(0, 1);
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    status_13 := 0;
    goto L231;

  L231:
    call {:si_unique_call 975} ExReleaseResourceLite(0);
    call {:si_unique_call 976} KeLeaveCriticalRegion();
    goto L40;

  anon88_Then:
    assume {:nonnull} FdoExtension != 0;
    assume FdoExtension > 0;
    havoc vslice_dummy_var_59;
    call {:si_unique_call 977} vslice_dummy_var_116 := ModemCreateWaveDriverRegValue(vslice_dummy_var_59, 0);
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    call {:si_unique_call 978} RtlFreeUnicodeString(0);
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    call {:si_unique_call 979} IoDeleteDevice(0);
    status_13 := 0;
    goto L231;

  anon89_Then:
    status_13 := 0;
    goto L231;

  anon101_Then:
    status_13 := 0;
    goto L40;

  anon108_Then:
    assume {:nonnull} PdoDeviceExtension_1 != 0;
    assume PdoDeviceExtension_1 > 0;
    havoc Tmp_475;
    assume {:nonnull} Tmp_475 != 0;
    assume Tmp_475 > 0;
    havoc FdoExtension_1;
    assume {:nonnull} FdoExtension_1 != 0;
    assume FdoExtension_1 > 0;
    havoc vslice_dummy_var_60;
    call {:si_unique_call 980} vslice_dummy_var_121 := ModemCreateWaveDriverRegValue(vslice_dummy_var_60, 1);
    status_13 := 0;
    goto L40;
}



procedure {:origName "CompletePowerWait"} CompletePowerWait(actual_DeviceObject_20: int, actual_Status_10: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CompletePowerWait"} CompletePowerWait(actual_DeviceObject_20: int, actual_Status_10: int)
{
  var {:pointer} WakeIrp_1: int;
  var {:pointer} sdv_251: int;
  var {:scalar} origIrql_7: int;
  var {:scalar} sdv_252: int;
  var {:pointer} Tmp_492: int;
  var {:pointer} extension_2: int;
  var {:pointer} DeviceObject_20: int;
  var {:scalar} Status_10: int;
  var vslice_dummy_var_122: int;

  anon0:
    call {:si_unique_call 981} vslice_dummy_var_122 := __HAVOC_malloc(4);
    DeviceObject_20 := actual_DeviceObject_20;
    Status_10 := actual_Status_10;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    havoc extension_2;
    call {:si_unique_call 982} Tmp_492 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_492 != 0;
    assume Tmp_492 > 0;
    call {:si_unique_call 983} sdv_KeAcquireSpinLock(0, Tmp_492);
    assume {:nonnull} Tmp_492 != 0;
    assume Tmp_492 > 0;
    havoc origIrql_7;
    assume {:nonnull} extension_2 != 0;
    assume extension_2 > 0;
    call {:si_unique_call 984} sdv_251 := _InlineInterlockedExchangePointer(WakeUpIrp__DEVICE_EXTENSION(extension_2), 0);
    WakeIrp_1 := sdv_251;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} WakeIrp_1 != 0;
    call {:si_unique_call 985} sdv_252 := HasIrpBeenCanceled(WakeIrp_1);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_252 != 0;
    WakeIrp_1 := 0;
    goto L16;

  L16:
    call {:si_unique_call 986} sdv_KeReleaseSpinLock(0, origIrql_7);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} WakeIrp_1 != 0;
    assume {:nonnull} WakeIrp_1 != 0;
    assume WakeIrp_1 > 0;
    call {:si_unique_call 987} RemoveReferenceAndCompleteRequest(DeviceObject_20, WakeIrp_1, Status_10);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} WakeIrp_1 == 0;
    goto L1;

  anon7_Then:
    assume {:partition} sdv_252 == 0;
    goto L16;

  anon9_Then:
    assume {:partition} WakeIrp_1 == 0;
    goto L16;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_123: int;

  anon0:
    call {:si_unique_call 988} vslice_dummy_var_123 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ModemPower"} ModemPower(actual_DeviceObject_21: int, actual_Irp_22: int) returns (Tmp_495: int);
  modifies alloc, stack_location, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemPower"} ModemPower(actual_DeviceObject_21: int, actual_Irp_22: int) returns (Tmp_495: int)
{
  var {:pointer} irpSp_14: int;
  var {:scalar} status_14: int;
  var {:pointer} deviceExtension_4: int;
  var {:pointer} DeviceObject_21: int;
  var {:pointer} Irp_22: int;

  anon0:
    call {:si_unique_call 989} deviceExtension_4 := __HAVOC_malloc(4);
    DeviceObject_21 := actual_DeviceObject_21;
    Irp_22 := actual_Irp_22;
    assume {:nonnull} DeviceObject_21 != 0;
    assume DeviceObject_21 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    call {:si_unique_call 990} irpSp_14 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    call {:si_unique_call 991} sdv_do_paged_code_check();
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 992} Tmp_495 := ModemPdoPower(DeviceObject_21, Irp_22);
    goto L1;

  L1:
    call {:si_unique_call 993} SLIC_ModemPower_exit(strConst__li2bpl0, Tmp_495);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    call {:si_unique_call 994} status_14 := CheckStateAndAddReferencePower(DeviceObject_21, Irp_22);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_14 != 0;
    Tmp_495 := status_14;
    goto L1;

  anon20_Then:
    assume {:partition} status_14 == 0;
    assume {:nonnull} irpSp_14 != 0;
    assume irpSp_14 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} irpSp_14 != 0;
    assume irpSp_14 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L30;

  L30:
    call {:si_unique_call 995} PoStartNextPowerIrp(0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 996} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L80;

  L80:
    call {:si_unique_call 997} sdv_IoSkipCurrentIrpStackLocation(Irp_22);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 998} SLIC_PoCallDriver_entry(0);
    goto L83;

  L83:
    call {:si_unique_call 999} status_14 := PoCallDriver(0, Irp_22);
    call {:si_unique_call 1000} RemoveReference(DeviceObject_21);
    call {:si_unique_call 1001} RemoveReference(DeviceObject_21);
    call {:si_unique_call 1002} sdv_do_paged_code_check();
    Tmp_495 := status_14;
    goto L1;

  anon24_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L83;

  anon23_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L80;

  anon26_Then:
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    goto L30;

  anon21_Then:
    assume {:nonnull} irpSp_14 != 0;
    assume irpSp_14 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 1003} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_22);
    call {:si_unique_call 1004} sdv_IoSetCompletionRoutine(Irp_22, li2bplFunctionConstant2008, deviceExtension_4, 1, 1, 1);
    call {:si_unique_call 1005} PoStartNextPowerIrp(0);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1006} SLIC_PoCallDriver_entry(0);
    goto L77;

  L77:
    call {:si_unique_call 1007} status_14 := PoCallDriver(0, Irp_22);
    call {:si_unique_call 1008} RemoveReference(DeviceObject_21);
    call {:si_unique_call 1009} sdv_do_paged_code_check();
    Tmp_495 := status_14;
    goto L1;

  anon25_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L77;

  anon22_Then:
    goto L30;
}



procedure {:origName "SLIC_UniDispatch_exit"} {:osmodel} SLIC_UniDispatch_exit(actual_caller_1: int, actual_UniDispatch_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniDispatch_exit"} {:osmodel} SLIC_UniDispatch_exit(actual_caller_1: int, actual_UniDispatch_1: int)
{
  var {:pointer} caller_1: int;
  var {:scalar} UniDispatch_1: int;

  anon0:
    caller_1 := actual_caller_1;
    UniDispatch_1 := actual_UniDispatch_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniDispatch_1 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1010} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1011} SLIC_ABORT_28_0(caller_1, UniDispatch_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniDispatch_1 != 259;
    goto L6;
}



procedure {:origName "SLIC_sdv_KeReleaseSpinLock_entry"} {:osmodel} SLIC_sdv_KeReleaseSpinLock_entry(actual_caller_2: int);
  modifies queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_KeReleaseSpinLock_entry"} {:osmodel} SLIC_sdv_KeReleaseSpinLock_entry(actual_caller_2: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} locked != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} queued != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} markedPending == 0;
    queuedWithoutMarking := 1;
    goto L2;

  L2:
    locked := 0;
    return;

  anon8_Then:
    assume {:partition} markedPending != 0;
    goto L2;

  anon9_Then:
    assume {:partition} queued == 0;
    goto L2;

  anon7_Then:
    assume {:partition} locked == 0;
    goto L2;
}



procedure {:origName "SLIC_sdv_IoCallDriver_entry"} {:osmodel} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_IoCallDriver_entry"} {:osmodel} SLIC_sdv_IoCallDriver_entry(actual_caller_3: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} stack_location == 1;
    call {:si_unique_call 1012} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} stack_location != 1;
    goto L2;
}



procedure {:origName "SLIC_PoCallDriver_entry"} {:osmodel} SLIC_PoCallDriver_entry(actual_caller_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_PoCallDriver_entry"} {:osmodel} SLIC_PoCallDriver_entry(actual_caller_4: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} stack_location == 1;
    call {:si_unique_call 1013} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} stack_location != 1;
    goto L2;
}



procedure {:origName "SLIC_UniClose_exit"} {:osmodel} SLIC_UniClose_exit(actual_caller_5: int, actual_UniClose_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniClose_exit"} {:osmodel} SLIC_UniClose_exit(actual_caller_5: int, actual_UniClose_1: int)
{
  var {:pointer} caller_5: int;
  var {:scalar} UniClose_1: int;

  anon0:
    caller_5 := actual_caller_5;
    UniClose_1 := actual_UniClose_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniClose_1 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1014} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1015} SLIC_ABORT_34_0(caller_5, UniClose_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniClose_1 != 259;
    goto L6;
}



procedure {:origName "SLIC_ABORT_26_0"} SLIC_ABORT_26_0(actual_caller_7: int, actual_UniIoControl_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_26_0"} SLIC_ABORT_26_0(actual_caller_7: int, actual_UniIoControl_1: int)
{
  var {:pointer} caller_7: int;
  var {:scalar} UniIoControl_1: int;

  anon0:
    caller_7 := actual_caller_7;
    UniIoControl_1 := actual_UniIoControl_1;
    call {:si_unique_call 1016} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_8: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_containing_record_entry"} SLIC_sdv_containing_record_entry(actual_caller_8: int)
{

  anon0:
    call {:si_unique_call 1017} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    return;
}



procedure {:origName "SLIC_sdv_InsertTailList_entry"} {:osmodel} SLIC_sdv_InsertTailList_entry(actual_caller_9: int);
  modifies queued;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_InsertTailList_entry"} {:osmodel} SLIC_sdv_InsertTailList_entry(actual_caller_9: int)
{

  anon0:
    queued := 1;
    return;
}



procedure {:origName "SLIC_ABORT_34_0"} SLIC_ABORT_34_0(actual_caller_10: int, actual_UniClose_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_34_0"} SLIC_ABORT_34_0(actual_caller_10: int, actual_UniClose_2: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} UniClose_2: int;

  anon0:
    caller_10 := actual_caller_10;
    UniClose_2 := actual_UniClose_2;
    call {:si_unique_call 1018} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_ABORT_32_0"} SLIC_ABORT_32_0(actual_caller_11: int, actual_UniRead_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_32_0"} SLIC_ABORT_32_0(actual_caller_11: int, actual_UniRead_1: int)
{
  var {:pointer} caller_11: int;
  var {:scalar} UniRead_1: int;

  anon0:
    caller_11 := actual_caller_11;
    UniRead_1 := actual_UniRead_1;
    call {:si_unique_call 1019} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_UniRead_exit"} {:osmodel} SLIC_UniRead_exit(actual_caller_12: int, actual_UniRead_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniRead_exit"} {:osmodel} SLIC_UniRead_exit(actual_caller_12: int, actual_UniRead_2: int)
{
  var {:pointer} caller_12: int;
  var {:scalar} UniRead_2: int;

  anon0:
    caller_12 := actual_caller_12;
    UniRead_2 := actual_UniRead_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniRead_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1020} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1021} SLIC_ABORT_32_0(caller_12, UniRead_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniRead_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_14: int, actual_ModemWmi_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_20_0"} SLIC_ABORT_20_0(actual_caller_14: int, actual_ModemWmi_1: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} ModemWmi_1: int;

  anon0:
    caller_14 := actual_caller_14;
    ModemWmi_1 := actual_ModemWmi_1;
    call {:si_unique_call 1022} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_sdv_IoMarkIrpPending_entry"} {:osmodel} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int);
  modifies markedPending;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_IoMarkIrpPending_entry"} {:osmodel} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_15: int)
{

  anon0:
    markedPending := 1;
    return;
}



procedure {:origName "_sdv_init15"} {:osmodel} _sdv_init15();
  modifies SLAM_guard_S_0, stack_location, markedPending, queuedWithoutMarking, queued, locked, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 1;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> stack_location != 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} queued == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} stack_location == 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 0;
  free ensures {:va_keep} queuedWithoutMarking == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init15"} {:osmodel} _sdv_init15()
{

  anon0:
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    stack_location := 0;
    markedPending := 0;
    queuedWithoutMarking := 0;
    queued := 0;
    locked := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_UniIoControl_exit"} {:osmodel} SLIC_UniIoControl_exit(actual_caller_16: int, actual_UniIoControl_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniIoControl_exit"} {:osmodel} SLIC_UniIoControl_exit(actual_caller_16: int, actual_UniIoControl_2: int)
{
  var {:pointer} caller_16: int;
  var {:scalar} UniIoControl_2: int;

  anon0:
    caller_16 := actual_caller_16;
    UniIoControl_2 := actual_UniIoControl_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniIoControl_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1023} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1024} SLIC_ABORT_26_0(caller_16, UniIoControl_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniIoControl_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_InsertHeadList_entry"} {:osmodel} SLIC_InsertHeadList_entry(actual_caller_17: int);
  modifies queued;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_InsertHeadList_entry"} {:osmodel} SLIC_InsertHeadList_entry(actual_caller_17: int)
{

  anon0:
    queued := 1;
    return;
}



procedure {:origName "SLIC_ModemPnP_exit"} {:osmodel} SLIC_ModemPnP_exit(actual_caller_18: int, actual_ModemPnP_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ModemPnP_exit"} {:osmodel} SLIC_ModemPnP_exit(actual_caller_18: int, actual_ModemPnP_1: int)
{
  var {:pointer} caller_18: int;
  var {:scalar} ModemPnP_1: int;

  anon0:
    caller_18 := actual_caller_18;
    ModemPnP_1 := actual_ModemPnP_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ModemPnP_1 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1025} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1026} SLIC_ABORT_18_0(caller_18, ModemPnP_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} ModemPnP_1 != 259;
    goto L6;
}



procedure {:origName "SLIC_sdv_KeAcquireSpinLock_entry"} {:osmodel} SLIC_sdv_KeAcquireSpinLock_entry(actual_caller_19: int);
  modifies locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 0;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} locked == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_KeAcquireSpinLock_entry"} {:osmodel} SLIC_sdv_KeAcquireSpinLock_entry(actual_caller_19: int)
{

  anon0:
    locked := 1;
    return;
}



procedure {:origName "SLIC_ABORT_24_0"} SLIC_ABORT_24_0(actual_caller_20: int, actual_UniCleanup_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_24_0"} SLIC_ABORT_24_0(actual_caller_20: int, actual_UniCleanup_1: int)
{
  var {:pointer} caller_20: int;
  var {:scalar} UniCleanup_1: int;

  anon0:
    caller_20 := actual_caller_20;
    UniCleanup_1 := actual_UniCleanup_1;
    call {:si_unique_call 1027} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_ABORT_18_0"} SLIC_ABORT_18_0(actual_caller_22: int, actual_ModemPnP_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_18_0"} SLIC_ABORT_18_0(actual_caller_22: int, actual_ModemPnP_2: int)
{
  var {:pointer} caller_22: int;
  var {:scalar} ModemPnP_2: int;

  anon0:
    caller_22 := actual_caller_22;
    ModemPnP_2 := actual_ModemPnP_2;
    call {:si_unique_call 1028} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_sdv_IoSkipCurrentIrpStackLocation_entry"} {:osmodel} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(actual_caller_23: int);
  modifies stack_location;
  free ensures {:va_keep} old(stack_location) == 0 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} stack_location == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_sdv_IoSkipCurrentIrpStackLocation_entry"} {:osmodel} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(actual_caller_23: int)
{

  anon0:
    stack_location := 1;
    return;
}



procedure {:origName "SLIC_ABORT_22_0"} SLIC_ABORT_22_0(actual_caller_24: int, actual_ModemPower_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_22_0"} SLIC_ABORT_22_0(actual_caller_24: int, actual_ModemPower_1: int)
{
  var {:pointer} caller_24: int;
  var {:scalar} ModemPower_1: int;

  anon0:
    caller_24 := actual_caller_24;
    ModemPower_1 := actual_ModemPower_1;
    call {:si_unique_call 1029} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_ModemPower_exit"} {:osmodel} SLIC_ModemPower_exit(actual_caller_25: int, actual_ModemPower_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ModemPower_exit"} {:osmodel} SLIC_ModemPower_exit(actual_caller_25: int, actual_ModemPower_2: int)
{
  var {:pointer} caller_25: int;
  var {:scalar} ModemPower_2: int;

  anon0:
    caller_25 := actual_caller_25;
    ModemPower_2 := actual_ModemPower_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ModemPower_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1030} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1031} SLIC_ABORT_22_0(caller_25, ModemPower_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} ModemPower_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_26: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_RemoveHeadList_entry"} SLIC_RemoveHeadList_entry(actual_caller_26: int)
{

  anon0:
    call {:si_unique_call 1032} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    return;
}



procedure {:origName "SLIC_UniOpen_exit"} {:osmodel} SLIC_UniOpen_exit(actual_caller_27: int, actual_UniOpen_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniOpen_exit"} {:osmodel} SLIC_UniOpen_exit(actual_caller_27: int, actual_UniOpen_1: int)
{
  var {:pointer} caller_27: int;
  var {:scalar} UniOpen_1: int;

  anon0:
    caller_27 := actual_caller_27;
    UniOpen_1 := actual_UniOpen_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniOpen_1 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1033} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1034} SLIC_ABORT_36_0(caller_27, UniOpen_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniOpen_1 != 259;
    goto L6;
}



procedure {:origName "SLIC_ABORT_30_0"} SLIC_ABORT_30_0(actual_caller_28: int, actual_UniWrite_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_30_0"} SLIC_ABORT_30_0(actual_caller_28: int, actual_UniWrite_1: int)
{
  var {:pointer} caller_28: int;
  var {:scalar} UniWrite_1: int;

  anon0:
    caller_28 := actual_caller_28;
    UniWrite_1 := actual_UniWrite_1;
    call {:si_unique_call 1035} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_ABORT_28_0"} SLIC_ABORT_28_0(actual_caller_29: int, actual_UniDispatch_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_28_0"} SLIC_ABORT_28_0(actual_caller_29: int, actual_UniDispatch_2: int)
{
  var {:pointer} caller_29: int;
  var {:scalar} UniDispatch_2: int;

  anon0:
    caller_29 := actual_caller_29;
    UniDispatch_2 := actual_UniDispatch_2;
    call {:si_unique_call 1036} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_UniWrite_exit"} {:osmodel} SLIC_UniWrite_exit(actual_caller_31: int, actual_UniWrite_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniWrite_exit"} {:osmodel} SLIC_UniWrite_exit(actual_caller_31: int, actual_UniWrite_2: int)
{
  var {:pointer} caller_31: int;
  var {:scalar} UniWrite_2: int;

  anon0:
    caller_31 := actual_caller_31;
    UniWrite_2 := actual_UniWrite_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniWrite_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1037} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1038} SLIC_ABORT_30_0(caller_31, UniWrite_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniWrite_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_ModemWmi_exit"} {:osmodel} SLIC_ModemWmi_exit(actual_caller_32: int, actual_ModemWmi_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ModemWmi_exit"} {:osmodel} SLIC_ModemWmi_exit(actual_caller_32: int, actual_ModemWmi_2: int)
{
  var {:pointer} caller_32: int;
  var {:scalar} ModemWmi_2: int;

  anon0:
    caller_32 := actual_caller_32;
    ModemWmi_2 := actual_ModemWmi_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} ModemWmi_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1039} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1040} SLIC_ABORT_20_0(caller_32, ModemWmi_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} ModemWmi_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_36_0"} SLIC_ABORT_36_0(actual_caller_33: int, actual_UniOpen_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_ABORT_36_0"} SLIC_ABORT_36_0(actual_caller_33: int, actual_UniOpen_2: int)
{
  var {:pointer} caller_33: int;
  var {:scalar} UniOpen_2: int;

  anon0:
    caller_33 := actual_caller_33;
    UniOpen_2 := actual_UniOpen_2;
    call {:si_unique_call 1041} SLIC_ERROR_ROUTINE(strConst__li2bpl22);
    return;
}



procedure {:origName "SLIC_UniCleanup_exit"} {:osmodel} SLIC_UniCleanup_exit(actual_caller_35: int, actual_UniCleanup_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_UniCleanup_exit"} {:osmodel} SLIC_UniCleanup_exit(actual_caller_35: int, actual_UniCleanup_2: int)
{
  var {:pointer} caller_35: int;
  var {:scalar} UniCleanup_2: int;

  anon0:
    caller_35 := actual_caller_35;
    UniCleanup_2 := actual_UniCleanup_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} UniCleanup_2 == 259;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} queuedWithoutMarking == 0;
    goto L6;

  L6:
    call {:si_unique_call 1042} SLIC_EXIT_ROUTINE(strConst__li2bpl21);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} queuedWithoutMarking != 0;
    call {:si_unique_call 1043} SLIC_ABORT_24_0(caller_35, UniCleanup_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} UniCleanup_2 != 259;
    goto L6;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "UniCleanup"} UniCleanup(actual_DeviceObject_22: int, actual_Irp_23: int) returns (Tmp_497: int);
  modifies alloc, yogi_error, locked, queuedWithoutMarking, stack_location;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_497 == 0 || Tmp_497 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniCleanup"} UniCleanup(actual_DeviceObject_22: int, actual_Irp_23: int) returns (Tmp_497: int)
{
  var {:scalar} Tmp_498: int;
  var {:scalar} Tmp_499: int;
  var {:pointer} Tmp_500: int;
  var {:scalar} Tmp_501: int;
  var {:pointer} Tmp_502: int;
  var {:scalar} Tmp_503: int;
  var {:pointer} Tmp_504: int;
  var {:scalar} Tmp_505: int;
  var {:pointer} thisMaskState_2: int;
  var {:pointer} Tmp_506: int;
  var {:pointer} sdv_258: int;
  var {:pointer} Tmp_507: int;
  var {:pointer} Tmp_508: int;
  var {:pointer} Tmp_509: int;
  var {:scalar} Tmp_510: int;
  var {:scalar} OwnerClient_4: int;
  var {:scalar} origIrql_8: int;
  var {:pointer} sdv_259: int;
  var {:pointer} Tmp_511: int;
  var {:pointer} sdv_260: int;
  var {:pointer} Tmp_512: int;
  var {:pointer} savedIrp_3: int;
  var {:pointer} Tmp_513: int;
  var {:pointer} extension_3: int;
  var {:pointer} Tmp_514: int;
  var {:pointer} Tmp_515: int;
  var {:pointer} Tmp_516: int;
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_61: int;

  anon0:
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 1044} Tmp_506 := __HAVOC_malloc(48);
    call {:si_unique_call 1045} Tmp_507 := __HAVOC_malloc(72);
    call {:si_unique_call 1046} Tmp_508 := __HAVOC_malloc(48);
    call {:si_unique_call 1047} Tmp_513 := __HAVOC_malloc(48);
    call {:si_unique_call 1048} Tmp_514 := __HAVOC_malloc(48);
    assume {:nonnull} DeviceObject_22 != 0;
    assume DeviceObject_22 > 0;
    havoc extension_3;
    call {:si_unique_call 1049} sdv_258 := sdv_IoGetCurrentIrpStackLocation(Irp_23);
    assume {:nonnull} sdv_258 != 0;
    assume sdv_258 > 0;
    havoc Tmp_509;
    assume {:nonnull} Tmp_509 != 0;
    assume Tmp_509 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    Tmp_498 := 1;
    goto L13;

  L13:
    Tmp_499 := Tmp_498;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc Tmp_507;
    thisMaskState_2 := Tmp_507 + Tmp_499 * 36;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    call {:si_unique_call 1050} sdv_IoCompleteRequest(0, 0);
    Tmp_497 := 0;
    goto L1;

  L1:
    call {:si_unique_call 1051} SLIC_UniCleanup_exit(strConst__li2bpl0, Tmp_497);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    call {:si_unique_call 1052} Tmp_502 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_502 != 0;
    assume Tmp_502 > 0;
    call {:si_unique_call 1053} sdv_KeAcquireSpinLock(0, Tmp_502);
    assume {:nonnull} Tmp_502 != 0;
    assume Tmp_502 > 0;
    havoc origIrql_8;
    assume {:nonnull} thisMaskState_2 != 0;
    assume thisMaskState_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} thisMaskState_2 != 0;
    assume thisMaskState_2 > 0;
    havoc savedIrp_3;
    assume {:nonnull} thisMaskState_2 != 0;
    assume thisMaskState_2 > 0;
    assume {:nonnull} thisMaskState_2 != 0;
    assume thisMaskState_2 > 0;
    call {:si_unique_call 1054} UniRundownShuttledWait(extension_3, ShuttledWait__MASKSTATE(thisMaskState_2), 1, savedIrp_3, origIrql_8, 0, 0);
    goto L35;

  L35:
    call {:si_unique_call 1055} sdv_259 := sdv_IoGetCurrentIrpStackLocation(Irp_23);
    assume {:nonnull} sdv_259 != 0;
    assume sdv_259 > 0;
    havoc Tmp_511;
    assume {:nonnull} Tmp_511 != 0;
    assume Tmp_511 > 0;
    havoc OwnerClient_4;
    Tmp_501 := OwnerClient_4;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc Tmp_514;
    assume {:nonnull} Tmp_514 != 0;
    assume Tmp_514 > 0;
    Tmp_504 := GetList__IPC_CONTROL(Tmp_514 + Tmp_501 * 24);
    call {:si_unique_call 1056} EmptyIpcQueue(extension_3, Tmp_504);
    Tmp_510 := OwnerClient_4;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc Tmp_506;
    assume {:nonnull} Tmp_506 != 0;
    assume Tmp_506 > 0;
    Tmp_500 := PutList__IPC_CONTROL(Tmp_506 + Tmp_510 * 24);
    call {:si_unique_call 1057} EmptyIpcQueue(extension_3, Tmp_500);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} OwnerClient_4 == 1;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc Tmp_513;
    assume {:nonnull} Tmp_513 != 0;
    assume Tmp_513 > 0;
    Tmp_512 := GetList__IPC_CONTROL(Tmp_513);
    call {:si_unique_call 1058} EmptyIpcQueue(extension_3, Tmp_512);
    goto L48;

  L48:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} OwnerClient_4 == 1;
    Tmp_503 := 0;
    goto L55;

  L55:
    Tmp_505 := Tmp_503;
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc Tmp_508;
    assume {:nonnull} Tmp_508 != 0;
    assume Tmp_508 > 0;
    Tmp_516 := PutList__IPC_CONTROL(Tmp_508 + Tmp_505 * 24);
    call {:si_unique_call 1059} EmptyIpcQueue(extension_3, Tmp_516);
    call {:si_unique_call 1060} sdv_260 := sdv_IoGetCurrentIrpStackLocation(Irp_23);
    assume {:nonnull} sdv_260 != 0;
    assume sdv_260 > 0;
    havoc Tmp_515;
    assume {:nonnull} Tmp_515 != 0;
    assume Tmp_515 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 1061} CompletePowerWait(DeviceObject_22, -1073741536);
    assume {:nonnull} extension_3 != 0;
    assume extension_3 > 0;
    havoc vslice_dummy_var_61;
    call {:si_unique_call 1062} Tmp_497 := ForwardIrp(vslice_dummy_var_61, Irp_23);
    goto L1;

  anon21_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    call {:si_unique_call 1063} sdv_IoCompleteRequest(0, 0);
    Tmp_497 := 0;
    goto L1;

  anon17_Then:
    assume {:partition} OwnerClient_4 != 1;
    Tmp_503 := 1;
    goto L55;

  anon16_Then:
    assume {:partition} OwnerClient_4 != 1;
    goto L48;

  anon15_Then:
    call {:si_unique_call 1064} sdv_KeReleaseSpinLock(0, origIrql_8);
    goto L35;

  anon18_Then:
    Tmp_498 := 0;
    goto L13;
}



procedure {:origName "UniOpenStarter"} UniOpenStarter(actual_Extension_4: int, actual_irp_1: int) returns (Tmp_517: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniOpenStarter"} UniOpenStarter(actual_Extension_4: int, actual_irp_1: int) returns (Tmp_517: int)
{
  var {:pointer} Tmp_518: int;
  var {:scalar} accessMask_1: int;
  var {:pointer} paramTable_1: int;
  var {:pointer} Tmp_519: int;
  var {:pointer} Tmp_521: int;
  var {:dopa} {:scalar} defaultInactivity: int;
  var {:pointer} Tmp_523: int;
  var {:scalar} StackDepth: int;
  var {:pointer} Tmp_524: int;
  var {:scalar} Match_1: int;
  var {:pointer} Tmp_525: int;
  var {:pointer} Tmp_526: int;
  var {:pointer} Tmp_527: int;
  var {:pointer} Tmp_528: int;
  var {:pointer} Tmp_529: int;
  var {:pointer} irpSp_15: int;
  var {:pointer} Tmp_530: int;
  var {:pointer} Tmp_531: int;
  var {:pointer} Tmp_532: int;
  var {:pointer} Tmp_533: int;
  var {:pointer} Tmp_535: int;
  var {:pointer} Tmp_536: int;
  var {:scalar} localKeyValue: int;
  var {:pointer} Tmp_537: int;
  var {:pointer} Tmp_538: int;
  var {:pointer} Tmp_539: int;
  var {:scalar} localDefault: int;
  var {:scalar} sdv_268: int;
  var {:pointer} waitSp: int;
  var {:pointer} Tmp_540: int;
  var {:pointer} Tmp_541: int;
  var {:pointer} Tmp_542: int;
  var {:pointer} Tmp_543: int;
  var {:scalar} neededLength: int;
  var {:scalar} sdv_275: int;
  var {:pointer} Tmp_545: int;
  var {:pointer} Tmp_546: int;
  var {:pointer} Tmp_547: int;
  var {:pointer} Tmp_548: int;
  var {:pointer} Tmp_549: int;
  var {:pointer} WaitIrp_1: int;
  var {:pointer} Tmp_551: int;
  var {:scalar} TspString: int;
  var {:scalar} junkStatus: int;
  var {:scalar} valueEntryName_1: int;
  var {:pointer} Tmp_552: int;
  var {:scalar} status_15: int;
  var {:pointer} Tmp_555: int;
  var {:pointer} Tmp_556: int;
  var {:dopa} {:scalar} DefaultPowerDelay: int;
  var {:scalar} Tmp_557: int;
  var {:scalar} localProp_1: int;
  var {:pointer} Extension_4: int;
  var {:pointer} irp_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 1065} defaultInactivity := __HAVOC_malloc(4);
    call {:si_unique_call 1066} localKeyValue := __HAVOC_malloc(16);
    call {:si_unique_call 1067} localDefault := __HAVOC_malloc(20);
    call {:si_unique_call 1068} TspString := __HAVOC_malloc(12);
    call {:si_unique_call 1069} valueEntryName_1 := __HAVOC_malloc(12);
    call {:si_unique_call 1070} DefaultPowerDelay := __HAVOC_malloc(4);
    call {:si_unique_call 1071} localProp_1 := __HAVOC_malloc(32);
    Extension_4 := actual_Extension_4;
    irp_1 := actual_irp_1;
    call {:si_unique_call 1072} Tmp_518 := __HAVOC_malloc(72);
    call {:si_unique_call 1073} paramTable_1 := __HAVOC_malloc(168);
    call {:si_unique_call 1074} Tmp_519 := __HAVOC_malloc(52);
    call {:si_unique_call 1075} Tmp_521 := __HAVOC_malloc(72);
    call {:si_unique_call 1076} Tmp_523 := __HAVOC_malloc(20);
    call {:si_unique_call 1077} Tmp_524 := __HAVOC_malloc(72);
    call {:si_unique_call 1078} Tmp_526 := __HAVOC_malloc(72);
    call {:si_unique_call 1079} Tmp_527 := __HAVOC_malloc(72);
    call {:si_unique_call 1080} Tmp_530 := __HAVOC_malloc(32);
    call {:si_unique_call 1081} Tmp_532 := __HAVOC_malloc(72);
    call {:si_unique_call 1082} Tmp_533 := __HAVOC_malloc(72);
    call {:si_unique_call 1083} Tmp_535 := __HAVOC_malloc(72);
    call {:si_unique_call 1084} Tmp_536 := __HAVOC_malloc(72);
    call {:si_unique_call 1085} Tmp_538 := __HAVOC_malloc(48);
    call {:si_unique_call 1086} Tmp_539 := __HAVOC_malloc(24);
    call {:si_unique_call 1087} Tmp_540 := __HAVOC_malloc(48);
    call {:si_unique_call 1088} Tmp_541 := __HAVOC_malloc(32);
    call {:si_unique_call 1089} vslice_dummy_var_126 := __HAVOC_malloc(48);
    call {:si_unique_call 1090} Tmp_546 := __HAVOC_malloc(48);
    call {:si_unique_call 1091} Tmp_547 := __HAVOC_malloc(72);
    call {:si_unique_call 1092} Tmp_549 := __HAVOC_malloc(72);
    call {:si_unique_call 1093} Tmp_555 := __HAVOC_malloc(72);
    call {:si_unique_call 1094} Tmp_556 := __HAVOC_malloc(24);
    status_15 := 0;
    accessMask_1 := 1;
    assume {:nonnull} defaultInactivity != 0;
    assume defaultInactivity > 0;
    assume {:nonnull} DefaultPowerDelay != 0;
    assume DefaultPowerDelay > 0;
    call {:si_unique_call 1095} irpSp_15 := sdv_IoGetCurrentIrpStackLocation(irp_1);
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    Tmp_517 := -1073741565;
    goto L1;

  L1:
    return;

  anon73_Then:
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    havoc Tmp_552;
    assume {:nonnull} Tmp_552 != 0;
    assume Tmp_552 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    Tmp_523 := strConst__li2bpl23;
    call {:si_unique_call 1096} RtlInitUnicodeString(TspString, Tmp_523);
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    call {:si_unique_call 1097} Match_1 := corral_nondet();
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} Match_1 != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    status_15 := -1073741757;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  L49:
    Tmp_517 := status_15;
    goto L1;

  anon53_Then:
    goto L45;

  L45:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    havoc Tmp_525;
    assume {:nonnull} Tmp_525 != 0;
    assume Tmp_525 > 0;
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    havoc Tmp_551;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Tmp_551 != 0;
    assume Tmp_551 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_546;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_540;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Tmp_540 != 0;
    assume Tmp_540 > 0;
    assume {:nonnull} Tmp_546 != 0;
    assume Tmp_546 > 0;
    goto L49;

  anon55_Then:
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon54_Then:
    call {:si_unique_call 1098} junkStatus := IoOpenDeviceRegistryKey(0, 2, accessMask_1, 0);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} junkStatus >= 0;
    call {:si_unique_call 1099} sdv_RtlZeroMemory(0, 168);
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    assume {:nonnull} paramTable_1 != 0;
    assume paramTable_1 > 0;
    call {:si_unique_call 1100} sdv_275 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_275 >= 0;
    call {:si_unique_call 1101} sdv_RtlZeroMemory(0, 80);
    call {:si_unique_call 1102} sdv_RtlZeroMemory(0, 48);
    Tmp_519 := strConst__li2bpl1;
    call {:si_unique_call 1103} RtlInitUnicodeString(valueEntryName_1, Tmp_519);
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    call {:si_unique_call 1104} Tmp_528 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    call {:si_unique_call 1105} junkStatus := ZwQueryValueKey(0, 0, 2, 0, 16, Tmp_528);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    havoc neededLength;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} junkStatus != 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} junkStatus != 5;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto L123;

  L123:
    Tmp_556 := strConst__li2bpl2;
    call {:si_unique_call 1106} RtlInitUnicodeString(valueEntryName_1, Tmp_556);
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    call {:si_unique_call 1107} Tmp_528 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    call {:si_unique_call 1108} junkStatus := ZwQueryValueKey(0, 0, 2, 0, 16, Tmp_528);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    havoc neededLength;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} junkStatus != 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} junkStatus != 5;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto L135;

  L135:
    Tmp_541 := strConst__li2bpl3;
    call {:si_unique_call 1109} RtlInitUnicodeString(valueEntryName_1, Tmp_541);
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    call {:si_unique_call 1110} Tmp_528 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    call {:si_unique_call 1111} junkStatus := ZwQueryValueKey(0, 0, 2, 0, 16, Tmp_528);
    assume {:nonnull} Tmp_528 != 0;
    assume Tmp_528 > 0;
    havoc neededLength;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} junkStatus != 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} junkStatus != 5;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto L147;

  L147:
    call {:si_unique_call 1112} vslice_dummy_var_124 := ZwClose(0);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localProp_1 != 0;
    assume localProp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localDefault != 0;
    assume localDefault > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 1113} vslice_dummy_var_127 := StartDevicePower(Extension_4);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_62;
    call {:si_unique_call 1114} status_15 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_62, irp_1, 1);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_529;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_537;
    assume {:nonnull} Tmp_529 != 0;
    assume Tmp_529 > 0;
    assume {:nonnull} Tmp_537 != 0;
    assume Tmp_537 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_543;
    assume {:nonnull} Tmp_543 != 0;
    assume Tmp_543 > 0;
    havoc Tmp_557;
    goto L183;

  L183:
    StackDepth := Tmp_557;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_548;
    assume {:nonnull} Tmp_548 != 0;
    assume Tmp_548 > 0;
    call {:si_unique_call 1115} vslice_dummy_var_128 := SetDtr(Extension_4, 1);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_63;
    call {:si_unique_call 1116} vslice_dummy_var_125 := EnableDisableSerialWaitWake(Extension_4, vslice_dummy_var_63);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc vslice_dummy_var_64;
    call {:si_unique_call 1117} ModemSleep(vslice_dummy_var_64);
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    havoc Tmp_542;
    assume {:nonnull} Tmp_542 != 0;
    assume Tmp_542 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    call {:si_unique_call 1118} boogieTmp := IoGetCurrentProcess();
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_545;
    assume {:nonnull} Tmp_545 != 0;
    assume Tmp_545 > 0;
    havoc vslice_dummy_var_65;
    call {:si_unique_call 1119} WaitIrp_1 := IoAllocateIrp(vslice_dummy_var_65, 0);
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} WaitIrp_1 != 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    call {:si_unique_call 1120} waitSp := sdv_IoGetNextIrpStackLocation(WaitIrp_1);
    assume {:nonnull} WaitIrp_1 != 0;
    assume WaitIrp_1 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} waitSp != 0;
    assume waitSp > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_549;
    assume {:nonnull} Tmp_549 != 0;
    assume Tmp_549 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_533;
    assume {:nonnull} Tmp_533 != 0;
    assume Tmp_533 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_547;
    assume {:nonnull} Tmp_547 != 0;
    assume Tmp_547 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_526;
    assume {:nonnull} Tmp_526 != 0;
    assume Tmp_526 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_536;
    assume {:nonnull} Tmp_536 != 0;
    assume Tmp_536 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_527;
    assume {:nonnull} Tmp_527 != 0;
    assume Tmp_527 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_518;
    assume {:nonnull} Tmp_518 != 0;
    assume Tmp_518 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_524;
    assume {:nonnull} Tmp_524 != 0;
    assume Tmp_524 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_532;
    assume {:nonnull} Tmp_532 != 0;
    assume Tmp_532 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_521;
    assume {:nonnull} Tmp_521 != 0;
    assume Tmp_521 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_535;
    assume {:nonnull} Tmp_535 != 0;
    assume Tmp_535 > 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_555;
    assume {:nonnull} Tmp_555 != 0;
    assume Tmp_555 > 0;
    call {:si_unique_call 1121} MmLockPagableSectionByHandle(0);
    status_15 := 0;
    goto L49;

  anon65_Then:
    assume {:partition} WaitIrp_1 == 0;
    status_15 := -1073741670;
    call {:si_unique_call 1122} vslice_dummy_var_129 := UniCloseStarter(Extension_4, irp_1);
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon75_Then:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_531;
    assume {:nonnull} Tmp_531 != 0;
    assume Tmp_531 > 0;
    havoc Tmp_557;
    goto L183;

  anon64_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon63_Then:
    assume {:partition} junkStatus == 5;
    goto L144;

  L144:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    goto L147;

  anon62_Then:
    assume {:partition} junkStatus == 0;
    goto L144;

  anon61_Then:
    assume {:partition} junkStatus == 5;
    goto L132;

  L132:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    goto L135;

  anon60_Then:
    assume {:partition} junkStatus == 0;
    goto L132;

  anon59_Then:
    assume {:partition} junkStatus == 5;
    goto L120;

  L120:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    assume {:nonnull} localKeyValue != 0;
    assume localKeyValue > 0;
    goto L123;

  anon58_Then:
    assume {:partition} junkStatus == 0;
    goto L120;

  anon57_Then:
    assume {:partition} 0 > sdv_275;
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    call {:si_unique_call 1123} vslice_dummy_var_130 := ZwClose(0);
    goto L49;

  anon56_Then:
    assume {:partition} 0 > junkStatus;
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon52_Then:
    assume {:partition} Match_1 == 0;
    Tmp_530 := strConst__li2bpl24;
    call {:si_unique_call 1124} RtlInitUnicodeString(TspString, Tmp_530);
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    call {:si_unique_call 1125} Match_1 := corral_nondet();
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Match_1 != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon67_Then:
    goto L45;

  anon66_Then:
    assume {:partition} Match_1 == 0;
    Tmp_539 := strConst__li2bpl20;
    call {:si_unique_call 1126} RtlInitUnicodeString(TspString, Tmp_539);
    assume {:nonnull} irpSp_15 != 0;
    assume irpSp_15 > 0;
    call {:si_unique_call 1127} Match_1 := corral_nondet();
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Match_1 != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto L277;

  L277:
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon69_Then:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    havoc Tmp_538;
    assume {:nonnull} Tmp_538 != 0;
    assume Tmp_538 > 0;
    call {:si_unique_call 1128} sdv_268 := sdv_IsListEmpty(0);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_268 != 0;
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L277;

  anon72_Then:
    goto L45;

  anon71_Then:
    assume {:partition} sdv_268 == 0;
    goto L45;

  anon70_Then:
    goto L277;

  anon68_Then:
    assume {:partition} Match_1 == 0;
    status_15 := -1073741811;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon74_Then:
    assume {:nonnull} Extension_4 != 0;
    assume Extension_4 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    status_15 := -1073741757;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    goto L49;

  anon51_Then:
    goto L45;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 1129} vslice_dummy_var_131 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "UniClose"} UniClose(actual_DeviceObject_23: int, actual_Irp_24: int) returns (Tmp_560: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniClose"} UniClose(actual_DeviceObject_23: int, actual_Irp_24: int) returns (Tmp_560: int)
{
  var {:pointer} Tmp_561: int;
  var {:scalar} status_16: int;
  var {:pointer} deviceExtension_5: int;
  var {:pointer} DeviceObject_23: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    Irp_24 := actual_Irp_24;
    assume {:nonnull} DeviceObject_23 != 0;
    assume DeviceObject_23 > 0;
    havoc deviceExtension_5;
    call {:si_unique_call 1130} Tmp_561 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_561 != 0;
    assume Tmp_561 > 0;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    call {:si_unique_call 1131} vslice_dummy_var_133 := sdv_InterlockedIncrement(Tmp_561);
    assume {:nonnull} Tmp_561 != 0;
    assume Tmp_561 > 0;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 1132} RemoveReferenceAndCompleteRequest(DeviceObject_23, Irp_24, -1073741823);
    Tmp_560 := -1073741823;
    goto L1;

  L1:
    call {:si_unique_call 1133} SLIC_UniClose_exit(strConst__li2bpl0, Tmp_560);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    call {:si_unique_call 1134} KeEnterCriticalRegion();
    call {:si_unique_call 1135} vslice_dummy_var_132 := ExAcquireResourceExclusiveLite(0, 1);
    call {:si_unique_call 1136} status_16 := UniCloseStarter(deviceExtension_5, Irp_24);
    call {:si_unique_call 1137} ExReleaseResourceLite(0);
    call {:si_unique_call 1138} KeLeaveCriticalRegion();
    call {:si_unique_call 1139} RemoveReferenceAndCompleteRequest(DeviceObject_23, Irp_24, status_16);
    Tmp_560 := status_16;
    goto L1;
}



procedure {:origName "ModemSleep"} ModemSleep(actual_MilliSeconds: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemSleep"} ModemSleep(actual_MilliSeconds: int)
{
  var {:scalar} MilliSeconds: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;

  anon0:
    call {:si_unique_call 1140} vslice_dummy_var_134 := __HAVOC_malloc(4);
    MilliSeconds := actual_MilliSeconds;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} MilliSeconds > 0;
    call {:si_unique_call 1141} vslice_dummy_var_135 := KeDelayExecutionThread(0, 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 >= MilliSeconds;
    goto L1;
}



procedure {:origName "EnableDisableSerialWaitWake"} EnableDisableSerialWaitWake(actual_deviceExtension_6: int, actual_Enable_1: int) returns (Tmp_564: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "EnableDisableSerialWaitWake"} EnableDisableSerialWaitWake(actual_deviceExtension_6: int, actual_Enable_1: int) returns (Tmp_564: int)
{
  var {:pointer} TempIrp: int;
  var {:scalar} Tmp_566: int;
  var {:scalar} Event_4: int;
  var {:scalar} status_17: int;
  var {:scalar} IoStatus: int;
  var {:pointer} deviceExtension_6: int;
  var {:scalar} Enable_1: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_66: int;

  anon0:
    call {:si_unique_call 1142} Event_4 := __HAVOC_malloc(156);
    call {:si_unique_call 1143} IoStatus := __HAVOC_malloc(12);
    deviceExtension_6 := actual_deviceExtension_6;
    Enable_1 := actual_Enable_1;
    status_17 := 0;
    call {:si_unique_call 1144} KeInitializeEvent(Event_4, 0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Enable_1 != 0;
    Tmp_566 := 1769476;
    goto L14;

  L14:
    call {:si_unique_call 1145} TempIrp := IoBuildDeviceIoControlRequest(Tmp_566, 0, 0, 0, 0, 0, 1, 0, IoStatus);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} TempIrp != 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc vslice_dummy_var_66;
    call {:si_unique_call 1146} status_17 := sdv_IoCallDriver(vslice_dummy_var_66, TempIrp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_17 == 259;
    call {:si_unique_call 1147} vslice_dummy_var_136 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} IoStatus != 0;
    assume IoStatus > 0;
    havoc status_17;
    goto L25;

  L25:
    TempIrp := 0;
    goto L30;

  L30:
    Tmp_564 := status_17;
    return;

  anon9_Then:
    assume {:partition} status_17 != 259;
    goto L25;

  anon8_Then:
    assume {:partition} TempIrp == 0;
    status_17 := -1073741670;
    goto L30;

  anon7_Then:
    assume {:partition} Enable_1 == 0;
    Tmp_566 := 1769480;
    goto L14;
}



procedure {:origName "UniCloseStarter"} UniCloseStarter(actual_Extension_5: int, actual_irp_2: int) returns (Tmp_567: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniCloseStarter"} UniCloseStarter(actual_Extension_5: int, actual_irp_2: int) returns (Tmp_567: int)
{
  var {:pointer} Tmp_568: int;
  var {:pointer} sdv_289: int;
  var {:pointer} sdv_290: int;
  var {:pointer} sdv_291: int;
  var {:pointer} WaitIrp_2: int;
  var {:pointer} Tmp_570: int;
  var {:scalar} status_18: int;
  var {:pointer} Extension_5: int;
  var {:pointer} irp_2: int;
  var vslice_dummy_var_67: int;

  anon0:
    Extension_5 := actual_Extension_5;
    irp_2 := actual_irp_2;
    status_18 := 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 1148} sdv_289 := sdv_IoGetCurrentIrpStackLocation(irp_2);
    assume {:nonnull} sdv_289 != 0;
    assume sdv_289 > 0;
    havoc Tmp_570;
    assume {:nonnull} Tmp_570 != 0;
    assume Tmp_570 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 1149} sdv_290 := sdv_IoGetCurrentIrpStackLocation(irp_2);
    assume {:nonnull} sdv_290 != 0;
    assume sdv_290 > 0;
    havoc Tmp_568;
    assume {:nonnull} Tmp_568 != 0;
    assume Tmp_568 > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto L10;

  L10:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    call {:si_unique_call 1150} sdv_291 := _InlineInterlockedExchangePointer(xOurWaitIrp__DEVICE_EXTENSION(Extension_5), 0);
    WaitIrp_2 := sdv_291;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} WaitIrp_2 != 0;
    call {:si_unique_call 1151} IoFreeIrp(0);
    goto L26;

  L26:
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    havoc vslice_dummy_var_67;
    call {:si_unique_call 1152} status_18 := WaitForLowerDriverToCompleteIrp(vslice_dummy_var_67, irp_2, 1);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1153} PoUnregisterSystemState(0);
    assume {:nonnull} Extension_5 != 0;
    assume Extension_5 > 0;
    goto L36;

  L36:
    call {:si_unique_call 1154} MmUnlockPagableImageSection(0);
    goto L18;

  L18:
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    Tmp_567 := status_18;
    return;

  anon12_Then:
    goto L36;

  anon11_Then:
    assume {:partition} WaitIrp_2 == 0;
    goto L26;

  anon9_Then:
    goto L18;

  anon10_Then:
    goto L10;
}



procedure {:origName "SetDtr"} SetDtr(actual_deviceExtension_7: int, actual_Enable_2: int) returns (Tmp_571: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SetDtr"} SetDtr(actual_deviceExtension_7: int, actual_Enable_2: int) returns (Tmp_571: int)
{
  var {:pointer} TempIrp_1: int;
  var {:scalar} Event_5: int;
  var {:scalar} status_19: int;
  var {:scalar} IoStatus_1: int;
  var {:pointer} deviceExtension_7: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 1155} Event_5 := __HAVOC_malloc(156);
    call {:si_unique_call 1156} IoStatus_1 := __HAVOC_malloc(12);
    deviceExtension_7 := actual_deviceExtension_7;
    status_19 := 0;
    call {:si_unique_call 1157} KeInitializeEvent(Event_5, 0, 0);
    call {:si_unique_call 1158} TempIrp_1 := IoBuildDeviceIoControlRequest(1769508, 0, 0, 0, 0, 0, 0, 0, IoStatus_1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} TempIrp_1 != 0;
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    havoc vslice_dummy_var_68;
    call {:si_unique_call 1159} status_19 := sdv_IoCallDriver(vslice_dummy_var_68, TempIrp_1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_19 == 259;
    call {:si_unique_call 1160} vslice_dummy_var_137 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} IoStatus_1 != 0;
    assume IoStatus_1 > 0;
    havoc status_19;
    goto L22;

  L22:
    TempIrp_1 := 0;
    goto L27;

  L27:
    Tmp_571 := status_19;
    return;

  anon6_Then:
    assume {:partition} status_19 != 259;
    goto L22;

  anon5_Then:
    assume {:partition} TempIrp_1 == 0;
    status_19 := -1073741670;
    goto L27;
}



procedure {:origName "StartDevicePower"} StartDevicePower(actual_DeviceExtension_3: int) returns (Tmp_573: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "StartDevicePower"} StartDevicePower(actual_DeviceExtension_3: int) returns (Tmp_573: int)
{
  var {:scalar} Status_11: int;
  var {:scalar} PowerBlock: int;
  var {:scalar} PowerState_1: int;
  var {:pointer} DeviceExtension_3: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_69: int;

  anon0:
    call {:si_unique_call 1161} PowerBlock := __HAVOC_malloc(160);
    call {:si_unique_call 1162} PowerState_1 := __HAVOC_malloc(8);
    DeviceExtension_3 := actual_DeviceExtension_3;
    assume {:nonnull} DeviceExtension_3 != 0;
    assume DeviceExtension_3 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} DeviceExtension_3 != 0;
    assume DeviceExtension_3 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} PowerBlock != 0;
    assume PowerBlock > 0;
    call {:si_unique_call 1163} KeInitializeEvent(Event__MODEM_POWER_BLOCK(PowerBlock), 0, 0);
    assume {:nonnull} PowerState_1 != 0;
    assume PowerState_1 > 0;
    call {:si_unique_call 1164} Status_11 := PoRequestPowerIrp(0, 2, PowerState_1, li2bplFunctionConstant1306, 0, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Status_11 == 259;
    call {:si_unique_call 1165} vslice_dummy_var_138 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} PowerBlock != 0;
    assume PowerBlock > 0;
    havoc Status_11;
    goto L19;

  L19:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Status_11 >= 0;
    assume {:nonnull} DeviceExtension_3 != 0;
    assume DeviceExtension_3 > 0;
    havoc vslice_dummy_var_69;
    call {:si_unique_call 1166} ModemSleep(vslice_dummy_var_69);
    goto L24;

  L24:
    Tmp_573 := Status_11;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} 0 > Status_11;
    goto L24;

  anon11_Then:
    assume {:partition} Status_11 != 259;
    goto L19;

  anon10_Then:
    goto L8;

  L8:
    Tmp_573 := 0;
    goto L1;

  anon9_Then:
    goto L8;
}



procedure {:origName "UniOpen"} UniOpen(actual_DeviceObject_24: int, actual_Irp_25: int) returns (Tmp_575: int);
  modifies alloc, yogi_error;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniOpen"} UniOpen(actual_DeviceObject_24: int, actual_Irp_25: int) returns (Tmp_575: int)
{
  var {:pointer} Tmp_576: int;
  var {:scalar} status_20: int;
  var {:pointer} deviceExtension_8: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Irp_25: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;

  anon0:
    DeviceObject_24 := actual_DeviceObject_24;
    Irp_25 := actual_Irp_25;
    assume {:nonnull} DeviceObject_24 != 0;
    assume DeviceObject_24 > 0;
    havoc deviceExtension_8;
    call {:si_unique_call 1167} Tmp_576 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_576 != 0;
    assume Tmp_576 > 0;
    assume {:nonnull} deviceExtension_8 != 0;
    assume deviceExtension_8 > 0;
    call {:si_unique_call 1168} vslice_dummy_var_140 := sdv_InterlockedIncrement(Tmp_576);
    assume {:nonnull} Tmp_576 != 0;
    assume Tmp_576 > 0;
    assume {:nonnull} deviceExtension_8 != 0;
    assume deviceExtension_8 > 0;
    call {:si_unique_call 1169} status_20 := CheckStateAndAddReference(DeviceObject_24, Irp_25);
    call {:si_unique_call 1170} Tmp_576 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_576 != 0;
    assume Tmp_576 > 0;
    assume {:nonnull} deviceExtension_8 != 0;
    assume deviceExtension_8 > 0;
    call {:si_unique_call 1171} vslice_dummy_var_141 := sdv_InterlockedDecrement(Tmp_576);
    assume {:nonnull} Tmp_576 != 0;
    assume Tmp_576 > 0;
    assume {:nonnull} deviceExtension_8 != 0;
    assume deviceExtension_8 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_20 != 0;
    Tmp_575 := status_20;
    goto L1;

  L1:
    call {:si_unique_call 1172} SLIC_UniOpen_exit(strConst__li2bpl0, Tmp_575);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} status_20 == 0;
    call {:si_unique_call 1173} KeEnterCriticalRegion();
    call {:si_unique_call 1174} vslice_dummy_var_139 := ExAcquireResourceExclusiveLite(0, 1);
    assume {:nonnull} deviceExtension_8 != 0;
    assume deviceExtension_8 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 1175} status_20 := UniOpenStarter(deviceExtension_8, Irp_25);
    goto L30;

  L30:
    call {:si_unique_call 1176} ExReleaseResourceLite(0);
    call {:si_unique_call 1177} KeLeaveCriticalRegion();
    call {:si_unique_call 1178} RemoveReferenceAndCompleteRequest(DeviceObject_24, Irp_25, status_20);
    call {:si_unique_call 1179} RemoveReference(DeviceObject_24);
    Tmp_575 := status_20;
    goto L1;

  anon8_Then:
    status_20 := -1073741769;
    goto L30;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_312: int, actual_sdv_313: int) returns (Tmp_583: int);
  modifies alloc, queued;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_312: int, actual_sdv_313: int) returns (Tmp_583: int)
{
  var {:scalar} sdv_314: int;

  anon0:
    call {:si_unique_call 1180} sdv_314 := __HAVOC_malloc(4);
    call {:si_unique_call 1181} Tmp_583 := __HAVOC_malloc(4);
    call {:si_unique_call 1182} SLIC_sdv_InsertTailList_entry(0);
    assume {:nonnull} Tmp_583 != 0;
    assume Tmp_583 > 0;
    assume {:nonnull} sdv_314 != 0;
    assume sdv_314 > 0;
    return;
}



procedure {:origName "CheckStateAndAddReferenceWMI"} CheckStateAndAddReferenceWMI(actual_DeviceObject_25: int, actual_Irp_26: int) returns (Tmp_585: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_585 == -1073741823 || Tmp_585 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CheckStateAndAddReferenceWMI"} CheckStateAndAddReferenceWMI(actual_DeviceObject_25: int, actual_Irp_26: int) returns (Tmp_585: int)
{
  var {:pointer} DeviceExtension_4: int;
  var {:pointer} Tmp_586: int;
  var {:pointer} DeviceObject_25: int;
  var {:pointer} Irp_26: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;

  anon0:
    DeviceObject_25 := actual_DeviceObject_25;
    Irp_26 := actual_Irp_26;
    assume {:nonnull} DeviceObject_25 != 0;
    assume DeviceObject_25 > 0;
    havoc DeviceExtension_4;
    call {:si_unique_call 1183} Tmp_586 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_4 != 0;
    assume DeviceExtension_4 > 0;
    assume {:nonnull} Tmp_586 != 0;
    assume Tmp_586 > 0;
    call {:si_unique_call 1184} vslice_dummy_var_142 := sdv_InterlockedIncrement(Tmp_586);
    assume {:nonnull} DeviceExtension_4 != 0;
    assume DeviceExtension_4 > 0;
    assume {:nonnull} Tmp_586 != 0;
    assume Tmp_586 > 0;
    assume {:nonnull} DeviceExtension_4 != 0;
    assume DeviceExtension_4 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1185} RemoveReferenceAndCompleteRequest(DeviceObject_25, Irp_26, -1073741823);
    Tmp_585 := -1073741823;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1186} Tmp_586 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_4 != 0;
    assume DeviceExtension_4 > 0;
    assume {:nonnull} Tmp_586 != 0;
    assume Tmp_586 > 0;
    call {:si_unique_call 1187} vslice_dummy_var_143 := sdv_InterlockedIncrement(Tmp_586);
    assume {:nonnull} DeviceExtension_4 != 0;
    assume DeviceExtension_4 > 0;
    assume {:nonnull} Tmp_586 != 0;
    assume Tmp_586 > 0;
    Tmp_585 := 0;
    goto L1;
}



procedure {:origName "CheckStateAndAddReferencePower"} CheckStateAndAddReferencePower(actual_DeviceObject_26: int, actual_Irp_27: int) returns (Tmp_587: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_587 == -1073741823 || Tmp_587 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CheckStateAndAddReferencePower"} CheckStateAndAddReferencePower(actual_DeviceObject_26: int, actual_Irp_27: int) returns (Tmp_587: int)
{
  var {:pointer} Tmp_588: int;
  var {:pointer} DeviceExtension_5: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_27: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_27 := actual_Irp_27;
    assume {:nonnull} DeviceObject_26 != 0;
    assume DeviceObject_26 > 0;
    havoc DeviceExtension_5;
    call {:si_unique_call 1188} Tmp_588 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_5 != 0;
    assume DeviceExtension_5 > 0;
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    call {:si_unique_call 1189} vslice_dummy_var_144 := sdv_InterlockedIncrement(Tmp_588);
    assume {:nonnull} DeviceExtension_5 != 0;
    assume DeviceExtension_5 > 0;
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    assume {:nonnull} DeviceExtension_5 != 0;
    assume DeviceExtension_5 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1190} PoStartNextPowerIrp(0);
    call {:si_unique_call 1191} RemoveReferenceAndCompleteRequest(DeviceObject_26, Irp_27, -1073741823);
    Tmp_587 := -1073741823;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 1192} Tmp_588 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_5 != 0;
    assume DeviceExtension_5 > 0;
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    call {:si_unique_call 1193} vslice_dummy_var_145 := sdv_InterlockedIncrement(Tmp_588);
    assume {:nonnull} DeviceExtension_5 != 0;
    assume DeviceExtension_5 > 0;
    assume {:nonnull} Tmp_588 != 0;
    assume Tmp_588 > 0;
    Tmp_587 := 0;
    goto L1;
}



procedure {:origName "CheckStateAndAddReference"} CheckStateAndAddReference(actual_DeviceObject_27: int, actual_Irp_28: int) returns (Tmp_589: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_589 == -1073741823 || Tmp_589 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CheckStateAndAddReference"} CheckStateAndAddReference(actual_DeviceObject_27: int, actual_Irp_28: int) returns (Tmp_589: int)
{
  var {:pointer} irpSp_16: int;
  var {:pointer} DeviceExtension_6: int;
  var {:pointer} Tmp_591: int;
  var {:pointer} DeviceObject_27: int;
  var {:pointer} Irp_28: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;

  anon0:
    DeviceObject_27 := actual_DeviceObject_27;
    Irp_28 := actual_Irp_28;
    call {:si_unique_call 1194} vslice_dummy_var_146 := __HAVOC_malloc(184);
    call {:si_unique_call 1195} vslice_dummy_var_147 := __HAVOC_malloc(232);
    assume {:nonnull} DeviceObject_27 != 0;
    assume DeviceObject_27 > 0;
    havoc DeviceExtension_6;
    call {:si_unique_call 1196} irpSp_16 := sdv_IoGetCurrentIrpStackLocation(Irp_28);
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} irpSp_16 != 0;
    assume irpSp_16 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1197} Tmp_591 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    assume {:nonnull} Tmp_591 != 0;
    assume Tmp_591 > 0;
    call {:si_unique_call 1198} vslice_dummy_var_148 := sdv_InterlockedIncrement(Tmp_591);
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    assume {:nonnull} Tmp_591 != 0;
    assume Tmp_591 > 0;
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1199} RemoveReferenceAndCompleteRequest(DeviceObject_27, Irp_28, -1073741823);
    Tmp_589 := -1073741823;
    goto L1;

  L1:
    return;

  anon15_Then:
    call {:si_unique_call 1200} Tmp_591 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    assume {:nonnull} Tmp_591 != 0;
    assume Tmp_591 > 0;
    call {:si_unique_call 1201} vslice_dummy_var_149 := sdv_InterlockedIncrement(Tmp_591);
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    assume {:nonnull} Tmp_591 != 0;
    assume Tmp_591 > 0;
    Tmp_589 := 0;
    goto L1;

  anon14_Then:
    goto L17;

  L17:
    assume {:nonnull} Irp_28 != 0;
    assume Irp_28 > 0;
    call {:si_unique_call 1202} sdv_IoCompleteRequest(0, 0);
    Tmp_589 := -1073741823;
    goto L1;

  anon13_Then:
    call {:si_unique_call 1203} vslice_dummy_var_150 := corral_nondet();
    goto L17;

  anon11_Then:
    assume {:nonnull} DeviceExtension_6 != 0;
    assume DeviceExtension_6 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 1204} vslice_dummy_var_151 := corral_nondet();
    goto L17;

  anon12_Then:
    goto L17;
}



procedure {:origName "RemoveReference"} RemoveReference(actual_DeviceObject_28: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RemoveReference"} RemoveReference(actual_DeviceObject_28: int)
{
  var {:pointer} DeviceExtension_7: int;
  var {:pointer} Tmp_593: int;
  var {:scalar} NewReferenceCount_1: int;
  var {:pointer} DeviceObject_28: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 1205} vslice_dummy_var_152 := __HAVOC_malloc(4);
    DeviceObject_28 := actual_DeviceObject_28;
    assume {:nonnull} DeviceObject_28 != 0;
    assume DeviceObject_28 > 0;
    havoc DeviceExtension_7;
    call {:si_unique_call 1206} Tmp_593 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_7 != 0;
    assume DeviceExtension_7 > 0;
    assume {:nonnull} Tmp_593 != 0;
    assume Tmp_593 > 0;
    call {:si_unique_call 1207} NewReferenceCount_1 := sdv_InterlockedDecrement(Tmp_593);
    assume {:nonnull} DeviceExtension_7 != 0;
    assume DeviceExtension_7 > 0;
    assume {:nonnull} Tmp_593 != 0;
    assume Tmp_593 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} NewReferenceCount_1 == 0;
    assume {:nonnull} DeviceExtension_7 != 0;
    assume DeviceExtension_7 > 0;
    call {:si_unique_call 1208} vslice_dummy_var_153 := KeSetEvent(RemoveEvent__DEVICE_EXTENSION(DeviceExtension_7), 0, 0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} NewReferenceCount_1 != 0;
    goto L1;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_154: int;

  anon0:
    call {:si_unique_call 1209} vslice_dummy_var_154 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RemoveReferenceAndCompleteRequest"} RemoveReferenceAndCompleteRequest(actual_DeviceObject_29: int, actual_Irp_29: int, actual_StatusToReturn: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RemoveReferenceAndCompleteRequest"} RemoveReferenceAndCompleteRequest(actual_DeviceObject_29: int, actual_Irp_29: int, actual_StatusToReturn: int)
{
  var {:pointer} Tmp_597: int;
  var {:pointer} DeviceExtension_8: int;
  var {:scalar} NewReferenceCount_2: int;
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_29: int;
  var {:scalar} StatusToReturn: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;

  anon0:
    call {:si_unique_call 1210} vslice_dummy_var_155 := __HAVOC_malloc(4);
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_29 := actual_Irp_29;
    StatusToReturn := actual_StatusToReturn;
    assume {:nonnull} DeviceObject_29 != 0;
    assume DeviceObject_29 > 0;
    havoc DeviceExtension_8;
    call {:si_unique_call 1211} Tmp_597 := __HAVOC_malloc(4);
    assume {:nonnull} DeviceExtension_8 != 0;
    assume DeviceExtension_8 > 0;
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    call {:si_unique_call 1212} NewReferenceCount_2 := sdv_InterlockedDecrement(Tmp_597);
    assume {:nonnull} DeviceExtension_8 != 0;
    assume DeviceExtension_8 > 0;
    assume {:nonnull} Tmp_597 != 0;
    assume Tmp_597 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} NewReferenceCount_2 != 0;
    goto L15;

  L15:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    call {:si_unique_call 1213} sdv_IoCompleteRequest(0, 2);
    return;

  anon3_Then:
    assume {:partition} NewReferenceCount_2 == 0;
    assume {:nonnull} DeviceExtension_8 != 0;
    assume DeviceExtension_8 > 0;
    call {:si_unique_call 1214} vslice_dummy_var_156 := KeSetEvent(RemoveEvent__DEVICE_EXTENSION(DeviceExtension_8), 0, 0);
    goto L15;
}



procedure {:origName "UniWrite"} UniWrite(actual_DeviceObject_30: int, actual_Irp_30: int) returns (Tmp_599: int);
  modifies alloc, stack_location, yogi_error, queued, locked, markedPending, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_599 == -1073741823 || Tmp_599 == 0 || Tmp_599 == 259 || Tmp_599 == -1073741769;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniWrite"} UniWrite(actual_DeviceObject_30: int, actual_Irp_30: int) returns (Tmp_599: int)
{
  var {:pointer} irpSp_17: int;
  var {:scalar} sdv_330: int;
  var {:scalar} status_21: int;
  var {:pointer} deviceExtension_9: int;
  var {:pointer} DeviceObject_30: int;
  var {:pointer} Irp_30: int;
  var vslice_dummy_var_70: int;

  anon0:
    DeviceObject_30 := actual_DeviceObject_30;
    Irp_30 := actual_Irp_30;
    assume {:nonnull} DeviceObject_30 != 0;
    assume DeviceObject_30 > 0;
    havoc deviceExtension_9;
    call {:si_unique_call 1215} irpSp_17 := sdv_IoGetCurrentIrpStackLocation(Irp_30);
    call {:si_unique_call 1216} status_21 := CheckStateAndAddReference(DeviceObject_30, Irp_30);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_21 != 0;
    Tmp_599 := status_21;
    goto L1;

  L1:
    call {:si_unique_call 1217} SLIC_UniWrite_exit(strConst__li2bpl0, Tmp_599);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 1218} sdv_330 := CanIrpGoThrough(deviceExtension_9, irpSp_17);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_330 != 0;
    assume {:nonnull} deviceExtension_9 != 0;
    assume deviceExtension_9 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} deviceExtension_9 != 0;
    assume deviceExtension_9 > 0;
    call {:si_unique_call 1219} status_21 := QueueIrp(WriteIrpControl__DEVICE_EXTENSION(deviceExtension_9), Irp_30);
    goto L32;

  L32:
    call {:si_unique_call 1220} RemoveReference(DeviceObject_30);
    Tmp_599 := status_21;
    goto L1;

  anon15_Then:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_30 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1221} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L46;

  L46:
    call {:si_unique_call 1222} sdv_IoSkipCurrentIrpStackLocation(Irp_30);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_30 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1223} SLIC_sdv_IoCallDriver_entry(0);
    goto L49;

  L49:
    assume {:nonnull} deviceExtension_9 != 0;
    assume deviceExtension_9 > 0;
    havoc vslice_dummy_var_70;
    call {:si_unique_call 1224} status_21 := sdv_IoCallDriver(vslice_dummy_var_70, Irp_30);
    call {:si_unique_call 1225} RemoveReference(DeviceObject_30);
    goto L32;

  anon17_Then:
    assume !(Irp_30 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L49;

  anon16_Then:
    assume !(Irp_30 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L46;

  anon14_Then:
    assume {:partition} sdv_330 == 0;
    call {:si_unique_call 1226} RemoveReferenceAndCompleteRequest(DeviceObject_30, Irp_30, -1073741769);
    status_21 := -1073741769;
    goto L32;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 1227} vslice_dummy_var_157 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "UniRead"} UniRead(actual_DeviceObject_31: int, actual_Irp_31: int) returns (Tmp_603: int);
  modifies alloc, stack_location, yogi_error, queued, locked, markedPending, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_603 == -1073741823 || Tmp_603 == 0 || Tmp_603 == 259 || Tmp_603 == -1073741769;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniRead"} UniRead(actual_DeviceObject_31: int, actual_Irp_31: int) returns (Tmp_603: int)
{
  var {:pointer} irpSp_18: int;
  var {:scalar} sdv_335: int;
  var {:scalar} status_22: int;
  var {:pointer} deviceExtension_10: int;
  var {:pointer} DeviceObject_31: int;
  var {:pointer} Irp_31: int;
  var vslice_dummy_var_71: int;

  anon0:
    DeviceObject_31 := actual_DeviceObject_31;
    Irp_31 := actual_Irp_31;
    assume {:nonnull} DeviceObject_31 != 0;
    assume DeviceObject_31 > 0;
    havoc deviceExtension_10;
    call {:si_unique_call 1228} irpSp_18 := sdv_IoGetCurrentIrpStackLocation(Irp_31);
    call {:si_unique_call 1229} status_22 := CheckStateAndAddReference(DeviceObject_31, Irp_31);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_22 != 0;
    Tmp_603 := status_22;
    goto L1;

  L1:
    call {:si_unique_call 1230} SLIC_UniRead_exit(strConst__li2bpl0, Tmp_603);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} status_22 == 0;
    call {:si_unique_call 1231} sdv_335 := CanIrpGoThrough(deviceExtension_10, irpSp_18);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_335 != 0;
    assume {:nonnull} deviceExtension_10 != 0;
    assume deviceExtension_10 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} deviceExtension_10 != 0;
    assume deviceExtension_10 > 0;
    call {:si_unique_call 1232} status_22 := QueueIrp(ReadIrpControl__DEVICE_EXTENSION(deviceExtension_10), Irp_31);
    goto L32;

  L32:
    call {:si_unique_call 1233} RemoveReference(DeviceObject_31);
    Tmp_603 := status_22;
    goto L1;

  anon15_Then:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_31 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1234} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L46;

  L46:
    call {:si_unique_call 1235} sdv_IoSkipCurrentIrpStackLocation(Irp_31);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_31 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1236} SLIC_sdv_IoCallDriver_entry(0);
    goto L49;

  L49:
    assume {:nonnull} deviceExtension_10 != 0;
    assume deviceExtension_10 > 0;
    havoc vslice_dummy_var_71;
    call {:si_unique_call 1237} status_22 := sdv_IoCallDriver(vslice_dummy_var_71, Irp_31);
    call {:si_unique_call 1238} RemoveReference(DeviceObject_31);
    goto L32;

  anon17_Then:
    assume !(Irp_31 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L49;

  anon16_Then:
    assume !(Irp_31 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L46;

  anon14_Then:
    assume {:partition} sdv_335 == 0;
    call {:si_unique_call 1239} RemoveReferenceAndCompleteRequest(DeviceObject_31, Irp_31, -1073741769);
    status_22 := -1073741769;
    goto L32;
}



procedure {:origName "MarkQueueToEmpty"} MarkQueueToEmpty(actual_Control: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "MarkQueueToEmpty"} MarkQueueToEmpty(actual_Control: int)
{
  var {:scalar} sdv_338: int;
  var {:pointer} Tmp_606: int;
  var {:scalar} origIrql_9: int;
  var {:pointer} Control: int;
  var vslice_dummy_var_158: int;

  anon0:
    call {:si_unique_call 1240} vslice_dummy_var_158 := __HAVOC_malloc(4);
    Control := actual_Control;
    call {:si_unique_call 1241} Tmp_606 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_606 != 0;
    assume Tmp_606 > 0;
    call {:si_unique_call 1242} sdv_KeAcquireSpinLock(0, Tmp_606);
    assume {:nonnull} Tmp_606 != 0;
    assume Tmp_606 > 0;
    havoc origIrql_9;
    assume {:nonnull} Control != 0;
    assume Control > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L11;

  L11:
    assume {:nonnull} Control != 0;
    assume Control > 0;
    goto L12;

  L12:
    call {:si_unique_call 1243} sdv_KeReleaseSpinLock(0, origIrql_9);
    return;

  anon5_Then:
    call {:si_unique_call 1244} sdv_338 := sdv_IsListEmpty(0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_338 != 0;
    goto L12;

  anon6_Then:
    assume {:partition} sdv_338 == 0;
    goto L11;
}



procedure {:origName "ReadIrpStarter"} ReadIrpStarter(actual_Control_1: int, actual_DeviceObject_32: int, actual_Irp_32: int) returns (Tmp_607: int);
  modifies alloc, markedPending;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} Tmp_607 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ReadIrpStarter"} ReadIrpStarter(actual_Control_1: int, actual_DeviceObject_32: int, actual_Irp_32: int) returns (Tmp_607: int)
{
  var {:pointer} irpSp_19: int;
  var {:pointer} Control_1: int;
  var {:pointer} Irp_32: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_72: int;

  anon0:
    Control_1 := actual_Control_1;
    Irp_32 := actual_Irp_32;
    call {:si_unique_call 1245} irpSp_19 := sdv_IoGetCurrentIrpStackLocation(Irp_32);
    assume {:nonnull} Control_1 != 0;
    assume Control_1 > 0;
    assume {:nonnull} Irp_32 != 0;
    assume Irp_32 > 0;
    assume {:nonnull} Control_1 != 0;
    assume Control_1 > 0;
    assume {:nonnull} irpSp_19 != 0;
    assume irpSp_19 > 0;
    assume {:nonnull} Control_1 != 0;
    assume Control_1 > 0;
    call {:si_unique_call 1246} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_32);
    call {:si_unique_call 1247} sdv_IoSetCompletionRoutine(Irp_32, li2bplFunctionConstant1120, Control_1, 1, 1, 1);
    call {:si_unique_call 1248} sdv_IoMarkIrpPending(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume Irp_32 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1249} SLIC_sdv_IoCallDriver_entry(0);
    goto L25;

  L25:
    assume {:nonnull} Control_1 != 0;
    assume Control_1 > 0;
    havoc vslice_dummy_var_72;
    call {:si_unique_call 1250} vslice_dummy_var_159 := sdv_IoCallDriver(vslice_dummy_var_72, Irp_32);
    Tmp_607 := 259;
    return;

  anon3_Then:
    assume !(Irp_32 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L25;
}



procedure {:origName "QueueIrp"} QueueIrp(actual_Control_2: int, actual_Irp_33: int) returns (Tmp_609: int);
  modifies alloc, queued, locked, markedPending, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_609 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "QueueIrp"} QueueIrp(actual_Control_2: int, actual_Irp_33: int) returns (Tmp_609: int)
{
  var {:scalar} sdv_341: int;
  var {:pointer} Tmp_610: int;
  var {:scalar} origIrql_10: int;
  var {:scalar} CancelIrql_7: int;
  var {:pointer} Control_2: int;
  var {:pointer} Irp_33: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    Control_2 := actual_Control_2;
    Irp_33 := actual_Irp_33;
    call {:si_unique_call 1251} Tmp_610 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    call {:si_unique_call 1252} sdv_KeAcquireSpinLock(0, Tmp_610);
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    havoc origIrql_10;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto L12;

  L12:
    call {:si_unique_call 1253} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    call {:si_unique_call 1254} vslice_dummy_var_160 := sdv_InsertTailList(ListHead__READ_WRITE_CONTROL(Control_2), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_33))));
    call {:si_unique_call 1255} Tmp_610 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    call {:si_unique_call 1256} IoAcquireCancelSpinLock(Tmp_610);
    assume {:nonnull} Tmp_610 != 0;
    assume Tmp_610 > 0;
    havoc CancelIrql_7;
    assume {:nonnull} Irp_33 != 0;
    assume Irp_33 > 0;
    call {:si_unique_call 1257} vslice_dummy_var_161 := sdv_IoSetCancelRoutine(Irp_33, li2bplFunctionConstant1126);
    call {:si_unique_call 1258} IoReleaseCancelSpinLock(CancelIrql_7);
    call {:si_unique_call 1259} sdv_KeReleaseSpinLock(0, origIrql_10);
    Tmp_609 := 259;
    goto L1;

  L1:
    return;

  anon7_Then:
    call {:si_unique_call 1260} sdv_341 := sdv_IsListEmpty(0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_341 != 0;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    call {:si_unique_call 1261} sdv_KeReleaseSpinLock(0, origIrql_10);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    havoc vslice_dummy_var_73;
    call {:si_unique_call 1262} Tmp_609 := ReadIrpStarter(Control_2, vslice_dummy_var_73, Irp_33);
    goto L1;

  anon9_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    assume {:nonnull} Control_2 != 0;
    assume Control_2 > 0;
    havoc vslice_dummy_var_74;
    call {:si_unique_call 1263} Tmp_609 := WriteIrpStarter(Control_2, vslice_dummy_var_74, Irp_33);
    goto L1;

  anon8_Then:
    assume {:partition} sdv_341 == 0;
    goto L12;
}



procedure {:origName "InitIrpQueue"} InitIrpQueue(actual_Control_3: int, actual_DeviceObject_33: int, actual_Starter: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "InitIrpQueue"} InitIrpQueue(actual_Control_3: int, actual_DeviceObject_33: int, actual_Starter: int)
{
  var {:pointer} Tmp_611: int;
  var {:pointer} Control_3: int;
  var {:pointer} DeviceObject_33: int;
  var {:scalar} Starter: int;
  var vslice_dummy_var_162: int;

  anon0:
    call {:si_unique_call 1264} vslice_dummy_var_162 := __HAVOC_malloc(4);
    Control_3 := actual_Control_3;
    DeviceObject_33 := actual_DeviceObject_33;
    Starter := actual_Starter;
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    call {:si_unique_call 1265} InitializeListHead(ListHead__READ_WRITE_CONTROL(Control_3));
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    call {:si_unique_call 1266} Tmp_611 := __HAVOC_malloc(4);
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    assume {:nonnull} Tmp_611 != 0;
    assume Tmp_611 > 0;
    call {:si_unique_call 1267} sdv_KeInitializeSpinLock(Tmp_611);
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    assume {:nonnull} Tmp_611 != 0;
    assume Tmp_611 > 0;
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    assume {:nonnull} Control_3 != 0;
    assume Control_3 > 0;
    return;
}



procedure {:origName "CleanUpQueuedIrps"} CleanUpQueuedIrps(actual_Control_4: int, actual_Status_12: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CleanUpQueuedIrps"} CleanUpQueuedIrps(actual_Control_4: int, actual_Status_12: int)
{
  var {:pointer} Irp_34: int;
  var {:scalar} sdv_344: int;
  var {:scalar} origIrql_11: int;
  var {:pointer} sdv_346: int;
  var {:pointer} ListElement_1: int;
  var {:scalar} CancelIrql_8: int;
  var {:pointer} Tmp_614: int;
  var {:pointer} Control_4: int;
  var {:scalar} Status_12: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 1268} vslice_dummy_var_163 := __HAVOC_malloc(4);
    Control_4 := actual_Control_4;
    Status_12 := actual_Status_12;
    call {:si_unique_call 1269} Tmp_614 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    call {:si_unique_call 1270} sdv_KeAcquireSpinLock(0, Tmp_614);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    havoc origIrql_11;
    goto L9;

  L9:
    call {:si_unique_call 1271} Irp_34, sdv_344, origIrql_11, sdv_346, ListElement_1, CancelIrql_8, Tmp_614, vslice_dummy_var_164 := CleanUpQueuedIrps_loop_L9(Irp_34, sdv_344, origIrql_11, sdv_346, ListElement_1, CancelIrql_8, Tmp_614, Control_4, Status_12, vslice_dummy_var_164);
    goto L9_last;

  L9_last:
    call {:si_unique_call 1284} sdv_344 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_344 == 0;
    assume {:nonnull} Control_4 != 0;
    assume Control_4 > 0;
    call {:si_unique_call 1272} ListElement_1 := RemoveTailList(ListHead__READ_WRITE_CONTROL(Control_4));
    call {:si_unique_call 1273} sdv_346 := sdv_containing_record(ListElement_1, 88);
    Irp_34 := sdv_346;
    call {:si_unique_call 1274} Tmp_614 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    call {:si_unique_call 1275} IoAcquireCancelSpinLock(Tmp_614);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    havoc CancelIrql_8;
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    Irp_34 := 0;
    call {:si_unique_call 1276} IoReleaseCancelSpinLock(CancelIrql_8);
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Irp_34 != 0;
    call {:si_unique_call 1277} sdv_KeReleaseSpinLock(0, origIrql_11);
    assume {:nonnull} Irp_34 != 0;
    assume Irp_34 > 0;
    assume {:nonnull} Control_4 != 0;
    assume Control_4 > 0;
    havoc vslice_dummy_var_75;
    call {:si_unique_call 1278} RemoveReferenceAndCompleteRequest(vslice_dummy_var_75, Irp_34, Status_12);
    call {:si_unique_call 1279} Tmp_614 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    call {:si_unique_call 1280} sdv_KeAcquireSpinLock(0, Tmp_614);
    assume {:nonnull} Tmp_614 != 0;
    assume Tmp_614 > 0;
    havoc origIrql_11;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} Irp_34 == 0;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    assume false;
    return;

  anon8_Then:
    call {:si_unique_call 1281} vslice_dummy_var_164 := sdv_IoSetCancelRoutine(Irp_34, 0);
    call {:si_unique_call 1282} IoReleaseCancelSpinLock(CancelIrql_8);
    goto L38;

  anon7_Then:
    assume {:partition} sdv_344 != 0;
    call {:si_unique_call 1283} sdv_KeReleaseSpinLock(0, origIrql_11);
    return;
}



procedure {:origName "WriteIrpStarter"} WriteIrpStarter(actual_Control_5: int, actual_DeviceObject_34: int, actual_Irp_35: int) returns (Tmp_615: int);
  modifies alloc, markedPending;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} Tmp_615 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "WriteIrpStarter"} WriteIrpStarter(actual_Control_5: int, actual_DeviceObject_34: int, actual_Irp_35: int) returns (Tmp_615: int)
{
  var {:pointer} nextSp_3: int;
  var {:pointer} irpSp_20: int;
  var {:pointer} Buffer: int;
  var {:pointer} BufferEnd: int;
  var {:pointer} Control_5: int;
  var {:pointer} Irp_35: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_76: int;

  anon0:
    Control_5 := actual_Control_5;
    Irp_35 := actual_Irp_35;
    call {:si_unique_call 1285} irpSp_20 := sdv_IoGetCurrentIrpStackLocation(Irp_35);
    call {:si_unique_call 1286} nextSp_3 := sdv_IoGetNextIrpStackLocation(Irp_35);
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} Control_5 != 0;
    assume Control_5 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    havoc Buffer;
    BufferEnd := Buffer;
    goto L24;

  L24:
    call {:si_unique_call 1287} WriteIrpStarter_loop_L24(Buffer, BufferEnd);
    goto L24_last;

  L24_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} BufferEnd > Buffer;
    assume {:nonnull} Buffer != 0;
    assume Buffer > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    assume {:nonnull} irpSp_20 != 0;
    assume irpSp_20 > 0;
    assume {:nonnull} nextSp_3 != 0;
    assume nextSp_3 > 0;
    goto L25;

  L25:
    call {:si_unique_call 1288} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_35 != 0;
    assume Irp_35 > 0;
    call {:si_unique_call 1289} sdv_IoSetCompletionRoutine(Irp_35, li2bplFunctionConstant1122, Control_5, 1, 1, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume Irp_35 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1290} SLIC_sdv_IoCallDriver_entry(0);
    goto L43;

  L43:
    assume {:nonnull} Control_5 != 0;
    assume Control_5 > 0;
    havoc vslice_dummy_var_76;
    call {:si_unique_call 1291} vslice_dummy_var_165 := sdv_IoCallDriver(vslice_dummy_var_76, Irp_35);
    Tmp_615 := 259;
    return;

  anon9_Then:
    assume !(Irp_35 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L43;

  anon8_Then:
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    assume false;
    return;

  anon7_Then:
    assume {:partition} Buffer >= BufferEnd;
    goto L25;
}



procedure {:origName "UniStartOrQueue"} UniStartOrQueue(actual_Extension_6: int, actual_QueueLock: int, actual_Irp_37: int, actual_QueueToExamine: int, actual_CurrentOpIrp: int, actual_Starter_1: int) returns (Tmp_622: int);
  modifies alloc, queued, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(markedPending) == 0 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_622 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniStartOrQueue"} UniStartOrQueue(actual_Extension_6: int, actual_QueueLock: int, actual_Irp_37: int, actual_QueueToExamine: int, actual_CurrentOpIrp: int, actual_Starter_1: int) returns (Tmp_622: int)
{
  var {:pointer} irpSp_22: int;
  var {:pointer} Tmp_623: int;
  var {:scalar} Tmp_624: int;
  var {:scalar} Tmp_625: int;
  var {:scalar} sdv_358: int;
  var {:scalar} oldIrql: int;
  var {:pointer} Tmp_627: int;
  var {:pointer} Tmp_628: int;
  var {:scalar} Tmp_629: int;
  var {:pointer} Tmp_630: int;
  var {:pointer} Extension_6: int;
  var {:pointer} Irp_37: int;
  var {:pointer} QueueToExamine: int;
  var {:pointer} CurrentOpIrp: int;
  var {:scalar} Starter_1: int;
  var vslice_dummy_var_166: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;

  anon0:
    Extension_6 := actual_Extension_6;
    Irp_37 := actual_Irp_37;
    QueueToExamine := actual_QueueToExamine;
    CurrentOpIrp := actual_CurrentOpIrp;
    Starter_1 := actual_Starter_1;
    call {:si_unique_call 1292} Tmp_623 := __HAVOC_malloc(72);
    call {:si_unique_call 1293} Tmp_630 := __HAVOC_malloc(72);
    call {:si_unique_call 1294} vslice_dummy_var_167 := __HAVOC_malloc(72);
    call {:si_unique_call 1295} irpSp_22 := sdv_IoGetCurrentIrpStackLocation(Irp_37);
    call {:si_unique_call 1296} Tmp_627 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_627 != 0;
    assume Tmp_627 > 0;
    call {:si_unique_call 1297} sdv_KeAcquireSpinLock(0, Tmp_627);
    assume {:nonnull} Tmp_627 != 0;
    assume Tmp_627 > 0;
    havoc oldIrql;
    assume {:nonnull} irpSp_22 != 0;
    assume irpSp_22 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} irpSp_22 != 0;
    assume irpSp_22 > 0;
    havoc Tmp_628;
    assume {:nonnull} Tmp_628 != 0;
    assume Tmp_628 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_625 := 1;
    goto L19;

  L19:
    Tmp_629 := Tmp_625;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    havoc Tmp_623;
    Tmp_624 := Tmp_625;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    havoc Tmp_630;
    assume {:nonnull} Extension_6 != 0;
    assume Extension_6 > 0;
    assume {:nonnull} Tmp_623 != 0;
    assume Tmp_623 > 0;
    assume {:nonnull} Tmp_630 != 0;
    assume Tmp_630 > 0;
    goto L13;

  L13:
    call {:si_unique_call 1298} sdv_358 := sdv_IsListEmpty(0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_358 != 0;
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} CurrentOpIrp != 0;
    assume CurrentOpIrp > 0;
    call {:si_unique_call 1299} sdv_KeReleaseSpinLock(0, oldIrql);
    call {:si_unique_call 1300} sdv_IoMarkIrpPending(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant932;
    call {:si_unique_call 1301} vslice_dummy_var_169 := UniMaskStarter(Extension_6);
    goto L35;

  L35:
    Tmp_622 := 259;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:IndirectCall} true;
    assume Starter_1 == li2bplFunctionConstant937;
    call {:si_unique_call 1302} vslice_dummy_var_168 := UniPassThroughStarter#1(Extension_6);
    goto L35;

  anon13_Then:
    goto L21;

  L21:
    call {:si_unique_call 1303} sdv_IoMarkIrpPending(0);
    assume {:nonnull} Irp_37 != 0;
    assume Irp_37 > 0;
    call {:si_unique_call 1304} vslice_dummy_var_166 := sdv_InsertTailList(QueueToExamine, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_37))));
    call {:si_unique_call 1305} sdv_KeReleaseSpinLock(0, oldIrql);
    Tmp_622 := 259;
    goto L1;

  anon12_Then:
    assume {:partition} sdv_358 == 0;
    goto L21;

  anon15_Then:
    Tmp_625 := 0;
    goto L19;

  anon11_Then:
    goto L13;
}



procedure {:origName "UniGetNextIrp"} UniGetNextIrp(actual_DeviceObject_36: int, actual_QueueLock_1: int, actual_CurrentOpIrp_1: int, actual_QueueToProcess: int, actual_NextIrp: int, actual_CompleteCurrent: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniGetNextIrp"} UniGetNextIrp(actual_DeviceObject_36: int, actual_QueueLock_1: int, actual_CurrentOpIrp_1: int, actual_QueueToProcess: int, actual_NextIrp: int, actual_CompleteCurrent: int)
{
  var {:scalar} sdv_360: int;
  var {:pointer} Tmp_632: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} sdv_362: int;
  var {:pointer} oldIrp: int;
  var {:pointer} headOfList: int;
  var {:pointer} DeviceObject_36: int;
  var {:pointer} CurrentOpIrp_1: int;
  var {:pointer} QueueToProcess: int;
  var {:pointer} NextIrp: int;
  var {:scalar} CompleteCurrent: int;
  var vslice_dummy_var_170: int;
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 1306} vslice_dummy_var_170 := __HAVOC_malloc(4);
    DeviceObject_36 := actual_DeviceObject_36;
    CurrentOpIrp_1 := actual_CurrentOpIrp_1;
    QueueToProcess := actual_QueueToProcess;
    NextIrp := actual_NextIrp;
    CompleteCurrent := actual_CompleteCurrent;
    call {:si_unique_call 1307} Tmp_632 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_632 != 0;
    assume Tmp_632 > 0;
    call {:si_unique_call 1308} sdv_KeAcquireSpinLock(0, Tmp_632);
    assume {:nonnull} Tmp_632 != 0;
    assume Tmp_632 > 0;
    havoc oldIrql_1;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    havoc oldIrp;
    call {:si_unique_call 1309} sdv_360 := sdv_IsListEmpty(0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_360 == 0;
    call {:si_unique_call 1310} headOfList := RemoveHeadList(QueueToProcess);
    call {:si_unique_call 1311} sdv_362 := sdv_containing_record(headOfList, 88);
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    goto L15;

  L15:
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    assume {:nonnull} NextIrp != 0;
    assume NextIrp > 0;
    call {:si_unique_call 1312} sdv_KeReleaseSpinLock(0, oldIrql_1);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} CompleteCurrent != 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} oldIrp != 0;
    assume {:nonnull} oldIrp != 0;
    assume oldIrp > 0;
    havoc vslice_dummy_var_77;
    call {:si_unique_call 1313} RemoveReferenceAndCompleteRequest(DeviceObject_36, oldIrp, vslice_dummy_var_77);
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} oldIrp == 0;
    goto L1;

  anon8_Then:
    assume {:partition} CompleteCurrent == 0;
    goto L1;

  anon7_Then:
    assume {:partition} sdv_360 != 0;
    assume {:nonnull} CurrentOpIrp_1 != 0;
    assume CurrentOpIrp_1 > 0;
    goto L15;
}



procedure {:origName "UniSniffOwnerSettings"} UniSniffOwnerSettings(actual_DeviceObject_37: int, actual_Irp_38: int) returns (Tmp_634: int);
  modifies alloc, queued, stack_location, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_634 == -1073741789 || Tmp_634 == 259 || Tmp_634 == 0 || Tmp_634 == -1073741811;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSniffOwnerSettings"} UniSniffOwnerSettings(actual_DeviceObject_37: int, actual_Irp_38: int) returns (Tmp_634: int)
{
  var {:pointer} irpSp_23: int;
  var {:pointer} Tmp_635: int;
  var {:scalar} controlCode: int;
  var {:scalar} status_23: int;
  var {:pointer} deviceExtension_11: int;
  var {:pointer} DeviceObject_37: int;
  var {:pointer} Irp_38: int;
  var vslice_dummy_var_78: int;

  anon0:
    DeviceObject_37 := actual_DeviceObject_37;
    Irp_38 := actual_Irp_38;
    assume {:nonnull} DeviceObject_37 != 0;
    assume DeviceObject_37 > 0;
    havoc deviceExtension_11;
    call {:si_unique_call 1314} irpSp_23 := sdv_IoGetCurrentIrpStackLocation(Irp_38);
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    havoc controlCode;
    assume {:nonnull} Irp_38 != 0;
    assume Irp_38 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} controlCode == 2818056;
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 1315} RemoveReferenceAndCompleteRequest(DeviceObject_37, Irp_38, -1073741789);
    Tmp_634 := -1073741789;
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:nonnull} deviceExtension_11 != 0;
    assume deviceExtension_11 > 0;
    call {:si_unique_call 1316} Tmp_634 := UniStartOrQueue(deviceExtension_11, DeviceLock__DEVICE_EXTENSION(deviceExtension_11), Irp_38, PassThroughQueue__DEVICE_EXTENSION(deviceExtension_11), CurrentPassThrough__DEVICE_EXTENSION(deviceExtension_11), li2bplFunctionConstant937);
    goto L1;

  anon22_Then:
    assume {:partition} controlCode != 2818056;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} controlCode == 2818052;
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    call {:si_unique_call 1317} RemoveReferenceAndCompleteRequest(DeviceObject_37, Irp_38, -1073741789);
    Tmp_634 := -1073741789;
    goto L1;

  anon25_Then:
    assume {:nonnull} Irp_38 != 0;
    assume Irp_38 > 0;
    havoc Tmp_635;
    assume {:nonnull} Tmp_635 != 0;
    assume Tmp_635 > 0;
    assume {:nonnull} deviceExtension_11 != 0;
    assume deviceExtension_11 > 0;
    assume {:nonnull} Irp_38 != 0;
    assume Irp_38 > 0;
    call {:si_unique_call 1318} RemoveReferenceAndCompleteRequest(DeviceObject_37, Irp_38, 0);
    Tmp_634 := 0;
    goto L1;

  anon23_Then:
    assume {:partition} controlCode != 2818052;
    call {:si_unique_call 1319} RemoveReferenceAndCompleteRequest(DeviceObject_37, Irp_38, -1073741811);
    Tmp_634 := -1073741811;
    goto L1;

  anon30_Then:
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L44;

  L44:
    assume {:nonnull} deviceExtension_11 != 0;
    assume deviceExtension_11 > 0;
    call {:si_unique_call 1320} Tmp_634 := UniStartOrQueue(deviceExtension_11, DeviceLock__DEVICE_EXTENSION(deviceExtension_11), Irp_38, MaskOps__DEVICE_EXTENSION(deviceExtension_11), CurrentMaskOp__DEVICE_EXTENSION(deviceExtension_11), li2bplFunctionConstant932);
    goto L1;

  anon21_Then:
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} irpSp_23 != 0;
    assume irpSp_23 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    call {:si_unique_call 1321} Tmp_634 := UniValidateNewCommConfig(deviceExtension_11, Irp_38, 1);
    goto L1;

  anon27_Then:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume Irp_38 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1322} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L67;

  L67:
    call {:si_unique_call 1323} sdv_IoSkipCurrentIrpStackLocation(Irp_38);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume Irp_38 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1324} SLIC_sdv_IoCallDriver_entry(0);
    goto L70;

  L70:
    assume {:nonnull} deviceExtension_11 != 0;
    assume deviceExtension_11 > 0;
    havoc vslice_dummy_var_78;
    call {:si_unique_call 1325} status_23 := sdv_IoCallDriver(vslice_dummy_var_78, Irp_38);
    call {:si_unique_call 1326} RemoveReference(DeviceObject_37);
    Tmp_634 := status_23;
    goto L1;

  anon29_Then:
    assume !(Irp_38 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L70;

  anon28_Then:
    assume !(Irp_38 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L67;

  anon26_Then:
    goto L44;
}



procedure {:origName "UniNoCheckPassThrough"} UniNoCheckPassThrough(actual_DeviceObject_38: int, actual_Irp_39: int) returns (Tmp_637: int);
  modifies stack_location, alloc;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} Tmp_637 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniNoCheckPassThrough"} UniNoCheckPassThrough(actual_DeviceObject_38: int, actual_Irp_39: int) returns (Tmp_637: int)
{
  var {:scalar} status_24: int;
  var {:pointer} deviceExtension_12: int;
  var {:pointer} DeviceObject_38: int;
  var {:pointer} Irp_39: int;
  var vslice_dummy_var_79: int;

  anon0:
    DeviceObject_38 := actual_DeviceObject_38;
    Irp_39 := actual_Irp_39;
    assume {:nonnull} DeviceObject_38 != 0;
    assume DeviceObject_38 > 0;
    havoc deviceExtension_12;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_39 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1327} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L18;

  L18:
    call {:si_unique_call 1328} sdv_IoSkipCurrentIrpStackLocation(Irp_39);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume Irp_39 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1329} SLIC_sdv_IoCallDriver_entry(0);
    goto L21;

  L21:
    assume {:nonnull} deviceExtension_12 != 0;
    assume deviceExtension_12 > 0;
    havoc vslice_dummy_var_79;
    call {:si_unique_call 1330} status_24 := sdv_IoCallDriver(vslice_dummy_var_79, Irp_39);
    call {:si_unique_call 1331} RemoveReference(DeviceObject_38);
    Tmp_637 := status_24;
    return;

  anon5_Then:
    assume !(Irp_39 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L21;

  anon6_Then:
    assume !(Irp_39 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L18;
}



procedure {:origName "UniSetupNoPassPart1"} UniSetupNoPassPart1(actual_DeviceObject_39: int, actual_Irp_40: int, actual_Context_4: int) returns (Tmp_639: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_639 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupNoPassPart1"} UniSetupNoPassPart1(actual_DeviceObject_39: int, actual_Irp_40: int, actual_Context_4: int) returns (Tmp_639: int)
{
  var {:pointer} nextSp_5: int;
  var {:pointer} Tmp_640: int;
  var {:pointer} Tmp_641: int;
  var {:pointer} irpSp_24: int;
  var {:pointer} s_p_e_c_i_a_l_22: int;
  var {:pointer} s_p_e_c_i_a_l_23: int;
  var {:pointer} s_p_e_c_i_a_l_24: int;
  var {:pointer} Tmp_642: int;
  var {:scalar} origIrql_13: int;
  var {:pointer} Tmp_643: int;
  var {:pointer} s_p_e_c_i_a_l_25: int;
  var {:pointer} extension_5: int;
  var {:pointer} Irp_40: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_80: int;
  var vslice_dummy_var_81: int;

  anon0:
    Irp_40 := actual_Irp_40;
    Context_4 := actual_Context_4;
    call {:si_unique_call 1332} Tmp_641 := __HAVOC_malloc(72);
    call {:si_unique_call 1333} Tmp_642 := __HAVOC_malloc(72);
    call {:si_unique_call 1334} irpSp_24 := sdv_IoGetCurrentIrpStackLocation(Irp_40);
    call {:si_unique_call 1335} nextSp_5 := sdv_IoGetNextIrpStackLocation(Irp_40);
    extension_5 := Context_4;
    call {:si_unique_call 1336} Tmp_640 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_640 != 0;
    assume Tmp_640 > 0;
    call {:si_unique_call 1337} sdv_KeAcquireSpinLock(0, Tmp_640);
    assume {:nonnull} Tmp_640 != 0;
    assume Tmp_640 > 0;
    havoc origIrql_13;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    s_p_e_c_i_a_l_25 := Irp_40;
    call {:si_unique_call 1338} s_p_e_c_i_a_l_23 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_25);
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_25 != 0;
    assume s_p_e_c_i_a_l_25 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_23 != 0;
    assume s_p_e_c_i_a_l_23 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_25 != 0;
    assume s_p_e_c_i_a_l_25 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} irpSp_24 != 0;
    assume irpSp_24 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} nextSp_5 != 0;
    assume nextSp_5 > 0;
    assume {:nonnull} Irp_40 != 0;
    assume Irp_40 > 0;
    havoc Tmp_643;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc Tmp_642;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc Tmp_641;
    assume {:nonnull} Tmp_641 != 0;
    assume Tmp_641 > 0;
    assume {:nonnull} Tmp_642 != 0;
    assume Tmp_642 > 0;
    assume {:nonnull} Tmp_643 != 0;
    assume Tmp_643 > 0;
    call {:si_unique_call 1339} sdv_IoSetCompletionRoutine(Irp_40, li2bplFunctionConstant939, extension_5, 1, 1, 1);
    call {:si_unique_call 1340} sdv_KeReleaseSpinLock(0, origIrql_13);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_40 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1341} SLIC_sdv_IoCallDriver_entry(0);
    goto L67;

  L67:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc vslice_dummy_var_80;
    call {:si_unique_call 1342} vslice_dummy_var_171 := sdv_IoCallDriver(vslice_dummy_var_80, Irp_40);
    goto L48;

  L48:
    Tmp_639 := -1073741802;
    return;

  anon6_Then:
    assume !(Irp_40 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L67;

  anon5_Then:
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    call {:si_unique_call 1343} sdv_KeReleaseSpinLock(0, origIrql_13);
    s_p_e_c_i_a_l_24 := Irp_40;
    call {:si_unique_call 1344} s_p_e_c_i_a_l_22 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_24);
    assume {:nonnull} s_p_e_c_i_a_l_22 != 0;
    assume s_p_e_c_i_a_l_22 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_24 != 0;
    assume s_p_e_c_i_a_l_24 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_22 != 0;
    assume s_p_e_c_i_a_l_22 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_24 != 0;
    assume s_p_e_c_i_a_l_24 > 0;
    assume {:nonnull} extension_5 != 0;
    assume extension_5 > 0;
    havoc vslice_dummy_var_81;
    call {:si_unique_call 1345} vslice_dummy_var_172 := UniSetupNoPassPart2(vslice_dummy_var_81, Irp_40, extension_5);
    goto L48;
}



procedure {:origName "UniValidateNewCommConfig"} UniValidateNewCommConfig(actual_Extension_7: int, actual_Irp_41: int, actual_Owner: int) returns (Tmp_644: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_644 == -1073741789 || Tmp_644 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniValidateNewCommConfig"} UniValidateNewCommConfig(actual_Extension_7: int, actual_Irp_41: int, actual_Owner: int) returns (Tmp_644: int)
{
  var {:pointer} irpSp_25: int;
  var {:pointer} Tmp_645: int;
  var {:pointer} localConf_1: int;
  var {:pointer} Tmp_646: int;
  var {:scalar} origIrql_14: int;
  var {:pointer} localSet: int;
  var {:pointer} Extension_7: int;
  var {:pointer} Irp_41: int;
  var {:scalar} Owner: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;

  anon0:
    Extension_7 := actual_Extension_7;
    Irp_41 := actual_Irp_41;
    Owner := actual_Owner;
    call {:si_unique_call 1346} Tmp_646 := __HAVOC_malloc(4);
    call {:si_unique_call 1347} irpSp_25 := sdv_IoGetCurrentIrpStackLocation(Irp_41);
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    havoc localConf_1;
    assume {:nonnull} localConf_1 != 0;
    assume localConf_1 > 0;
    havoc Tmp_646;
    localSet := Tmp_646;
    assume {:nonnull} irpSp_25 != 0;
    assume irpSp_25 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_82;
    call {:si_unique_call 1348} RemoveReferenceAndCompleteRequest(vslice_dummy_var_82, Irp_41, -1073741789);
    Tmp_644 := -1073741789;
    goto L1;

  L1:
    return;

  anon23_Then:
    call {:si_unique_call 1349} Tmp_645 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_645 != 0;
    assume Tmp_645 > 0;
    call {:si_unique_call 1350} sdv_KeAcquireSpinLock(0, Tmp_645);
    assume {:nonnull} Tmp_645 != 0;
    assume Tmp_645 > 0;
    havoc origIrql_14;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto L25;

  L25:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto L28;

  L28:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto L29;

  L29:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto L31;

  L31:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Owner != 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto L34;

  L34:
    call {:si_unique_call 1351} sdv_KeReleaseSpinLock(0, origIrql_14);
    assume {:nonnull} Irp_41 != 0;
    assume Irp_41 > 0;
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    havoc vslice_dummy_var_83;
    call {:si_unique_call 1352} RemoveReferenceAndCompleteRequest(vslice_dummy_var_83, Irp_41, 0);
    Tmp_644 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} Owner == 0;
    goto L34;

  anon22_Then:
    goto L31;

  anon21_Then:
    goto L29;

  anon19_Then:
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto L28;

  anon20_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto L28;

  anon17_Then:
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    goto L25;

  anon18_Then:
    assume {:nonnull} Extension_7 != 0;
    assume Extension_7 > 0;
    assume {:nonnull} localSet != 0;
    assume localSet > 0;
    goto L25;
}



procedure {:origName "UniSetupSniffPart0"} UniSetupSniffPart0(actual_DeviceObject_40: int, actual_Irp_42: int, actual_Context_5: int) returns (Tmp_647: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_647 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupSniffPart0"} UniSetupSniffPart0(actual_DeviceObject_40: int, actual_Irp_42: int, actual_Context_5: int) returns (Tmp_647: int)
{
  var {:pointer} nextSp_6: int;
  var {:pointer} irpSp_26: int;
  var {:pointer} s_p_e_c_i_a_l_26: int;
  var {:pointer} s_p_e_c_i_a_l_27: int;
  var {:pointer} Tmp_648: int;
  var {:pointer} extension_6: int;
  var {:pointer} Irp_42: int;
  var {:pointer} Context_5: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_84: int;

  anon0:
    Irp_42 := actual_Irp_42;
    Context_5 := actual_Context_5;
    call {:si_unique_call 1353} irpSp_26 := sdv_IoGetCurrentIrpStackLocation(Irp_42);
    call {:si_unique_call 1354} nextSp_6 := sdv_IoGetNextIrpStackLocation(Irp_42);
    extension_6 := Context_5;
    assume {:nonnull} extension_6 != 0;
    assume extension_6 > 0;
    s_p_e_c_i_a_l_27 := Irp_42;
    call {:si_unique_call 1355} s_p_e_c_i_a_l_26 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_27);
    assume {:nonnull} s_p_e_c_i_a_l_26 != 0;
    assume s_p_e_c_i_a_l_26 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_27 != 0;
    assume s_p_e_c_i_a_l_27 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_26 != 0;
    assume s_p_e_c_i_a_l_26 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_27 != 0;
    assume s_p_e_c_i_a_l_27 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} irpSp_26 != 0;
    assume irpSp_26 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} nextSp_6 != 0;
    assume nextSp_6 > 0;
    assume {:nonnull} Irp_42 != 0;
    assume Irp_42 > 0;
    havoc Tmp_648;
    assume {:nonnull} Tmp_648 != 0;
    assume Tmp_648 > 0;
    call {:si_unique_call 1356} sdv_IoSetCompletionRoutine(Irp_42, li2bplFunctionConstant943, extension_6, 1, 1, 1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume Irp_42 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1357} SLIC_sdv_IoCallDriver_entry(0);
    goto L41;

  L41:
    assume {:nonnull} extension_6 != 0;
    assume extension_6 > 0;
    havoc vslice_dummy_var_84;
    call {:si_unique_call 1358} vslice_dummy_var_173 := sdv_IoCallDriver(vslice_dummy_var_84, Irp_42);
    Tmp_647 := 0;
    return;

  anon3_Then:
    assume !(Irp_42 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L41;
}



procedure {:origName "UniSetupNoPassPart2"} UniSetupNoPassPart2(actual_DeviceObject_41: int, actual_Irp_43: int, actual_Context_6: int) returns (Tmp_650: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_650 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupNoPassPart2"} UniSetupNoPassPart2(actual_DeviceObject_41: int, actual_Irp_43: int, actual_Context_6: int) returns (Tmp_650: int)
{
  var {:pointer} nextSp_7: int;
  var {:pointer} Tmp_651: int;
  var {:pointer} Tmp_652: int;
  var {:pointer} Tmp_654: int;
  var {:pointer} Irp_43: int;
  var {:pointer} Context_6: int;
  var vslice_dummy_var_174: int;

  anon0:
    Irp_43 := actual_Irp_43;
    Context_6 := actual_Context_6;
    call {:si_unique_call 1359} nextSp_7 := sdv_IoGetNextIrpStackLocation(Irp_43);
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} nextSp_7 != 0;
    assume nextSp_7 > 0;
    assume {:nonnull} Irp_43 != 0;
    assume Irp_43 > 0;
    havoc Tmp_654;
    assume {:nonnull} Tmp_654 != 0;
    assume Tmp_654 > 0;
    call {:si_unique_call 1360} sdv_IoSetCompletionRoutine(Irp_43, li2bplFunctionConstant940, Context_6, 1, 1, 1);
    Tmp_651 := Context_6;
    assume {:nonnull} Tmp_651 != 0;
    assume Tmp_651 > 0;
    havoc Tmp_652;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume Irp_43 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1361} SLIC_sdv_IoCallDriver_entry(0);
    goto L25;

  L25:
    call {:si_unique_call 1362} vslice_dummy_var_174 := sdv_IoCallDriver(Tmp_652, Irp_43);
    Tmp_650 := -1073741802;
    return;

  anon3_Then:
    assume !(Irp_43 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L25;
}



procedure {:origName "UniCheckPassThrough"} UniCheckPassThrough(actual_DeviceObject_43: int, actual_Irp_45: int) returns (Tmp_669: int);
  modifies alloc, queued, stack_location, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_669 == -1073741789 || Tmp_669 == 0 || Tmp_669 == 259 || Tmp_669 == -1073741769;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniCheckPassThrough"} UniCheckPassThrough(actual_DeviceObject_43: int, actual_Irp_45: int) returns (Tmp_669: int)
{
  var {:pointer} irpSp_28: int;
  var {:scalar} status_25: int;
  var {:pointer} deviceExtension_13: int;
  var {:pointer} DeviceObject_43: int;
  var {:pointer} Irp_45: int;
  var vslice_dummy_var_85: int;

  anon0:
    DeviceObject_43 := actual_DeviceObject_43;
    Irp_45 := actual_Irp_45;
    assume {:nonnull} DeviceObject_43 != 0;
    assume DeviceObject_43 > 0;
    havoc deviceExtension_13;
    call {:si_unique_call 1363} irpSp_28 := sdv_IoGetCurrentIrpStackLocation(Irp_45);
    assume {:nonnull} deviceExtension_13 != 0;
    assume deviceExtension_13 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} irpSp_28 != 0;
    assume irpSp_28 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto L15;

  L15:
    assume {:nonnull} deviceExtension_13 != 0;
    assume deviceExtension_13 > 0;
    call {:si_unique_call 1364} Tmp_669 := UniStartOrQueue(deviceExtension_13, DeviceLock__DEVICE_EXTENSION(deviceExtension_13), Irp_45, MaskOps__DEVICE_EXTENSION(deviceExtension_13), CurrentMaskOp__DEVICE_EXTENSION(deviceExtension_13), li2bplFunctionConstant932);
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:nonnull} irpSp_28 != 0;
    assume irpSp_28 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} irpSp_28 != 0;
    assume irpSp_28 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 1365} Tmp_669 := UniValidateNewCommConfig(deviceExtension_13, Irp_45, 0);
    goto L1;

  anon16_Then:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_45 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1366} SLIC_sdv_IoSkipCurrentIrpStackLocation_entry(0);
    goto L42;

  L42:
    call {:si_unique_call 1367} sdv_IoSkipCurrentIrpStackLocation(Irp_45);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume Irp_45 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1368} SLIC_sdv_IoCallDriver_entry(0);
    goto L45;

  L45:
    assume {:nonnull} deviceExtension_13 != 0;
    assume deviceExtension_13 > 0;
    havoc vslice_dummy_var_85;
    call {:si_unique_call 1369} status_25 := sdv_IoCallDriver(vslice_dummy_var_85, Irp_45);
    call {:si_unique_call 1370} RemoveReference(DeviceObject_43);
    Tmp_669 := status_25;
    goto L1;

  anon18_Then:
    assume !(Irp_45 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L45;

  anon17_Then:
    assume !(Irp_45 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L42;

  anon15_Then:
    goto L15;

  anon13_Then:
    assume {:nonnull} Irp_45 != 0;
    assume Irp_45 > 0;
    call {:si_unique_call 1371} RemoveReferenceAndCompleteRequest(DeviceObject_43, Irp_45, -1073741769);
    Tmp_669 := -1073741769;
    goto L1;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1372} vslice_dummy_var_175 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "CanIrpGoThrough"} CanIrpGoThrough(actual_DeviceExtension_9: int, actual_IrpSp_1: int) returns (Tmp_673: int);
  free ensures {:va_keep} Tmp_673 == 1 || Tmp_673 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "CanIrpGoThrough"} CanIrpGoThrough(actual_DeviceExtension_9: int, actual_IrpSp_1: int) returns (Tmp_673: int)
{
  var {:scalar} Tmp_674: int;
  var {:pointer} Tmp_676: int;
  var {:pointer} Tmp_677: int;
  var {:pointer} DeviceExtension_9: int;
  var {:pointer} IrpSp_1: int;

  anon0:
    DeviceExtension_9 := actual_DeviceExtension_9;
    IrpSp_1 := actual_IrpSp_1;
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_677;
    assume {:nonnull} Tmp_677 != 0;
    assume Tmp_677 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto L5;

  L5:
    Tmp_674 := 1;
    goto L6;

  L6:
    Tmp_673 := Tmp_674;
    return;

  anon8_Then:
    assume {:nonnull} DeviceExtension_9 != 0;
    assume DeviceExtension_9 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} IrpSp_1 != 0;
    assume IrpSp_1 > 0;
    havoc Tmp_676;
    assume {:nonnull} DeviceExtension_9 != 0;
    assume DeviceExtension_9 > 0;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L7;

  L7:
    Tmp_674 := 0;
    goto L6;

  anon9_Then:
    goto L5;

  anon7_Then:
    goto L7;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 1373} vslice_dummy_var_176 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry: int);
  modifies alloc, queued;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 0;
  free ensures {:va_keep} queued == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "InsertHeadList"} InsertHeadList(actual_ListHead_1: int, actual_Entry: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} ListHead_1: int;
  var {:pointer} Entry: int;
  var vslice_dummy_var_177: int;
  var vslice_dummy_var_86: int;

  anon0:
    call {:si_unique_call 1374} vslice_dummy_var_177 := __HAVOC_malloc(4);
    ListHead_1 := actual_ListHead_1;
    Entry := actual_Entry;
    call {:si_unique_call 1375} SLIC_InsertHeadList_entry(0);
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    havoc NextEntry;
    assume {:nonnull} Entry != 0;
    assume Entry > 0;
    assume {:nonnull} Entry != 0;
    assume Entry > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    havoc vslice_dummy_var_86;
    call {:si_unique_call 1376} FatalListEntryError(ListHead_1, NextEntry, vslice_dummy_var_86);
    goto L8;

  L8:
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    assume {:nonnull} ListHead_1 != 0;
    assume ListHead_1 > 0;
    return;

  anon3_Then:
    goto L8;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_2: int)
{
  var {:pointer} ListHead_2: int;
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1377} vslice_dummy_var_178 := __HAVOC_malloc(4);
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    return;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_684: int);
  modifies alloc;
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_3: int) returns (Tmp_684: int)
{
  var {:pointer} NextEntry_1: int;
  var {:pointer} Entry_1: int;
  var {:pointer} ListHead_3: int;

  anon0:
    ListHead_3 := actual_ListHead_3;
    call {:si_unique_call 1378} SLIC_RemoveHeadList_entry(strConst__li2bpl0);
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc NextEntry_1;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1379} FatalListEntryError(ListHead_3, Entry_1, NextEntry_1);
    goto L12;

  L12:
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} NextEntry_1 != 0;
    assume NextEntry_1 > 0;
    Tmp_684 := Entry_1;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "SetPassdownToComplete"} SetPassdownToComplete(actual_MaskState_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "SetPassdownToComplete"} SetPassdownToComplete(actual_MaskState_1: int)
{
  var {:pointer} s_p_e_c_i_a_l_31: int;
  var {:pointer} s_p_e_c_i_a_l_32: int;
  var {:pointer} MaskState_1: int;
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1380} vslice_dummy_var_179 := __HAVOC_malloc(4);
    MaskState_1 := actual_MaskState_1;
    assume {:nonnull} MaskState_1 != 0;
    assume MaskState_1 > 0;
    havoc s_p_e_c_i_a_l_32;
    assume {:nonnull} s_p_e_c_i_a_l_32 != 0;
    assume s_p_e_c_i_a_l_32 > 0;
    s_p_e_c_i_a_l_31 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(s_p_e_c_i_a_l_32)));
    assume {:nonnull} s_p_e_c_i_a_l_31 != 0;
    assume s_p_e_c_i_a_l_31 > 0;
    assume {:nonnull} MaskState_1 != 0;
    assume MaskState_1 > 0;
    assume {:nonnull} MaskState_1 != 0;
    assume MaskState_1 > 0;
    return;
}



procedure {:origName "MakeIrpCurrentPassedDown"} MakeIrpCurrentPassedDown(actual_MaskState_2: int, actual_Irp_46: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "MakeIrpCurrentPassedDown"} MakeIrpCurrentPassedDown(actual_MaskState_2: int, actual_Irp_46: int)
{
  var {:pointer} s_p_e_c_i_a_l_33: int;
  var {:pointer} s_p_e_c_i_a_l_34: int;
  var {:pointer} MaskState_2: int;
  var {:pointer} Irp_46: int;
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1381} vslice_dummy_var_180 := __HAVOC_malloc(4);
    MaskState_2 := actual_MaskState_2;
    Irp_46 := actual_Irp_46;
    call {:si_unique_call 1382} s_p_e_c_i_a_l_34 := sdv_IoGetCurrentIrpStackLocation(Irp_46);
    assume {:nonnull} s_p_e_c_i_a_l_34 != 0;
    assume s_p_e_c_i_a_l_34 > 0;
    s_p_e_c_i_a_l_33 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(s_p_e_c_i_a_l_34)));
    assume {:nonnull} s_p_e_c_i_a_l_33 != 0;
    assume s_p_e_c_i_a_l_33 > 0;
    assume {:nonnull} MaskState_2 != 0;
    assume MaskState_2 > 0;
    assume {:nonnull} MaskState_2 != 0;
    assume MaskState_2 > 0;
    return;
}



procedure {:origName "RemoveTailList"} RemoveTailList(actual_ListHead_4: int) returns (Tmp_690: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RemoveTailList"} RemoveTailList(actual_ListHead_4: int) returns (Tmp_690: int)
{
  var {:pointer} PrevEntry: int;
  var {:pointer} Entry_2: int;
  var {:pointer} ListHead_4: int;

  anon0:
    ListHead_4 := actual_ListHead_4;
    assume {:nonnull} ListHead_4 != 0;
    assume ListHead_4 > 0;
    havoc Entry_2;
    assume {:nonnull} Entry_2 != 0;
    assume Entry_2 > 0;
    havoc PrevEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1383} FatalListEntryError(PrevEntry, Entry_2, ListHead_4);
    goto L12;

  L12:
    assume {:nonnull} ListHead_4 != 0;
    assume ListHead_4 > 0;
    assume {:nonnull} PrevEntry != 0;
    assume PrevEntry > 0;
    Tmp_690 := Entry_2;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int)
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1384} vslice_dummy_var_181 := __HAVOC_malloc(4);
    call {:si_unique_call 1385} RtlFailFast(3);
    return;
}



procedure {:origName "ModemWmi"} ModemWmi(actual_DeviceObject_44: int, actual_Irp_47: int) returns (Tmp_694: int);
  modifies alloc, yogi_error, stack_location;
  free ensures {:va_keep} old(locked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(locked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(markedPending) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queued) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> stack_location != 0;
  free ensures {:va_keep} old(stack_location) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(stack_location) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> stack_location == old(stack_location);
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} stack_location == 1 || stack_location == old(stack_location);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "ModemWmi"} ModemWmi(actual_DeviceObject_44: int, actual_Irp_47: int) returns (Tmp_694: int)
{
  var {:scalar} Tmp_695: int;
  var {:pointer} irpSp_29: int;
  var {:scalar} WakeSupported: int;
  var {:scalar} DeviceCaps: int;
  var {:dopa} {:scalar} IrpDisposition_1: int;
  var {:scalar} status_26: int;
  var {:pointer} deviceExtension_14: int;
  var {:pointer} DeviceObject_44: int;
  var {:pointer} Irp_47: int;
  var vslice_dummy_var_182: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;

  anon0:
    call {:si_unique_call 1386} DeviceCaps := __HAVOC_malloc(124);
    call {:si_unique_call 1387} IrpDisposition_1 := __HAVOC_malloc(4);
    DeviceObject_44 := actual_DeviceObject_44;
    Irp_47 := actual_Irp_47;
    assume {:nonnull} DeviceObject_44 != 0;
    assume DeviceObject_44 > 0;
    havoc deviceExtension_14;
    call {:si_unique_call 1388} irpSp_29 := sdv_IoGetCurrentIrpStackLocation(Irp_47);
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L15;

  L15:
    call {:si_unique_call 1389} Tmp_694 := ModemPdoWmi(DeviceObject_44, Irp_47);
    goto L1;

  L1:
    call {:si_unique_call 1390} SLIC_ModemWmi_exit(strConst__li2bpl0, Tmp_694);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon38_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 1391} status_26 := CheckStateAndAddReferenceWMI(DeviceObject_44, Irp_47);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_26 != 0;
    Tmp_694 := status_26;
    goto L1;

  anon29_Then:
    assume {:partition} status_26 == 0;
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    havoc vslice_dummy_var_87;
    call {:si_unique_call 1392} vslice_dummy_var_182 := QueryDeviceCaps(vslice_dummy_var_87, DeviceCaps);
    goto L27;

  L27:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    Tmp_695 := 1;
    goto L31;

  L31:
    WakeSupported := Tmp_695;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} WakeSupported != 0;
    call {:si_unique_call 1393} status_26 := WmiSystemControl(0, 0, Irp_47, IrpDisposition_1);
    assume {:nonnull} IrpDisposition_1 != 0;
    assume IrpDisposition_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:nonnull} IrpDisposition_1 != 0;
    assume IrpDisposition_1 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} IrpDisposition_1 != 0;
    assume IrpDisposition_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:nonnull} IrpDisposition_1 != 0;
    assume IrpDisposition_1 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L57;

  L57:
    call {:si_unique_call 1394} RemoveReference(DeviceObject_44);
    Tmp_694 := status_26;
    goto L1;

  anon35_Then:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    havoc vslice_dummy_var_88;
    call {:si_unique_call 1395} status_26 := ForwardIrp(vslice_dummy_var_88, Irp_47);
    call {:si_unique_call 1396} RemoveReference(DeviceObject_44);
    goto L57;

  anon36_Then:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    havoc vslice_dummy_var_89;
    call {:si_unique_call 1397} status_26 := ForwardIrp(vslice_dummy_var_89, Irp_47);
    call {:si_unique_call 1398} RemoveReference(DeviceObject_44);
    goto L57;

  anon37_Then:
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc vslice_dummy_var_90;
    call {:si_unique_call 1399} RemoveReferenceAndCompleteRequest(DeviceObject_44, Irp_47, vslice_dummy_var_90);
    goto L57;

  anon34_Then:
    call {:si_unique_call 1400} RemoveReference(DeviceObject_44);
    goto L57;

  anon39_Then:
    assume {:partition} WakeSupported == 0;
    assume {:nonnull} irpSp_29 != 0;
    assume irpSp_29 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 1401} RemoveReference(DeviceObject_44);
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc status_26;
    assume {:nonnull} Irp_47 != 0;
    assume Irp_47 > 0;
    havoc vslice_dummy_var_91;
    call {:si_unique_call 1402} RemoveReferenceAndCompleteRequest(DeviceObject_44, Irp_47, vslice_dummy_var_91);
    Tmp_694 := status_26;
    goto L1;

  anon33_Then:
    assume {:nonnull} deviceExtension_14 != 0;
    assume deviceExtension_14 > 0;
    havoc vslice_dummy_var_92;
    call {:si_unique_call 1403} status_26 := ForwardIrp(vslice_dummy_var_92, Irp_47);
    call {:si_unique_call 1404} RemoveReference(DeviceObject_44);
    call {:si_unique_call 1405} RemoveReference(DeviceObject_44);
    Tmp_694 := status_26;
    goto L1;

  anon32_Then:
    goto L28;

  L28:
    Tmp_695 := 0;
    goto L31;

  anon31_Then:
    goto L28;

  anon30_Then:
    goto L27;

  anon28_Then:
    goto L15;
}



procedure {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_2: int, actual_Value: int) returns (Tmp_697: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_2: int, actual_Value: int) returns (Tmp_697: int)
{
  var {:scalar} sdv_402: int;

  anon0:
    Tmp_697 := sdv_402;
    return;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 1406} vslice_dummy_var_183 := __HAVOC_malloc(4);
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Address__DEVICE_CAPABILITIES"} {:fieldname "Address"} Address__DEVICE_CAPABILITIES(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.AdvanceOnly_unnamed_tag_16"} {:fieldname "AdvanceOnly"} AdvanceOnly_unnamed_tag_16(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_40"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_40(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResources_unnamed_tag_40"} {:fieldname "AllocatedResources"} AllocatedResources_unnamed_tag_40(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Argument1_unnamed_tag_42"} {:fieldname "Argument1"} Argument1_unnamed_tag_42(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Argument2_unnamed_tag_42"} {:fieldname "Argument2"} Argument2_unnamed_tag_42(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument3"} Argument3_unnamed_tag_42(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Argument4"} Argument4_unnamed_tag_42(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.AttachedDeviceObject__DEVICE_EXTENSION"} {:fieldname "AttachedDeviceObject"} AttachedDeviceObject__DEVICE_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.AttachedDevice__DEVICE_OBJECT"} {:fieldname "AttachedDevice"} AttachedDevice__DEVICE_OBJECT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BufferSize_unnamed_tag_41"} {:fieldname "BufferSize"} BufferSize_unnamed_tag_41(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Buffer_unnamed_tag_32"} {:fieldname "Buffer"} Buffer_unnamed_tag_32(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer_unnamed_tag_41"} {:fieldname "Buffer"} Buffer_unnamed_tag_41(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ByteOffset_unnamed_tag_12"} {:fieldname "ByteOffset"} ByteOffset_unnamed_tag_12(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ByteOffset_unnamed_tag_21"} {:fieldname "ByteOffset"} ByteOffset_unnamed_tag_21(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_30"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_30(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CapsQueried__DEVICE_EXTENSION"} {:fieldname "CapsQueried"} CapsQueried__DEVICE_EXTENSION(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.ChildPdo__DEVICE_EXTENSION"} {:fieldname "ChildPdo"} ChildPdo__DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ClusterCount_unnamed_tag_16"} {:fieldname "ClusterCount"} ClusterCount_unnamed_tag_16(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.CompleteAllQueued__READ_WRITE_CONTROL"} {:fieldname "CompleteAllQueued"} CompleteAllQueued__READ_WRITE_CONTROL(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.CompletionFilter_unnamed_tag_14"} {:fieldname "CompletionFilter"} CompletionFilter_unnamed_tag_14(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "ConfigDelay"} ConfigDelay__DEVICE_EXTENSION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.ContextAsUlong__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "ContextAsUlong"} ContextAsUlong__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Count__DEVICE_RELATIONS"} {:fieldname "Count"} Count__DEVICE_RELATIONS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CreateMailslot_unnamed_tag_8"} {:fieldname "CreateMailslot"} CreateMailslot_unnamed_tag_8(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.CreatePipe_unnamed_tag_8"} {:fieldname "CreatePipe"} CreatePipe_unnamed_tag_8(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Create_unnamed_tag_8"} {:fieldname "Create"} Create_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentIrp__READ_WRITE_CONTROL"} {:fieldname "CurrentIrp"} CurrentIrp__READ_WRITE_CONTROL(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.CurrentLocation__IRP"} {:fieldname "CurrentLocation"} CurrentLocation__IRP(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentMaskOp"} CurrentMaskOp__DEVICE_EXTENSION(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.CurrentPassThroughSession__DEVICE_EXTENSION"} {:fieldname "CurrentPassThroughSession"} CurrentPassThroughSession__DEVICE_EXTENSION(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "CurrentPassThrough"} CurrentPassThrough__DEVICE_EXTENSION(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.CurrentRequestId__IPC_CONTROL"} {:fieldname "CurrentRequestId"} CurrentRequestId__IPC_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CurrentSession__IPC_CONTROL"} {:fieldname "CurrentSession"} CurrentSession__IPC_CONTROL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.CurrentSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "CurrentSystemState"} CurrentSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.CurrentTransferLength_unnamed_tag_68"} {:fieldname "CurrentTransferLength"} CurrentTransferLength_unnamed_tag_68(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.D1Latency__DEVICE_CAPABILITIES"} {:fieldname "D1Latency"} D1Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.D2Latency__DEVICE_CAPABILITIES"} {:fieldname "D2Latency"} D2Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.D3Latency__DEVICE_CAPABILITIES"} {:fieldname "D3Latency"} D3Latency__DEVICE_CAPABILITIES(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_PARTIAL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_PARTIAL_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DataPath_unnamed_tag_41"} {:fieldname "DataPath"} DataPath_unnamed_tag_41(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data__KEY_VALUE_PARTIAL_INFORMATION"} {:fieldname "Data"} Data__KEY_VALUE_PARTIAL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DeleteHandle_unnamed_tag_16"} {:fieldname "DeleteHandle"} DeleteHandle_unnamed_tag_16(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Deleted__PDO_DEVICE_EXTENSION"} {:fieldname "Deleted"} Deleted__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_8"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_8(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DeviceLock"} DeviceLock__DEVICE_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__DEVICE_EXTENSION"} {:fieldname "DeviceObject"} DeviceObject__DEVICE_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__IO_STACK_LOCATION"} {:fieldname "DeviceObject"} DeviceObject__IO_STACK_LOCATION(x: int) : int
{
  x + 528
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject__READ_WRITE_CONTROL"} {:fieldname "DeviceObject"} DeviceObject__READ_WRITE_CONTROL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeviceObject_unnamed_tag_25"} {:fieldname "DeviceObject"} DeviceObject_unnamed_tag_25(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceTextType_unnamed_tag_35"} {:fieldname "DeviceTextType"} DeviceTextType_unnamed_tag_35(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceType__DEVICE_OBJECT"} {:fieldname "DeviceType"} DeviceType__DEVICE_OBJECT(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_EXTENSION"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_EXTENSION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.DleCount__DEVICE_EXTENSION"} {:fieldname "DleCount"} DleCount__DEVICE_EXTENSION(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.DleMatchingState__DEVICE_EXTENSION"} {:fieldname "DleMatchingState"} DleMatchingState__DEVICE_EXTENSION(x: int) : int
{
  x + 788
}

function {:inline true} {:fieldmap "Mem_T.DleMonitoringEnabled__DEVICE_EXTENSION"} {:fieldname "DleMonitoringEnabled"} DleMonitoringEnabled__DEVICE_EXTENSION(x: int) : int
{
  x + 792
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "DleWaitIrp"} DleWaitIrp__DEVICE_EXTENSION(x: int) : int
{
  x + 804
}

function {:inline true} {:fieldmap "Mem_T.DleWriteShielding__DEVICE_EXTENSION"} {:fieldname "DleWriteShielding"} DleWriteShielding__DEVICE_EXTENSION(x: int) : int
{
  x + 796
}

function {:inline true} {:fieldmap "Mem_T.DoType__DEVICE_EXTENSION"} {:fieldname "DoType"} DoType__DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DoType__PDO_DEVICE_EXTENSION"} {:fieldname "DoType"} DoType__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DockDevice__DEVICE_CAPABILITIES"} {:fieldname "DockDevice"} DockDevice__DEVICE_CAPABILITIES(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.DuplexSupport__PDO_DEVICE_EXTENSION"} {:fieldname "DuplexSupport"} DuplexSupport__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.EaIndex_unnamed_tag_17"} {:fieldname "EaIndex"} EaIndex_unnamed_tag_17(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.EaLength_unnamed_tag_9"} {:fieldname "EaLength"} EaLength_unnamed_tag_9(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.EaListLength_unnamed_tag_17"} {:fieldname "EaListLength"} EaListLength_unnamed_tag_17(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.EaList_unnamed_tag_17"} {:fieldname "EaList"} EaList_unnamed_tag_17(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.EffectiveSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "EffectiveSystemState"} EffectiveSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.EjectSupported__DEVICE_CAPABILITIES"} {:fieldname "EjectSupported"} EjectSupported__DEVICE_CAPABILITIES(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "Event"} Event__MODEM_POWER_BLOCK(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Extension__MASKSTATE"} {:fieldname "Extension"} Extension__MASKSTATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FileAttributes_unnamed_tag_9"} {:fieldname "FileAttributes"} FileAttributes_unnamed_tag_9(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileIndex_unnamed_tag_13"} {:fieldname "FileIndex"} FileIndex_unnamed_tag_13(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_13"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_13(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileInformationClass_unnamed_tag_15"} {:fieldname "FileInformationClass"} FileInformationClass_unnamed_tag_15(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FileName__FILE_OBJECT"} {:fieldname "FileName"} FileName__FILE_OBJECT(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.FileName_unnamed_tag_13"} {:fieldname "FileName"} FileName_unnamed_tag_13(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.FileObject__IO_STACK_LOCATION"} {:fieldname "FileObject"} FileObject__IO_STACK_LOCATION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.FileObject_unnamed_tag_16"} {:fieldname "FileObject"} FileObject_unnamed_tag_16(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FileSystemControl_unnamed_tag_8"} {:fieldname "FileSystemControl"} FileSystemControl_unnamed_tag_8(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_8"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_8(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_STACK_LOCATION"} {:fieldname "Flags"} Flags__IO_STACK_LOCATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__IRP"} {:fieldname "Flags"} Flags__IRP(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flags__WMIGUIDREGINFO"} {:fieldname "Flags"} Flags__WMIGUIDREGINFO(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FsContext2__FILE_OBJECT"} {:fieldname "FsContext2"} FsContext2__FILE_OBJECT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.FsContext__FILE_OBJECT"} {:fieldname "FsContext"} FsContext__FILE_OBJECT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.FsControlCode_unnamed_tag_20"} {:fieldname "FsControlCode"} FsControlCode_unnamed_tag_20(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.FsInformationClass_unnamed_tag_19"} {:fieldname "FsInformationClass"} FsInformationClass_unnamed_tag_19(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "GetList"} GetList__IPC_CONTROL(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Guid__WMIGUIDREGINFO"} {:fieldname "Guid"} Guid__WMIGUIDREGINFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HardwareId__PDO_DEVICE_EXTENSION"} {:fieldname "HardwareId"} HardwareId__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HistoryMask__MASKSTATE"} {:fieldname "HistoryMask"} HistoryMask__MASKSTATE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.IdType_unnamed_tag_34"} {:fieldname "IdType"} IdType_unnamed_tag_34(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IgnoreHibernationPath__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "IgnoreHibernationPath"} IgnoreHibernationPath__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InPath_unnamed_tag_36"} {:fieldname "InPath"} InPath_unnamed_tag_36(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InStartNext__READ_WRITE_CONTROL"} {:fieldname "InStartNext"} InStartNext__READ_WRITE_CONTROL(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "InactivityScale"} InactivityScale__DEVICE_EXTENSION(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_20"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InstanceCount__WMIGUIDREGINFO"} {:fieldname "InstanceCount"} InstanceCount__WMIGUIDREGINFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "InterfaceNameString"} InterfaceNameString__DEVICE_EXTENSION(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.InterfaceSpecificData_unnamed_tag_29"} {:fieldname "InterfaceSpecificData"} InterfaceSpecificData_unnamed_tag_29(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType_unnamed_tag_29"} {:fieldname "InterfaceType"} InterfaceType_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Interface_unnamed_tag_29"} {:fieldname "Interface"} Interface_unnamed_tag_29(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_31"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_31(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.IpcControl__DEVICE_EXTENSION"} {:fieldname "IpcControl"} IpcControl__DEVICE_EXTENSION(x: int) : int
{
  x + 856
}

function {:inline true} {:fieldmap "Mem_T.IpcServerRunning__DEVICE_EXTENSION"} {:fieldname "IpcServerRunning"} IpcServerRunning__DEVICE_EXTENSION(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.Key_unnamed_tag_12"} {:fieldname "Key"} Key_unnamed_tag_12(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Key_unnamed_tag_21"} {:fieldname "Key"} Key_unnamed_tag_21(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.LastDevicePowerState__DEVICE_EXTENSION"} {:fieldname "LastDevicePowerState"} LastDevicePowerState__DEVICE_EXTENSION(x: int) : int
{
  x + 604
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_21"} {:fieldname "Length"} Length_unnamed_tag_21(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_23"} {:fieldname "Length"} Length_unnamed_tag_23(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_32"} {:fieldname "Length"} Length_unnamed_tag_32(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListHead"} ListHead__READ_WRITE_CONTROL(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.LocaleId_unnamed_tag_35"} {:fieldname "LocaleId"} LocaleId_unnamed_tag_35(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.LockControl_unnamed_tag_8"} {:fieldname "LockControl"} LockControl_unnamed_tag_8(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.LockSupported__DEVICE_CAPABILITIES"} {:fieldname "LockSupported"} LockSupported__DEVICE_CAPABILITIES(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Lock_unnamed_tag_33"} {:fieldname "Lock"} Lock_unnamed_tag_33(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDevice__DEVICE_EXTENSION"} {:fieldname "LowerDevice"} LowerDevice__DEVICE_EXTENSION(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.LowerDevice_unnamed_tag_68"} {:fieldname "LowerDevice"} LowerDevice_unnamed_tag_68(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowerDevice_unnamed_tag_69"} {:fieldname "LowerDevice"} LowerDevice_unnamed_tag_69(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "MaskOps"} MaskOps__DEVICE_EXTENSION(x: int) : int
{
  x + 92
}

function {:inline true} {:fieldmap "Mem_T.MaskStates__DEVICE_EXTENSION"} {:fieldname "MaskStates"} MaskStates__DEVICE_EXTENSION(x: int) : int
{
  x + 108
}

function {:inline true} {:fieldmap "Mem_T.Mask__MASKSTATE"} {:fieldname "Mask"} Mask__MASKSTATE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinSystemPowerState__DEVICE_EXTENSION"} {:fieldname "MinSystemPowerState"} MinSystemPowerState__DEVICE_EXTENSION(x: int) : int
{
  x + 552
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ModemDevCaps__DEVICE_EXTENSION"} {:fieldname "ModemDevCaps"} ModemDevCaps__DEVICE_EXTENSION(x: int) : int
{
  x + 180
}

function {:inline true} {:fieldmap "Mem_T.ModemSettings__DEVICE_EXTENSION"} {:fieldname "ModemSettings"} ModemSettings__DEVICE_EXTENSION(x: int) : int
{
  x + 260
}

function {:inline true} {:fieldmap "Mem_T.MountVolume_unnamed_tag_8"} {:fieldname "MountVolume"} MountVolume_unnamed_tag_8(x: int) : int
{
  x + 288
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NotifyDirectory_unnamed_tag_8"} {:fieldname "NotifyDirectory"} NotifyDirectory_unnamed_tag_8(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.NumberOfStrings__IO_ERROR_LOG_PACKET"} {:fieldname "NumberOfStrings"} NumberOfStrings__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Objects__DEVICE_RELATIONS"} {:fieldname "Objects"} Objects__DEVICE_RELATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Offset_unnamed_tag_32"} {:fieldname "Offset"} Offset_unnamed_tag_32(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.OpenCount__DEVICE_EXTENSION"} {:fieldname "OpenCount"} OpenCount__DEVICE_EXTENSION(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_10"} {:fieldname "Options"} Options_unnamed_tag_10(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_11"} {:fieldname "Options"} Options_unnamed_tag_11(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Options_unnamed_tag_9"} {:fieldname "Options"} Options_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.OtherState__MASKSTATE"} {:fieldname "OtherState"} OtherState__MASKSTATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Others_unnamed_tag_8"} {:fieldname "Others"} Others_unnamed_tag_8(x: int) : int
{
  x + 496
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_20"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_20(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__SERIAL_COMMPROP"} {:fieldname "PacketLength"} PacketLength__SERIAL_COMMPROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Parameters_unnamed_tag_10"} {:fieldname "Parameters"} Parameters_unnamed_tag_10(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Parameters_unnamed_tag_11"} {:fieldname "Parameters"} Parameters_unnamed_tag_11(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ParentFdo__PDO_DEVICE_EXTENSION"} {:fieldname "ParentFdo"} ParentFdo__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ParentPdo__PDO_DEVICE_EXTENSION"} {:fieldname "ParentPdo"} ParentPdo__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PassThroughQueue"} PassThroughQueue__DEVICE_EXTENSION(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.PassThrough__DEVICE_EXTENSION"} {:fieldname "PassThrough"} PassThrough__DEVICE_EXTENSION(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.PassedDownStackLocation__MASKSTATE"} {:fieldname "PassedDownStackLocation"} PassedDownStackLocation__MASKSTATE(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.PassedDownWait__MASKSTATE"} {:fieldname "PassedDownWait"} PassedDownWait__MASKSTATE(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Pdo__DEVICE_EXTENSION"} {:fieldname "Pdo"} Pdo__DEVICE_EXTENSION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "PowerDelay"} PowerDelay__DEVICE_EXTENSION(x: int) : int
{
  x + 616
}

function {:inline true} {:fieldmap "Mem_T.PowerSequence_unnamed_tag_38"} {:fieldname "PowerSequence"} PowerSequence_unnamed_tag_38(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PowerSequence_unnamed_tag_8"} {:fieldname "PowerSequence"} PowerSequence_unnamed_tag_8(x: int) : int
{
  x + 416
}

function {:inline true} {:fieldmap "Mem_T.PowerState_unnamed_tag_37"} {:fieldname "PowerState"} PowerState_unnamed_tag_37(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PowerSystemState__DEVICE_EXTENSION"} {:fieldname "PowerSystemState"} PowerSystemState__DEVICE_EXTENSION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PreQueryStartedStatus__DEVICE_EXTENSION"} {:fieldname "PreQueryStartedStatus"} PreQueryStartedStatus__DEVICE_EXTENSION(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.ProcAddress__DEVICE_EXTENSION"} {:fieldname "ProcAddress"} ProcAddress__DEVICE_EXTENSION(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.ProvChar__SERIAL_COMMPROP"} {:fieldname "ProvChar"} ProvChar__SERIAL_COMMPROP(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.ProvSubType__SERIAL_COMMPROP"} {:fieldname "ProvSubType"} ProvSubType__SERIAL_COMMPROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.ProviderId_unnamed_tag_41"} {:fieldname "ProviderId"} ProviderId_unnamed_tag_41(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PseudoTransition__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "PseudoTransition"} PseudoTransition__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PutList"} PutList__IPC_CONTROL(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceRelations_unnamed_tag_8"} {:fieldname "QueryDeviceRelations"} QueryDeviceRelations_unnamed_tag_8(x: int) : int
{
  x + 328
}

function {:inline true} {:fieldmap "Mem_T.QueryDeviceText_unnamed_tag_8"} {:fieldname "QueryDeviceText"} QueryDeviceText_unnamed_tag_8(x: int) : int
{
  x + 384
}

function {:inline true} {:fieldmap "Mem_T.QueryDirectory_unnamed_tag_8"} {:fieldname "QueryDirectory"} QueryDirectory_unnamed_tag_8(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.QueryEa_unnamed_tag_8"} {:fieldname "QueryEa"} QueryEa_unnamed_tag_8(x: int) : int
{
  x + 176
}

function {:inline true} {:fieldmap "Mem_T.QueryFile_unnamed_tag_8"} {:fieldname "QueryFile"} QueryFile_unnamed_tag_8(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.QueryId_unnamed_tag_8"} {:fieldname "QueryId"} QueryId_unnamed_tag_8(x: int) : int
{
  x + 380
}

function {:inline true} {:fieldmap "Mem_T.QueryInterface_unnamed_tag_8"} {:fieldname "QueryInterface"} QueryInterface_unnamed_tag_8(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.QueryQuota_unnamed_tag_8"} {:fieldname "QueryQuota"} QueryQuota_unnamed_tag_8(x: int) : int
{
  x + 308
}

function {:inline true} {:fieldmap "Mem_T.QueryRoutine__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "QueryRoutine"} QueryRoutine__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.QuerySecurity_unnamed_tag_8"} {:fieldname "QuerySecurity"} QuerySecurity_unnamed_tag_8(x: int) : int
{
  x + 272
}

function {:inline true} {:fieldmap "Mem_T.QueryVolume_unnamed_tag_8"} {:fieldname "QueryVolume"} QueryVolume_unnamed_tag_8(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._READ_WRITE_CONTROL"} {:fieldname "ReadIrpControl"} ReadIrpControl__DEVICE_EXTENSION(x: int) : int
{
  x + 968
}

function {:inline true} {:fieldmap "Mem_T.ReadWriteConfig_unnamed_tag_8"} {:fieldname "ReadWriteConfig"} ReadWriteConfig_unnamed_tag_8(x: int) : int
{
  x + 360
}

function {:inline true} {:fieldmap "Mem_T.Read__READ_WRITE_CONTROL"} {:fieldname "Read"} Read__READ_WRITE_CONTROL(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Read_unnamed_tag_8"} {:fieldname "Read"} Read_unnamed_tag_8(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.RealSystemBuffer_unnamed_tag_69"} {:fieldname "RealSystemBuffer"} RealSystemBuffer_unnamed_tag_69(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ReferenceCount__DEVICE_EXTENSION"} {:fieldname "ReferenceCount"} ReferenceCount__DEVICE_EXTENSION(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "RemoveEvent"} RemoveEvent__DEVICE_EXTENSION(x: int) : int
{
  x + 396
}

function {:inline true} {:fieldmap "Mem_T.Removed__DEVICE_EXTENSION"} {:fieldname "Removed"} Removed__DEVICE_EXTENSION(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Removing__DEVICE_EXTENSION"} {:fieldname "Removing"} Removing__DEVICE_EXTENSION(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.ReplaceIfExists_unnamed_tag_16"} {:fieldname "ReplaceIfExists"} ReplaceIfExists_unnamed_tag_16(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.RequestId__MODEM_MESSAGE"} {:fieldname "RequestId"} RequestId__MODEM_MESSAGE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved1__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "Reserved1"} Reserved1__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Reserved2__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "Reserved2"} Reserved2__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_10"} {:fieldname "Reserved"} Reserved_unnamed_tag_10(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_11"} {:fieldname "Reserved"} Reserved_unnamed_tag_11(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_36"} {:fieldname "Reserved"} Reserved_unnamed_tag_36(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Scsi_unnamed_tag_8"} {:fieldname "Scsi"} Scsi_unnamed_tag_8(x: int) : int
{
  x + 304
}

function {:inline true} {:fieldmap "Mem_T.SecurityContext_unnamed_tag_10"} {:fieldname "SecurityContext"} SecurityContext_unnamed_tag_10(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityContext_unnamed_tag_11"} {:fieldname "SecurityContext"} SecurityContext_unnamed_tag_11(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityContext_unnamed_tag_9"} {:fieldname "SecurityContext"} SecurityContext_unnamed_tag_9(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityDescriptor_unnamed_tag_24"} {:fieldname "SecurityDescriptor"} SecurityDescriptor_unnamed_tag_24(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SecurityInformation_unnamed_tag_23"} {:fieldname "SecurityInformation"} SecurityInformation_unnamed_tag_23(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SecurityInformation_unnamed_tag_24"} {:fieldname "SecurityInformation"} SecurityInformation_unnamed_tag_24(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SentDownSetMasks__MASKSTATE"} {:fieldname "SentDownSetMasks"} SentDownSetMasks__MASKSTATE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SessionId__MODEM_MESSAGE"} {:fieldname "SessionId"} SessionId__MODEM_MESSAGE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetEa_unnamed_tag_8"} {:fieldname "SetEa"} SetEa_unnamed_tag_8(x: int) : int
{
  x + 192
}

function {:inline true} {:fieldmap "Mem_T.SetFile_unnamed_tag_8"} {:fieldname "SetFile"} SetFile_unnamed_tag_8(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.SetLock_unnamed_tag_8"} {:fieldname "SetLock"} SetLock_unnamed_tag_8(x: int) : int
{
  x + 376
}

function {:inline true} {:fieldmap "Mem_T.SetMaskCount__MASKSTATE"} {:fieldname "SetMaskCount"} SetMaskCount__MASKSTATE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SetQuota_unnamed_tag_8"} {:fieldname "SetQuota"} SetQuota_unnamed_tag_8(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.SetSecurity_unnamed_tag_8"} {:fieldname "SetSecurity"} SetSecurity_unnamed_tag_8(x: int) : int
{
  x + 280
}

function {:inline true} {:fieldmap "Mem_T.SetVolume_unnamed_tag_8"} {:fieldname "SetVolume"} SetVolume_unnamed_tag_8(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ShareAccess_unnamed_tag_10"} {:fieldname "ShareAccess"} ShareAccess_unnamed_tag_10(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ShareAccess_unnamed_tag_11"} {:fieldname "ShareAccess"} ShareAccess_unnamed_tag_11(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ShareAccess_unnamed_tag_9"} {:fieldname "ShareAccess"} ShareAccess_unnamed_tag_9(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_unnamed_tag_39"} {:fieldname "ShutdownType"} ShutdownType_unnamed_tag_39(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "ShuttledWait"} ShuttledWait__MASKSTATE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.SidListLength_unnamed_tag_27"} {:fieldname "SidListLength"} SidListLength_unnamed_tag_27(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.SidList_unnamed_tag_27"} {:fieldname "SidList"} SidList_unnamed_tag_27(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Size__DEVICE_CAPABILITIES"} {:fieldname "Size"} Size__DEVICE_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.Size_unnamed_tag_29"} {:fieldname "Size"} Size_unnamed_tag_29(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Srb_unnamed_tag_26"} {:fieldname "Srb"} Srb_unnamed_tag_26(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StackSize__DEVICE_OBJECT"} {:fieldname "StackSize"} StackSize__DEVICE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_8"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_8(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.StartSid_unnamed_tag_27"} {:fieldname "StartSid"} StartSid_unnamed_tag_27(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Started__DEVICE_EXTENSION"} {:fieldname "Started"} Started__DEVICE_EXTENSION(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.Starter__READ_WRITE_CONTROL"} {:fieldname "Starter"} Starter__READ_WRITE_CONTROL(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Status__MODEM_POWER_BLOCK"} {:fieldname "Status"} Status__MODEM_POWER_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StringOffset__IO_ERROR_LOG_PACKET"} {:fieldname "StringOffset"} StringOffset__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SupriseRemoved__DEVICE_EXTENSION"} {:fieldname "SupriseRemoved"} SupriseRemoved__DEVICE_EXTENSION(x: int) : int
{
  x + 1032
}

function {:inline true} {:fieldmap "Mem_T.SurpriseRemovalOK__DEVICE_CAPABILITIES"} {:fieldname "SurpriseRemovalOK"} SurpriseRemovalOK__DEVICE_CAPABILITIES(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_68"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_68(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemContext_unnamed_tag_39"} {:fieldname "SystemContext"} SystemContext_unnamed_tag_39(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerStateContext_unnamed_tag_39"} {:fieldname "SystemPowerStateContext"} SystemPowerStateContext_unnamed_tag_39(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerStateMap__DEVICE_EXTENSION"} {:fieldname "SystemPowerStateMap"} SystemPowerStateMap__DEVICE_EXTENSION(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_EXTENSION"} {:fieldname "SystemWake"} SystemWake__DEVICE_EXTENSION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TargetSystemState__SYSTEM_POWER_STATE_CONTEXT"} {:fieldname "TargetSystemState"} TargetSystemState__SYSTEM_POWER_STATE_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.TotalTransfered_unnamed_tag_68"} {:fieldname "TotalTransfered"} TotalTransfered_unnamed_tag_68(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_20"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_20(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.PVOID"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_22(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_36"} {:fieldname "Type"} Type_unnamed_tag_36(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UINumber__DEVICE_CAPABILITIES"} {:fieldname "UINumber"} UINumber__DEVICE_CAPABILITIES(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.UnEnumerated__PDO_DEVICE_EXTENSION"} {:fieldname "UnEnumerated"} UnEnumerated__PDO_DEVICE_EXTENSION(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UniqueID__DEVICE_CAPABILITIES"} {:fieldname "UniqueID"} UniqueID__DEVICE_CAPABILITIES(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.UsageNotification_unnamed_tag_8"} {:fieldname "UsageNotification"} UsageNotification_unnamed_tag_8(x: int) : int
{
  x + 392
}

function {:inline true} {:fieldmap "Mem_T.UserBuffer__IRP"} {:fieldname "UserBuffer"} UserBuffer__IRP(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.UserEvent__IRP"} {:fieldname "UserEvent"} UserEvent__IRP(x: int) : int
{
  x + 84
}

function {:inline true} {:fieldmap "Mem_T.UserIosb__IRP"} {:fieldname "UserIosb"} UserIosb__IRP(x: int) : int
{
  x + 80
}

function {:inline true} {:fieldmap "Mem_T.VerifyVolume_unnamed_tag_8"} {:fieldname "VerifyVolume"} VerifyVolume_unnamed_tag_8(x: int) : int
{
  x + 296
}

function {:inline true} {:fieldmap "Mem_T.Version__DEVICE_CAPABILITIES"} {:fieldname "Version"} Version__DEVICE_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Version_unnamed_tag_29"} {:fieldname "Version"} Version_unnamed_tag_29(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Vpb_unnamed_tag_25"} {:fieldname "Vpb"} Vpb_unnamed_tag_25(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WMI_unnamed_tag_8"} {:fieldname "WMI"} WMI_unnamed_tag_8(x: int) : int
{
  x + 480
}

function {:inline true} {:fieldmap "Mem_T.WaitWake_unnamed_tag_8"} {:fieldname "WaitWake"} WaitWake_unnamed_tag_8(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T.WakeOnRingEnabled__DEVICE_EXTENSION"} {:fieldname "WakeOnRingEnabled"} WakeOnRingEnabled__DEVICE_EXTENSION(x: int) : int
{
  x + 800
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "WakeUpIrp"} WakeUpIrp__DEVICE_EXTENSION(x: int) : int
{
  x + 556
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "WaveStopDpc"} WaveStopDpc__DEVICE_EXTENSION(x: int) : int
{
  x + 808
}

function {:inline true} {:fieldmap "Mem_T.WaveStopState__DEVICE_EXTENSION"} {:fieldname "WaveStopState"} WaveStopState__DEVICE_EXTENSION(x: int) : int
{
  x + 852
}

function {:inline true} {:fieldmap "Mem_T.WhichSpace_unnamed_tag_32"} {:fieldname "WhichSpace"} WhichSpace_unnamed_tag_32(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._READ_WRITE_CONTROL"} {:fieldname "WriteIrpControl"} WriteIrpControl__DEVICE_EXTENSION(x: int) : int
{
  x + 904
}

function {:inline true} {:fieldmap "Mem_T.Write__READ_WRITE_CONTROL"} {:fieldname "Write"} Write__READ_WRITE_CONTROL(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.Write_unnamed_tag_8"} {:fieldname "Write"} Write_unnamed_tag_8(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.abVariablePortion__MODEMDEVCAPS"} {:fieldname "abVariablePortion"} abVariablePortion__MODEMDEVCAPS(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.dwActualSize__MODEMDEVCAPS"} {:fieldname "dwActualSize"} dwActualSize__MODEMDEVCAPS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwActualSize__MODEMSETTINGS"} {:fieldname "dwActualSize"} dwActualSize__MODEMSETTINGS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwCallSetupFailTimer__MODEMDEVCAPS"} {:fieldname "dwCallSetupFailTimer"} dwCallSetupFailTimer__MODEMDEVCAPS(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.dwCallSetupFailTimer__MODEMSETTINGS"} {:fieldname "dwCallSetupFailTimer"} dwCallSetupFailTimer__MODEMSETTINGS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.dwCallSetupFailTimer__MODEM_REG_DEFAULT"} {:fieldname "dwCallSetupFailTimer"} dwCallSetupFailTimer__MODEM_REG_DEFAULT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwCallSetupFailTimer__MODEM_REG_PROP"} {:fieldname "dwCallSetupFailTimer"} dwCallSetupFailTimer__MODEM_REG_PROP(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.dwDevSpecificOffset__MODEMDEVCAPS"} {:fieldname "dwDevSpecificOffset"} dwDevSpecificOffset__MODEMDEVCAPS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.dwDevSpecificOffset__MODEMSETTINGS"} {:fieldname "dwDevSpecificOffset"} dwDevSpecificOffset__MODEMSETTINGS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.dwDevSpecificSize__MODEMDEVCAPS"} {:fieldname "dwDevSpecificSize"} dwDevSpecificSize__MODEMDEVCAPS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.dwDevSpecificSize__MODEMSETTINGS"} {:fieldname "dwDevSpecificSize"} dwDevSpecificSize__MODEMSETTINGS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.dwDialOptions__MODEMDEVCAPS"} {:fieldname "dwDialOptions"} dwDialOptions__MODEMDEVCAPS(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.dwDialOptions__MODEM_REG_PROP"} {:fieldname "dwDialOptions"} dwDialOptions__MODEM_REG_PROP(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwInactivityTimeout__MODEMDEVCAPS"} {:fieldname "dwInactivityTimeout"} dwInactivityTimeout__MODEMDEVCAPS(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.dwInactivityTimeout__MODEMSETTINGS"} {:fieldname "dwInactivityTimeout"} dwInactivityTimeout__MODEMSETTINGS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.dwInactivityTimeout__MODEM_REG_DEFAULT"} {:fieldname "dwInactivityTimeout"} dwInactivityTimeout__MODEM_REG_DEFAULT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.dwInactivityTimeout__MODEM_REG_PROP"} {:fieldname "dwInactivityTimeout"} dwInactivityTimeout__MODEM_REG_PROP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.dwMaxDCERate__MODEMDEVCAPS"} {:fieldname "dwMaxDCERate"} dwMaxDCERate__MODEMDEVCAPS(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.dwMaxDCERate__MODEM_REG_PROP"} {:fieldname "dwMaxDCERate"} dwMaxDCERate__MODEM_REG_PROP(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.dwMaxDTERate__MODEMDEVCAPS"} {:fieldname "dwMaxDTERate"} dwMaxDTERate__MODEMDEVCAPS(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.dwMaxDTERate__MODEM_REG_PROP"} {:fieldname "dwMaxDTERate"} dwMaxDTERate__MODEM_REG_PROP(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.dwModemManufacturerOffset__MODEMDEVCAPS"} {:fieldname "dwModemManufacturerOffset"} dwModemManufacturerOffset__MODEMDEVCAPS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.dwModemManufacturerSize__MODEMDEVCAPS"} {:fieldname "dwModemManufacturerSize"} dwModemManufacturerSize__MODEMDEVCAPS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.dwModemModelOffset__MODEMDEVCAPS"} {:fieldname "dwModemModelOffset"} dwModemModelOffset__MODEMDEVCAPS(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.dwModemModelSize__MODEMDEVCAPS"} {:fieldname "dwModemModelSize"} dwModemModelSize__MODEMDEVCAPS(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.dwModemOptions__MODEMDEVCAPS"} {:fieldname "dwModemOptions"} dwModemOptions__MODEMDEVCAPS(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.dwModemOptions__MODEM_REG_PROP"} {:fieldname "dwModemOptions"} dwModemOptions__MODEM_REG_PROP(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.dwModemProviderVersion__MODEMDEVCAPS"} {:fieldname "dwModemProviderVersion"} dwModemProviderVersion__MODEMDEVCAPS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.dwModemVersionOffset__MODEMDEVCAPS"} {:fieldname "dwModemVersionOffset"} dwModemVersionOffset__MODEMDEVCAPS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.dwModemVersionSize__MODEMDEVCAPS"} {:fieldname "dwModemVersionSize"} dwModemVersionSize__MODEMDEVCAPS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.dwNegotiatedDCERate__MODEMSETTINGS"} {:fieldname "dwNegotiatedDCERate"} dwNegotiatedDCERate__MODEMSETTINGS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.dwNegotiatedModemOptions__MODEMSETTINGS"} {:fieldname "dwNegotiatedModemOptions"} dwNegotiatedModemOptions__MODEMSETTINGS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.dwPreferredModemOptions__MODEMSETTINGS"} {:fieldname "dwPreferredModemOptions"} dwPreferredModemOptions__MODEMSETTINGS(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.dwPreferredModemOptions__MODEM_REG_DEFAULT"} {:fieldname "dwPreferredModemOptions"} dwPreferredModemOptions__MODEM_REG_DEFAULT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.dwProviderOffset__COMMCONFIG"} {:fieldname "dwProviderOffset"} dwProviderOffset__COMMCONFIG(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.dwProviderSize__COMMCONFIG"} {:fieldname "dwProviderSize"} dwProviderSize__COMMCONFIG(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.dwProviderSubType__COMMCONFIG"} {:fieldname "dwProviderSubType"} dwProviderSubType__COMMCONFIG(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.dwRequiredSize__MODEMDEVCAPS"} {:fieldname "dwRequiredSize"} dwRequiredSize__MODEMDEVCAPS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.dwRequiredSize__MODEMSETTINGS"} {:fieldname "dwRequiredSize"} dwRequiredSize__MODEMSETTINGS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.dwSize__COMMCONFIG"} {:fieldname "dwSize"} dwSize__COMMCONFIG(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerMode__MODEMDEVCAPS"} {:fieldname "dwSpeakerMode"} dwSpeakerMode__MODEMDEVCAPS(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerMode__MODEMSETTINGS"} {:fieldname "dwSpeakerMode"} dwSpeakerMode__MODEMSETTINGS(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerMode__MODEM_REG_DEFAULT"} {:fieldname "dwSpeakerMode"} dwSpeakerMode__MODEM_REG_DEFAULT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerMode__MODEM_REG_PROP"} {:fieldname "dwSpeakerMode"} dwSpeakerMode__MODEM_REG_PROP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerVolume__MODEMDEVCAPS"} {:fieldname "dwSpeakerVolume"} dwSpeakerVolume__MODEMDEVCAPS(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerVolume__MODEMSETTINGS"} {:fieldname "dwSpeakerVolume"} dwSpeakerVolume__MODEMSETTINGS(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerVolume__MODEM_REG_DEFAULT"} {:fieldname "dwSpeakerVolume"} dwSpeakerVolume__MODEM_REG_DEFAULT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.dwSpeakerVolume__MODEM_REG_PROP"} {:fieldname "dwSpeakerVolume"} dwSpeakerVolume__MODEM_REG_PROP(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.wReserved__COMMCONFIG"} {:fieldname "wReserved"} wReserved__COMMCONFIG(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.wVersion__COMMCONFIG"} {:fieldname "wVersion"} wVersion__COMMCONFIG(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.wcProviderData__COMMCONFIG"} {:fieldname "wcProviderData"} wcProviderData__COMMCONFIG(x: int) : int
{
  x + 136
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "xOurWaitIrp"} xOurWaitIrp__DEVICE_EXTENSION(x: int) : int
{
  x + 104
}

const {:string "BreakOnEntry"} unique strConst__li2bpl6: int;

const {:string "ConfigDelay"} unique strConst__li2bpl29: int;

const {:string "DebugFlags"} unique strConst__li2bpl8: int;

const {:string "DebugLevel"} unique strConst__li2bpl7: int;

const {:string "Default"} unique strConst__li2bpl26: int;

const {:string "DuplexSupport"} unique strConst__li2bpl15: int;

const {:string "Enumerated"} unique strConst__li2bpl12: int;

const {:string "InactivityScale"} unique strConst__li2bpl27: int;

const {:string "MODEM: CheckStateAndAddReference: Bad DevObj\n"} unique strConst__li2bpl31: int;

const {:string "MODEM: CheckStateAndAddReference: Got IRP when not open!\n"} unique strConst__li2bpl30: int;

const {:string "MODEM: ModemPnp: Bad DevObj\n"} unique strConst__li2bpl10: int;

const {:string "MODEM: shuttled irp has bad major function\n"} unique strConst__li2bpl4: int;

const {:string "MODEMWAVE\\"} unique strConst__li2bpl17: int;

const {:string "MODEMWAVE\\0"} unique strConst__li2bpl18: int;

const {:string "Manufacturer"} unique strConst__li2bpl1: int;

const {:string "Model"} unique strConst__li2bpl2: int;

const {:string "Modem Audio Device"} unique strConst__li2bpl19: int;

const {:string "PermanentGuid"} unique strConst__li2bpl16: int;

const {:string "PowerDelay"} unique strConst__li2bpl28: int;

const {:string "Properties"} unique strConst__li2bpl25: int;

const {:string "Started"} unique strConst__li2bpl13: int;

const {:string "Version"} unique strConst__li2bpl3: int;

const {:string "WakeOnRing"} unique strConst__li2bpl5: int;

const {:string "Warning: Driver may have queued the IRP without marking it as pending inside the locked state."} unique strConst__li2bpl22: int;

const {:string "WaveDriver"} unique strConst__li2bpl11: int;

const {:string "WaveHardwareID"} unique strConst__li2bpl14: int;

const {:string "\\Client"} unique strConst__li2bpl24: int;

const {:string "\\DosDevices\\"} unique strConst__li2bpl9: int;

const {:string "\\Tsp"} unique strConst__li2bpl23: int;

const {:string "\\Wave"} unique strConst__li2bpl20: int;

const {:string "callee"} unique strConst__li2bpl0: int;

const {:string "halt"} unique strConst__li2bpl21: int;

const {:allocated} li2bplFunctionConstant1117: int;

axiom li2bplFunctionConstant1117 == 1117;

const {:allocated} li2bplFunctionConstant1118: int;

axiom li2bplFunctionConstant1118 == 1118;

const {:allocated} li2bplFunctionConstant1119: int;

axiom li2bplFunctionConstant1119 == 1119;

const {:allocated} li2bplFunctionConstant1120: int;

axiom li2bplFunctionConstant1120 == 1120;

const {:allocated} li2bplFunctionConstant1122: int;

axiom li2bplFunctionConstant1122 == 1122;

const {:allocated} li2bplFunctionConstant1123: int;

axiom li2bplFunctionConstant1123 == 1123;

const {:allocated} li2bplFunctionConstant1126: int;

axiom li2bplFunctionConstant1126 == 1126;

const {:allocated} li2bplFunctionConstant1300: int;

axiom li2bplFunctionConstant1300 == 1300;

const {:allocated} li2bplFunctionConstant1301: int;

axiom li2bplFunctionConstant1301 == 1301;

const {:allocated} li2bplFunctionConstant1302: int;

axiom li2bplFunctionConstant1302 == 1302;

const {:allocated} li2bplFunctionConstant1305: int;

axiom li2bplFunctionConstant1305 == 1305;

const {:allocated} li2bplFunctionConstant1306: int;

axiom li2bplFunctionConstant1306 == 1306;

const {:allocated} li2bplFunctionConstant1477: int;

axiom li2bplFunctionConstant1477 == 1477;

const {:allocated} li2bplFunctionConstant1478: int;

axiom li2bplFunctionConstant1478 == 1478;

const {:allocated} li2bplFunctionConstant1480: int;

axiom li2bplFunctionConstant1480 == 1480;

const {:allocated} li2bplFunctionConstant1650: int;

axiom li2bplFunctionConstant1650 == 1650;

const {:allocated} li2bplFunctionConstant1651: int;

axiom li2bplFunctionConstant1651 == 1651;

const {:allocated} li2bplFunctionConstant1652: int;

axiom li2bplFunctionConstant1652 == 1652;

const {:allocated} li2bplFunctionConstant1653: int;

axiom li2bplFunctionConstant1653 == 1653;

const {:allocated} li2bplFunctionConstant1655: int;

axiom li2bplFunctionConstant1655 == 1655;

const {:allocated} li2bplFunctionConstant1824: int;

axiom li2bplFunctionConstant1824 == 1824;

const {:allocated} li2bplFunctionConstant1825: int;

axiom li2bplFunctionConstant1825 == 1825;

const {:allocated} li2bplFunctionConstant1826: int;

axiom li2bplFunctionConstant1826 == 1826;

const {:allocated} li2bplFunctionConstant1827: int;

axiom li2bplFunctionConstant1827 == 1827;

const {:allocated} li2bplFunctionConstant1828: int;

axiom li2bplFunctionConstant1828 == 1828;

const {:allocated} li2bplFunctionConstant1837: int;

axiom li2bplFunctionConstant1837 == 1837;

const {:allocated} li2bplFunctionConstant2008: int;

axiom li2bplFunctionConstant2008 == 2008;

const {:allocated} li2bplFunctionConstant2397: int;

axiom li2bplFunctionConstant2397 == 2397;

const {:allocated} li2bplFunctionConstant2399: int;

axiom li2bplFunctionConstant2399 == 2399;

const {:allocated} li2bplFunctionConstant2402: int;

axiom li2bplFunctionConstant2402 == 2402;

const {:allocated} li2bplFunctionConstant413: int;

axiom li2bplFunctionConstant413 == 413;

const {:allocated} li2bplFunctionConstant414: int;

axiom li2bplFunctionConstant414 == 414;

const {:allocated} li2bplFunctionConstant415: int;

axiom li2bplFunctionConstant415 == 415;

const {:allocated} li2bplFunctionConstant416: int;

axiom li2bplFunctionConstant416 == 416;

const {:allocated} li2bplFunctionConstant417: int;

axiom li2bplFunctionConstant417 == 417;

const {:allocated} li2bplFunctionConstant587: int;

axiom li2bplFunctionConstant587 == 587;

const {:allocated} li2bplFunctionConstant932: int;

axiom li2bplFunctionConstant932 == 932;

const {:allocated} li2bplFunctionConstant937: int;

axiom li2bplFunctionConstant937 == 937;

const {:allocated} li2bplFunctionConstant939: int;

axiom li2bplFunctionConstant939 == 939;

const {:allocated} li2bplFunctionConstant940: int;

axiom li2bplFunctionConstant940 == 940;

const {:allocated} li2bplFunctionConstant943: int;

axiom li2bplFunctionConstant943 == 943;

implementation {:origName "UniChangeShuttledToPassDown"} UniChangeShuttledToPassDown#0(actual_ChangingState: int, actual_OrigIrql: int)
{
  var {:pointer} nextSp_1: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} Tmp_103: int;
  var {:scalar} cancelIrql_1: int;
  var {:pointer} Tmp_104: int;
  var {:pointer} irpSp_5: int;
  var {:pointer} sdv_53: int;
  var {:pointer} sdv_54: int;
  var {:pointer} Tmp_105: int;
  var {:pointer} Tmp_106: int;
  var {:scalar} s_p_e_c_i_a_l_8: int;
  var {:scalar} recallIrql: int;
  var {:pointer} sdv_58: int;
  var {:pointer} savedIrp: int;
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_110: int;
  var {:pointer} Tmp_112: int;
  var {:scalar} s_p_e_c_i_a_l_10: int;
  var {:pointer} Tmp_113: int;
  var {:pointer} s_p_e_c_i_a_l_11: int;
  var {:pointer} ChangingState: int;
  var {:scalar} OrigIrql: int;
  var vslice_dummy_var_184: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;

  anon0:
    call {:si_unique_call 1407} vslice_dummy_var_184 := __HAVOC_malloc(4);
    ChangingState := actual_ChangingState;
    OrigIrql := actual_OrigIrql;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 1408} Tmp_110 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    call {:si_unique_call 1409} IoAcquireCancelSpinLock(Tmp_110);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    havoc cancelIrql_1;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_102;
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc savedIrp;
    call {:si_unique_call 1410} IoReleaseCancelSpinLock(cancelIrql_1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_113;
    assume {:nonnull} Tmp_113 != 0;
    assume Tmp_113 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume false;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1411} Tmp_110 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    call {:si_unique_call 1412} sdv_KeAcquireSpinLock(0, Tmp_110);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    havoc recallIrql;
    OrigIrql := recallIrql;
    return;

  anon15_Then:
    goto L79;

  L79:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_93;
    call {:si_unique_call 1413} UniRundownShuttledWait(vslice_dummy_var_93, ShuttledWait__MASKSTATE(ChangingState), 1, savedIrp, OrigIrql, -1073741536, 0);
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_105;
    assume {:nonnull} Tmp_105 != 0;
    assume Tmp_105 > 0;
    s_p_e_c_i_a_l_8 := 2;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_94;
    call {:si_unique_call 1414} sdv_53 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_94);
    assume {:nonnull} sdv_53 != 0;
    assume sdv_53 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_53)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    call {:si_unique_call 1415} IoReleaseCancelSpinLock(cancelIrql_1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_103;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_95;
    call {:si_unique_call 1416} irpSp_5 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_95);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_96;
    call {:si_unique_call 1417} nextSp_1 := sdv_IoGetNextIrpStackLocation(vslice_dummy_var_96);
    s_p_e_c_i_a_l_10 := 1;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_97;
    call {:si_unique_call 1418} sdv_58 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_97);
    assume {:nonnull} sdv_58 != 0;
    assume sdv_58 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_58)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_98;
    call {:si_unique_call 1419} sdv_54 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_98);
    assume {:nonnull} sdv_54 != 0;
    assume sdv_54 > 0;
    s_p_e_c_i_a_l_11 := Argument3_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_54)));
    Tmp_112 := s_p_e_c_i_a_l_11;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_99;
    call {:si_unique_call 1420} MakeIrpCurrentPassedDown(ChangingState, vslice_dummy_var_99);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_100;
    call {:si_unique_call 1421} sdv_IoSetCompletionRoutine(vslice_dummy_var_100, li2bplFunctionConstant1478, ChangingState, 1, 1, 1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_106;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1422} sdv_KeReleaseSpinLock(0, OrigIrql);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_104;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1423} SLIC_sdv_IoCallDriver_entry(0);
    goto L97;

  L97:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} Tmp_104 != 0;
    assume Tmp_104 > 0;
    havoc vslice_dummy_var_101;
    havoc vslice_dummy_var_102;
    call {:si_unique_call 1424} vslice_dummy_var_186 := sdv_IoCallDriver(vslice_dummy_var_101, vslice_dummy_var_102);
    goto L1;

  anon14_Then:
    goto L97;

  anon13_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_103;
    call {:si_unique_call 1425} vslice_dummy_var_185 := UniMakeIrpShuttledWait(ChangingState, vslice_dummy_var_103, OrigIrql, 0, 0);
    goto L1;

  anon11_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1426} sdv_KeReleaseSpinLock(0, OrigIrql);
    goto L1;
}



procedure {:origName "UniChangeShuttledToPassDown"} UniChangeShuttledToPassDown#0(actual_ChangingState: int, actual_OrigIrql: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniChangeShuttledToPassDown"} UniChangeShuttledToPassDown#1(actual_ChangingState: int, actual_OrigIrql: int)
{
  var {:pointer} nextSp_1: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:pointer} Tmp_102: int;
  var {:pointer} Tmp_103: int;
  var {:scalar} cancelIrql_1: int;
  var {:pointer} Tmp_104: int;
  var {:pointer} irpSp_5: int;
  var {:pointer} sdv_53: int;
  var {:pointer} sdv_54: int;
  var {:pointer} Tmp_105: int;
  var {:pointer} Tmp_106: int;
  var {:scalar} s_p_e_c_i_a_l_8: int;
  var {:scalar} recallIrql: int;
  var {:pointer} sdv_58: int;
  var {:pointer} savedIrp: int;
  var {:pointer} s_p_e_c_i_a_l_9: int;
  var {:pointer} Tmp_110: int;
  var {:pointer} Tmp_112: int;
  var {:scalar} s_p_e_c_i_a_l_10: int;
  var {:pointer} Tmp_113: int;
  var {:pointer} s_p_e_c_i_a_l_11: int;
  var {:pointer} ChangingState: int;
  var {:scalar} OrigIrql: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;

  anon0:
    call {:si_unique_call 1427} vslice_dummy_var_187 := __HAVOC_malloc(4);
    ChangingState := actual_ChangingState;
    OrigIrql := actual_OrigIrql;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 1428} Tmp_110 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    call {:si_unique_call 1429} IoAcquireCancelSpinLock(Tmp_110);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    havoc cancelIrql_1;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_102;
    assume {:nonnull} Tmp_102 != 0;
    assume Tmp_102 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc savedIrp;
    call {:si_unique_call 1430} IoReleaseCancelSpinLock(cancelIrql_1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_113;
    assume {:nonnull} Tmp_113 != 0;
    assume Tmp_113 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_104;
    call {:si_unique_call 1431} UniChangeShuttledToPassDown#0(vslice_dummy_var_104, OrigIrql);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1432} Tmp_110 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    call {:si_unique_call 1433} sdv_KeAcquireSpinLock(0, Tmp_110);
    assume {:nonnull} Tmp_110 != 0;
    assume Tmp_110 > 0;
    havoc recallIrql;
    OrigIrql := recallIrql;
    goto L79;

  L79:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_105;
    call {:si_unique_call 1434} UniRundownShuttledWait(vslice_dummy_var_105, ShuttledWait__MASKSTATE(ChangingState), 1, savedIrp, OrigIrql, -1073741536, 0);
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L79;

  anon12_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_105;
    assume {:nonnull} Tmp_105 != 0;
    assume Tmp_105 > 0;
    s_p_e_c_i_a_l_8 := 2;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_106;
    call {:si_unique_call 1435} sdv_53 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_106);
    assume {:nonnull} sdv_53 != 0;
    assume sdv_53 > 0;
    s_p_e_c_i_a_l_7 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_53)));
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    call {:si_unique_call 1436} IoReleaseCancelSpinLock(cancelIrql_1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_103;
    assume {:nonnull} Tmp_103 != 0;
    assume Tmp_103 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_107;
    call {:si_unique_call 1437} irpSp_5 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_107);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_108;
    call {:si_unique_call 1438} nextSp_1 := sdv_IoGetNextIrpStackLocation(vslice_dummy_var_108);
    s_p_e_c_i_a_l_10 := 1;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_109;
    call {:si_unique_call 1439} sdv_58 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_109);
    assume {:nonnull} sdv_58 != 0;
    assume sdv_58 > 0;
    s_p_e_c_i_a_l_9 := Argument4_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_58)));
    assume {:nonnull} s_p_e_c_i_a_l_9 != 0;
    assume s_p_e_c_i_a_l_9 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_110;
    call {:si_unique_call 1440} sdv_54 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_110);
    assume {:nonnull} sdv_54 != 0;
    assume sdv_54 > 0;
    s_p_e_c_i_a_l_11 := Argument3_unnamed_tag_42(Others_unnamed_tag_8(Parameters__IO_STACK_LOCATION(sdv_54)));
    Tmp_112 := s_p_e_c_i_a_l_11;
    assume {:nonnull} Tmp_112 != 0;
    assume Tmp_112 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_111;
    call {:si_unique_call 1441} MakeIrpCurrentPassedDown(ChangingState, vslice_dummy_var_111);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} irpSp_5 != 0;
    assume irpSp_5 > 0;
    assume {:nonnull} nextSp_1 != 0;
    assume nextSp_1 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_112;
    call {:si_unique_call 1442} sdv_IoSetCompletionRoutine(vslice_dummy_var_112, li2bplFunctionConstant1478, ChangingState, 1, 1, 1);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_106;
    assume {:nonnull} Tmp_106 != 0;
    assume Tmp_106 > 0;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1443} sdv_KeReleaseSpinLock(0, OrigIrql);
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc Tmp_104;
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1444} SLIC_sdv_IoCallDriver_entry(0);
    goto L97;

  L97:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    assume {:nonnull} Tmp_104 != 0;
    assume Tmp_104 > 0;
    havoc vslice_dummy_var_113;
    havoc vslice_dummy_var_114;
    call {:si_unique_call 1445} vslice_dummy_var_189 := sdv_IoCallDriver(vslice_dummy_var_113, vslice_dummy_var_114);
    goto L1;

  anon14_Then:
    goto L97;

  anon13_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    havoc vslice_dummy_var_115;
    call {:si_unique_call 1446} vslice_dummy_var_188 := UniMakeIrpShuttledWait(ChangingState, vslice_dummy_var_115, OrigIrql, 0, 0);
    goto L1;

  anon11_Then:
    assume {:nonnull} ChangingState != 0;
    assume ChangingState > 0;
    call {:si_unique_call 1447} sdv_KeReleaseSpinLock(0, OrigIrql);
    goto L1;
}



procedure {:origName "UniChangeShuttledToPassDown"} UniChangeShuttledToPassDown#1(actual_ChangingState: int, actual_OrigIrql: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupNoPassPart3"} UniSetupNoPassPart3#0(actual_DeviceObject_42: int, actual_Irp_44: int, actual_Context_7: int) returns (Tmp_655: int)
{
  var {:pointer} Tmp_656: int;
  var {:pointer} Tmp_657: int;
  var {:pointer} Tmp_658: int;
  var {:pointer} Tmp_659: int;
  var {:pointer} Tmp_660: int;
  var {:pointer} s_p_e_c_i_a_l_28: int;
  var {:pointer} Tmp_661: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} origIrql_15: int;
  var {:pointer} Tmp_662: int;
  var {:pointer} sdv_383: int;
  var {:pointer} s_p_e_c_i_a_l_29: int;
  var {:pointer} Tmp_663: int;
  var {:scalar} s_p_e_c_i_a_l_30: int;
  var {:pointer} Tmp_664: int;
  var {:pointer} extension_7: int;
  var {:pointer} Irp_44: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_116: int;

  anon0:
    call {:si_unique_call 1448} newIrp_1 := __HAVOC_malloc(4);
    Irp_44 := actual_Irp_44;
    Context_7 := actual_Context_7;
    call {:si_unique_call 1449} Tmp_657 := __HAVOC_malloc(72);
    call {:si_unique_call 1450} Tmp_658 := __HAVOC_malloc(72);
    call {:si_unique_call 1451} Tmp_661 := __HAVOC_malloc(72);
    call {:si_unique_call 1452} Tmp_662 := __HAVOC_malloc(72);
    call {:si_unique_call 1453} Tmp_663 := __HAVOC_malloc(72);
    call {:si_unique_call 1454} Tmp_664 := __HAVOC_malloc(72);
    call {:si_unique_call 1455} vslice_dummy_var_190 := sdv_IoGetCurrentIrpStackLocation(Irp_44);
    extension_7 := Context_7;
    call {:si_unique_call 1456} sdv_383 := sdv_IoGetCurrentIrpStackLocation(Irp_44);
    assume {:nonnull} sdv_383 != 0;
    assume sdv_383 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 1457} Tmp_660 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_660 != 0;
    assume Tmp_660 > 0;
    call {:si_unique_call 1458} sdv_KeAcquireSpinLock(0, Tmp_660);
    assume {:nonnull} Tmp_660 != 0;
    assume Tmp_660 > 0;
    havoc origIrql_15;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_662;
    assume {:nonnull} Tmp_662 != 0;
    assume Tmp_662 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L45;

  L45:
    call {:si_unique_call 1459} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  L48:
    Tmp_655 := -1073741802;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_658;
    assume {:nonnull} Tmp_658 != 0;
    assume Tmp_658 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_657;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_664;
    Tmp_656 := Tmp_664;
    call {:si_unique_call 1460} UniChangeShuttledToPassDown#1(Tmp_656, origIrql_15);
    goto L48;

  anon20_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_663;
    assume {:nonnull} Tmp_663 != 0;
    assume Tmp_663 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_661;
    Tmp_659 := Tmp_661 + 1 * 36;
    call {:si_unique_call 1461} UniChangeShuttledToPassDown#1(Tmp_659, origIrql_15);
    goto L48;

  anon21_Then:
    call {:si_unique_call 1462} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  anon19_Then:
    goto L45;

  anon17_Then:
    call {:si_unique_call 1463} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  anon15_Then:
    s_p_e_c_i_a_l_29 := Irp_44;
    s_p_e_c_i_a_l_30 := 2818056;
    call {:si_unique_call 1464} s_p_e_c_i_a_l_28 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_29);
    assume {:nonnull} s_p_e_c_i_a_l_28 != 0;
    assume s_p_e_c_i_a_l_28 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_29 != 0;
    assume s_p_e_c_i_a_l_29 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_28 != 0;
    assume s_p_e_c_i_a_l_28 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc vslice_dummy_var_116;
    call {:si_unique_call 1465} UniGetNextIrp(vslice_dummy_var_116, DeviceLock__DEVICE_EXTENSION(extension_7), CurrentPassThrough__DEVICE_EXTENSION(extension_7), PassThroughQueue__DEVICE_EXTENSION(extension_7), newIrp_1, 1);
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume false;
    return;

  anon16_Then:
    goto L31;

  L31:
    Tmp_655 := -1073741802;
    goto L1;
}



procedure {:origName "UniSetupNoPassPart3"} UniSetupNoPassPart3#0(actual_DeviceObject_42: int, actual_Irp_44: int, actual_Context_7: int) returns (Tmp_655: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_655 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupNoPassPart3"} UniSetupNoPassPart3#1(actual_DeviceObject_42: int, actual_Irp_44: int, actual_Context_7: int) returns (Tmp_655: int)
{
  var {:pointer} Tmp_656: int;
  var {:pointer} Tmp_657: int;
  var {:pointer} Tmp_658: int;
  var {:pointer} Tmp_659: int;
  var {:pointer} Tmp_660: int;
  var {:pointer} s_p_e_c_i_a_l_28: int;
  var {:pointer} Tmp_661: int;
  var {:pointer} newIrp_1: int;
  var {:scalar} origIrql_15: int;
  var {:pointer} Tmp_662: int;
  var {:pointer} sdv_383: int;
  var {:pointer} s_p_e_c_i_a_l_29: int;
  var {:pointer} Tmp_663: int;
  var {:scalar} s_p_e_c_i_a_l_30: int;
  var {:pointer} Tmp_664: int;
  var {:pointer} extension_7: int;
  var {:pointer} Irp_44: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_117: int;

  anon0:
    call {:si_unique_call 1466} newIrp_1 := __HAVOC_malloc(4);
    Irp_44 := actual_Irp_44;
    Context_7 := actual_Context_7;
    call {:si_unique_call 1467} Tmp_657 := __HAVOC_malloc(72);
    call {:si_unique_call 1468} Tmp_658 := __HAVOC_malloc(72);
    call {:si_unique_call 1469} Tmp_661 := __HAVOC_malloc(72);
    call {:si_unique_call 1470} Tmp_662 := __HAVOC_malloc(72);
    call {:si_unique_call 1471} Tmp_663 := __HAVOC_malloc(72);
    call {:si_unique_call 1472} Tmp_664 := __HAVOC_malloc(72);
    call {:si_unique_call 1473} vslice_dummy_var_191 := sdv_IoGetCurrentIrpStackLocation(Irp_44);
    extension_7 := Context_7;
    call {:si_unique_call 1474} sdv_383 := sdv_IoGetCurrentIrpStackLocation(Irp_44);
    assume {:nonnull} sdv_383 != 0;
    assume sdv_383 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    call {:si_unique_call 1475} Tmp_660 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_660 != 0;
    assume Tmp_660 > 0;
    call {:si_unique_call 1476} sdv_KeAcquireSpinLock(0, Tmp_660);
    assume {:nonnull} Tmp_660 != 0;
    assume Tmp_660 > 0;
    havoc origIrql_15;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_662;
    assume {:nonnull} Tmp_662 != 0;
    assume Tmp_662 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L45;

  L45:
    call {:si_unique_call 1477} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  L48:
    Tmp_655 := -1073741802;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_658;
    assume {:nonnull} Tmp_658 != 0;
    assume Tmp_658 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_657;
    assume {:nonnull} Tmp_657 != 0;
    assume Tmp_657 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_664;
    Tmp_656 := Tmp_664;
    call {:si_unique_call 1478} UniChangeShuttledToPassDown#1(Tmp_656, origIrql_15);
    goto L48;

  anon20_Then:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_663;
    assume {:nonnull} Tmp_663 != 0;
    assume Tmp_663 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc Tmp_661;
    Tmp_659 := Tmp_661 + 1 * 36;
    call {:si_unique_call 1479} UniChangeShuttledToPassDown#1(Tmp_659, origIrql_15);
    goto L48;

  anon21_Then:
    call {:si_unique_call 1480} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  anon19_Then:
    goto L45;

  anon17_Then:
    call {:si_unique_call 1481} sdv_KeReleaseSpinLock(0, origIrql_15);
    goto L48;

  anon15_Then:
    s_p_e_c_i_a_l_29 := Irp_44;
    s_p_e_c_i_a_l_30 := 2818056;
    call {:si_unique_call 1482} s_p_e_c_i_a_l_28 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_29);
    assume {:nonnull} s_p_e_c_i_a_l_28 != 0;
    assume s_p_e_c_i_a_l_28 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_29 != 0;
    assume s_p_e_c_i_a_l_29 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_28 != 0;
    assume s_p_e_c_i_a_l_28 > 0;
    assume {:nonnull} extension_7 != 0;
    assume extension_7 > 0;
    havoc vslice_dummy_var_117;
    call {:si_unique_call 1483} UniGetNextIrp(vslice_dummy_var_117, DeviceLock__DEVICE_EXTENSION(extension_7), CurrentPassThrough__DEVICE_EXTENSION(extension_7), PassThroughQueue__DEVICE_EXTENSION(extension_7), newIrp_1, 1);
    assume {:nonnull} newIrp_1 != 0;
    assume newIrp_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 1484} vslice_dummy_var_192 := UniPassThroughStarter#0(extension_7);
    goto L31;

  L31:
    Tmp_655 := -1073741802;
    goto L1;

  anon16_Then:
    goto L31;
}



procedure {:origName "UniSetupNoPassPart3"} UniSetupNoPassPart3#1(actual_DeviceObject_42: int, actual_Irp_44: int, actual_Context_7: int) returns (Tmp_655: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_655 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniPassThroughStarter"} UniPassThroughStarter#0(actual_Extension_8: int) returns (Tmp_665: int)
{
  var {:pointer} newIrp_2: int;
  var {:pointer} Tmp_667: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} irp_3: int;
  var {:scalar} passThroughType: int;
  var {:pointer} Extension_8: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;

  anon0:
    call {:si_unique_call 1485} newIrp_2 := __HAVOC_malloc(4);
    Extension_8 := actual_Extension_8;
    goto L6;

  L6:
    call {:si_unique_call 1486} Tmp_667, Tmp_668, irp_3, passThroughType := UniPassThroughStarter#0_loop_L6(newIrp_2, Tmp_667, Tmp_668, irp_3, passThroughType, Extension_8);
    goto L6_last;

  L6_last:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc irp_3;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    havoc Tmp_668;
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    havoc passThroughType;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} passThroughType == 3;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    passThroughType := 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    havoc Tmp_667;
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    goto L9;

  L9:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} passThroughType != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} passThroughType == 1;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_118;
    call {:si_unique_call 1487} vslice_dummy_var_193 := UniSetupPass#0(vslice_dummy_var_118, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  L23:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_119;
    call {:si_unique_call 1488} UniGetNextIrp(vslice_dummy_var_119, DeviceLock__DEVICE_EXTENSION(Extension_8), CurrentPassThrough__DEVICE_EXTENSION(Extension_8), PassThroughQueue__DEVICE_EXTENSION(Extension_8), newIrp_2, 1);
    assume {:nonnull} newIrp_2 != 0;
    assume newIrp_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_665 := 259;
    goto L1;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} passThroughType != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} passThroughType == 2;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_120;
    call {:si_unique_call 1489} vslice_dummy_var_194 := UniSetupSniffPart0(vslice_dummy_var_120, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  anon23_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon20_Then:
    assume {:partition} passThroughType != 2;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon17_Then:
    assume {:partition} passThroughType == 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_121;
    call {:si_unique_call 1490} vslice_dummy_var_195 := UniSetupNoPassPart1(vslice_dummy_var_121, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  anon18_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon24_Then:
    assume {:partition} passThroughType != 3;
    goto L9;
}



procedure {:origName "UniPassThroughStarter"} UniPassThroughStarter#0(actual_Extension_8: int) returns (Tmp_665: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_665 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniPassThroughStarter"} UniPassThroughStarter#1(actual_Extension_8: int) returns (Tmp_665: int)
{
  var {:pointer} newIrp_2: int;
  var {:pointer} Tmp_667: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} irp_3: int;
  var {:scalar} passThroughType: int;
  var {:pointer} Extension_8: int;
  var vslice_dummy_var_196: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;

  anon0:
    call {:si_unique_call 1491} newIrp_2 := __HAVOC_malloc(4);
    Extension_8 := actual_Extension_8;
    goto L6;

  L6:
    call {:si_unique_call 1492} Tmp_667, Tmp_668, irp_3, passThroughType := UniPassThroughStarter#1_loop_L6(newIrp_2, Tmp_667, Tmp_668, irp_3, passThroughType, Extension_8);
    goto L6_last;

  L6_last:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc irp_3;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    havoc Tmp_668;
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    havoc passThroughType;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} passThroughType == 3;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    passThroughType := 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    havoc Tmp_667;
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    goto L9;

  L9:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} passThroughType != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} passThroughType == 1;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_122;
    call {:si_unique_call 1493} vslice_dummy_var_196 := UniSetupPass#1(vslice_dummy_var_122, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  L1:
    return;

  anon21_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  L23:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_123;
    call {:si_unique_call 1494} UniGetNextIrp(vslice_dummy_var_123, DeviceLock__DEVICE_EXTENSION(Extension_8), CurrentPassThrough__DEVICE_EXTENSION(Extension_8), PassThroughQueue__DEVICE_EXTENSION(Extension_8), newIrp_2, 1);
    assume {:nonnull} newIrp_2 != 0;
    assume newIrp_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_665 := 259;
    goto L1;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} passThroughType != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} passThroughType == 2;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_124;
    call {:si_unique_call 1495} vslice_dummy_var_197 := UniSetupSniffPart0(vslice_dummy_var_124, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  anon23_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon20_Then:
    assume {:partition} passThroughType != 2;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon17_Then:
    assume {:partition} passThroughType == 0;
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Extension_8 != 0;
    assume Extension_8 > 0;
    havoc vslice_dummy_var_125;
    call {:si_unique_call 1496} vslice_dummy_var_198 := UniSetupNoPassPart1(vslice_dummy_var_125, irp_3, Extension_8);
    Tmp_665 := 259;
    goto L1;

  anon18_Then:
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    goto L23;

  anon24_Then:
    assume {:partition} passThroughType != 3;
    goto L9;
}



procedure {:origName "UniPassThroughStarter"} UniPassThroughStarter#1(actual_Extension_8: int) returns (Tmp_665: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_665 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupPass"} UniSetupPass#0(actual_DeviceObject_35: int, actual_Irp_36: int, actual_Context_3: int) returns (Tmp_617: int)
{
  var {:pointer} nextSp_4: int;
  var {:pointer} Tmp_618: int;
  var {:pointer} Tmp_619: int;
  var {:pointer} irpSp_21: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} s_p_e_c_i_a_l_18: int;
  var {:pointer} s_p_e_c_i_a_l_19: int;
  var {:pointer} s_p_e_c_i_a_l_20: int;
  var {:scalar} origIrql_12: int;
  var {:pointer} Tmp_621: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} extension_4: int;
  var {:pointer} Irp_36: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;

  anon0:
    Irp_36 := actual_Irp_36;
    Context_3 := actual_Context_3;
    call {:si_unique_call 1497} Tmp_619 := __HAVOC_malloc(72);
    call {:si_unique_call 1498} Tmp_621 := __HAVOC_malloc(72);
    call {:si_unique_call 1499} irpSp_21 := sdv_IoGetCurrentIrpStackLocation(Irp_36);
    call {:si_unique_call 1500} nextSp_4 := sdv_IoGetNextIrpStackLocation(Irp_36);
    extension_4 := Context_3;
    call {:si_unique_call 1501} Tmp_620 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_620 != 0;
    assume Tmp_620 > 0;
    call {:si_unique_call 1502} sdv_KeAcquireSpinLock(0, Tmp_620);
    assume {:nonnull} Tmp_620 != 0;
    assume Tmp_620 > 0;
    havoc origIrql_12;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    s_p_e_c_i_a_l_21 := Irp_36;
    call {:si_unique_call 1503} s_p_e_c_i_a_l_19 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_21);
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} irpSp_21 != 0;
    assume irpSp_21 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    havoc Tmp_618;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc Tmp_621;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc Tmp_619;
    assume {:nonnull} Tmp_618 != 0;
    assume Tmp_618 > 0;
    assume {:nonnull} Tmp_619 != 0;
    assume Tmp_619 > 0;
    assume {:nonnull} Tmp_621 != 0;
    assume Tmp_621 > 0;
    call {:si_unique_call 1504} sdv_IoSetCompletionRoutine(Irp_36, li2bplFunctionConstant940, extension_4, 1, 1, 1);
    call {:si_unique_call 1505} sdv_KeReleaseSpinLock(0, origIrql_12);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_36 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1506} SLIC_sdv_IoCallDriver_entry(0);
    goto L69;

  L69:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc vslice_dummy_var_126;
    call {:si_unique_call 1507} vslice_dummy_var_199 := sdv_IoCallDriver(vslice_dummy_var_126, Irp_36);
    goto L48;

  L48:
    Tmp_617 := -1073741802;
    return;

  anon6_Then:
    assume !(Irp_36 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon5_Then:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    call {:si_unique_call 1508} sdv_KeReleaseSpinLock(0, origIrql_12);
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    s_p_e_c_i_a_l_20 := Irp_36;
    call {:si_unique_call 1509} s_p_e_c_i_a_l_18 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_20);
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_20 != 0;
    assume s_p_e_c_i_a_l_20 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_20 != 0;
    assume s_p_e_c_i_a_l_20 > 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc vslice_dummy_var_127;
    call {:si_unique_call 1510} vslice_dummy_var_200 := UniSetupNoPassPart3#0(vslice_dummy_var_127, Irp_36, extension_4);
    goto L48;
}



procedure {:origName "UniSetupPass"} UniSetupPass#0(actual_DeviceObject_35: int, actual_Irp_36: int, actual_Context_3: int) returns (Tmp_617: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_617 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "UniSetupPass"} UniSetupPass#1(actual_DeviceObject_35: int, actual_Irp_36: int, actual_Context_3: int) returns (Tmp_617: int)
{
  var {:pointer} nextSp_4: int;
  var {:pointer} Tmp_618: int;
  var {:pointer} Tmp_619: int;
  var {:pointer} irpSp_21: int;
  var {:pointer} Tmp_620: int;
  var {:pointer} s_p_e_c_i_a_l_18: int;
  var {:pointer} s_p_e_c_i_a_l_19: int;
  var {:pointer} s_p_e_c_i_a_l_20: int;
  var {:scalar} origIrql_12: int;
  var {:pointer} Tmp_621: int;
  var {:pointer} s_p_e_c_i_a_l_21: int;
  var {:pointer} extension_4: int;
  var {:pointer} Irp_36: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;

  anon0:
    Irp_36 := actual_Irp_36;
    Context_3 := actual_Context_3;
    call {:si_unique_call 1511} Tmp_619 := __HAVOC_malloc(72);
    call {:si_unique_call 1512} Tmp_621 := __HAVOC_malloc(72);
    call {:si_unique_call 1513} irpSp_21 := sdv_IoGetCurrentIrpStackLocation(Irp_36);
    call {:si_unique_call 1514} nextSp_4 := sdv_IoGetNextIrpStackLocation(Irp_36);
    extension_4 := Context_3;
    call {:si_unique_call 1515} Tmp_620 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_620 != 0;
    assume Tmp_620 > 0;
    call {:si_unique_call 1516} sdv_KeAcquireSpinLock(0, Tmp_620);
    assume {:nonnull} Tmp_620 != 0;
    assume Tmp_620 > 0;
    havoc origIrql_12;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    s_p_e_c_i_a_l_21 := Irp_36;
    call {:si_unique_call 1517} s_p_e_c_i_a_l_19 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_21);
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_19 != 0;
    assume s_p_e_c_i_a_l_19 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_21 != 0;
    assume s_p_e_c_i_a_l_21 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} irpSp_21 != 0;
    assume irpSp_21 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} nextSp_4 != 0;
    assume nextSp_4 > 0;
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    havoc Tmp_618;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc Tmp_621;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc Tmp_619;
    assume {:nonnull} Tmp_618 != 0;
    assume Tmp_618 > 0;
    assume {:nonnull} Tmp_619 != 0;
    assume Tmp_619 > 0;
    assume {:nonnull} Tmp_621 != 0;
    assume Tmp_621 > 0;
    call {:si_unique_call 1518} sdv_IoSetCompletionRoutine(Irp_36, li2bplFunctionConstant940, extension_4, 1, 1, 1);
    call {:si_unique_call 1519} sdv_KeReleaseSpinLock(0, origIrql_12);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_36 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1520} SLIC_sdv_IoCallDriver_entry(0);
    goto L69;

  L69:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc vslice_dummy_var_128;
    call {:si_unique_call 1521} vslice_dummy_var_201 := sdv_IoCallDriver(vslice_dummy_var_128, Irp_36);
    goto L48;

  L48:
    Tmp_617 := -1073741802;
    return;

  anon6_Then:
    assume !(Irp_36 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L69;

  anon5_Then:
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    call {:si_unique_call 1522} sdv_KeReleaseSpinLock(0, origIrql_12);
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    assume {:nonnull} Irp_36 != 0;
    assume Irp_36 > 0;
    s_p_e_c_i_a_l_20 := Irp_36;
    call {:si_unique_call 1523} s_p_e_c_i_a_l_18 := sdv_IoGetCurrentIrpStackLocation(s_p_e_c_i_a_l_20);
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_20 != 0;
    assume s_p_e_c_i_a_l_20 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_18 != 0;
    assume s_p_e_c_i_a_l_18 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_20 != 0;
    assume s_p_e_c_i_a_l_20 > 0;
    assume {:nonnull} extension_4 != 0;
    assume extension_4 > 0;
    havoc vslice_dummy_var_129;
    call {:si_unique_call 1524} vslice_dummy_var_202 := UniSetupNoPassPart3#1(vslice_dummy_var_129, Irp_36, extension_4);
    goto L48;
}



procedure {:origName "UniSetupPass"} UniSetupPass#1(actual_DeviceObject_35: int, actual_Irp_36: int, actual_Context_3: int) returns (Tmp_617: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} Tmp_617 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "HandleIpc"} HandleIpc#0(actual_DeviceExtension: int)
{
  var {:pointer} Tmp_16: int;
  var {:pointer} Tmp_17: int;
  var {:pointer} PutIrp: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} Tmp_19: int;
  var {:scalar} Tmp_20: int;
  var {:scalar} Sink: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} sdv_5: int;
  var {:pointer} GetIrp: int;
  var {:pointer} Tmp_23: int;
  var {:scalar} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:pointer} sdv_6: int;
  var {:scalar} Tmp_26: int;
  var {:pointer} Tmp_27: int;
  var {:scalar} origIrql_2: int;
  var {:pointer} sdv_7: int;
  var {:scalar} Tmp_28: int;
  var {:pointer} sdv_10: int;
  var {:scalar} BytesToCopy: int;
  var {:pointer} sdv_12: int;
  var {:scalar} CancelIrql_2: int;
  var {:scalar} Tmp_29: int;
  var {:pointer} Tmp_30: int;
  var {:scalar} Source: int;
  var {:pointer} DeviceExtension: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 1525} vslice_dummy_var_203 := __HAVOC_malloc(4);
    DeviceExtension := actual_DeviceExtension;
    call {:si_unique_call 1526} Tmp_16 := __HAVOC_malloc(48);
    call {:si_unique_call 1527} Tmp_17 := __HAVOC_malloc(48);
    call {:si_unique_call 1528} Tmp_22 := __HAVOC_malloc(48);
    call {:si_unique_call 1529} Tmp_25 := __HAVOC_malloc(48);
    call {:si_unique_call 1530} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1531} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    Source := 0;
    Sink := 1;
    goto L12;

  L12:
    call {:si_unique_call 1532} Tmp_16, PutIrp, Tmp_18, Tmp_19, Tmp_20, Sink, Tmp_22, sdv_5, GetIrp, Tmp_23, Tmp_24, Tmp_25, sdv_6, Tmp_26, Tmp_27, origIrql_2, sdv_7, sdv_10, BytesToCopy, sdv_12, CancelIrql_2, Tmp_29, Source, vslice_dummy_var_204, vslice_dummy_var_205 := HandleIpc#0_loop_L12(Tmp_16, PutIrp, Tmp_18, Tmp_19, Tmp_20, Sink, Tmp_22, sdv_5, GetIrp, Tmp_23, Tmp_24, Tmp_25, sdv_6, Tmp_26, Tmp_27, origIrql_2, sdv_7, sdv_10, BytesToCopy, sdv_12, CancelIrql_2, Tmp_29, Source, DeviceExtension, vslice_dummy_var_204, vslice_dummy_var_205);
    goto L12_last;

  L12_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 2 > Source;
    call {:si_unique_call 1533} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1534} IoAcquireCancelSpinLock(Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc CancelIrql_2;
    Tmp_24 := Sink;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_22;
    assume {:nonnull} Tmp_22 != 0;
    assume Tmp_22 > 0;
    Tmp_23 := GetList__IPC_CONTROL(Tmp_22 + Tmp_24 * 24);
    call {:si_unique_call 1535} GetIrp := GetUsableIrp(Tmp_23);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} GetIrp != 0;
    Tmp_26 := Source;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_16;
    assume {:nonnull} Tmp_16 != 0;
    assume Tmp_16 > 0;
    Tmp_18 := PutList__IPC_CONTROL(Tmp_16 + Tmp_26 * 24);
    call {:si_unique_call 1536} PutIrp := GetUsableIrp(Tmp_18);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} PutIrp != 0;
    call {:si_unique_call 1537} vslice_dummy_var_204 := sdv_IoSetCancelRoutine(GetIrp, 0);
    call {:si_unique_call 1538} vslice_dummy_var_205 := sdv_IoSetCancelRoutine(PutIrp, 0);
    call {:si_unique_call 1539} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 1540} sdv_KeReleaseSpinLock(0, origIrql_2);
    call {:si_unique_call 1541} sdv_10 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    call {:si_unique_call 1542} sdv_5 := sdv_IoGetCurrentIrpStackLocation(GetIrp);
    assume {:nonnull} sdv_10 != 0;
    assume sdv_10 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1543} sdv_7 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    assume {:nonnull} sdv_7 != 0;
    assume sdv_7 > 0;
    havoc Tmp_29;
    goto L64;

  L64:
    BytesToCopy := Tmp_29;
    call {:si_unique_call 1544} sdv_RtlCopyMemory(0, 0, BytesToCopy);
    assume {:nonnull} GetIrp != 0;
    assume GetIrp > 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc vslice_dummy_var_130;
    call {:si_unique_call 1545} RemoveReferenceAndCompleteRequest(vslice_dummy_var_130, GetIrp, 0);
    call {:si_unique_call 1546} sdv_6 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    assume {:nonnull} sdv_6 != 0;
    assume sdv_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1547} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1548} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    Tmp_28 := Source;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_17;
    assume {:nonnull} Tmp_17 != 0;
    assume Tmp_17 > 0;
    Tmp_30 := GetList__IPC_CONTROL(Tmp_17 + Tmp_28 * 24);
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    call {:si_unique_call 1549} vslice_dummy_var_207 := sdv_InsertTailList(Tmp_30, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(PutIrp))));
    call {:si_unique_call 1550} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1551} IoAcquireCancelSpinLock(Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc CancelIrql_2;
    call {:si_unique_call 1552} vslice_dummy_var_206 := sdv_IoSetCancelRoutine(PutIrp, li2bplFunctionConstant587);
    call {:si_unique_call 1553} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 1554} sdv_KeReleaseSpinLock(0, origIrql_2);
    assume false;
    return;

  anon15_Then:
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc vslice_dummy_var_131;
    call {:si_unique_call 1555} RemoveReferenceAndCompleteRequest(vslice_dummy_var_131, PutIrp, 0);
    goto L100;

  L100:
    call {:si_unique_call 1556} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1557} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    goto L103;

  L103:
    Source := Source + 1;
    Sink := Sink - 1;
    goto L103_dummy;

  L103_dummy:
    assume false;
    return;

  anon14_Then:
    call {:si_unique_call 1558} sdv_12 := sdv_IoGetCurrentIrpStackLocation(GetIrp);
    assume {:nonnull} sdv_12 != 0;
    assume sdv_12 > 0;
    havoc Tmp_29;
    goto L64;

  anon13_Then:
    assume {:partition} PutIrp == 0;
    Tmp_20 := Sink;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_25;
    assume {:nonnull} Tmp_25 != 0;
    assume Tmp_25 > 0;
    Tmp_19 := GetList__IPC_CONTROL(Tmp_25 + Tmp_20 * 24);
    assume {:nonnull} GetIrp != 0;
    assume GetIrp > 0;
    call {:si_unique_call 1559} InsertHeadList(Tmp_19, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(GetIrp))));
    call {:si_unique_call 1560} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L103;

  anon12_Then:
    assume {:partition} GetIrp == 0;
    call {:si_unique_call 1561} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L103;

  anon11_Then:
    assume {:partition} Source >= 2;
    call {:si_unique_call 1562} sdv_KeReleaseSpinLock(0, origIrql_2);
    return;
}



procedure {:origName "HandleIpc"} HandleIpc#0(actual_DeviceExtension: int);
  modifies alloc, queued, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queued == old(queued);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:origName "HandleIpc"} HandleIpc#1(actual_DeviceExtension: int)
{
  var {:pointer} Tmp_16: int;
  var {:pointer} Tmp_17: int;
  var {:pointer} PutIrp: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} Tmp_19: int;
  var {:scalar} Tmp_20: int;
  var {:scalar} Sink: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} sdv_5: int;
  var {:pointer} GetIrp: int;
  var {:pointer} Tmp_23: int;
  var {:scalar} Tmp_24: int;
  var {:pointer} Tmp_25: int;
  var {:pointer} sdv_6: int;
  var {:scalar} Tmp_26: int;
  var {:pointer} Tmp_27: int;
  var {:scalar} origIrql_2: int;
  var {:pointer} sdv_7: int;
  var {:scalar} Tmp_28: int;
  var {:pointer} sdv_10: int;
  var {:scalar} BytesToCopy: int;
  var {:pointer} sdv_12: int;
  var {:scalar} CancelIrql_2: int;
  var {:scalar} Tmp_29: int;
  var {:pointer} Tmp_30: int;
  var {:scalar} Source: int;
  var {:pointer} DeviceExtension: int;
  var vslice_dummy_var_208: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;

  anon0:
    call {:si_unique_call 1563} vslice_dummy_var_208 := __HAVOC_malloc(4);
    DeviceExtension := actual_DeviceExtension;
    call {:si_unique_call 1564} Tmp_16 := __HAVOC_malloc(48);
    call {:si_unique_call 1565} Tmp_17 := __HAVOC_malloc(48);
    call {:si_unique_call 1566} Tmp_22 := __HAVOC_malloc(48);
    call {:si_unique_call 1567} Tmp_25 := __HAVOC_malloc(48);
    call {:si_unique_call 1568} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1569} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    Source := 0;
    Sink := 1;
    goto L12;

  L12:
    call {:si_unique_call 1570} Tmp_16, Tmp_17, PutIrp, Tmp_18, Tmp_19, Tmp_20, Sink, Tmp_22, sdv_5, GetIrp, Tmp_23, Tmp_24, Tmp_25, sdv_6, Tmp_26, Tmp_27, origIrql_2, sdv_7, Tmp_28, sdv_10, BytesToCopy, sdv_12, CancelIrql_2, Tmp_29, Tmp_30, Source, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212 := HandleIpc#1_loop_L12(Tmp_16, Tmp_17, PutIrp, Tmp_18, Tmp_19, Tmp_20, Sink, Tmp_22, sdv_5, GetIrp, Tmp_23, Tmp_24, Tmp_25, sdv_6, Tmp_26, Tmp_27, origIrql_2, sdv_7, Tmp_28, sdv_10, BytesToCopy, sdv_12, CancelIrql_2, Tmp_29, Tmp_30, Source, DeviceExtension, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212);
    goto L12_last;

  L12_last:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 2 > Source;
    call {:si_unique_call 1571} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1572} IoAcquireCancelSpinLock(Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc CancelIrql_2;
    Tmp_24 := Sink;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_22;
    assume {:nonnull} Tmp_22 != 0;
    assume Tmp_22 > 0;
    Tmp_23 := GetList__IPC_CONTROL(Tmp_22 + Tmp_24 * 24);
    call {:si_unique_call 1573} GetIrp := GetUsableIrp(Tmp_23);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} GetIrp != 0;
    Tmp_26 := Source;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_16;
    assume {:nonnull} Tmp_16 != 0;
    assume Tmp_16 > 0;
    Tmp_18 := PutList__IPC_CONTROL(Tmp_16 + Tmp_26 * 24);
    call {:si_unique_call 1574} PutIrp := GetUsableIrp(Tmp_18);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} PutIrp != 0;
    call {:si_unique_call 1575} vslice_dummy_var_209 := sdv_IoSetCancelRoutine(GetIrp, 0);
    call {:si_unique_call 1576} vslice_dummy_var_210 := sdv_IoSetCancelRoutine(PutIrp, 0);
    call {:si_unique_call 1577} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 1578} sdv_KeReleaseSpinLock(0, origIrql_2);
    call {:si_unique_call 1579} sdv_10 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    call {:si_unique_call 1580} sdv_5 := sdv_IoGetCurrentIrpStackLocation(GetIrp);
    assume {:nonnull} sdv_10 != 0;
    assume sdv_10 > 0;
    assume {:nonnull} sdv_5 != 0;
    assume sdv_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1581} sdv_7 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    assume {:nonnull} sdv_7 != 0;
    assume sdv_7 > 0;
    havoc Tmp_29;
    goto L64;

  L64:
    BytesToCopy := Tmp_29;
    call {:si_unique_call 1582} sdv_RtlCopyMemory(0, 0, BytesToCopy);
    assume {:nonnull} GetIrp != 0;
    assume GetIrp > 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc vslice_dummy_var_132;
    call {:si_unique_call 1583} RemoveReferenceAndCompleteRequest(vslice_dummy_var_132, GetIrp, 0);
    call {:si_unique_call 1584} sdv_6 := sdv_IoGetCurrentIrpStackLocation(PutIrp);
    assume {:nonnull} sdv_6 != 0;
    assume sdv_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1585} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1586} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    Tmp_28 := Source;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_17;
    assume {:nonnull} Tmp_17 != 0;
    assume Tmp_17 > 0;
    Tmp_30 := GetList__IPC_CONTROL(Tmp_17 + Tmp_28 * 24);
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    call {:si_unique_call 1587} vslice_dummy_var_212 := sdv_InsertTailList(Tmp_30, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(PutIrp))));
    call {:si_unique_call 1588} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1589} IoAcquireCancelSpinLock(Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc CancelIrql_2;
    call {:si_unique_call 1590} vslice_dummy_var_211 := sdv_IoSetCancelRoutine(PutIrp, li2bplFunctionConstant587);
    call {:si_unique_call 1591} IoReleaseCancelSpinLock(CancelIrql_2);
    call {:si_unique_call 1592} sdv_KeReleaseSpinLock(0, origIrql_2);
    call {:si_unique_call 1593} HandleIpc#0(DeviceExtension);
    goto L100;

  L100:
    call {:si_unique_call 1594} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    call {:si_unique_call 1595} sdv_KeAcquireSpinLock(0, Tmp_27);
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    havoc origIrql_2;
    goto L103;

  L103:
    Source := Source + 1;
    Sink := Sink - 1;
    goto L103_dummy;

  L103_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:nonnull} PutIrp != 0;
    assume PutIrp > 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc vslice_dummy_var_133;
    call {:si_unique_call 1596} RemoveReferenceAndCompleteRequest(vslice_dummy_var_133, PutIrp, 0);
    goto L100;

  anon14_Then:
    call {:si_unique_call 1597} sdv_12 := sdv_IoGetCurrentIrpStackLocation(GetIrp);
    assume {:nonnull} sdv_12 != 0;
    assume sdv_12 > 0;
    havoc Tmp_29;
    goto L64;

  anon13_Then:
    assume {:partition} PutIrp == 0;
    Tmp_20 := Sink;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    havoc Tmp_25;
    assume {:nonnull} Tmp_25 != 0;
    assume Tmp_25 > 0;
    Tmp_19 := GetList__IPC_CONTROL(Tmp_25 + Tmp_20 * 24);
    assume {:nonnull} GetIrp != 0;
    assume GetIrp > 0;
    call {:si_unique_call 1598} InsertHeadList(Tmp_19, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(GetIrp))));
    call {:si_unique_call 1599} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L103;

  anon12_Then:
    assume {:partition} GetIrp == 0;
    call {:si_unique_call 1600} IoReleaseCancelSpinLock(CancelIrql_2);
    goto L103;

  anon11_Then:
    assume {:partition} Source >= 2;
    call {:si_unique_call 1601} sdv_KeReleaseSpinLock(0, origIrql_2);
    return;
}



procedure {:origName "HandleIpc"} HandleIpc#1(actual_DeviceExtension: int);
  modifies alloc, queued, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 1;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queued == old(queued);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 0;
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation GetUsableIrp_loop_L5(in_Irp_2: int, in_sdv_14: int, in_sdv_16: int, in_ListElement: int, in_List: int) returns (out_Irp_2: int, out_sdv_14: int, out_sdv_16: int, out_ListElement: int)
{

  entry:
    out_Irp_2, out_sdv_14, out_sdv_16, out_ListElement := in_Irp_2, in_sdv_14, in_sdv_16, in_ListElement;
    goto L5, exit;

  exit:
    return;

  L5:
    call {:si_unique_call 1602} out_sdv_14 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_14 == 0;
    call {:si_unique_call 1603} out_ListElement := RemoveTailList(in_List);
    call {:si_unique_call 1604} out_sdv_16 := sdv_containing_record(out_ListElement, 88);
    out_Irp_2 := out_sdv_16;
    assume {:nonnull} out_Irp_2 != 0;
    assume out_Irp_2 > 0;
    goto anon6_Else;

  anon6_Else:
    assume {:nonnull} out_Irp_2 != 0;
    assume out_Irp_2 > 0;
    out_Irp_2 := 0;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 1605} {:si_old_unique_call 1} out_Irp_2, out_sdv_14, out_sdv_16, out_ListElement := GetUsableIrp_loop_L5(out_Irp_2, out_sdv_14, out_sdv_16, out_ListElement, in_List);
    return;
}



procedure {:LoopProcedure} GetUsableIrp_loop_L5(in_Irp_2: int, in_sdv_14: int, in_sdv_16: int, in_ListElement: int, in_List: int) returns (out_Irp_2: int, out_sdv_14: int, out_sdv_16: int, out_ListElement: int);
  modifies alloc;
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} out_Irp_2 == in_Irp_2;
  free ensures {:va_keep} out_sdv_14 == in_sdv_14;
  free ensures {:va_keep} out_sdv_16 == in_sdv_16;
  free ensures {:va_keep} out_ListElement == in_ListElement;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation EmptyIpcQueue_loop_L16(in_Irp_3: int, in_Tmp_33: int, in_origIrql_3: int, in_CancelIrql_3: int, in_DeviceExtension_1: int, in_List_1: int, in_vslice_dummy_var_8: int) returns (out_Irp_3: int, out_Tmp_33: int, out_origIrql_3: int, out_CancelIrql_3: int, out_vslice_dummy_var_8: int)
{
  var vslice_dummy_var_134: int;

  entry:
    out_Irp_3, out_Tmp_33, out_origIrql_3, out_CancelIrql_3, out_vslice_dummy_var_8 := in_Irp_3, in_Tmp_33, in_origIrql_3, in_CancelIrql_3, in_vslice_dummy_var_8;
    goto L16, exit;

  exit:
    return;

  L16:
    goto anon3_Else;

  anon3_Else:
    assume {:partition} out_Irp_3 != 0;
    call {:si_unique_call 1606} out_vslice_dummy_var_8 := sdv_IoSetCancelRoutine(out_Irp_3, 0);
    call {:si_unique_call 1607} IoReleaseCancelSpinLock(out_CancelIrql_3);
    call {:si_unique_call 1608} sdv_KeReleaseSpinLock(0, out_origIrql_3);
    assume {:nonnull} out_Irp_3 != 0;
    assume out_Irp_3 > 0;
    assume {:nonnull} in_DeviceExtension_1 != 0;
    assume in_DeviceExtension_1 > 0;
    havoc vslice_dummy_var_134;
    call {:si_unique_call 1609} RemoveReferenceAndCompleteRequest(vslice_dummy_var_134, out_Irp_3, -1073741536);
    call {:si_unique_call 1610} out_Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_33 != 0;
    assume out_Tmp_33 > 0;
    call {:si_unique_call 1611} sdv_KeAcquireSpinLock(0, out_Tmp_33);
    assume {:nonnull} out_Tmp_33 != 0;
    assume out_Tmp_33 > 0;
    havoc out_origIrql_3;
    call {:si_unique_call 1612} out_Tmp_33 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_33 != 0;
    assume out_Tmp_33 > 0;
    call {:si_unique_call 1613} IoAcquireCancelSpinLock(out_Tmp_33);
    assume {:nonnull} out_Tmp_33 != 0;
    assume out_Tmp_33 > 0;
    havoc out_CancelIrql_3;
    call {:si_unique_call 1614} out_Irp_3 := GetUsableIrp(in_List_1);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 1615} {:si_old_unique_call 1} out_Irp_3, out_Tmp_33, out_origIrql_3, out_CancelIrql_3, out_vslice_dummy_var_8 := EmptyIpcQueue_loop_L16(out_Irp_3, out_Tmp_33, out_origIrql_3, out_CancelIrql_3, in_DeviceExtension_1, in_List_1, out_vslice_dummy_var_8);
    return;
}



procedure {:LoopProcedure} EmptyIpcQueue_loop_L16(in_Irp_3: int, in_Tmp_33: int, in_origIrql_3: int, in_CancelIrql_3: int, in_DeviceExtension_1: int, in_List_1: int, in_vslice_dummy_var_8: int) returns (out_Irp_3: int, out_Tmp_33: int, out_origIrql_3: int, out_CancelIrql_3: int, out_vslice_dummy_var_8: int);
  modifies alloc, queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 1 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} out_Irp_3 == 0 || out_Irp_3 == in_Irp_3;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation UniMaskStarter_loop_L6(in_Tmp_115: int, in_otherMaskState: int, in_Tmp_116: int, in_maskValue_1: int, in_Tmp_117: int, in_Tmp_118: int, in_irpSp_6: int, in_thisMaskState: int, in_Tmp_119: int, in_Tmp_120: int, in_Tmp_121: int, in_Tmp_122: int, in_Tmp_123: int, in_Tmp_124: int, in_newIrp: int, in_Tmp_125: int, in_ownerHandle: int, in_Tmp_126: int, in_Tmp_127: int, in_origIrql_5: int, in_Tmp_128: int, in_Tmp_129: int, in_maskValue_2: int, in_Tmp_130: int, in_origMask: int, in_Tmp_131: int, in_savedIrp_1: int, in_Tmp_132: int, in_Tmp_133: int, in_Tmp_134: int, in_Tmp_135: int, in_Extension_3: int, in_vslice_dummy_var_18: int, in_vslice_dummy_var_19: int, in_vslice_dummy_var_20: int) returns (out_Tmp_115: int, out_otherMaskState: int, out_Tmp_116: int, out_maskValue_1: int, out_Tmp_117: int, out_Tmp_118: int, out_irpSp_6: int, out_thisMaskState: int, out_Tmp_119: int, out_Tmp_120: int, out_Tmp_121: int, out_Tmp_122: int, out_Tmp_123: int, out_Tmp_124: int, out_Tmp_125: int, out_ownerHandle: int, out_Tmp_126: int, out_Tmp_127: int, out_origIrql_5: int, out_Tmp_128: int, out_Tmp_129: int, out_maskValue_2: int, out_Tmp_130: int, out_origMask: int, out_Tmp_131: int, out_savedIrp_1: int, out_Tmp_132: int, out_Tmp_133: int, out_Tmp_134: int, out_Tmp_135: int, out_vslice_dummy_var_18: int, out_vslice_dummy_var_19: int, out_vslice_dummy_var_20: int)
{
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_139: int;
  var vslice_dummy_var_140: int;
  var vslice_dummy_var_141: int;
  var vslice_dummy_var_142: int;
  var vslice_dummy_var_143: int;
  var vslice_dummy_var_144: int;
  var vslice_dummy_var_145: int;
  var vslice_dummy_var_146: int;
  var vslice_dummy_var_147: int;
  var vslice_dummy_var_148: int;
  var vslice_dummy_var_149: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;

  entry:
    out_Tmp_115, out_otherMaskState, out_Tmp_116, out_maskValue_1, out_Tmp_117, out_Tmp_118, out_irpSp_6, out_thisMaskState, out_Tmp_119, out_Tmp_120, out_Tmp_121, out_Tmp_122, out_Tmp_123, out_Tmp_124, out_Tmp_125, out_ownerHandle, out_Tmp_126, out_Tmp_127, out_origIrql_5, out_Tmp_128, out_Tmp_129, out_maskValue_2, out_Tmp_130, out_origMask, out_Tmp_131, out_savedIrp_1, out_Tmp_132, out_Tmp_133, out_Tmp_134, out_Tmp_135, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20 := in_Tmp_115, in_otherMaskState, in_Tmp_116, in_maskValue_1, in_Tmp_117, in_Tmp_118, in_irpSp_6, in_thisMaskState, in_Tmp_119, in_Tmp_120, in_Tmp_121, in_Tmp_122, in_Tmp_123, in_Tmp_124, in_Tmp_125, in_ownerHandle, in_Tmp_126, in_Tmp_127, in_origIrql_5, in_Tmp_128, in_Tmp_129, in_maskValue_2, in_Tmp_130, in_origMask, in_Tmp_131, in_savedIrp_1, in_Tmp_132, in_Tmp_133, in_Tmp_134, in_Tmp_135, in_vslice_dummy_var_18, in_vslice_dummy_var_19, in_vslice_dummy_var_20;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_135;
    call {:si_unique_call 1616} out_irpSp_6 := sdv_IoGetCurrentIrpStackLocation(vslice_dummy_var_135);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_120;
    assume {:nonnull} out_Tmp_120 != 0;
    assume out_Tmp_120 > 0;
    havoc out_origMask;
    assume {:nonnull} out_irpSp_6 != 0;
    assume out_irpSp_6 > 0;
    havoc out_Tmp_123;
    assume {:nonnull} out_Tmp_123 != 0;
    assume out_Tmp_123 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    out_Tmp_116 := 1;
    goto L17;

  L17:
    out_ownerHandle := out_Tmp_116;
    out_Tmp_119 := out_ownerHandle;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_131;
    out_thisMaskState := out_Tmp_131 + out_Tmp_119 * 36;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    havoc out_otherMaskState;
    assume {:nonnull} out_irpSp_6 != 0;
    assume out_irpSp_6 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} out_irpSp_6 != 0;
    assume out_irpSp_6 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_124;
    assume {:nonnull} out_Tmp_124 != 0;
    assume out_Tmp_124 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_128;
    assume {:nonnull} out_Tmp_128 != 0;
    assume out_Tmp_128 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_136;
    call {:si_unique_call 1617} UniGetNextIrp(vslice_dummy_var_136, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  L34:
    assume {:nonnull} in_newIrp != 0;
    assume in_newIrp > 0;
    goto anon45_Then;

  anon45_Then:
    goto anon45_Then_dummy;

  anon45_Then_dummy:
    call {:si_unique_call 1647} {:si_old_unique_call 1} out_Tmp_115, out_otherMaskState, out_Tmp_116, out_maskValue_1, out_Tmp_117, out_Tmp_118, out_irpSp_6, out_thisMaskState, out_Tmp_119, out_Tmp_120, out_Tmp_121, out_Tmp_122, out_Tmp_123, out_Tmp_124, out_Tmp_125, out_ownerHandle, out_Tmp_126, out_Tmp_127, out_origIrql_5, out_Tmp_128, out_Tmp_129, out_maskValue_2, out_Tmp_130, out_origMask, out_Tmp_131, out_savedIrp_1, out_Tmp_132, out_Tmp_133, out_Tmp_134, out_Tmp_135, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20 := UniMaskStarter_loop_L6(out_Tmp_115, out_otherMaskState, out_Tmp_116, out_maskValue_1, out_Tmp_117, out_Tmp_118, out_irpSp_6, out_thisMaskState, out_Tmp_119, out_Tmp_120, out_Tmp_121, out_Tmp_122, out_Tmp_123, out_Tmp_124, in_newIrp, out_Tmp_125, out_ownerHandle, out_Tmp_126, out_Tmp_127, out_origIrql_5, out_Tmp_128, out_Tmp_129, out_maskValue_2, out_Tmp_130, out_origMask, out_Tmp_131, out_savedIrp_1, out_Tmp_132, out_Tmp_133, out_Tmp_134, out_Tmp_135, in_Extension_3, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20);
    return;

  anon44_Then:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_152;
    call {:si_unique_call 1642} sdv_IoCopyCurrentIrpStackLocationToNext(vslice_dummy_var_152);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_153;
    call {:si_unique_call 1643} sdv_IoSetCompletionRoutine(vslice_dummy_var_153, li2bplFunctionConstant1477, out_thisMaskState, 1, 1, 1);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_154;
    call {:si_unique_call 1644} UNI_SAVE_OLD_SETMASK(vslice_dummy_var_154);
    call {:si_unique_call 1645} out_Tmp_133 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_133 != 0;
    assume out_Tmp_133 > 0;
    call {:si_unique_call 1646} sdv_KeAcquireSpinLock(0, out_Tmp_133);
    assume {:nonnull} out_Tmp_133 != 0;
    assume out_Tmp_133 > 0;
    havoc out_origIrql_5;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    out_Tmp_115 := 48;
    goto L48;

  L48:
    assume {:nonnull} out_origMask != 0;
    assume out_origMask > 0;
    assume {:nonnull} out_otherMaskState != 0;
    assume out_otherMaskState > 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    havoc out_savedIrp_1;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    call {:si_unique_call 1639} UniRundownShuttledWait(in_Extension_3, ShuttledWait__MASKSTATE(out_thisMaskState), 1, out_savedIrp_1, out_origIrql_5, 0, 0);
    goto L58;

  L58:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1638} SLIC_sdv_IoCallDriver_entry(0);
    goto L172;

  L172:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_137;
    havoc vslice_dummy_var_138;
    call {:si_unique_call 1618} out_vslice_dummy_var_19 := sdv_IoCallDriver(vslice_dummy_var_137, vslice_dummy_var_138);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_139;
    call {:si_unique_call 1619} UniGetNextIrp(vslice_dummy_var_139, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 0);
    goto L34;

  anon48_Then:
    goto L172;

  anon63_Then:
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 1641} SetPassdownToComplete(out_thisMaskState);
    goto L65;

  L65:
    call {:si_unique_call 1640} sdv_KeReleaseSpinLock(0, out_origIrql_5);
    goto L58;

  anon47_Then:
    goto L65;

  anon46_Then:
    out_Tmp_115 := 0;
    goto L48;

  anon62_Then:
    assume {:nonnull} out_irpSp_6 != 0;
    assume out_irpSp_6 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_134;
    assume {:nonnull} out_Tmp_134 != 0;
    assume out_Tmp_134 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_118;
    assume {:nonnull} out_Tmp_118 != 0;
    assume out_Tmp_118 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_140;
    call {:si_unique_call 1620} UniGetNextIrp(vslice_dummy_var_140, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  anon43_Then:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} out_ownerHandle != 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L81;

  L81:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_132;
    assume {:nonnull} out_Tmp_132 != 0;
    assume out_Tmp_132 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_126;
    assume {:nonnull} out_Tmp_126 != 0;
    assume out_Tmp_126 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_141;
    call {:si_unique_call 1621} UniGetNextIrp(vslice_dummy_var_141, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  anon52_Then:
    goto L78;

  L78:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} out_ownerHandle != 0;
    goto L88;

  L88:
    call {:si_unique_call 1636} out_Tmp_133 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_133 != 0;
    assume out_Tmp_133 > 0;
    call {:si_unique_call 1637} sdv_KeAcquireSpinLock(0, out_Tmp_133);
    assume {:nonnull} out_Tmp_133 != 0;
    assume out_Tmp_133 > 0;
    havoc out_origIrql_5;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    goto L93;

  L93:
    call {:si_unique_call 1622} sdv_KeReleaseSpinLock(0, out_origIrql_5);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_117;
    assume {:nonnull} out_Tmp_117 != 0;
    assume out_Tmp_117 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_135;
    assume {:nonnull} out_Tmp_135 != 0;
    assume out_Tmp_135 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_142;
    call {:si_unique_call 1623} UniGetNextIrp(vslice_dummy_var_142, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  anon54_Then:
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_127;
    assume {:nonnull} out_Tmp_127 != 0;
    assume out_Tmp_127 > 0;
    havoc out_maskValue_2;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_130;
    assume {:nonnull} out_Tmp_130 != 0;
    assume out_Tmp_130 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_122;
    assume {:nonnull} out_Tmp_122 != 0;
    assume out_Tmp_122 > 0;
    assume {:nonnull} out_maskValue_2 != 0;
    assume out_maskValue_2 > 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    call {:si_unique_call 1624} sdv_KeReleaseSpinLock(0, out_origIrql_5);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_143;
    call {:si_unique_call 1625} UniGetNextIrp(vslice_dummy_var_143, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  anon56_Then:
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_121;
    assume {:nonnull} out_Tmp_121 != 0;
    assume out_Tmp_121 > 0;
    havoc out_maskValue_1;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_129;
    assume {:nonnull} out_Tmp_129 != 0;
    assume out_Tmp_129 > 0;
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc out_Tmp_125;
    assume {:nonnull} out_Tmp_125 != 0;
    assume out_Tmp_125 > 0;
    assume {:nonnull} out_maskValue_1 != 0;
    assume out_maskValue_1 > 0;
    call {:si_unique_call 1626} sdv_KeReleaseSpinLock(0, out_origIrql_5);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_144;
    call {:si_unique_call 1627} UniGetNextIrp(vslice_dummy_var_144, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 1);
    goto L34;

  anon57_Then:
    assume {:nonnull} out_otherMaskState != 0;
    assume out_otherMaskState > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L131;

  L131:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_145;
    call {:si_unique_call 1628} out_vslice_dummy_var_18 := UniMakeIrpShuttledWait(out_thisMaskState, vslice_dummy_var_145, out_origIrql_5, 1, in_newIrp);
    goto L34;

  anon58_Then:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_149;
    call {:si_unique_call 1632} MakeIrpCurrentPassedDown(out_thisMaskState, vslice_dummy_var_149);
    call {:si_unique_call 1633} sdv_KeReleaseSpinLock(0, out_origIrql_5);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_150;
    call {:si_unique_call 1634} sdv_IoCopyCurrentIrpStackLocationToNext(vslice_dummy_var_150);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_151;
    call {:si_unique_call 1635} sdv_IoSetCompletionRoutine(vslice_dummy_var_151, li2bplFunctionConstant1478, out_thisMaskState, 1, 1, 1);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1631} SLIC_sdv_IoCallDriver_entry(0);
    goto L175;

  L175:
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_146;
    havoc vslice_dummy_var_147;
    call {:si_unique_call 1629} out_vslice_dummy_var_20 := sdv_IoCallDriver(vslice_dummy_var_146, vslice_dummy_var_147);
    assume {:nonnull} in_Extension_3 != 0;
    assume in_Extension_3 > 0;
    havoc vslice_dummy_var_148;
    call {:si_unique_call 1630} UniGetNextIrp(vslice_dummy_var_148, DeviceLock__DEVICE_EXTENSION(in_Extension_3), CurrentMaskOp__DEVICE_EXTENSION(in_Extension_3), MaskOps__DEVICE_EXTENSION(in_Extension_3), in_newIrp, 0);
    goto L34;

  anon60_Then:
    goto L175;

  anon59_Then:
    goto L131;

  anon55_Then:
    goto L93;

  anon50_Then:
    assume {:partition} out_ownerHandle == 0;
    assume {:nonnull} out_thisMaskState != 0;
    assume out_thisMaskState > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L88;

  anon53_Then:
    goto L81;

  anon51_Then:
    goto L78;

  anon49_Then:
    assume {:partition} out_ownerHandle == 0;
    goto L78;

  anon61_Then:
    out_Tmp_116 := 0;
    goto L17;
}



procedure {:LoopProcedure} UniMaskStarter_loop_L6(in_Tmp_115: int, in_otherMaskState: int, in_Tmp_116: int, in_maskValue_1: int, in_Tmp_117: int, in_Tmp_118: int, in_irpSp_6: int, in_thisMaskState: int, in_Tmp_119: int, in_Tmp_120: int, in_Tmp_121: int, in_Tmp_122: int, in_Tmp_123: int, in_Tmp_124: int, in_newIrp: int, in_Tmp_125: int, in_ownerHandle: int, in_Tmp_126: int, in_Tmp_127: int, in_origIrql_5: int, in_Tmp_128: int, in_Tmp_129: int, in_maskValue_2: int, in_Tmp_130: int, in_origMask: int, in_Tmp_131: int, in_savedIrp_1: int, in_Tmp_132: int, in_Tmp_133: int, in_Tmp_134: int, in_Tmp_135: int, in_Extension_3: int, in_vslice_dummy_var_18: int, in_vslice_dummy_var_19: int, in_vslice_dummy_var_20: int) returns (out_Tmp_115: int, out_otherMaskState: int, out_Tmp_116: int, out_maskValue_1: int, out_Tmp_117: int, out_Tmp_118: int, out_irpSp_6: int, out_thisMaskState: int, out_Tmp_119: int, out_Tmp_120: int, out_Tmp_121: int, out_Tmp_122: int, out_Tmp_123: int, out_Tmp_124: int, out_Tmp_125: int, out_ownerHandle: int, out_Tmp_126: int, out_Tmp_127: int, out_origIrql_5: int, out_Tmp_128: int, out_Tmp_129: int, out_maskValue_2: int, out_Tmp_130: int, out_origMask: int, out_Tmp_131: int, out_savedIrp_1: int, out_Tmp_132: int, out_Tmp_133: int, out_Tmp_134: int, out_Tmp_135: int, out_vslice_dummy_var_18: int, out_vslice_dummy_var_19: int, out_vslice_dummy_var_20: int);
  modifies alloc, locked, queuedWithoutMarking, markedPending;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(markedPending) == 1 ==> markedPending != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} markedPending == 1 || markedPending == old(markedPending);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} out_Tmp_115 == 48 || out_Tmp_115 == 0 || out_Tmp_115 == in_Tmp_115;
  free ensures {:va_keep} out_Tmp_116 == 1 || out_Tmp_116 == 0 || out_Tmp_116 == in_Tmp_116;
  free ensures {:va_keep} out_Tmp_119 == 1 || out_Tmp_119 == 0 || out_Tmp_119 == in_Tmp_119;
  free ensures {:va_keep} out_ownerHandle == 1 || out_ownerHandle == 0 || out_ownerHandle == in_ownerHandle;
  free ensures {:va_keep} out_vslice_dummy_var_18 == -1073741536 || out_vslice_dummy_var_18 == 259 || out_vslice_dummy_var_18 == in_vslice_dummy_var_18;
  free ensures {:va_keep} out_vslice_dummy_var_19 == 259 || out_vslice_dummy_var_19 == in_vslice_dummy_var_19;
  free ensures {:va_keep} out_vslice_dummy_var_20 == 259 || out_vslice_dummy_var_20 == in_vslice_dummy_var_20;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation QueryDeviceCaps_loop_L9(in_deviceObject: int) returns (out_deviceObject: int)
{

  entry:
    out_deviceObject := in_deviceObject;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:nonnull} out_deviceObject != 0;
    assume out_deviceObject > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} out_deviceObject != 0;
    assume out_deviceObject > 0;
    havoc out_deviceObject;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    havoc out_deviceObject;
    return;
}



procedure {:LoopProcedure} QueryDeviceCaps_loop_L9(in_deviceObject: int) returns (out_deviceObject: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation ModemPnP_loop_L113(in_j: int, in_Descriptor: int, in_Tmp_424: int, in_ResourceList: int, in_Tmp_432: int) returns (out_j: int, out_Descriptor: int, out_Tmp_424: int, out_Tmp_432: int)
{

  entry:
    out_j, out_Descriptor, out_Tmp_424, out_Tmp_432 := in_j, in_Descriptor, in_Tmp_424, in_Tmp_432;
    goto L113, exit;

  exit:
    return;

  L113:
    assume {:nonnull} in_ResourceList != 0;
    assume in_ResourceList > 0;
    goto anon92_Else;

  anon92_Else:
    out_Tmp_424 := out_j;
    assume {:nonnull} in_ResourceList != 0;
    assume in_ResourceList > 0;
    havoc out_Tmp_432;
    out_Descriptor := out_Tmp_432 + out_Tmp_424 * 420;
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto L118;

  L118:
    out_j := out_j + 1;
    goto L118_dummy;

  L118_dummy:
    call {:si_unique_call 1648} {:si_old_unique_call 1} out_j, out_Descriptor, out_Tmp_424, out_Tmp_432 := ModemPnP_loop_L113(out_j, out_Descriptor, out_Tmp_424, in_ResourceList, out_Tmp_432);
    return;

  anon94_Then:
    goto L118;

  anon93_Then:
    goto L118;

  anon126_Then:
    goto L118;
}



procedure {:LoopProcedure} ModemPnP_loop_L113(in_j: int, in_Descriptor: int, in_Tmp_424: int, in_ResourceList: int, in_Tmp_432: int) returns (out_j: int, out_Descriptor: int, out_Tmp_424: int, out_Tmp_432: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation ModemPnP_loop_L111(in_i: int, in_j: int, in_Descriptor: int, in_Tmp_424: int, in_ResourceRequirementsList: int, in_ResourceList: int, in_Tmp_432: int) returns (out_i: int, out_j: int, out_Descriptor: int, out_Tmp_424: int, out_Tmp_432: int)
{

  entry:
    out_i, out_j, out_Descriptor, out_Tmp_424, out_Tmp_432 := in_i, in_j, in_Descriptor, in_Tmp_424, in_Tmp_432;
    goto L111, exit;

  exit:
    return;

  L111:
    assume {:nonnull} in_ResourceRequirementsList != 0;
    assume in_ResourceRequirementsList > 0;
    goto anon91_Else;

  anon91_Else:
    out_j := 0;
    goto L113;

  L113:
    call {:si_unique_call 1649} out_j, out_Descriptor, out_Tmp_424, out_Tmp_432 := ModemPnP_loop_L113(out_j, out_Descriptor, out_Tmp_424, in_ResourceList, out_Tmp_432);
    goto L113_last;

  L113_last:
    assume {:nonnull} in_ResourceList != 0;
    assume in_ResourceList > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    out_Tmp_424 := out_j;
    assume {:nonnull} in_ResourceList != 0;
    assume in_ResourceList > 0;
    havoc out_Tmp_432;
    out_Descriptor := out_Tmp_432 + out_Tmp_424 * 420;
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} out_Descriptor != 0;
    assume out_Descriptor > 0;
    goto L118;

  L118:
    out_j := out_j + 1;
    assume false;
    return;

  anon94_Then:
    goto L118;

  anon93_Then:
    goto L118;

  anon126_Then:
    goto L118;

  anon92_Then:
    out_i := out_i + 1;
    goto anon92_Then_dummy;

  anon92_Then_dummy:
    call {:si_unique_call 1650} {:si_old_unique_call 1} out_i, out_j, out_Descriptor, out_Tmp_424, out_Tmp_432 := ModemPnP_loop_L111(out_i, out_j, out_Descriptor, out_Tmp_424, in_ResourceRequirementsList, in_ResourceList, out_Tmp_432);
    return;
}



procedure {:LoopProcedure} ModemPnP_loop_L111(in_i: int, in_j: int, in_Descriptor: int, in_Tmp_424: int, in_ResourceRequirementsList: int, in_ResourceList: int, in_Tmp_432: int) returns (out_i: int, out_j: int, out_Descriptor: int, out_Tmp_424: int, out_Tmp_432: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 6} ModemPnP_loop_L138(in_i_1: int, in_irpSp_10: int, in_Tmp_415: int, in_Tmp_416: int, in_Tmp_417: int, in_Tmp_428: int, in_Tmp_429: int, in_deviceExtension_1: int) returns (out_i_1: int, out_Tmp_415: int, out_Tmp_416: int, out_Tmp_417: int, out_Tmp_428: int, out_Tmp_429: int)
{

  entry:
    out_i_1, out_Tmp_415, out_Tmp_416, out_Tmp_417, out_Tmp_428, out_Tmp_429 := in_i_1, in_Tmp_415, in_Tmp_416, in_Tmp_417, in_Tmp_428, in_Tmp_429;
    goto L138, exit;

  exit:
    return;

  L138:
    assume {:CounterLoop 5} {:Counter "i_1"} true;
    goto anon96_Else;

  anon96_Else:
    assume {:partition} 6 > out_i_1;
    out_Tmp_429 := out_i_1;
    assume {:nonnull} in_deviceExtension_1 != 0;
    assume in_deviceExtension_1 > 0;
    havoc out_Tmp_416;
    out_Tmp_417 := out_i_1;
    assume {:nonnull} in_irpSp_10 != 0;
    assume in_irpSp_10 > 0;
    havoc out_Tmp_415;
    assume {:nonnull} out_Tmp_415 != 0;
    assume out_Tmp_415 > 0;
    havoc out_Tmp_428;
    assume {:nonnull} out_Tmp_416 != 0;
    assume out_Tmp_416 > 0;
    assume {:nonnull} out_Tmp_428 != 0;
    assume out_Tmp_428 > 0;
    out_i_1 := out_i_1 + 1;
    goto anon96_Else_dummy;

  anon96_Else_dummy:
    call {:si_unique_call 1651} {:si_old_unique_call 1} out_i_1, out_Tmp_415, out_Tmp_416, out_Tmp_417, out_Tmp_428, out_Tmp_429 := ModemPnP_loop_L138(out_i_1, in_irpSp_10, out_Tmp_415, out_Tmp_416, out_Tmp_417, out_Tmp_428, out_Tmp_429, in_deviceExtension_1);
    return;
}



procedure {:LoopProcedure} ModemPnP_loop_L138(in_i_1: int, in_irpSp_10: int, in_Tmp_415: int, in_Tmp_416: int, in_Tmp_417: int, in_Tmp_428: int, in_Tmp_429: int, in_deviceExtension_1: int) returns (out_i_1: int, out_Tmp_415: int, out_Tmp_416: int, out_Tmp_417: int, out_Tmp_428: int, out_Tmp_429: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 8} ModemPnP_loop_L134(in_i_1: int, in_Tmp_423: int, in_Tmp_425: int, in_deviceExtension_1: int) returns (out_i_1: int, out_Tmp_423: int, out_Tmp_425: int)
{

  entry:
    out_i_1, out_Tmp_423, out_Tmp_425 := in_i_1, in_Tmp_423, in_Tmp_425;
    goto L134, exit;

  exit:
    return;

  L134:
    assume {:CounterLoop 7} {:Counter "i_1"} true;
    goto anon95_Else;

  anon95_Else:
    assume {:partition} 7 > out_i_1;
    out_Tmp_425 := out_i_1;
    assume {:nonnull} in_deviceExtension_1 != 0;
    assume in_deviceExtension_1 > 0;
    havoc out_Tmp_423;
    assume {:nonnull} out_Tmp_423 != 0;
    assume out_Tmp_423 > 0;
    out_i_1 := out_i_1 + 1;
    goto anon95_Else_dummy;

  anon95_Else_dummy:
    call {:si_unique_call 1652} {:si_old_unique_call 1} out_i_1, out_Tmp_423, out_Tmp_425 := ModemPnP_loop_L134(out_i_1, out_Tmp_423, out_Tmp_425, in_deviceExtension_1);
    return;
}



procedure {:LoopProcedure} ModemPnP_loop_L134(in_i_1: int, in_Tmp_423: int, in_Tmp_425: int, in_deviceExtension_1: int) returns (out_i_1: int, out_Tmp_423: int, out_Tmp_425: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 3} CleanUpOnRemove_loop_L72(in_i_2: int, in_Tmp_443: int, in_Tmp_445: int, in_Tmp_446: int, in_Tmp_447: int, in_OwnerClient_3: int, in_Tmp_450: int, in_Tmp_451: int, in_deviceExtension_3: int) returns (out_i_2: int, out_Tmp_443: int, out_Tmp_445: int, out_Tmp_446: int, out_Tmp_447: int, out_OwnerClient_3: int, out_Tmp_450: int, out_Tmp_451: int)
{

  entry:
    out_i_2, out_Tmp_443, out_Tmp_445, out_Tmp_446, out_Tmp_447, out_OwnerClient_3, out_Tmp_450, out_Tmp_451 := in_i_2, in_Tmp_443, in_Tmp_445, in_Tmp_446, in_Tmp_447, in_OwnerClient_3, in_Tmp_450, in_Tmp_451;
    goto L72, exit;

  exit:
    return;

  L72:
    assume {:CounterLoop 2} {:Counter "i_2"} true;
    goto anon21_Else;

  anon21_Else:
    assume {:partition} 2 > out_i_2;
    out_OwnerClient_3 := out_i_2;
    out_Tmp_450 := out_OwnerClient_3;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    havoc out_Tmp_451;
    assume {:nonnull} out_Tmp_451 != 0;
    assume out_Tmp_451 > 0;
    out_Tmp_443 := GetList__IPC_CONTROL(out_Tmp_451 + out_Tmp_450 * 24);
    call {:si_unique_call 1653} EmptyIpcQueue(in_deviceExtension_3, out_Tmp_443);
    out_Tmp_447 := out_OwnerClient_3;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    havoc out_Tmp_445;
    assume {:nonnull} out_Tmp_445 != 0;
    assume out_Tmp_445 > 0;
    out_Tmp_446 := PutList__IPC_CONTROL(out_Tmp_445 + out_Tmp_447 * 24);
    call {:si_unique_call 1654} EmptyIpcQueue(in_deviceExtension_3, out_Tmp_446);
    out_i_2 := out_i_2 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    call {:si_unique_call 1655} {:si_old_unique_call 1} out_i_2, out_Tmp_443, out_Tmp_445, out_Tmp_446, out_Tmp_447, out_OwnerClient_3, out_Tmp_450, out_Tmp_451 := CleanUpOnRemove_loop_L72(out_i_2, out_Tmp_443, out_Tmp_445, out_Tmp_446, out_Tmp_447, out_OwnerClient_3, out_Tmp_450, out_Tmp_451, in_deviceExtension_3);
    return;
}



procedure {:LoopProcedure} CleanUpOnRemove_loop_L72(in_i_2: int, in_Tmp_443: int, in_Tmp_445: int, in_Tmp_446: int, in_Tmp_447: int, in_OwnerClient_3: int, in_Tmp_450: int, in_Tmp_451: int, in_deviceExtension_3: int) returns (out_i_2: int, out_Tmp_443: int, out_Tmp_445: int, out_Tmp_446: int, out_Tmp_447: int, out_OwnerClient_3: int, out_Tmp_450: int, out_Tmp_451: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 3} CleanUpOnRemove_loop_L25(in_i_2: int, in_Tmp_441: int, in_Tmp_442: int, in_thisMaskState_1: int, in_Tmp_448: int, in_origIrql_6: int, in_savedIrp_2: int, in_deviceExtension_3: int) returns (out_i_2: int, out_Tmp_441: int, out_Tmp_442: int, out_thisMaskState_1: int, out_Tmp_448: int, out_origIrql_6: int, out_savedIrp_2: int)
{

  entry:
    out_i_2, out_Tmp_441, out_Tmp_442, out_thisMaskState_1, out_Tmp_448, out_origIrql_6, out_savedIrp_2 := in_i_2, in_Tmp_441, in_Tmp_442, in_thisMaskState_1, in_Tmp_448, in_origIrql_6, in_savedIrp_2;
    goto L25, exit;

  exit:
    return;

  L25:
    assume {:CounterLoop 2} {:Counter "i_2"} true;
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 2 > out_i_2;
    out_Tmp_448 := out_i_2;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    havoc out_Tmp_441;
    out_thisMaskState_1 := out_Tmp_441 + out_Tmp_448 * 36;
    call {:si_unique_call 1659} out_Tmp_442 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_442 != 0;
    assume out_Tmp_442 > 0;
    call {:si_unique_call 1660} sdv_KeAcquireSpinLock(0, out_Tmp_442);
    assume {:nonnull} out_Tmp_442 != 0;
    assume out_Tmp_442 > 0;
    havoc out_origIrql_6;
    assume {:nonnull} out_thisMaskState_1 != 0;
    assume out_thisMaskState_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 1658} SetPassdownToComplete(out_thisMaskState_1);
    goto L32;

  L32:
    assume {:nonnull} out_thisMaskState_1 != 0;
    assume out_thisMaskState_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} out_thisMaskState_1 != 0;
    assume out_thisMaskState_1 > 0;
    havoc out_savedIrp_2;
    assume {:nonnull} out_thisMaskState_1 != 0;
    assume out_thisMaskState_1 > 0;
    assume {:nonnull} out_thisMaskState_1 != 0;
    assume out_thisMaskState_1 > 0;
    call {:si_unique_call 1656} UniRundownShuttledWait(in_deviceExtension_3, ShuttledWait__MASKSTATE(out_thisMaskState_1), 1, out_savedIrp_2, out_origIrql_6, 0, 0);
    goto L45;

  L45:
    out_i_2 := out_i_2 + 1;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 1661} {:si_old_unique_call 1} out_i_2, out_Tmp_441, out_Tmp_442, out_thisMaskState_1, out_Tmp_448, out_origIrql_6, out_savedIrp_2 := CleanUpOnRemove_loop_L25(out_i_2, out_Tmp_441, out_Tmp_442, out_thisMaskState_1, out_Tmp_448, out_origIrql_6, out_savedIrp_2, in_deviceExtension_3);
    return;

  anon20_Then:
    call {:si_unique_call 1657} sdv_KeReleaseSpinLock(0, out_origIrql_6);
    goto L45;

  anon19_Then:
    goto L32;
}



procedure {:LoopProcedure} CleanUpOnRemove_loop_L25(in_i_2: int, in_Tmp_441: int, in_Tmp_442: int, in_thisMaskState_1: int, in_Tmp_448: int, in_origIrql_6: int, in_savedIrp_2: int, in_deviceExtension_3: int) returns (out_i_2: int, out_Tmp_441: int, out_Tmp_442: int, out_thisMaskState_1: int, out_Tmp_448: int, out_origIrql_6: int, out_savedIrp_2: int);
  modifies alloc, queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation CleanUpQueuedIrps_loop_L9(in_Irp_34: int, in_sdv_344: int, in_origIrql_11: int, in_sdv_346: int, in_ListElement_1: int, in_CancelIrql_8: int, in_Tmp_614: int, in_Control_4: int, in_Status_12: int, in_vslice_dummy_var_164: int) returns (out_Irp_34: int, out_sdv_344: int, out_origIrql_11: int, out_sdv_346: int, out_ListElement_1: int, out_CancelIrql_8: int, out_Tmp_614: int, out_vslice_dummy_var_164: int)
{
  var vslice_dummy_var_155: int;

  entry:
    out_Irp_34, out_sdv_344, out_origIrql_11, out_sdv_346, out_ListElement_1, out_CancelIrql_8, out_Tmp_614, out_vslice_dummy_var_164 := in_Irp_34, in_sdv_344, in_origIrql_11, in_sdv_346, in_ListElement_1, in_CancelIrql_8, in_Tmp_614, in_vslice_dummy_var_164;
    goto L9, exit;

  exit:
    return;

  L9:
    call {:si_unique_call 1662} out_sdv_344 := sdv_IsListEmpty(0);
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_sdv_344 == 0;
    assume {:nonnull} in_Control_4 != 0;
    assume in_Control_4 > 0;
    call {:si_unique_call 1670} out_ListElement_1 := RemoveTailList(ListHead__READ_WRITE_CONTROL(in_Control_4));
    call {:si_unique_call 1671} out_sdv_346 := sdv_containing_record(out_ListElement_1, 88);
    out_Irp_34 := out_sdv_346;
    call {:si_unique_call 1672} out_Tmp_614 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_614 != 0;
    assume out_Tmp_614 > 0;
    call {:si_unique_call 1673} IoAcquireCancelSpinLock(out_Tmp_614);
    assume {:nonnull} out_Tmp_614 != 0;
    assume out_Tmp_614 > 0;
    havoc out_CancelIrql_8;
    assume {:nonnull} out_Irp_34 != 0;
    assume out_Irp_34 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} out_Irp_34 != 0;
    assume out_Irp_34 > 0;
    out_Irp_34 := 0;
    call {:si_unique_call 1667} IoReleaseCancelSpinLock(out_CancelIrql_8);
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} out_Irp_34 != 0;
    call {:si_unique_call 1663} sdv_KeReleaseSpinLock(0, out_origIrql_11);
    assume {:nonnull} out_Irp_34 != 0;
    assume out_Irp_34 > 0;
    assume {:nonnull} in_Control_4 != 0;
    assume in_Control_4 > 0;
    havoc vslice_dummy_var_155;
    call {:si_unique_call 1664} RemoveReferenceAndCompleteRequest(vslice_dummy_var_155, out_Irp_34, in_Status_12);
    call {:si_unique_call 1665} out_Tmp_614 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_614 != 0;
    assume out_Tmp_614 > 0;
    call {:si_unique_call 1666} sdv_KeAcquireSpinLock(0, out_Tmp_614);
    assume {:nonnull} out_Tmp_614 != 0;
    assume out_Tmp_614 > 0;
    havoc out_origIrql_11;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 1674} {:si_old_unique_call 1} out_Irp_34, out_sdv_344, out_origIrql_11, out_sdv_346, out_ListElement_1, out_CancelIrql_8, out_Tmp_614, out_vslice_dummy_var_164 := CleanUpQueuedIrps_loop_L9(out_Irp_34, out_sdv_344, out_origIrql_11, out_sdv_346, out_ListElement_1, out_CancelIrql_8, out_Tmp_614, in_Control_4, in_Status_12, out_vslice_dummy_var_164);
    return;

  anon9_Then:
    assume {:partition} out_Irp_34 == 0;
    goto anon9_Then_dummy;

  anon9_Then_dummy:
    goto L_BAF_0;

  anon8_Then:
    call {:si_unique_call 1668} out_vslice_dummy_var_164 := sdv_IoSetCancelRoutine(out_Irp_34, 0);
    call {:si_unique_call 1669} IoReleaseCancelSpinLock(out_CancelIrql_8);
    goto L38;
}



procedure {:LoopProcedure} CleanUpQueuedIrps_loop_L9(in_Irp_34: int, in_sdv_344: int, in_origIrql_11: int, in_sdv_346: int, in_ListElement_1: int, in_CancelIrql_8: int, in_Tmp_614: int, in_Control_4: int, in_Status_12: int, in_vslice_dummy_var_164: int) returns (out_Irp_34: int, out_sdv_344: int, out_origIrql_11: int, out_sdv_346: int, out_ListElement_1: int, out_CancelIrql_8: int, out_Tmp_614: int, out_vslice_dummy_var_164: int);
  modifies alloc, queuedWithoutMarking, locked;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> locked == old(locked);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} alloc == old(alloc);
  free ensures {:va_keep} locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} out_Irp_34 == in_Irp_34;
  free ensures {:va_keep} out_sdv_344 == in_sdv_344;
  free ensures {:va_keep} out_origIrql_11 == in_origIrql_11;
  free ensures {:va_keep} out_sdv_346 == in_sdv_346;
  free ensures {:va_keep} out_ListElement_1 == in_ListElement_1;
  free ensures {:va_keep} out_CancelIrql_8 == in_CancelIrql_8;
  free ensures {:va_keep} out_Tmp_614 == in_Tmp_614;
  free ensures {:va_keep} out_vslice_dummy_var_164 == in_vslice_dummy_var_164;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation WriteIrpStarter_loop_L24(in_Buffer: int, in_BufferEnd: int)
{

  entry:
    goto L24, exit;

  exit:
    return;

  L24:
    goto anon7_Else;

  anon7_Else:
    assume {:partition} in_BufferEnd > in_Buffer;
    assume {:nonnull} in_Buffer != 0;
    assume in_Buffer > 0;
    goto anon8_Then;

  anon8_Then:
    goto anon8_Then_dummy;

  anon8_Then_dummy:
    call {:si_unique_call 1675} {:si_old_unique_call 1} WriteIrpStarter_loop_L24(in_Buffer, in_BufferEnd);
    return;
}



procedure {:LoopProcedure} WriteIrpStarter_loop_L24(in_Buffer: int, in_BufferEnd: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation UniPassThroughStarter#0_loop_L6(in_newIrp_2: int, in_Tmp_667: int, in_Tmp_668: int, in_irp_3: int, in_passThroughType: int, in_Extension_8: int) returns (out_Tmp_667: int, out_Tmp_668: int, out_irp_3: int, out_passThroughType: int)
{
  var vslice_dummy_var_156: int;

  entry:
    out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType := in_Tmp_667, in_Tmp_668, in_irp_3, in_passThroughType;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc out_irp_3;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    havoc out_Tmp_668;
    assume {:nonnull} out_Tmp_668 != 0;
    assume out_Tmp_668 > 0;
    havoc out_passThroughType;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_passThroughType == 3;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    out_passThroughType := 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    havoc out_Tmp_667;
    assume {:nonnull} out_Tmp_667 != 0;
    assume out_Tmp_667 > 0;
    goto L9;

  L9:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_passThroughType != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_passThroughType == 1;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon21_Then;

  anon21_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  L23:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc vslice_dummy_var_156;
    call {:si_unique_call 1676} UniGetNextIrp(vslice_dummy_var_156, DeviceLock__DEVICE_EXTENSION(in_Extension_8), CurrentPassThrough__DEVICE_EXTENSION(in_Extension_8), PassThroughQueue__DEVICE_EXTENSION(in_Extension_8), in_newIrp_2, 1);
    assume {:nonnull} in_newIrp_2 != 0;
    assume in_newIrp_2 > 0;
    goto anon22_Then;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    call {:si_unique_call 1677} {:si_old_unique_call 1} out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType := UniPassThroughStarter#0_loop_L6(in_newIrp_2, out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType, in_Extension_8);
    return;

  anon19_Then:
    assume {:partition} out_passThroughType != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_passThroughType == 2;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon23_Then;

  anon23_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon20_Then:
    assume {:partition} out_passThroughType != 2;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon17_Then:
    assume {:partition} out_passThroughType == 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon18_Then;

  anon18_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon24_Then:
    assume {:partition} out_passThroughType != 3;
    goto L9;
}



procedure {:LoopProcedure} UniPassThroughStarter#0_loop_L6(in_newIrp_2: int, in_Tmp_667: int, in_Tmp_668: int, in_irp_3: int, in_passThroughType: int, in_Extension_8: int) returns (out_Tmp_667: int, out_Tmp_668: int, out_irp_3: int, out_passThroughType: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation UniPassThroughStarter#1_loop_L6(in_newIrp_2: int, in_Tmp_667: int, in_Tmp_668: int, in_irp_3: int, in_passThroughType: int, in_Extension_8: int) returns (out_Tmp_667: int, out_Tmp_668: int, out_irp_3: int, out_passThroughType: int)
{
  var vslice_dummy_var_157: int;

  entry:
    out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType := in_Tmp_667, in_Tmp_668, in_irp_3, in_passThroughType;
    goto L6, exit;

  exit:
    return;

  L6:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc out_irp_3;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    havoc out_Tmp_668;
    assume {:nonnull} out_Tmp_668 != 0;
    assume out_Tmp_668 > 0;
    havoc out_passThroughType;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} out_passThroughType == 3;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    out_passThroughType := 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    havoc out_Tmp_667;
    assume {:nonnull} out_Tmp_667 != 0;
    assume out_Tmp_667 > 0;
    goto L9;

  L9:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_passThroughType != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_passThroughType == 1;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon21_Then;

  anon21_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  L23:
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    havoc vslice_dummy_var_157;
    call {:si_unique_call 1678} UniGetNextIrp(vslice_dummy_var_157, DeviceLock__DEVICE_EXTENSION(in_Extension_8), CurrentPassThrough__DEVICE_EXTENSION(in_Extension_8), PassThroughQueue__DEVICE_EXTENSION(in_Extension_8), in_newIrp_2, 1);
    assume {:nonnull} in_newIrp_2 != 0;
    assume in_newIrp_2 > 0;
    goto anon22_Then;

  anon22_Then:
    goto anon22_Then_dummy;

  anon22_Then_dummy:
    call {:si_unique_call 1679} {:si_old_unique_call 1} out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType := UniPassThroughStarter#1_loop_L6(in_newIrp_2, out_Tmp_667, out_Tmp_668, out_irp_3, out_passThroughType, in_Extension_8);
    return;

  anon19_Then:
    assume {:partition} out_passThroughType != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_passThroughType == 2;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon23_Then;

  anon23_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon20_Then:
    assume {:partition} out_passThroughType != 2;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon17_Then:
    assume {:partition} out_passThroughType == 0;
    assume {:nonnull} in_Extension_8 != 0;
    assume in_Extension_8 > 0;
    goto anon18_Then;

  anon18_Then:
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    goto L23;

  anon24_Then:
    assume {:partition} out_passThroughType != 3;
    goto L9;
}



procedure {:LoopProcedure} UniPassThroughStarter#1_loop_L6(in_newIrp_2: int, in_Tmp_667: int, in_Tmp_668: int, in_irp_3: int, in_passThroughType: int, in_Extension_8: int) returns (out_Tmp_667: int, out_Tmp_668: int, out_irp_3: int, out_passThroughType: int);
  modifies alloc, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} locked == 0 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 3} HandleIpc#0_loop_L12(in_Tmp_16: int, in_PutIrp: int, in_Tmp_18: int, in_Tmp_19: int, in_Tmp_20: int, in_Sink: int, in_Tmp_22: int, in_sdv_5: int, in_GetIrp: int, in_Tmp_23: int, in_Tmp_24: int, in_Tmp_25: int, in_sdv_6: int, in_Tmp_26: int, in_Tmp_27: int, in_origIrql_2: int, in_sdv_7: int, in_sdv_10: int, in_BytesToCopy: int, in_sdv_12: int, in_CancelIrql_2: int, in_Tmp_29: int, in_Source: int, in_DeviceExtension: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int) returns (out_Tmp_16: int, out_PutIrp: int, out_Tmp_18: int, out_Tmp_19: int, out_Tmp_20: int, out_Sink: int, out_Tmp_22: int, out_sdv_5: int, out_GetIrp: int, out_Tmp_23: int, out_Tmp_24: int, out_Tmp_25: int, out_sdv_6: int, out_Tmp_26: int, out_Tmp_27: int, out_origIrql_2: int, out_sdv_7: int, out_sdv_10: int, out_BytesToCopy: int, out_sdv_12: int, out_CancelIrql_2: int, out_Tmp_29: int, out_Source: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int)
{
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;

  entry:
    out_Tmp_16, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Source, out_vslice_dummy_var_204, out_vslice_dummy_var_205 := in_Tmp_16, in_PutIrp, in_Tmp_18, in_Tmp_19, in_Tmp_20, in_Sink, in_Tmp_22, in_sdv_5, in_GetIrp, in_Tmp_23, in_Tmp_24, in_Tmp_25, in_sdv_6, in_Tmp_26, in_Tmp_27, in_origIrql_2, in_sdv_7, in_sdv_10, in_BytesToCopy, in_sdv_12, in_CancelIrql_2, in_Tmp_29, in_Source, in_vslice_dummy_var_204, in_vslice_dummy_var_205;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 2 > out_Source;
    call {:si_unique_call 1685} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1686} IoAcquireCancelSpinLock(out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_CancelIrql_2;
    out_Tmp_24 := out_Sink;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_22;
    assume {:nonnull} out_Tmp_22 != 0;
    assume out_Tmp_22 > 0;
    out_Tmp_23 := GetList__IPC_CONTROL(out_Tmp_22 + out_Tmp_24 * 24);
    call {:si_unique_call 1687} out_GetIrp := GetUsableIrp(out_Tmp_23);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} out_GetIrp != 0;
    out_Tmp_26 := out_Source;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_16;
    assume {:nonnull} out_Tmp_16 != 0;
    assume out_Tmp_16 > 0;
    out_Tmp_18 := PutList__IPC_CONTROL(out_Tmp_16 + out_Tmp_26 * 24);
    call {:si_unique_call 1688} out_PutIrp := GetUsableIrp(out_Tmp_18);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_PutIrp != 0;
    call {:si_unique_call 1695} out_vslice_dummy_var_204 := sdv_IoSetCancelRoutine(out_GetIrp, 0);
    call {:si_unique_call 1696} out_vslice_dummy_var_205 := sdv_IoSetCancelRoutine(out_PutIrp, 0);
    call {:si_unique_call 1697} IoReleaseCancelSpinLock(out_CancelIrql_2);
    call {:si_unique_call 1698} sdv_KeReleaseSpinLock(0, out_origIrql_2);
    call {:si_unique_call 1699} out_sdv_10 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    call {:si_unique_call 1700} out_sdv_5 := sdv_IoGetCurrentIrpStackLocation(out_GetIrp);
    assume {:nonnull} out_sdv_10 != 0;
    assume out_sdv_10 > 0;
    assume {:nonnull} out_sdv_5 != 0;
    assume out_sdv_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1693} out_sdv_7 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    assume {:nonnull} out_sdv_7 != 0;
    assume out_sdv_7 > 0;
    havoc out_Tmp_29;
    goto L64;

  L64:
    out_BytesToCopy := out_Tmp_29;
    call {:si_unique_call 1690} sdv_RtlCopyMemory(0, 0, out_BytesToCopy);
    assume {:nonnull} out_GetIrp != 0;
    assume out_GetIrp > 0;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc vslice_dummy_var_159;
    call {:si_unique_call 1691} RemoveReferenceAndCompleteRequest(vslice_dummy_var_159, out_GetIrp, 0);
    call {:si_unique_call 1692} out_sdv_6 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    assume {:nonnull} out_sdv_6 != 0;
    assume out_sdv_6 > 0;
    goto anon15_Then;

  anon15_Then:
    assume {:nonnull} out_PutIrp != 0;
    assume out_PutIrp > 0;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc vslice_dummy_var_158;
    call {:si_unique_call 1689} RemoveReferenceAndCompleteRequest(vslice_dummy_var_158, out_PutIrp, 0);
    goto L100;

  L100:
    call {:si_unique_call 1680} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1681} sdv_KeAcquireSpinLock(0, out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_origIrql_2;
    goto L103;

  L103:
    out_Source := out_Source + 1;
    out_Sink := out_Sink - 1;
    goto L103_dummy;

  L103_dummy:
    call {:si_unique_call 1701} {:si_old_unique_call 1} out_Tmp_16, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Source, out_vslice_dummy_var_204, out_vslice_dummy_var_205 := HandleIpc#0_loop_L12(out_Tmp_16, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Source, in_DeviceExtension, out_vslice_dummy_var_204, out_vslice_dummy_var_205);
    return;

  anon14_Then:
    call {:si_unique_call 1694} out_sdv_12 := sdv_IoGetCurrentIrpStackLocation(out_GetIrp);
    assume {:nonnull} out_sdv_12 != 0;
    assume out_sdv_12 > 0;
    havoc out_Tmp_29;
    goto L64;

  anon13_Then:
    assume {:partition} out_PutIrp == 0;
    out_Tmp_20 := out_Sink;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_25;
    assume {:nonnull} out_Tmp_25 != 0;
    assume out_Tmp_25 > 0;
    out_Tmp_19 := GetList__IPC_CONTROL(out_Tmp_25 + out_Tmp_20 * 24);
    assume {:nonnull} out_GetIrp != 0;
    assume out_GetIrp > 0;
    call {:si_unique_call 1682} InsertHeadList(out_Tmp_19, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_GetIrp))));
    call {:si_unique_call 1683} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L103;

  anon12_Then:
    assume {:partition} out_GetIrp == 0;
    call {:si_unique_call 1684} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L103;
}



procedure {:LoopProcedure} HandleIpc#0_loop_L12(in_Tmp_16: int, in_PutIrp: int, in_Tmp_18: int, in_Tmp_19: int, in_Tmp_20: int, in_Sink: int, in_Tmp_22: int, in_sdv_5: int, in_GetIrp: int, in_Tmp_23: int, in_Tmp_24: int, in_Tmp_25: int, in_sdv_6: int, in_Tmp_26: int, in_Tmp_27: int, in_origIrql_2: int, in_sdv_7: int, in_sdv_10: int, in_BytesToCopy: int, in_sdv_12: int, in_CancelIrql_2: int, in_Tmp_29: int, in_Source: int, in_DeviceExtension: int, in_vslice_dummy_var_204: int, in_vslice_dummy_var_205: int) returns (out_Tmp_16: int, out_PutIrp: int, out_Tmp_18: int, out_Tmp_19: int, out_Tmp_20: int, out_Sink: int, out_Tmp_22: int, out_sdv_5: int, out_GetIrp: int, out_Tmp_23: int, out_Tmp_24: int, out_Tmp_25: int, out_sdv_6: int, out_Tmp_26: int, out_Tmp_27: int, out_origIrql_2: int, out_sdv_7: int, out_sdv_10: int, out_BytesToCopy: int, out_sdv_12: int, out_CancelIrql_2: int, out_Tmp_29: int, out_Source: int, out_vslice_dummy_var_204: int, out_vslice_dummy_var_205: int);
  modifies alloc, queued, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> locked == old(locked);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queued == old(queued);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 1 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} out_PutIrp == 0 || out_PutIrp == in_PutIrp;
  free ensures {:va_keep} out_GetIrp == 0 || out_GetIrp == in_GetIrp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:SIextraRecBound 3} HandleIpc#1_loop_L12(in_Tmp_16: int, in_Tmp_17: int, in_PutIrp: int, in_Tmp_18: int, in_Tmp_19: int, in_Tmp_20: int, in_Sink: int, in_Tmp_22: int, in_sdv_5: int, in_GetIrp: int, in_Tmp_23: int, in_Tmp_24: int, in_Tmp_25: int, in_sdv_6: int, in_Tmp_26: int, in_Tmp_27: int, in_origIrql_2: int, in_sdv_7: int, in_Tmp_28: int, in_sdv_10: int, in_BytesToCopy: int, in_sdv_12: int, in_CancelIrql_2: int, in_Tmp_29: int, in_Tmp_30: int, in_Source: int, in_DeviceExtension: int, in_vslice_dummy_var_209: int, in_vslice_dummy_var_210: int, in_vslice_dummy_var_211: int, in_vslice_dummy_var_212: int) returns (out_Tmp_16: int, out_Tmp_17: int, out_PutIrp: int, out_Tmp_18: int, out_Tmp_19: int, out_Tmp_20: int, out_Sink: int, out_Tmp_22: int, out_sdv_5: int, out_GetIrp: int, out_Tmp_23: int, out_Tmp_24: int, out_Tmp_25: int, out_sdv_6: int, out_Tmp_26: int, out_Tmp_27: int, out_origIrql_2: int, out_sdv_7: int, out_Tmp_28: int, out_sdv_10: int, out_BytesToCopy: int, out_sdv_12: int, out_CancelIrql_2: int, out_Tmp_29: int, out_Tmp_30: int, out_Source: int, out_vslice_dummy_var_209: int, out_vslice_dummy_var_210: int, out_vslice_dummy_var_211: int, out_vslice_dummy_var_212: int)
{
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;

  entry:
    out_Tmp_16, out_Tmp_17, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_Tmp_28, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Tmp_30, out_Source, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212 := in_Tmp_16, in_Tmp_17, in_PutIrp, in_Tmp_18, in_Tmp_19, in_Tmp_20, in_Sink, in_Tmp_22, in_sdv_5, in_GetIrp, in_Tmp_23, in_Tmp_24, in_Tmp_25, in_sdv_6, in_Tmp_26, in_Tmp_27, in_origIrql_2, in_sdv_7, in_Tmp_28, in_sdv_10, in_BytesToCopy, in_sdv_12, in_CancelIrql_2, in_Tmp_29, in_Tmp_30, in_Source, in_vslice_dummy_var_209, in_vslice_dummy_var_210, in_vslice_dummy_var_211, in_vslice_dummy_var_212;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 2 > out_Source;
    call {:si_unique_call 1707} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1708} IoAcquireCancelSpinLock(out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_CancelIrql_2;
    out_Tmp_24 := out_Sink;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_22;
    assume {:nonnull} out_Tmp_22 != 0;
    assume out_Tmp_22 > 0;
    out_Tmp_23 := GetList__IPC_CONTROL(out_Tmp_22 + out_Tmp_24 * 24);
    call {:si_unique_call 1709} out_GetIrp := GetUsableIrp(out_Tmp_23);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} out_GetIrp != 0;
    out_Tmp_26 := out_Source;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_16;
    assume {:nonnull} out_Tmp_16 != 0;
    assume out_Tmp_16 > 0;
    out_Tmp_18 := PutList__IPC_CONTROL(out_Tmp_16 + out_Tmp_26 * 24);
    call {:si_unique_call 1710} out_PutIrp := GetUsableIrp(out_Tmp_18);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_PutIrp != 0;
    call {:si_unique_call 1726} out_vslice_dummy_var_209 := sdv_IoSetCancelRoutine(out_GetIrp, 0);
    call {:si_unique_call 1727} out_vslice_dummy_var_210 := sdv_IoSetCancelRoutine(out_PutIrp, 0);
    call {:si_unique_call 1728} IoReleaseCancelSpinLock(out_CancelIrql_2);
    call {:si_unique_call 1729} sdv_KeReleaseSpinLock(0, out_origIrql_2);
    call {:si_unique_call 1730} out_sdv_10 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    call {:si_unique_call 1731} out_sdv_5 := sdv_IoGetCurrentIrpStackLocation(out_GetIrp);
    assume {:nonnull} out_sdv_10 != 0;
    assume out_sdv_10 > 0;
    assume {:nonnull} out_sdv_5 != 0;
    assume out_sdv_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 1724} out_sdv_7 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    assume {:nonnull} out_sdv_7 != 0;
    assume out_sdv_7 > 0;
    havoc out_Tmp_29;
    goto L64;

  L64:
    out_BytesToCopy := out_Tmp_29;
    call {:si_unique_call 1721} sdv_RtlCopyMemory(0, 0, out_BytesToCopy);
    assume {:nonnull} out_GetIrp != 0;
    assume out_GetIrp > 0;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc vslice_dummy_var_161;
    call {:si_unique_call 1722} RemoveReferenceAndCompleteRequest(vslice_dummy_var_161, out_GetIrp, 0);
    call {:si_unique_call 1723} out_sdv_6 := sdv_IoGetCurrentIrpStackLocation(out_PutIrp);
    assume {:nonnull} out_sdv_6 != 0;
    assume out_sdv_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 1711} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1712} sdv_KeAcquireSpinLock(0, out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_origIrql_2;
    assume {:nonnull} out_PutIrp != 0;
    assume out_PutIrp > 0;
    out_Tmp_28 := out_Source;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_17;
    assume {:nonnull} out_Tmp_17 != 0;
    assume out_Tmp_17 > 0;
    out_Tmp_30 := GetList__IPC_CONTROL(out_Tmp_17 + out_Tmp_28 * 24);
    assume {:nonnull} out_PutIrp != 0;
    assume out_PutIrp > 0;
    call {:si_unique_call 1713} out_vslice_dummy_var_212 := sdv_InsertTailList(out_Tmp_30, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_PutIrp))));
    call {:si_unique_call 1714} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1715} IoAcquireCancelSpinLock(out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_CancelIrql_2;
    call {:si_unique_call 1716} out_vslice_dummy_var_211 := sdv_IoSetCancelRoutine(out_PutIrp, li2bplFunctionConstant587);
    call {:si_unique_call 1717} IoReleaseCancelSpinLock(out_CancelIrql_2);
    call {:si_unique_call 1718} sdv_KeReleaseSpinLock(0, out_origIrql_2);
    call {:si_unique_call 1719} HandleIpc#0(in_DeviceExtension);
    goto L100;

  L100:
    call {:si_unique_call 1702} out_Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    call {:si_unique_call 1703} sdv_KeAcquireSpinLock(0, out_Tmp_27);
    assume {:nonnull} out_Tmp_27 != 0;
    assume out_Tmp_27 > 0;
    havoc out_origIrql_2;
    goto L103;

  L103:
    out_Source := out_Source + 1;
    out_Sink := out_Sink - 1;
    goto L103_dummy;

  L103_dummy:
    call {:si_unique_call 1732} {:si_old_unique_call 1} out_Tmp_16, out_Tmp_17, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_Tmp_28, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Tmp_30, out_Source, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212 := HandleIpc#1_loop_L12(out_Tmp_16, out_Tmp_17, out_PutIrp, out_Tmp_18, out_Tmp_19, out_Tmp_20, out_Sink, out_Tmp_22, out_sdv_5, out_GetIrp, out_Tmp_23, out_Tmp_24, out_Tmp_25, out_sdv_6, out_Tmp_26, out_Tmp_27, out_origIrql_2, out_sdv_7, out_Tmp_28, out_sdv_10, out_BytesToCopy, out_sdv_12, out_CancelIrql_2, out_Tmp_29, out_Tmp_30, out_Source, in_DeviceExtension, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212);
    return;

  anon15_Then:
    assume {:nonnull} out_PutIrp != 0;
    assume out_PutIrp > 0;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc vslice_dummy_var_160;
    call {:si_unique_call 1720} RemoveReferenceAndCompleteRequest(vslice_dummy_var_160, out_PutIrp, 0);
    goto L100;

  anon14_Then:
    call {:si_unique_call 1725} out_sdv_12 := sdv_IoGetCurrentIrpStackLocation(out_GetIrp);
    assume {:nonnull} out_sdv_12 != 0;
    assume out_sdv_12 > 0;
    havoc out_Tmp_29;
    goto L64;

  anon13_Then:
    assume {:partition} out_PutIrp == 0;
    out_Tmp_20 := out_Sink;
    assume {:nonnull} in_DeviceExtension != 0;
    assume in_DeviceExtension > 0;
    havoc out_Tmp_25;
    assume {:nonnull} out_Tmp_25 != 0;
    assume out_Tmp_25 > 0;
    out_Tmp_19 := GetList__IPC_CONTROL(out_Tmp_25 + out_Tmp_20 * 24);
    assume {:nonnull} out_GetIrp != 0;
    assume out_GetIrp > 0;
    call {:si_unique_call 1704} InsertHeadList(out_Tmp_19, ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_GetIrp))));
    call {:si_unique_call 1705} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L103;

  anon12_Then:
    assume {:partition} out_GetIrp == 0;
    call {:si_unique_call 1706} IoReleaseCancelSpinLock(out_CancelIrql_2);
    goto L103;
}



procedure {:LoopProcedure} HandleIpc#1_loop_L12(in_Tmp_16: int, in_Tmp_17: int, in_PutIrp: int, in_Tmp_18: int, in_Tmp_19: int, in_Tmp_20: int, in_Sink: int, in_Tmp_22: int, in_sdv_5: int, in_GetIrp: int, in_Tmp_23: int, in_Tmp_24: int, in_Tmp_25: int, in_sdv_6: int, in_Tmp_26: int, in_Tmp_27: int, in_origIrql_2: int, in_sdv_7: int, in_Tmp_28: int, in_sdv_10: int, in_BytesToCopy: int, in_sdv_12: int, in_CancelIrql_2: int, in_Tmp_29: int, in_Tmp_30: int, in_Source: int, in_DeviceExtension: int, in_vslice_dummy_var_209: int, in_vslice_dummy_var_210: int, in_vslice_dummy_var_211: int, in_vslice_dummy_var_212: int) returns (out_Tmp_16: int, out_Tmp_17: int, out_PutIrp: int, out_Tmp_18: int, out_Tmp_19: int, out_Tmp_20: int, out_Sink: int, out_Tmp_22: int, out_sdv_5: int, out_GetIrp: int, out_Tmp_23: int, out_Tmp_24: int, out_Tmp_25: int, out_sdv_6: int, out_Tmp_26: int, out_Tmp_27: int, out_origIrql_2: int, out_sdv_7: int, out_Tmp_28: int, out_sdv_10: int, out_BytesToCopy: int, out_sdv_12: int, out_CancelIrql_2: int, out_Tmp_29: int, out_Tmp_30: int, out_Source: int, out_vslice_dummy_var_209: int, out_vslice_dummy_var_210: int, out_vslice_dummy_var_211: int, out_vslice_dummy_var_212: int);
  modifies alloc, queued, locked, queuedWithoutMarking;
  free ensures {:va_keep} old(locked) == 0 ==> locked != 1;
  free ensures {:va_keep} old(locked) == 1 ==> locked != 0;
  free ensures {:va_keep} old(queued) == 1 ==> queued != 0;
  free ensures {:va_keep} old(queued) == 0 ==> queued != 1;
  free ensures {:va_keep} old(queuedWithoutMarking) == 1 ==> queuedWithoutMarking != 0;
  free ensures {:va_keep} old(queuedWithoutMarking) == 0 ==> queuedWithoutMarking != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> locked == old(locked);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queued == old(queued);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} queued == 1 || queued == old(queued);
  free ensures {:va_keep} locked == 1 || locked == old(locked);
  free ensures {:va_keep} queuedWithoutMarking == 1 || queuedWithoutMarking == old(queuedWithoutMarking);
  free ensures {:va_keep} out_PutIrp == 0 || out_PutIrp == in_PutIrp;
  free ensures {:va_keep} out_GetIrp == 0 || out_GetIrp == in_GetIrp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



procedure fakeMain() returns (Tmp_239: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, stack_location, markedPending, queuedWithoutMarking, queued, locked, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(locked) == 0 || old(locked) == 1;
  free ensures {:va_keep} false || old(markedPending) == 1 || old(markedPending) == 0;
  free ensures {:va_keep} false || old(queued) == 1 || old(queued) == 0;
  free ensures {:va_keep} false || old(queuedWithoutMarking) == 1 || old(queuedWithoutMarking) == 0;
  free ensures {:va_keep} false || old(stack_location) == 0 || old(stack_location) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || locked == 0 || locked == 1;
  free ensures {:va_keep} false || markedPending == 1 || markedPending == 0;
  free ensures {:va_keep} false || queued == 1 || queued == 0;
  free ensures {:va_keep} false || queuedWithoutMarking == 1 || queuedWithoutMarking == 0;
  free ensures {:va_keep} false || stack_location == 0 || stack_location == 1;



implementation {:entrypoint} fakeMain() returns (Tmp_239: int, dup_assertVar: bool)
{

  start:
    call Tmp_239, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


