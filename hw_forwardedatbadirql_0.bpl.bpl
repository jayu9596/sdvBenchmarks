var {:scalar} alloc: int;

var {:scalar} sdv_irql_previous_5: int;

var {:scalar} sdv_irql_previous_2: int;

var {:scalar} sdv_irql_current: int;

var {:scalar} sdv_irql_previous: int;

var {:scalar} sdv_irql_previous_4: int;

var {:scalar} sdv_irql_previous_3: int;

var {:scalar} yogi_error: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} Mem_T.INT4: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const DEVPKEY_Device_ProblemCode: int;

const DEVPKEY_Device_DHP_Rebalance_Policy: int;

const GUID_NWF_DATA_RATE_MAPPING_TABLE: int;

const DEVPKEY_DeviceContainer_IsMetadataSearchInProgress: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceContainer_IsShowInDisconnectedState: int;

const GUID_NWF_FRAGMENTATION_THRESHOLD: int;

const GUID_NWF_MAX_MAC_ADDRESS_STATES: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const DEVPKEY_Device_SafeRemovalRequired: int;

const DEVPKEY_PciRootBus_PCIExpressAERControl: int;

const DEVPKEY_PciDevice_BaseClass: int;

const GUID_NWF_ACTIVE_PHY_LIST: int;

const DEVPKEY_Device_ResourcePickerTags: int;

const DEVPKEY_DeviceContainer_IsPaired: int;

const DEVPKEY_Device_HardwareIds: int;

const DEVPKEY_DeviceContainer_InstallInProgress: int;

const DEVPKEY_PciDevice_MaxPayloadSize: int;

const GUID_NWF_COUNTRY_STRING: int;

const DEVPKEY_Device_LowerFilters: int;

const DEVPKEY_Device_FirmwareVersion: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_NWF_CURRENT_INDEX: int;

const GUID_NWF_TI_THRESHOLD: int;

const GUID_NWF_ERP_PBCC_OPTION_ENABLED: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const DEVPKEY_PciDevice_BarTypes: int;

const GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM: int;

const GUID_POWER_CONSERVATION_IDLE_TIME: int;

const GUID_NWF_RECV_SENSITIVITY_LIST: int;

const DEVPKEY_DeviceClass_UpperFilters: int;

const DEVPKEY_DeviceClass_NoInstallClass: int;

const GUID_NWF_RANDOM_TABLE_FLAG: int;

const DEVPKEY_Device_DeviceDesc: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Mask: int;

const GUID_NWF_RF_USAGE: int;

const DEVPKEY_DeviceContainer_IsEncrypted: int;

const DEVPKEY_Device_LastArrivalDate: int;

const GUID_NWF_RSSI_RANGE: int;

const GUID_NWF_CURRENT_PHY_ID: int;

const GUID_NWF_JOIN_REQUEST: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_Characteristics: int;

const DEVPKEY_DrvPkg_DetailedDescription: int;

const DEVPKEY_DeviceContainer_DeviceDescription2: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Desc: int;

const DEVPKEY_PciRootBus_CurrentSpeedAndMode: int;

const GUID_NWF_RTS_THRESHOLD: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Icon: int;

const DEVPKEY_DeviceInterfaceClass_Name: int;

const GUID_NWF_PRIVACY_EXEMPTION_LIST: int;

const DEVPKEY_Device_InstanceId: int;

const GUID_NWF_SUPPORTED_RX_ANTENNA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_LastRemovalDate: int;

const DEVPKEY_DeviceContainer_RequiresPairingElevation: int;

const GUID_NWF_POWER_MGMT_MODE: int;

const GUID_NWF_ED_THRESHOLD: int;

const DEVPKEY_DeviceContainer_RequiresUninstallElevation: int;

const GUID_NWF_OPERATION_MODE_CAPABILITY: int;

const DEVPKEY_Device_Manufacturer: int;

const DEVPKEY_Device_DriverLogoLevel: int;

const DEVPKEY_DeviceContainer_Address: int;

const DEVPKEY_DeviceContainer_IsAuthenticated: int;

const DEVPKEY_PciDevice_SubClass: int;

const GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames: int;

const GUID_NWF_PERMANENT_ADDRESS: int;

const DEVPKEY_Device_ConfigurationId: int;

const GUID_NWF_CURRENT_TX_POWER_LEVEL: int;

const GUID_DEVINTERFACE_PCIDRV: int;

const DEVPKEY_Device_HasProblem: int;

const DEVPKEY_DeviceContainer_Category_Desc_Plural: int;

const GUID_NWF_MEDIA_STREAMING_ENABLED: int;

const DEVPKEY_PciDevice_AriSupport: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MAX: int;

const GUID_NWF_PMKID_LIST: int;

const DEVPKEY_PciRootBus_DeviceIDMessagingCapable: int;

const DEVPKEY_Device_PhysicalDeviceLocation: int;

const DEVPKEY_DeviceContainer_Version: int;

const GUID_NWF_BEACON_PERIOD: int;

const GUID_NWF_DESIRED_SSID_LIST: int;

const DEVPKEY_PciRootBus_ASPMSupport: int;

const GUID_NWF_CURRENT_OFFLOAD_CAPABILITY: int;

const DEVPKEY_Device_PostInstallInProgress: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_Driver: int;

const DEVPKEY_PciDevice_CurrentPayloadSize: int;

const GUID_NWF_DSSS_OFDM_OPTION_ENABLED: int;

const GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST: int;

const DEVPKEY_Device_InstallState: int;

const GUID_NWF_MAX_DWELL_TIME: int;

const GUID_NWF_WPA_TSC: int;

const GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED: int;

const GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM: int;

const GUID_BUS_TYPE_PCI: int;

const DEVPKEY_PciDevice_Label_String: int;

const GUID_NWF_NUMBER_OF_HOPPING_SETS: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const DEVPKEY_Device_FirmwareDate: int;

const DEVPKEY_PciDevice_SriovSupport: int;

const GUID_NWF_SAFE_MODE_ENABLED: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceInterface_FriendlyName: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Severity: int;

const DEVPKEY_PciDevice_S0WakeupSupported: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const DEVPKEY_PciDevice_InterruptSupport: int;

const DEVPKEY_PciDevice_Label_Id: int;

const DEVPKEY_Device_CompatibleIds: int;

const DEVPKEY_Device_ReportedDeviceIdsHash: int;

const DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport: int;

const GUID_NWF_CURRENT_CHANNEL: int;

const GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED: int;

const DEVPKEY_Device_DriverPropPageProvider: int;

const DEVPKEY_DeviceContainer_UnpairUninstall: int;

const DEVPKEY_PciDevice_CurrentLinkSpeed: int;

const GUID_NWF_NIC_SPECIFIC_EXTENSION: int;

const DEVPKEY_Device_BiosDeviceName: int;

const GUID_NWF_CFP_MAX_DURATION: int;

const GUID_NWF_HOPPING_PATTERN: int;

const GUID_NWF_CURRENT_CHANNEL_NUMBER: int;

const GUID_NWF_DISCONNECT_REQUEST: int;

const GUID_NWF_CURRENT_PACKET_FILTER: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PowerRelations: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer: int;

const GUID_NWF_SUPPORTED_PHY_TYPES: int;

const GUID_NWF_HOP_ALGORITHM_ADOPTED: int;

const DEVPKEY_DrvPkg_BrandingIcon: int;

const DEVPKEY_DeviceClass_Characteristics: int;

const GUID_NWF_SCAN_REQUEST: int;

const GUID_NWF_DESIRED_BSS_TYPE: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const DEVPKEY_Device_MatchingDeviceId: int;

const GUID_NWF_EXCLUDE_UNENCRYPTED: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST: int;

const DEVPKEY_Device_PDOName: int;

const DEVPKEY_Device_Address: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Exclusive: int;

const DEVPKEY_PciDevice_Correctable_Error_Mask: int;

const DEVPKEY_DeviceContainer_DeviceDescription1: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED: int;

const DEVPKEY_DeviceContainer_Manufacturer: int;

const DEVPKEY_DeviceClass_NoUseClass: int;

const GUID_NWF_SUPPORTED_DATA_RATES_VALUE: int;

const GUID_NWF_CHANNEL_AGILITY_ENABLED: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_MaxLinkWidth: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_DevNodeStatus: int;

const GUID_NWF_WME_ENABLED: int;

const DEVPKEY_Device_DriverProvider: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Icon: int;

const DEVPKEY_PciDevice_CurrentSpeedAndMode: int;

const DEVPKEY_PciDevice_AERCapabilityPresent: int;

const GUID_NWF_WME_AC_PARAMETERS: int;

const DEVPKEY_Device_ModelId: int;

const GUID_NWF_AP_JOIN_REQUEST: int;

const DEVPKEY_DeviceContainer_PrimaryCategory: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_Children: int;

const DEVPKEY_Device_Stack: int;

const DEVPKEY_DeviceContainer_IsLocalMachine: int;

const GUID_NWF_MPDU_MAX_LENGTH: int;

const GUID_NWF_CURRENT_OPTIONAL_CAPABILITY: int;

const DEVPKEY_Device_DriverDate: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_NWF_STATION_ID: int;

const GUID_NWF_REG_DOMAINS_SUPPORT_VALUE: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect: int;

const GUID_NWF_MEDIUM_OCCUPANCY_LIMIT: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_DeviceFunctionSubRank: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const DEVPKEY_Device_DriverDesc: int;

const GUID_NWF_HOP_MODULUS: int;

const DEVPKEY_DeviceClass_NoDisplayClass: int;

const GUID_NWF_OFFLOAD_CAPABILITY: int;

const GUID_NWF_SUPPORTED_POWER_LEVELS: int;

const GUID_NWF_DIVERSITY_SELECTION_RX: int;

const GUID_NWF_WME_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const DEVPKEY_Device_BusNumber: int;

const DEVPKEY_Device_PowerData: int;

const DEVPKEY_Device_ConfigFlags: int;

const DEVPKEY_PciDevice_MaxReadRequestSize: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_BUS_TYPE_AVC: int;

const DEVPKEY_DeviceContainer_MetadataPath: int;

const GUID_NWF_CIPHER_DEFAULT_KEY_ID: int;

const GUID_NWF_CURRENT_SET: int;

const GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR: int;

const DEVPKEY_DeviceContainer_FriendlyName: int;

const DEVPKEY_PciRootBus_SupportedSpeedsAndModes: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PresenceNotForDevice: int;

const GUID_NWF_DESIRED_BSSID_LIST: int;

const GUID_NWF_ENUM_ASSOCIATION_INFO: int;

const DEVPKEY_DeviceInterface_ClassGuid: int;

const DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable: int;

const DEVPKEY_Device_FriendlyNameAttributes: int;

const GUID_NWF_NIC_POWER_STATE: int;

const GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST: int;

const DEVPKEY_Device_SessionId: int;

const DEVPKEY_DeviceInterface_Enabled: int;

const DEVPKEY_DeviceInterface_Restricted: int;

const GUID_NWF_FREQUENCY_BANDS_SUPPORTED: int;

const DEVPKEY_Device_TransportRelations: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const DEVPKEY_NAME: int;

const DEVPKEY_Device_UINumberDescFormat: int;

const GUID_NWF_WEP_OFFLOAD: int;

const GUID_NWF_UPDATE_IE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const DEVPKEY_DeviceClass_ClassCoInstallers: int;

const GUID_NWF_POWER_MGMT_REQUEST: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const DEVPKEY_Device_FriendlyName: int;

const DEVPKEY_Device_LocationInfo: int;

const DEVPKEY_DeviceContainer_Category_Icon: int;

const GUID_NWF_DESIRED_PHY_LIST: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MAX: int;

const DEVPKEY_Device_Exclusive: int;

const GUID_NWF_CIPHER_KEY_MAPPING_KEY: int;

const DEVPKEY_Device_Numa_Proximity_Domain: int;

const GUID_NWF_QOS_TX_DURATION: int;

const DEVPKEY_Device_DriverProblemDesc: int;

const DEVPKEY_DeviceContainer_IsSharedDevice: int;

const GUID_NWF_CURRENT_DWELL_TIME: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_CurrentLinkWidth: int;

const DEVPKEY_Device_UINumber: int;

const DEVPKEY_Device_ExtendedConfigurationIds: int;

const DEVPKEY_Device_DriverRank: int;

const DEVPKEY_DeviceContainer_IsRebootRequired: int;

const DEVPKEY_PciRootBus_PCIExpressNativePMEControl: int;

const GUID_NWF_PORT_STATE_NOTIFICATION: int;

const DEVPKEY_Device_SafeRemovalRequiredOverride: int;

const DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl: int;

const DEVPKEY_PciDevice_DeviceType: int;

const GUID_NWF_QOS_TX_MEDIUM_TIME: int;

const GUID_NWF_DIVERSITY_SUPPORT: int;

const GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR: int;

const DEVPKEY_Device_DriverInfSection: int;

const DEVPKEY_DeviceClass_PropPageProvider: int;

const GUID_NWF_TEMP_TYPE: int;

const DEVPKEY_Device_Class: int;

const DEVPKEY_Device_NoConnectSound: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_DevType: int;

const GUID_NWF_CURRENT_PATTERN: int;

const DEVPKEY_Device_ManufacturerAttributes: int;

const GUID_NWF_ENUM_BSS_LIST: int;

const GUID_BUS_TYPE_ISAPNP: int;

const DEVPKEY_Device_Reported: int;

const DEVPKEY_PciRootBus_NativePciExpressControl: int;

const GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME: int;

const DEVPKEY_DeviceContainer_IsNetworkDevice: int;

const DEVPKEY_Device_ResourcePickerExceptions: int;

const GUID_NWF_OPERATIONAL_RATE_SET: int;

const GUID_BUS_TYPE_ACPI: int;

const DEVPKEY_Device_RemovalPolicyDefault: int;

const DEVPKEY_Device_ProblemStatus: int;

const GUID_NWF_WEP_UPLOAD: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_IsNotInterestingForDisplay: int;

const GUID_NWF_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const DEVPKEY_Device_EjectionRelations: int;

const GUID_BUS_TYPE_EISA: int;

const DEVPKEY_PciDevice_MaxLinkSpeed: int;

const DEVPKEY_PciDevice_FirmwareErrorHandling: int;

const GUID_NWF_CURRENT_OPERATION_MODE: int;

const GUID_NWF_STATISTICS: int;

const DEVPKEY_Device_IsAssociateableByUserAction: int;

const DEVPKEY_DrvPkg_Icon: int;

const DEVPKEY_PciDevice_ProgIf: int;

const DEVPKEY_Device_AdditionalSoftwareRequested: int;

const GUID_NWF_CHANNEL_AGILITY_PRESENT: int;

const DEVPKEY_Device_LocationPaths: int;

const GUID_NWF_CURRENT_FREQUENCY: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const DEVPKEY_DeviceClass_SilentInstall: int;

const DEVPKEY_Device_LegacyBusType: int;

const DEVPKEY_DeviceContainer_IsDefaultDevice: int;

const GUID_BUS_TYPE_IRDA: int;

const DEVPKEY_Device_UpperFilters: int;

const DEVPKEY_Device_DevType: int;

const DEVPKEY_Device_DriverInfPath: int;

const DEVPKEY_DeviceInterface_ReferenceString: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MIN: int;

const GUID_NWF_PBCC_OPTION_IMPLEMENTED: int;

const GUID_POWER_PERFORMANCE_IDLE_TIME: int;

const DEVPKEY_Device_IsRebootRequired: int;

const DEVPKEY_DeviceClass_ClassInstaller: int;

const DEVPKEY_DeviceContainer_IsConnected: int;

const DEVPKEY_DeviceContainer_Icon: int;

const GUID_BUS_TYPE_MCA: int;

const DEVPKEY_DeviceContainer_Category_Desc_Singular: int;

const DEVPKEY_Device_SecuritySDS: int;

const DEVPKEY_DeviceClass_DHPRebalanceOptOut: int;

const GUID_NWF_CFP_PERIOD: int;

const GUID_NWF_EHCC_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_InstallDate: int;

const DEVPKEY_DeviceClass_LowerFilters: int;

const DEVPKEY_DeviceContainer_MetadataChecksum: int;

const DEVPKEY_DeviceClass_DefaultService: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_NWF_WEP_ICV_ERROR_COUNT: int;

const DEVPKEY_DrvPkg_VendorWebSite: int;

const DEVPKEY_DeviceContainer_ConfigFlags: int;

const DEVPKEY_PciDevice_AcsSupport: int;

const DEVPKEY_Device_RemovalRelations: int;

const DEVPKEY_DrvPkg_DocumentationLink: int;

const GUID_NWF_MULTICAST_LIST: int;

const GUID_NWF_DEFAULT_WEP_UPLOAD: int;

const GUID_NWF_RESET_REQUEST: int;

const DEVPKEY_Device_BusTypeGuid: int;

const GUID_NWF_DTIM_PERIOD: int;

const GUID_NWF_RANDOM_TABLE_FIELD_NUMBER: int;

const GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING: int;

const DEVPKEY_Device_ShowInUninstallUI: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED: int;

const GUID_NWF_CURRENT_ADDRESS: int;

const DEVPKEY_Device_ContainerId: int;

const DEVPKEY_Device_InLocalMachineContainer: int;

const DEVPKEY_DeviceContainer_ExperienceId: int;

const GUID_NWF_CURRENT_RX_ANTENNA: int;

const GUID_NWF_CIPHER_DEFAULT_KEY: int;

const DEVPKEY_Device_FirmwareRevision: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_NWF_SUPPORTED_TX_ANTENNA: int;

const DEVPKEY_DeviceContainer_BaselineExperienceId: int;

const DEVPKEY_PciRootBus_SecondaryInterface: int;

const GUID_NWF_CONNECT_REQUEST: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED: int;

const GUID_NWF_EXTSTA_CAPABILITY: int;

const DEVPKEY_Device_Security: int;

const DEVPKEY_DeviceClass_SecuritySDS: int;

const GUID_BUS_TYPE_SD: int;

const DEVPKEY_Device_EnumeratorName: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const DEVPKEY_DeviceClass_Security: int;

const DEVPKEY_DeviceContainer_Last_Seen: int;

const DEVPKEY_PciRootBus_ExtendedConfigAvailable: int;

const DEVPKEY_Device_ClassGuid: int;

const DEVPKEY_Device_FirstInstallDate: int;

const GUID_NWF_MAXIMUM_LIST_SIZE: int;

const GUID_BUS_TYPE_HID: int;

const GUID_NWF_IBSS_PARAMS: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_NWF_ATIM_WINDOW: int;

const GUID_NWF_CF_POLLABLE: int;

const GUID_NWF_MAC_ADDRESS: int;

const DEVPKEY_Device_BusReportedDeviceDesc: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const GUID_NWF_HOP_TIME: int;

const DEVPKEY_Device_RemovalPolicy: int;

const DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames: int;

const GUID_NWF_START_REQUEST: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const DEVPKEY_DeviceClass_Name: int;

const DEVPKEY_DeviceContainer_ModelName: int;

const DEVPKEY_Device_IsPresent: int;

const GUID_BUS_TYPE_1394: int;

const DEVPKEY_Device_RemovalPolicyOverride: int;

const DEVPKEY_Device_Model: int;

const DEVPKEY_PciDevice_RootError_Reporting: int;

const GUID_NWF_SHORT_RETRY_LIMIT: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY: int;

const DEVPKEY_DeviceContainer_DiscoveryMethod: int;

const DEVPKEY_Device_DriverInfSectionExt: int;

const DEVPKEY_DeviceClass_ClassName: int;

const DEVPKEY_PciRootBus_SystemMsiSupport: int;

const GUID_NWF_QOS_TX_QUEUES_SUPPORTED: int;

const GUID_NWF_HOP_OFFSET: int;

const DEVPKEY_DeviceContainer_AssociationArray: int;

const DEVPKEY_PciRootBus_SecondaryBusWidth: int;

const GUID_NWF_ASSOCIATION_PARAMS: int;

const DEVPKEY_PciRootBus_SHPCNativeHotPlugControl: int;

const DEVPKEY_Device_BaseContainerId: int;

const GUID_NWF_FLUSH_BSS_LIST: int;

const GUID_NWF_CURRENT_TX_ANTENNA: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const DEVPKEY_Device_BusRelations: int;

const GUID_NWF_HR_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_SERENUM: int;

const DEVPKEY_DeviceContainer_ModelNumber: int;

const PCIDRV_WMI_STD_DATA_GUID: int;

const DEVPKEY_DeviceContainer_Last_Connected: int;

const GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED: int;

const DEVPKEY_PciDevice_Error_Reporting: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const DEVPKEY_PciRootBus_MSISupport: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MIN: int;

const DEVPKEY_Device_SignalStrength: int;

const DEVPKEY_Device_DebuggerSafe: int;

const DEVPKEY_Device_DriverCoInstallers: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_NWF_OPTIONAL_CAPABILITY: int;

const GUID_NWF_EHCC_PRIME_RADIX: int;

const GUID_NWF_CURRENT_PHY_TYPE: int;

const GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD: int;

const DEVPKEY_Device_Numa_Node: int;

const DEVPKEY_PciDevice_ExpressSpecVersion: int;

const DEVPKEY_PciRootBus_PCIExpressCapabilityControl: int;

const GUID_NWF_DEFAULT_WEP_OFFLOAD: int;

const GUID_NWF_QOS_PARAMS: int;

const GUID_BUS_TYPE_USB: int;

const DEVPKEY_Device_GenericDriverInstalled: int;

const GUID_NWF_CURRENT_REG_DOMAIN: int;

const GUID_NWF_WME_UPDATE_IE: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const DEVPKEY_PciRootBus_PCISegmentGroupsSupport: int;

const DEVPKEY_Device_Service: int;

const DEVPKEY_Device_Capabilities: int;

const DEVPKEY_PciRootBus_ClockPowerManagementSupport: int;

const GUID_NWF_UNICAST_USE_GROUP_ENABLED: int;

const GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING: int;

const GUID_BUS_TYPE_USBPRINT: int;

const DEVPKEY_DeviceInterfaceClass_DefaultInterface: int;

const DEVPKEY_DeviceContainer_MetadataCabinet: int;

const GUID_NWF_COUNTERS_ENTRY: int;

const GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX: int;

const GUID_NWF_PHY_STATE: int;

const DEVPKEY_Device_Parent: int;

const GUID_NWF_MAX_RECEIVE_LIFETIME: int;

const DEVPKEY_DeviceContainer_Category: int;

const DEVPKEY_PciDevice_ECRC_Errors: int;

const GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_NWF_AUTO_CONFIG_ENABLED: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const DEVPKEY_Device_DriverVersion: int;

const GUID_NWF_CURRENT_CCA_MODE: int;

const DEVPKEY_DrvPkg_Model: int;

const DEVPKEY_DeviceClass_IconPath: int;

const GUID_NWF_LONG_RETRY_LIMIT: int;

const DEVPKEY_PciDevice_InterruptMessageMaximum: int;

const GUID_NWF_HIDDEN_NETWORK_ENABLED: int;

const DEVPKEY_Device_Legacy: int;

const DEVPKEY_Device_Siblings: int;

const DEVPKEY_DeviceContainer_HasProblem: int;

const DebugLevel: int;

const Globals: int;

const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: int;

const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: int;

const GUID_ALLOW_RTC_WAKE: int;

const GUID_BATTERY_DISCHARGE_LEVEL_2: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: int;

const GUID_DISK_IDLE_TIMEOUT: int;

const GUID_ACDC_POWER_SOURCE: int;

const GUID_SYSTEM_COOLING_POLICY: int;

const GUID_BATTERY_DISCHARGE_LEVEL_3: int;

const GUID_LOCK_CONSOLE_ON_WAKE: int;

const GUID_VIDEO_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLESTATE_POLICY: int;

const GUID_UNATTEND_SLEEP_TIMEOUT: int;

const PPM_THERMALCONSTRAINT_GUID: int;

const GUID_CRITICAL_POWER_TRANSITION: int;

const GUID_SLEEP_IDLE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: int;

const GUID_PROCESSOR_THROTTLE_MAXIMUM: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT: int;

const GUID_STANDBY_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_GUID: int;

const GUID_TYPICAL_POWER_SAVINGS: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: int;

const GUID_PROCESSOR_SETTINGS_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_2: int;

const GUID_HIBERNATE_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: int;

const GUID_BATTERY_DISCHARGE_ACTION_3: int;

const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: int;

const PPM_IDLESTATES_DATA_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: int;

const GUID_POWERBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: int;

const GUID_AUDIO_PLAYBACK: int;

const GUID_PROCESSOR_THROTTLE_POLICY: int;

const GUID_BATTERY_PERCENTAGE_REMAINING: int;

const GUID_GLOBAL_USER_PRESENCE: int;

const GUID_BATTERY_DISCHARGE_ACTION_2: int;

const GUID_APPLAUNCH_BUTTON: int;

const GUID_PROCESSOR_ALLOW_THROTTLING: int;

const GUID_IDLE_RESILIENCY_PERIOD: int;

const GUID_PROCESSOR_DISTRIBUTE_UTILITY: int;

const GUID_SLEEPBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: int;

const GUID_PROCESSOR_IDLE_DISABLE: int;

const GUID_CONSOLE_DISPLAY_STATE: int;

const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_0: int;

const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: int;

const GUID_INTSTEER_TIME_UNPARK_TRIGGER: int;

const GUID_LIDSWITCH_STATE_CHANGE: int;

const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: int;

const GUID_SESSION_DISPLAY_STATUS: int;

const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: int;

const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: int;

const GUID_VIDEO_ANNOYANCE_TIMEOUT: int;

const GUID_BATTERY_DISCHARGE_FLAGS_3: int;

const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: int;

const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: int;

const GUID_MIN_POWER_SAVINGS: int;

const GUID_DEVICE_IDLE_POLICY: int;

const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: int;

const GUID_SLEEP_SUBGROUP: int;

const GUID_DISK_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_LEVEL_1: int;

const GUID_BATTERY_DISCHARGE_ACTION_0: int;

const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: int;

const GUID_BATTERY_DISCHARGE_LEVEL_0: int;

const GUID_VIDEO_DIM_TIMEOUT: int;

const PPM_THERMAL_POLICY_CHANGE_GUID: int;

const GUID_PROCESSOR_PERF_TIME_CHECK: int;

const GUID_LIDOPEN_POWERSTATE: int;

const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: int;

const GUID_PROCESSOR_PERF_INCREASE_TIME: int;

const GUID_MONITOR_POWER_ON: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: int;

const GUID_PROCESSOR_THROTTLE_MINIMUM: int;

const GUID_ALLOW_AWAYMODE: int;

const GUID_DISK_ADAPTIVE_POWERDOWN: int;

const GUID_SYSTEM_BUTTON_SUBGROUP: int;

const PPM_PERFMON_PERFSTATE_GUID: int;

const GUID_ALLOW_SYSTEM_REQUIRED: int;

const GUID_ALLOW_DISPLAY_REQUIRED: int;

const PPM_PERFSTATE_DOMAIN_CHANGE_GUID: int;

const GUID_PROCESSOR_PARKING_PERF_STATE: int;

const GUID_PROCESSOR_PERF_DECREASE_POLICY: int;

const PPM_IDLESTATE_CHANGE_GUID: int;

const GUID_ALLOW_STANDBY_STATES: int;

const GUID_PROCESSOR_PERFSTATE_POLICY: int;

const GUID_BATTERY_DISCHARGE_ACTION_1: int;

const GUID_PROCESSOR_PERF_INCREASE_POLICY: int;

const GUID_VIDEO_SUBGROUP: int;

const GUID_HIBERNATE_FASTS4_POLICY: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: int;

const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: int;

const PPM_PERFSTATE_CHANGE_GUID: int;

const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: int;

const GUID_USERINTERFACEBUTTON_ACTION: int;

const GUID_PCIEXPRESS_ASPM_POLICY: int;

const GUID_BATTERY_DISCHARGE_FLAGS_1: int;

const GUID_PROCESSOR_PERF_INCREASE_HISTORY: int;

const GUID_INTSTEER_SUBGROUP: int;

const GUID_DISK_BURST_IGNORE_THRESHOLD: int;

const GUID_DISK_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: int;

const PPM_PERFSTATES_DATA_GUID: int;

const NO_SUBGROUP_GUID: int;

const GUID_VIDEO_FULLSCREEN_PLAYBACK: int;

const GUID_PROCESSOR_PERF_BOOST_MODE: int;

const ALL_POWERSCHEMES_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: int;

const GUID_PROCESSOR_IDLE_ALLOW_SCALING: int;

const GUID_PROCESSOR_IDLE_TIME_CHECK: int;

const GUID_INTSTEER_MODE: int;

const GUID_IDLE_RESILIENCY_PLATFORM_STATE: int;

const GUID_BACKGROUND_TASK_NOTIFICATION: int;

const GUID_PROCESSOR_PERF_HISTORY: int;

const GUID_VIDEO_ADAPTIVE_POWERDOWN: int;

const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: int;

const GUID_PROCESSOR_PERF_BOOST_POLICY: int;

const GUID_SESSION_USER_PRESENCE: int;

const GUID_LIDCLOSE_ACTION: int;

const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_EX_GUID: int;

const GUID_PROCESSOR_PERF_DECREASE_TIME: int;

const GUID_MAX_POWER_SAVINGS: int;

const GUID_BATTERY_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_HISTORY: int;

const GUID_IDLE_BACKGROUND_TASK: int;

const GUID_POWERSCHEME_PERSONALITY: int;

const GUID_IDLE_RESILIENCY_SUBGROUP: int;

const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: int;

const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: int;

const GUID_ACTIVE_POWERSCHEME: int;

const GUID_SYSTEM_AWAYMODE: int;

const DebugFlag: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_driver_object: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_0_init: int;

procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "MPSetPowerD0"} MPSetPowerD0(actual_FdoData: int) returns (Tmp_3: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_3 == -1073741661 || Tmp_3 == 0 || Tmp_3 == -1073741668 || Tmp_3 == -1073741811 || Tmp_3 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerD0"} MPSetPowerD0(actual_FdoData: int) returns (Tmp_3: int)
{
  var {:pointer} Tmp_4: int;
  var {:scalar} oldIrql: int;
  var {:scalar} DueTime_1: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} status: int;
  var {:pointer} FdoData: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;

  anon0:
    call {:si_unique_call 1} DueTime_1 := __HAVOC_malloc(20);
    FdoData := actual_FdoData;
    call {:si_unique_call 2} Tmp_5 := __HAVOC_malloc(120);
    call {:si_unique_call 3} vslice_dummy_var_1 := MPSetPowerD0Private(FdoData);
    call {:si_unique_call 4} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 5} sdv_KeAcquireSpinLock(0, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_0;
    call {:si_unique_call 6} status := NICSetPacketFilter(FdoData, vslice_dummy_var_0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status != 0;
    goto L18;

  L18:
    call {:si_unique_call 7} sdv_KeReleaseSpinLock(0, oldIrql);
    call {:si_unique_call 8} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    Mem_T.INT4[Tmp_4] := oldIrql;
    call {:si_unique_call 9} sdv_KeRaiseIrql(2, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    oldIrql := Mem_T.INT4[Tmp_4];
    call {:si_unique_call 10} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 11} status := NICSetMulticastList(FdoData);
    call {:si_unique_call 12} vslice_dummy_var_2 := NICStartRecv(FdoData);
    call {:si_unique_call 13} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 14} sdv_KeLowerIrql(oldIrql);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 15} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData));
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    call {:si_unique_call 16} vslice_dummy_var_4 := KeSetTimer(0, DueTime_1, 0);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 17} vslice_dummy_var_3 := NICEnableInterrupt(FdoData);
    goto L54;

  L54:
    Tmp_3 := status;
    return;

  anon8_Then:
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_6;
    havoc vslice_dummy_var_7;
    havoc vslice_dummy_var_8;
    havoc vslice_dummy_var_9;
    havoc vslice_dummy_var_10;
    call {:si_unique_call 18} status := IoConnectInterrupt(0, li2bplFunctionConstant909, FdoData, 0, vslice_dummy_var_6, vslice_dummy_var_7, vslice_dummy_var_8, vslice_dummy_var_9, 1, vslice_dummy_var_10, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status >= 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 19} vslice_dummy_var_5 := NICEnableInterrupt(FdoData);
    goto L54;

  anon9_Then:
    assume {:partition} 0 > status;
    Tmp_5 := strConst__li2bpl0;
    call {:si_unique_call 20} DebugPrint(2, 1, Tmp_5);
    goto L54;

  anon7_Then:
    assume {:partition} status == 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto L18;
}



procedure {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_6 == -1073741823 || Tmp_6 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int)
{
  var {:scalar} i: int;
  var {:scalar} Tmp_7: int;
  var {:scalar} MaskBit: int;
  var {:pointer} pCurrentMaskByte: int;
  var {:scalar} Signature: int;
  var {:scalar} n: int;
  var {:pointer} Tmp_9: int;
  var {:pointer} Tmp_10: int;
  var {:scalar} MaskOffset: int;
  var {:scalar} Tmp_11: int;
  var {:scalar} BitOffsetInMask: int;
  var {:scalar} status_1: int;
  var {:pointer} pFrame: int;
  var {:scalar} FrameLength: int;
  var {:pointer} pMask: int;
  var {:scalar} MaskLength: int;
  var {:pointer} pSignature: int;

  anon0:
    pFrame := actual_pFrame;
    FrameLength := actual_FrameLength;
    pMask := actual_pMask;
    MaskLength := actual_MaskLength;
    pSignature := actual_pSignature;
    call {:si_unique_call 21} Tmp_9 := __HAVOC_malloc(148);
    call {:si_unique_call 22} Tmp_10 := __HAVOC_malloc(148);
    Signature := 0;
    n := 0;
    i := 0;
    pCurrentMaskByte := pMask;
    MaskOffset := 0;
    BitOffsetInMask := 0;
    MaskBit := 0;
    status_1 := -1073741823;
    Tmp_9 := strConst__li2bpl2;
    call {:si_unique_call 23} DebugPrint(5, 4, Tmp_9);
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    Mem_T.INT4[pSignature] := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} FrameLength > 128;
    status_1 := -1073741823;
    goto L33;

  L33:
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 24} DebugPrint(5, 4, Tmp_10);
    Tmp_6 := status_1;
    return;

  anon20_Then:
    assume {:partition} 128 >= FrameLength;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} MaskLength > 12;
    status_1 := -1073741823;
    goto L33;

  anon17_Then:
    assume {:partition} 12 >= MaskLength;
    i := 0;
    n := i;
    goto L41;

  L41:
    call {:si_unique_call 25} i, Tmp_7, MaskBit, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(i, Tmp_7, MaskBit, pCurrentMaskByte, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask, pFrame, FrameLength, MaskLength);
    goto L41_last;

  L41_last:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 128 > n;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FrameLength > n;
    BitOffsetInMask := INTMOD(n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 26} MaskBit := corral_nondet();
    assume {:nonnull} pCurrentMaskByte != 0;
    assume pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(MaskBit, Mem_T.INT4[pCurrentMaskByte]) == 0;
    goto L57;

  L57:
    n := n + 1;
    goto L57_dummy;

  L57_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} BAND(MaskBit, Mem_T.INT4[pCurrentMaskByte]) != 0;
    Tmp_11 := n;
    assume {:nonnull} pFrame != 0;
    assume pFrame > 0;
    Tmp_7 := INTMOD(i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(Signature, 0) != 0;
    call {:si_unique_call 27} Signature := corral_nondet();
    goto L56;

  L56:
    i := i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(Signature, 0) == 0;
    call {:si_unique_call 28} Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} BitOffsetInMask == 0;
    MaskOffset := INTDIV(n, 8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MaskOffset != MaskLength;
    goto L47;

  anon24_Then:
    assume {:partition} MaskOffset == MaskLength;
    goto L42;

  L42:
    Signature := BAND(Signature, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(16777216, 33554432), 67108864), 134217728), 268435456), 536870912), 1073741824), -2147483648)));
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    Mem_T.INT4[pSignature] := Signature;
    status_1 := 0;
    goto L33;

  anon19_Then:
    assume {:partition} n >= FrameLength;
    goto L42;

  anon18_Then:
    assume {:partition} n >= 128;
    goto L42;
}



procedure {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int)
{
  var {:pointer} sdv_10: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} Tmp_15: int;
  var {:pointer} pPatternEntry: int;
  var {:pointer} Tmp_16: int;
  var {:pointer} FdoData_1: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 29} vslice_dummy_var_6 := __HAVOC_malloc(4);
    FdoData_1 := actual_FdoData_1;
    call {:si_unique_call 30} Tmp_14 := __HAVOC_malloc(128);
    call {:si_unique_call 31} Tmp_16 := __HAVOC_malloc(128);
    assume {:nonnull} FdoData_1 != 0;
    assume FdoData_1 > 0;
    Tmp_15 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_1));
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc pPatternEntry;
    Tmp_16 := strConst__li2bpl4;
    call {:si_unique_call 32} DebugPrint(5, 4, Tmp_16);
    goto L8;

  L8:
    call {:si_unique_call 33} sdv_10, pPatternEntry, vslice_dummy_var_7 := NICRemoveAllWakeUpPatterns_loop_L8(sdv_10, pPatternEntry, vslice_dummy_var_7);
    goto L8_last;

  L8_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 34} sdv_10 := sdv_containing_record(pPatternEntry, 0);
    assume {:nonnull} pPatternEntry != 0;
    assume pPatternEntry > 0;
    havoc pPatternEntry;
    call {:si_unique_call 35} vslice_dummy_var_7 := sdv_RemoveEntryList(0);
    call {:si_unique_call 36} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    Tmp_14 := strConst__li2bpl3;
    call {:si_unique_call 37} DebugPrint(5, 4, Tmp_14);
    return;
}



procedure {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_2: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_17: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_17 == -1073741789 || Tmp_17 == 0 || Tmp_17 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_2: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_17: int)
{
  var {:pointer} Tmp_19: int;
  var {:pointer} pReqPattern: int;
  var {:pointer} Tmp_20: int;
  var {:scalar} bIsThisThePattern: int;
  var {:pointer} Tmp_21: int;
  var {:dopa} {:scalar} result: int;
  var {:pointer} sdv_13: int;
  var {:pointer} pWakeUpPattern_1: int;
  var {:pointer} pCurrPattern: int;
  var {:scalar} status_2: int;
  var {:pointer} pPatternEntry_1: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} FdoData_2: int;
  var {:pointer} InformationBuffer: int;
  var {:scalar} InformationBufferLength: int;
  var {:pointer} BytesRead: int;
  var {:pointer} BytesNeeded: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 38} result := __HAVOC_malloc(4);
    FdoData_2 := actual_FdoData_2;
    InformationBuffer := actual_InformationBuffer;
    InformationBufferLength := actual_InformationBufferLength;
    BytesRead := actual_BytesRead;
    BytesNeeded := actual_BytesNeeded;
    call {:si_unique_call 39} Tmp_19 := __HAVOC_malloc(112);
    call {:si_unique_call 40} Tmp_20 := __HAVOC_malloc(4);
    call {:si_unique_call 41} Tmp_21 := __HAVOC_malloc(112);
    status_2 := -1073741823;
    pReqPattern := InformationBuffer;
    assume {:nonnull} FdoData_2 != 0;
    assume FdoData_2 > 0;
    Tmp_22 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_2));
    assume {:nonnull} Tmp_22 != 0;
    assume Tmp_22 > 0;
    havoc pPatternEntry_1;
    Tmp_21 := strConst__li2bpl6;
    call {:si_unique_call 42} DebugPrint(5, 4, Tmp_21);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 24 > InformationBufferLength;
    status_2 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    Mem_T.INT4[BytesNeeded] := 24;
    goto L20;

  L20:
    Tmp_19 := strConst__li2bpl5;
    call {:si_unique_call 43} DebugPrint(5, 4, Tmp_19);
    Tmp_17 := status_2;
    return;

  anon11_Then:
    assume {:partition} InformationBufferLength >= 24;
    assume {:nonnull} pReqPattern != 0;
    assume pReqPattern > 0;
    havoc vslice_dummy_var_11;
    havoc vslice_dummy_var_12;
    call {:si_unique_call 44} status_2 := RtlULongAdd(vslice_dummy_var_11, vslice_dummy_var_12, result);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_2 >= 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Mem_T.INT4[result] > InformationBufferLength;
    status_2 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    Mem_T.INT4[BytesNeeded] := Mem_T.INT4[result];
    goto L20;

  anon13_Then:
    assume {:partition} InformationBufferLength >= Mem_T.INT4[result];
    assume {:nonnull} BytesRead != 0;
    assume BytesRead > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    Mem_T.INT4[BytesRead] := Mem_T.INT4[result];
    goto L32;

  L32:
    call {:si_unique_call 45} Tmp_20, bIsThisThePattern, sdv_13, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1 := NICRemoveWakeUpPattern_loop_L32(pReqPattern, Tmp_20, bIsThisThePattern, sdv_13, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1);
    goto L32_last;

  L32_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    bIsThisThePattern := 0;
    pWakeUpPattern_1 := 0;
    pCurrPattern := 0;
    call {:si_unique_call 46} sdv_13 := sdv_containing_record(pPatternEntry_1, 0);
    pWakeUpPattern_1 := sdv_13;
    assume {:nonnull} pWakeUpPattern_1 != 0;
    assume pWakeUpPattern_1 > 0;
    havoc Tmp_20;
    pCurrPattern := Tmp_20;
    assume {:nonnull} pPatternEntry_1 != 0;
    assume pPatternEntry_1 > 0;
    havoc pPatternEntry_1;
    call {:si_unique_call 47} bIsThisThePattern := MPAreTwoPatternsEqual(pReqPattern, pCurrPattern);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bIsThisThePattern == 1;
    call {:si_unique_call 48} vslice_dummy_var_8 := sdv_RemoveEntryList(0);
    call {:si_unique_call 49} ExFreePoolWithTag(0, -1001831600);
    status_2 := 0;
    goto L20;

  anon15_Then:
    assume {:partition} bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon14_Then:
    goto L20;

  anon12_Then:
    assume {:partition} 0 > status_2;
    goto L20;
}



procedure {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_3: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_23: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_23 == -1073741789 || Tmp_23 == 0 || Tmp_23 == -1073741823 || Tmp_23 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_3: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_23: int)
{
  var {:pointer} Tmp_24: int;
  var {:pointer} Tmp_26: int;
  var {:pointer} Tmp_27: int;
  var {:dopa} {:scalar} Signature_1: int;
  var {:dopa} {:scalar} CopyLength: int;
  var {:pointer} Tmp_29: int;
  var {:pointer} sdv_18: int;
  var {:pointer} Tmp_30: int;
  var {:pointer} pWakeUpPattern_2: int;
  var {:scalar} AllocationLength: int;
  var {:scalar} status_3: int;
  var {:pointer} pPmPattern: int;
  var {:pointer} InformationBuffer_1: int;
  var {:scalar} InformationBufferLength_1: int;
  var {:pointer} BytesRead_1: int;
  var {:pointer} BytesNeeded_1: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 50} Signature_1 := __HAVOC_malloc(4);
    call {:si_unique_call 51} CopyLength := __HAVOC_malloc(4);
    InformationBuffer_1 := actual_InformationBuffer_1;
    InformationBufferLength_1 := actual_InformationBufferLength_1;
    BytesRead_1 := actual_BytesRead_1;
    BytesNeeded_1 := actual_BytesNeeded_1;
    call {:si_unique_call 52} Tmp_24 := __HAVOC_malloc(4);
    call {:si_unique_call 53} Tmp_27 := __HAVOC_malloc(100);
    call {:si_unique_call 54} Tmp_30 := __HAVOC_malloc(100);
    status_3 := -1073741823;
    pWakeUpPattern_2 := 0;
    AllocationLength := 0;
    pPmPattern := 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    Mem_T.INT4[Signature_1] := 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[CopyLength] := 0;
    Tmp_27 := strConst__li2bpl8;
    call {:si_unique_call 55} DebugPrint(5, 4, Tmp_27);
    pPmPattern := InformationBuffer_1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 24 > InformationBufferLength_1;
    status_3 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    Mem_T.INT4[BytesNeeded_1] := 24;
    goto L26;

  L26:
    Tmp_30 := strConst__li2bpl7;
    call {:si_unique_call 56} DebugPrint(5, 4, Tmp_30);
    Tmp_23 := status_3;
    return;

  anon14_Then:
    assume {:partition} InformationBufferLength_1 >= 24;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_13;
    havoc vslice_dummy_var_14;
    call {:si_unique_call 57} status_3 := RtlULongAdd(vslice_dummy_var_13, vslice_dummy_var_14, CopyLength);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_3 >= 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Mem_T.INT4[CopyLength] > InformationBufferLength_1;
    status_3 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[BytesNeeded_1] := Mem_T.INT4[CopyLength];
    goto L26;

  anon12_Then:
    assume {:partition} InformationBufferLength_1 >= Mem_T.INT4[CopyLength];
    assume {:nonnull} BytesRead_1 != 0;
    assume BytesRead_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Mem_T.INT4[BytesRead_1] := Mem_T.INT4[CopyLength];
    Tmp_26 := pPmPattern;
    Tmp_29 := pPmPattern;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_15;
    havoc vslice_dummy_var_16;
    call {:si_unique_call 58} status_3 := MPCalculateE100PatternForFilter(Tmp_29, vslice_dummy_var_15, Tmp_26, vslice_dummy_var_16, Signature_1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_3 == 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    AllocationLength := 20 + Mem_T.INT4[CopyLength];
    call {:si_unique_call 59} sdv_18 := ExAllocatePoolWithTag(512, AllocationLength, -1001831600);
    pWakeUpPattern_2 := sdv_18;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pWakeUpPattern_2 != 0;
    call {:si_unique_call 60} sdv_RtlZeroMemory(0, AllocationLength);
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    havoc Tmp_24;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    call {:si_unique_call 61} sdv_RtlMoveMemory(0, 0, Mem_T.INT4[CopyLength]);
    call {:si_unique_call 62} vslice_dummy_var_9 := sdv_ExInterlockedInsertHeadList(0, 0, 0);
    status_3 := 0;
    goto L26;

  anon15_Then:
    assume {:partition} pWakeUpPattern_2 == 0;
    goto L26;

  anon13_Then:
    assume {:partition} status_3 != 0;
    goto L26;

  anon11_Then:
    assume {:partition} 0 > status_3;
    goto L26;
}



procedure {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_31: int);
  free ensures {:va_keep} Tmp_31 == 0 || Tmp_31 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_31: int)
{
  var {:scalar} sdv_20: int;
  var {:scalar} sdv_21: int;
  var {:scalar} bEqual: int;
  var {:pointer} pNdisPattern1: int;
  var {:pointer} pNdisPattern2: int;

  anon0:
    pNdisPattern1 := actual_pNdisPattern1;
    pNdisPattern2 := actual_pNdisPattern2;
    bEqual := 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    bEqual := 0;
    goto L47;

  L47:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  L38:
    Tmp_31 := bEqual;
    return;

  anon22_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    bEqual := 0;
    goto L50;

  L50:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon23_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_20 != 0;
    bEqual := 0;
    goto L56;

  L56:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon25_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bEqual := 0;
    goto L59;

  L59:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon26_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_21 != 0;
    bEqual := 0;
    goto L65;

  L65:
    goto L38;

  anon27_Then:
    assume {:partition} sdv_21 == 0;
    bEqual := 1;
    goto L65;

  anon20_Then:
    bEqual := 1;
    goto L59;

  anon24_Then:
    assume {:partition} sdv_20 == 0;
    bEqual := 1;
    goto L56;

  anon19_Then:
    bEqual := 1;
    goto L50;

  anon21_Then:
    bEqual := 1;
    goto L47;
}



procedure {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_4: int) returns (Tmp_33: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_33 == -1073741668 || Tmp_33 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_4: int) returns (Tmp_33: int)
{
  var {:pointer} Tmp_34: int;
  var {:pointer} Tmp_35: int;
  var {:pointer} pPMDR: int;
  var {:scalar} status_4: int;
  var {:pointer} FdoData_4: int;

  anon0:
    FdoData_4 := actual_FdoData_4;
    call {:si_unique_call 63} Tmp_34 := __HAVOC_malloc(96);
    call {:si_unique_call 64} Tmp_35 := __HAVOC_malloc(96);
    Tmp_35 := strConst__li2bpl9;
    call {:si_unique_call 65} DebugPrint(5, 4, Tmp_35);
    call {:si_unique_call 66} pPMDR := HwReadPowerPMDR(FdoData_4);
    call {:si_unique_call 67} status_4 := NICInitializeAdapter(FdoData_4);
    assume {:nonnull} pPMDR != 0;
    assume pPMDR > 0;
    Mem_T.INT4[pPMDR] := BOR(Mem_T.INT4[pPMDR], BOR(BOR(32, 64), 128));
    call {:si_unique_call 68} NICIssueSelectiveReset(FdoData_4);
    Tmp_34 := strConst__li2bpl10;
    call {:si_unique_call 69} DebugPrint(5, 4, Tmp_34);
    Tmp_33 := status_4;
    return;
}



procedure {:origName "NICSetPower"} NICSetPower(actual_FdoData_5: int, actual_PowerState_1: int) returns (Tmp_37: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_37 == 0 || Tmp_37 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetPower"} NICSetPower(actual_FdoData_5: int, actual_PowerState_1: int) returns (Tmp_37: int)
{
  var {:pointer} Tmp_38: int;
  var {:scalar} status_5: int;
  var {:pointer} Tmp_40: int;
  var {:pointer} FdoData_5: int;
  var {:scalar} PowerState_1: int;
  var vslice_dummy_var_10: int;

  anon0:
    FdoData_5 := actual_FdoData_5;
    PowerState_1 := actual_PowerState_1;
    call {:si_unique_call 70} Tmp_38 := __HAVOC_malloc(100);
    call {:si_unique_call 71} Tmp_40 := __HAVOC_malloc(124);
    status_5 := 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} PowerState_1 == 1;
    Tmp_38 := strConst__li2bpl12;
    call {:si_unique_call 72} DebugPrint(5, 4, Tmp_38);
    call {:si_unique_call 73} vslice_dummy_var_10 := MPSetPowerD0(FdoData_5);
    goto L15;

  L15:
    Tmp_37 := status_5;
    return;

  anon3_Then:
    assume {:partition} PowerState_1 != 1;
    Tmp_40 := strConst__li2bpl11;
    call {:si_unique_call 74} DebugPrint(5, 4, Tmp_40);
    call {:si_unique_call 75} status_5 := MPSetPowerLow(FdoData_5, PowerState_1);
    goto L15;
}



procedure {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_41: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_41: int)
{
  var {:pointer} pPMDR_1: int;
  var {:pointer} Adapter: int;

  anon0:
    Adapter := actual_Adapter;
    pPMDR_1 := 0;
    assume {:nonnull} Adapter != 0;
    assume Adapter > 0;
    havoc pPMDR_1;
    assume {:nonnull} pPMDR_1 != 0;
    assume pPMDR_1 > 0;
    Tmp_41 := pPMDR_1;
    return;
}



procedure {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_6: int, actual_PowerState_2: int) returns (Tmp_43: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_43 == -1073741668 || Tmp_43 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_6: int, actual_PowerState_2: int) returns (Tmp_43: int)
{
  var {:scalar} status_6: int;
  var {:pointer} Tmp_45: int;
  var {:pointer} FdoData_6: int;
  var vslice_dummy_var_11: int;

  anon0:
    FdoData_6 := actual_FdoData_6;
    status_6 := 0;
    assume {:nonnull} FdoData_6 != 0;
    assume FdoData_6 > 0;
    havoc Tmp_45;
    assume {:nonnull} Tmp_45 != 0;
    assume Tmp_45 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 76} status_6 := D100IssueScbCommand(FdoData_6, 4, 1);
    goto L6;

  L6:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_6 != 0;
    goto L15;

  L15:
    Tmp_43 := status_6;
    return;

  anon5_Then:
    assume {:partition} status_6 == 0;
    call {:si_unique_call 77} vslice_dummy_var_11 := KeSynchronizeExecution(0, li2bplFunctionConstant1377, 0);
    call {:si_unique_call 78} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_6 != 0;
    assume FdoData_6 > 0;
    assume {:nonnull} FdoData_6 != 0;
    assume FdoData_6 > 0;
    status_6 := 0;
    goto L15;

  anon6_Then:
    goto L6;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 79} vslice_dummy_var_12 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_13: int;

  anon0:
    call {:si_unique_call 80} vslice_dummy_var_13 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICServiceReadIrps"} NICServiceReadIrps(actual_FdoData_7: int, actual_PacketArray: int, actual_PacketArrayCount: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICServiceReadIrps"} NICServiceReadIrps(actual_FdoData_7: int, actual_PacketArray: int, actual_PacketArrayCount: int)
{
  var {:scalar} Tmp_50: int;
  var {:scalar} length: int;
  var {:pointer} pMpRfd: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_29: int;
  var {:scalar} sdv_30: int;
  var {:pointer} buffer: int;
  var {:pointer} sdv_35: int;
  var {:scalar} index: int;
  var {:scalar} sdv_37: int;
  var {:pointer} Tmp_53: int;
  var {:pointer} Tmp_54: int;
  var {:pointer} irp: int;
  var {:scalar} Tmp_55: int;
  var {:scalar} status_7: int;
  var {:pointer} Tmp_56: int;
  var {:pointer} FdoData_7: int;
  var {:pointer} PacketArray: int;
  var {:scalar} PacketArrayCount: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 81} vslice_dummy_var_14 := __HAVOC_malloc(4);
    FdoData_7 := actual_FdoData_7;
    PacketArray := actual_PacketArray;
    PacketArrayCount := actual_PacketArrayCount;
    call {:si_unique_call 82} Tmp_53 := __HAVOC_malloc(96);
    call {:si_unique_call 83} Tmp_54 := __HAVOC_malloc(96);
    call {:si_unique_call 84} Tmp_56 := __HAVOC_malloc(108);
    pMpRfd := 0;
    Tmp_54 := strConst__li2bpl14;
    call {:si_unique_call 85} DebugPrint(5, 128, Tmp_54);
    index := 0;
    goto L15;

  L15:
    call {:si_unique_call 86} Tmp_50, length, pMpRfd, listEntry, sdv_29, sdv_30, buffer, sdv_35, index, sdv_37, irp, Tmp_55, status_7, Tmp_56, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18 := NICServiceReadIrps_loop_L15(Tmp_50, length, pMpRfd, listEntry, sdv_29, sdv_30, buffer, sdv_35, index, sdv_37, irp, Tmp_55, status_7, Tmp_56, FdoData_7, PacketArray, PacketArrayCount, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18);
    goto L15_last;

  L15_last:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} PacketArrayCount > index;
    Tmp_55 := index;
    assume {:nonnull} PacketArray != 0;
    assume PacketArray > 0;
    havoc pMpRfd;
    call {:si_unique_call 87} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 88} listEntry, sdv_29, sdv_35, sdv_37, irp := NICServiceReadIrps_loop_L27(listEntry, sdv_29, sdv_35, sdv_37, irp, FdoData_7);
    goto L27_last;

  L27_last:
    call {:si_unique_call 111} sdv_29 := sdv_IsListEmpty(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_29 != 0;
    call {:si_unique_call 89} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 90} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 91} vslice_dummy_var_16 := PciDrvIoDecrement(FdoData_7);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 92} NICReturnRFD(FdoData_7, pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 93} sdv_KeReleaseSpinLockFromDpcLevel(0);
    index := index + 1;
    goto L96_dummy;

  L96_dummy:
    assume false;
    return;

  anon21_Then:
    call {:si_unique_call 94} vslice_dummy_var_17 := PciDrvIoIncrement(FdoData_7);
    call {:si_unique_call 95} status_7 := PciDrvQueuePassiveLevelCallback(FdoData_7, li2bplFunctionConstant3731, pMpRfd, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_7 >= 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    Tmp_56 := strConst__li2bpl15;
    call {:si_unique_call 96} DebugPrint(5, 128, Tmp_56);
    goto L96;

  anon20_Then:
    assume {:partition} 0 > status_7;
    call {:si_unique_call 97} vslice_dummy_var_18 := PciDrvIoDecrement(FdoData_7);
    call {:si_unique_call 98} NICReturnRFD(FdoData_7, pMpRfd);
    goto L96;

  anon16_Then:
    assume {:partition} sdv_29 == 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    call {:si_unique_call 99} listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_7));
    call {:si_unique_call 100} sdv_35 := sdv_containing_record(listEntry, 88);
    irp := sdv_35;
    call {:si_unique_call 101} sdv_37 := sdv_IoSetCancelRoutine(irp, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_37 != 0;
    call {:si_unique_call 102} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 103} buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 104} sdv_30 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 105} Tmp_50 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    length := Tmp_50;
    call {:si_unique_call 106} sdv_RtlCopyMemory(0, 0, length);
    status_7 := 0;
    goto L73;

  L73:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp))] := length;
    call {:si_unique_call 107} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 108} vslice_dummy_var_15 := PciDrvIoDecrement(FdoData_7);
    goto L24;

  anon19_Then:
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    havoc Tmp_50;
    goto L68;

  anon18_Then:
    assume {:partition} buffer == 0;
    status_7 := -1073741670;
    length := 0;
    goto L73;

  anon17_Then:
    assume {:partition} sdv_37 == 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 109} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irp))));
    irp := 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} index >= PacketArrayCount;
    Tmp_53 := strConst__li2bpl13;
    call {:si_unique_call 110} DebugPrint(5, 128, Tmp_53);
    return;
}



procedure {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_8: int, actual_pMpRfd_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_8: int, actual_pMpRfd_1: int)
{
  var {:scalar} sdv_40: int;
  var {:pointer} Tmp_58: int;
  var {:pointer} pLastMpRfd: int;
  var {:pointer} pHwRfd: int;
  var {:pointer} FdoData_8: int;
  var {:pointer} pMpRfd_1: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 112} vslice_dummy_var_19 := __HAVOC_malloc(4);
    FdoData_8 := actual_FdoData_8;
    pMpRfd_1 := actual_pMpRfd_1;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    havoc pHwRfd;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(pHwRfd))] := 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    call {:si_unique_call 113} sdv_40 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_40 != 0;
    goto L16;

  L16:
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    call {:si_unique_call 114} vslice_dummy_var_20 := sdv_InsertTailList(RecvList__FDO_DATA(FdoData_8), pMpRfd_1);
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    return;

  anon3_Then:
    assume {:partition} sdv_40 == 0;
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    Tmp_58 := RecvList__FDO_DATA(FdoData_8);
    assume {:nonnull} Tmp_58 != 0;
    assume Tmp_58 > 0;
    havoc pLastMpRfd;
    assume {:nonnull} pLastMpRfd != 0;
    assume pLastMpRfd > 0;
    havoc pHwRfd;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    goto L16;
}



procedure {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt(actual_FdoData_9: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt(actual_FdoData_9: int)
{
  var {:scalar} PacketArrayCount_1: int;
  var {:pointer} Tmp_60: int;
  var {:scalar} Tmp_61: int;
  var {:pointer} Tmp_62: int;
  var {:scalar} Tmp_63: int;
  var {:scalar} LoopCount: int;
  var {:scalar} PacketStatus: int;
  var {:scalar} Tmp_64: int;
  var {:scalar} sdv_41: int;
  var {:pointer} pMpRfd_2: int;
  var {:scalar} Tmp_66: int;
  var {:pointer} Tmp_67: int;
  var {:pointer} Tmp_68: int;
  var {:scalar} LoopIndex: int;
  var {:scalar} PacketFreeCount: int;
  var {:scalar} Tmp_69: int;
  var {:pointer} PacketFreeArray: int;
  var {:pointer} PacketArray_1: int;
  var {:pointer} Tmp_70: int;
  var {:scalar} status_8: int;
  var {:scalar} bContinue: int;
  var {:scalar} bAllocNewRfd: int;
  var {:scalar} Index: int;
  var {:pointer} pHwRfd_1: int;
  var {:pointer} FdoData_9: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 115} vslice_dummy_var_21 := __HAVOC_malloc(4);
    FdoData_9 := actual_FdoData_9;
    call {:si_unique_call 116} Tmp_60 := __HAVOC_malloc(116);
    call {:si_unique_call 117} Tmp_62 := __HAVOC_malloc(136);
    call {:si_unique_call 118} Tmp_67 := __HAVOC_malloc(88);
    call {:si_unique_call 119} Tmp_68 := __HAVOC_malloc(116);
    call {:si_unique_call 120} PacketFreeArray := __HAVOC_malloc(80);
    call {:si_unique_call 121} PacketArray_1 := __HAVOC_malloc(80);
    pMpRfd_2 := 0;
    pHwRfd_1 := 0;
    LoopIndex := 0;
    LoopCount := 52;
    bContinue := 1;
    bAllocNewRfd := 0;
    Tmp_60 := strConst__li2bpl19;
    call {:si_unique_call 122} DebugPrint(5, 128, Tmp_60);
    goto L24;

  L24:
    call {:si_unique_call 123} PacketArrayCount_1, Tmp_61, Tmp_62, Tmp_63, PacketStatus, Tmp_64, sdv_41, pMpRfd_2, Tmp_66, Tmp_67, LoopIndex, PacketFreeCount, Tmp_69, Tmp_70, bContinue, bAllocNewRfd, Index, pHwRfd_1, vslice_dummy_var_22, vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L24(PacketArrayCount_1, Tmp_61, Tmp_62, Tmp_63, LoopCount, PacketStatus, Tmp_64, sdv_41, pMpRfd_2, Tmp_66, Tmp_67, LoopIndex, PacketFreeCount, Tmp_69, PacketFreeArray, PacketArray_1, Tmp_70, bContinue, bAllocNewRfd, Index, pHwRfd_1, FdoData_9, vslice_dummy_var_22, vslice_dummy_var_25);
    goto L24_last;

  L24_last:
    Tmp_69 := LoopIndex;
    LoopIndex := LoopIndex + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} LoopCount > Tmp_69;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} bContinue != 0;
    PacketArrayCount_1 := 0;
    PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 124} PacketArrayCount_1, Tmp_61, Tmp_63, PacketStatus, Tmp_64, sdv_41, pMpRfd_2, Tmp_67, PacketFreeCount, Tmp_70, bAllocNewRfd, pHwRfd_1, vslice_dummy_var_22, vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(PacketArrayCount_1, Tmp_61, Tmp_63, PacketStatus, Tmp_64, sdv_41, pMpRfd_2, Tmp_67, PacketFreeCount, PacketFreeArray, PacketArray_1, Tmp_70, bAllocNewRfd, pHwRfd_1, FdoData_9, vslice_dummy_var_22, vslice_dummy_var_25);
    goto L29_last;

  L29_last:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} 20 > PacketArrayCount_1;
    call {:si_unique_call 125} sdv_41 := sdv_IsListEmpty(0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_41 != 0;
    bContinue := 0;
    goto L30;

  L30:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} PacketArrayCount_1 != 0;
    call {:si_unique_call 126} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 127} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    Tmp_62 := strConst__li2bpl17;
    call {:si_unique_call 128} DebugPrint(3, 128, Tmp_62);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    call {:si_unique_call 129} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 130} NICServiceIndicateStatusIrp(FdoData_9);
    goto L108;

  L108:
    call {:si_unique_call 131} NICServiceReadIrps(FdoData_9, PacketArray_1, PacketArrayCount_1);
    call {:si_unique_call 132} sdv_KeAcquireSpinLockAtDpcLevel(0);
    Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 133} pMpRfd_2, Tmp_66, Index := NICHandleRecvInterrupt_loop_L115(pMpRfd_2, Tmp_66, PacketFreeCount, PacketFreeArray, Index, FdoData_9);
    goto L115_last;

  L115_last:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} PacketFreeCount > Index;
    Tmp_66 := Index;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 134} NICReturnRFD(FdoData_9, pMpRfd_2);
    Index := Index + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    assume false;
    return;

  anon44_Then:
    assume {:partition} Index >= PacketFreeCount;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon43_Then:
    call {:si_unique_call 135} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon38_Then:
    assume {:partition} PacketArrayCount_1 == 0;
    goto L25;

  L25:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} bAllocNewRfd != 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 136} vslice_dummy_var_23 := PciDrvIoIncrement(FdoData_9);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    call {:si_unique_call 137} status_8 := PciDrvQueuePassiveLevelCallback(FdoData_9, li2bplFunctionConstant3726, 0, 0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_8 < 0;
    call {:si_unique_call 138} vslice_dummy_var_24 := PciDrvIoDecrement(FdoData_9);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto L122;

  L122:
    Tmp_68 := strConst__li2bpl18;
    call {:si_unique_call 139} DebugPrint(5, 128, Tmp_68);
    return;

  anon47_Then:
    assume {:partition} 0 <= status_8;
    goto L122;

  anon46_Then:
    goto L122;

  anon45_Then:
    goto L122;

  anon35_Then:
    assume {:partition} bAllocNewRfd == 0;
    goto L122;

  anon39_Then:
    assume {:partition} sdv_41 == 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    Tmp_70 := RecvList__FDO_DATA(FdoData_9);
    assume {:nonnull} Tmp_70 != 0;
    assume Tmp_70 > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    havoc pHwRfd_1;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(pHwRfd_1))];
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(PacketStatus, 32768) != 0;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    havoc Tmp_64;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_64 == 49152;
    call {:si_unique_call 140} vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(PacketStatus, 8192) != 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 141} NICReturnRFD(FdoData_9, pMpRfd_2);
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 142} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto L70;

  L70:
    Tmp_63 := PacketArrayCount_1;
    assume {:nonnull} PacketArray_1 != 0;
    assume PacketArray_1 > 0;
    PacketArrayCount_1 := PacketArrayCount_1 + 1;
    call {:si_unique_call 143} vslice_dummy_var_25 := PciDrvIoIncrement(FdoData_9);
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    Tmp_61 := PacketFreeCount;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    PacketFreeCount := PacketFreeCount + 1;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 144} NICReturnRFD(FdoData_9, pMpRfd_2);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    assume false;
    return;

  anon51_Then:
    assume {:partition} BAND(PacketStatus, 8192) == 0;
    Tmp_67 := strConst__li2bpl16;
    call {:si_unique_call 145} DebugPrint(3, 128, Tmp_67);
    call {:si_unique_call 146} NICReturnRFD(FdoData_9, pMpRfd_2);
    goto anon51_Then_dummy;

  anon51_Then_dummy:
    assume false;
    return;

  anon50_Then:
    assume {:partition} Tmp_64 != 49152;
    bContinue := 0;
    goto L30;

  anon49_Then:
    assume {:partition} BAND(PacketStatus, 32768) == 0;
    bContinue := 0;
    goto L30;

  anon37_Then:
    assume {:partition} PacketArrayCount_1 >= 20;
    goto L30;

  anon36_Then:
    assume {:partition} bContinue == 0;
    goto L25;

  anon48_Then:
    assume {:partition} Tmp_69 >= LoopCount;
    goto L25;
}



procedure {:origName "NICStartRecv"} NICStartRecv(actual_FdoData_10: int) returns (Tmp_72: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_72 == 0 || Tmp_72 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICStartRecv"} NICStartRecv(actual_FdoData_10: int) returns (Tmp_72: int)
{
  var {:scalar} Tmp_73: int;
  var {:pointer} Tmp_74: int;
  var {:pointer} Tmp_75: int;
  var {:pointer} Tmp_76: int;
  var {:scalar} sdv_47: int;
  var {:pointer} pMpRfd_3: int;
  var {:pointer} Tmp_77: int;
  var {:pointer} Tmp_78: int;
  var {:pointer} Tmp_79: int;
  var {:scalar} sdv_49: int;
  var {:pointer} Tmp_81: int;
  var {:scalar} status_9: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} Tmp_83: int;
  var {:pointer} FdoData_10: int;

  anon0:
    FdoData_10 := actual_FdoData_10;
    call {:si_unique_call 147} Tmp_74 := __HAVOC_malloc(120);
    call {:si_unique_call 148} Tmp_75 := __HAVOC_malloc(76);
    call {:si_unique_call 149} Tmp_78 := __HAVOC_malloc(104);
    call {:si_unique_call 150} Tmp_79 := __HAVOC_malloc(116);
    Tmp_75 := strConst__li2bpl20;
    call {:si_unique_call 151} DebugPrint(5, 128, Tmp_75);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    havoc Tmp_77;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    havoc Tmp_73;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_73 == 16;
    Tmp_79 := strConst__li2bpl22;
    call {:si_unique_call 152} DebugPrint(6, 128, Tmp_79);
    Tmp_72 := 0;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} Tmp_73 != 16;
    Tmp_78 := strConst__li2bpl21;
    call {:si_unique_call 153} DebugPrint(6, 128, Tmp_78);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    Tmp_81 := RecvList__FDO_DATA(FdoData_10);
    assume {:nonnull} Tmp_81 != 0;
    assume Tmp_81 > 0;
    havoc pMpRfd_3;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    havoc Tmp_82;
    assume {:nonnull} Tmp_82 != 0;
    assume Tmp_82 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_82))] != 0;
    call {:si_unique_call 154} NICHandleRecvInterrupt(FdoData_10);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    Tmp_83 := RecvList__FDO_DATA(FdoData_10);
    assume {:nonnull} Tmp_83 != 0;
    assume Tmp_83 > 0;
    havoc pMpRfd_3;
    goto L19;

  L19:
    call {:si_unique_call 155} sdv_47 := WaitScb(FdoData_10);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_47 != 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    status_9 := -1073741668;
    goto L32;

  L32:
    Tmp_74 := strConst__li2bpl23;
    call {:si_unique_call 156} DebugPrint(5, 128, Tmp_74);
    Tmp_72 := status_9;
    goto L1;

  anon14_Then:
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    havoc Tmp_76;
    assume {:nonnull} Tmp_76 != 0;
    assume Tmp_76 > 0;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    call {:si_unique_call 157} status_9 := D100IssueScbCommand(FdoData_10, 1, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_9 == 0;
    call {:si_unique_call 158} sdv_49 := WaitScb(FdoData_10);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_49 == 0;
    status_9 := -1073741668;
    goto L32;

  anon16_Then:
    assume {:partition} sdv_49 != 0;
    goto L32;

  anon15_Then:
    assume {:partition} status_9 != 0;
    goto L32;

  anon13_Then:
    assume {:partition} sdv_47 == 0;
    status_9 := -1073741668;
    goto L32;

  anon18_Then:
    assume {:partition} Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(Tmp_82))] == 0;
    goto L19;
}



procedure {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp(actual_SIrp: int, actual_DeviceObject: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueCorrespondingDeviceIrp"} PciDrvQueueCorrespondingDeviceIrp(actual_SIrp: int, actual_DeviceObject: int)
{
  var {:pointer} Tmp_84: int;
  var {:scalar} sIrpCompleted: int;
  var {:pointer} fdoData: int;
  var {:pointer} Tmp_86: int;
  var {:scalar} status_10: int;
  var {:pointer} stack: int;
  var {:scalar} minor: int;
  var {:scalar} state: int;
  var {:pointer} SIrp: int;
  var {:pointer} DeviceObject: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;

  anon0:
    call {:si_unique_call 159} vslice_dummy_var_26 := __HAVOC_malloc(4);
    call {:si_unique_call 160} state := __HAVOC_malloc(8);
    SIrp := actual_SIrp;
    DeviceObject := actual_DeviceObject;
    call {:si_unique_call 161} Tmp_84 := __HAVOC_malloc(100);
    call {:si_unique_call 162} Tmp_86 := __HAVOC_malloc(172);
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc fdoData;
    call {:si_unique_call 163} stack := sdv_IoGetCurrentIrpStackLocation(SIrp);
    assume {:nonnull} stack != 0;
    assume stack > 0;
    havoc minor;
    sIrpCompleted := 0;
    Tmp_86 := strConst__li2bpl25;
    call {:si_unique_call 164} DebugPrint(5, 4, Tmp_86);
    assume {:nonnull} state != 0;
    assume state > 0;
    call {:si_unique_call 165} status_10 := PciDrvGetPowerPoliciesDeviceState(SIrp, DeviceObject, DeviceState__POWER_STATE(state));
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_10 >= 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Tmp_84 := strConst__li2bpl24;
    call {:si_unique_call 166} DebugPrint(5, 4, Tmp_84);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 167} vslice_dummy_var_30 := PciDrvIoIncrement(fdoData);
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    call {:si_unique_call 168} PoStartNextPowerIrp(0);
    call {:si_unique_call 169} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 170} vslice_dummy_var_27 := PciDrvIoDecrement(fdoData);
    sIrpCompleted := 1;
    goto L27;

  L27:
    call {:si_unique_call 171} status_10 := PoRequestPowerIrp(0, minor, state, li2bplFunctionConstant6706, 0, 0);
    goto L24;

  L24:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_10 < 0;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sIrpCompleted != 0;
    call {:si_unique_call 172} vslice_dummy_var_28 := PciDrvIoDecrement(fdoData);
    goto L1;

  L1:
    return;

  anon15_Then:
    assume {:partition} sIrpCompleted == 0;
    call {:si_unique_call 173} PoStartNextPowerIrp(0);
    assume {:nonnull} SIrp != 0;
    assume SIrp > 0;
    call {:si_unique_call 174} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 175} vslice_dummy_var_29 := PciDrvIoDecrement(fdoData);
    goto L1;

  anon12_Then:
    assume {:partition} 0 <= status_10;
    goto L1;

  anon13_Then:
    goto L27;

  anon14_Then:
    goto L27;

  anon11_Then:
    assume {:partition} 0 > status_10;
    goto L24;
}



procedure {:origName "PciDrvGetPowerPoliciesDeviceState"} PciDrvGetPowerPoliciesDeviceState(actual_SIrp_1: int, actual_DeviceObject_1: int, actual_DevicePowerState: int) returns (Tmp_88: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_88 == 0 || Tmp_88 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetPowerPoliciesDeviceState"} PciDrvGetPowerPoliciesDeviceState(actual_SIrp_1: int, actual_DeviceObject_1: int, actual_DevicePowerState: int) returns (Tmp_88: int)
{
  var {:scalar} wakeSupported: int;
  var {:scalar} Tmp_89: int;
  var {:pointer} fdoData_1: int;
  var {:pointer} Tmp_90: int;
  var {:scalar} systemState: int;
  var {:scalar} deviceState: int;
  var {:pointer} stack_1: int;
  var {:pointer} SIrp_1: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} DevicePowerState: int;

  anon0:
    SIrp_1 := actual_SIrp_1;
    DeviceObject_1 := actual_DeviceObject_1;
    DevicePowerState := actual_DevicePowerState;
    call {:si_unique_call 176} Tmp_90 := __HAVOC_malloc(28);
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc fdoData_1;
    call {:si_unique_call 177} stack_1 := sdv_IoGetCurrentIrpStackLocation(SIrp_1);
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    havoc systemState;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} systemState == 1;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 1;
    Tmp_88 := 0;
    goto L1;

  L1:
    return;

  anon32_Then:
    assume {:partition} systemState != 1;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 4;
    Tmp_88 := 0;
    goto L1;

  anon23_Then:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 4 >= systemState;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    Tmp_88 := -1073741823;
    goto L1;

  anon25_Then:
    goto L21;

  L21:
    deviceState := 4;
    goto L24;

  L24:
    call {:si_unique_call 178} wakeSupported, Tmp_89, Tmp_90, deviceState := PciDrvGetPowerPoliciesDeviceState_loop_L24(wakeSupported, Tmp_89, fdoData_1, Tmp_90, systemState, deviceState);
    goto L24_last;

  L24_last:
    Tmp_89 := systemState;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc Tmp_90;
    assume {:nonnull} Tmp_90 != 0;
    assume Tmp_90 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} deviceState >= Mem_T.INT4[Tmp_90 + Tmp_89 * 4];
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} deviceState != 1;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} deviceState != 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} deviceState != 3;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} deviceState == 4;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc wakeSupported;
    goto L33;

  L33:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} wakeSupported != 0;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := deviceState;
    Tmp_88 := 0;
    goto L1;

  anon28_Then:
    assume {:partition} wakeSupported == 0;
    deviceState := deviceState - 1;
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:partition} deviceState != 4;
    wakeSupported := 0;
    goto L33;

  anon30_Then:
    assume {:partition} deviceState == 3;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc wakeSupported;
    goto L33;

  anon31_Then:
    assume {:partition} deviceState == 2;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc wakeSupported;
    goto L33;

  anon27_Then:
    assume {:partition} deviceState == 1;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc wakeSupported;
    goto L33;

  anon33_Then:
    assume {:partition} Mem_T.INT4[Tmp_90 + Tmp_89 * 4] > deviceState;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 4 >= systemState;
    Tmp_88 := -1073741823;
    goto L1;

  anon26_Then:
    assume {:partition} systemState > 4;
    assume {:nonnull} DevicePowerState != 0;
    assume DevicePowerState > 0;
    Mem_T.INT4[DevicePowerState] := 4;
    Tmp_88 := 0;
    goto L1;

  anon24_Then:
    assume {:partition} systemState > 4;
    goto L21;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_31: int;

  anon0:
    call {:si_unique_call 179} vslice_dummy_var_31 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp(actual_Fdo: int, actual_Irp_3: int, actual_NotUsed_1: int) returns (Tmp_102: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_102 == -1073741802 || Tmp_102 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionSystemPowerUp"} PciDrvCompletionSystemPowerUp(actual_Fdo: int, actual_Irp_3: int, actual_NotUsed_1: int) returns (Tmp_102: int)
{
  var {:pointer} Tmp_103: int;
  var {:pointer} fdoData_5: int;
  var {:scalar} status_14: int;
  var {:pointer} Fdo: int;
  var {:pointer} Irp_3: int;
  var vslice_dummy_var_32: int;

  anon0:
    Fdo := actual_Fdo;
    Irp_3 := actual_Irp_3;
    call {:si_unique_call 180} Tmp_103 := __HAVOC_malloc(156);
    assume {:nonnull} Fdo != 0;
    assume Fdo > 0;
    havoc fdoData_5;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    havoc status_14;
    Tmp_103 := strConst__li2bpl29;
    call {:si_unique_call 181} DebugPrint(5, 4, Tmp_103);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_14 >= 0;
    call {:si_unique_call 182} PciDrvQueueCorrespondingDeviceIrp(Irp_3, Fdo);
    Tmp_102 := -1073741802;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 > status_14;
    call {:si_unique_call 183} PoStartNextPowerIrp(0);
    call {:si_unique_call 184} vslice_dummy_var_32 := PciDrvIoDecrement(fdoData_5);
    Tmp_102 := 0;
    goto L1;
}



procedure {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_5: int) returns (Tmp_105: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_105 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_5: int) returns (Tmp_105: int)
{

  anon0:
    call {:si_unique_call 185} sdv_do_paged_code_check();
    Tmp_105 := 0;
    return;
}



procedure {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_7: int, actual_Irp_4: int) returns (Tmp_109: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_7: int, actual_Irp_4: int) returns (Tmp_109: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} Tmp_111: int;
  var {:pointer} fdoData_7: int;
  var {:pointer} sdv_72: int;
  var {:scalar} status_16: int;
  var {:pointer} stack_3: int;
  var {:pointer} DeviceObject_7: int;
  var {:pointer} Irp_4: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;

  anon0:
    call {:si_unique_call 186} disposition := __HAVOC_malloc(4);
    DeviceObject_7 := actual_DeviceObject_7;
    Irp_4 := actual_Irp_4;
    call {:si_unique_call 187} Tmp_111 := __HAVOC_malloc(32);
    call {:si_unique_call 188} sdv_do_paged_code_check();
    call {:si_unique_call 189} stack_3 := sdv_IoGetCurrentIrpStackLocation(Irp_4);
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    havoc vslice_dummy_var_17;
    call {:si_unique_call 190} sdv_72 := WMIMinorFunctionString_sdv_static_function_12(vslice_dummy_var_17);
    Tmp_111 := strConst__li2bpl30;
    call {:si_unique_call 191} DebugPrint(5, 8, Tmp_111);
    assume {:nonnull} DeviceObject_7 != 0;
    assume DeviceObject_7 > 0;
    havoc fdoData_7;
    call {:si_unique_call 192} vslice_dummy_var_36 := PciDrvPowerUpDevice(fdoData_7, 1);
    call {:si_unique_call 193} vslice_dummy_var_33 := PciDrvIoIncrement(fdoData_7);
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    status_16 := -1073741810;
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    call {:si_unique_call 194} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 195} vslice_dummy_var_34 := PciDrvIoDecrement(fdoData_7);
    Tmp_109 := status_16;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon23_Then:
    call {:si_unique_call 196} status_16 := WmiSystemControl(0, 0, Irp_4, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Mem_T.INT4[disposition] != 0;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} Mem_T.INT4[disposition] != 1;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Mem_T.INT4[disposition] != 2;
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} Mem_T.INT4[disposition] == 3;
    goto L49;

  L49:
    call {:si_unique_call 197} sdv_IoSkipCurrentIrpStackLocation(Irp_4);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume Irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 198} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_4);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L75;

  L75:
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    havoc vslice_dummy_var_18;
    call {:si_unique_call 199} status_16 := sdv_IoCallDriver(vslice_dummy_var_18, Irp_4);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  L57:
    call {:si_unique_call 200} vslice_dummy_var_35 := PciDrvIoDecrement(fdoData_7);
    Tmp_109 := status_16;
    goto L1;

  anon31_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume !(Irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L75;

  anon27_Then:
    assume {:partition} Mem_T.INT4[disposition] != 3;
    call {:si_unique_call 201} sdv_IoSkipCurrentIrpStackLocation(Irp_4);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 202} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_4);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} yogi_error != 1;
    goto L78;

  L78:
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    havoc vslice_dummy_var_19;
    call {:si_unique_call 203} status_16 := sdv_IoCallDriver(vslice_dummy_var_19, Irp_4);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} yogi_error != 1;
    goto L57;

  anon33_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon32_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L78;

  anon28_Then:
    assume {:partition} Mem_T.INT4[disposition] == 2;
    goto L49;

  anon29_Then:
    assume {:partition} Mem_T.INT4[disposition] == 1;
    call {:si_unique_call 204} sdv_IoCompleteRequest(0, 0);
    goto L57;

  anon24_Then:
    assume {:partition} Mem_T.INT4[disposition] == 0;
    goto L57;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 205} vslice_dummy_var_37 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_11: int) returns (Tmp_114: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_114 == -1073741823 || Tmp_114 == -1073741811 || Tmp_114 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_11: int) returns (Tmp_114: int)
{

  anon0:
    call {:si_unique_call 206} sdv_do_paged_code_check();
    call {:si_unique_call 207} Tmp_114 := IoWMIRegistrationControl(0, 2);
    return;
}



procedure {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction: int) returns (Tmp_116: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction: int) returns (Tmp_116: int)
{
  var {:scalar} MinorFunction: int;

  anon0:
    MinorFunction := actual_MinorFunction;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} MinorFunction != 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} MinorFunction != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} MinorFunction != 2;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} MinorFunction != 3;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} MinorFunction != 4;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} MinorFunction != 5;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} MinorFunction != 6;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MinorFunction != 7;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} MinorFunction != 8;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} MinorFunction == 9;
    Tmp_116 := strConst__li2bpl41;
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} MinorFunction != 9;
    Tmp_116 := strConst__li2bpl31;
    goto L1;

  anon23_Then:
    assume {:partition} MinorFunction == 8;
    Tmp_116 := strConst__li2bpl40;
    goto L1;

  anon24_Then:
    assume {:partition} MinorFunction == 7;
    Tmp_116 := strConst__li2bpl39;
    goto L1;

  anon25_Then:
    assume {:partition} MinorFunction == 6;
    Tmp_116 := strConst__li2bpl38;
    goto L1;

  anon26_Then:
    assume {:partition} MinorFunction == 5;
    Tmp_116 := strConst__li2bpl37;
    goto L1;

  anon27_Then:
    assume {:partition} MinorFunction == 4;
    Tmp_116 := strConst__li2bpl36;
    goto L1;

  anon28_Then:
    assume {:partition} MinorFunction == 3;
    Tmp_116 := strConst__li2bpl35;
    goto L1;

  anon29_Then:
    assume {:partition} MinorFunction == 2;
    Tmp_116 := strConst__li2bpl34;
    goto L1;

  anon30_Then:
    assume {:partition} MinorFunction == 1;
    Tmp_116 := strConst__li2bpl33;
    goto L1;

  anon21_Then:
    assume {:partition} MinorFunction == 0;
    Tmp_116 := strConst__li2bpl32;
    goto L1;
}



procedure {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_12: int)
{
  var {:pointer} Tmp_119: int;
  var {:pointer} pMpRfd_4: int;
  var {:scalar} sdv_78: int;
  var {:pointer} sdv_79: int;
  var {:pointer} Tmp_121: int;
  var {:pointer} FdoData_12: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 208} vslice_dummy_var_38 := __HAVOC_malloc(4);
    FdoData_12 := actual_FdoData_12;
    call {:si_unique_call 209} Tmp_119 := __HAVOC_malloc(104);
    call {:si_unique_call 210} Tmp_121 := __HAVOC_malloc(104);
    Tmp_119 := strConst__li2bpl42;
    call {:si_unique_call 211} DebugPrint(5, 1, Tmp_119);
    call {:si_unique_call 212} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 213} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto L11;

  L11:
    call {:si_unique_call 214} pMpRfd_4, sdv_78, sdv_79 := NICFreeAdapterMemory_loop_L11(pMpRfd_4, sdv_78, sdv_79, FdoData_12);
    goto L11_last;

  L11_last:
    call {:si_unique_call 221} sdv_78 := sdv_IsListEmpty(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_78 != 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 215} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto L23;

  L23:
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto L28;

  L28:
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto L33;

  L33:
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 216} ExFreePoolWithTag(0, -1001831600);
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    goto L42;

  L42:
    call {:si_unique_call 217} NICRemoveAllWakeUpPatterns(FdoData_12);
    Tmp_121 := strConst__li2bpl43;
    call {:si_unique_call 218} DebugPrint(5, 1, Tmp_121);
    return;

  anon18_Then:
    goto L42;

  anon17_Then:
    goto L33;

  anon16_Then:
    goto L28;

  anon15_Then:
    goto L23;

  anon14_Then:
    assume {:partition} sdv_78 == 0;
    assume {:nonnull} FdoData_12 != 0;
    assume FdoData_12 > 0;
    call {:si_unique_call 219} sdv_79 := RemoveHeadList(RecvList__FDO_DATA(FdoData_12));
    pMpRfd_4 := sdv_79;
    call {:si_unique_call 220} NICFreeRfd(FdoData_12, pMpRfd_4);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    goto L11;
}



procedure {:origName "NICShutdown"} NICShutdown(actual_FdoData_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICShutdown"} NICShutdown(actual_FdoData_13: int)
{
  var {:pointer} Tmp_122: int;
  var {:pointer} Tmp_124: int;
  var {:pointer} FdoData_13: int;
  var vslice_dummy_var_39: int;

  anon0:
    call {:si_unique_call 222} vslice_dummy_var_39 := __HAVOC_malloc(4);
    FdoData_13 := actual_FdoData_13;
    call {:si_unique_call 223} Tmp_122 := __HAVOC_malloc(72);
    call {:si_unique_call 224} Tmp_124 := __HAVOC_malloc(72);
    Tmp_124 := strConst__li2bpl44;
    call {:si_unique_call 225} DebugPrint(4, 1, Tmp_124);
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 226} NICDisableInterrupt(FdoData_13);
    call {:si_unique_call 227} NICIssueFullReset(FdoData_13);
    call {:si_unique_call 228} ResetPhy(FdoData_13);
    goto L7;

  L7:
    Tmp_122 := strConst__li2bpl45;
    call {:si_unique_call 229} DebugPrint(4, 1, Tmp_122);
    return;

  anon3_Then:
    goto L7;
}



procedure {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_14: int) returns (Tmp_126: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_126 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_14: int) returns (Tmp_126: int)
{
  var {:pointer} DmaAdapterObject: int;
  var {:pointer} Tmp_128: int;
  var {:pointer} FdoData_14: int;
  var vslice_dummy_var_20: int;

  anon0:
    FdoData_14 := actual_FdoData_14;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    havoc DmaAdapterObject;
    call {:si_unique_call 230} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 231} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto L9;

  L9:
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 232} MmUnmapIoSpace(0, 24);
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto L15;

  L15:
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    havoc vslice_dummy_var_20;
    call {:si_unique_call 233} MmUnmapIoSpace(0, vslice_dummy_var_20);
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto L20;

  L20:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} DmaAdapterObject != 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} DmaAdapterObject != 0;
    assume DmaAdapterObject > 0;
    havoc Tmp_128;
    assume {:nonnull} Tmp_128 != 0;
    assume Tmp_128 > 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto L25;

  L25:
    Tmp_126 := 0;
    return;

  anon15_Then:
    goto L25;

  anon14_Then:
    assume {:partition} DmaAdapterObject == 0;
    goto L25;

  anon13_Then:
    goto L20;

  anon12_Then:
    goto L15;

  anon11_Then:
    goto L9;
}



procedure {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_15: int) returns (Tmp_129: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_129 == 0 || Tmp_129 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_15: int) returns (Tmp_129: int)
{
  var {:scalar} i_1: int;
  var {:scalar} Tmp_130: int;
  var {:pointer} Tmp_132: int;
  var {:pointer} Tmp_133: int;
  var {:pointer} Tmp_134: int;
  var {:pointer} NonTxCmdBlockHdr: int;
  var {:scalar} Tmp_135: int;
  var {:pointer} Tmp_136: int;
  var {:pointer} Tmp_137: int;
  var {:scalar} status_17: int;
  var {:pointer} Tmp_138: int;
  var {:pointer} FdoData_15: int;

  anon0:
    FdoData_15 := actual_FdoData_15;
    call {:si_unique_call 234} Tmp_132 := __HAVOC_malloc(88);
    call {:si_unique_call 235} Tmp_133 := __HAVOC_malloc(132);
    call {:si_unique_call 236} Tmp_134 := __HAVOC_malloc(24);
    call {:si_unique_call 237} Tmp_137 := __HAVOC_malloc(24);
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc NonTxCmdBlockHdr;
    Tmp_132 := strConst__li2bpl47;
    call {:si_unique_call 238} DebugPrint(5, 4096, Tmp_132);
    call {:si_unique_call 239} sdv_do_paged_code_check();
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(NonTxCmdBlockHdr)] := 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    i_1 := 0;
    goto L17;

  L17:
    call {:si_unique_call 240} i_1, Tmp_130, Tmp_134, Tmp_135, Tmp_136, Tmp_137 := HwSetupIAAddress_loop_L17(i_1, Tmp_130, Tmp_134, Tmp_135, Tmp_136, Tmp_137, FdoData_15);
    goto L17_last;

  L17_last:
    assume {:CounterLoop 6} {:Counter "i_1"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 6 > i_1;
    Tmp_130 := i_1;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc Tmp_136;
    assume {:nonnull} Tmp_136 != 0;
    assume Tmp_136 > 0;
    havoc Tmp_134;
    Tmp_135 := i_1;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc Tmp_137;
    assume {:nonnull} Tmp_134 != 0;
    assume Tmp_134 > 0;
    assume {:nonnull} Tmp_137 != 0;
    assume Tmp_137 > 0;
    Mem_T.INT4[Tmp_134 + Tmp_130 * 4] := Mem_T.INT4[Tmp_137 + Tmp_135 * 4];
    i_1 := i_1 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_1 >= 6;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc Tmp_138;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} Tmp_138 != 0;
    assume Tmp_138 > 0;
    call {:si_unique_call 241} status_17 := D100SubmitCommandBlockAndWait(FdoData_15);
    Tmp_133 := strConst__li2bpl46;
    call {:si_unique_call 242} DebugPrint(5, 4096, Tmp_133);
    Tmp_129 := status_17;
    return;
}



procedure {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_16: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_16: int)
{
  var {:pointer} Tmp_140: int;
  var {:pointer} Tmp_142: int;
  var {:pointer} Tmp_143: int;
  var {:pointer} FdoData_16: int;
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 243} vslice_dummy_var_40 := __HAVOC_malloc(4);
    FdoData_16 := actual_FdoData_16;
    call {:si_unique_call 244} Tmp_140 := __HAVOC_malloc(84);
    call {:si_unique_call 245} Tmp_142 := __HAVOC_malloc(84);
    Tmp_140 := strConst__li2bpl48;
    call {:si_unique_call 246} DebugPrint(5, 4096, Tmp_140);
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    havoc Tmp_143;
    assume {:nonnull} Tmp_143 != 0;
    assume Tmp_143 > 0;
    call {:si_unique_call 247} NICDisableInterrupt(FdoData_16);
    Tmp_142 := strConst__li2bpl49;
    call {:si_unique_call 248} DebugPrint(5, 4096, Tmp_142);
    return;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 249} vslice_dummy_var_41 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "HwConfigure"} HwConfigure(actual_FdoData_17: int) returns (Tmp_146: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_146 == 0 || Tmp_146 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwConfigure"} HwConfigure(actual_FdoData_17: int) returns (Tmp_146: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_147: int;
  var {:pointer} Tmp_148: int;
  var {:pointer} Tmp_149: int;
  var {:pointer} Tmp_150: int;
  var {:pointer} Tmp_151: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:pointer} Tmp_155: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} Tmp_157: int;
  var {:pointer} Tmp_158: int;
  var {:pointer} Tmp_159: int;
  var {:pointer} Tmp_160: int;
  var {:pointer} Tmp_161: int;
  var {:pointer} Tmp_162: int;
  var {:pointer} Tmp_163: int;
  var {:pointer} Tmp_164: int;
  var {:pointer} Tmp_165: int;
  var {:scalar} sdv_81: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Tmp_169: int;
  var {:pointer} Tmp_170: int;
  var {:pointer} Tmp_171: int;
  var {:pointer} Tmp_172: int;
  var {:pointer} Tmp_173: int;
  var {:pointer} Tmp_174: int;
  var {:pointer} Tmp_175: int;
  var {:pointer} Tmp_176: int;
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:pointer} Tmp_179: int;
  var {:pointer} Tmp_180: int;
  var {:pointer} Tmp_181: int;
  var {:pointer} NonTxCmdBlockHdr_1: int;
  var {:pointer} Tmp_183: int;
  var {:pointer} Tmp_184: int;
  var {:pointer} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:pointer} Tmp_188: int;
  var {:pointer} Tmp_189: int;
  var {:pointer} Tmp_190: int;
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} Tmp_193: int;
  var {:pointer} Tmp_194: int;
  var {:pointer} Tmp_195: int;
  var {:pointer} Tmp_196: int;
  var {:pointer} Tmp_197: int;
  var {:pointer} Tmp_198: int;
  var {:scalar} Tmp_199: int;
  var {:scalar} Tmp_200: int;
  var {:pointer} Tmp_201: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:pointer} Tmp_206: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Tmp_209: int;
  var {:pointer} Tmp_210: int;
  var {:pointer} Tmp_211: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_212: int;
  var {:pointer} Tmp_213: int;
  var {:pointer} Tmp_214: int;
  var {:pointer} Tmp_215: int;
  var {:pointer} Tmp_216: int;
  var {:pointer} Tmp_217: int;
  var {:pointer} Tmp_218: int;
  var {:pointer} Tmp_219: int;
  var {:pointer} FdoData_17: int;
  var boogieTmp: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;

  anon0:
    FdoData_17 := actual_FdoData_17;
    call {:si_unique_call 250} Tmp_147 := __HAVOC_malloc(88);
    call {:si_unique_call 251} Tmp_148 := __HAVOC_malloc(88);
    call {:si_unique_call 252} Tmp_151 := __HAVOC_malloc(88);
    call {:si_unique_call 253} Tmp_157 := __HAVOC_malloc(88);
    call {:si_unique_call 254} Tmp_159 := __HAVOC_malloc(88);
    call {:si_unique_call 255} Tmp_161 := __HAVOC_malloc(88);
    call {:si_unique_call 256} Tmp_162 := __HAVOC_malloc(88);
    call {:si_unique_call 257} Tmp_163 := __HAVOC_malloc(88);
    call {:si_unique_call 258} Tmp_169 := __HAVOC_malloc(88);
    call {:si_unique_call 259} Tmp_171 := __HAVOC_malloc(88);
    call {:si_unique_call 260} Tmp_172 := __HAVOC_malloc(88);
    call {:si_unique_call 261} Tmp_173 := __HAVOC_malloc(88);
    call {:si_unique_call 262} Tmp_176 := __HAVOC_malloc(112);
    call {:si_unique_call 263} Tmp_178 := __HAVOC_malloc(88);
    call {:si_unique_call 264} Tmp_179 := __HAVOC_malloc(88);
    call {:si_unique_call 265} Tmp_180 := __HAVOC_malloc(88);
    call {:si_unique_call 266} Tmp_181 := __HAVOC_malloc(88);
    call {:si_unique_call 267} Tmp_183 := __HAVOC_malloc(104);
    call {:si_unique_call 268} Tmp_185 := __HAVOC_malloc(88);
    call {:si_unique_call 269} Tmp_187 := __HAVOC_malloc(88);
    call {:si_unique_call 270} Tmp_188 := __HAVOC_malloc(88);
    call {:si_unique_call 271} Tmp_190 := __HAVOC_malloc(88);
    call {:si_unique_call 272} Tmp_191 := __HAVOC_malloc(88);
    call {:si_unique_call 273} Tmp_192 := __HAVOC_malloc(68);
    call {:si_unique_call 274} Tmp_193 := __HAVOC_malloc(88);
    call {:si_unique_call 275} Tmp_194 := __HAVOC_malloc(88);
    call {:si_unique_call 276} Tmp_196 := __HAVOC_malloc(88);
    call {:si_unique_call 277} Tmp_197 := __HAVOC_malloc(196);
    call {:si_unique_call 278} Tmp_198 := __HAVOC_malloc(88);
    call {:si_unique_call 279} Tmp_201 := __HAVOC_malloc(88);
    call {:si_unique_call 280} Tmp_203 := __HAVOC_malloc(88);
    call {:si_unique_call 281} Tmp_204 := __HAVOC_malloc(88);
    call {:si_unique_call 282} Tmp_209 := __HAVOC_malloc(88);
    call {:si_unique_call 283} Tmp_211 := __HAVOC_malloc(88);
    call {:si_unique_call 284} Tmp_215 := __HAVOC_malloc(120);
    call {:si_unique_call 285} Tmp_216 := __HAVOC_malloc(88);
    call {:si_unique_call 286} Tmp_218 := __HAVOC_malloc(88);
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc NonTxCmdBlockHdr_1;
    Tmp_192 := strConst__li2bpl53;
    call {:si_unique_call 287} DebugPrint(5, 4096, Tmp_192);
    call {:si_unique_call 288} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(NonTxCmdBlockHdr_1)] := 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_166;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    havoc Tmp_181;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    Mem_T.INT4[Tmp_181] := 22;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_186;
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    havoc Tmp_157;
    assume {:nonnull} Tmp_157 != 0;
    assume Tmp_157 > 0;
    Mem_T.INT4[Tmp_157 + 2 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    havoc Tmp_179;
    assume {:nonnull} Tmp_179 != 0;
    assume Tmp_179 > 0;
    Mem_T.INT4[Tmp_179 + 3 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_217;
    assume {:nonnull} Tmp_217 != 0;
    assume Tmp_217 > 0;
    havoc Tmp_198;
    assume {:nonnull} Tmp_198 != 0;
    assume Tmp_198 > 0;
    Mem_T.INT4[Tmp_198 + 6 * 4] := 50;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_165;
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    havoc Tmp_216;
    assume {:nonnull} Tmp_216 != 0;
    assume Tmp_216 > 0;
    Mem_T.INT4[Tmp_216 + 9 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_156;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    havoc Tmp_171;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    Mem_T.INT4[Tmp_171 + 10 * 4] := 46;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_167;
    assume {:nonnull} Tmp_167 != 0;
    assume Tmp_167 > 0;
    havoc Tmp_209;
    assume {:nonnull} Tmp_209 != 0;
    assume Tmp_209 > 0;
    Mem_T.INT4[Tmp_209 + 11 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_174;
    assume {:nonnull} Tmp_174 != 0;
    assume Tmp_174 > 0;
    havoc Tmp_204;
    assume {:nonnull} Tmp_204 != 0;
    assume Tmp_204 > 0;
    Mem_T.INT4[Tmp_204 + 12 * 4] := 96;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_202;
    assume {:nonnull} Tmp_202 != 0;
    assume Tmp_202 > 0;
    havoc Tmp_194;
    assume {:nonnull} Tmp_194 != 0;
    assume Tmp_194 > 0;
    Mem_T.INT4[Tmp_194 + 13 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_153;
    assume {:nonnull} Tmp_153 != 0;
    assume Tmp_153 > 0;
    havoc Tmp_173;
    assume {:nonnull} Tmp_173 != 0;
    assume Tmp_173 > 0;
    Mem_T.INT4[Tmp_173 + 14 * 4] := 242;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_184;
    assume {:nonnull} Tmp_184 != 0;
    assume Tmp_184 > 0;
    havoc Tmp_172;
    assume {:nonnull} Tmp_172 != 0;
    assume Tmp_172 > 0;
    Mem_T.INT4[Tmp_172 + 16 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_175;
    assume {:nonnull} Tmp_175 != 0;
    assume Tmp_175 > 0;
    havoc Tmp_180;
    assume {:nonnull} Tmp_180 != 0;
    assume Tmp_180 > 0;
    Mem_T.INT4[Tmp_180 + 17 * 4] := 64;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_214;
    assume {:nonnull} Tmp_214 != 0;
    assume Tmp_214 > 0;
    havoc Tmp_188;
    assume {:nonnull} Tmp_188 != 0;
    assume Tmp_188 > 0;
    Mem_T.INT4[Tmp_188 + 18 * 4] := 242;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_160;
    assume {:nonnull} Tmp_160 != 0;
    assume Tmp_160 > 0;
    havoc Tmp_147;
    assume {:nonnull} Tmp_147 != 0;
    assume Tmp_147 > 0;
    Mem_T.INT4[Tmp_147 + 20 * 4] := 63;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_207;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    havoc Tmp_178;
    assume {:nonnull} Tmp_178 != 0;
    assume Tmp_178 > 0;
    Mem_T.INT4[Tmp_178 + 21 * 4] := 5;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_154;
    assume {:nonnull} Tmp_154 != 0;
    assume Tmp_154 > 0;
    havoc Tmp_148;
    assume {:nonnull} Tmp_148 != 0;
    assume Tmp_148 > 0;
    call {:si_unique_call 289} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_148 + 1 * 4] := boogieTmp;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_212;
    assume {:nonnull} Tmp_212 != 0;
    assume Tmp_212 > 0;
    havoc Tmp_151;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_155;
    assume {:nonnull} Tmp_155 != 0;
    assume Tmp_155 > 0;
    havoc Tmp_190;
    assume {:nonnull} Tmp_151 != 0;
    assume Tmp_151 > 0;
    assume {:nonnull} Tmp_190 != 0;
    assume Tmp_190 > 0;
    Mem_T.INT4[Tmp_151 + 3 * 4] := BOR(Mem_T.INT4[Tmp_190 + 3 * 4], 1);
    goto L36;

  L36:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L39;

  L39:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_210;
    assume {:nonnull} Tmp_210 != 0;
    assume Tmp_210 > 0;
    havoc Tmp_187;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    havoc vslice_dummy_var_21;
    Mem_T.INT4[Tmp_187 + 4 * 4] := vslice_dummy_var_21;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_168;
    assume {:nonnull} Tmp_168 != 0;
    assume Tmp_168 > 0;
    havoc Tmp_185;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    havoc vslice_dummy_var_22;
    Mem_T.INT4[Tmp_185 + 5 * 4] := vslice_dummy_var_22;
    goto L41;

  L41:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_219;
    assume {:nonnull} Tmp_219 != 0;
    assume Tmp_219 > 0;
    havoc Tmp_203;
    assume {:nonnull} Tmp_203 != 0;
    assume Tmp_203 > 0;
    call {:si_unique_call 290} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_203 + 7 * 4] := boogieTmp;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_164;
    assume {:nonnull} Tmp_164 != 0;
    assume Tmp_164 > 0;
    havoc Tmp_211;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    Mem_T.INT4[Tmp_211 + 8 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_149;
    assume {:nonnull} Tmp_149 != 0;
    assume Tmp_149 > 0;
    havoc Tmp_161;
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    Mem_T.INT4[Tmp_161 + 15 * 4] := 234;
    goto L46;

  L46:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_152;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    havoc Tmp_201;
    assume {:nonnull} Tmp_201 != 0;
    assume Tmp_201 > 0;
    Mem_T.INT4[Tmp_201 + 19 * 4] := 0;
    goto L49;

  L49:
    Tmp_215 := strConst__li2bpl50;
    call {:si_unique_call 291} DebugPrint(6, 4096, Tmp_215);
    Tmp_197 := strConst__li2bpl51;
    call {:si_unique_call 292} DebugPrint(6, 4096, Tmp_197);
    i_2 := 0;
    goto L56;

  L56:
    call {:si_unique_call 293} i_2, Tmp_158, Tmp_169, Tmp_183, Tmp_199, Tmp_200 := HwConfigure_loop_L56(i_2, Tmp_158, Tmp_169, Tmp_183, Tmp_199, Tmp_200, FdoData_17);
    goto L56_last;

  L56_last:
    assume {:CounterLoop 22} {:Counter "i_2"} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} 22 > i_2;
    Tmp_199 := i_2;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_158;
    assume {:nonnull} Tmp_158 != 0;
    assume Tmp_158 > 0;
    havoc Tmp_169;
    assume {:nonnull} Tmp_169 != 0;
    assume Tmp_169 > 0;
    Tmp_200 := Mem_T.INT4[Tmp_169 + Tmp_199 * 4];
    Tmp_183 := strConst__li2bpl54;
    call {:si_unique_call 294} DebugPrint(6, 4096, Tmp_183);
    i_2 := i_2 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} i_2 >= 22;
    call {:si_unique_call 295} sdv_81 := WaitScb(FdoData_17);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_81 != 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_177;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    assume {:nonnull} Tmp_177 != 0;
    assume Tmp_177 > 0;
    call {:si_unique_call 296} status_18 := D100SubmitCommandBlockAndWait(FdoData_17);
    goto L72;

  L72:
    Tmp_176 := strConst__li2bpl52;
    call {:si_unique_call 297} DebugPrint(5, 4096, Tmp_176);
    Tmp_146 := status_18;
    return;

  anon26_Then:
    assume {:partition} sdv_81 == 0;
    status_18 := -1073741668;
    goto L72;

  anon23_Then:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_189;
    assume {:nonnull} Tmp_189 != 0;
    assume Tmp_189 > 0;
    havoc Tmp_193;
    assume {:nonnull} Tmp_193 != 0;
    assume Tmp_193 > 0;
    Mem_T.INT4[Tmp_193 + 19 * 4] := 192;
    goto L49;

  anon24_Then:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L79;

  L79:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    havoc Tmp_162;
    assume {:nonnull} Tmp_162 != 0;
    assume Tmp_162 > 0;
    Mem_T.INT4[Tmp_162 + 19 * 4] := 128;
    goto L49;

  anon27_Then:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_195;
    assume {:nonnull} Tmp_195 != 0;
    assume Tmp_195 > 0;
    havoc Tmp_218;
    assume {:nonnull} Tmp_218 != 0;
    assume Tmp_218 > 0;
    Mem_T.INT4[Tmp_218 + 19 * 4] := 192;
    goto L49;

  anon28_Then:
    goto L79;

  anon30_Then:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_170;
    assume {:nonnull} Tmp_170 != 0;
    assume Tmp_170 > 0;
    havoc Tmp_196;
    assume {:nonnull} Tmp_196 != 0;
    assume Tmp_196 > 0;
    Mem_T.INT4[Tmp_196 + 8 * 4] := 1;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_205;
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    havoc Tmp_191;
    assume {:nonnull} Tmp_191 != 0;
    assume Tmp_191 > 0;
    Mem_T.INT4[Tmp_191 + 15 * 4] := 106;
    goto L46;

  anon21_Then:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_213;
    assume {:nonnull} Tmp_213 != 0;
    assume Tmp_213 > 0;
    havoc Tmp_159;
    assume {:nonnull} Tmp_159 != 0;
    assume Tmp_159 > 0;
    Mem_T.INT4[Tmp_159 + 4 * 4] := 0;
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_150;
    assume {:nonnull} Tmp_150 != 0;
    assume Tmp_150 > 0;
    havoc Tmp_163;
    assume {:nonnull} Tmp_163 != 0;
    assume Tmp_163 > 0;
    Mem_T.INT4[Tmp_163 + 5 * 4] := 0;
    goto L41;

  anon22_Then:
    goto L39;

  anon29_Then:
    goto L36;
}



procedure {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_18: int) returns (Tmp_220: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} Tmp_220 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_18: int) returns (Tmp_220: int)
{
  var {:pointer} Tmp_221: int;
  var {:scalar} sdv_83: int;
  var {:pointer} Tmp_222: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} Tmp_223: int;
  var {:pointer} Tmp_224: int;
  var {:pointer} FdoData_18: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;

  anon0:
    FdoData_18 := actual_FdoData_18;
    call {:si_unique_call 298} Tmp_221 := __HAVOC_malloc(108);
    call {:si_unique_call 299} Tmp_222 := __HAVOC_malloc(164);
    call {:si_unique_call 300} Tmp_223 := __HAVOC_malloc(108);
    Tmp_221 := strConst__li2bpl55;
    call {:si_unique_call 301} DebugPrint(4, 1, Tmp_221);
    call {:si_unique_call 302} sdv_83 := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_83 != 0;
    goto L15;

  L15:
    call {:si_unique_call 303} Tmp_224 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_224 != 0;
    assume Tmp_224 > 0;
    Mem_T.INT4[Tmp_224] := oldIrql_1;
    call {:si_unique_call 304} sdv_KeRaiseIrql(2, Tmp_224);
    assume {:nonnull} Tmp_224 != 0;
    assume Tmp_224 > 0;
    oldIrql_1 := Mem_T.INT4[Tmp_224];
    call {:si_unique_call 305} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 306} NICFreeQueuedSendPackets(FdoData_18);
    call {:si_unique_call 307} NICFreeBusySendPackets(FdoData_18);
    call {:si_unique_call 308} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 309} sdv_KeLowerIrql(oldIrql_1);
    call {:si_unique_call 310} NICFreeAdapterMemory(FdoData_18);
    call {:si_unique_call 311} vslice_dummy_var_42 := NICUnmapHWResources(FdoData_18);
    Tmp_223 := strConst__li2bpl57;
    call {:si_unique_call 312} DebugPrint(4, 1, Tmp_223);
    Tmp_220 := 0;
    return;

  anon3_Then:
    assume {:partition} sdv_83 == 0;
    Tmp_222 := strConst__li2bpl56;
    call {:si_unique_call 313} DebugPrint(4, 1, Tmp_222);
    call {:si_unique_call 314} vslice_dummy_var_43 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L15;
}



procedure {:origName "NICInitializeDeviceExtension"} NICInitializeDeviceExtension(actual_FdoData_19: int) returns (Tmp_225: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitializeDeviceExtension"} NICInitializeDeviceExtension(actual_FdoData_19: int) returns (Tmp_225: int)
{
  var {:pointer} Tmp_226: int;
  var {:scalar} status_20: int;
  var {:pointer} FdoData_19: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;

  anon0:
    FdoData_19 := actual_FdoData_19;
    call {:si_unique_call 315} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    havoc vslice_dummy_var_23;
    call {:si_unique_call 316} status_20 := GetPCIBusInterfaceStandard(vslice_dummy_var_23, BusInterface__FDO_DATA(FdoData_19));
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_20 >= 0;
    call {:si_unique_call 317} NICGetDeviceInfSettings(FdoData_19);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 318} InitializeListHead(SendQueueHead__FDO_DATA(FdoData_19));
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 319} InitializeListHead(RecvList__FDO_DATA(FdoData_19));
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 320} InitializeListHead(RecvQueueHead__FDO_DATA(FdoData_19));
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 321} InitializeListHead(PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_19)));
    call {:si_unique_call 322} Tmp_226 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    havoc vslice_dummy_var_24;
    Mem_T.INT4[Tmp_226] := vslice_dummy_var_24;
    call {:si_unique_call 323} sdv_KeInitializeSpinLock(Tmp_226);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    call {:si_unique_call 324} Tmp_226 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    havoc vslice_dummy_var_25;
    Mem_T.INT4[Tmp_226] := vslice_dummy_var_25;
    call {:si_unique_call 325} sdv_KeInitializeSpinLock(Tmp_226);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    call {:si_unique_call 326} Tmp_226 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    havoc vslice_dummy_var_26;
    Mem_T.INT4[Tmp_226] := vslice_dummy_var_26;
    call {:si_unique_call 327} sdv_KeInitializeSpinLock(Tmp_226);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    call {:si_unique_call 328} Tmp_226 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    havoc vslice_dummy_var_27;
    Mem_T.INT4[Tmp_226] := vslice_dummy_var_27;
    call {:si_unique_call 329} sdv_KeInitializeSpinLock(Tmp_226);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 330} KeInitializeDpc(WatchDogTimerDpc__FDO_DATA(FdoData_19), li2bplFunctionConstant911, 0);
    call {:si_unique_call 331} KeInitializeTimer(0);
    assume {:nonnull} FdoData_19 != 0;
    assume FdoData_19 > 0;
    call {:si_unique_call 332} KeInitializeEvent(WatchDogTimerEvent__FDO_DATA(FdoData_19), 0, 1);
    Tmp_225 := status_20;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} 0 > status_20;
    Tmp_225 := status_20;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_20: int, actual_pMpRfd_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_20: int, actual_pMpRfd_5: int)
{
  var {:pointer} FdoData_20: int;
  var {:pointer} pMpRfd_5: int;
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 333} vslice_dummy_var_44 := __HAVOC_malloc(4);
    FdoData_20 := actual_FdoData_20;
    pMpRfd_5 := actual_pMpRfd_5;
    call {:si_unique_call 334} sdv_do_paged_code_check();
    call {:si_unique_call 335} IoFreeMdl(0);
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    assume {:nonnull} pMpRfd_5 != 0;
    assume pMpRfd_5 > 0;
    assume {:nonnull} pMpRfd_5 != 0;
    assume pMpRfd_5 > 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    call {:si_unique_call 336} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_20), pMpRfd_5);
    return;
}



procedure {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_21: int) returns (Tmp_229: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_229 == -1073741668 || Tmp_229 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_21: int) returns (Tmp_229: int)
{
  var {:pointer} Tmp_230: int;
  var {:pointer} Tmp_231: int;
  var {:pointer} Tmp_232: int;
  var {:scalar} sdv_89: int;
  var {:pointer} Tmp_233: int;
  var {:scalar} status_21: int;
  var {:pointer} FdoData_21: int;
  var vslice_dummy_var_45: int;

  anon0:
    FdoData_21 := actual_FdoData_21;
    call {:si_unique_call 337} Tmp_231 := __HAVOC_malloc(104);
    call {:si_unique_call 338} Tmp_233 := __HAVOC_malloc(148);
    Tmp_231 := strConst__li2bpl58;
    call {:si_unique_call 339} DebugPrint(5, 1, Tmp_231);
    call {:si_unique_call 340} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    call {:si_unique_call 341} HwSoftwareReset(FdoData_21);
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    havoc Tmp_232;
    assume {:nonnull} Tmp_232 != 0;
    assume Tmp_232 > 0;
    call {:si_unique_call 342} status_21 := D100IssueScbCommand(FdoData_21, 96, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_21 != 0;
    goto L25;

  L25:
    Tmp_233 := strConst__li2bpl59;
    call {:si_unique_call 343} DebugPrint(5, 1, Tmp_233);
    Tmp_229 := status_21;
    return;

  anon11_Then:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 344} sdv_89 := WaitScb(FdoData_21);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_89 != 0;
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    havoc Tmp_230;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    call {:si_unique_call 345} status_21 := D100IssueScbCommand(FdoData_21, 6, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 346} status_21 := HwConfigure(FdoData_21);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 347} status_21 := HwSetupIAAddress(FdoData_21);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 348} vslice_dummy_var_45 := HwClearAllCounters(FdoData_21);
    goto L25;

  anon15_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon14_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon13_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon12_Then:
    assume {:partition} sdv_89 == 0;
    status_21 := -1073741668;
    goto L25;
}



procedure {:origName "GetPCIBusInterfaceStandard"} GetPCIBusInterfaceStandard(actual_DeviceObject_8: int, actual_BusInterfaceStandard: int) returns (Tmp_235: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetPCIBusInterfaceStandard"} GetPCIBusInterfaceStandard(actual_DeviceObject_8: int, actual_BusInterfaceStandard: int) returns (Tmp_235: int)
{
  var {:pointer} irpStack: int;
  var {:pointer} Tmp_237: int;
  var {:scalar} ioStatusBlock: int;
  var {:pointer} irp_1: int;
  var {:scalar} status_22: int;
  var {:pointer} targetObject: int;
  var {:scalar} event: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} BusInterfaceStandard: int;
  var vslice_dummy_var_46: int;

  anon0:
    call {:si_unique_call 349} ioStatusBlock := __HAVOC_malloc(12);
    call {:si_unique_call 350} event := __HAVOC_malloc(156);
    DeviceObject_8 := actual_DeviceObject_8;
    BusInterfaceStandard := actual_BusInterfaceStandard;
    call {:si_unique_call 351} Tmp_237 := __HAVOC_malloc(148);
    Tmp_237 := strConst__li2bpl60;
    call {:si_unique_call 352} DebugPrint(5, 1, Tmp_237);
    call {:si_unique_call 353} sdv_do_paged_code_check();
    call {:si_unique_call 354} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 355} targetObject := IoGetAttachedDeviceReference(DeviceObject_8);
    call {:si_unique_call 356} irp_1 := IoBuildSynchronousFsdRequest(27, 0, 0, 0, 0, 0, ioStatusBlock);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_1 != 0;
    call {:si_unique_call 357} irpStack := sdv_IoGetNextIrpStackLocation(irp_1);
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} irp_1 != 0;
    assume irp_1 > 0;
    call {:si_unique_call 358} status_22 := sdv_IoCallDriver(targetObject, irp_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_22 == 259;
    call {:si_unique_call 359} status_22 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} ioStatusBlock != 0;
    assume ioStatusBlock > 0;
    havoc status_22;
    goto L44;

  L44:
    call {:si_unique_call 360} vslice_dummy_var_46 := sdv_ObDereferenceObject(0);
    Tmp_235 := status_22;
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} status_22 != 259;
    goto L44;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_1 == 0;
    status_22 := -1073741670;
    goto L44;
}



procedure {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_22: int) returns (Tmp_238: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_238 == -1073741668 || Tmp_238 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_22: int) returns (Tmp_238: int)
{
  var {:scalar} counter: int;
  var {:pointer} Tmp_240: int;
  var {:pointer} Tmp_241: int;
  var {:pointer} Tmp_242: int;
  var {:pointer} Tmp_243: int;
  var {:scalar} status_23: int;
  var {:scalar} bResult: int;
  var {:pointer} FdoData_22: int;

  anon0:
    FdoData_22 := actual_FdoData_22;
    call {:si_unique_call 361} Tmp_240 := __HAVOC_malloc(96);
    call {:si_unique_call 362} Tmp_243 := __HAVOC_malloc(140);
    Tmp_240 := strConst__li2bpl61;
    call {:si_unique_call 363} DebugPrint(5, 4096, Tmp_240);
    call {:si_unique_call 364} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    havoc Tmp_242;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} Tmp_242 != 0;
    assume Tmp_242 > 0;
    call {:si_unique_call 365} status_23 := D100IssueScbCommand(FdoData_22, 64, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_23 != 0;
    goto L21;

  L21:
    Tmp_243 := strConst__li2bpl62;
    call {:si_unique_call 366} DebugPrint(5, 4096, Tmp_243);
    Tmp_238 := status_23;
    return;

  anon11_Then:
    assume {:partition} status_23 == 0;
    call {:si_unique_call 367} status_23 := D100IssueScbCommand(FdoData_22, 112, 1);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_23 == 0;
    bResult := 0;
    counter := 100000;
    goto L31;

  L31:
    call {:si_unique_call 368} counter, Tmp_241 := HwClearAllCounters_loop_L31(counter, Tmp_241, FdoData_22);
    goto L31_last;

  L31_last:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} counter != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    havoc Tmp_241;
    assume {:nonnull} Tmp_241 != 0;
    assume Tmp_241 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    counter := counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    bResult := 1;
    goto L32;

  L32:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} bResult != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto L21;

  anon14_Then:
    assume {:partition} bResult == 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    status_23 := -1073741668;
    goto L21;

  anon13_Then:
    assume {:partition} counter == 0;
    goto L32;

  anon12_Then:
    assume {:partition} status_23 != 0;
    goto L21;
}



procedure {:origName "NICGetDeviceInfSettings"} NICGetDeviceInfSettings(actual_FdoData_23: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICGetDeviceInfSettings"} NICGetDeviceInfSettings(actual_FdoData_23: int)
{
  var {:scalar} Tmp_244: int;
  var {:scalar} Tmp_245: int;
  var {:pointer} Tmp_246: int;
  var {:scalar} sdv_101: int;
  var {:scalar} Tmp_247: int;
  var {:scalar} Tmp_249: int;
  var {:scalar} Tmp_250: int;
  var {:scalar} Tmp_251: int;
  var {:pointer} Tmp_252: int;
  var {:scalar} sdv_102: int;
  var {:scalar} Tmp_253: int;
  var {:pointer} Tmp_254: int;
  var {:scalar} sdv_103: int;
  var {:scalar} sdv_105: int;
  var {:pointer} Tmp_255: int;
  var {:pointer} Tmp_256: int;
  var {:pointer} Tmp_257: int;
  var {:pointer} Tmp_258: int;
  var {:scalar} Tmp_260: int;
  var {:pointer} FdoData_23: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;

  anon0:
    call {:si_unique_call 369} vslice_dummy_var_47 := __HAVOC_malloc(4);
    FdoData_23 := actual_FdoData_23;
    call {:si_unique_call 370} Tmp_246 := __HAVOC_malloc(48);
    call {:si_unique_call 371} Tmp_252 := __HAVOC_malloc(28);
    call {:si_unique_call 372} Tmp_254 := __HAVOC_malloc(28);
    call {:si_unique_call 373} Tmp_255 := __HAVOC_malloc(64);
    call {:si_unique_call 374} Tmp_256 := __HAVOC_malloc(88);
    call {:si_unique_call 375} Tmp_258 := __HAVOC_malloc(48);
    Tmp_254 := strConst__li2bpl63;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    call {:si_unique_call 376} sdv_101 := PciDrvReadRegistryValue(FdoData_23, Tmp_254, NumRfd__FDO_DATA(FdoData_23));
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_101 != 0;
    goto L8;

  L8:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} 1024 > Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)];
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_245 := Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)];
    goto L11;

  L11:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)] := Tmp_245;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)] > 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_253 := Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)];
    goto L15;

  L15:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)] := Tmp_253;
    Tmp_252 := strConst__li2bpl68;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    call {:si_unique_call 377} sdv_102 := PciDrvReadRegistryValue(FdoData_23, Tmp_252, NumTcb__FDO_DATA(FdoData_23));
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_102 != 0;
    goto L21;

  L21:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} 64 > Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)];
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_251 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)];
    goto L24;

  L24:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)] := Tmp_251;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)] > 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_247 := Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)];
    goto L28;

  L28:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)] := Tmp_247;
    Tmp_258 := strConst__li2bpl69;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    call {:si_unique_call 378} sdv_103 := PciDrvReadRegistryValue(FdoData_23, Tmp_258, NumBuffers__FDO_DATA(FdoData_23));
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_103 != 0;
    goto L34;

  L34:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} 32 > Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)];
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_260 := Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)];
    goto L37;

  L37:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)] := Tmp_260;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)] > 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_244 := Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)];
    goto L41;

  L41:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)] := Tmp_244;
    Tmp_246 := strConst__li2bpl70;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    call {:si_unique_call 379} sdv_105 := PciDrvReadRegistryValue(FdoData_23, Tmp_246, SpeedDuplex__FDO_DATA(FdoData_23));
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} sdv_105 != 0;
    goto L47;

  L47:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 4 > Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)];
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_249 := Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)];
    goto L50;

  L50:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] := Tmp_249;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Tmp_250 := Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)];
    goto L54;

  L54:
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] := Tmp_250;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] != 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] != 2;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] != 3;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] == 4;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto L56;

  L56:
    Tmp_255 := strConst__li2bpl64;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    call {:si_unique_call 380} vslice_dummy_var_48 := PciDrvReadRegistryValue(FdoData_23, Tmp_255, IsUpperEdgeNdis__FDO_DATA(FdoData_23));
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_23)] != 0;
    Tmp_257 := strConst__li2bpl66;
    goto L74;

  L74:
    Tmp_256 := strConst__li2bpl67;
    call {:si_unique_call 381} DebugPrint(4, 1, Tmp_256);
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    return;

  anon43_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(FdoData_23)] == 0;
    Tmp_257 := strConst__li2bpl65;
    goto L74;

  anon44_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] != 4;
    goto L56;

  anon45_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] == 3;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto L56;

  anon46_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] == 2;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto L56;

  anon51_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] == 1;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    goto L56;

  anon50_Then:
    assume {:partition} 0 >= Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)];
    Tmp_250 := 0;
    goto L54;

  anon42_Then:
    assume {:partition} Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] >= 4;
    Tmp_249 := 4;
    goto L50;

  anon41_Then:
    assume {:partition} sdv_105 == 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[SpeedDuplex__FDO_DATA(FdoData_23)] := 0;
    goto L47;

  anon49_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)];
    Tmp_244 := 1;
    goto L41;

  anon40_Then:
    assume {:partition} Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)] >= 32;
    Tmp_260 := 32;
    goto L37;

  anon39_Then:
    assume {:partition} sdv_103 == 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumBuffers__FDO_DATA(FdoData_23)] := 8;
    goto L34;

  anon48_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)];
    Tmp_247 := 1;
    goto L28;

  anon38_Then:
    assume {:partition} Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)] >= 64;
    Tmp_251 := 64;
    goto L24;

  anon37_Then:
    assume {:partition} sdv_102 == 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumTcb__FDO_DATA(FdoData_23)] := 32;
    goto L21;

  anon47_Then:
    assume {:partition} 1 >= Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)];
    Tmp_253 := 1;
    goto L15;

  anon36_Then:
    assume {:partition} Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)] >= 1024;
    Tmp_245 := 1024;
    goto L11;

  anon35_Then:
    assume {:partition} sdv_101 == 0;
    assume {:nonnull} FdoData_23 != 0;
    assume FdoData_23 > 0;
    Mem_T.INT4[NumRfd__FDO_DATA(FdoData_23)] := 32;
    goto L8;
}



procedure {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_24: int) returns (Tmp_261: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_24: int) returns (Tmp_261: int)
{
  var {:dopa} {:scalar} waitWakeEnabled: int;
  var {:pointer} Tmp_262: int;
  var {:pointer} Tmp_263: int;
  var {:pointer} Tmp_264: int;
  var {:pointer} FdoData_24: int;
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 382} waitWakeEnabled := __HAVOC_malloc(4);
    FdoData_24 := actual_FdoData_24;
    call {:si_unique_call 383} Tmp_262 := __HAVOC_malloc(96);
    call {:si_unique_call 384} Tmp_263 := __HAVOC_malloc(64);
    call {:si_unique_call 385} sdv_do_paged_code_check();
    Tmp_263 := strConst__li2bpl71;
    call {:si_unique_call 386} vslice_dummy_var_49 := PciDrvReadRegistryValue(FdoData_24, Tmp_263, waitWakeEnabled);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[waitWakeEnabled] != 0;
    Tmp_264 := strConst__li2bpl66;
    goto L13;

  L13:
    Tmp_262 := strConst__li2bpl73;
    call {:si_unique_call 387} DebugPrint(5, 4, Tmp_262);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    Tmp_261 := Mem_T.INT4[waitWakeEnabled];
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[waitWakeEnabled] == 0;
    Tmp_264 := strConst__li2bpl72;
    goto L13;
}



procedure {:origName "PciDrvWaitWakeIoCompletionRoutine"} PciDrvWaitWakeIoCompletionRoutine(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context: int) returns (Tmp_266: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_266 == 0 || Tmp_266 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWaitWakeIoCompletionRoutine"} PciDrvWaitWakeIoCompletionRoutine(actual_DeviceObject_9: int, actual_Irp_5: int, actual_Context: int) returns (Tmp_266: int)
{
  var {:scalar} oldWakeState: int;
  var {:scalar} sdv_107: int;
  var {:pointer} Tmp_268: int;
  var {:pointer} DeviceObject_9: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    call {:si_unique_call 388} Tmp_268 := __HAVOC_malloc(148);
    Tmp_268 := strConst__li2bpl74;
    call {:si_unique_call 389} DebugPrint(5, 4, Tmp_268);
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    oldWakeState := sdv_107;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} oldWakeState == 4;
    Tmp_266 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} oldWakeState != 4;
    Tmp_266 := -1073741802;
    goto L1;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 390} vslice_dummy_var_50 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "PciDrvArmForWake"} PciDrvArmForWake(actual_FdoData_25: int, actual_DeviceStateChange: int) returns (Tmp_271: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_271 == 1 || Tmp_271 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvArmForWake"} PciDrvArmForWake(actual_FdoData_25: int, actual_DeviceStateChange: int) returns (Tmp_271: int)
{
  var {:scalar} oldWakeState_1: int;
  var {:pointer} Tmp_272: int;
  var {:scalar} sdv_108: int;
  var {:pointer} Tmp_273: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_111: int;
  var {:scalar} sdv_113: int;
  var {:scalar} status_24: int;
  var {:scalar} Tmp_274: int;
  var {:pointer} FdoData_25: int;
  var {:scalar} DeviceStateChange: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 391} powerState := __HAVOC_malloc(8);
    FdoData_25 := actual_FdoData_25;
    DeviceStateChange := actual_DeviceStateChange;
    call {:si_unique_call 392} Tmp_272 := __HAVOC_malloc(64);
    call {:si_unique_call 393} Tmp_273 := __HAVOC_malloc(64);
    call {:si_unique_call 394} sdv_do_paged_code_check();
    call {:si_unique_call 395} sdv_108 := IsPoMgmtSupported(FdoData_25);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_108 != 0;
    Tmp_272 := strConst__li2bpl75;
    call {:si_unique_call 396} DebugPrint(5, 4, Tmp_272);
    call {:si_unique_call 397} KeEnterCriticalRegion();
    call {:si_unique_call 398} status_24 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} DeviceStateChange != 0;
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    goto L25;

  L25:
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 399} sdv_111 := PciDrvGetWaitWakeEnableState(FdoData_25);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_111 != 0;
    oldWakeState_1 := sdv_113;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} oldWakeState_1 != 1;
    status_24 := 0;
    goto L42;

  L42:
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    call {:si_unique_call 400} vslice_dummy_var_51 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_25), 0, 0);
    call {:si_unique_call 401} KeLeaveCriticalRegion();
    Tmp_273 := strConst__li2bpl76;
    call {:si_unique_call 402} DebugPrint(5, 4, Tmp_273);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_24 == 259;
    Tmp_274 := 1;
    goto L54;

  L54:
    Tmp_271 := Tmp_274;
    goto L1;

  L1:
    return;

  anon19_Then:
    assume {:partition} status_24 != 259;
    Tmp_274 := 0;
    goto L54;

  anon21_Then:
    assume {:partition} oldWakeState_1 == 1;
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    call {:si_unique_call 403} KeClearEvent(WakeCompletedEvent__FDO_DATA(FdoData_25));
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 404} status_24 := PoRequestPowerIrp(0, 0, powerState, li2bplFunctionConstant5764, 0, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_24 < 0;
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    call {:si_unique_call 405} vslice_dummy_var_52 := KeSetEvent(WakeCompletedEvent__FDO_DATA(FdoData_25), 0, 0);
    goto L42;

  anon20_Then:
    assume {:partition} 0 <= status_24;
    goto L42;

  anon18_Then:
    assume {:partition} sdv_111 == 0;
    goto L27;

  L27:
    status_24 := -1073741823;
    goto L42;

  anon17_Then:
    goto L27;

  anon16_Then:
    assume {:partition} DeviceStateChange == 0;
    goto L25;

  anon15_Then:
    assume {:partition} sdv_108 == 0;
    Tmp_271 := 0;
    goto L1;
}



procedure {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_26: int, actual_DeviceStateChange_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_26: int, actual_DeviceStateChange_1: int)
{
  var {:pointer} Tmp_276: int;
  var {:scalar} oldWakeState_2: int;
  var {:scalar} sdv_117: int;
  var {:scalar} sdv_119: int;
  var {:pointer} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} FdoData_26: int;
  var {:scalar} DeviceStateChange_1: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;

  anon0:
    call {:si_unique_call 406} vslice_dummy_var_53 := __HAVOC_malloc(4);
    FdoData_26 := actual_FdoData_26;
    DeviceStateChange_1 := actual_DeviceStateChange_1;
    call {:si_unique_call 407} Tmp_276 := __HAVOC_malloc(64);
    call {:si_unique_call 408} Tmp_279 := __HAVOC_malloc(64);
    call {:si_unique_call 409} Tmp_280 := __HAVOC_malloc(76);
    call {:si_unique_call 410} sdv_do_paged_code_check();
    Tmp_276 := strConst__li2bpl77;
    call {:si_unique_call 411} DebugPrint(5, 4, Tmp_276);
    call {:si_unique_call 412} KeEnterCriticalRegion();
    call {:si_unique_call 413} vslice_dummy_var_54 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceStateChange_1 == 0;
    goto L24;

  L24:
    oldWakeState_2 := sdv_117;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} oldWakeState_2 == 4;
    Tmp_280 := strConst__li2bpl78;
    call {:si_unique_call 414} DebugPrint(5, 4, Tmp_280);
    call {:si_unique_call 415} vslice_dummy_var_56 := IoCancelIrp(0);
    oldWakeState_2 := sdv_119;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} oldWakeState_2 == 7;
    call {:si_unique_call 416} sdv_IoCompleteRequest(0, 0);
    goto L26;

  L26:
    call {:si_unique_call 417} vslice_dummy_var_55 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    call {:si_unique_call 418} vslice_dummy_var_57 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_26), 0, 0);
    call {:si_unique_call 419} KeLeaveCriticalRegion();
    Tmp_279 := strConst__li2bpl79;
    call {:si_unique_call 420} DebugPrint(5, 4, Tmp_279);
    return;

  anon9_Then:
    assume {:partition} oldWakeState_2 != 7;
    goto L26;

  anon8_Then:
    assume {:partition} oldWakeState_2 != 4;
    goto L26;

  anon7_Then:
    assume {:partition} DeviceStateChange_1 != 0;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    goto L24;
}



procedure {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice(actual_FdoData_27: int, actual_Wait: int) returns (Tmp_281: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_281 == 0 || Tmp_281 == 258 || Tmp_281 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice(actual_FdoData_27: int, actual_Wait: int) returns (Tmp_281: int)
{
  var {:pointer} waitObjects: int;
  var {:pointer} Tmp_282: int;
  var {:scalar} sdv_122: int;
  var {:pointer} Tmp_284: int;
  var {:scalar} status_26: int;
  var {:pointer} FdoData_27: int;
  var {:scalar} Wait: int;
  var vslice_dummy_var_28: int;

  anon0:
    FdoData_27 := actual_FdoData_27;
    Wait := actual_Wait;
    call {:si_unique_call 421} waitObjects := __HAVOC_malloc(8);
    call {:si_unique_call 422} Tmp_282 := __HAVOC_malloc(112);
    call {:si_unique_call 423} Tmp_284 := __HAVOC_malloc(240);
    status_26 := 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Wait != 0;
    Tmp_284 := strConst__li2bpl80;
    call {:si_unique_call 424} DebugPrint(5, 4, Tmp_284);
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    call {:si_unique_call 425} status_26 := KeWaitForMultipleObjects(2, 0, 0, 0, 0, 0, 0, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_26 < 0;
    Tmp_282 := strConst__li2bpl81;
    call {:si_unique_call 426} DebugPrint(2, 4, Tmp_282);
    goto L7;

  L7:
    Tmp_281 := status_26;
    return;

  anon20_Then:
    assume {:partition} 0 <= status_26;
    goto L11;

  L11:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 427} sdv_122 := sdv_KeGetCurrentIrql();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_122 == 2;
    call {:si_unique_call 428} status_26 := PciDrvQueuePassiveLevelCallback(FdoData_27, li2bplFunctionConstant5293, 0, 0);
    goto L7;

  anon22_Then:
    assume {:partition} sdv_122 != 2;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    havoc vslice_dummy_var_28;
    call {:si_unique_call 429} PciDrvPowerUpDeviceCallback(vslice_dummy_var_28, 0);
    goto L7;

  anon21_Then:
    goto L7;

  anon18_Then:
    goto L7;

  anon19_Then:
    assume {:partition} Wait == 0;
    goto L7;

  anon24_Then:
    goto L11;

  anon17_Then:
    goto L7;

  anon23_Then:
    goto L7;
}



procedure {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_28: int) returns (Tmp_285: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_28: int) returns (Tmp_285: int)
{
  var {:pointer} Tmp_286: int;
  var {:pointer} Tmp_287: int;
  var {:dopa} {:scalar} savePowerEnabled: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} FdoData_28: int;
  var vslice_dummy_var_58: int;

  anon0:
    call {:si_unique_call 430} savePowerEnabled := __HAVOC_malloc(4);
    FdoData_28 := actual_FdoData_28;
    call {:si_unique_call 431} Tmp_287 := __HAVOC_malloc(68);
    call {:si_unique_call 432} Tmp_288 := __HAVOC_malloc(116);
    call {:si_unique_call 433} sdv_do_paged_code_check();
    Tmp_287 := strConst__li2bpl82;
    call {:si_unique_call 434} vslice_dummy_var_58 := PciDrvReadRegistryValue(FdoData_28, Tmp_287, savePowerEnabled);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Mem_T.INT4[savePowerEnabled] != 0;
    Tmp_286 := strConst__li2bpl66;
    goto L13;

  L13:
    Tmp_288 := strConst__li2bpl83;
    call {:si_unique_call 435} DebugPrint(5, 4, Tmp_288);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    Tmp_285 := Mem_T.INT4[savePowerEnabled];
    return;

  anon3_Then:
    assume {:partition} Mem_T.INT4[savePowerEnabled] == 0;
    Tmp_286 := strConst__li2bpl72;
    goto L13;
}



procedure {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_29: int, actual_DeviceStateChange_2: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_29: int, actual_DeviceStateChange_2: int)
{
  var {:pointer} Tmp_290: int;
  var {:scalar} sdv_127: int;
  var {:pointer} Tmp_292: int;
  var {:pointer} Tmp_294: int;
  var {:pointer} FdoData_29: int;
  var {:scalar} DeviceStateChange_2: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 436} vslice_dummy_var_59 := __HAVOC_malloc(4);
    FdoData_29 := actual_FdoData_29;
    DeviceStateChange_2 := actual_DeviceStateChange_2;
    call {:si_unique_call 437} Tmp_290 := __HAVOC_malloc(140);
    call {:si_unique_call 438} Tmp_292 := __HAVOC_malloc(156);
    call {:si_unique_call 439} Tmp_294 := __HAVOC_malloc(140);
    call {:si_unique_call 440} sdv_do_paged_code_check();
    Tmp_294 := strConst__li2bpl84;
    call {:si_unique_call 441} DebugPrint(5, 4, Tmp_294);
    call {:si_unique_call 442} KeEnterCriticalRegion();
    Tmp_292 := strConst__li2bpl85;
    call {:si_unique_call 443} DebugPrint(5, 1024, Tmp_292);
    call {:si_unique_call 444} vslice_dummy_var_60 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 445} PciDrvUnregisterPowerStateNotification(FdoData_29);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceStateChange_2 != 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 446} sdv_127 := KeCancelTimer(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_127 != 0;
    call {:si_unique_call 447} vslice_dummy_var_62 := PciDrvIoDecrement(FdoData_29);
    goto L26;

  L26:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 448} vslice_dummy_var_61 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_29), 0, 0);
    call {:si_unique_call 449} KeLeaveCriticalRegion();
    Tmp_290 := strConst__li2bpl86;
    call {:si_unique_call 450} DebugPrint(5, 4, Tmp_290);
    return;

  anon9_Then:
    assume {:partition} sdv_127 == 0;
    goto L26;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} DeviceStateChange_2 == 0;
    goto L24;
}



procedure {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_30: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_30: int)
{
  var {:scalar} delay: int;
  var {:pointer} Tmp_297: int;
  var {:pointer} FdoData_30: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 451} delay := __HAVOC_malloc(20);
    call {:si_unique_call 452} vslice_dummy_var_63 := __HAVOC_malloc(4);
    FdoData_30 := actual_FdoData_30;
    call {:si_unique_call 453} Tmp_297 := __HAVOC_malloc(64);
    Tmp_297 := strConst__li2bpl87;
    call {:si_unique_call 454} DebugPrint(5, 4, Tmp_297);
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;

  L11:
    call {:si_unique_call 455} vslice_dummy_var_64 := PciDrvIoIncrement(FdoData_30);
    call {:si_unique_call 456} vslice_dummy_var_65 := KeSetTimer(0, delay, 0);
    return;

  anon3_Then:
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;
}



procedure {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_31: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_31: int)
{
  var {:pointer} Tmp_298: int;
  var {:scalar} callbackName: int;
  var {:pointer} Tmp_299: int;
  var {:pointer} Tmp_300: int;
  var {:scalar} status_28: int;
  var {:pointer} FdoData_31: int;
  var boogieTmp: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 457} callbackName := __HAVOC_malloc(12);
    call {:si_unique_call 458} vslice_dummy_var_66 := __HAVOC_malloc(4);
    call {:si_unique_call 459} vslice_dummy_var_67 := __HAVOC_malloc(24);
    FdoData_31 := actual_FdoData_31;
    call {:si_unique_call 460} Tmp_298 := __HAVOC_malloc(84);
    call {:si_unique_call 461} Tmp_299 := __HAVOC_malloc(188);
    call {:si_unique_call 462} Tmp_300 := __HAVOC_malloc(116);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    Tmp_298 := strConst__li2bpl90;
    call {:si_unique_call 463} RtlInitUnicodeString(callbackName, Tmp_298);
    call {:si_unique_call 464} sdv_InitializeObjectAttributes(0, 0, 80, 0, 0);
    call {:si_unique_call 465} status_28 := ExCreateCallback(0, 0, 0, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_28 >= 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    call {:si_unique_call 466} boogieTmp := ExRegisterCallback(0, li2bplFunctionConstant5299, 0);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_300 := strConst__li2bpl89;
    call {:si_unique_call 467} DebugPrint(2, 4, Tmp_300);
    call {:si_unique_call 468} vslice_dummy_var_68 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    assume {:partition} 0 > status_28;
    Tmp_299 := strConst__li2bpl88;
    call {:si_unique_call 469} DebugPrint(2, 4, Tmp_299);
    goto L1;
}



procedure {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_32: int, actual_DeviceStateChange_3: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_32: int, actual_DeviceStateChange_3: int)
{
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_305: int;
  var {:scalar} sdv_136: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} FdoData_32: int;
  var {:scalar} DeviceStateChange_3: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;

  anon0:
    call {:si_unique_call 470} vslice_dummy_var_69 := __HAVOC_malloc(4);
    FdoData_32 := actual_FdoData_32;
    DeviceStateChange_3 := actual_DeviceStateChange_3;
    call {:si_unique_call 471} Tmp_303 := __HAVOC_malloc(156);
    call {:si_unique_call 472} Tmp_305 := __HAVOC_malloc(144);
    call {:si_unique_call 473} Tmp_307 := __HAVOC_malloc(144);
    call {:si_unique_call 474} sdv_do_paged_code_check();
    Tmp_305 := strConst__li2bpl91;
    call {:si_unique_call 475} DebugPrint(5, 4, Tmp_305);
    call {:si_unique_call 476} KeEnterCriticalRegion();
    Tmp_303 := strConst__li2bpl85;
    call {:si_unique_call 477} DebugPrint(5, 1024, Tmp_303);
    call {:si_unique_call 478} vslice_dummy_var_70 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 479} PciDrvRegisterPowerStateNotification(FdoData_32);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DeviceStateChange_3 != 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 480} sdv_136 := PciDrvGetPowerSaveEnableState(FdoData_32);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_136 != 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L37;

  L37:
    call {:si_unique_call 481} PciDrvSetIdleTimer(FdoData_32);
    goto L26;

  L26:
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 482} vslice_dummy_var_71 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_32), 0, 0);
    call {:si_unique_call 483} KeLeaveCriticalRegion();
    Tmp_307 := strConst__li2bpl92;
    call {:si_unique_call 484} DebugPrint(5, 4, Tmp_307);
    return;

  anon12_Then:
    call {:si_unique_call 485} KeInitializeTimer(0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 486} KeInitializeDpc(IdleDetectionTimerDpc__FDO_DATA(FdoData_32), li2bplFunctionConstant5286, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 487} KeInitializeEvent(IdlePowerUpCompleteEvent__FDO_DATA(FdoData_32), 0, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 488} KeInitializeEvent(IdlePowerDownCompleteEvent__FDO_DATA(FdoData_32), 0, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto L37;

  anon11_Then:
    assume {:partition} sdv_136 == 0;
    goto L26;

  anon10_Then:
    goto L26;

  anon9_Then:
    assume {:partition} DeviceStateChange_3 == 0;
    goto L24;
}



procedure {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback(actual_DeviceObject_10: int, actual_Context_1: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback(actual_DeviceObject_10: int, actual_Context_1: int)
{
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:scalar} powerState_1: int;
  var {:pointer} fdoData_9: int;
  var {:scalar} status_30: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Context_1: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 489} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 490} vslice_dummy_var_72 := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    Context_1 := actual_Context_1;
    call {:si_unique_call 491} Tmp_308 := __HAVOC_malloc(132);
    call {:si_unique_call 492} Tmp_310 := __HAVOC_malloc(132);
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc fdoData_9;
    Tmp_308 := strConst__li2bpl94;
    call {:si_unique_call 493} DebugPrint(5, 4, Tmp_308);
    call {:si_unique_call 494} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 495} KeClearEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_9));
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_1)] := 1;
    call {:si_unique_call 496} status_30 := PoRequestPowerIrp(0, 2, powerState_1, li2bplFunctionConstant5292, 0, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_30 >= 0;
    call {:si_unique_call 497} status_30 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L28;

  L28:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Context_1 != 0;
    Tmp_311 := Context_1;
    assume {:nonnull} Tmp_311 != 0;
    assume Tmp_311 > 0;
    call {:si_unique_call 498} IoFreeWorkItem(0);
    call {:si_unique_call 499} sdv_ExFreePool(0);
    goto L29;

  L29:
    Tmp_310 := strConst__li2bpl93;
    call {:si_unique_call 500} DebugPrint(5, 4, Tmp_310);
    return;

  anon6_Then:
    assume {:partition} Context_1 == 0;
    goto L29;

  anon5_Then:
    assume {:partition} 0 > status_30;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 501} vslice_dummy_var_73 := KeSetEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_9), 0, 0);
    goto L28;
}



procedure {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_33: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_33: int)
{
  var {:scalar} sdv_140: int;
  var {:pointer} FdoData_33: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 502} vslice_dummy_var_74 := __HAVOC_malloc(4);
    FdoData_33 := actual_FdoData_33;
    call {:si_unique_call 503} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_33 != 0;
    assume FdoData_33 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 504} sdv_140 := KeCancelTimer(0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_140 != 0;
    call {:si_unique_call 505} vslice_dummy_var_75 := PciDrvIoDecrement(FdoData_33);
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_140 == 0;
    goto L1;

  anon5_Then:
    goto L1;
}



procedure {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_34: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_34: int)
{
  var {:pointer} FdoData_34: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;

  anon0:
    call {:si_unique_call 506} vslice_dummy_var_76 := __HAVOC_malloc(4);
    FdoData_34 := actual_FdoData_34;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 507} ExUnregisterCallback(0);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 508} vslice_dummy_var_77 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    goto L4;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 509} vslice_dummy_var_78 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_79: int;

  anon0:
    call {:si_unique_call 510} vslice_dummy_var_79 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_35: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_35: int)
{
  var {:pointer} pEntry: int;
  var {:pointer} Tmp_322: int;
  var {:scalar} sdv_144: int;
  var {:pointer} sdv_146: int;
  var {:pointer} irp_2: int;
  var {:pointer} Tmp_325: int;
  var {:scalar} status_31: int;
  var {:pointer} FdoData_35: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 511} vslice_dummy_var_80 := __HAVOC_malloc(4);
    FdoData_35 := actual_FdoData_35;
    call {:si_unique_call 512} Tmp_322 := __HAVOC_malloc(120);
    call {:si_unique_call 513} Tmp_325 := __HAVOC_malloc(120);
    call {:si_unique_call 514} status_31 := MP_GET_STATUS_FROM_FLAGS(FdoData_35);
    Tmp_322 := strConst__li2bpl95;
    call {:si_unique_call 515} DebugPrint(5, 64, Tmp_322);
    goto L13;

  L13:
    call {:si_unique_call 516} pEntry, sdv_144, sdv_146, irp_2 := NICFreeQueuedSendPackets_loop_L13(pEntry, sdv_144, sdv_146, irp_2, status_31, FdoData_35);
    goto L13_last;

  L13_last:
    call {:si_unique_call 523} sdv_144 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_144 != 0;
    Tmp_325 := strConst__li2bpl96;
    call {:si_unique_call 517} DebugPrint(5, 64, Tmp_325);
    return;

  anon3_Then:
    assume {:partition} sdv_144 == 0;
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    call {:si_unique_call 518} pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(FdoData_35));
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    call {:si_unique_call 519} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 520} sdv_146 := sdv_containing_record(pEntry, 88);
    irp_2 := sdv_146;
    call {:si_unique_call 521} NICCompleteSendRequest(FdoData_35, irp_2, status_31, 0, 1);
    call {:si_unique_call 522} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    assume false;
    return;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_81: int;

  anon0:
    call {:si_unique_call 524} vslice_dummy_var_81 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_36: int, actual_Irp_6: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2) || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_36: int, actual_Irp_6: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int)
{
  var {:pointer} Tmp_328: int;
  var {:pointer} Tmp_329: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} sglBuffer: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} sgl: int;
  var {:pointer} Tmp_333: int;
  var {:pointer} Tmp_334: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} Tmp_335: int;
  var {:pointer} Tmp_336: int;
  var {:pointer} FdoData_36: int;
  var {:pointer} Irp_6: int;
  var {:scalar} Status: int;
  var {:scalar} Information: int;
  var {:scalar} AtDispatchLevel: int;
  var vslice_dummy_var_82: int;
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 525} vslice_dummy_var_82 := __HAVOC_malloc(4);
    FdoData_36 := actual_FdoData_36;
    Irp_6 := actual_Irp_6;
    Status := actual_Status;
    Information := actual_Information;
    AtDispatchLevel := actual_AtDispatchLevel;
    call {:si_unique_call 526} Tmp_328 := __HAVOC_malloc(16);
    call {:si_unique_call 527} Tmp_329 := __HAVOC_malloc(16);
    call {:si_unique_call 528} Tmp_332 := __HAVOC_malloc(16);
    call {:si_unique_call 529} Tmp_333 := __HAVOC_malloc(160);
    call {:si_unique_call 530} Tmp_334 := __HAVOC_malloc(16);
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_334;
    assume {:nonnull} Tmp_334 != 0;
    assume Tmp_334 > 0;
    havoc sgl;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_332;
    assume {:nonnull} Tmp_332 != 0;
    assume Tmp_332 > 0;
    havoc sglBuffer;
    oldIrql_2 := 0;
    Tmp_333 := strConst__li2bpl97;
    call {:si_unique_call 531} DebugPrint(5, 64, Tmp_333);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sgl != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} AtDispatchLevel != 0;
    goto L18;

  L18:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_331;
    assume {:nonnull} Tmp_331 != 0;
    assume Tmp_331 > 0;
    havoc Tmp_335;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 532} sdv_KeLowerIrql(oldIrql_2);
    goto L13;

  L13:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sglBuffer != 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    call {:si_unique_call 533} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_36), sglBuffer);
    goto L25;

  L25:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_329;
    assume {:nonnull} Tmp_329 != 0;
    assume Tmp_329 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    havoc Tmp_328;
    assume {:nonnull} Tmp_328 != 0;
    assume Tmp_328 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_6))] := Information;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 534} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 535} vslice_dummy_var_83 := PciDrvIoDecrement(FdoData_36);
    return;

  anon10_Then:
    assume {:partition} sglBuffer == 0;
    goto L25;

  anon12_Then:
    assume {:partition} AtDispatchLevel != 0;
    goto L13;

  anon11_Then:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 536} Tmp_336 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_336 != 0;
    assume Tmp_336 > 0;
    Mem_T.INT4[Tmp_336] := oldIrql_2;
    call {:si_unique_call 537} sdv_KeRaiseIrql(2, Tmp_336);
    assume {:nonnull} Tmp_336 != 0;
    assume Tmp_336 > 0;
    oldIrql_2 := Mem_T.INT4[Tmp_336];
    goto L18;

  anon9_Then:
    assume {:partition} sgl == 0;
    goto L13;
}



procedure {:origName "NICWrite"} NICWrite(actual_FdoData_37: int, actual_Irp_7: int) returns (Tmp_337: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} Tmp_337 == -1073741661 || Tmp_337 == -1073741808 || Tmp_337 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICWrite"} NICWrite(actual_FdoData_37: int, actual_Irp_7: int) returns (Tmp_337: int)
{
  var {:pointer} Tmp_338: int;
  var {:pointer} Tmp_339: int;
  var {:pointer} sgListBuffer: int;
  var {:scalar} length_1: int;
  var {:scalar} sdv_148: int;
  var {:pointer} Tmp_340: int;
  var {:pointer} Tmp_341: int;
  var {:pointer} Tmp_342: int;
  var {:pointer} Tmp_343: int;
  var {:pointer} Tmp_344: int;
  var {:scalar} oldIrql_3: int;
  var {:scalar} sdv_151: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Tmp_347: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:scalar} returnStatus: int;
  var {:pointer} Tmp_350: int;
  var {:pointer} Tmp_351: int;
  var {:pointer} tempMdl: int;
  var {:scalar} pageCount: int;
  var {:scalar} status_32: int;
  var {:pointer} virtualAddress: int;
  var {:pointer} Tmp_352: int;
  var {:pointer} mdl: int;
  var {:pointer} FdoData_37: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_84: int;

  anon0:
    FdoData_37 := actual_FdoData_37;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 538} Tmp_338 := __HAVOC_malloc(80);
    call {:si_unique_call 539} Tmp_339 := __HAVOC_malloc(16);
    call {:si_unique_call 540} Tmp_342 := __HAVOC_malloc(80);
    call {:si_unique_call 541} Tmp_343 := __HAVOC_malloc(108);
    call {:si_unique_call 542} Tmp_344 := __HAVOC_malloc(84);
    call {:si_unique_call 543} Tmp_346 := __HAVOC_malloc(16);
    call {:si_unique_call 544} Tmp_347 := __HAVOC_malloc(92);
    call {:si_unique_call 545} Tmp_348 := __HAVOC_malloc(16);
    call {:si_unique_call 546} Tmp_349 := __HAVOC_malloc(120);
    call {:si_unique_call 547} Tmp_350 := __HAVOC_malloc(116);
    call {:si_unique_call 548} Tmp_352 := __HAVOC_malloc(16);
    pageCount := 0;
    length_1 := 0;
    Tmp_338 := strConst__li2bpl104;
    call {:si_unique_call 549} DebugPrint(5, 64, Tmp_338);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc Tmp_352;
    assume {:nonnull} Tmp_352 != 0;
    assume Tmp_352 > 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc Tmp_348;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    status_32 := 0;
    returnStatus := status_32;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    Tmp_344 := strConst__li2bpl98;
    call {:si_unique_call 550} DebugPrint(2, 64, Tmp_344);
    status_32 := -1073741661;
    returnStatus := status_32;
    goto L29;

  L29:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_32 >= 0;
    goto L33;

  L33:
    Tmp_342 := strConst__li2bpl99;
    call {:si_unique_call 551} DebugPrint(6, 64, Tmp_342);
    Tmp_337 := returnStatus;
    return;

  anon21_Then:
    assume {:partition} 0 > status_32;
    call {:si_unique_call 552} NICCompleteSendRequest(FdoData_37, Irp_7, status_32, 0, 0);
    goto L33;

  anon29_Then:
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc mdl;
    tempMdl := mdl;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} mdl != 0;
    call {:si_unique_call 553} sdv_148 := sdv_MmGetMdlByteCount(0);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_148 != 0;
    goto L46;

  L46:
    call {:si_unique_call 554} length_1, sdv_151, tempMdl, pageCount, virtualAddress := NICWrite_loop_L46(length_1, sdv_151, tempMdl, pageCount, virtualAddress);
    goto L46_last;

  L46_last:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} tempMdl != 0;
    call {:si_unique_call 555} virtualAddress := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 556} sdv_151 := sdv_MmGetMdlByteCount(0);
    length_1 := length_1 + sdv_151;
    call {:si_unique_call 557} pageCount := corral_nondet();
    assume {:nonnull} tempMdl != 0;
    assume tempMdl > 0;
    havoc tempMdl;
    goto anon23_Else_dummy;

  anon23_Else_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} tempMdl == 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} 60 > length_1;
    Tmp_350 := strConst__li2bpl101;
    call {:si_unique_call 558} DebugPrint(2, 64, Tmp_350);
    returnStatus := -1073741808;
    status_32 := returnStatus;
    goto L29;

  anon24_Then:
    assume {:partition} length_1 >= 60;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} pageCount > 8;
    goto L67;

  L67:
    Tmp_349 := strConst__li2bpl102;
    call {:si_unique_call 559} DebugPrint(2, 64, Tmp_349);
    returnStatus := -1073741808;
    status_32 := returnStatus;
    goto L29;

  anon25_Then:
    assume {:partition} 8 >= pageCount;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 560} Tmp_341 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    Mem_T.INT4[Tmp_341] := oldIrql_3;
    call {:si_unique_call 561} sdv_KeRaiseIrql(2, Tmp_341);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    oldIrql_3 := Mem_T.INT4[Tmp_341];
    call {:si_unique_call 562} sdv_IoMarkIrpPending(0);
    returnStatus := 259;
    call {:si_unique_call 563} sgListBuffer := sdv_ExAllocateFromNPagedLookasideList(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sgListBuffer != 0;
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc Tmp_339;
    assume {:nonnull} Tmp_339 != 0;
    assume Tmp_339 > 0;
    call {:si_unique_call 564} vslice_dummy_var_84 := sdv_MmGetMdlVirtualAddress(0);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc Tmp_351;
    assume {:nonnull} Tmp_351 != 0;
    assume Tmp_351 > 0;
    havoc Tmp_340;
    assume {:nonnull} Tmp_340 != 0;
    assume Tmp_340 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_32 < 0;
    Tmp_343 := strConst__li2bpl103;
    call {:si_unique_call 565} DebugPrint(2, 64, Tmp_343);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 566} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_37), sgListBuffer);
    assume {:nonnull} Irp_7 != 0;
    assume Irp_7 > 0;
    havoc Tmp_346;
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    goto L85;

  L85:
    call {:si_unique_call 567} sdv_KeLowerIrql(oldIrql_3);
    goto L29;

  anon28_Then:
    assume {:partition} 0 <= status_32;
    goto L85;

  anon27_Then:
    assume {:partition} sgListBuffer == 0;
    goto L85;

  anon26_Then:
    goto L67;

  anon22_Then:
    assume {:partition} sdv_148 == 0;
    goto L39;

  L39:
    Tmp_347 := strConst__li2bpl100;
    call {:si_unique_call 568} DebugPrint(2, 64, Tmp_347);
    returnStatus := -1073741808;
    status_32 := returnStatus;
    goto L29;

  anon30_Then:
    assume {:partition} mdl == 0;
    goto L39;
}



procedure {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_38: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_38: int)
{
  var {:pointer} Tmp_355: int;
  var {:pointer} pMpTcb: int;
  var {:pointer} Tmp_356: int;
  var {:scalar} status_33: int;
  var {:scalar} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:pointer} FdoData_38: int;
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 569} vslice_dummy_var_85 := __HAVOC_malloc(4);
    FdoData_38 := actual_FdoData_38;
    call {:si_unique_call 570} Tmp_356 := __HAVOC_malloc(112);
    call {:si_unique_call 571} Tmp_358 := __HAVOC_malloc(112);
    call {:si_unique_call 572} status_33 := MP_GET_STATUS_FROM_FLAGS(FdoData_38);
    Tmp_358 := strConst__li2bpl105;
    call {:si_unique_call 573} DebugPrint(5, 64, Tmp_358);
    goto L12;

  L12:
    call {:si_unique_call 574} Tmp_355, pMpTcb, Tmp_357 := NICFreeBusySendPackets_loop_L12(Tmp_355, pMpTcb, status_33, Tmp_357, FdoData_38);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_38 != 0;
    assume FdoData_38 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} FdoData_38 != 0;
    assume FdoData_38 > 0;
    havoc pMpTcb;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    havoc Tmp_355;
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    havoc Tmp_357;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_357 != 3;
    call {:si_unique_call 575} MP_FREE_SEND_PACKET(FdoData_38, pMpTcb, status_33);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_357 == 3;
    goto L13;

  L13:
    Tmp_356 := strConst__li2bpl106;
    call {:si_unique_call 576} DebugPrint(5, 64, Tmp_356);
    return;

  anon5_Then:
    goto L13;
}



procedure {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_39: int, actual_pMpTcb_1: int, actual_Status_1: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_39: int, actual_pMpTcb_1: int, actual_Status_1: int)
{
  var {:pointer} Irp_8: int;
  var {:pointer} Tmp_360: int;
  var {:pointer} FdoData_39: int;
  var {:pointer} pMpTcb_1: int;
  var {:scalar} Status_1: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 577} vslice_dummy_var_86 := __HAVOC_malloc(4);
    FdoData_39 := actual_FdoData_39;
    pMpTcb_1 := actual_pMpTcb_1;
    Status_1 := actual_Status_1;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    havoc Irp_8;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    havoc Tmp_360;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    assume {:nonnull} Tmp_360 != 0;
    assume Tmp_360 > 0;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Irp_8 != 0;
    call {:si_unique_call 578} sdv_KeReleaseSpinLockFromDpcLevel(0);
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    havoc vslice_dummy_var_29;
    call {:si_unique_call 579} NICCompleteSendRequest(FdoData_39, Irp_8, Status_1, vslice_dummy_var_29, 1);
    call {:si_unique_call 580} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Irp_8 == 0;
    goto L1;
}



procedure {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_40: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_40: int)
{
  var {:scalar} sdv_155: int;
  var {:pointer} listEntry_1: int;
  var {:scalar} oldIrql_4: int;
  var {:pointer} sdv_157: int;
  var {:scalar} sdv_159: int;
  var {:pointer} irp_3: int;
  var {:pointer} Tmp_363: int;
  var {:pointer} FdoData_40: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 581} vslice_dummy_var_87 := __HAVOC_malloc(4);
    FdoData_40 := actual_FdoData_40;
    call {:si_unique_call 582} Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    Mem_T.INT4[Tmp_363] := oldIrql_4;
    call {:si_unique_call 583} sdv_KeAcquireSpinLock(0, Tmp_363);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_363];
    goto L10;

  L10:
    call {:si_unique_call 584} sdv_155, listEntry_1, oldIrql_4, sdv_157, sdv_159, irp_3, Tmp_363, vslice_dummy_var_88 := PciDrvCancelQueuedReadIrps_loop_L10(sdv_155, listEntry_1, oldIrql_4, sdv_157, sdv_159, irp_3, Tmp_363, FdoData_40, vslice_dummy_var_88);
    goto L10_last;

  L10_last:
    call {:si_unique_call 594} sdv_155 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_155 != 0;
    call {:si_unique_call 585} sdv_KeReleaseSpinLock(0, oldIrql_4);
    return;

  anon5_Then:
    assume {:partition} sdv_155 == 0;
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 586} listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_40));
    call {:si_unique_call 587} sdv_157 := sdv_containing_record(listEntry_1, 88);
    irp_3 := sdv_157;
    call {:si_unique_call 588} sdv_159 := sdv_IoSetCancelRoutine(irp_3, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_159 != 0;
    call {:si_unique_call 589} sdv_KeReleaseSpinLock(0, oldIrql_4);
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    assume {:nonnull} irp_3 != 0;
    assume irp_3 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp_3))] := 0;
    call {:si_unique_call 590} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 591} vslice_dummy_var_88 := PciDrvIoDecrement(FdoData_40);
    call {:si_unique_call 592} Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    Mem_T.INT4[Tmp_363] := oldIrql_4;
    call {:si_unique_call 593} sdv_KeAcquireSpinLock(0, Tmp_363);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    oldIrql_4 := Mem_T.INT4[Tmp_363];
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} sdv_159 == 0;
    irp_3 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_11: int, actual_Irp_9: int) returns (Tmp_364: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_11: int, actual_Irp_9: int) returns (Tmp_364: int)
{
  var {:pointer} sdv_171: int;
  var {:pointer} fdoData_10: int;
  var {:pointer} deviceState_1: int;
  var {:scalar} status_34: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} Tmp_368: int;
  var {:pointer} stack_4: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_9 := actual_Irp_9;
    call {:si_unique_call 595} Tmp_366 := __HAVOC_malloc(36);
    call {:si_unique_call 596} Tmp_367 := __HAVOC_malloc(160);
    call {:si_unique_call 597} Tmp_368 := __HAVOC_malloc(160);
    status_34 := 0;
    call {:si_unique_call 598} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc fdoData_10;
    call {:si_unique_call 599} stack_4 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    havoc vslice_dummy_var_30;
    call {:si_unique_call 600} sdv_171 := PnPMinorFunctionString(vslice_dummy_var_30);
    Tmp_366 := strConst__li2bpl107;
    call {:si_unique_call 601} DebugPrint(5, 2, Tmp_366);
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    call {:si_unique_call 602} vslice_dummy_var_90 := PciDrvPowerUpDevice(fdoData_10, 1);
    goto L23;

  L23:
    call {:si_unique_call 603} vslice_dummy_var_89 := PciDrvIoIncrement(fdoData_10);
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 604} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 605} vslice_dummy_var_91 := PciDrvIoDecrement(fdoData_10);
    Tmp_364 := -1073741810;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon76_Then:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 606} PciDrvProcessQueuedRequests#1(fdoData_10);
    call {:si_unique_call 607} PciDrvCancelQueuedReadIrps(fdoData_10);
    call {:si_unique_call 608} PciDrvCancelQueuedIoctlIrps(fdoData_10);
    call {:si_unique_call 609} status_34 := IoSetDeviceInterfaceState(0, 0);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} status_34 >= 0;
    goto L78;

  L78:
    call {:si_unique_call 610} vslice_dummy_var_93 := PciDrvReturnResources(DeviceObject_11);
    call {:si_unique_call 611} PciDrvDisarmWake(fdoData_10, 1);
    call {:si_unique_call 612} PciDrvDeregisterIdleDetection(fdoData_10, 1);
    call {:si_unique_call 613} vslice_dummy_var_94 := PciDrvWmiDeRegistration(fdoData_10);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 614} Tmp_364 := PciDrvForwardAndForget(fdoData_10, Irp_9);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon110_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon79_Then:
    assume {:partition} 0 > status_34;
    Tmp_367 := strConst__li2bpl108;
    call {:si_unique_call 615} DebugPrint(2, 2, Tmp_367);
    goto L78;

  anon89_Then:
    call {:si_unique_call 616} Tmp_364 := PciDrvForwardAndForget(fdoData_10, Irp_9);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon111_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon90_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc vslice_dummy_var_31;
    call {:si_unique_call 617} vslice_dummy_var_92 := PciDrvSendIrpSynchronously(vslice_dummy_var_31, Irp_9);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    goto L101;

  L101:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 618} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 619} vslice_dummy_var_95 := PciDrvIoDecrement(fdoData_10);
    Tmp_364 := status_34;
    goto L1;

  anon80_Then:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    deviceState_1 := Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_9));
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} deviceState_1 != 0;
    assume {:nonnull} deviceState_1 != 0;
    assume deviceState_1 > 0;
    Mem_T.INT4[deviceState_1] := BOR(Mem_T.INT4[deviceState_1], 4);
    goto L99;

  L99:
    status_34 := 0;
    goto L101;

  anon109_Then:
    assume {:partition} deviceState_1 == 0;
    goto L99;

  anon108_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon91_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc vslice_dummy_var_32;
    call {:si_unique_call 620} status_34 := PciDrvSendIrpSynchronously(vslice_dummy_var_32, Irp_9);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} status_34 >= 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 621} PciDrvProcessQueuedRequests#1(fdoData_10);
    goto L101;

  anon82_Then:
    goto L101;

  anon81_Then:
    assume {:partition} 0 > status_34;
    goto L101;

  anon107_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon92_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_10)] != 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto L122;

  L122:
    call {:si_unique_call 622} PciDrvWithdrawIrps(fdoData_10);
    call {:si_unique_call 623} PciDrvReleaseAndWait(fdoData_10, 1, 1);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 624} Tmp_364 := PciDrvForwardAndForget(fdoData_10, Irp_9);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon106_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon105_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_10)] == 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto L122;

  anon93_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 625} status_34 := PciDrvReturnResources(DeviceObject_11);
    call {:si_unique_call 626} PciDrvDisarmWake(fdoData_10, 1);
    call {:si_unique_call 627} PciDrvDeregisterIdleDetection(fdoData_10, 1);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 628} Tmp_364 := PciDrvForwardAndForget(fdoData_10, Irp_9);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon104_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon94_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc vslice_dummy_var_33;
    call {:si_unique_call 629} status_34 := PciDrvSendIrpSynchronously(vslice_dummy_var_33, Irp_9);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} yogi_error != 1;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} status_34 >= 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 630} PciDrvProcessQueuedRequests#1(fdoData_10);
    call {:si_unique_call 631} vslice_dummy_var_96 := PciDrvArmForWake(fdoData_10, 1);
    call {:si_unique_call 632} PciDrvRegisterForIdleDetection(fdoData_10, 1);
    goto L101;

  anon84_Then:
    goto L101;

  anon83_Then:
    assume {:partition} 0 > status_34;
    goto L101;

  anon103_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon95_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 633} PciDrvProcessQueuedRequests#1(fdoData_10);
    call {:si_unique_call 634} PciDrvCancelQueuedReadIrps(fdoData_10);
    call {:si_unique_call 635} PciDrvCancelQueuedIoctlIrps(fdoData_10);
    call {:si_unique_call 636} status_34 := IoSetDeviceInterfaceState(0, 0);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} status_34 >= 0;
    goto L185;

  L185:
    call {:si_unique_call 637} vslice_dummy_var_97 := PciDrvReturnResources(DeviceObject_11);
    call {:si_unique_call 638} vslice_dummy_var_98 := PciDrvWmiDeRegistration(fdoData_10);
    goto L166;

  L166:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 639} MmUnlockPagableImageSection(0);
    goto L191;

  L191:
    call {:si_unique_call 640} PciDrvReleaseAndWait(fdoData_10, 1, 0);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 641} sdv_IoSkipCurrentIrpStackLocation(Irp_9);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume Irp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 642} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_9);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    goto L271;

  L271:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc vslice_dummy_var_34;
    call {:si_unique_call 643} status_34 := sdv_IoCallDriver(vslice_dummy_var_34, Irp_9);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 644} IoDetachDevice(0);
    call {:si_unique_call 645} RtlFreeUnicodeString(0);
    call {:si_unique_call 646} IoDeleteDevice(0);
    Tmp_364 := status_34;
    goto L1;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon101_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon87_Then:
    assume !(Irp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L271;

  anon85_Then:
    goto L191;

  anon86_Then:
    assume {:partition} 0 > status_34;
    Tmp_368 := strConst__li2bpl108;
    call {:si_unique_call 647} DebugPrint(2, 2, Tmp_368);
    goto L185;

  anon100_Then:
    goto L166;

  anon96_Then:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_10)] != 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto L217;

  L217:
    call {:si_unique_call 648} PciDrvWithdrawIrps(fdoData_10);
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    call {:si_unique_call 649} PciDrvDisarmWake(fdoData_10, 1);
    call {:si_unique_call 650} PciDrvDeregisterIdleDetection(fdoData_10, 1);
    call {:si_unique_call 651} PciDrvReleaseAndWait(fdoData_10, 1, 1);
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 652} Tmp_364 := PciDrvForwardAndForget(fdoData_10, Irp_9);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon99_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_10)] == 0;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    goto L217;

  anon77_Then:
    call {:si_unique_call 653} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 654} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_9);
    call {:si_unique_call 655} sdv_IoSetCompletionRoutine(Irp_9, li2bplFunctionConstant7189, fdoData_10, 1, 1, 1);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume Irp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 656} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_9);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} yogi_error != 1;
    goto L268;

  L268:
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    havoc vslice_dummy_var_35;
    call {:si_unique_call 657} vslice_dummy_var_99 := sdv_IoCallDriver(vslice_dummy_var_35, Irp_9);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} yogi_error != 1;
    Tmp_364 := 259;
    goto L1;

  anon98_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon97_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume !(Irp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L268;

  anon75_Then:
    goto L23;
}



procedure {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete(actual_DeviceObject_12: int, actual_Irp_10: int, actual_Context_2: int) returns (Tmp_369: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_369 == -1073741802 || Tmp_369 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnpStartComplete"} PciDrvDispatchPnpStartComplete(actual_DeviceObject_12: int, actual_Irp_10: int, actual_Context_2: int) returns (Tmp_369: int)
{
  var {:pointer} fdoData_11: int;
  var {:scalar} status_35: int;
  var {:pointer} Irp_10: int;
  var {:pointer} Context_2: int;
  var vslice_dummy_var_100: int;

  anon0:
    Irp_10 := actual_Irp_10;
    Context_2 := actual_Context_2;
    fdoData_11 := Context_2;
    call {:si_unique_call 658} status_35 := PciDrvQueuePassiveLevelCallback(fdoData_11, li2bplFunctionConstant7190, Irp_10, 0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_35 >= 0;
    Tmp_369 := -1073741802;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 > status_35;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 659} vslice_dummy_var_100 := PciDrvIoDecrement(fdoData_11);
    Tmp_369 := 0;
    goto L1;
}



procedure {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_41: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_41: int)
{
  var {:pointer} Tmp_371: int;
  var {:scalar} sdv_186: int;
  var {:pointer} listEntry_2: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} sdv_188: int;
  var {:scalar} sdv_190: int;
  var {:pointer} irp_4: int;
  var {:pointer} FdoData_41: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;

  anon0:
    call {:si_unique_call 660} vslice_dummy_var_101 := __HAVOC_malloc(4);
    FdoData_41 := actual_FdoData_41;
    call {:si_unique_call 661} Tmp_371 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    Mem_T.INT4[Tmp_371] := oldIrql_5;
    call {:si_unique_call 662} sdv_KeAcquireSpinLock(0, Tmp_371);
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_371];
    goto L10;

  L10:
    call {:si_unique_call 663} Tmp_371, sdv_186, listEntry_2, oldIrql_5, sdv_188, sdv_190, irp_4, vslice_dummy_var_102 := PciDrvWithdrawReadIrps_loop_L10(Tmp_371, sdv_186, listEntry_2, oldIrql_5, sdv_188, sdv_190, irp_4, FdoData_41, vslice_dummy_var_102);
    goto L10_last;

  L10_last:
    call {:si_unique_call 673} sdv_186 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_186 != 0;
    call {:si_unique_call 664} sdv_KeReleaseSpinLock(0, oldIrql_5);
    return;

  anon5_Then:
    assume {:partition} sdv_186 == 0;
    assume {:nonnull} FdoData_41 != 0;
    assume FdoData_41 > 0;
    call {:si_unique_call 665} listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_41));
    call {:si_unique_call 666} sdv_188 := sdv_containing_record(listEntry_2, 88);
    irp_4 := sdv_188;
    call {:si_unique_call 667} sdv_190 := sdv_IoSetCancelRoutine(irp_4, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_190 != 0;
    call {:si_unique_call 668} sdv_KeReleaseSpinLock(0, oldIrql_5);
    call {:si_unique_call 669} vslice_dummy_var_102 := PciDrvQueueRequest(FdoData_41, irp_4);
    call {:si_unique_call 670} Tmp_371 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    Mem_T.INT4[Tmp_371] := oldIrql_5;
    call {:si_unique_call 671} sdv_KeAcquireSpinLock(0, Tmp_371);
    assume {:nonnull} Tmp_371 != 0;
    assume Tmp_371 > 0;
    oldIrql_5 := Mem_T.INT4[Tmp_371];
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} sdv_190 == 0;
    call {:si_unique_call 672} InitializeListHead(listEntry_2);
    irp_4 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_13: int, actual_Irp_11: int) returns (Tmp_373: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_373 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_13: int, actual_Irp_11: int) returns (Tmp_373: int)
{
  var {:scalar} cleanupList: int;
  var {:pointer} thisEntry: int;
  var {:pointer} irpStack_1: int;
  var {:pointer} listHead: int;
  var {:pointer} nextEntry: int;
  var {:pointer} Tmp_374: int;
  var {:scalar} sdv_192: int;
  var {:pointer} fdoData_12: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_196: int;
  var {:scalar} sdv_199: int;
  var {:pointer} pendingIrp: int;
  var {:pointer} sdv_200: int;
  var {:pointer} Tmp_375: int;
  var {:pointer} pendingIrpStack: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;

  anon0:
    call {:si_unique_call 674} cleanupList := __HAVOC_malloc(8);
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 675} Tmp_375 := __HAVOC_malloc(64);
    Tmp_375 := strConst__li2bpl109;
    call {:si_unique_call 676} DebugPrint(5, 16, Tmp_375);
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc fdoData_12;
    call {:si_unique_call 677} vslice_dummy_var_106 := PciDrvIoIncrement(fdoData_12);
    call {:si_unique_call 678} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_11);
    call {:si_unique_call 679} InitializeListHead(cleanupList);
    call {:si_unique_call 680} Tmp_374 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    Mem_T.INT4[Tmp_374] := oldIrql_6;
    call {:si_unique_call 681} sdv_KeAcquireSpinLock(0, Tmp_374);
    assume {:nonnull} Tmp_374 != 0;
    assume Tmp_374 > 0;
    oldIrql_6 := Mem_T.INT4[Tmp_374];
    assume {:nonnull} fdoData_12 != 0;
    assume fdoData_12 > 0;
    listHead := NewRequestsQueue__FDO_DATA(fdoData_12);
    assume {:nonnull} listHead != 0;
    assume listHead > 0;
    havoc thisEntry;
    goto L31;

  L31:
    call {:si_unique_call 682} thisEntry, nextEntry, sdv_192, sdv_196, pendingIrp, pendingIrpStack, vslice_dummy_var_103, vslice_dummy_var_104 := PciDrvCleanup_loop_L31(cleanupList, thisEntry, irpStack_1, nextEntry, sdv_192, sdv_196, pendingIrp, pendingIrpStack, vslice_dummy_var_103, vslice_dummy_var_104);
    goto L31_last;

  L31_last:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} thisEntry != 0;
    assume thisEntry > 0;
    havoc nextEntry;
    call {:si_unique_call 683} sdv_196 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_196;
    call {:si_unique_call 684} pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(pendingIrp);
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    assume {:nonnull} pendingIrpStack != 0;
    assume pendingIrpStack > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 685} vslice_dummy_var_103 := sdv_RemoveEntryList(0);
    call {:si_unique_call 686} sdv_192 := sdv_IoSetCancelRoutine(pendingIrp, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_192 != 0;
    call {:si_unique_call 687} vslice_dummy_var_104 := sdv_InsertTailList(cleanupList, thisEntry);
    goto L45;

  L45:
    thisEntry := nextEntry;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} sdv_192 == 0;
    call {:si_unique_call 688} InitializeListHead(thisEntry);
    goto L45;

  anon10_Then:
    goto L45;

  anon9_Then:
    call {:si_unique_call 689} sdv_KeReleaseSpinLock(0, oldIrql_6);
    goto L59;

  L59:
    call {:si_unique_call 690} thisEntry, sdv_199, pendingIrp, sdv_200 := PciDrvCleanup_loop_L59(cleanupList, thisEntry, sdv_199, pendingIrp, sdv_200);
    goto L59_last;

  L59_last:
    call {:si_unique_call 696} sdv_199 := sdv_IsListEmpty(0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_199 != 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_11))] := 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    call {:si_unique_call 691} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 692} vslice_dummy_var_105 := PciDrvIoDecrement(fdoData_12);
    Tmp_373 := 0;
    return;

  anon12_Then:
    assume {:partition} sdv_199 == 0;
    call {:si_unique_call 693} thisEntry := RemoveHeadList(cleanupList);
    call {:si_unique_call 694} sdv_200 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_200;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(pendingIrp))] := 0;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    call {:si_unique_call 695} sdv_IoCompleteRequest(0, 0);
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvUnload"} PciDrvUnload(actual_DriverObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvUnload"} PciDrvUnload(actual_DriverObject: int)
{
  var {:pointer} Tmp_378: int;
  var vslice_dummy_var_107: int;

  anon0:
    call {:si_unique_call 697} vslice_dummy_var_107 := __HAVOC_malloc(4);
    call {:si_unique_call 698} Tmp_378 := __HAVOC_malloc(32);
    call {:si_unique_call 699} sdv_do_paged_code_check();
    Tmp_378 := strConst__li2bpl110;
    call {:si_unique_call 700} DebugPrint(4, 1, Tmp_378);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 701} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon3_Then:
    goto L1;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_108: int;

  anon0:
    call {:si_unique_call 702} vslice_dummy_var_108 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    assume DebugLevel == 6;
    assume DebugFlag == 15;
    return;
}



procedure {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_14: int, actual_Irp_12: int) returns (Tmp_381: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_14: int, actual_Irp_12: int) returns (Tmp_381: int)
{
  var {:scalar} status_36: int;
  var {:scalar} event_1: int;
  var {:pointer} DeviceObject_14: int;
  var {:pointer} Irp_12: int;

  anon0:
    call {:si_unique_call 703} event_1 := __HAVOC_malloc(156);
    DeviceObject_14 := actual_DeviceObject_14;
    Irp_12 := actual_Irp_12;
    call {:si_unique_call 704} sdv_do_paged_code_check();
    call {:si_unique_call 705} KeInitializeEvent(event_1, 0, 0);
    call {:si_unique_call 706} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_12);
    call {:si_unique_call 707} sdv_IoSetCompletionRoutine(Irp_12, li2bplFunctionConstant7191, event_1, 1, 1, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume Irp_12 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 708} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_12);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  L30:
    call {:si_unique_call 709} status_36 := sdv_IoCallDriver(DeviceObject_14, Irp_12);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} status_36 == 259;
    call {:si_unique_call 710} status_36 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_12 != 0;
    assume Irp_12 > 0;
    havoc status_36;
    goto L22;

  L22:
    Tmp_381 := status_36;
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} status_36 != 259;
    goto L22;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume !(Irp_12 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L30;
}



procedure {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_42: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_42: int)
{
  var {:scalar} i_3: int;
  var {:scalar} sdv_203: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} irp_5: int;
  var {:pointer} Tmp_384: int;
  var {:pointer} FdoData_42: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;

  anon0:
    call {:si_unique_call 711} vslice_dummy_var_109 := __HAVOC_malloc(4);
    FdoData_42 := actual_FdoData_42;
    irp_5 := 0;
    call {:si_unique_call 712} Tmp_384 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    Mem_T.INT4[Tmp_384] := oldIrql_7;
    call {:si_unique_call 713} sdv_KeAcquireSpinLock(0, Tmp_384);
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_384];
    i_3 := 0;
    goto L11;

  L11:
    call {:si_unique_call 714} i_3, sdv_203, oldIrql_7, irp_5, Tmp_384, vslice_dummy_var_110 := PciDrvCancelQueuedIoctlIrps_loop_L11(i_3, sdv_203, oldIrql_7, irp_5, Tmp_384, FdoData_42, vslice_dummy_var_110);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_3"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} 3 > i_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} i_3 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} i_3 != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} i_3 != 2;
    goto L22;

  L22:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} irp_5 != 0;
    call {:si_unique_call 715} sdv_203 := sdv_IoSetCancelRoutine(irp_5, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_203 != 0;
    call {:si_unique_call 716} sdv_KeReleaseSpinLock(0, oldIrql_7);
    assume {:nonnull} irp_5 != 0;
    assume irp_5 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(irp_5))] := 0;
    assume {:nonnull} irp_5 != 0;
    assume irp_5 > 0;
    call {:si_unique_call 717} sdv_IoCompleteRequest(0, 0);
    irp_5 := 0;
    call {:si_unique_call 718} Tmp_384 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    Mem_T.INT4[Tmp_384] := oldIrql_7;
    call {:si_unique_call 719} sdv_KeAcquireSpinLock(0, Tmp_384);
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    oldIrql_7 := Mem_T.INT4[Tmp_384];
    call {:si_unique_call 720} vslice_dummy_var_110 := PciDrvIoDecrement(FdoData_42);
    goto L23;

  L23:
    i_3 := i_3 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} sdv_203 == 0;
    irp_5 := 0;
    goto L23;

  anon15_Then:
    assume {:partition} irp_5 == 0;
    goto L23;

  anon17_Then:
    assume {:partition} i_3 == 2;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon18_Then:
    assume {:partition} i_3 == 1;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} i_3 == 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon13_Then:
    assume {:partition} i_3 >= 3;
    call {:si_unique_call 721} sdv_KeReleaseSpinLock(0, oldIrql_7);
    return;
}



procedure {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_43: int) returns (Tmp_388: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_43: int) returns (Tmp_388: int)
{
  var {:pointer} Tmp_389: int;
  var {:pointer} Tmp_390: int;
  var {:scalar} result_1: int;
  var {:pointer} FdoData_43: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_36: int;

  anon0:
    FdoData_43 := actual_FdoData_43;
    call {:si_unique_call 722} Tmp_390 := __HAVOC_malloc(88);
    call {:si_unique_call 723} Tmp_389 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    assume {:nonnull} Tmp_389 != 0;
    assume Tmp_389 > 0;
    havoc vslice_dummy_var_36;
    Mem_T.INT4[Tmp_389] := vslice_dummy_var_36;
    call {:si_unique_call 724} result_1 := sdv_InterlockedDecrement(Tmp_389);
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    assume {:nonnull} Tmp_389 != 0;
    assume Tmp_389 > 0;
    Tmp_390 := strConst__li2bpl112;
    call {:si_unique_call 725} DebugPrint(6, 1024, Tmp_390);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} result_1 == 1;
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    call {:si_unique_call 726} vslice_dummy_var_111 := KeSetEvent(StopEvent__FDO_DATA(FdoData_43), 0, 0);
    goto L12;

  L12:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} result_1 != 0;
    goto L19;

  L19:
    Tmp_388 := result_1;
    return;

  anon6_Then:
    assume {:partition} result_1 == 0;
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    call {:si_unique_call 727} vslice_dummy_var_112 := KeSetEvent(RemoveEvent__FDO_DATA(FdoData_43), 0, 0);
    goto L19;

  anon5_Then:
    assume {:partition} result_1 != 1;
    goto L12;
}



procedure {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_16: int, actual_Irp_14: int) returns (Tmp_391: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_391 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_16: int, actual_Irp_14: int) returns (Tmp_391: int)
{
  var {:pointer} fdoData_14: int;
  var {:pointer} Tmp_392: int;
  var {:scalar} status_38: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_14: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;

  anon0:
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_14 := actual_Irp_14;
    call {:si_unique_call 728} Tmp_392 := __HAVOC_malloc(32);
    call {:si_unique_call 729} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc fdoData_14;
    Tmp_392 := strConst__li2bpl113;
    call {:si_unique_call 730} DebugPrint(5, 16, Tmp_392);
    call {:si_unique_call 731} vslice_dummy_var_113 := PciDrvIoIncrement(fdoData_14);
    status_38 := 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_14))] := 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    call {:si_unique_call 732} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 733} vslice_dummy_var_114 := PciDrvIoDecrement(fdoData_14);
    Tmp_391 := status_38;
    return;
}



procedure {:origName "PciDrvAddDevice"} PciDrvAddDevice(actual_DriverObject_1: int, actual_PhysicalDeviceObject: int) returns (Tmp_394: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvAddDevice"} PciDrvAddDevice(actual_DriverObject_1: int, actual_PhysicalDeviceObject: int) returns (Tmp_394: int)
{
  var {:pointer} SD1: int;
  var {:pointer} Tmp_395: int;
  var {:pointer} Tmp_396: int;
  var {:pointer} deviceObject: int;
  var {:pointer} Tmp_397: int;
  var {:pointer} Tmp_398: int;
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_399: int;
  var {:pointer} fdoData_15: int;
  var {:scalar} sdv_1: int;
  var {:pointer} Tmp_401: int;
  var {:scalar} status_39: int;
  var {:pointer} PhysicalDeviceObject: int;
  var boogieTmp: int;
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 734} deviceObject := __HAVOC_malloc(4);
    call {:si_unique_call 735} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 736} sdv_1 := __HAVOC_malloc(8);
    PhysicalDeviceObject := actual_PhysicalDeviceObject;
    call {:si_unique_call 737} Tmp_395 := __HAVOC_malloc(88);
    call {:si_unique_call 738} Tmp_396 := __HAVOC_malloc(200);
    call {:si_unique_call 739} Tmp_397 := __HAVOC_malloc(168);
    call {:si_unique_call 740} Tmp_399 := __HAVOC_malloc(148);
    status_39 := 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    call {:si_unique_call 741} sdv_do_paged_code_check();
    Tmp_395 := strConst__li2bpl114;
    call {:si_unique_call 742} DebugPrint(5, 2, Tmp_395);
    call {:si_unique_call 743} status_39 := IoCreateDevice(0, 1360, 0, 34, 256, 0, deviceObject);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_39 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    havoc fdoData_15;
    Tmp_399 := strConst__li2bpl117;
    call {:si_unique_call 744} DebugPrint(4, 2, Tmp_399);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 745} InitializeListHead(NewRequestsQueue__FDO_DATA(fdoData_15));
    call {:si_unique_call 746} Tmp_398 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    havoc vslice_dummy_var_37;
    Mem_T.INT4[Tmp_398] := vslice_dummy_var_37;
    call {:si_unique_call 747} sdv_KeInitializeSpinLock(Tmp_398);
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 748} KeInitializeEvent(RemoveEvent__FDO_DATA(fdoData_15), 1, 0);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 749} KeInitializeEvent(StopEvent__FDO_DATA(fdoData_15), 1, 0);
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_2)] := 4;
    call {:si_unique_call 750} SD1 := PoSetPowerState(0, 1, powerState_2);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} sdv_1 != 0;
    assume sdv_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv_1)] := Mem_T.INT4[DeviceState__POWER_STATE(SD1)];
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 751} KeInitializeEvent(WakeDisableEnableLock__FDO_DATA(fdoData_15), 1, 1);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 752} KeInitializeEvent(WakeCompletedEvent__FDO_DATA(fdoData_15), 0, 1);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 753} KeInitializeEvent(PowerSaveDisableEnableLock__FDO_DATA(fdoData_15), 1, 1);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 754} boogieTmp := IoAttachDeviceToDeviceStack(0, PhysicalDeviceObject);
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    havoc Tmp_401;
    assume {:nonnull} Tmp_401 != 0;
    assume Tmp_401 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto L75;

  L75:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L79;

  L79:
    call {:si_unique_call 755} status_39 := NICInitializeDeviceExtension(fdoData_15);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_39 >= 0;
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 756} status_39 := IoRegisterDeviceInterface(0, 0, 0, InterfaceName__FDO_DATA(fdoData_15));
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_39 >= 0;
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    Tmp_394 := status_39;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} 0 > status_39;
    Tmp_396 := strConst__li2bpl116;
    call {:si_unique_call 757} DebugPrint(2, 2, Tmp_396);
    call {:si_unique_call 758} IoDetachDevice(0);
    call {:si_unique_call 759} IoDeleteDevice(0);
    Tmp_394 := status_39;
    goto L1;

  anon18_Then:
    assume {:partition} 0 > status_39;
    Tmp_397 := strConst__li2bpl115;
    call {:si_unique_call 760} DebugPrint(2, 2, Tmp_397);
    call {:si_unique_call 761} IoDetachDevice(0);
    call {:si_unique_call 762} IoDeleteDevice(0);
    Tmp_394 := status_39;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} fdoData_15 != 0;
    assume fdoData_15 > 0;
    call {:si_unique_call 763} boogieTmp := sdv_MmLockPagableCodeSection(li2bplFunctionConstant6699);
    goto L79;

  anon20_Then:
    assume {:nonnull} deviceObject != 0;
    assume deviceObject > 0;
    goto L75;

  anon16_Then:
    call {:si_unique_call 764} IoDeleteDevice(0);
    Tmp_394 := -1073741810;
    goto L1;

  anon15_Then:
    assume {:partition} 0 > status_39;
    Tmp_394 := status_39;
    goto L1;
}



procedure {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_44: int, actual_Irp_15: int) returns (Tmp_402: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_5) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} Tmp_402 == -1073741661 || Tmp_402 == -1073741808 || Tmp_402 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_44: int, actual_Irp_15: int) returns (Tmp_402: int)
{
  var {:pointer} FdoData_44: int;
  var {:pointer} Irp_15: int;

  anon0:
    FdoData_44 := actual_FdoData_44;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 765} Tmp_402 := NICWrite(FdoData_44, Irp_15);
    return;
}



procedure {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_45: int, actual_Irp_16: int) returns (Tmp_404: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_404 == -1073741536 || Tmp_404 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_45: int, actual_Irp_16: int) returns (Tmp_404: int)
{
  var {:pointer} Tmp_405: int;
  var {:scalar} sdv_226: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} Tmp_406: int;
  var {:scalar} status_40: int;
  var {:pointer} Tmp_407: int;
  var {:pointer} FdoData_45: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;

  anon0:
    FdoData_45 := actual_FdoData_45;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 766} Tmp_405 := __HAVOC_malloc(76);
    call {:si_unique_call 767} Tmp_407 := __HAVOC_malloc(80);
    Tmp_405 := strConst__li2bpl118;
    call {:si_unique_call 768} DebugPrint(5, 128, Tmp_405);
    call {:si_unique_call 769} Tmp_406 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    Mem_T.INT4[Tmp_406] := oldIrql_8;
    call {:si_unique_call 770} sdv_KeAcquireSpinLock(0, Tmp_406);
    assume {:nonnull} Tmp_406 != 0;
    assume Tmp_406 > 0;
    oldIrql_8 := Mem_T.INT4[Tmp_406];
    call {:si_unique_call 771} vslice_dummy_var_115 := sdv_IoSetCancelRoutine(Irp_16, li2bplFunctionConstant7194);
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 772} sdv_226 := sdv_IoSetCancelRoutine(Irp_16, 0);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} sdv_226 != 0;
    status_40 := -1073741536;
    goto L23;

  L23:
    call {:si_unique_call 773} sdv_KeReleaseSpinLock(0, oldIrql_8);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_40 != 259;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_16))] := 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 774} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 775} vslice_dummy_var_116 := PciDrvIoDecrement(FdoData_45);
    goto L27;

  L27:
    Tmp_407 := strConst__li2bpl119;
    call {:si_unique_call 776} DebugPrint(5, 128, Tmp_407);
    Tmp_404 := status_40;
    return;

  anon9_Then:
    assume {:partition} status_40 == 259;
    goto L27;

  anon8_Then:
    assume {:partition} sdv_226 == 0;
    goto L15;

  L15:
    call {:si_unique_call 777} sdv_IoMarkIrpPending(0);
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 778} vslice_dummy_var_117 := sdv_InsertTailList(RecvQueueHead__FDO_DATA(FdoData_45), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_16))));
    status_40 := 259;
    goto L23;

  anon7_Then:
    goto L15;
}



procedure {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_46: int, actual_Irp_17: int) returns (Tmp_408: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_46: int, actual_Irp_17: int) returns (Tmp_408: int)
{
  var {:scalar} status_41: int;
  var {:pointer} FdoData_46: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_38: int;

  anon0:
    FdoData_46 := actual_FdoData_46;
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 779} sdv_IoSkipCurrentIrpStackLocation(Irp_17);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume Irp_17 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 780} SLIC_sdv_IoCallDriver_entry(strConst__li2bpl26, Irp_17);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    havoc vslice_dummy_var_38;
    call {:si_unique_call 781} status_41 := sdv_IoCallDriver(vslice_dummy_var_38, Irp_17);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 782} vslice_dummy_var_118 := PciDrvIoDecrement(FdoData_46);
    Tmp_408 := status_41;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume !(Irp_17 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L16;
}



procedure {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_47: int, actual_Irp_18: int) returns (Tmp_410: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_410 == -1073741536 || Tmp_410 == 259 || Tmp_410 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_47: int, actual_Irp_18: int) returns (Tmp_410: int)
{
  var {:pointer} Tmp_411: int;
  var {:pointer} Tmp_413: int;
  var {:scalar} status_42: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} FdoData_47: int;
  var {:pointer} Irp_18: int;
  var vslice_dummy_var_119: int;

  anon0:
    FdoData_47 := actual_FdoData_47;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 783} Tmp_411 := __HAVOC_malloc(84);
    call {:si_unique_call 784} Tmp_413 := __HAVOC_malloc(84);
    status_42 := 259;
    pIrpSp := 0;
    Tmp_411 := strConst__li2bpl121;
    call {:si_unique_call 785} DebugPrint(5, 32, Tmp_411);
    call {:si_unique_call 786} pIrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_410 := -1073741536;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L24;

  L24:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_42 == 259;
    call {:si_unique_call 787} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 788} vslice_dummy_var_119 := sdv_IoSetCancelRoutine(Irp_18, li2bplFunctionConstant7201);
    goto L25;

  L25:
    Tmp_413 := strConst__li2bpl120;
    call {:si_unique_call 789} DebugPrint(5, 32, Tmp_413);
    Tmp_410 := status_42;
    goto L1;

  anon22_Then:
    assume {:partition} status_42 != 259;
    goto L25;

  anon23_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    status_42 := -1073741808;
    goto L24;

  anon21_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;

  anon24_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    status_42 := -1073741808;
    goto L24;

  anon20_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;

  anon18_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    status_42 := -1073741808;
    goto L24;

  anon19_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;
}



procedure {:origName "DriverEntry"} DriverEntry(actual_DriverObject_2: int, actual_RegistryPath: int) returns (Tmp_418: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_418 == 0 || Tmp_418 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DriverEntry"} DriverEntry(actual_DriverObject_2: int, actual_RegistryPath: int) returns (Tmp_418: int)
{
  var {:pointer} Tmp_419: int;
  var {:pointer} Tmp_420: int;
  var {:pointer} Tmp_421: int;
  var {:pointer} Tmp_422: int;
  var {:pointer} Tmp_423: int;
  var {:pointer} Tmp_424: int;
  var {:pointer} sdv_239: int;
  var {:pointer} Tmp_426: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} Tmp_428: int;
  var {:scalar} Tmp_429: int;
  var {:pointer} Tmp_430: int;
  var {:pointer} Tmp_431: int;
  var {:scalar} status_43: int;
  var {:pointer} Tmp_432: int;
  var {:pointer} DriverObject_2: int;
  var {:pointer} RegistryPath: int;

  anon0:
    DriverObject_2 := actual_DriverObject_2;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 790} Tmp_419 := __HAVOC_malloc(112);
    call {:si_unique_call 791} Tmp_420 := __HAVOC_malloc(112);
    call {:si_unique_call 792} Tmp_422 := __HAVOC_malloc(112);
    call {:si_unique_call 793} Tmp_423 := __HAVOC_malloc(112);
    call {:si_unique_call 794} Tmp_424 := __HAVOC_malloc(112);
    call {:si_unique_call 795} Tmp_426 := __HAVOC_malloc(288);
    call {:si_unique_call 796} Tmp_427 := __HAVOC_malloc(168);
    call {:si_unique_call 797} Tmp_428 := __HAVOC_malloc(112);
    call {:si_unique_call 798} Tmp_430 := __HAVOC_malloc(112);
    call {:si_unique_call 799} Tmp_431 := __HAVOC_malloc(112);
    call {:si_unique_call 800} Tmp_432 := __HAVOC_malloc(112);
    status_43 := 0;
    Tmp_426 := strConst__li2bpl125;
    call {:si_unique_call 801} DebugPrint(4, 1, Tmp_426);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    havoc Tmp_429;
    call {:si_unique_call 802} sdv_239 := ExAllocatePoolWithTag(1, Tmp_429, -1001831600);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_428;
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    Mem_T.INT4[Tmp_428 + 27 * 4] := li2bplFunctionConstant7182;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_423;
    assume {:nonnull} Tmp_423 != 0;
    assume Tmp_423 > 0;
    Mem_T.INT4[Tmp_423 + 22 * 4] := li2bplFunctionConstant6699;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_420;
    assume {:nonnull} Tmp_420 != 0;
    assume Tmp_420 > 0;
    Mem_T.INT4[Tmp_420] := li2bplFunctionConstant7183;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_422;
    assume {:nonnull} Tmp_422 != 0;
    assume Tmp_422 > 0;
    Mem_T.INT4[Tmp_422 + 2 * 4] := li2bplFunctionConstant7184;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_431;
    assume {:nonnull} Tmp_431 != 0;
    assume Tmp_431 > 0;
    Mem_T.INT4[Tmp_431 + 18 * 4] := li2bplFunctionConstant7185;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_430;
    assume {:nonnull} Tmp_430 != 0;
    assume Tmp_430 > 0;
    Mem_T.INT4[Tmp_430 + 14 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_432;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    Mem_T.INT4[Tmp_432 + 3 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_419;
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    Mem_T.INT4[Tmp_419 + 4 * 4] := li2bplFunctionConstant7186;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_424;
    assume {:nonnull} Tmp_424 != 0;
    assume Tmp_424 > 0;
    Mem_T.INT4[Tmp_424 + 23 * 4] := li2bplFunctionConstant6237;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    havoc Tmp_421;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} DriverObject_2 != 0;
    assume DriverObject_2 > 0;
    Tmp_418 := status_43;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_427 := strConst__li2bpl124;
    call {:si_unique_call 803} DebugPrint(2, 1, Tmp_427);
    Tmp_418 := -1073741670;
    goto L1;
}



procedure {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback(actual_FdoData_49: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_433: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_433 == 0 || Tmp_433 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback(actual_FdoData_49: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_433: int)
{
  var {:pointer} item: int;
  var {:pointer} sdv_240: int;
  var {:pointer} context: int;
  var {:scalar} status_44: int;
  var {:scalar} CallbackFunction: int;
  var {:pointer} Context1: int;
  var {:pointer} Context2: int;

  anon0:
    CallbackFunction := actual_CallbackFunction;
    Context1 := actual_Context1;
    Context2 := actual_Context2;
    item := 0;
    status_44 := 0;
    call {:si_unique_call 804} sdv_240 := ExAllocatePoolWithTag(512, 16, -1001831600);
    context := sdv_240;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} context != 0;
    call {:si_unique_call 805} item := IoAllocateWorkItem(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} item != 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    call {:si_unique_call 806} IoQueueWorkItem(0, CallbackFunction, 1, 0);
    goto L26;

  L26:
    Tmp_433 := status_44;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} item == 0;
    status_44 := -1073741670;
    call {:si_unique_call 807} ExFreePoolWithTag(0, -1001831600);
    goto L26;

  anon6_Then:
    assume {:partition} context == 0;
    Tmp_433 := -1073741670;
    goto L1;
}



procedure {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int)
{
  var vslice_dummy_var_120: int;

  anon0:
    call {:si_unique_call 808} vslice_dummy_var_120 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_50: int, actual_OnHoldCount: int, actual_Reason: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_50: int, actual_OnHoldCount: int, actual_Reason: int)
{
  var {:scalar} chargeRemining: int;
  var {:pointer} Tmp_438: int;
  var {:scalar} Tmp_440: int;
  var {:scalar} Tmp_441: int;
  var {:pointer} Tmp_442: int;
  var {:scalar} Tmp_443: int;
  var {:pointer} FdoData_50: int;
  var {:scalar} OnHoldCount: int;
  var {:scalar} Reason: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;

  anon0:
    call {:si_unique_call 809} vslice_dummy_var_121 := __HAVOC_malloc(4);
    FdoData_50 := actual_FdoData_50;
    OnHoldCount := actual_OnHoldCount;
    Reason := actual_Reason;
    call {:si_unique_call 810} Tmp_438 := __HAVOC_malloc(208);
    call {:si_unique_call 811} Tmp_442 := __HAVOC_malloc(216);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Reason == 1;
    chargeRemining := OnHoldCount + 1;
    goto L8;

  L8:
    call {:si_unique_call 812} chargeRemining, Tmp_440, vslice_dummy_var_122 := PciDrvReleaseAndWait_loop_L8(chargeRemining, Tmp_440, FdoData_50, vslice_dummy_var_122);
    goto L8_last;

  L8_last:
    Tmp_440 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_440 != 0;
    call {:si_unique_call 813} vslice_dummy_var_122 := PciDrvIoDecrement(FdoData_50);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} Tmp_440 == 0;
    Tmp_438 := strConst__li2bpl126;
    call {:si_unique_call 814} DebugPrint(4, 2, Tmp_438);
    call {:si_unique_call 815} vslice_dummy_var_123 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    chargeRemining := OnHoldCount + 1;
    goto L20;

  L20:
    call {:si_unique_call 816} chargeRemining, Tmp_443, vslice_dummy_var_124 := PciDrvReleaseAndWait_loop_L20(chargeRemining, Tmp_443, FdoData_50, vslice_dummy_var_124);
    goto L20_last;

  L20_last:
    Tmp_443 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Tmp_443 != 0;
    call {:si_unique_call 817} vslice_dummy_var_124 := PciDrvIoIncrement(FdoData_50);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} Tmp_443 == 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} Reason != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Reason == 0;
    chargeRemining := OnHoldCount + 2;
    goto L26;

  L26:
    call {:si_unique_call 818} chargeRemining, Tmp_441, vslice_dummy_var_125 := PciDrvReleaseAndWait_loop_L26(chargeRemining, Tmp_441, FdoData_50, vslice_dummy_var_125);
    goto L26_last;

  L26_last:
    Tmp_441 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_441 != 0;
    call {:si_unique_call 819} vslice_dummy_var_125 := PciDrvIoDecrement(FdoData_50);
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} Tmp_441 == 0;
    Tmp_442 := strConst__li2bpl127;
    call {:si_unique_call 820} DebugPrint(4, 2, Tmp_442);
    call {:si_unique_call 821} vslice_dummy_var_126 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L1;

  anon12_Then:
    assume {:partition} Reason != 0;
    goto L1;
}



procedure {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_51: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_51: int)
{
  var {:scalar} i_4: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} irp_6: int;
  var {:pointer} Tmp_445: int;
  var {:pointer} FdoData_51: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;

  anon0:
    call {:si_unique_call 822} vslice_dummy_var_127 := __HAVOC_malloc(4);
    FdoData_51 := actual_FdoData_51;
    call {:si_unique_call 823} Tmp_445 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Mem_T.INT4[Tmp_445] := oldIrql_10;
    call {:si_unique_call 824} sdv_KeAcquireSpinLock(0, Tmp_445);
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_445];
    i_4 := 0;
    goto L10;

  L10:
    call {:si_unique_call 825} i_4, oldIrql_10, irp_6, Tmp_445, vslice_dummy_var_128 := PciDrvWithdrawIoctlIrps_loop_L10(i_4, oldIrql_10, irp_6, Tmp_445, FdoData_51, vslice_dummy_var_128);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 3} {:Counter "i_4"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 3 > i_4;
    irp_6 := 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} i_4 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} i_4 != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} i_4 != 2;
    goto L22;

  L22:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} irp_6 != 0;
    call {:si_unique_call 826} sdv_KeReleaseSpinLock(0, oldIrql_10);
    call {:si_unique_call 827} vslice_dummy_var_128 := PciDrvQueueRequest(FdoData_51, irp_6);
    call {:si_unique_call 828} Tmp_445 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    Mem_T.INT4[Tmp_445] := oldIrql_10;
    call {:si_unique_call 829} sdv_KeAcquireSpinLock(0, Tmp_445);
    assume {:nonnull} Tmp_445 != 0;
    assume Tmp_445 > 0;
    oldIrql_10 := Mem_T.INT4[Tmp_445];
    goto L23;

  L23:
    i_4 := i_4 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} irp_6 == 0;
    goto L23;

  anon13_Then:
    assume {:partition} i_4 == 2;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_6;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} i_4 == 1;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_6;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} i_4 == 0;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_6;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon11_Then:
    assume {:partition} i_4 >= 3;
    call {:si_unique_call 830} sdv_KeReleaseSpinLock(0, oldIrql_10);
    return;
}



procedure {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_52: int, actual_Irp_19: int) returns (Tmp_446: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_446 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_52: int, actual_Irp_19: int) returns (Tmp_446: int)
{
  var {:pointer} Tmp_447: int;
  var {:scalar} ret: int;
  var {:scalar} oldIrql_11: int;
  var {:pointer} Tmp_448: int;
  var {:pointer} FdoData_52: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    FdoData_52 := actual_FdoData_52;
    Irp_19 := actual_Irp_19;
    call {:si_unique_call 831} Tmp_448 := __HAVOC_malloc(72);
    Tmp_448 := strConst__li2bpl128;
    call {:si_unique_call 832} DebugPrint(5, 2048, Tmp_448);
    call {:si_unique_call 833} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 834} Tmp_447 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    Mem_T.INT4[Tmp_447] := oldIrql_11;
    call {:si_unique_call 835} sdv_KeAcquireSpinLock(0, Tmp_447);
    assume {:nonnull} Tmp_447 != 0;
    assume Tmp_447 > 0;
    oldIrql_11 := Mem_T.INT4[Tmp_447];
    call {:si_unique_call 836} vslice_dummy_var_129 := sdv_IoSetCancelRoutine(Irp_19, li2bplFunctionConstant7198);
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 837} ret := sdv_IoSetCancelRoutine(Irp_19, 0);
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    call {:si_unique_call 838} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_19))));
    call {:si_unique_call 839} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} ret != 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_19))] := 0;
    call {:si_unique_call 840} sdv_IoCompleteRequest(0, 0);
    goto L33;

  L33:
    call {:si_unique_call 841} vslice_dummy_var_131 := PciDrvIoDecrement(FdoData_52);
    Tmp_446 := 259;
    return;

  anon6_Then:
    assume {:partition} ret == 0;
    goto L33;

  anon5_Then:
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    call {:si_unique_call 842} vslice_dummy_var_130 := sdv_InsertTailList(NewRequestsQueue__FDO_DATA(FdoData_52), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_19))));
    call {:si_unique_call 843} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto L33;
}



procedure {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_17: int, actual_Irp_20: int) returns (Tmp_449: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_449 == -1073741810 || Tmp_449 == 0 || Tmp_449 == 258 || Tmp_449 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_17: int, actual_Irp_20: int) returns (Tmp_449: int)
{
  var {:pointer} Tmp_450: int;
  var {:pointer} fdoData_16: int;
  var {:scalar} status_46: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 844} Tmp_450 := __HAVOC_malloc(36);
    status_46 := 0;
    call {:si_unique_call 845} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc fdoData_16;
    Tmp_450 := strConst__li2bpl129;
    call {:si_unique_call 846} DebugPrint(5, 16, Tmp_450);
    call {:si_unique_call 847} vslice_dummy_var_132 := PciDrvIoIncrement(fdoData_16);
    assume {:nonnull} fdoData_16 != 0;
    assume fdoData_16 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 848} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 849} vslice_dummy_var_133 := PciDrvIoDecrement(fdoData_16);
    Tmp_449 := -1073741810;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 850} status_46 := PciDrvPowerUpDevice(fdoData_16, 1);
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_20))] := 0;
    assume {:nonnull} Irp_20 != 0;
    assume Irp_20 > 0;
    call {:si_unique_call 851} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 852} vslice_dummy_var_134 := PciDrvIoDecrement(fdoData_16);
    Tmp_449 := status_46;
    goto L1;
}



procedure {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_53: int, actual_Name: int, actual_Value: int) returns (Tmp_452: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_452 == 1 || Tmp_452 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_53: int, actual_Name: int, actual_Value: int) returns (Tmp_452: int)
{
  var {:scalar} valueName: int;
  var {:pointer} Tmp_453: int;
  var {:pointer} fullInfo: int;
  var {:scalar} retValue: int;
  var {:scalar} length_2: int;
  var {:pointer} Tmp_454: int;
  var {:pointer} sdv_256: int;
  var {:scalar} status_47: int;
  var {:pointer} Tmp_456: int;
  var {:pointer} Name: int;
  var {:pointer} Value: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_39: int;

  anon0:
    call {:si_unique_call 853} valueName := __HAVOC_malloc(12);
    Name := actual_Name;
    Value := actual_Value;
    call {:si_unique_call 854} Tmp_453 := __HAVOC_malloc(144);
    call {:si_unique_call 855} Tmp_454 := __HAVOC_malloc(116);
    retValue := 0;
    call {:si_unique_call 856} sdv_do_paged_code_check();
    Tmp_454 := strConst__li2bpl130;
    call {:si_unique_call 857} DebugPrint(5, 1, Tmp_454);
    assume {:nonnull} Value != 0;
    assume Value > 0;
    Mem_T.INT4[Value] := 0;
    call {:si_unique_call 858} status_47 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_47 >= 0;
    call {:si_unique_call 859} RtlInitUnicodeString(valueName, Name);
    assume {:nonnull} valueName != 0;
    assume valueName > 0;
    havoc length_2;
    call {:si_unique_call 860} sdv_256 := ExAllocatePoolWithTag(1, length_2, -1001831600);
    fullInfo := sdv_256;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 861} Tmp_456 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    Mem_T.INT4[Tmp_456] := length_2;
    call {:si_unique_call 862} status_47 := ZwQueryValueKey(0, 0, 1, 0, length_2, Tmp_456);
    assume {:nonnull} Tmp_456 != 0;
    assume Tmp_456 > 0;
    length_2 := Mem_T.INT4[Tmp_456];
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_47 >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_39;
    call {:si_unique_call 863} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_39);
    retValue := 1;
    goto L43;

  L43:
    call {:si_unique_call 864} sdv_ExFreePool(0);
    goto L35;

  L35:
    call {:si_unique_call 865} vslice_dummy_var_135 := ZwClose(0);
    goto L23;

  L23:
    Tmp_453 := strConst__li2bpl131;
    call {:si_unique_call 866} DebugPrint(5, 1, Tmp_453);
    Tmp_452 := retValue;
    return;

  anon8_Then:
    assume {:partition} 0 > status_47;
    goto L43;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L35;

  anon7_Then:
    assume {:partition} 0 > status_47;
    goto L23;
}



procedure {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_54: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_54: int)
{
  var {:pointer} FdoData_54: int;
  var vslice_dummy_var_136: int;

  anon0:
    call {:si_unique_call 867} vslice_dummy_var_136 := __HAVOC_malloc(4);
    FdoData_54 := actual_FdoData_54;
    call {:si_unique_call 868} PciDrvWithdrawIoctlIrps(FdoData_54);
    call {:si_unique_call 869} PciDrvWithdrawReadIrps(FdoData_54);
    return;
}



procedure {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_18: int) returns (Tmp_459: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} Tmp_459 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_18: int) returns (Tmp_459: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:scalar} powerState_3: int;
  var {:pointer} Tmp_460: int;
  var {:pointer} fdoData_17: int;
  var {:scalar} sdv: int;
  var {:pointer} Tmp_461: int;
  var {:scalar} status_48: int;
  var {:pointer} DeviceObject_18: int;

  anon0:
    call {:si_unique_call 870} powerState_3 := __HAVOC_malloc(8);
    call {:si_unique_call 871} sdv := __HAVOC_malloc(8);
    DeviceObject_18 := actual_DeviceObject_18;
    call {:si_unique_call 872} Tmp_460 := __HAVOC_malloc(104);
    call {:si_unique_call 873} Tmp_461 := __HAVOC_malloc(104);
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc fdoData_17;
    Tmp_460 := strConst__li2bpl132;
    call {:si_unique_call 874} DebugPrint(4, 2, Tmp_460);
    assume {:nonnull} fdoData_17 != 0;
    assume fdoData_17 > 0;
    assume {:nonnull} fdoData_17 != 0;
    assume fdoData_17 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} fdoData_17 != 0;
    assume fdoData_17 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} powerState_3 != 0;
    assume powerState_3 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(powerState_3)] := 4;
    call {:si_unique_call 875} structPtr888sdv := PoSetPowerState(0, 1, powerState_3);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(sdv)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888sdv)];
    goto L17;

  L17:
    call {:si_unique_call 876} NICShutdown(fdoData_17);
    goto L13;

  L13:
    call {:si_unique_call 877} status_48 := NICFreeDeviceResources(fdoData_17);
    assume {:nonnull} fdoData_17 != 0;
    assume fdoData_17 > 0;
    Tmp_461 := strConst__li2bpl133;
    call {:si_unique_call 878} DebugPrint(4, 2, Tmp_461);
    Tmp_459 := status_48;
    return;

  anon5_Then:
    goto L17;

  anon6_Then:
    goto L13;
}



procedure {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_1: int) returns (Tmp_463: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_1: int) returns (Tmp_463: int)
{
  var {:scalar} MinorFunction_1: int;

  anon0:
    MinorFunction_1 := actual_MinorFunction_1;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} MinorFunction_1 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} MinorFunction_1 != 1;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} MinorFunction_1 != 2;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} MinorFunction_1 != 3;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} MinorFunction_1 != 4;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} MinorFunction_1 != 5;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} MinorFunction_1 != 6;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} MinorFunction_1 != 7;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} MinorFunction_1 != 8;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} MinorFunction_1 != 9;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} MinorFunction_1 != 10;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} MinorFunction_1 != 11;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} MinorFunction_1 != 12;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} MinorFunction_1 != 13;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} MinorFunction_1 != 15;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} MinorFunction_1 != 16;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} MinorFunction_1 != 17;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} MinorFunction_1 != 18;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} MinorFunction_1 != 19;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} MinorFunction_1 != 20;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} MinorFunction_1 != 21;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} MinorFunction_1 != 22;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} MinorFunction_1 != 23;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} MinorFunction_1 == 24;
    Tmp_463 := strConst__li2bpl158;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:partition} MinorFunction_1 != 24;
    Tmp_463 := strConst__li2bpl134;
    goto L1;

  anon51_Then:
    assume {:partition} MinorFunction_1 == 23;
    Tmp_463 := strConst__li2bpl157;
    goto L1;

  anon52_Then:
    assume {:partition} MinorFunction_1 == 22;
    Tmp_463 := strConst__li2bpl156;
    goto L1;

  anon53_Then:
    assume {:partition} MinorFunction_1 == 21;
    Tmp_463 := strConst__li2bpl155;
    goto L1;

  anon54_Then:
    assume {:partition} MinorFunction_1 == 20;
    Tmp_463 := strConst__li2bpl154;
    goto L1;

  anon55_Then:
    assume {:partition} MinorFunction_1 == 19;
    Tmp_463 := strConst__li2bpl153;
    goto L1;

  anon56_Then:
    assume {:partition} MinorFunction_1 == 18;
    Tmp_463 := strConst__li2bpl152;
    goto L1;

  anon57_Then:
    assume {:partition} MinorFunction_1 == 17;
    Tmp_463 := strConst__li2bpl151;
    goto L1;

  anon58_Then:
    assume {:partition} MinorFunction_1 == 16;
    Tmp_463 := strConst__li2bpl150;
    goto L1;

  anon59_Then:
    assume {:partition} MinorFunction_1 == 15;
    Tmp_463 := strConst__li2bpl149;
    goto L1;

  anon60_Then:
    assume {:partition} MinorFunction_1 == 13;
    Tmp_463 := strConst__li2bpl148;
    goto L1;

  anon61_Then:
    assume {:partition} MinorFunction_1 == 12;
    Tmp_463 := strConst__li2bpl147;
    goto L1;

  anon62_Then:
    assume {:partition} MinorFunction_1 == 11;
    Tmp_463 := strConst__li2bpl146;
    goto L1;

  anon63_Then:
    assume {:partition} MinorFunction_1 == 10;
    Tmp_463 := strConst__li2bpl145;
    goto L1;

  anon64_Then:
    assume {:partition} MinorFunction_1 == 9;
    Tmp_463 := strConst__li2bpl144;
    goto L1;

  anon65_Then:
    assume {:partition} MinorFunction_1 == 8;
    Tmp_463 := strConst__li2bpl143;
    goto L1;

  anon66_Then:
    assume {:partition} MinorFunction_1 == 7;
    Tmp_463 := strConst__li2bpl142;
    goto L1;

  anon67_Then:
    assume {:partition} MinorFunction_1 == 6;
    Tmp_463 := strConst__li2bpl141;
    goto L1;

  anon68_Then:
    assume {:partition} MinorFunction_1 == 5;
    Tmp_463 := strConst__li2bpl140;
    goto L1;

  anon69_Then:
    assume {:partition} MinorFunction_1 == 4;
    Tmp_463 := strConst__li2bpl139;
    goto L1;

  anon70_Then:
    assume {:partition} MinorFunction_1 == 3;
    Tmp_463 := strConst__li2bpl138;
    goto L1;

  anon71_Then:
    assume {:partition} MinorFunction_1 == 2;
    Tmp_463 := strConst__li2bpl137;
    goto L1;

  anon72_Then:
    assume {:partition} MinorFunction_1 == 1;
    Tmp_463 := strConst__li2bpl136;
    goto L1;

  anon49_Then:
    assume {:partition} MinorFunction_1 == 0;
    Tmp_463 := strConst__li2bpl135;
    goto L1;
}



procedure {:origName "PciDrvDispatchPnpComplete"} PciDrvDispatchPnpComplete(actual_DeviceObject_19: int, actual_Irp_21: int, actual_Context_3: int) returns (Tmp_465: int);
  free ensures {:va_keep} Tmp_465 == -1073741802;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPnpComplete"} PciDrvDispatchPnpComplete(actual_DeviceObject_19: int, actual_Irp_21: int, actual_Context_3: int) returns (Tmp_465: int)
{
  var {:pointer} event_2: int;
  var {:pointer} Irp_21: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_137: int;

  anon0:
    Irp_21 := actual_Irp_21;
    Context_3 := actual_Context_3;
    event_2 := Context_3;
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 879} vslice_dummy_var_137 := KeSetEvent(event_2, 0, 0);
    goto L6;

  L6:
    Tmp_465 := -1073741802;
    return;

  anon3_Then:
    goto L6;
}



procedure {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_56: int) returns (Tmp_470: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_56: int) returns (Tmp_470: int)
{
  var {:pointer} Tmp_471: int;
  var {:pointer} Tmp_472: int;
  var {:scalar} result_2: int;
  var {:pointer} FdoData_56: int;
  var vslice_dummy_var_40: int;

  anon0:
    FdoData_56 := actual_FdoData_56;
    call {:si_unique_call 880} Tmp_472 := __HAVOC_malloc(88);
    call {:si_unique_call 881} Tmp_471 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    havoc vslice_dummy_var_40;
    Mem_T.INT4[Tmp_471] := vslice_dummy_var_40;
    call {:si_unique_call 882} result_2 := sdv_InterlockedIncrement(Tmp_471);
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} Tmp_471 != 0;
    assume Tmp_471 > 0;
    Tmp_472 := strConst__li2bpl160;
    call {:si_unique_call 883} DebugPrint(6, 1024, Tmp_472);
    Tmp_470 := result_2;
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_138: int;

  anon0:
    call {:si_unique_call 884} vslice_dummy_var_138 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int)
{
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 885} vslice_dummy_var_139 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_140: int;

  anon0:
    call {:si_unique_call 886} vslice_dummy_var_140 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_479: int);
  free ensures {:va_keep} Tmp_479 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_479: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_479 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_141: int;

  anon0:
    call {:si_unique_call 887} vslice_dummy_var_141 := __HAVOC_malloc(4);
    p := actual_p;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    assume {:nonnull} p != 0;
    assume p > 0;
    Mem_T.INT4[p] := sdv_irql_previous;
    return;
}



procedure {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_483: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunAddDevice"} {:osmodel} sdv_RunAddDevice(actual_p1: int, actual_p2: int) returns (Tmp_483: int)
{
  var {:scalar} status_50: int;
  var {:pointer} p1: int;
  var {:pointer} p2: int;

  anon0:
    p1 := actual_p1;
    p2 := actual_p2;
    status_50 := 0;
    call {:si_unique_call 888} sdv_stub_add_begin();
    call {:si_unique_call 889} status_50 := PciDrvAddDevice(p1, p2);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 890} sdv_stub_add_end();
    Tmp_483 := status_50;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_485: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_485 == 1 || Tmp_485 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_485: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 891} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_485 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_485 := 0;
    goto L1;
}



procedure {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_487: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_487: int)
{
  var {:scalar} x: int;
  var {:pointer} sdv_269: int;

  anon0:
    call {:si_unique_call 892} sdv_269 := __HAVOC_malloc(1);
    x := sdv_269;
    Tmp_487 := x;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int)
{
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 893} vslice_dummy_var_142 := __HAVOC_malloc(4);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_491: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_491: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_491 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_491 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_491 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion()
{
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 894} vslice_dummy_var_143 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_1: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_144: int;

  anon0:
    call {:si_unique_call 895} vslice_dummy_var_144 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_1 != 0;
    assume Dpc_1 > 0;
    return;
}



procedure {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_3: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_20: int) returns (Tmp_497: int);
  free ensures {:va_keep} Tmp_497 == -1073741824 || Tmp_497 == -1073741771 || Tmp_497 == -1073741670 || Tmp_497 == -1073741823 || Tmp_497 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCreateDevice"} {:osmodel} IoCreateDevice(actual_DriverObject_3: int, actual_DeviceExtensionSize: int, actual_DeviceName: int, actual_DeviceType: int, actual_DeviceCharacteristics: int, actual_Exclusive: int, actual_DeviceObject_20: int) returns (Tmp_497: int)
{
  var {:pointer} DeviceObject_20: int;

  anon0:
    DeviceObject_20 := actual_DeviceObject_20;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_497 := -1073741824;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_497 := -1073741771;
    goto L1;

  anon13_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_497 := -1073741670;
    goto L1;

  anon14_Then:
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    Tmp_497 := -1073741823;
    goto L1;

  anon15_Then:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} sdv_p_devobj_fdo != 0;
    assume sdv_p_devobj_fdo > 0;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    goto L21;

  L21:
    Tmp_497 := 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} sdv_p_devobj_child_pdo != 0;
    assume sdv_p_devobj_child_pdo > 0;
    assume {:nonnull} DeviceObject_20 != 0;
    assume DeviceObject_20 > 0;
    goto L21;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_4: int)
{
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 896} vslice_dummy_var_145 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 897} vslice_dummy_var_146 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_503: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_503: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_503 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 898} vslice_dummy_var_147 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_3: int)
{
  var vslice_dummy_var_148: int;

  anon0:
    call {:si_unique_call 899} vslice_dummy_var_148 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_509: int);
  free ensures {:va_keep} Tmp_509 == 1 || Tmp_509 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_509: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_509 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_509 := 0;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_4: int)
{
  var {:pointer} pirp_4: int;
  var vslice_dummy_var_149: int;

  anon0:
    call {:si_unique_call 900} vslice_dummy_var_149 := __HAVOC_malloc(4);
    pirp_4 := actual_pirp_4;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_4 != 0;
    assume pirp_4 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_4 != 0;
    assume pirp_4 > 0;
    goto L1;
}



procedure {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_513: int);
  free ensures {:va_keep} Tmp_513 == 0 || Tmp_513 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_513: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_513 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_513 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} u: int;
  var vslice_dummy_var_150: int;
  var vslice_dummy_var_151: int;
  var vslice_dummy_var_152: int;
  var vslice_dummy_var_153: int;
  var vslice_dummy_var_154: int;

  anon0:
    call {:si_unique_call 901} u := __HAVOC_malloc(12);
    call {:si_unique_call 902} vslice_dummy_var_150 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 903} sdv_RunUnload(sdv_driver_object);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    goto L1;

  anon19_Then:
    call {:si_unique_call 904} sdv_stub_driver_init();
    call {:si_unique_call 905} vslice_dummy_var_152 := sdv_RunStartDevice(sdv_p_devobj_fdo, sdv_irp);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    call {:si_unique_call 906} vslice_dummy_var_151 := sdv_RunAddDevice(sdv_driver_object, sdv_p_devobj_pdo);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    call {:si_unique_call 907} vslice_dummy_var_154 := DriverEntry(sdv_driver_object, u);
    goto L1;

  anon17_Then:
    call {:si_unique_call 908} sdv_stub_driver_init();
    call {:si_unique_call 909} vslice_dummy_var_153 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon22_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "_sdv_init16"} {:osmodel} _sdv_init16();
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == 0;
  free ensures {:va_keep} sdv_irql_previous_2 == 0;
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == 0;
  free ensures {:va_keep} sdv_irql_previous_4 == 0;
  free ensures {:va_keep} sdv_irql_previous_3 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init16"} {:osmodel} _sdv_init16()
{
  var vslice_dummy_var_155: int;

  anon0:
    call {:si_unique_call 910} vslice_dummy_var_155 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    sdv_irql_current := 0;
    sdv_irql_previous := 0;
    sdv_irql_previous_2 := 0;
    sdv_irql_previous_3 := 0;
    sdv_irql_previous_4 := 0;
    sdv_irql_previous_5 := 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant7729;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant7732;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_519: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_519: int)
{
  var {:pointer} sdv_281: int;
  var {:pointer} p_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 911} sdv_281 := __HAVOC_malloc(1);
    p_1 := sdv_281;
    Tmp_519 := p_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_519 := 0;
    goto L1;
}



procedure {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion()
{
  var vslice_dummy_var_156: int;

  anon0:
    call {:si_unique_call 912} vslice_dummy_var_156 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_523: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_523: int)
{
  var {:pointer} x_2: int;
  var {:pointer} sdv_282: int;

  anon0:
    call {:si_unique_call 913} sdv_282 := __HAVOC_malloc(1);
    x_2 := sdv_282;
    Tmp_523 := x_2;
    return;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_22: int, actual_pirp_5: int, actual_IrpDisposition: int) returns (Tmp_527: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} Tmp_527 == 0 || Tmp_527 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_22: int, actual_pirp_5: int, actual_IrpDisposition: int) returns (Tmp_527: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 3;
    s_1 := 0;
    call {:si_unique_call 914} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_527 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 2;
    call {:si_unique_call 915} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 1;
    s_1 := 0;
    call {:si_unique_call 916} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    Mem_T.INT4[IrpDisposition] := 0;
    s_1 := 0;
    call {:si_unique_call 917} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_23: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_23: int, actual_Type: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_1: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 918} State := __HAVOC_malloc(8);
    call {:si_unique_call 919} r_1 := __HAVOC_malloc(8);
    call {:si_unique_call 920} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(State)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888State)];
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(Tmp)] := Mem_T.INT4[DeviceState__POWER_STATE(r_1)];
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int);
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == actual_new;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int)
{
  var {:scalar} new: int;
  var {:pointer} p_2: int;
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 921} vslice_dummy_var_157 := __HAVOC_malloc(4);
    new := actual_new;
    p_2 := actual_p_2;
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := new;
    assume {:nonnull} p_2 != 0;
    assume p_2 > 0;
    Mem_T.INT4[p_2] := sdv_irql_previous;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_532: int);
  free ensures {:va_keep} Tmp_532 == 1 || Tmp_532 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_532: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_532 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_532 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_6: int, actual_CompletionRoutine: int, actual_Context_5: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_6: int, actual_CompletionRoutine: int, actual_Context_5: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_6: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_5: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_158: int;

  anon0:
    call {:si_unique_call 922} vslice_dummy_var_158 := __HAVOC_malloc(4);
    pirp_6 := actual_pirp_6;
    CompletionRoutine := actual_CompletionRoutine;
    Context_5 := actual_Context_5;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 923} irpSp := sdv_IoGetNextIrpStackLocation(pirp_6);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_begin"} {:osmodel} sdv_stub_add_begin()
{
  var vslice_dummy_var_159: int;

  anon0:
    call {:si_unique_call 924} vslice_dummy_var_159 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_538: int);
  free ensures {:va_keep} Tmp_538 == 1 || Tmp_538 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_538: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_538 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_538 := 0;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_24: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_24: int)
{
  var vslice_dummy_var_160: int;

  anon0:
    call {:si_unique_call 925} vslice_dummy_var_160 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_542: int);
  free ensures {:va_keep} Tmp_542 == 258 || Tmp_542 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_542: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_542 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_542 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_542 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_24: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_24: int)
{
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 926} vslice_dummy_var_161 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_546: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_546: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_546 := OldState;
    return;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_550: int);
  free ensures {:va_keep} Tmp_550 == actual_AddressWithinSection;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_550: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_550 := AddressWithinSection;
    return;
}



procedure {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_552: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_552: int)
{
  var {:pointer} sdv_295: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_552 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 927} sdv_295 := __HAVOC_malloc(1);
    Tmp_552 := sdv_295;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_7: int) returns (Tmp_554: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_7: int) returns (Tmp_554: int)
{
  var {:pointer} pirp_7: int;

  anon0:
    pirp_7 := actual_pirp_7;
    assume {:nonnull} pirp_7 != 0;
    assume pirp_7 > 0;
    havoc Tmp_554;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_2: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_2: int, actual_s_2: int)
{
  var vslice_dummy_var_162: int;

  anon0:
    call {:si_unique_call 928} vslice_dummy_var_162 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_558: int);
  free ensures {:va_keep} Tmp_558 == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_558: int)
{

  anon0:
    Tmp_558 := sdv_irql_current;
    return;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_25: int, actual_MinorFunction_2: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_6: int, actual_Irp_25: int) returns (Tmp_560: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_560 == -1073741584 || Tmp_560 == 259 || Tmp_560 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_25: int, actual_MinorFunction_2: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_6: int, actual_Irp_25: int) returns (Tmp_560: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction_2: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 929} PowerState := __HAVOC_malloc(8);
    MinorFunction_2 := actual_MinorFunction_2;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    Mem_T.INT4[DeviceState__POWER_STATE(PowerState)] := Mem_T.INT4[DeviceState__POWER_STATE(structPtr888PowerState)];
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction_2 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_560 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction_2 == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_560 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_560 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction_2 == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction_2 == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_562: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, SLAM_guard_S_0, yogi_error;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_562: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_563: int;
  var {:scalar} Tmp_564: int;
  var boogieTmp: int;
  var DEVPKEY_Device_ProblemCode__Loc: int;
  var DEVPKEY_Device_DHP_Rebalance_Policy__Loc: int;
  var GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc: int;
  var DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc: int;
  var GUID_NWF_FRAGMENTATION_THRESHOLD__Loc: int;
  var GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressAERControl__Loc: int;
  var DEVPKEY_PciDevice_BaseClass__Loc: int;
  var GUID_NWF_ACTIVE_PHY_LIST__Loc: int;
  var DEVPKEY_Device_ResourcePickerTags__Loc: int;
  var DEVPKEY_DeviceContainer_IsPaired__Loc: int;
  var DEVPKEY_Device_HardwareIds__Loc: int;
  var DEVPKEY_DeviceContainer_InstallInProgress__Loc: int;
  var DEVPKEY_PciDevice_MaxPayloadSize__Loc: int;
  var GUID_NWF_COUNTRY_STRING__Loc: int;
  var DEVPKEY_Device_LowerFilters__Loc: int;
  var DEVPKEY_Device_FirmwareVersion__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_NWF_CURRENT_INDEX__Loc: int;
  var GUID_NWF_TI_THRESHOLD__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_BarTypes__Loc: int;
  var GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc: int;
  var GUID_POWER_CONSERVATION_IDLE_TIME__Loc: int;
  var GUID_NWF_RECV_SENSITIVITY_LIST__Loc: int;
  var DEVPKEY_DeviceClass_UpperFilters__Loc: int;
  var DEVPKEY_DeviceClass_NoInstallClass__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FLAG__Loc: int;
  var DEVPKEY_Device_DeviceDesc__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc: int;
  var GUID_NWF_RF_USAGE__Loc: int;
  var DEVPKEY_DeviceContainer_IsEncrypted__Loc: int;
  var DEVPKEY_Device_LastArrivalDate__Loc: int;
  var GUID_NWF_RSSI_RANGE__Loc: int;
  var GUID_NWF_CURRENT_PHY_ID__Loc: int;
  var GUID_NWF_JOIN_REQUEST__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_Characteristics__Loc: int;
  var DEVPKEY_DrvPkg_DetailedDescription__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription2__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc: int;
  var DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc: int;
  var GUID_NWF_RTS_THRESHOLD__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Icon__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_Name__Loc: int;
  var GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc: int;
  var DEVPKEY_Device_InstanceId__Loc: int;
  var GUID_NWF_SUPPORTED_RX_ANTENNA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_LastRemovalDate__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc: int;
  var GUID_NWF_POWER_MGMT_MODE__Loc: int;
  var GUID_NWF_ED_THRESHOLD__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc: int;
  var GUID_NWF_OPERATION_MODE_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Manufacturer__Loc: int;
  var DEVPKEY_Device_DriverLogoLevel__Loc: int;
  var DEVPKEY_DeviceContainer_Address__Loc: int;
  var DEVPKEY_DeviceContainer_IsAuthenticated__Loc: int;
  var DEVPKEY_PciDevice_SubClass__Loc: int;
  var GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_PERMANENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ConfigurationId__Loc: int;
  var GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc: int;
  var GUID_DEVINTERFACE_PCIDRV__Loc: int;
  var DEVPKEY_Device_HasProblem__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc: int;
  var GUID_NWF_MEDIA_STREAMING_ENABLED__Loc: int;
  var DEVPKEY_PciDevice_AriSupport__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc: int;
  var GUID_NWF_PMKID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc: int;
  var DEVPKEY_Device_PhysicalDeviceLocation__Loc: int;
  var DEVPKEY_DeviceContainer_Version__Loc: int;
  var GUID_NWF_BEACON_PERIOD__Loc: int;
  var GUID_NWF_DESIRED_SSID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_ASPMSupport__Loc: int;
  var GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc: int;
  var DEVPKEY_Device_PostInstallInProgress__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_Driver__Loc: int;
  var DEVPKEY_PciDevice_CurrentPayloadSize__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc: int;
  var DEVPKEY_Device_InstallState__Loc: int;
  var GUID_NWF_MAX_DWELL_TIME__Loc: int;
  var GUID_NWF_WPA_TSC__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var DEVPKEY_PciDevice_Label_String__Loc: int;
  var GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var DEVPKEY_Device_FirmwareDate__Loc: int;
  var DEVPKEY_PciDevice_SriovSupport__Loc: int;
  var GUID_NWF_SAFE_MODE_ENABLED__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceInterface_FriendlyName__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc: int;
  var DEVPKEY_PciDevice_S0WakeupSupported__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_InterruptSupport__Loc: int;
  var DEVPKEY_PciDevice_Label_Id__Loc: int;
  var DEVPKEY_Device_CompatibleIds__Loc: int;
  var DEVPKEY_Device_ReportedDeviceIdsHash__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc: int;
  var DEVPKEY_Device_DriverPropPageProvider__Loc: int;
  var DEVPKEY_DeviceContainer_UnpairUninstall__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkSpeed__Loc: int;
  var GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc: int;
  var DEVPKEY_Device_BiosDeviceName__Loc: int;
  var GUID_NWF_CFP_MAX_DURATION__Loc: int;
  var GUID_NWF_HOPPING_PATTERN__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc: int;
  var GUID_NWF_DISCONNECT_REQUEST__Loc: int;
  var GUID_NWF_CURRENT_PACKET_FILTER__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PowerRelations__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc: int;
  var GUID_NWF_SUPPORTED_PHY_TYPES__Loc: int;
  var GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc: int;
  var DEVPKEY_DrvPkg_BrandingIcon__Loc: int;
  var DEVPKEY_DeviceClass_Characteristics__Loc: int;
  var GUID_NWF_SCAN_REQUEST__Loc: int;
  var GUID_NWF_DESIRED_BSS_TYPE__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var DEVPKEY_Device_MatchingDeviceId__Loc: int;
  var GUID_NWF_EXCLUDE_UNENCRYPTED__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc: int;
  var DEVPKEY_Device_PDOName__Loc: int;
  var DEVPKEY_Device_Address__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Exclusive__Loc: int;
  var DEVPKEY_PciDevice_Correctable_Error_Mask__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription1__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc: int;
  var DEVPKEY_DeviceContainer_Manufacturer__Loc: int;
  var DEVPKEY_DeviceClass_NoUseClass__Loc: int;
  var GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkWidth__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_DevNodeStatus__Loc: int;
  var GUID_NWF_WME_ENABLED__Loc: int;
  var DEVPKEY_Device_DriverProvider__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc: int;
  var DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc: int;
  var DEVPKEY_PciDevice_AERCapabilityPresent__Loc: int;
  var GUID_NWF_WME_AC_PARAMETERS__Loc: int;
  var DEVPKEY_Device_ModelId__Loc: int;
  var GUID_NWF_AP_JOIN_REQUEST__Loc: int;
  var DEVPKEY_DeviceContainer_PrimaryCategory__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_Children__Loc: int;
  var DEVPKEY_Device_Stack__Loc: int;
  var DEVPKEY_DeviceContainer_IsLocalMachine__Loc: int;
  var GUID_NWF_MPDU_MAX_LENGTH__Loc: int;
  var GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc: int;
  var DEVPKEY_Device_DriverDate__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_NWF_STATION_ID__Loc: int;
  var GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc: int;
  var GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var DEVPKEY_Device_DriverDesc__Loc: int;
  var GUID_NWF_HOP_MODULUS__Loc: int;
  var DEVPKEY_DeviceClass_NoDisplayClass__Loc: int;
  var GUID_NWF_OFFLOAD_CAPABILITY__Loc: int;
  var GUID_NWF_SUPPORTED_POWER_LEVELS__Loc: int;
  var GUID_NWF_DIVERSITY_SELECTION_RX__Loc: int;
  var GUID_NWF_WME_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var DEVPKEY_Device_BusNumber__Loc: int;
  var DEVPKEY_Device_PowerData__Loc: int;
  var DEVPKEY_Device_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_MaxReadRequestSize__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataPath__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc: int;
  var GUID_NWF_CURRENT_SET__Loc: int;
  var GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_DeviceContainer_FriendlyName__Loc: int;
  var DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PresenceNotForDevice__Loc: int;
  var GUID_NWF_DESIRED_BSSID_LIST__Loc: int;
  var GUID_NWF_ENUM_ASSOCIATION_INFO__Loc: int;
  var DEVPKEY_DeviceInterface_ClassGuid__Loc: int;
  var DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc: int;
  var DEVPKEY_Device_FriendlyNameAttributes__Loc: int;
  var GUID_NWF_NIC_POWER_STATE__Loc: int;
  var GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc: int;
  var DEVPKEY_Device_SessionId__Loc: int;
  var DEVPKEY_DeviceInterface_Enabled__Loc: int;
  var DEVPKEY_DeviceInterface_Restricted__Loc: int;
  var GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc: int;
  var DEVPKEY_Device_TransportRelations__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var DEVPKEY_NAME__Loc: int;
  var DEVPKEY_Device_UINumberDescFormat__Loc: int;
  var GUID_NWF_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_UPDATE_IE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceClass_ClassCoInstallers__Loc: int;
  var GUID_NWF_POWER_MGMT_REQUEST__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_FriendlyName__Loc: int;
  var DEVPKEY_Device_LocationInfo__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Icon__Loc: int;
  var GUID_NWF_DESIRED_PHY_LIST__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc: int;
  var DEVPKEY_Device_Exclusive__Loc: int;
  var GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc: int;
  var DEVPKEY_Device_Numa_Proximity_Domain__Loc: int;
  var GUID_NWF_QOS_TX_DURATION__Loc: int;
  var DEVPKEY_Device_DriverProblemDesc__Loc: int;
  var DEVPKEY_DeviceContainer_IsSharedDevice__Loc: int;
  var GUID_NWF_CURRENT_DWELL_TIME__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkWidth__Loc: int;
  var DEVPKEY_Device_UINumber__Loc: int;
  var DEVPKEY_Device_ExtendedConfigurationIds__Loc: int;
  var DEVPKEY_Device_DriverRank__Loc: int;
  var DEVPKEY_DeviceContainer_IsRebootRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc: int;
  var GUID_NWF_PORT_STATE_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequiredOverride__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc: int;
  var DEVPKEY_PciDevice_DeviceType__Loc: int;
  var GUID_NWF_QOS_TX_MEDIUM_TIME__Loc: int;
  var GUID_NWF_DIVERSITY_SUPPORT__Loc: int;
  var GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_Device_DriverInfSection__Loc: int;
  var DEVPKEY_DeviceClass_PropPageProvider__Loc: int;
  var GUID_NWF_TEMP_TYPE__Loc: int;
  var DEVPKEY_Device_Class__Loc: int;
  var DEVPKEY_Device_NoConnectSound__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_DevType__Loc: int;
  var GUID_NWF_CURRENT_PATTERN__Loc: int;
  var DEVPKEY_Device_ManufacturerAttributes__Loc: int;
  var GUID_NWF_ENUM_BSS_LIST__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var DEVPKEY_Device_Reported__Loc: int;
  var DEVPKEY_PciRootBus_NativePciExpressControl__Loc: int;
  var GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_IsNetworkDevice__Loc: int;
  var DEVPKEY_Device_ResourcePickerExceptions__Loc: int;
  var GUID_NWF_OPERATIONAL_RATE_SET__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var DEVPKEY_Device_RemovalPolicyDefault__Loc: int;
  var DEVPKEY_Device_ProblemStatus__Loc: int;
  var GUID_NWF_WEP_UPLOAD__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc: int;
  var GUID_NWF_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var DEVPKEY_Device_EjectionRelations__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkSpeed__Loc: int;
  var DEVPKEY_PciDevice_FirmwareErrorHandling__Loc: int;
  var GUID_NWF_CURRENT_OPERATION_MODE__Loc: int;
  var GUID_NWF_STATISTICS__Loc: int;
  var DEVPKEY_Device_IsAssociateableByUserAction__Loc: int;
  var DEVPKEY_DrvPkg_Icon__Loc: int;
  var DEVPKEY_PciDevice_ProgIf__Loc: int;
  var DEVPKEY_Device_AdditionalSoftwareRequested__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc: int;
  var DEVPKEY_Device_LocationPaths__Loc: int;
  var GUID_NWF_CURRENT_FREQUENCY__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var DEVPKEY_DeviceClass_SilentInstall__Loc: int;
  var DEVPKEY_Device_LegacyBusType__Loc: int;
  var DEVPKEY_DeviceContainer_IsDefaultDevice__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var DEVPKEY_Device_UpperFilters__Loc: int;
  var DEVPKEY_Device_DevType__Loc: int;
  var DEVPKEY_Device_DriverInfPath__Loc: int;
  var DEVPKEY_DeviceInterface_ReferenceString__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc: int;
  var GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_POWER_PERFORMANCE_IDLE_TIME__Loc: int;
  var DEVPKEY_Device_IsRebootRequired__Loc: int;
  var DEVPKEY_DeviceClass_ClassInstaller__Loc: int;
  var DEVPKEY_DeviceContainer_IsConnected__Loc: int;
  var DEVPKEY_DeviceContainer_Icon__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc: int;
  var DEVPKEY_Device_SecuritySDS__Loc: int;
  var DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc: int;
  var GUID_NWF_CFP_PERIOD__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_InstallDate__Loc: int;
  var DEVPKEY_DeviceClass_LowerFilters__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataChecksum__Loc: int;
  var DEVPKEY_DeviceClass_DefaultService__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_NWF_WEP_ICV_ERROR_COUNT__Loc: int;
  var DEVPKEY_DrvPkg_VendorWebSite__Loc: int;
  var DEVPKEY_DeviceContainer_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_AcsSupport__Loc: int;
  var DEVPKEY_Device_RemovalRelations__Loc: int;
  var DEVPKEY_DrvPkg_DocumentationLink__Loc: int;
  var GUID_NWF_MULTICAST_LIST__Loc: int;
  var GUID_NWF_DEFAULT_WEP_UPLOAD__Loc: int;
  var GUID_NWF_RESET_REQUEST__Loc: int;
  var DEVPKEY_Device_BusTypeGuid__Loc: int;
  var GUID_NWF_DTIM_PERIOD__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc: int;
  var GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc: int;
  var DEVPKEY_Device_ShowInUninstallUI__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc: int;
  var GUID_NWF_CURRENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ContainerId__Loc: int;
  var DEVPKEY_Device_InLocalMachineContainer__Loc: int;
  var DEVPKEY_DeviceContainer_ExperienceId__Loc: int;
  var GUID_NWF_CURRENT_RX_ANTENNA__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY__Loc: int;
  var DEVPKEY_Device_FirmwareRevision__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_NWF_SUPPORTED_TX_ANTENNA__Loc: int;
  var DEVPKEY_DeviceContainer_BaselineExperienceId__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryInterface__Loc: int;
  var GUID_NWF_CONNECT_REQUEST__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_EXTSTA_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Security__Loc: int;
  var DEVPKEY_DeviceClass_SecuritySDS__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var DEVPKEY_Device_EnumeratorName__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var DEVPKEY_DeviceClass_Security__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Seen__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc: int;
  var DEVPKEY_Device_ClassGuid__Loc: int;
  var DEVPKEY_Device_FirstInstallDate__Loc: int;
  var GUID_NWF_MAXIMUM_LIST_SIZE__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_NWF_IBSS_PARAMS__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_NWF_ATIM_WINDOW__Loc: int;
  var GUID_NWF_CF_POLLABLE__Loc: int;
  var GUID_NWF_MAC_ADDRESS__Loc: int;
  var DEVPKEY_Device_BusReportedDeviceDesc__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var GUID_NWF_HOP_TIME__Loc: int;
  var DEVPKEY_Device_RemovalPolicy__Loc: int;
  var DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_START_REQUEST__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var DEVPKEY_DeviceClass_Name__Loc: int;
  var DEVPKEY_DeviceContainer_ModelName__Loc: int;
  var DEVPKEY_Device_IsPresent__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var DEVPKEY_Device_RemovalPolicyOverride__Loc: int;
  var DEVPKEY_Device_Model__Loc: int;
  var DEVPKEY_PciDevice_RootError_Reporting__Loc: int;
  var GUID_NWF_SHORT_RETRY_LIMIT__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc: int;
  var DEVPKEY_DeviceContainer_DiscoveryMethod__Loc: int;
  var DEVPKEY_Device_DriverInfSectionExt__Loc: int;
  var DEVPKEY_DeviceClass_ClassName__Loc: int;
  var DEVPKEY_PciRootBus_SystemMsiSupport__Loc: int;
  var GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc: int;
  var GUID_NWF_HOP_OFFSET__Loc: int;
  var DEVPKEY_DeviceContainer_AssociationArray__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryBusWidth__Loc: int;
  var GUID_NWF_ASSOCIATION_PARAMS__Loc: int;
  var DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc: int;
  var DEVPKEY_Device_BaseContainerId__Loc: int;
  var GUID_NWF_FLUSH_BSS_LIST__Loc: int;
  var GUID_NWF_CURRENT_TX_ANTENNA__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var DEVPKEY_Device_BusRelations__Loc: int;
  var GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var DEVPKEY_DeviceContainer_ModelNumber__Loc: int;
  var PCIDRV_WMI_STD_DATA_GUID__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Connected__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_PciDevice_Error_Reporting__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var DEVPKEY_PciRootBus_MSISupport__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc: int;
  var DEVPKEY_Device_SignalStrength__Loc: int;
  var DEVPKEY_Device_DebuggerSafe__Loc: int;
  var DEVPKEY_Device_DriverCoInstallers__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_NWF_OPTIONAL_CAPABILITY__Loc: int;
  var GUID_NWF_EHCC_PRIME_RADIX__Loc: int;
  var GUID_NWF_CURRENT_PHY_TYPE__Loc: int;
  var GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc: int;
  var DEVPKEY_Device_Numa_Node__Loc: int;
  var DEVPKEY_PciDevice_ExpressSpecVersion__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc: int;
  var GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_QOS_PARAMS__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var DEVPKEY_Device_GenericDriverInstalled__Loc: int;
  var GUID_NWF_CURRENT_REG_DOMAIN__Loc: int;
  var GUID_NWF_WME_UPDATE_IE__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc: int;
  var DEVPKEY_Device_Service__Loc: int;
  var DEVPKEY_Device_Capabilities__Loc: int;
  var DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc: int;
  var GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataCabinet__Loc: int;
  var GUID_NWF_COUNTERS_ENTRY__Loc: int;
  var GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc: int;
  var GUID_NWF_PHY_STATE__Loc: int;
  var DEVPKEY_Device_Parent__Loc: int;
  var GUID_NWF_MAX_RECEIVE_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_Category__Loc: int;
  var DEVPKEY_PciDevice_ECRC_Errors__Loc: int;
  var GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_NWF_AUTO_CONFIG_ENABLED__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var DEVPKEY_Device_DriverVersion__Loc: int;
  var GUID_NWF_CURRENT_CCA_MODE__Loc: int;
  var DEVPKEY_DrvPkg_Model__Loc: int;
  var DEVPKEY_DeviceClass_IconPath__Loc: int;
  var GUID_NWF_LONG_RETRY_LIMIT__Loc: int;
  var DEVPKEY_PciDevice_InterruptMessageMaximum__Loc: int;
  var GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc: int;
  var DEVPKEY_Device_Legacy__Loc: int;
  var DEVPKEY_Device_Siblings__Loc: int;
  var DEVPKEY_DeviceContainer_HasProblem__Loc: int;
  var Globals__Loc: int;
  var GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc: int;
  var GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc: int;
  var GUID_ALLOW_RTC_WAKE__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_2__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc: int;
  var GUID_DISK_IDLE_TIMEOUT__Loc: int;
  var GUID_ACDC_POWER_SOURCE__Loc: int;
  var GUID_SYSTEM_COOLING_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_3__Loc: int;
  var GUID_LOCK_CONSOLE_ON_WAKE__Loc: int;
  var GUID_VIDEO_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLESTATE_POLICY__Loc: int;
  var GUID_UNATTEND_SLEEP_TIMEOUT__Loc: int;
  var PPM_THERMALCONSTRAINT_GUID__Loc: int;
  var GUID_CRITICAL_POWER_TRANSITION__Loc: int;
  var GUID_SLEEP_IDLE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT__Loc: int;
  var GUID_STANDBY_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_GUID__Loc: int;
  var GUID_TYPICAL_POWER_SAVINGS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc: int;
  var GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_2__Loc: int;
  var GUID_HIBERNATE_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc: int;
  var PPM_IDLESTATES_DATA_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc: int;
  var GUID_POWERBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc: int;
  var GUID_AUDIO_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_THROTTLE_POLICY__Loc: int;
  var GUID_BATTERY_PERCENTAGE_REMAINING__Loc: int;
  var GUID_GLOBAL_USER_PRESENCE__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_2__Loc: int;
  var GUID_APPLAUNCH_BUTTON__Loc: int;
  var GUID_PROCESSOR_ALLOW_THROTTLING__Loc: int;
  var GUID_IDLE_RESILIENCY_PERIOD__Loc: int;
  var GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc: int;
  var GUID_SLEEPBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc: int;
  var GUID_PROCESSOR_IDLE_DISABLE__Loc: int;
  var GUID_CONSOLE_DISPLAY_STATE__Loc: int;
  var GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_0__Loc: int;
  var GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc: int;
  var GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc: int;
  var GUID_LIDSWITCH_STATE_CHANGE__Loc: int;
  var GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc: int;
  var GUID_SESSION_DISPLAY_STATUS__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc: int;
  var GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc: int;
  var GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc: int;
  var GUID_MIN_POWER_SAVINGS__Loc: int;
  var GUID_DEVICE_IDLE_POLICY__Loc: int;
  var GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc: int;
  var GUID_SLEEP_SUBGROUP__Loc: int;
  var GUID_DISK_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_1__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_0__Loc: int;
  var GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_0__Loc: int;
  var GUID_VIDEO_DIM_TIMEOUT__Loc: int;
  var PPM_THERMAL_POLICY_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_TIME_CHECK__Loc: int;
  var GUID_LIDOPEN_POWERSTATE__Loc: int;
  var GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_TIME__Loc: int;
  var GUID_MONITOR_POWER_ON__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MINIMUM__Loc: int;
  var GUID_ALLOW_AWAYMODE__Loc: int;
  var GUID_DISK_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_SYSTEM_BUTTON_SUBGROUP__Loc: int;
  var PPM_PERFMON_PERFSTATE_GUID__Loc: int;
  var GUID_ALLOW_SYSTEM_REQUIRED__Loc: int;
  var GUID_ALLOW_DISPLAY_REQUIRED__Loc: int;
  var PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PARKING_PERF_STATE__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc: int;
  var PPM_IDLESTATE_CHANGE_GUID__Loc: int;
  var GUID_ALLOW_STANDBY_STATES__Loc: int;
  var GUID_PROCESSOR_PERFSTATE_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc: int;
  var GUID_VIDEO_SUBGROUP__Loc: int;
  var GUID_HIBERNATE_FASTS4_POLICY__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc: int;
  var PPM_PERFSTATE_CHANGE_GUID__Loc: int;
  var GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_USERINTERFACEBUTTON_ACTION__Loc: int;
  var GUID_PCIEXPRESS_ASPM_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc: int;
  var GUID_INTSTEER_SUBGROUP__Loc: int;
  var GUID_DISK_BURST_IGNORE_THRESHOLD__Loc: int;
  var GUID_DISK_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc: int;
  var PPM_PERFSTATES_DATA_GUID__Loc: int;
  var NO_SUBGROUP_GUID__Loc: int;
  var GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_MODE__Loc: int;
  var ALL_POWERSCHEMES_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc: int;
  var GUID_PROCESSOR_IDLE_TIME_CHECK__Loc: int;
  var GUID_INTSTEER_MODE__Loc: int;
  var GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc: int;
  var GUID_BACKGROUND_TASK_NOTIFICATION__Loc: int;
  var GUID_PROCESSOR_PERF_HISTORY__Loc: int;
  var GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_POLICY__Loc: int;
  var GUID_SESSION_USER_PRESENCE__Loc: int;
  var GUID_LIDCLOSE_ACTION__Loc: int;
  var GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_EX_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_TIME__Loc: int;
  var GUID_MAX_POWER_SAVINGS__Loc: int;
  var GUID_BATTERY_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc: int;
  var GUID_IDLE_BACKGROUND_TASK__Loc: int;
  var GUID_POWERSCHEME_PERSONALITY__Loc: int;
  var GUID_IDLE_RESILIENCY_SUBGROUP__Loc: int;
  var GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc: int;
  var GUID_ACTIVE_POWERSCHEME__Loc: int;
  var GUID_SYSTEM_AWAYMODE__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_driver_object__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var vslice_dummy_var_249: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 930} DEVPKEY_Device_ProblemCode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemCode__Loc == DEVPKEY_Device_ProblemCode;
    assume DEVPKEY_Device_ProblemCode != 0;
    call {:si_unique_call 931} DEVPKEY_Device_DHP_Rebalance_Policy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DHP_Rebalance_Policy__Loc == DEVPKEY_Device_DHP_Rebalance_Policy;
    assume DEVPKEY_Device_DHP_Rebalance_Policy != 0;
    call {:si_unique_call 932} GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc == GUID_NWF_DATA_RATE_MAPPING_TABLE;
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE != 0;
    call {:si_unique_call 933} DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc == DEVPKEY_DeviceContainer_IsMetadataSearchInProgress;
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress != 0;
    call {:si_unique_call 934} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 935} DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc == DEVPKEY_DeviceContainer_IsShowInDisconnectedState;
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState != 0;
    call {:si_unique_call 936} GUID_NWF_FRAGMENTATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FRAGMENTATION_THRESHOLD__Loc == GUID_NWF_FRAGMENTATION_THRESHOLD;
    assume GUID_NWF_FRAGMENTATION_THRESHOLD != 0;
    call {:si_unique_call 937} GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc == GUID_NWF_MAX_MAC_ADDRESS_STATES;
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES != 0;
    call {:si_unique_call 938} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 939} DEVPKEY_Device_SafeRemovalRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequired__Loc == DEVPKEY_Device_SafeRemovalRequired;
    assume DEVPKEY_Device_SafeRemovalRequired != 0;
    call {:si_unique_call 940} DEVPKEY_PciRootBus_PCIExpressAERControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressAERControl__Loc == DEVPKEY_PciRootBus_PCIExpressAERControl;
    assume DEVPKEY_PciRootBus_PCIExpressAERControl != 0;
    call {:si_unique_call 941} DEVPKEY_PciDevice_BaseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BaseClass__Loc == DEVPKEY_PciDevice_BaseClass;
    assume DEVPKEY_PciDevice_BaseClass != 0;
    call {:si_unique_call 942} GUID_NWF_ACTIVE_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ACTIVE_PHY_LIST__Loc == GUID_NWF_ACTIVE_PHY_LIST;
    assume GUID_NWF_ACTIVE_PHY_LIST != 0;
    call {:si_unique_call 943} DEVPKEY_Device_ResourcePickerTags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerTags__Loc == DEVPKEY_Device_ResourcePickerTags;
    assume DEVPKEY_Device_ResourcePickerTags != 0;
    call {:si_unique_call 944} DEVPKEY_DeviceContainer_IsPaired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsPaired__Loc == DEVPKEY_DeviceContainer_IsPaired;
    assume DEVPKEY_DeviceContainer_IsPaired != 0;
    call {:si_unique_call 945} DEVPKEY_Device_HardwareIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HardwareIds__Loc == DEVPKEY_Device_HardwareIds;
    assume DEVPKEY_Device_HardwareIds != 0;
    call {:si_unique_call 946} DEVPKEY_DeviceContainer_InstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_InstallInProgress__Loc == DEVPKEY_DeviceContainer_InstallInProgress;
    assume DEVPKEY_DeviceContainer_InstallInProgress != 0;
    call {:si_unique_call 947} DEVPKEY_PciDevice_MaxPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxPayloadSize__Loc == DEVPKEY_PciDevice_MaxPayloadSize;
    assume DEVPKEY_PciDevice_MaxPayloadSize != 0;
    call {:si_unique_call 948} GUID_NWF_COUNTRY_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTRY_STRING__Loc == GUID_NWF_COUNTRY_STRING;
    assume GUID_NWF_COUNTRY_STRING != 0;
    call {:si_unique_call 949} DEVPKEY_Device_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LowerFilters__Loc == DEVPKEY_Device_LowerFilters;
    assume DEVPKEY_Device_LowerFilters != 0;
    call {:si_unique_call 950} DEVPKEY_Device_FirmwareVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareVersion__Loc == DEVPKEY_Device_FirmwareVersion;
    assume DEVPKEY_Device_FirmwareVersion != 0;
    call {:si_unique_call 951} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 952} GUID_NWF_CURRENT_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_INDEX__Loc == GUID_NWF_CURRENT_INDEX;
    assume GUID_NWF_CURRENT_INDEX != 0;
    call {:si_unique_call 953} GUID_NWF_TI_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TI_THRESHOLD__Loc == GUID_NWF_TI_THRESHOLD;
    assume GUID_NWF_TI_THRESHOLD != 0;
    call {:si_unique_call 954} GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc == GUID_NWF_ERP_PBCC_OPTION_ENABLED;
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED != 0;
    call {:si_unique_call 955} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 956} DEVPKEY_PciDevice_BarTypes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BarTypes__Loc == DEVPKEY_PciDevice_BarTypes;
    assume DEVPKEY_PciDevice_BarTypes != 0;
    call {:si_unique_call 957} GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc == GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM;
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM != 0;
    call {:si_unique_call 958} GUID_POWER_CONSERVATION_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_CONSERVATION_IDLE_TIME__Loc == GUID_POWER_CONSERVATION_IDLE_TIME;
    assume GUID_POWER_CONSERVATION_IDLE_TIME != 0;
    call {:si_unique_call 959} GUID_NWF_RECV_SENSITIVITY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RECV_SENSITIVITY_LIST__Loc == GUID_NWF_RECV_SENSITIVITY_LIST;
    assume GUID_NWF_RECV_SENSITIVITY_LIST != 0;
    call {:si_unique_call 960} DEVPKEY_DeviceClass_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_UpperFilters__Loc == DEVPKEY_DeviceClass_UpperFilters;
    assume DEVPKEY_DeviceClass_UpperFilters != 0;
    call {:si_unique_call 961} DEVPKEY_DeviceClass_NoInstallClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoInstallClass__Loc == DEVPKEY_DeviceClass_NoInstallClass;
    assume DEVPKEY_DeviceClass_NoInstallClass != 0;
    call {:si_unique_call 962} GUID_NWF_RANDOM_TABLE_FLAG__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FLAG__Loc == GUID_NWF_RANDOM_TABLE_FLAG;
    assume GUID_NWF_RANDOM_TABLE_FLAG != 0;
    call {:si_unique_call 963} DEVPKEY_Device_DeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DeviceDesc__Loc == DEVPKEY_Device_DeviceDesc;
    assume DEVPKEY_Device_DeviceDesc != 0;
    call {:si_unique_call 964} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 965} DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Mask;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask != 0;
    call {:si_unique_call 966} GUID_NWF_RF_USAGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RF_USAGE__Loc == GUID_NWF_RF_USAGE;
    assume GUID_NWF_RF_USAGE != 0;
    call {:si_unique_call 967} DEVPKEY_DeviceContainer_IsEncrypted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsEncrypted__Loc == DEVPKEY_DeviceContainer_IsEncrypted;
    assume DEVPKEY_DeviceContainer_IsEncrypted != 0;
    call {:si_unique_call 968} DEVPKEY_Device_LastArrivalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastArrivalDate__Loc == DEVPKEY_Device_LastArrivalDate;
    assume DEVPKEY_Device_LastArrivalDate != 0;
    call {:si_unique_call 969} GUID_NWF_RSSI_RANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RSSI_RANGE__Loc == GUID_NWF_RSSI_RANGE;
    assume GUID_NWF_RSSI_RANGE != 0;
    call {:si_unique_call 970} GUID_NWF_CURRENT_PHY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_ID__Loc == GUID_NWF_CURRENT_PHY_ID;
    assume GUID_NWF_CURRENT_PHY_ID != 0;
    call {:si_unique_call 971} GUID_NWF_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_JOIN_REQUEST__Loc == GUID_NWF_JOIN_REQUEST;
    assume GUID_NWF_JOIN_REQUEST != 0;
    call {:si_unique_call 972} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 973} DEVPKEY_Device_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Characteristics__Loc == DEVPKEY_Device_Characteristics;
    assume DEVPKEY_Device_Characteristics != 0;
    call {:si_unique_call 974} DEVPKEY_DrvPkg_DetailedDescription__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DetailedDescription__Loc == DEVPKEY_DrvPkg_DetailedDescription;
    assume DEVPKEY_DrvPkg_DetailedDescription != 0;
    call {:si_unique_call 975} DEVPKEY_DeviceContainer_DeviceDescription2__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription2__Loc == DEVPKEY_DeviceContainer_DeviceDescription2;
    assume DEVPKEY_DeviceContainer_DeviceDescription2 != 0;
    call {:si_unique_call 976} DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Desc;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc != 0;
    call {:si_unique_call 977} DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc == DEVPKEY_PciRootBus_CurrentSpeedAndMode;
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode != 0;
    call {:si_unique_call 978} GUID_NWF_RTS_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RTS_THRESHOLD__Loc == GUID_NWF_RTS_THRESHOLD;
    assume GUID_NWF_RTS_THRESHOLD != 0;
    call {:si_unique_call 979} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 980} DEVPKEY_DeviceClass_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Icon__Loc == DEVPKEY_DeviceClass_Icon;
    assume DEVPKEY_DeviceClass_Icon != 0;
    call {:si_unique_call 981} DEVPKEY_DeviceInterfaceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_Name__Loc == DEVPKEY_DeviceInterfaceClass_Name;
    assume DEVPKEY_DeviceInterfaceClass_Name != 0;
    call {:si_unique_call 982} GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc == GUID_NWF_PRIVACY_EXEMPTION_LIST;
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST != 0;
    call {:si_unique_call 983} DEVPKEY_Device_InstanceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstanceId__Loc == DEVPKEY_Device_InstanceId;
    assume DEVPKEY_Device_InstanceId != 0;
    call {:si_unique_call 984} GUID_NWF_SUPPORTED_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_RX_ANTENNA__Loc == GUID_NWF_SUPPORTED_RX_ANTENNA;
    assume GUID_NWF_SUPPORTED_RX_ANTENNA != 0;
    call {:si_unique_call 985} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 986} DEVPKEY_Device_LastRemovalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastRemovalDate__Loc == DEVPKEY_Device_LastRemovalDate;
    assume DEVPKEY_Device_LastRemovalDate != 0;
    call {:si_unique_call 987} DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc == DEVPKEY_DeviceContainer_RequiresPairingElevation;
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation != 0;
    call {:si_unique_call 988} GUID_NWF_POWER_MGMT_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_MODE__Loc == GUID_NWF_POWER_MGMT_MODE;
    assume GUID_NWF_POWER_MGMT_MODE != 0;
    call {:si_unique_call 989} GUID_NWF_ED_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ED_THRESHOLD__Loc == GUID_NWF_ED_THRESHOLD;
    assume GUID_NWF_ED_THRESHOLD != 0;
    call {:si_unique_call 990} DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc == DEVPKEY_DeviceContainer_RequiresUninstallElevation;
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation != 0;
    call {:si_unique_call 991} GUID_NWF_OPERATION_MODE_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATION_MODE_CAPABILITY__Loc == GUID_NWF_OPERATION_MODE_CAPABILITY;
    assume GUID_NWF_OPERATION_MODE_CAPABILITY != 0;
    call {:si_unique_call 992} DEVPKEY_Device_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Manufacturer__Loc == DEVPKEY_Device_Manufacturer;
    assume DEVPKEY_Device_Manufacturer != 0;
    call {:si_unique_call 993} DEVPKEY_Device_DriverLogoLevel__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverLogoLevel__Loc == DEVPKEY_Device_DriverLogoLevel;
    assume DEVPKEY_Device_DriverLogoLevel != 0;
    call {:si_unique_call 994} DEVPKEY_DeviceContainer_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Address__Loc == DEVPKEY_DeviceContainer_Address;
    assume DEVPKEY_DeviceContainer_Address != 0;
    call {:si_unique_call 995} DEVPKEY_DeviceContainer_IsAuthenticated__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsAuthenticated__Loc == DEVPKEY_DeviceContainer_IsAuthenticated;
    assume DEVPKEY_DeviceContainer_IsAuthenticated != 0;
    call {:si_unique_call 996} DEVPKEY_PciDevice_SubClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SubClass__Loc == DEVPKEY_PciDevice_SubClass;
    assume DEVPKEY_PciDevice_SubClass != 0;
    call {:si_unique_call 997} GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 998} DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 999} GUID_NWF_PERMANENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PERMANENT_ADDRESS__Loc == GUID_NWF_PERMANENT_ADDRESS;
    assume GUID_NWF_PERMANENT_ADDRESS != 0;
    call {:si_unique_call 1000} DEVPKEY_Device_ConfigurationId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigurationId__Loc == DEVPKEY_Device_ConfigurationId;
    assume DEVPKEY_Device_ConfigurationId != 0;
    call {:si_unique_call 1001} GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc == GUID_NWF_CURRENT_TX_POWER_LEVEL;
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL != 0;
    call {:si_unique_call 1002} GUID_DEVINTERFACE_PCIDRV__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PCIDRV__Loc == GUID_DEVINTERFACE_PCIDRV;
    assume GUID_DEVINTERFACE_PCIDRV != 0;
    call {:si_unique_call 1003} DEVPKEY_Device_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HasProblem__Loc == DEVPKEY_Device_HasProblem;
    assume DEVPKEY_Device_HasProblem != 0;
    call {:si_unique_call 1004} DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc == DEVPKEY_DeviceContainer_Category_Desc_Plural;
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural != 0;
    call {:si_unique_call 1005} GUID_NWF_MEDIA_STREAMING_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIA_STREAMING_ENABLED__Loc == GUID_NWF_MEDIA_STREAMING_ENABLED;
    assume GUID_NWF_MEDIA_STREAMING_ENABLED != 0;
    call {:si_unique_call 1006} DEVPKEY_PciDevice_AriSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AriSupport__Loc == DEVPKEY_PciDevice_AriSupport;
    assume DEVPKEY_PciDevice_AriSupport != 0;
    call {:si_unique_call 1007} GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MAX;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX != 0;
    call {:si_unique_call 1008} GUID_NWF_PMKID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PMKID_LIST__Loc == GUID_NWF_PMKID_LIST;
    assume GUID_NWF_PMKID_LIST != 0;
    call {:si_unique_call 1009} DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc == DEVPKEY_PciRootBus_DeviceIDMessagingCapable;
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable != 0;
    call {:si_unique_call 1010} DEVPKEY_Device_PhysicalDeviceLocation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PhysicalDeviceLocation__Loc == DEVPKEY_Device_PhysicalDeviceLocation;
    assume DEVPKEY_Device_PhysicalDeviceLocation != 0;
    call {:si_unique_call 1011} DEVPKEY_DeviceContainer_Version__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Version__Loc == DEVPKEY_DeviceContainer_Version;
    assume DEVPKEY_DeviceContainer_Version != 0;
    call {:si_unique_call 1012} GUID_NWF_BEACON_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_BEACON_PERIOD__Loc == GUID_NWF_BEACON_PERIOD;
    assume GUID_NWF_BEACON_PERIOD != 0;
    call {:si_unique_call 1013} GUID_NWF_DESIRED_SSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_SSID_LIST__Loc == GUID_NWF_DESIRED_SSID_LIST;
    assume GUID_NWF_DESIRED_SSID_LIST != 0;
    call {:si_unique_call 1014} DEVPKEY_PciRootBus_ASPMSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ASPMSupport__Loc == DEVPKEY_PciRootBus_ASPMSupport;
    assume DEVPKEY_PciRootBus_ASPMSupport != 0;
    call {:si_unique_call 1015} GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc == GUID_NWF_CURRENT_OFFLOAD_CAPABILITY;
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1016} DEVPKEY_Device_PostInstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PostInstallInProgress__Loc == DEVPKEY_Device_PostInstallInProgress;
    assume DEVPKEY_Device_PostInstallInProgress != 0;
    call {:si_unique_call 1017} GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1018} DEVPKEY_Device_Driver__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Driver__Loc == DEVPKEY_Device_Driver;
    assume DEVPKEY_Device_Driver != 0;
    call {:si_unique_call 1019} DEVPKEY_PciDevice_CurrentPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentPayloadSize__Loc == DEVPKEY_PciDevice_CurrentPayloadSize;
    assume DEVPKEY_PciDevice_CurrentPayloadSize != 0;
    call {:si_unique_call 1020} GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc == GUID_NWF_DSSS_OFDM_OPTION_ENABLED;
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED != 0;
    call {:si_unique_call 1021} GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc == GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST;
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST != 0;
    call {:si_unique_call 1022} DEVPKEY_Device_InstallState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallState__Loc == DEVPKEY_Device_InstallState;
    assume DEVPKEY_Device_InstallState != 0;
    call {:si_unique_call 1023} GUID_NWF_MAX_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_DWELL_TIME__Loc == GUID_NWF_MAX_DWELL_TIME;
    assume GUID_NWF_MAX_DWELL_TIME != 0;
    call {:si_unique_call 1024} GUID_NWF_WPA_TSC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WPA_TSC__Loc == GUID_NWF_WPA_TSC;
    assume GUID_NWF_WPA_TSC != 0;
    call {:si_unique_call 1025} GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1026} GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1027} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 1028} DEVPKEY_PciDevice_Label_String__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_String__Loc == DEVPKEY_PciDevice_Label_String;
    assume DEVPKEY_PciDevice_Label_String != 0;
    call {:si_unique_call 1029} GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc == GUID_NWF_NUMBER_OF_HOPPING_SETS;
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS != 0;
    call {:si_unique_call 1030} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 1031} DEVPKEY_Device_FirmwareDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareDate__Loc == DEVPKEY_Device_FirmwareDate;
    assume DEVPKEY_Device_FirmwareDate != 0;
    call {:si_unique_call 1032} DEVPKEY_PciDevice_SriovSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SriovSupport__Loc == DEVPKEY_PciDevice_SriovSupport;
    assume DEVPKEY_PciDevice_SriovSupport != 0;
    call {:si_unique_call 1033} GUID_NWF_SAFE_MODE_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SAFE_MODE_ENABLED__Loc == GUID_NWF_SAFE_MODE_ENABLED;
    assume GUID_NWF_SAFE_MODE_ENABLED != 0;
    call {:si_unique_call 1034} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1035} DEVPKEY_DeviceInterface_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_FriendlyName__Loc == DEVPKEY_DeviceInterface_FriendlyName;
    assume DEVPKEY_DeviceInterface_FriendlyName != 0;
    call {:si_unique_call 1036} DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Severity;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity != 0;
    call {:si_unique_call 1037} DEVPKEY_PciDevice_S0WakeupSupported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_S0WakeupSupported__Loc == DEVPKEY_PciDevice_S0WakeupSupported;
    assume DEVPKEY_PciDevice_S0WakeupSupported != 0;
    call {:si_unique_call 1038} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 1039} DEVPKEY_PciDevice_InterruptSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptSupport__Loc == DEVPKEY_PciDevice_InterruptSupport;
    assume DEVPKEY_PciDevice_InterruptSupport != 0;
    call {:si_unique_call 1040} DEVPKEY_PciDevice_Label_Id__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_Id__Loc == DEVPKEY_PciDevice_Label_Id;
    assume DEVPKEY_PciDevice_Label_Id != 0;
    call {:si_unique_call 1041} DEVPKEY_Device_CompatibleIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_CompatibleIds__Loc == DEVPKEY_Device_CompatibleIds;
    assume DEVPKEY_Device_CompatibleIds != 0;
    call {:si_unique_call 1042} DEVPKEY_Device_ReportedDeviceIdsHash__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ReportedDeviceIdsHash__Loc == DEVPKEY_Device_ReportedDeviceIdsHash;
    assume DEVPKEY_Device_ReportedDeviceIdsHash != 0;
    call {:si_unique_call 1043} DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc == DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport;
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport != 0;
    call {:si_unique_call 1044} GUID_NWF_CURRENT_CHANNEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL__Loc == GUID_NWF_CURRENT_CHANNEL;
    assume GUID_NWF_CURRENT_CHANNEL != 0;
    call {:si_unique_call 1045} GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1046} DEVPKEY_Device_DriverPropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverPropPageProvider__Loc == DEVPKEY_Device_DriverPropPageProvider;
    assume DEVPKEY_Device_DriverPropPageProvider != 0;
    call {:si_unique_call 1047} DEVPKEY_DeviceContainer_UnpairUninstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_UnpairUninstall__Loc == DEVPKEY_DeviceContainer_UnpairUninstall;
    assume DEVPKEY_DeviceContainer_UnpairUninstall != 0;
    call {:si_unique_call 1048} DEVPKEY_PciDevice_CurrentLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkSpeed__Loc == DEVPKEY_PciDevice_CurrentLinkSpeed;
    assume DEVPKEY_PciDevice_CurrentLinkSpeed != 0;
    call {:si_unique_call 1049} GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc == GUID_NWF_NIC_SPECIFIC_EXTENSION;
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION != 0;
    call {:si_unique_call 1050} DEVPKEY_Device_BiosDeviceName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BiosDeviceName__Loc == DEVPKEY_Device_BiosDeviceName;
    assume DEVPKEY_Device_BiosDeviceName != 0;
    call {:si_unique_call 1051} GUID_NWF_CFP_MAX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_MAX_DURATION__Loc == GUID_NWF_CFP_MAX_DURATION;
    assume GUID_NWF_CFP_MAX_DURATION != 0;
    call {:si_unique_call 1052} GUID_NWF_HOPPING_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOPPING_PATTERN__Loc == GUID_NWF_HOPPING_PATTERN;
    assume GUID_NWF_HOPPING_PATTERN != 0;
    call {:si_unique_call 1053} GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc == GUID_NWF_CURRENT_CHANNEL_NUMBER;
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER != 0;
    call {:si_unique_call 1054} GUID_NWF_DISCONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DISCONNECT_REQUEST__Loc == GUID_NWF_DISCONNECT_REQUEST;
    assume GUID_NWF_DISCONNECT_REQUEST != 0;
    call {:si_unique_call 1055} GUID_NWF_CURRENT_PACKET_FILTER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PACKET_FILTER__Loc == GUID_NWF_CURRENT_PACKET_FILTER;
    assume GUID_NWF_CURRENT_PACKET_FILTER != 0;
    call {:si_unique_call 1056} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1057} DEVPKEY_Device_PowerRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerRelations__Loc == DEVPKEY_Device_PowerRelations;
    assume DEVPKEY_Device_PowerRelations != 0;
    call {:si_unique_call 1058} DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer != 0;
    call {:si_unique_call 1059} GUID_NWF_SUPPORTED_PHY_TYPES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_PHY_TYPES__Loc == GUID_NWF_SUPPORTED_PHY_TYPES;
    assume GUID_NWF_SUPPORTED_PHY_TYPES != 0;
    call {:si_unique_call 1060} GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc == GUID_NWF_HOP_ALGORITHM_ADOPTED;
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED != 0;
    call {:si_unique_call 1061} DEVPKEY_DrvPkg_BrandingIcon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_BrandingIcon__Loc == DEVPKEY_DrvPkg_BrandingIcon;
    assume DEVPKEY_DrvPkg_BrandingIcon != 0;
    call {:si_unique_call 1062} DEVPKEY_DeviceClass_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Characteristics__Loc == DEVPKEY_DeviceClass_Characteristics;
    assume DEVPKEY_DeviceClass_Characteristics != 0;
    call {:si_unique_call 1063} GUID_NWF_SCAN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SCAN_REQUEST__Loc == GUID_NWF_SCAN_REQUEST;
    assume GUID_NWF_SCAN_REQUEST != 0;
    call {:si_unique_call 1064} GUID_NWF_DESIRED_BSS_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSS_TYPE__Loc == GUID_NWF_DESIRED_BSS_TYPE;
    assume GUID_NWF_DESIRED_BSS_TYPE != 0;
    call {:si_unique_call 1065} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 1066} DEVPKEY_Device_MatchingDeviceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_MatchingDeviceId__Loc == DEVPKEY_Device_MatchingDeviceId;
    assume DEVPKEY_Device_MatchingDeviceId != 0;
    call {:si_unique_call 1067} GUID_NWF_EXCLUDE_UNENCRYPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDE_UNENCRYPTED__Loc == GUID_NWF_EXCLUDE_UNENCRYPTED;
    assume GUID_NWF_EXCLUDE_UNENCRYPTED != 0;
    call {:si_unique_call 1068} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 1069} GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc == GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST;
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST != 0;
    call {:si_unique_call 1070} DEVPKEY_Device_PDOName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PDOName__Loc == DEVPKEY_Device_PDOName;
    assume DEVPKEY_Device_PDOName != 0;
    call {:si_unique_call 1071} DEVPKEY_Device_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Address__Loc == DEVPKEY_Device_Address;
    assume DEVPKEY_Device_Address != 0;
    call {:si_unique_call 1072} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1073} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1074} DEVPKEY_DeviceClass_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Exclusive__Loc == DEVPKEY_DeviceClass_Exclusive;
    assume DEVPKEY_DeviceClass_Exclusive != 0;
    call {:si_unique_call 1075} DEVPKEY_PciDevice_Correctable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Correctable_Error_Mask__Loc == DEVPKEY_PciDevice_Correctable_Error_Mask;
    assume DEVPKEY_PciDevice_Correctable_Error_Mask != 0;
    call {:si_unique_call 1076} DEVPKEY_DeviceContainer_DeviceDescription1__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription1__Loc == DEVPKEY_DeviceContainer_DeviceDescription1;
    assume DEVPKEY_DeviceContainer_DeviceDescription1 != 0;
    call {:si_unique_call 1077} GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED != 0;
    call {:si_unique_call 1078} DEVPKEY_DeviceContainer_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Manufacturer__Loc == DEVPKEY_DeviceContainer_Manufacturer;
    assume DEVPKEY_DeviceContainer_Manufacturer != 0;
    call {:si_unique_call 1079} DEVPKEY_DeviceClass_NoUseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoUseClass__Loc == DEVPKEY_DeviceClass_NoUseClass;
    assume DEVPKEY_DeviceClass_NoUseClass != 0;
    call {:si_unique_call 1080} GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc == GUID_NWF_SUPPORTED_DATA_RATES_VALUE;
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE != 0;
    call {:si_unique_call 1081} GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc == GUID_NWF_CHANNEL_AGILITY_ENABLED;
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED != 0;
    call {:si_unique_call 1082} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1083} DEVPKEY_PciDevice_MaxLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkWidth__Loc == DEVPKEY_PciDevice_MaxLinkWidth;
    assume DEVPKEY_PciDevice_MaxLinkWidth != 0;
    call {:si_unique_call 1084} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1085} DEVPKEY_Device_DevNodeStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevNodeStatus__Loc == DEVPKEY_Device_DevNodeStatus;
    assume DEVPKEY_Device_DevNodeStatus != 0;
    call {:si_unique_call 1086} GUID_NWF_WME_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_ENABLED__Loc == GUID_NWF_WME_ENABLED;
    assume GUID_NWF_WME_ENABLED != 0;
    call {:si_unique_call 1087} DEVPKEY_Device_DriverProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProvider__Loc == DEVPKEY_Device_DriverProvider;
    assume DEVPKEY_Device_DriverProvider != 0;
    call {:si_unique_call 1088} DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Icon;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon != 0;
    call {:si_unique_call 1089} DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc == DEVPKEY_PciDevice_CurrentSpeedAndMode;
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode != 0;
    call {:si_unique_call 1090} DEVPKEY_PciDevice_AERCapabilityPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AERCapabilityPresent__Loc == DEVPKEY_PciDevice_AERCapabilityPresent;
    assume DEVPKEY_PciDevice_AERCapabilityPresent != 0;
    call {:si_unique_call 1091} GUID_NWF_WME_AC_PARAMETERS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_AC_PARAMETERS__Loc == GUID_NWF_WME_AC_PARAMETERS;
    assume GUID_NWF_WME_AC_PARAMETERS != 0;
    call {:si_unique_call 1092} DEVPKEY_Device_ModelId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ModelId__Loc == DEVPKEY_Device_ModelId;
    assume DEVPKEY_Device_ModelId != 0;
    call {:si_unique_call 1093} GUID_NWF_AP_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AP_JOIN_REQUEST__Loc == GUID_NWF_AP_JOIN_REQUEST;
    assume GUID_NWF_AP_JOIN_REQUEST != 0;
    call {:si_unique_call 1094} DEVPKEY_DeviceContainer_PrimaryCategory__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrimaryCategory__Loc == DEVPKEY_DeviceContainer_PrimaryCategory;
    assume DEVPKEY_DeviceContainer_PrimaryCategory != 0;
    call {:si_unique_call 1095} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1096} DEVPKEY_Device_Children__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Children__Loc == DEVPKEY_Device_Children;
    assume DEVPKEY_Device_Children != 0;
    call {:si_unique_call 1097} DEVPKEY_Device_Stack__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Stack__Loc == DEVPKEY_Device_Stack;
    assume DEVPKEY_Device_Stack != 0;
    call {:si_unique_call 1098} DEVPKEY_DeviceContainer_IsLocalMachine__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsLocalMachine__Loc == DEVPKEY_DeviceContainer_IsLocalMachine;
    assume DEVPKEY_DeviceContainer_IsLocalMachine != 0;
    call {:si_unique_call 1099} GUID_NWF_MPDU_MAX_LENGTH__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MPDU_MAX_LENGTH__Loc == GUID_NWF_MPDU_MAX_LENGTH;
    assume GUID_NWF_MPDU_MAX_LENGTH != 0;
    call {:si_unique_call 1100} GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc == GUID_NWF_CURRENT_OPTIONAL_CAPABILITY;
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1101} DEVPKEY_Device_DriverDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDate__Loc == DEVPKEY_Device_DriverDate;
    assume DEVPKEY_Device_DriverDate != 0;
    call {:si_unique_call 1102} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 1103} GUID_NWF_STATION_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATION_ID__Loc == GUID_NWF_STATION_ID;
    assume GUID_NWF_STATION_ID != 0;
    call {:si_unique_call 1104} GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc == GUID_NWF_REG_DOMAINS_SUPPORT_VALUE;
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE != 0;
    call {:si_unique_call 1105} DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect != 0;
    call {:si_unique_call 1106} GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc == GUID_NWF_MEDIUM_OCCUPANCY_LIMIT;
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT != 0;
    call {:si_unique_call 1107} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 1108} DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc == DEVPKEY_DeviceContainer_DeviceFunctionSubRank;
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank != 0;
    call {:si_unique_call 1109} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 1110} DEVPKEY_Device_DriverDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDesc__Loc == DEVPKEY_Device_DriverDesc;
    assume DEVPKEY_Device_DriverDesc != 0;
    call {:si_unique_call 1111} GUID_NWF_HOP_MODULUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_MODULUS__Loc == GUID_NWF_HOP_MODULUS;
    assume GUID_NWF_HOP_MODULUS != 0;
    call {:si_unique_call 1112} DEVPKEY_DeviceClass_NoDisplayClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoDisplayClass__Loc == DEVPKEY_DeviceClass_NoDisplayClass;
    assume DEVPKEY_DeviceClass_NoDisplayClass != 0;
    call {:si_unique_call 1113} GUID_NWF_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OFFLOAD_CAPABILITY__Loc == GUID_NWF_OFFLOAD_CAPABILITY;
    assume GUID_NWF_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1114} GUID_NWF_SUPPORTED_POWER_LEVELS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_POWER_LEVELS__Loc == GUID_NWF_SUPPORTED_POWER_LEVELS;
    assume GUID_NWF_SUPPORTED_POWER_LEVELS != 0;
    call {:si_unique_call 1115} GUID_NWF_DIVERSITY_SELECTION_RX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SELECTION_RX__Loc == GUID_NWF_DIVERSITY_SELECTION_RX;
    assume GUID_NWF_DIVERSITY_SELECTION_RX != 0;
    call {:si_unique_call 1116} GUID_NWF_WME_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_IMPLEMENTED__Loc == GUID_NWF_WME_IMPLEMENTED;
    assume GUID_NWF_WME_IMPLEMENTED != 0;
    call {:si_unique_call 1117} DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc == DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected;
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected != 0;
    call {:si_unique_call 1118} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 1119} DEVPKEY_Device_BusNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusNumber__Loc == DEVPKEY_Device_BusNumber;
    assume DEVPKEY_Device_BusNumber != 0;
    call {:si_unique_call 1120} DEVPKEY_Device_PowerData__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerData__Loc == DEVPKEY_Device_PowerData;
    assume DEVPKEY_Device_PowerData != 0;
    call {:si_unique_call 1121} DEVPKEY_Device_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigFlags__Loc == DEVPKEY_Device_ConfigFlags;
    assume DEVPKEY_Device_ConfigFlags != 0;
    call {:si_unique_call 1122} DEVPKEY_PciDevice_MaxReadRequestSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxReadRequestSize__Loc == DEVPKEY_PciDevice_MaxReadRequestSize;
    assume DEVPKEY_PciDevice_MaxReadRequestSize != 0;
    call {:si_unique_call 1123} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 1124} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 1125} DEVPKEY_DeviceContainer_MetadataPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataPath__Loc == DEVPKEY_DeviceContainer_MetadataPath;
    assume DEVPKEY_DeviceContainer_MetadataPath != 0;
    call {:si_unique_call 1126} GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc == GUID_NWF_CIPHER_DEFAULT_KEY_ID;
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID != 0;
    call {:si_unique_call 1127} GUID_NWF_CURRENT_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_SET__Loc == GUID_NWF_CURRENT_SET;
    assume GUID_NWF_CURRENT_SET != 0;
    call {:si_unique_call 1128} GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1129} DEVPKEY_DeviceContainer_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_FriendlyName__Loc == DEVPKEY_DeviceContainer_FriendlyName;
    assume DEVPKEY_DeviceContainer_FriendlyName != 0;
    call {:si_unique_call 1130} DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc == DEVPKEY_PciRootBus_SupportedSpeedsAndModes;
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes != 0;
    call {:si_unique_call 1131} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1132} DEVPKEY_Device_PresenceNotForDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PresenceNotForDevice__Loc == DEVPKEY_Device_PresenceNotForDevice;
    assume DEVPKEY_Device_PresenceNotForDevice != 0;
    call {:si_unique_call 1133} GUID_NWF_DESIRED_BSSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSSID_LIST__Loc == GUID_NWF_DESIRED_BSSID_LIST;
    assume GUID_NWF_DESIRED_BSSID_LIST != 0;
    call {:si_unique_call 1134} GUID_NWF_ENUM_ASSOCIATION_INFO__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_ASSOCIATION_INFO__Loc == GUID_NWF_ENUM_ASSOCIATION_INFO;
    assume GUID_NWF_ENUM_ASSOCIATION_INFO != 0;
    call {:si_unique_call 1135} DEVPKEY_DeviceInterface_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ClassGuid__Loc == DEVPKEY_DeviceInterface_ClassGuid;
    assume DEVPKEY_DeviceInterface_ClassGuid != 0;
    call {:si_unique_call 1136} DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc == DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable;
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable != 0;
    call {:si_unique_call 1137} DEVPKEY_Device_FriendlyNameAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyNameAttributes__Loc == DEVPKEY_Device_FriendlyNameAttributes;
    assume DEVPKEY_Device_FriendlyNameAttributes != 0;
    call {:si_unique_call 1138} GUID_NWF_NIC_POWER_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_POWER_STATE__Loc == GUID_NWF_NIC_POWER_STATE;
    assume GUID_NWF_NIC_POWER_STATE != 0;
    call {:si_unique_call 1139} GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc == GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST;
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST != 0;
    call {:si_unique_call 1140} DEVPKEY_Device_SessionId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SessionId__Loc == DEVPKEY_Device_SessionId;
    assume DEVPKEY_Device_SessionId != 0;
    call {:si_unique_call 1141} DEVPKEY_DeviceInterface_Enabled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Enabled__Loc == DEVPKEY_DeviceInterface_Enabled;
    assume DEVPKEY_DeviceInterface_Enabled != 0;
    call {:si_unique_call 1142} DEVPKEY_DeviceInterface_Restricted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Restricted__Loc == DEVPKEY_DeviceInterface_Restricted;
    assume DEVPKEY_DeviceInterface_Restricted != 0;
    call {:si_unique_call 1143} GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc == GUID_NWF_FREQUENCY_BANDS_SUPPORTED;
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED != 0;
    call {:si_unique_call 1144} DEVPKEY_Device_TransportRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_TransportRelations__Loc == DEVPKEY_Device_TransportRelations;
    assume DEVPKEY_Device_TransportRelations != 0;
    call {:si_unique_call 1145} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 1146} DEVPKEY_NAME__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_NAME__Loc == DEVPKEY_NAME;
    assume DEVPKEY_NAME != 0;
    call {:si_unique_call 1147} DEVPKEY_Device_UINumberDescFormat__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumberDescFormat__Loc == DEVPKEY_Device_UINumberDescFormat;
    assume DEVPKEY_Device_UINumberDescFormat != 0;
    call {:si_unique_call 1148} GUID_NWF_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_OFFLOAD__Loc == GUID_NWF_WEP_OFFLOAD;
    assume GUID_NWF_WEP_OFFLOAD != 0;
    call {:si_unique_call 1149} GUID_NWF_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UPDATE_IE__Loc == GUID_NWF_UPDATE_IE;
    assume GUID_NWF_UPDATE_IE != 0;
    call {:si_unique_call 1150} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 1151} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 1152} DEVPKEY_DeviceClass_ClassCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassCoInstallers__Loc == DEVPKEY_DeviceClass_ClassCoInstallers;
    assume DEVPKEY_DeviceClass_ClassCoInstallers != 0;
    call {:si_unique_call 1153} GUID_NWF_POWER_MGMT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_REQUEST__Loc == GUID_NWF_POWER_MGMT_REQUEST;
    assume GUID_NWF_POWER_MGMT_REQUEST != 0;
    call {:si_unique_call 1154} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 1155} DEVPKEY_Device_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyName__Loc == DEVPKEY_Device_FriendlyName;
    assume DEVPKEY_Device_FriendlyName != 0;
    call {:si_unique_call 1156} DEVPKEY_Device_LocationInfo__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationInfo__Loc == DEVPKEY_Device_LocationInfo;
    assume DEVPKEY_Device_LocationInfo != 0;
    call {:si_unique_call 1157} DEVPKEY_DeviceContainer_Category_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Icon__Loc == DEVPKEY_DeviceContainer_Category_Icon;
    assume DEVPKEY_DeviceContainer_Category_Icon != 0;
    call {:si_unique_call 1158} GUID_NWF_DESIRED_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_PHY_LIST__Loc == GUID_NWF_DESIRED_PHY_LIST;
    assume GUID_NWF_DESIRED_PHY_LIST != 0;
    call {:si_unique_call 1159} GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MAX;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX != 0;
    call {:si_unique_call 1160} DEVPKEY_Device_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Exclusive__Loc == DEVPKEY_Device_Exclusive;
    assume DEVPKEY_Device_Exclusive != 0;
    call {:si_unique_call 1161} GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc == GUID_NWF_CIPHER_KEY_MAPPING_KEY;
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY != 0;
    call {:si_unique_call 1162} DEVPKEY_Device_Numa_Proximity_Domain__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Proximity_Domain__Loc == DEVPKEY_Device_Numa_Proximity_Domain;
    assume DEVPKEY_Device_Numa_Proximity_Domain != 0;
    call {:si_unique_call 1163} GUID_NWF_QOS_TX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_DURATION__Loc == GUID_NWF_QOS_TX_DURATION;
    assume GUID_NWF_QOS_TX_DURATION != 0;
    call {:si_unique_call 1164} DEVPKEY_Device_DriverProblemDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProblemDesc__Loc == DEVPKEY_Device_DriverProblemDesc;
    assume DEVPKEY_Device_DriverProblemDesc != 0;
    call {:si_unique_call 1165} DEVPKEY_DeviceContainer_IsSharedDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsSharedDevice__Loc == DEVPKEY_DeviceContainer_IsSharedDevice;
    assume DEVPKEY_DeviceContainer_IsSharedDevice != 0;
    call {:si_unique_call 1166} GUID_NWF_CURRENT_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_DWELL_TIME__Loc == GUID_NWF_CURRENT_DWELL_TIME;
    assume GUID_NWF_CURRENT_DWELL_TIME != 0;
    call {:si_unique_call 1167} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1168} DEVPKEY_PciDevice_CurrentLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkWidth__Loc == DEVPKEY_PciDevice_CurrentLinkWidth;
    assume DEVPKEY_PciDevice_CurrentLinkWidth != 0;
    call {:si_unique_call 1169} DEVPKEY_Device_UINumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumber__Loc == DEVPKEY_Device_UINumber;
    assume DEVPKEY_Device_UINumber != 0;
    call {:si_unique_call 1170} DEVPKEY_Device_ExtendedConfigurationIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ExtendedConfigurationIds__Loc == DEVPKEY_Device_ExtendedConfigurationIds;
    assume DEVPKEY_Device_ExtendedConfigurationIds != 0;
    call {:si_unique_call 1171} DEVPKEY_Device_DriverRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverRank__Loc == DEVPKEY_Device_DriverRank;
    assume DEVPKEY_Device_DriverRank != 0;
    call {:si_unique_call 1172} DEVPKEY_DeviceContainer_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsRebootRequired__Loc == DEVPKEY_DeviceContainer_IsRebootRequired;
    assume DEVPKEY_DeviceContainer_IsRebootRequired != 0;
    call {:si_unique_call 1173} DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativePMEControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl != 0;
    call {:si_unique_call 1174} GUID_NWF_PORT_STATE_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PORT_STATE_NOTIFICATION__Loc == GUID_NWF_PORT_STATE_NOTIFICATION;
    assume GUID_NWF_PORT_STATE_NOTIFICATION != 0;
    call {:si_unique_call 1175} DEVPKEY_Device_SafeRemovalRequiredOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequiredOverride__Loc == DEVPKEY_Device_SafeRemovalRequiredOverride;
    assume DEVPKEY_Device_SafeRemovalRequiredOverride != 0;
    call {:si_unique_call 1176} DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl != 0;
    call {:si_unique_call 1177} DEVPKEY_PciDevice_DeviceType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_DeviceType__Loc == DEVPKEY_PciDevice_DeviceType;
    assume DEVPKEY_PciDevice_DeviceType != 0;
    call {:si_unique_call 1178} GUID_NWF_QOS_TX_MEDIUM_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_MEDIUM_TIME__Loc == GUID_NWF_QOS_TX_MEDIUM_TIME;
    assume GUID_NWF_QOS_TX_MEDIUM_TIME != 0;
    call {:si_unique_call 1179} GUID_NWF_DIVERSITY_SUPPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SUPPORT__Loc == GUID_NWF_DIVERSITY_SUPPORT;
    assume GUID_NWF_DIVERSITY_SUPPORT != 0;
    call {:si_unique_call 1180} GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1181} DEVPKEY_Device_DriverInfSection__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSection__Loc == DEVPKEY_Device_DriverInfSection;
    assume DEVPKEY_Device_DriverInfSection != 0;
    call {:si_unique_call 1182} DEVPKEY_DeviceClass_PropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_PropPageProvider__Loc == DEVPKEY_DeviceClass_PropPageProvider;
    assume DEVPKEY_DeviceClass_PropPageProvider != 0;
    call {:si_unique_call 1183} GUID_NWF_TEMP_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TEMP_TYPE__Loc == GUID_NWF_TEMP_TYPE;
    assume GUID_NWF_TEMP_TYPE != 0;
    call {:si_unique_call 1184} DEVPKEY_Device_Class__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Class__Loc == DEVPKEY_Device_Class;
    assume DEVPKEY_Device_Class != 0;
    call {:si_unique_call 1185} DEVPKEY_Device_NoConnectSound__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_NoConnectSound__Loc == DEVPKEY_Device_NoConnectSound;
    assume DEVPKEY_Device_NoConnectSound != 0;
    call {:si_unique_call 1186} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1187} DEVPKEY_DeviceClass_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DevType__Loc == DEVPKEY_DeviceClass_DevType;
    assume DEVPKEY_DeviceClass_DevType != 0;
    call {:si_unique_call 1188} GUID_NWF_CURRENT_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PATTERN__Loc == GUID_NWF_CURRENT_PATTERN;
    assume GUID_NWF_CURRENT_PATTERN != 0;
    call {:si_unique_call 1189} DEVPKEY_Device_ManufacturerAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ManufacturerAttributes__Loc == DEVPKEY_Device_ManufacturerAttributes;
    assume DEVPKEY_Device_ManufacturerAttributes != 0;
    call {:si_unique_call 1190} GUID_NWF_ENUM_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_BSS_LIST__Loc == GUID_NWF_ENUM_BSS_LIST;
    assume GUID_NWF_ENUM_BSS_LIST != 0;
    call {:si_unique_call 1191} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 1192} DEVPKEY_Device_Reported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Reported__Loc == DEVPKEY_Device_Reported;
    assume DEVPKEY_Device_Reported != 0;
    call {:si_unique_call 1193} DEVPKEY_PciRootBus_NativePciExpressControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_NativePciExpressControl__Loc == DEVPKEY_PciRootBus_NativePciExpressControl;
    assume DEVPKEY_PciRootBus_NativePciExpressControl != 0;
    call {:si_unique_call 1194} GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc == GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME;
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME != 0;
    call {:si_unique_call 1195} DEVPKEY_DeviceContainer_IsNetworkDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNetworkDevice__Loc == DEVPKEY_DeviceContainer_IsNetworkDevice;
    assume DEVPKEY_DeviceContainer_IsNetworkDevice != 0;
    call {:si_unique_call 1196} DEVPKEY_Device_ResourcePickerExceptions__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerExceptions__Loc == DEVPKEY_Device_ResourcePickerExceptions;
    assume DEVPKEY_Device_ResourcePickerExceptions != 0;
    call {:si_unique_call 1197} GUID_NWF_OPERATIONAL_RATE_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATIONAL_RATE_SET__Loc == GUID_NWF_OPERATIONAL_RATE_SET;
    assume GUID_NWF_OPERATIONAL_RATE_SET != 0;
    call {:si_unique_call 1198} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 1199} DEVPKEY_Device_RemovalPolicyDefault__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyDefault__Loc == DEVPKEY_Device_RemovalPolicyDefault;
    assume DEVPKEY_Device_RemovalPolicyDefault != 0;
    call {:si_unique_call 1200} DEVPKEY_Device_ProblemStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemStatus__Loc == DEVPKEY_Device_ProblemStatus;
    assume DEVPKEY_Device_ProblemStatus != 0;
    call {:si_unique_call 1201} GUID_NWF_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_UPLOAD__Loc == GUID_NWF_WEP_UPLOAD;
    assume GUID_NWF_WEP_UPLOAD != 0;
    call {:si_unique_call 1202} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 1203} DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc == DEVPKEY_DeviceContainer_IsNotInterestingForDisplay;
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay != 0;
    call {:si_unique_call 1204} GUID_NWF_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_MODE_SUPPORTED__Loc == GUID_NWF_CCA_MODE_SUPPORTED;
    assume GUID_NWF_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1205} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 1206} DEVPKEY_Device_EjectionRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EjectionRelations__Loc == DEVPKEY_Device_EjectionRelations;
    assume DEVPKEY_Device_EjectionRelations != 0;
    call {:si_unique_call 1207} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 1208} DEVPKEY_PciDevice_MaxLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkSpeed__Loc == DEVPKEY_PciDevice_MaxLinkSpeed;
    assume DEVPKEY_PciDevice_MaxLinkSpeed != 0;
    call {:si_unique_call 1209} DEVPKEY_PciDevice_FirmwareErrorHandling__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_FirmwareErrorHandling__Loc == DEVPKEY_PciDevice_FirmwareErrorHandling;
    assume DEVPKEY_PciDevice_FirmwareErrorHandling != 0;
    call {:si_unique_call 1210} GUID_NWF_CURRENT_OPERATION_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPERATION_MODE__Loc == GUID_NWF_CURRENT_OPERATION_MODE;
    assume GUID_NWF_CURRENT_OPERATION_MODE != 0;
    call {:si_unique_call 1211} GUID_NWF_STATISTICS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATISTICS__Loc == GUID_NWF_STATISTICS;
    assume GUID_NWF_STATISTICS != 0;
    call {:si_unique_call 1212} DEVPKEY_Device_IsAssociateableByUserAction__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsAssociateableByUserAction__Loc == DEVPKEY_Device_IsAssociateableByUserAction;
    assume DEVPKEY_Device_IsAssociateableByUserAction != 0;
    call {:si_unique_call 1213} DEVPKEY_DrvPkg_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Icon__Loc == DEVPKEY_DrvPkg_Icon;
    assume DEVPKEY_DrvPkg_Icon != 0;
    call {:si_unique_call 1214} DEVPKEY_PciDevice_ProgIf__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ProgIf__Loc == DEVPKEY_PciDevice_ProgIf;
    assume DEVPKEY_PciDevice_ProgIf != 0;
    call {:si_unique_call 1215} DEVPKEY_Device_AdditionalSoftwareRequested__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_AdditionalSoftwareRequested__Loc == DEVPKEY_Device_AdditionalSoftwareRequested;
    assume DEVPKEY_Device_AdditionalSoftwareRequested != 0;
    call {:si_unique_call 1216} GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc == GUID_NWF_CHANNEL_AGILITY_PRESENT;
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT != 0;
    call {:si_unique_call 1217} DEVPKEY_Device_LocationPaths__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationPaths__Loc == DEVPKEY_Device_LocationPaths;
    assume DEVPKEY_Device_LocationPaths != 0;
    call {:si_unique_call 1218} GUID_NWF_CURRENT_FREQUENCY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_FREQUENCY__Loc == GUID_NWF_CURRENT_FREQUENCY;
    assume GUID_NWF_CURRENT_FREQUENCY != 0;
    call {:si_unique_call 1219} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 1220} DEVPKEY_DeviceClass_SilentInstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SilentInstall__Loc == DEVPKEY_DeviceClass_SilentInstall;
    assume DEVPKEY_DeviceClass_SilentInstall != 0;
    call {:si_unique_call 1221} DEVPKEY_Device_LegacyBusType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LegacyBusType__Loc == DEVPKEY_Device_LegacyBusType;
    assume DEVPKEY_Device_LegacyBusType != 0;
    call {:si_unique_call 1222} DEVPKEY_DeviceContainer_IsDefaultDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDefaultDevice__Loc == DEVPKEY_DeviceContainer_IsDefaultDevice;
    assume DEVPKEY_DeviceContainer_IsDefaultDevice != 0;
    call {:si_unique_call 1223} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 1224} DEVPKEY_Device_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UpperFilters__Loc == DEVPKEY_Device_UpperFilters;
    assume DEVPKEY_Device_UpperFilters != 0;
    call {:si_unique_call 1225} DEVPKEY_Device_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevType__Loc == DEVPKEY_Device_DevType;
    assume DEVPKEY_Device_DevType != 0;
    call {:si_unique_call 1226} DEVPKEY_Device_DriverInfPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfPath__Loc == DEVPKEY_Device_DriverInfPath;
    assume DEVPKEY_Device_DriverInfPath != 0;
    call {:si_unique_call 1227} DEVPKEY_DeviceInterface_ReferenceString__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ReferenceString__Loc == DEVPKEY_DeviceInterface_ReferenceString;
    assume DEVPKEY_DeviceInterface_ReferenceString != 0;
    call {:si_unique_call 1228} GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MIN;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN != 0;
    call {:si_unique_call 1229} GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1230} GUID_POWER_PERFORMANCE_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_PERFORMANCE_IDLE_TIME__Loc == GUID_POWER_PERFORMANCE_IDLE_TIME;
    assume GUID_POWER_PERFORMANCE_IDLE_TIME != 0;
    call {:si_unique_call 1231} DEVPKEY_Device_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsRebootRequired__Loc == DEVPKEY_Device_IsRebootRequired;
    assume DEVPKEY_Device_IsRebootRequired != 0;
    call {:si_unique_call 1232} DEVPKEY_DeviceClass_ClassInstaller__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassInstaller__Loc == DEVPKEY_DeviceClass_ClassInstaller;
    assume DEVPKEY_DeviceClass_ClassInstaller != 0;
    call {:si_unique_call 1233} DEVPKEY_DeviceContainer_IsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsConnected__Loc == DEVPKEY_DeviceContainer_IsConnected;
    assume DEVPKEY_DeviceContainer_IsConnected != 0;
    call {:si_unique_call 1234} DEVPKEY_DeviceContainer_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Icon__Loc == DEVPKEY_DeviceContainer_Icon;
    assume DEVPKEY_DeviceContainer_Icon != 0;
    call {:si_unique_call 1235} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 1236} DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc == DEVPKEY_DeviceContainer_Category_Desc_Singular;
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular != 0;
    call {:si_unique_call 1237} DEVPKEY_Device_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SecuritySDS__Loc == DEVPKEY_Device_SecuritySDS;
    assume DEVPKEY_Device_SecuritySDS != 0;
    call {:si_unique_call 1238} DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc == DEVPKEY_DeviceClass_DHPRebalanceOptOut;
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut != 0;
    call {:si_unique_call 1239} GUID_NWF_CFP_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_PERIOD__Loc == GUID_NWF_CFP_PERIOD;
    assume GUID_NWF_CFP_PERIOD != 0;
    call {:si_unique_call 1240} GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc == GUID_NWF_EHCC_CAPABILITY_ENABLED;
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1241} DEVPKEY_Device_InstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallDate__Loc == DEVPKEY_Device_InstallDate;
    assume DEVPKEY_Device_InstallDate != 0;
    call {:si_unique_call 1242} DEVPKEY_DeviceClass_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_LowerFilters__Loc == DEVPKEY_DeviceClass_LowerFilters;
    assume DEVPKEY_DeviceClass_LowerFilters != 0;
    call {:si_unique_call 1243} DEVPKEY_DeviceContainer_MetadataChecksum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataChecksum__Loc == DEVPKEY_DeviceContainer_MetadataChecksum;
    assume DEVPKEY_DeviceContainer_MetadataChecksum != 0;
    call {:si_unique_call 1244} DEVPKEY_DeviceClass_DefaultService__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DefaultService__Loc == DEVPKEY_DeviceClass_DefaultService;
    assume DEVPKEY_DeviceClass_DefaultService != 0;
    call {:si_unique_call 1245} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 1246} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 1247} GUID_NWF_WEP_ICV_ERROR_COUNT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_ICV_ERROR_COUNT__Loc == GUID_NWF_WEP_ICV_ERROR_COUNT;
    assume GUID_NWF_WEP_ICV_ERROR_COUNT != 0;
    call {:si_unique_call 1248} DEVPKEY_DrvPkg_VendorWebSite__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_VendorWebSite__Loc == DEVPKEY_DrvPkg_VendorWebSite;
    assume DEVPKEY_DrvPkg_VendorWebSite != 0;
    call {:si_unique_call 1249} DEVPKEY_DeviceContainer_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ConfigFlags__Loc == DEVPKEY_DeviceContainer_ConfigFlags;
    assume DEVPKEY_DeviceContainer_ConfigFlags != 0;
    call {:si_unique_call 1250} DEVPKEY_PciDevice_AcsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AcsSupport__Loc == DEVPKEY_PciDevice_AcsSupport;
    assume DEVPKEY_PciDevice_AcsSupport != 0;
    call {:si_unique_call 1251} DEVPKEY_Device_RemovalRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalRelations__Loc == DEVPKEY_Device_RemovalRelations;
    assume DEVPKEY_Device_RemovalRelations != 0;
    call {:si_unique_call 1252} DEVPKEY_DrvPkg_DocumentationLink__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DocumentationLink__Loc == DEVPKEY_DrvPkg_DocumentationLink;
    assume DEVPKEY_DrvPkg_DocumentationLink != 0;
    call {:si_unique_call 1253} GUID_NWF_MULTICAST_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTICAST_LIST__Loc == GUID_NWF_MULTICAST_LIST;
    assume GUID_NWF_MULTICAST_LIST != 0;
    call {:si_unique_call 1254} GUID_NWF_DEFAULT_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_UPLOAD__Loc == GUID_NWF_DEFAULT_WEP_UPLOAD;
    assume GUID_NWF_DEFAULT_WEP_UPLOAD != 0;
    call {:si_unique_call 1255} GUID_NWF_RESET_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RESET_REQUEST__Loc == GUID_NWF_RESET_REQUEST;
    assume GUID_NWF_RESET_REQUEST != 0;
    call {:si_unique_call 1256} DEVPKEY_Device_BusTypeGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusTypeGuid__Loc == DEVPKEY_Device_BusTypeGuid;
    assume DEVPKEY_Device_BusTypeGuid != 0;
    call {:si_unique_call 1257} GUID_NWF_DTIM_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DTIM_PERIOD__Loc == GUID_NWF_DTIM_PERIOD;
    assume GUID_NWF_DTIM_PERIOD != 0;
    call {:si_unique_call 1258} GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc == GUID_NWF_RANDOM_TABLE_FIELD_NUMBER;
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER != 0;
    call {:si_unique_call 1259} GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1260} DEVPKEY_Device_ShowInUninstallUI__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ShowInUninstallUI__Loc == DEVPKEY_Device_ShowInUninstallUI;
    assume DEVPKEY_Device_ShowInUninstallUI != 0;
    call {:si_unique_call 1261} GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1262} GUID_NWF_CURRENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_ADDRESS__Loc == GUID_NWF_CURRENT_ADDRESS;
    assume GUID_NWF_CURRENT_ADDRESS != 0;
    call {:si_unique_call 1263} DEVPKEY_Device_ContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ContainerId__Loc == DEVPKEY_Device_ContainerId;
    assume DEVPKEY_Device_ContainerId != 0;
    call {:si_unique_call 1264} DEVPKEY_Device_InLocalMachineContainer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InLocalMachineContainer__Loc == DEVPKEY_Device_InLocalMachineContainer;
    assume DEVPKEY_Device_InLocalMachineContainer != 0;
    call {:si_unique_call 1265} DEVPKEY_DeviceContainer_ExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ExperienceId__Loc == DEVPKEY_DeviceContainer_ExperienceId;
    assume DEVPKEY_DeviceContainer_ExperienceId != 0;
    call {:si_unique_call 1266} GUID_NWF_CURRENT_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_RX_ANTENNA__Loc == GUID_NWF_CURRENT_RX_ANTENNA;
    assume GUID_NWF_CURRENT_RX_ANTENNA != 0;
    call {:si_unique_call 1267} GUID_NWF_CIPHER_DEFAULT_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY__Loc == GUID_NWF_CIPHER_DEFAULT_KEY;
    assume GUID_NWF_CIPHER_DEFAULT_KEY != 0;
    call {:si_unique_call 1268} DEVPKEY_Device_FirmwareRevision__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareRevision__Loc == DEVPKEY_Device_FirmwareRevision;
    assume DEVPKEY_Device_FirmwareRevision != 0;
    call {:si_unique_call 1269} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1270} GUID_NWF_SUPPORTED_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_TX_ANTENNA__Loc == GUID_NWF_SUPPORTED_TX_ANTENNA;
    assume GUID_NWF_SUPPORTED_TX_ANTENNA != 0;
    call {:si_unique_call 1271} DEVPKEY_DeviceContainer_BaselineExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_BaselineExperienceId__Loc == DEVPKEY_DeviceContainer_BaselineExperienceId;
    assume DEVPKEY_DeviceContainer_BaselineExperienceId != 0;
    call {:si_unique_call 1272} DEVPKEY_PciRootBus_SecondaryInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryInterface__Loc == DEVPKEY_PciRootBus_SecondaryInterface;
    assume DEVPKEY_PciRootBus_SecondaryInterface != 0;
    call {:si_unique_call 1273} GUID_NWF_CONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CONNECT_REQUEST__Loc == GUID_NWF_CONNECT_REQUEST;
    assume GUID_NWF_CONNECT_REQUEST != 0;
    call {:si_unique_call 1274} GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1275} GUID_NWF_EXTSTA_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXTSTA_CAPABILITY__Loc == GUID_NWF_EXTSTA_CAPABILITY;
    assume GUID_NWF_EXTSTA_CAPABILITY != 0;
    call {:si_unique_call 1276} DEVPKEY_Device_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Security__Loc == DEVPKEY_Device_Security;
    assume DEVPKEY_Device_Security != 0;
    call {:si_unique_call 1277} DEVPKEY_DeviceClass_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SecuritySDS__Loc == DEVPKEY_DeviceClass_SecuritySDS;
    assume DEVPKEY_DeviceClass_SecuritySDS != 0;
    call {:si_unique_call 1278} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 1279} DEVPKEY_Device_EnumeratorName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EnumeratorName__Loc == DEVPKEY_Device_EnumeratorName;
    assume DEVPKEY_Device_EnumeratorName != 0;
    call {:si_unique_call 1280} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 1281} DEVPKEY_DeviceClass_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Security__Loc == DEVPKEY_DeviceClass_Security;
    assume DEVPKEY_DeviceClass_Security != 0;
    call {:si_unique_call 1282} DEVPKEY_DeviceContainer_Last_Seen__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Seen__Loc == DEVPKEY_DeviceContainer_Last_Seen;
    assume DEVPKEY_DeviceContainer_Last_Seen != 0;
    call {:si_unique_call 1283} DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc == DEVPKEY_PciRootBus_ExtendedConfigAvailable;
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable != 0;
    call {:si_unique_call 1284} DEVPKEY_Device_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ClassGuid__Loc == DEVPKEY_Device_ClassGuid;
    assume DEVPKEY_Device_ClassGuid != 0;
    call {:si_unique_call 1285} DEVPKEY_Device_FirstInstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirstInstallDate__Loc == DEVPKEY_Device_FirstInstallDate;
    assume DEVPKEY_Device_FirstInstallDate != 0;
    call {:si_unique_call 1286} GUID_NWF_MAXIMUM_LIST_SIZE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAXIMUM_LIST_SIZE__Loc == GUID_NWF_MAXIMUM_LIST_SIZE;
    assume GUID_NWF_MAXIMUM_LIST_SIZE != 0;
    call {:si_unique_call 1287} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 1288} GUID_NWF_IBSS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_IBSS_PARAMS__Loc == GUID_NWF_IBSS_PARAMS;
    assume GUID_NWF_IBSS_PARAMS != 0;
    call {:si_unique_call 1289} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 1290} GUID_NWF_ATIM_WINDOW__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ATIM_WINDOW__Loc == GUID_NWF_ATIM_WINDOW;
    assume GUID_NWF_ATIM_WINDOW != 0;
    call {:si_unique_call 1291} GUID_NWF_CF_POLLABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CF_POLLABLE__Loc == GUID_NWF_CF_POLLABLE;
    assume GUID_NWF_CF_POLLABLE != 0;
    call {:si_unique_call 1292} GUID_NWF_MAC_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAC_ADDRESS__Loc == GUID_NWF_MAC_ADDRESS;
    assume GUID_NWF_MAC_ADDRESS != 0;
    call {:si_unique_call 1293} DEVPKEY_Device_BusReportedDeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusReportedDeviceDesc__Loc == DEVPKEY_Device_BusReportedDeviceDesc;
    assume DEVPKEY_Device_BusReportedDeviceDesc != 0;
    call {:si_unique_call 1294} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 1295} GUID_NWF_HOP_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_TIME__Loc == GUID_NWF_HOP_TIME;
    assume GUID_NWF_HOP_TIME != 0;
    call {:si_unique_call 1296} DEVPKEY_Device_RemovalPolicy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicy__Loc == DEVPKEY_Device_RemovalPolicy;
    assume DEVPKEY_Device_RemovalPolicy != 0;
    call {:si_unique_call 1297} DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 1298} GUID_NWF_START_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_START_REQUEST__Loc == GUID_NWF_START_REQUEST;
    assume GUID_NWF_START_REQUEST != 0;
    call {:si_unique_call 1299} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1300} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 1301} DEVPKEY_DeviceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Name__Loc == DEVPKEY_DeviceClass_Name;
    assume DEVPKEY_DeviceClass_Name != 0;
    call {:si_unique_call 1302} DEVPKEY_DeviceContainer_ModelName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelName__Loc == DEVPKEY_DeviceContainer_ModelName;
    assume DEVPKEY_DeviceContainer_ModelName != 0;
    call {:si_unique_call 1303} DEVPKEY_Device_IsPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsPresent__Loc == DEVPKEY_Device_IsPresent;
    assume DEVPKEY_Device_IsPresent != 0;
    call {:si_unique_call 1304} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 1305} DEVPKEY_Device_RemovalPolicyOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyOverride__Loc == DEVPKEY_Device_RemovalPolicyOverride;
    assume DEVPKEY_Device_RemovalPolicyOverride != 0;
    call {:si_unique_call 1306} DEVPKEY_Device_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Model__Loc == DEVPKEY_Device_Model;
    assume DEVPKEY_Device_Model != 0;
    call {:si_unique_call 1307} DEVPKEY_PciDevice_RootError_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_RootError_Reporting__Loc == DEVPKEY_PciDevice_RootError_Reporting;
    assume DEVPKEY_PciDevice_RootError_Reporting != 0;
    call {:si_unique_call 1308} GUID_NWF_SHORT_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_RETRY_LIMIT__Loc == GUID_NWF_SHORT_RETRY_LIMIT;
    assume GUID_NWF_SHORT_RETRY_LIMIT != 0;
    call {:si_unique_call 1309} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 1310} GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY != 0;
    call {:si_unique_call 1311} DEVPKEY_DeviceContainer_DiscoveryMethod__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DiscoveryMethod__Loc == DEVPKEY_DeviceContainer_DiscoveryMethod;
    assume DEVPKEY_DeviceContainer_DiscoveryMethod != 0;
    call {:si_unique_call 1312} DEVPKEY_Device_DriverInfSectionExt__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSectionExt__Loc == DEVPKEY_Device_DriverInfSectionExt;
    assume DEVPKEY_Device_DriverInfSectionExt != 0;
    call {:si_unique_call 1313} DEVPKEY_DeviceClass_ClassName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassName__Loc == DEVPKEY_DeviceClass_ClassName;
    assume DEVPKEY_DeviceClass_ClassName != 0;
    call {:si_unique_call 1314} DEVPKEY_PciRootBus_SystemMsiSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SystemMsiSupport__Loc == DEVPKEY_PciRootBus_SystemMsiSupport;
    assume DEVPKEY_PciRootBus_SystemMsiSupport != 0;
    call {:si_unique_call 1315} GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc == GUID_NWF_QOS_TX_QUEUES_SUPPORTED;
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED != 0;
    call {:si_unique_call 1316} GUID_NWF_HOP_OFFSET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_OFFSET__Loc == GUID_NWF_HOP_OFFSET;
    assume GUID_NWF_HOP_OFFSET != 0;
    call {:si_unique_call 1317} DEVPKEY_DeviceContainer_AssociationArray__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AssociationArray__Loc == DEVPKEY_DeviceContainer_AssociationArray;
    assume DEVPKEY_DeviceContainer_AssociationArray != 0;
    call {:si_unique_call 1318} DEVPKEY_PciRootBus_SecondaryBusWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryBusWidth__Loc == DEVPKEY_PciRootBus_SecondaryBusWidth;
    assume DEVPKEY_PciRootBus_SecondaryBusWidth != 0;
    call {:si_unique_call 1319} GUID_NWF_ASSOCIATION_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ASSOCIATION_PARAMS__Loc == GUID_NWF_ASSOCIATION_PARAMS;
    assume GUID_NWF_ASSOCIATION_PARAMS != 0;
    call {:si_unique_call 1320} DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_SHPCNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl != 0;
    call {:si_unique_call 1321} DEVPKEY_Device_BaseContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BaseContainerId__Loc == DEVPKEY_Device_BaseContainerId;
    assume DEVPKEY_Device_BaseContainerId != 0;
    call {:si_unique_call 1322} GUID_NWF_FLUSH_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FLUSH_BSS_LIST__Loc == GUID_NWF_FLUSH_BSS_LIST;
    assume GUID_NWF_FLUSH_BSS_LIST != 0;
    call {:si_unique_call 1323} GUID_NWF_CURRENT_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_ANTENNA__Loc == GUID_NWF_CURRENT_TX_ANTENNA;
    assume GUID_NWF_CURRENT_TX_ANTENNA != 0;
    call {:si_unique_call 1324} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 1325} DEVPKEY_Device_BusRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusRelations__Loc == DEVPKEY_Device_BusRelations;
    assume DEVPKEY_Device_BusRelations != 0;
    call {:si_unique_call 1326} GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc == GUID_NWF_HR_CCA_MODE_SUPPORTED;
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1327} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 1328} DEVPKEY_DeviceContainer_ModelNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelNumber__Loc == DEVPKEY_DeviceContainer_ModelNumber;
    assume DEVPKEY_DeviceContainer_ModelNumber != 0;
    call {:si_unique_call 1329} PCIDRV_WMI_STD_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIDRV_WMI_STD_DATA_GUID__Loc == PCIDRV_WMI_STD_DATA_GUID;
    assume PCIDRV_WMI_STD_DATA_GUID != 0;
    call {:si_unique_call 1330} DEVPKEY_DeviceContainer_Last_Connected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Connected__Loc == DEVPKEY_DeviceContainer_Last_Connected;
    assume DEVPKEY_DeviceContainer_Last_Connected != 0;
    call {:si_unique_call 1331} GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc == GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED;
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1332} DEVPKEY_PciDevice_Error_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Error_Reporting__Loc == DEVPKEY_PciDevice_Error_Reporting;
    assume DEVPKEY_PciDevice_Error_Reporting != 0;
    call {:si_unique_call 1333} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 1334} DEVPKEY_PciRootBus_MSISupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_MSISupport__Loc == DEVPKEY_PciRootBus_MSISupport;
    assume DEVPKEY_PciRootBus_MSISupport != 0;
    call {:si_unique_call 1335} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 1336} GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MIN;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN != 0;
    call {:si_unique_call 1337} DEVPKEY_Device_SignalStrength__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SignalStrength__Loc == DEVPKEY_Device_SignalStrength;
    assume DEVPKEY_Device_SignalStrength != 0;
    call {:si_unique_call 1338} DEVPKEY_Device_DebuggerSafe__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DebuggerSafe__Loc == DEVPKEY_Device_DebuggerSafe;
    assume DEVPKEY_Device_DebuggerSafe != 0;
    call {:si_unique_call 1339} DEVPKEY_Device_DriverCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverCoInstallers__Loc == DEVPKEY_Device_DriverCoInstallers;
    assume DEVPKEY_Device_DriverCoInstallers != 0;
    call {:si_unique_call 1340} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 1341} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 1342} GUID_NWF_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPTIONAL_CAPABILITY__Loc == GUID_NWF_OPTIONAL_CAPABILITY;
    assume GUID_NWF_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1343} GUID_NWF_EHCC_PRIME_RADIX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_PRIME_RADIX__Loc == GUID_NWF_EHCC_PRIME_RADIX;
    assume GUID_NWF_EHCC_PRIME_RADIX != 0;
    call {:si_unique_call 1344} GUID_NWF_CURRENT_PHY_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_TYPE__Loc == GUID_NWF_CURRENT_PHY_TYPE;
    assume GUID_NWF_CURRENT_PHY_TYPE != 0;
    call {:si_unique_call 1345} GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc == GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD;
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD != 0;
    call {:si_unique_call 1346} DEVPKEY_Device_Numa_Node__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Node__Loc == DEVPKEY_Device_Numa_Node;
    assume DEVPKEY_Device_Numa_Node != 0;
    call {:si_unique_call 1347} DEVPKEY_PciDevice_ExpressSpecVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ExpressSpecVersion__Loc == DEVPKEY_PciDevice_ExpressSpecVersion;
    assume DEVPKEY_PciDevice_ExpressSpecVersion != 0;
    call {:si_unique_call 1348} DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc == DEVPKEY_PciRootBus_PCIExpressCapabilityControl;
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl != 0;
    call {:si_unique_call 1349} GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc == GUID_NWF_DEFAULT_WEP_OFFLOAD;
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD != 0;
    call {:si_unique_call 1350} GUID_NWF_QOS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_PARAMS__Loc == GUID_NWF_QOS_PARAMS;
    assume GUID_NWF_QOS_PARAMS != 0;
    call {:si_unique_call 1351} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 1352} DEVPKEY_Device_GenericDriverInstalled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_GenericDriverInstalled__Loc == DEVPKEY_Device_GenericDriverInstalled;
    assume DEVPKEY_Device_GenericDriverInstalled != 0;
    call {:si_unique_call 1353} GUID_NWF_CURRENT_REG_DOMAIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_REG_DOMAIN__Loc == GUID_NWF_CURRENT_REG_DOMAIN;
    assume GUID_NWF_CURRENT_REG_DOMAIN != 0;
    call {:si_unique_call 1354} GUID_NWF_WME_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_UPDATE_IE__Loc == GUID_NWF_WME_UPDATE_IE;
    assume GUID_NWF_WME_UPDATE_IE != 0;
    call {:si_unique_call 1355} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1356} DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc == DEVPKEY_PciRootBus_PCISegmentGroupsSupport;
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport != 0;
    call {:si_unique_call 1357} DEVPKEY_Device_Service__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Service__Loc == DEVPKEY_Device_Service;
    assume DEVPKEY_Device_Service != 0;
    call {:si_unique_call 1358} DEVPKEY_Device_Capabilities__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Capabilities__Loc == DEVPKEY_Device_Capabilities;
    assume DEVPKEY_Device_Capabilities != 0;
    call {:si_unique_call 1359} DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc == DEVPKEY_PciRootBus_ClockPowerManagementSupport;
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport != 0;
    call {:si_unique_call 1360} GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc == GUID_NWF_UNICAST_USE_GROUP_ENABLED;
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED != 0;
    call {:si_unique_call 1361} GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1362} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 1363} DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc == DEVPKEY_DeviceInterfaceClass_DefaultInterface;
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface != 0;
    call {:si_unique_call 1364} DEVPKEY_DeviceContainer_MetadataCabinet__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataCabinet__Loc == DEVPKEY_DeviceContainer_MetadataCabinet;
    assume DEVPKEY_DeviceContainer_MetadataCabinet != 0;
    call {:si_unique_call 1365} GUID_NWF_COUNTERS_ENTRY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTERS_ENTRY__Loc == GUID_NWF_COUNTERS_ENTRY;
    assume GUID_NWF_COUNTERS_ENTRY != 0;
    call {:si_unique_call 1366} GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc == GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX;
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX != 0;
    call {:si_unique_call 1367} GUID_NWF_PHY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PHY_STATE__Loc == GUID_NWF_PHY_STATE;
    assume GUID_NWF_PHY_STATE != 0;
    call {:si_unique_call 1368} DEVPKEY_Device_Parent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Parent__Loc == DEVPKEY_Device_Parent;
    assume DEVPKEY_Device_Parent != 0;
    call {:si_unique_call 1369} GUID_NWF_MAX_RECEIVE_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_RECEIVE_LIFETIME__Loc == GUID_NWF_MAX_RECEIVE_LIFETIME;
    assume GUID_NWF_MAX_RECEIVE_LIFETIME != 0;
    call {:si_unique_call 1370} DEVPKEY_DeviceContainer_Category__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category__Loc == DEVPKEY_DeviceContainer_Category;
    assume DEVPKEY_DeviceContainer_Category != 0;
    call {:si_unique_call 1371} DEVPKEY_PciDevice_ECRC_Errors__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ECRC_Errors__Loc == DEVPKEY_PciDevice_ECRC_Errors;
    assume DEVPKEY_PciDevice_ECRC_Errors != 0;
    call {:si_unique_call 1372} GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1373} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 1374} GUID_NWF_AUTO_CONFIG_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AUTO_CONFIG_ENABLED__Loc == GUID_NWF_AUTO_CONFIG_ENABLED;
    assume GUID_NWF_AUTO_CONFIG_ENABLED != 0;
    call {:si_unique_call 1375} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 1376} DEVPKEY_Device_DriverVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverVersion__Loc == DEVPKEY_Device_DriverVersion;
    assume DEVPKEY_Device_DriverVersion != 0;
    call {:si_unique_call 1377} GUID_NWF_CURRENT_CCA_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CCA_MODE__Loc == GUID_NWF_CURRENT_CCA_MODE;
    assume GUID_NWF_CURRENT_CCA_MODE != 0;
    call {:si_unique_call 1378} DEVPKEY_DrvPkg_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Model__Loc == DEVPKEY_DrvPkg_Model;
    assume DEVPKEY_DrvPkg_Model != 0;
    call {:si_unique_call 1379} DEVPKEY_DeviceClass_IconPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_IconPath__Loc == DEVPKEY_DeviceClass_IconPath;
    assume DEVPKEY_DeviceClass_IconPath != 0;
    call {:si_unique_call 1380} GUID_NWF_LONG_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_LONG_RETRY_LIMIT__Loc == GUID_NWF_LONG_RETRY_LIMIT;
    assume GUID_NWF_LONG_RETRY_LIMIT != 0;
    call {:si_unique_call 1381} DEVPKEY_PciDevice_InterruptMessageMaximum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptMessageMaximum__Loc == DEVPKEY_PciDevice_InterruptMessageMaximum;
    assume DEVPKEY_PciDevice_InterruptMessageMaximum != 0;
    call {:si_unique_call 1382} GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc == GUID_NWF_HIDDEN_NETWORK_ENABLED;
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED != 0;
    call {:si_unique_call 1383} DEVPKEY_Device_Legacy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Legacy__Loc == DEVPKEY_Device_Legacy;
    assume DEVPKEY_Device_Legacy != 0;
    call {:si_unique_call 1384} DEVPKEY_Device_Siblings__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Siblings__Loc == DEVPKEY_Device_Siblings;
    assume DEVPKEY_Device_Siblings != 0;
    call {:si_unique_call 1385} DEVPKEY_DeviceContainer_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_HasProblem__Loc == DEVPKEY_DeviceContainer_HasProblem;
    assume DEVPKEY_DeviceContainer_HasProblem != 0;
    call {:si_unique_call 1386} Globals__Loc := __HAVOC_malloc_or_null(12);
    assume Globals__Loc == Globals;
    assume Globals != 0;
    call {:si_unique_call 1387} GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc == GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1388} GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc == GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT != 0;
    call {:si_unique_call 1389} GUID_ALLOW_RTC_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_RTC_WAKE__Loc == GUID_ALLOW_RTC_WAKE;
    assume GUID_ALLOW_RTC_WAKE != 0;
    call {:si_unique_call 1390} GUID_BATTERY_DISCHARGE_LEVEL_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_2__Loc == GUID_BATTERY_DISCHARGE_LEVEL_2;
    assume GUID_BATTERY_DISCHARGE_LEVEL_2 != 0;
    call {:si_unique_call 1391} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1392} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1393} GUID_DISK_IDLE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_IDLE_TIMEOUT__Loc == GUID_DISK_IDLE_TIMEOUT;
    assume GUID_DISK_IDLE_TIMEOUT != 0;
    call {:si_unique_call 1394} GUID_ACDC_POWER_SOURCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACDC_POWER_SOURCE__Loc == GUID_ACDC_POWER_SOURCE;
    assume GUID_ACDC_POWER_SOURCE != 0;
    call {:si_unique_call 1395} GUID_SYSTEM_COOLING_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_COOLING_POLICY__Loc == GUID_SYSTEM_COOLING_POLICY;
    assume GUID_SYSTEM_COOLING_POLICY != 0;
    call {:si_unique_call 1396} GUID_BATTERY_DISCHARGE_LEVEL_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_3__Loc == GUID_BATTERY_DISCHARGE_LEVEL_3;
    assume GUID_BATTERY_DISCHARGE_LEVEL_3 != 0;
    call {:si_unique_call 1397} GUID_LOCK_CONSOLE_ON_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LOCK_CONSOLE_ON_WAKE__Loc == GUID_LOCK_CONSOLE_ON_WAKE;
    assume GUID_LOCK_CONSOLE_ON_WAKE != 0;
    call {:si_unique_call 1398} GUID_VIDEO_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_POWERDOWN_TIMEOUT__Loc == GUID_VIDEO_POWERDOWN_TIMEOUT;
    assume GUID_VIDEO_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1399} GUID_PROCESSOR_IDLESTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLESTATE_POLICY__Loc == GUID_PROCESSOR_IDLESTATE_POLICY;
    assume GUID_PROCESSOR_IDLESTATE_POLICY != 0;
    call {:si_unique_call 1400} GUID_UNATTEND_SLEEP_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_UNATTEND_SLEEP_TIMEOUT__Loc == GUID_UNATTEND_SLEEP_TIMEOUT;
    assume GUID_UNATTEND_SLEEP_TIMEOUT != 0;
    call {:si_unique_call 1401} PPM_THERMALCONSTRAINT_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMALCONSTRAINT_GUID__Loc == PPM_THERMALCONSTRAINT_GUID;
    assume PPM_THERMALCONSTRAINT_GUID != 0;
    call {:si_unique_call 1402} GUID_CRITICAL_POWER_TRANSITION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CRITICAL_POWER_TRANSITION__Loc == GUID_CRITICAL_POWER_TRANSITION;
    assume GUID_CRITICAL_POWER_TRANSITION != 0;
    call {:si_unique_call 1403} GUID_SLEEP_IDLE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_IDLE_THRESHOLD__Loc == GUID_SLEEP_IDLE_THRESHOLD;
    assume GUID_SLEEP_IDLE_THRESHOLD != 0;
    call {:si_unique_call 1404} GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY != 0;
    call {:si_unique_call 1405} GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc == GUID_PROCESSOR_THROTTLE_MAXIMUM;
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM != 0;
    call {:si_unique_call 1406} GUID_PROCESSOR_PERF_LATENCY_HINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT != 0;
    call {:si_unique_call 1407} GUID_STANDBY_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_STANDBY_TIMEOUT__Loc == GUID_STANDBY_TIMEOUT;
    assume GUID_STANDBY_TIMEOUT != 0;
    call {:si_unique_call 1408} GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD != 0;
    call {:si_unique_call 1409} PPM_IDLE_ACCOUNTING_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_GUID__Loc == PPM_IDLE_ACCOUNTING_GUID;
    assume PPM_IDLE_ACCOUNTING_GUID != 0;
    call {:si_unique_call 1410} GUID_TYPICAL_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TYPICAL_POWER_SAVINGS__Loc == GUID_TYPICAL_POWER_SAVINGS;
    assume GUID_TYPICAL_POWER_SAVINGS != 0;
    call {:si_unique_call 1411} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1412} GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc == GUID_PROCESSOR_SETTINGS_SUBGROUP;
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1413} GUID_BATTERY_DISCHARGE_FLAGS_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_2__Loc == GUID_BATTERY_DISCHARGE_FLAGS_2;
    assume GUID_BATTERY_DISCHARGE_FLAGS_2 != 0;
    call {:si_unique_call 1414} GUID_HIBERNATE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_TIMEOUT__Loc == GUID_HIBERNATE_TIMEOUT;
    assume GUID_HIBERNATE_TIMEOUT != 0;
    call {:si_unique_call 1415} GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME != 0;
    call {:si_unique_call 1416} GUID_BATTERY_DISCHARGE_ACTION_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_3__Loc == GUID_BATTERY_DISCHARGE_ACTION_3;
    assume GUID_BATTERY_DISCHARGE_ACTION_3 != 0;
    call {:si_unique_call 1417} GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES != 0;
    call {:si_unique_call 1418} PPM_IDLESTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATES_DATA_GUID__Loc == PPM_IDLESTATES_DATA_GUID;
    assume PPM_IDLESTATES_DATA_GUID != 0;
    call {:si_unique_call 1419} GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING != 0;
    call {:si_unique_call 1420} GUID_POWERBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERBUTTON_ACTION__Loc == GUID_POWERBUTTON_ACTION;
    assume GUID_POWERBUTTON_ACTION != 0;
    call {:si_unique_call 1421} GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc == GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY != 0;
    call {:si_unique_call 1422} GUID_AUDIO_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AUDIO_PLAYBACK__Loc == GUID_AUDIO_PLAYBACK;
    assume GUID_AUDIO_PLAYBACK != 0;
    call {:si_unique_call 1423} GUID_PROCESSOR_THROTTLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_POLICY__Loc == GUID_PROCESSOR_THROTTLE_POLICY;
    assume GUID_PROCESSOR_THROTTLE_POLICY != 0;
    call {:si_unique_call 1424} GUID_BATTERY_PERCENTAGE_REMAINING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_PERCENTAGE_REMAINING__Loc == GUID_BATTERY_PERCENTAGE_REMAINING;
    assume GUID_BATTERY_PERCENTAGE_REMAINING != 0;
    call {:si_unique_call 1425} GUID_GLOBAL_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_GLOBAL_USER_PRESENCE__Loc == GUID_GLOBAL_USER_PRESENCE;
    assume GUID_GLOBAL_USER_PRESENCE != 0;
    call {:si_unique_call 1426} GUID_BATTERY_DISCHARGE_ACTION_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_2__Loc == GUID_BATTERY_DISCHARGE_ACTION_2;
    assume GUID_BATTERY_DISCHARGE_ACTION_2 != 0;
    call {:si_unique_call 1427} GUID_APPLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_APPLAUNCH_BUTTON__Loc == GUID_APPLAUNCH_BUTTON;
    assume GUID_APPLAUNCH_BUTTON != 0;
    call {:si_unique_call 1428} GUID_PROCESSOR_ALLOW_THROTTLING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_ALLOW_THROTTLING__Loc == GUID_PROCESSOR_ALLOW_THROTTLING;
    assume GUID_PROCESSOR_ALLOW_THROTTLING != 0;
    call {:si_unique_call 1429} GUID_IDLE_RESILIENCY_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PERIOD__Loc == GUID_IDLE_RESILIENCY_PERIOD;
    assume GUID_IDLE_RESILIENCY_PERIOD != 0;
    call {:si_unique_call 1430} GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc == GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY != 0;
    call {:si_unique_call 1431} GUID_SLEEPBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEPBUTTON_ACTION__Loc == GUID_SLEEPBUTTON_ACTION;
    assume GUID_SLEEPBUTTON_ACTION != 0;
    call {:si_unique_call 1432} GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF != 0;
    call {:si_unique_call 1433} GUID_PROCESSOR_IDLE_DISABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DISABLE__Loc == GUID_PROCESSOR_IDLE_DISABLE;
    assume GUID_PROCESSOR_IDLE_DISABLE != 0;
    call {:si_unique_call 1434} GUID_CONSOLE_DISPLAY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CONSOLE_DISPLAY_STATE__Loc == GUID_CONSOLE_DISPLAY_STATE;
    assume GUID_CONSOLE_DISPLAY_STATE != 0;
    call {:si_unique_call 1435} GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc == GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP != 0;
    call {:si_unique_call 1436} GUID_BATTERY_DISCHARGE_FLAGS_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_0__Loc == GUID_BATTERY_DISCHARGE_FLAGS_0;
    assume GUID_BATTERY_DISCHARGE_FLAGS_0 != 0;
    call {:si_unique_call 1437} GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD != 0;
    call {:si_unique_call 1438} GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS != 0;
    call {:si_unique_call 1439} GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc == GUID_INTSTEER_TIME_UNPARK_TRIGGER;
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER != 0;
    call {:si_unique_call 1440} GUID_LIDSWITCH_STATE_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDSWITCH_STATE_CHANGE__Loc == GUID_LIDSWITCH_STATE_CHANGE;
    assume GUID_LIDSWITCH_STATE_CHANGE != 0;
    call {:si_unique_call 1441} GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc == GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS != 0;
    call {:si_unique_call 1442} GUID_SESSION_DISPLAY_STATUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_DISPLAY_STATUS__Loc == GUID_SESSION_DISPLAY_STATUS;
    assume GUID_SESSION_DISPLAY_STATUS != 0;
    call {:si_unique_call 1443} GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1444} GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc == GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM != 0;
    call {:si_unique_call 1445} GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc == GUID_VIDEO_ANNOYANCE_TIMEOUT;
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT != 0;
    call {:si_unique_call 1446} GUID_BATTERY_DISCHARGE_FLAGS_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_3__Loc == GUID_BATTERY_DISCHARGE_FLAGS_3;
    assume GUID_BATTERY_DISCHARGE_FLAGS_3 != 0;
    call {:si_unique_call 1447} GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES != 0;
    call {:si_unique_call 1448} GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc == GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE != 0;
    call {:si_unique_call 1449} GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1450} GUID_MIN_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MIN_POWER_SAVINGS__Loc == GUID_MIN_POWER_SAVINGS;
    assume GUID_MIN_POWER_SAVINGS != 0;
    call {:si_unique_call 1451} GUID_DEVICE_IDLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_IDLE_POLICY__Loc == GUID_DEVICE_IDLE_POLICY;
    assume GUID_DEVICE_IDLE_POLICY != 0;
    call {:si_unique_call 1452} GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc == GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT != 0;
    call {:si_unique_call 1453} GUID_SLEEP_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_SUBGROUP__Loc == GUID_SLEEP_SUBGROUP;
    assume GUID_SLEEP_SUBGROUP != 0;
    call {:si_unique_call 1454} GUID_DISK_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_SUBGROUP__Loc == GUID_DISK_SUBGROUP;
    assume GUID_DISK_SUBGROUP != 0;
    call {:si_unique_call 1455} GUID_BATTERY_DISCHARGE_LEVEL_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_1__Loc == GUID_BATTERY_DISCHARGE_LEVEL_1;
    assume GUID_BATTERY_DISCHARGE_LEVEL_1 != 0;
    call {:si_unique_call 1456} GUID_BATTERY_DISCHARGE_ACTION_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_0__Loc == GUID_BATTERY_DISCHARGE_ACTION_0;
    assume GUID_BATTERY_DISCHARGE_ACTION_0 != 0;
    call {:si_unique_call 1457} GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc == GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER != 0;
    call {:si_unique_call 1458} GUID_BATTERY_DISCHARGE_LEVEL_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_0__Loc == GUID_BATTERY_DISCHARGE_LEVEL_0;
    assume GUID_BATTERY_DISCHARGE_LEVEL_0 != 0;
    call {:si_unique_call 1459} GUID_VIDEO_DIM_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_DIM_TIMEOUT__Loc == GUID_VIDEO_DIM_TIMEOUT;
    assume GUID_VIDEO_DIM_TIMEOUT != 0;
    call {:si_unique_call 1460} PPM_THERMAL_POLICY_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMAL_POLICY_CHANGE_GUID__Loc == PPM_THERMAL_POLICY_CHANGE_GUID;
    assume PPM_THERMAL_POLICY_CHANGE_GUID != 0;
    call {:si_unique_call 1461} GUID_PROCESSOR_PERF_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_TIME_CHECK__Loc == GUID_PROCESSOR_PERF_TIME_CHECK;
    assume GUID_PROCESSOR_PERF_TIME_CHECK != 0;
    call {:si_unique_call 1462} GUID_LIDOPEN_POWERSTATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDOPEN_POWERSTATE__Loc == GUID_LIDOPEN_POWERSTATE;
    assume GUID_LIDOPEN_POWERSTATE != 0;
    call {:si_unique_call 1463} GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc == GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE != 0;
    call {:si_unique_call 1464} GUID_PROCESSOR_PERF_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_TIME__Loc == GUID_PROCESSOR_PERF_INCREASE_TIME;
    assume GUID_PROCESSOR_PERF_INCREASE_TIME != 0;
    call {:si_unique_call 1465} GUID_MONITOR_POWER_ON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MONITOR_POWER_ON__Loc == GUID_MONITOR_POWER_ON;
    assume GUID_MONITOR_POWER_ON != 0;
    call {:si_unique_call 1466} GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME != 0;
    call {:si_unique_call 1467} GUID_PROCESSOR_THROTTLE_MINIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MINIMUM__Loc == GUID_PROCESSOR_THROTTLE_MINIMUM;
    assume GUID_PROCESSOR_THROTTLE_MINIMUM != 0;
    call {:si_unique_call 1468} GUID_ALLOW_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_AWAYMODE__Loc == GUID_ALLOW_AWAYMODE;
    assume GUID_ALLOW_AWAYMODE != 0;
    call {:si_unique_call 1469} GUID_DISK_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_ADAPTIVE_POWERDOWN__Loc == GUID_DISK_ADAPTIVE_POWERDOWN;
    assume GUID_DISK_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1470} GUID_SYSTEM_BUTTON_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_BUTTON_SUBGROUP__Loc == GUID_SYSTEM_BUTTON_SUBGROUP;
    assume GUID_SYSTEM_BUTTON_SUBGROUP != 0;
    call {:si_unique_call 1471} PPM_PERFMON_PERFSTATE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFMON_PERFSTATE_GUID__Loc == PPM_PERFMON_PERFSTATE_GUID;
    assume PPM_PERFMON_PERFSTATE_GUID != 0;
    call {:si_unique_call 1472} GUID_ALLOW_SYSTEM_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_SYSTEM_REQUIRED__Loc == GUID_ALLOW_SYSTEM_REQUIRED;
    assume GUID_ALLOW_SYSTEM_REQUIRED != 0;
    call {:si_unique_call 1473} GUID_ALLOW_DISPLAY_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_DISPLAY_REQUIRED__Loc == GUID_ALLOW_DISPLAY_REQUIRED;
    assume GUID_ALLOW_DISPLAY_REQUIRED != 0;
    call {:si_unique_call 1474} PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc == PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID != 0;
    call {:si_unique_call 1475} GUID_PROCESSOR_PARKING_PERF_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_PERF_STATE__Loc == GUID_PROCESSOR_PARKING_PERF_STATE;
    assume GUID_PROCESSOR_PARKING_PERF_STATE != 0;
    call {:si_unique_call 1476} GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc == GUID_PROCESSOR_PERF_DECREASE_POLICY;
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY != 0;
    call {:si_unique_call 1477} PPM_IDLESTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATE_CHANGE_GUID__Loc == PPM_IDLESTATE_CHANGE_GUID;
    assume PPM_IDLESTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1478} GUID_ALLOW_STANDBY_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_STANDBY_STATES__Loc == GUID_ALLOW_STANDBY_STATES;
    assume GUID_ALLOW_STANDBY_STATES != 0;
    call {:si_unique_call 1479} GUID_PROCESSOR_PERFSTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERFSTATE_POLICY__Loc == GUID_PROCESSOR_PERFSTATE_POLICY;
    assume GUID_PROCESSOR_PERFSTATE_POLICY != 0;
    call {:si_unique_call 1480} GUID_BATTERY_DISCHARGE_ACTION_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_1__Loc == GUID_BATTERY_DISCHARGE_ACTION_1;
    assume GUID_BATTERY_DISCHARGE_ACTION_1 != 0;
    call {:si_unique_call 1481} GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc == GUID_PROCESSOR_PERF_INCREASE_POLICY;
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY != 0;
    call {:si_unique_call 1482} GUID_VIDEO_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_SUBGROUP__Loc == GUID_VIDEO_SUBGROUP;
    assume GUID_VIDEO_SUBGROUP != 0;
    call {:si_unique_call 1483} GUID_HIBERNATE_FASTS4_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_FASTS4_POLICY__Loc == GUID_HIBERNATE_FASTS4_POLICY;
    assume GUID_HIBERNATE_FASTS4_POLICY != 0;
    call {:si_unique_call 1484} GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS != 0;
    call {:si_unique_call 1485} GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD != 0;
    call {:si_unique_call 1486} GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1487} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1488} PPM_PERFSTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_CHANGE_GUID__Loc == PPM_PERFSTATE_CHANGE_GUID;
    assume PPM_PERFSTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1489} GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc == GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1490} GUID_USERINTERFACEBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USERINTERFACEBUTTON_ACTION__Loc == GUID_USERINTERFACEBUTTON_ACTION;
    assume GUID_USERINTERFACEBUTTON_ACTION != 0;
    call {:si_unique_call 1491} GUID_PCIEXPRESS_ASPM_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_ASPM_POLICY__Loc == GUID_PCIEXPRESS_ASPM_POLICY;
    assume GUID_PCIEXPRESS_ASPM_POLICY != 0;
    call {:si_unique_call 1492} GUID_BATTERY_DISCHARGE_FLAGS_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_1__Loc == GUID_BATTERY_DISCHARGE_FLAGS_1;
    assume GUID_BATTERY_DISCHARGE_FLAGS_1 != 0;
    call {:si_unique_call 1493} GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_INCREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY != 0;
    call {:si_unique_call 1494} GUID_INTSTEER_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_SUBGROUP__Loc == GUID_INTSTEER_SUBGROUP;
    assume GUID_INTSTEER_SUBGROUP != 0;
    call {:si_unique_call 1495} GUID_DISK_BURST_IGNORE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_BURST_IGNORE_THRESHOLD__Loc == GUID_DISK_BURST_IGNORE_THRESHOLD;
    assume GUID_DISK_BURST_IGNORE_THRESHOLD != 0;
    call {:si_unique_call 1496} GUID_DISK_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_POWERDOWN_TIMEOUT__Loc == GUID_DISK_POWERDOWN_TIMEOUT;
    assume GUID_DISK_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1497} GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD != 0;
    call {:si_unique_call 1498} PPM_PERFSTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATES_DATA_GUID__Loc == PPM_PERFSTATES_DATA_GUID;
    assume PPM_PERFSTATES_DATA_GUID != 0;
    call {:si_unique_call 1499} NO_SUBGROUP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NO_SUBGROUP_GUID__Loc == NO_SUBGROUP_GUID;
    assume NO_SUBGROUP_GUID != 0;
    call {:si_unique_call 1500} GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc == GUID_VIDEO_FULLSCREEN_PLAYBACK;
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK != 0;
    call {:si_unique_call 1501} GUID_PROCESSOR_PERF_BOOST_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_MODE__Loc == GUID_PROCESSOR_PERF_BOOST_MODE;
    assume GUID_PROCESSOR_PERF_BOOST_MODE != 0;
    call {:si_unique_call 1502} ALL_POWERSCHEMES_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ALL_POWERSCHEMES_GUID__Loc == ALL_POWERSCHEMES_GUID;
    assume ALL_POWERSCHEMES_GUID != 0;
    call {:si_unique_call 1503} GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY != 0;
    call {:si_unique_call 1504} GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc == GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING != 0;
    call {:si_unique_call 1505} GUID_PROCESSOR_IDLE_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_TIME_CHECK__Loc == GUID_PROCESSOR_IDLE_TIME_CHECK;
    assume GUID_PROCESSOR_IDLE_TIME_CHECK != 0;
    call {:si_unique_call 1506} GUID_INTSTEER_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_MODE__Loc == GUID_INTSTEER_MODE;
    assume GUID_INTSTEER_MODE != 0;
    call {:si_unique_call 1507} GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc == GUID_IDLE_RESILIENCY_PLATFORM_STATE;
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE != 0;
    call {:si_unique_call 1508} GUID_BACKGROUND_TASK_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BACKGROUND_TASK_NOTIFICATION__Loc == GUID_BACKGROUND_TASK_NOTIFICATION;
    assume GUID_BACKGROUND_TASK_NOTIFICATION != 0;
    call {:si_unique_call 1509} GUID_PROCESSOR_PERF_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_HISTORY__Loc == GUID_PROCESSOR_PERF_HISTORY;
    assume GUID_PROCESSOR_PERF_HISTORY != 0;
    call {:si_unique_call 1510} GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc == GUID_VIDEO_ADAPTIVE_POWERDOWN;
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1511} GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc == GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT != 0;
    call {:si_unique_call 1512} GUID_PROCESSOR_PERF_BOOST_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_POLICY__Loc == GUID_PROCESSOR_PERF_BOOST_POLICY;
    assume GUID_PROCESSOR_PERF_BOOST_POLICY != 0;
    call {:si_unique_call 1513} GUID_SESSION_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_USER_PRESENCE__Loc == GUID_SESSION_USER_PRESENCE;
    assume GUID_SESSION_USER_PRESENCE != 0;
    call {:si_unique_call 1514} GUID_LIDCLOSE_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDCLOSE_ACTION__Loc == GUID_LIDCLOSE_ACTION;
    assume GUID_LIDCLOSE_ACTION != 0;
    call {:si_unique_call 1515} GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc == GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS != 0;
    call {:si_unique_call 1516} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD != 0;
    call {:si_unique_call 1517} PPM_IDLE_ACCOUNTING_EX_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_EX_GUID__Loc == PPM_IDLE_ACCOUNTING_EX_GUID;
    assume PPM_IDLE_ACCOUNTING_EX_GUID != 0;
    call {:si_unique_call 1518} GUID_PROCESSOR_PERF_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_TIME__Loc == GUID_PROCESSOR_PERF_DECREASE_TIME;
    assume GUID_PROCESSOR_PERF_DECREASE_TIME != 0;
    call {:si_unique_call 1519} GUID_MAX_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MAX_POWER_SAVINGS__Loc == GUID_MAX_POWER_SAVINGS;
    assume GUID_MAX_POWER_SAVINGS != 0;
    call {:si_unique_call 1520} GUID_BATTERY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_SUBGROUP__Loc == GUID_BATTERY_SUBGROUP;
    assume GUID_BATTERY_SUBGROUP != 0;
    call {:si_unique_call 1521} GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_DECREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY != 0;
    call {:si_unique_call 1522} GUID_IDLE_BACKGROUND_TASK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_BACKGROUND_TASK__Loc == GUID_IDLE_BACKGROUND_TASK;
    assume GUID_IDLE_BACKGROUND_TASK != 0;
    call {:si_unique_call 1523} GUID_POWERSCHEME_PERSONALITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERSCHEME_PERSONALITY__Loc == GUID_POWERSCHEME_PERSONALITY;
    assume GUID_POWERSCHEME_PERSONALITY != 0;
    call {:si_unique_call 1524} GUID_IDLE_RESILIENCY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_SUBGROUP__Loc == GUID_IDLE_RESILIENCY_SUBGROUP;
    assume GUID_IDLE_RESILIENCY_SUBGROUP != 0;
    call {:si_unique_call 1525} GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc == GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN != 0;
    call {:si_unique_call 1526} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING != 0;
    call {:si_unique_call 1527} GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1528} GUID_ACTIVE_POWERSCHEME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACTIVE_POWERSCHEME__Loc == GUID_ACTIVE_POWERSCHEME;
    assume GUID_ACTIVE_POWERSCHEME != 0;
    call {:si_unique_call 1529} GUID_SYSTEM_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_AWAYMODE__Loc == GUID_SYSTEM_AWAYMODE;
    assume GUID_SYSTEM_AWAYMODE != 0;
    call {:si_unique_call 1530} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1531} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1532} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1533} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1534} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1535} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1536} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1537} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1538} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1539} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1540} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1541} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1542} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1543} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1544} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1545} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1546} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1547} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1548} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1549} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1550} sdv_driver_object__Loc := __HAVOC_malloc_or_null(68);
    assume sdv_driver_object__Loc == sdv_driver_object;
    assume sdv_driver_object != 0;
    call {:si_unique_call 1551} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1552} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1553} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1554} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1555} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1556} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1557} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1558} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1559} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 1560} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1561} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 1562} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1563} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1564} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1565} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1566} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1567} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1568} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1569} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 1570} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1571} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1572} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1573} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1574} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1575} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1576} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1577} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1578} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1579} vslice_dummy_var_249 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 1580} corralExtraInit();
    call {:si_unique_call 1581} corralExplainErrorInit();
    call {:si_unique_call 1582} _sdv_init18();
    call {:si_unique_call 1583} _sdv_init1();
    call {:si_unique_call 1584} _sdv_init4();
    call {:si_unique_call 1585} _sdv_init5();
    call {:si_unique_call 1586} _sdv_init3();
    call {:si_unique_call 1587} _sdv_init16();
    call {:si_unique_call 1588} _sdv_init14();
    call {:si_unique_call 1589} _sdv_init6();
    call {:si_unique_call 1590} _sdv_init15();
    call {:si_unique_call 1591} _sdv_init10();
    call {:si_unique_call 1592} _sdv_init11();
    call {:si_unique_call 1593} _sdv_init9();
    call {:si_unique_call 1594} _sdv_init12();
    call {:si_unique_call 1595} _sdv_init13();
    call {:si_unique_call 1596} _sdv_init7();
    call {:si_unique_call 1597} _sdv_init8();
    call {:si_unique_call 1598} _sdv_init2();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_564 := 0;
    goto L41;

  L41:
    assume Tmp_564 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_563 := 0;
    goto L45;

  L45:
    assume Tmp_563 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1599} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L39;

  L39:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_563 := 1;
    goto L45;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_564 := 1;
    goto L41;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_8: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_8: int)
{
  var {:pointer} pirp_8: int;
  var vslice_dummy_var_163: int;

  anon0:
    call {:si_unique_call 1600} vslice_dummy_var_163 := __HAVOC_malloc(4);
    pirp_8 := actual_pirp_8;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_8 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_8 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_8 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_8 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_26: int) returns (Tmp_568: int);
  free ensures {:va_keep} Tmp_568 == 0 || Tmp_568 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_26: int) returns (Tmp_568: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_568 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_568 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_570: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_570: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Mem_T.INT4[Addend] := Mem_T.INT4[Addend] - 1;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    Tmp_570 := Mem_T.INT4[Addend];
    return;
}



procedure {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_add_end"} {:osmodel} sdv_stub_add_end()
{
  var vslice_dummy_var_164: int;

  anon0:
    call {:si_unique_call 1601} vslice_dummy_var_164 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 1602} vslice_dummy_var_165 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_26: int) returns (Tmp_576: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_26: int) returns (Tmp_576: int)
{
  var {:pointer} DeviceObject_26: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_576 := sdv_p_devobj_top;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_576 := DeviceObject_26;
    goto L1;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 1603} vslice_dummy_var_166 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_580: int);
  free ensures {:va_keep} Tmp_580 == 0 || Tmp_580 == actual_TargetDevice_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAttachDeviceToDeviceStack"} {:osmodel} IoAttachDeviceToDeviceStack(actual_SourceDevice: int, actual_TargetDevice_1: int) returns (Tmp_580: int)
{
  var {:pointer} TargetDevice_1: int;

  anon0:
    TargetDevice_1 := actual_TargetDevice_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} TargetDevice_1 == sdv_p_devobj_pdo;
    Tmp_580 := TargetDevice_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} TargetDevice_1 != sdv_p_devobj_pdo;
    Tmp_580 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 1604} vslice_dummy_var_167 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int)
{
  var vslice_dummy_var_168: int;

  anon0:
    call {:si_unique_call 1605} vslice_dummy_var_168 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po: int, actual_pirp_9: int) returns (Tmp_586: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunStartDevice"} {:osmodel} sdv_RunStartDevice(actual_po: int, actual_pirp_9: int) returns (Tmp_586: int)
{
  var {:pointer} ps: int;
  var {:scalar} status_54: int;
  var {:pointer} po: int;
  var {:pointer} pirp_9: int;

  anon0:
    po := actual_po;
    pirp_9 := actual_pirp_9;
    status_54 := 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    havoc ps;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    assume {:nonnull} pirp_9 != 0;
    assume pirp_9 > 0;
    call {:si_unique_call 1606} sdv_SetStatus(pirp_9);
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1607} sdv_stub_dispatch_begin();
    call {:si_unique_call 1608} status_54 := PciDrvDispatchPnp(po, pirp_9);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1609} sdv_stub_dispatch_end(status_54, 0);
    Tmp_586 := status_54;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int)
{
  var vslice_dummy_var_169: int;

  anon0:
    call {:si_unique_call 1610} vslice_dummy_var_169 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 1611} vslice_dummy_var_170 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_NewIrql;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_171: int;

  anon0:
    call {:si_unique_call 1612} vslice_dummy_var_171 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    sdv_irql_current := NewIrql;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_594: int);
  free ensures {:va_keep} Tmp_594 == 0 || Tmp_594 == 258;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_594: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_594 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_594 := 258;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_172: int;

  anon0:
    call {:si_unique_call 1613} vslice_dummy_var_172 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_173: int;

  anon0:
    call {:si_unique_call 1614} vslice_dummy_var_173 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int)
{
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 1615} vslice_dummy_var_174 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_12: int) returns (Tmp_602: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_12: int) returns (Tmp_602: int)
{
  var {:pointer} ps_1: int;
  var {:scalar} minor_1: int;
  var {:scalar} Tmp_604: int;
  var {:scalar} sdv_307: int;
  var {:scalar} Tmp_605: int;
  var {:scalar} status_55: int;
  var {:pointer} po_1: int;
  var {:pointer} pirp_12: int;

  anon0:
    po_1 := actual_po_1;
    pirp_12 := actual_pirp_12;
    status_55 := 0;
    minor_1 := sdv_307;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps_1;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 1616} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1617} sdv_stub_dispatch_begin();
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto L55;

  L55:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    Tmp_605 := 0;
    goto L166;

  L166:
    assume Tmp_605 != 0;
    goto L56;

  L56:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L61;

  L61:
    call {:si_unique_call 1618} status_55 := PciDrvDispatchPnp(po_1, pirp_12);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L67;

  L67:
    call {:si_unique_call 1619} sdv_stub_dispatch_end(status_55, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_602 := status_55;
    goto LM2;

  LM2:
    return;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    goto L61;

  anon41_Then:
    Tmp_605 := 1;
    goto L166;

  anon39_Then:
    goto L56;

  anon53_Then:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    Tmp_604 := 0;
    goto L172;

  L172:
    assume Tmp_604 != 0;
    goto L55;

  anon38_Then:
    Tmp_604 := 1;
    goto L172;

  anon42_Then:
    call {:si_unique_call 1620} status_55 := sdv_DoNothing();
    goto L67;

  anon43_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1621} status_55 := PciDrvSystemControl(po_1, pirp_12);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} yogi_error != 1;
    goto L67;

  anon52_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon44_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1622} status_55 := PciDrvCleanup(po_1, pirp_12);
    goto L67;

  anon45_Then:
    call {:si_unique_call 1623} status_55 := sdv_DoNothing();
    goto L67;

  anon46_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1624} status_55 := sdv_DoNothing();
    goto L67;

  anon47_Then:
    call {:si_unique_call 1625} status_55 := sdv_DoNothing();
    goto L67;

  anon48_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1626} status_55 := sdv_DoNothing();
    goto L67;

  anon49_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1627} status_55 := sdv_DoNothing();
    goto L67;

  anon50_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1628} status_55 := sdv_DoNothing();
    goto L67;

  anon51_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1629} status_55 := PciDrvClose(po_1, pirp_12);
    goto L67;

  anon37_Then:
    assume {:nonnull} ps_1 != 0;
    assume ps_1 > 0;
    call {:si_unique_call 1630} status_55 := PciDrvCreate(po_1, pirp_12);
    goto L67;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1631} vslice_dummy_var_175 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_608: int);
  free ensures {:va_keep} Tmp_608 == -1073741823 || Tmp_608 == -1073741808 || Tmp_608 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_608: int)
{
  var {:scalar} Tmp_610: int;
  var {:pointer} SymbolicLinkName: int;

  anon0:
    SymbolicLinkName := actual_SymbolicLinkName;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_608 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_608 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName != 0;
    assume SymbolicLinkName > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_610 := 0;
    goto L22;

  L22:
    assume Tmp_610 != 0;
    Tmp_608 := 0;
    goto L1;

  anon8_Then:
    Tmp_610 := 1;
    goto L22;
}



procedure {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_27: int, actual_Buffer: int, actual_Length_2: int, actual_StartingOffset: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_611: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoBuildSynchronousFsdRequest"} {:osmodel} IoBuildSynchronousFsdRequest(actual_MajorFunction: int, actual_DeviceObject_27: int, actual_Buffer: int, actual_Length_2: int, actual_StartingOffset: int, actual_Event_1: int, actual_IoStatusBlock: int) returns (Tmp_611: int)
{
  var {:pointer} Tmp_612: int;
  var {:scalar} MajorFunction: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    MajorFunction := actual_MajorFunction;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    havoc Tmp_612;
    assume {:nonnull} Tmp_612 != 0;
    assume Tmp_612 > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    Tmp_611 := sdv_IoBuildSynchronousFsdRequest_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_irp != 0;
    assume sdv_IoBuildSynchronousFsdRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_611 := 0;
    goto L1;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4;
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_current == actual_new_1;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_4);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 1632} vslice_dummy_var_176 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    sdv_irql_current := new_1;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1633} vslice_dummy_var_177 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_3: int)
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1634} vslice_dummy_var_178 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength: int) returns (Tmp_620: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_620 == -1073741811 || Tmp_620 == -1073741823 || Tmp_620 == 0 || Tmp_620 == 5 || Tmp_620 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_4: int, actual_ResultLength: int) returns (Tmp_620: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_317: int;
  var {:scalar} Length_4: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_4 := actual_Length_4;
    ResultLength := actual_ResultLength;
    L := sdv_317;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_620 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_620 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_4 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_620 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_4 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_4;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_620 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_4 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Mem_T.INT4[ResultLength] := L;
    Tmp_620 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_4;
    goto L13;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1635} vslice_dummy_var_179 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_624: int);
  free ensures {:va_keep} Tmp_624 == 1 || Tmp_624 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_624: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 1636} b := OneOfTwoBOOLEAN();
    Tmp_624 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1637} vslice_dummy_var_180 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag: int)
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1638} vslice_dummy_var_181 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int)
{
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1639} vslice_dummy_var_182 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 1640} vslice_dummy_var_183 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_636: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_636: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Mem_T.INT4[Addend_1] := Mem_T.INT4[Addend_1] + 1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    Tmp_636 := Mem_T.INT4[Addend_1];
    return;
}



procedure {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside: int)
{
  var vslice_dummy_var_184: int;

  anon0:
    call {:si_unique_call 1641} vslice_dummy_var_184 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_640: int);
  free ensures {:va_keep} Tmp_640 == 1 || Tmp_640 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_640: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_640 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_640 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_28: int, actual_Irp_27: int) returns (Tmp_642: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_28: int, actual_Irp_27: int) returns (Tmp_642: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} status_56: int;
  var {:pointer} Irp_27: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 1642} completion_1 := __HAVOC_malloc(4);
    Irp_27 := actual_Irp_27;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    Mem_T.INT4[completion_1] := 0;
    status_56 := 259;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_27;
    goto L21;

  L21:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L29;

  L29:
    Tmp_642 := status_56;
    goto LM2;

  LM2:
    return;

  anon55_Then:
    havoc vslice_dummy_var_41;
    call {:si_unique_call 1643} vslice_dummy_var_185 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_27, vslice_dummy_var_41, completion_1);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_27;
    goto L23;

  anon53_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_27;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_27;
    goto L19;

  anon68_Then:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_27;
    goto L60;

  L60:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_42;
    call {:si_unique_call 1644} vslice_dummy_var_188 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_27, vslice_dummy_var_42, completion_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_27;
    goto L62;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_27;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_27;
    goto L58;

  anon69_Then:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_27;
    goto L34;

  L34:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    havoc vslice_dummy_var_43;
    call {:si_unique_call 1645} vslice_dummy_var_186 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_27, vslice_dummy_var_43, completion_1);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L29;

  anon58_Then:
    goto L29;

  anon57_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_27;
    goto L36;

  anon56_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_27;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_27;
    goto L32;

  anon70_Then:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_27;
    goto L47;

  L47:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_27;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    havoc vslice_dummy_var_44;
    call {:si_unique_call 1646} vslice_dummy_var_187 := sdv_RunIoCompletionRoutines#1(sdv_p_devobj_fdo, Irp_27, vslice_dummy_var_44, completion_1);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    goto L29;

  anon62_Then:
    goto L29;

  anon61_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_27;
    goto L49;

  anon60_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_27;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_27;
    goto L45;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 1647} vslice_dummy_var_189 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_1: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_1: int, actual_State_1: int)
{
  var {:pointer} Event_2: int;
  var {:scalar} Type_1: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 1648} vslice_dummy_var_190 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    Type_1 := actual_Type_1;
    State_1 := actual_State_1;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int)
{
  var vslice_dummy_var_191: int;

  anon0:
    call {:si_unique_call 1649} vslice_dummy_var_191 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_30: int, actual_Irp_29: int) returns (Tmp_652: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_30: int, actual_Irp_29: int) returns (Tmp_652: int)
{
  var {:pointer} Irp_29: int;

  anon0:
    Irp_29 := actual_Irp_29;
    call {:si_unique_call 1650} Tmp_652 := IofCallDriver(0, Irp_29);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_654: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_654: int)
{
  var {:pointer} sdv_333: int;
  var {:pointer} p_5: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1651} sdv_333 := __HAVOC_malloc(1);
    p_5 := sdv_333;
    Tmp_654 := p_5;
    goto L1;

  L1:
    return;

  anon3_Then:
    p_5 := 0;
    Tmp_654 := p_5;
    goto L1;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int)
{
  var {:pointer} SpinLock_4: int;
  var vslice_dummy_var_192: int;

  anon0:
    call {:si_unique_call 1652} vslice_dummy_var_192 := __HAVOC_malloc(4);
    SpinLock_4 := actual_SpinLock_4;
    assume {:nonnull} SpinLock_4 != 0;
    assume SpinLock_4 > 0;
    Mem_T.INT4[SpinLock_4] := 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_1: int) returns (Tmp_658: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_1: int) returns (Tmp_658: int)
{
  var {:pointer} sdv_335: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1653} sdv_335 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_658 := sdv_335;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_658 := 0;
    goto L1;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_31: int) returns (Tmp_660: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_31: int) returns (Tmp_660: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_337: int;
  var {:scalar} Tmp_661: int;

  anon0:
    call {:si_unique_call 1654} sdv_337 := __HAVOC_malloc(1);
    ioWorkItem := sdv_337;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_661 := 0;
    goto L27;

  L27:
    assume Tmp_661 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_660 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_661 := 1;
    goto L27;

  anon6_Then:
    Tmp_660 := 0;
    goto L1;
}



procedure {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunUnload"} {:osmodel} sdv_RunUnload(actual_pdrivo: int)
{
  var {:pointer} pdrivo: int;
  var vslice_dummy_var_193: int;

  anon0:
    call {:si_unique_call 1655} vslice_dummy_var_193 := __HAVOC_malloc(4);
    pdrivo := actual_pdrivo;
    call {:si_unique_call 1656} PciDrvUnload(pdrivo);
    return;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable: int) returns (Tmp_665: int);
  free ensures {:va_keep} Tmp_665 == -1073741772 || Tmp_665 == -1073741824 || Tmp_665 == -1073741789 || Tmp_665 == -1073741670 || Tmp_665 == -1073741808 || Tmp_665 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable: int) returns (Tmp_665: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_665 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_665 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_665 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_665 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_665 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_665 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_667: int);
  free ensures {:va_keep} Tmp_667 == -1073741811 || Tmp_667 == -1073741670 || Tmp_667 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_667: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_667 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_667 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_667 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_194: int;

  anon0:
    call {:si_unique_call 1657} vslice_dummy_var_194 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 0;
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1658} vslice_dummy_var_195 := __HAVOC_malloc(4);
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 0;
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_32: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_673: int);
  free ensures {:va_keep} Tmp_673 == -1073741811 || Tmp_673 == -1073741808 || Tmp_673 == -1073741823 || Tmp_673 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_32: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_673: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_673 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_673 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_673 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_673 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_675: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_675: int)
{
  var {:scalar} p_6: int;

  anon0:
    Tmp_675 := p_6;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_677: int);
  free ensures {:va_keep} Tmp_677 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_677: int)
{

  anon0:
    Tmp_677 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_679: int);
  free ensures {:va_keep} Tmp_679 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_679: int)
{

  anon0:
    Tmp_679 := -1073741823;
    return;
}



procedure {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_1: int) returns (Tmp_681: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_1: int) returns (Tmp_681: int)
{
  var {:pointer} sdv_343: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1659} sdv_343 := __HAVOC_malloc(1);
    Tmp_681 := sdv_343;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_681 := 0;
    goto L1;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_33: int, actual_Action: int) returns (Tmp_683: int);
  free ensures {:va_keep} Tmp_683 == -1073741823 || Tmp_683 == -1073741811 || Tmp_683 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_33: int, actual_Action: int) returns (Tmp_683: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_683 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_683 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_683 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_3: int)
{
  var {:pointer} Event_3: int;
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 1660} vslice_dummy_var_196 := __HAVOC_malloc(4);
    Event_3 := actual_Event_3;
    assume {:nonnull} Event_3 != 0;
    assume Event_3 > 0;
    return;
}



procedure {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_58: int) returns (Tmp_699: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_699 == -1073741661 || Tmp_699 == 0 || Tmp_699 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_58: int) returns (Tmp_699: int)
{
  var {:scalar} i_5: int;
  var {:pointer} Tmp_700: int;
  var {:scalar} Tmp_701: int;
  var {:pointer} Tmp_702: int;
  var {:pointer} Tmp_703: int;
  var {:scalar} Tmp_704: int;
  var {:scalar} Tmp_705: int;
  var {:scalar} counter_1: int;
  var {:scalar} Tmp_706: int;
  var {:pointer} McAddress: int;
  var {:scalar} Tmp_707: int;
  var {:pointer} Tmp_708: int;
  var {:pointer} Tmp_709: int;
  var {:scalar} sdv_356: int;
  var {:pointer} Tmp_710: int;
  var {:pointer} Tmp_711: int;
  var {:scalar} Tmp_712: int;
  var {:pointer} Tmp_713: int;
  var {:scalar} Tmp_714: int;
  var {:scalar} Tmp_715: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_716: int;
  var {:pointer} Tmp_717: int;
  var {:scalar} Tmp_718: int;
  var {:scalar} Tmp_719: int;
  var {:pointer} Tmp_720: int;
  var {:pointer} Tmp_721: int;
  var {:pointer} Tmp_722: int;
  var {:scalar} Tmp_723: int;
  var {:scalar} Tmp_724: int;
  var {:scalar} Tmp_725: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} Tmp_728: int;
  var {:pointer} Tmp_729: int;
  var {:pointer} Tmp_730: int;
  var {:scalar} Tmp_731: int;
  var {:pointer} Tmp_732: int;
  var {:pointer} Tmp_733: int;
  var {:pointer} Tmp_734: int;
  var {:scalar} bResult_1: int;
  var {:scalar} status_58: int;
  var {:scalar} Tmp_735: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} Tmp_737: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} Tmp_739: int;
  var {:scalar} Tmp_740: int;
  var {:pointer} FdoData_58: int;

  anon0:
    FdoData_58 := actual_FdoData_58;
    call {:si_unique_call 1661} Tmp_702 := __HAVOC_malloc(24);
    call {:si_unique_call 1662} Tmp_703 := __HAVOC_malloc(24);
    call {:si_unique_call 1663} Tmp_708 := __HAVOC_malloc(24);
    call {:si_unique_call 1664} Tmp_709 := __HAVOC_malloc(24);
    call {:si_unique_call 1665} Tmp_710 := __HAVOC_malloc(768);
    call {:si_unique_call 1666} Tmp_711 := __HAVOC_malloc(24);
    call {:si_unique_call 1667} Tmp_716 := __HAVOC_malloc(100);
    call {:si_unique_call 1668} Tmp_717 := __HAVOC_malloc(768);
    call {:si_unique_call 1669} Tmp_720 := __HAVOC_malloc(768);
    call {:si_unique_call 1670} Tmp_726 := __HAVOC_malloc(768);
    call {:si_unique_call 1671} Tmp_728 := __HAVOC_malloc(768);
    call {:si_unique_call 1672} Tmp_729 := __HAVOC_malloc(144);
    call {:si_unique_call 1673} Tmp_732 := __HAVOC_malloc(768);
    call {:si_unique_call 1674} Tmp_733 := __HAVOC_malloc(24);
    call {:si_unique_call 1675} Tmp_736 := __HAVOC_malloc(768);
    call {:si_unique_call 1676} Tmp_737 := __HAVOC_malloc(160);
    call {:si_unique_call 1677} Tmp_738 := __HAVOC_malloc(768);
    call {:si_unique_call 1678} Tmp_739 := __HAVOC_malloc(24);
    Tmp_716 := strConst__li2bpl166;
    call {:si_unique_call 1679} DebugPrint(5, 32, Tmp_716);
    i_5 := 0;
    goto L12;

  L12:
    call {:si_unique_call 1680} i_5, Tmp_701, Tmp_702, Tmp_703, Tmp_704, Tmp_705, Tmp_706, McAddress, Tmp_707, Tmp_708, Tmp_709, Tmp_710, Tmp_711, Tmp_712, Tmp_714, Tmp_715, j, Tmp_717, Tmp_718, Tmp_720, Tmp_721, Tmp_723, Tmp_724, Tmp_725, Tmp_726, Tmp_728, Tmp_731, Tmp_732, Tmp_733, Tmp_735, Tmp_736, Tmp_737, Tmp_738, Tmp_739, Tmp_740 := NICSetMulticastList_loop_L12(i_5, Tmp_701, Tmp_702, Tmp_703, Tmp_704, Tmp_705, Tmp_706, McAddress, Tmp_707, Tmp_708, Tmp_709, Tmp_710, Tmp_711, Tmp_712, Tmp_714, Tmp_715, j, Tmp_717, Tmp_718, Tmp_720, Tmp_721, Tmp_723, Tmp_724, Tmp_725, Tmp_726, Tmp_728, Tmp_731, Tmp_732, Tmp_733, Tmp_735, Tmp_736, Tmp_737, Tmp_738, Tmp_739, Tmp_740, FdoData_58);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_715 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_728;
    assume {:nonnull} Tmp_728 != 0;
    assume Tmp_728 > 0;
    havoc Tmp_711;
    assume {:nonnull} Tmp_711 != 0;
    assume Tmp_711 > 0;
    Tmp_704 := Mem_T.INT4[Tmp_711 + 5 * 4];
    Tmp_718 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_732;
    assume {:nonnull} Tmp_732 != 0;
    assume Tmp_732 > 0;
    havoc Tmp_733;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    Tmp_724 := Mem_T.INT4[Tmp_733 + 4 * 4];
    Tmp_725 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_736;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    havoc Tmp_709;
    assume {:nonnull} Tmp_709 != 0;
    assume Tmp_709 > 0;
    Tmp_706 := Mem_T.INT4[Tmp_709 + 3 * 4];
    Tmp_705 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_717;
    assume {:nonnull} Tmp_717 != 0;
    assume Tmp_717 > 0;
    havoc Tmp_708;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    Tmp_723 := Mem_T.INT4[Tmp_708 + 2 * 4];
    Tmp_731 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_720;
    assume {:nonnull} Tmp_720 != 0;
    assume Tmp_720 > 0;
    havoc Tmp_702;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    Tmp_714 := Mem_T.INT4[Tmp_702 + 1 * 4];
    Tmp_740 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_710;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    havoc Tmp_703;
    assume {:nonnull} Tmp_703 != 0;
    assume Tmp_703 > 0;
    Tmp_701 := Mem_T.INT4[Tmp_703];
    Tmp_737 := strConst__li2bpl168;
    call {:si_unique_call 1681} DebugPrint(5, 32, Tmp_737);
    Tmp_712 := i_5 * 6;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_721;
    assume {:nonnull} Tmp_721 != 0;
    assume Tmp_721 > 0;
    havoc Tmp_726;
    McAddress := Tmp_726 + Tmp_712 * 4;
    j := 0;
    goto L25;

  L25:
    call {:si_unique_call 1682} Tmp_707, j, Tmp_735, Tmp_738, Tmp_739 := NICSetMulticastList_loop_L25(i_5, McAddress, Tmp_707, j, Tmp_735, Tmp_738, Tmp_739, FdoData_58);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > j;
    Tmp_735 := j;
    Tmp_707 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_738;
    assume {:nonnull} Tmp_738 != 0;
    assume Tmp_738 > 0;
    havoc Tmp_739;
    assume {:nonnull} McAddress != 0;
    assume McAddress > 0;
    assume {:nonnull} Tmp_739 != 0;
    assume Tmp_739 > 0;
    Mem_T.INT4[McAddress] := Mem_T.INT4[Tmp_739 + Tmp_735 * 4];
    j := j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} j >= 6;
    i_5 := i_5 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_713;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} Tmp_713 != 0;
    assume Tmp_713 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_730;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(Tmp_730)] := 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_734;
    assume {:nonnull} Tmp_734 != 0;
    assume Tmp_734 > 0;
    call {:si_unique_call 1683} sdv_356 := WaitScb(FdoData_58);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_356 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_1 := 0;
    counter_1 := 250000;
    goto L51;

  L51:
    call {:si_unique_call 1684} counter_1, Tmp_719, Tmp_722 := NICSetMulticastList_loop_L51(counter_1, Tmp_719, Tmp_722, FdoData_58);
    goto L51_last;

  L51_last:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} counter_1 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_722;
    assume {:nonnull} Tmp_722 != 0;
    assume Tmp_722 > 0;
    havoc Tmp_719;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_719 == 128;
    counter_1 := counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} Tmp_719 != 128;
    bResult_1 := 1;
    goto L52;

  L52:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bResult_1 != 0;
    goto L62;

  L62:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto L38;

  L38:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_700;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} Tmp_700 != 0;
    assume Tmp_700 > 0;
    call {:si_unique_call 1685} status_58 := D100SubmitCommandBlockAndWait(FdoData_58);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_58 != 0;
    status_58 := -1073741661;
    goto L44;

  L44:
    Tmp_729 := strConst__li2bpl167;
    call {:si_unique_call 1686} DebugPrint(5, 32, Tmp_729);
    Tmp_699 := status_58;
    return;

  anon21_Then:
    assume {:partition} status_58 == 0;
    goto L44;

  anon23_Then:
    assume {:partition} bResult_1 == 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    status_58 := -1073741668;
    goto L62;

  anon22_Then:
    assume {:partition} counter_1 == 0;
    goto L52;

  anon20_Then:
    goto L38;

  anon19_Then:
    assume {:partition} sdv_356 == 0;
    status_58 := -1073741668;
    goto L44;
}



procedure {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_59: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_59: int)
{
  var {:pointer} Tmp_741: int;
  var {:pointer} pIndicateStatus: int;
  var {:scalar} sdv_358: int;
  var {:scalar} ntStatus: int;
  var {:scalar} oldIrql_14: int;
  var {:pointer} Tmp_743: int;
  var {:pointer} pIrp: int;
  var {:pointer} Tmp_744: int;
  var {:pointer} pIrpSp_3: int;
  var {:scalar} outBufLength: int;
  var {:pointer} FdoData_59: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1687} vslice_dummy_var_197 := __HAVOC_malloc(4);
    FdoData_59 := actual_FdoData_59;
    call {:si_unique_call 1688} Tmp_741 := __HAVOC_malloc(132);
    call {:si_unique_call 1689} Tmp_744 := __HAVOC_malloc(132);
    pIrp := 0;
    pIrpSp_3 := 0;
    pIndicateStatus := 0;
    ntStatus := -1073741536;
    Tmp_744 := strConst__li2bpl170;
    call {:si_unique_call 1690} DebugPrint(5, 32, Tmp_744);
    call {:si_unique_call 1691} Tmp_743 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_743 != 0;
    assume Tmp_743 > 0;
    Mem_T.INT4[Tmp_743] := oldIrql_14;
    call {:si_unique_call 1692} sdv_KeAcquireSpinLock(0, Tmp_743);
    assume {:nonnull} Tmp_743 != 0;
    assume Tmp_743 > 0;
    oldIrql_14 := Mem_T.INT4[Tmp_743];
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    havoc pIrp;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 1693} sdv_358 := sdv_IoSetCancelRoutine(pIrp, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_358 != 0;
    call {:si_unique_call 1694} pIrpSp_3 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    havoc pIndicateStatus;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    havoc outBufLength;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} outBufLength >= 12;
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  L42:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    ntStatus := 0;
    goto L45;

  L45:
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    goto L22;

  L22:
    call {:si_unique_call 1695} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} pIrp != 0;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(pIrp))] := 12;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    call {:si_unique_call 1696} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1697} vslice_dummy_var_198 := PciDrvIoDecrement(FdoData_59);
    goto L47;

  L47:
    Tmp_741 := strConst__li2bpl169;
    call {:si_unique_call 1698} DebugPrint(5, 32, Tmp_741);
    return;

  anon13_Then:
    assume {:partition} pIrp == 0;
    goto L47;

  anon12_Then:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  anon15_Then:
    assume {:partition} 12 > outBufLength;
    ntStatus := 5;
    goto L45;

  anon11_Then:
    assume {:partition} sdv_358 == 0;
    pIrp := 0;
    goto L22;

  anon14_Then:
    assume {:partition} pIrp == 0;
    goto L22;
}



procedure {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_60: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_745: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_745 == 0 || Tmp_745 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_60: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_745: int)
{
  var {:pointer} Tmp_746: int;
  var {:scalar} status_59: int;
  var {:pointer} Tmp_748: int;
  var {:pointer} FdoData_60: int;
  var {:scalar} Oid_1: int;
  var {:pointer} pCounter: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;

  anon0:
    FdoData_60 := actual_FdoData_60;
    Oid_1 := actual_Oid_1;
    pCounter := actual_pCounter;
    call {:si_unique_call 1699} Tmp_746 := __HAVOC_malloc(100);
    call {:si_unique_call 1700} Tmp_748 := __HAVOC_malloc(100);
    status_59 := 0;
    Tmp_748 := strConst__li2bpl172;
    call {:si_unique_call 1701} DebugPrint(5, 32, Tmp_748);
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    Mem_T.INT4[pCounter] := 0;
    call {:si_unique_call 1702} DumpStatsCounters(FdoData_60);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Oid_1 != 131329;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Oid_1 != 131330;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Oid_1 != 131331;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Oid_1 != 131332;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Oid_1 != 131333;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Oid_1 != 131597;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Oid_1 != 131598;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Oid_1 != 16908545;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Oid_1 != 16908546;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Oid_1 != 16908547;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Oid_1 != 16908801;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Oid_1 != 16908802;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Oid_1 != 16908803;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Oid_1 != 16908804;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Oid_1 != 16908805;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Oid_1 != 16908806;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Oid_1 == 16908807;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_45;
    Mem_T.INT4[pCounter] := vslice_dummy_var_45;
    goto L32;

  L32:
    Tmp_746 := strConst__li2bpl171;
    call {:si_unique_call 1703} DebugPrint(5, 32, Tmp_746);
    Tmp_745 := status_59;
    return;

  anon36_Then:
    assume {:partition} Oid_1 != 16908807;
    status_59 := -1073741637;
    goto L32;

  anon37_Then:
    assume {:partition} Oid_1 == 16908806;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_46;
    Mem_T.INT4[pCounter] := vslice_dummy_var_46;
    goto L32;

  anon38_Then:
    assume {:partition} Oid_1 == 16908805;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_47;
    Mem_T.INT4[pCounter] := vslice_dummy_var_47;
    goto L32;

  anon39_Then:
    assume {:partition} Oid_1 == 16908804;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_48;
    Mem_T.INT4[pCounter] := vslice_dummy_var_48;
    goto L32;

  anon40_Then:
    assume {:partition} Oid_1 == 16908803;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_49;
    Mem_T.INT4[pCounter] := vslice_dummy_var_49;
    goto L32;

  anon41_Then:
    assume {:partition} Oid_1 == 16908802;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_50;
    Mem_T.INT4[pCounter] := vslice_dummy_var_50;
    goto L32;

  anon42_Then:
    assume {:partition} Oid_1 == 16908801;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_51;
    Mem_T.INT4[pCounter] := vslice_dummy_var_51;
    goto L32;

  anon43_Then:
    assume {:partition} Oid_1 == 16908547;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_52;
    Mem_T.INT4[pCounter] := vslice_dummy_var_52;
    goto L32;

  anon44_Then:
    assume {:partition} Oid_1 == 16908546;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_53;
    Mem_T.INT4[pCounter] := vslice_dummy_var_53;
    goto L32;

  anon45_Then:
    assume {:partition} Oid_1 == 16908545;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_54;
    Mem_T.INT4[pCounter] := vslice_dummy_var_54;
    goto L32;

  anon46_Then:
    assume {:partition} Oid_1 == 131598;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_55;
    Mem_T.INT4[pCounter] := vslice_dummy_var_55;
    goto L32;

  anon47_Then:
    assume {:partition} Oid_1 == 131597;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_56;
    Mem_T.INT4[pCounter] := vslice_dummy_var_56;
    goto L32;

  anon48_Then:
    assume {:partition} Oid_1 == 131333;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_57;
    Mem_T.INT4[pCounter] := vslice_dummy_var_57;
    goto L32;

  anon49_Then:
    assume {:partition} Oid_1 == 131332;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_58;
    Mem_T.INT4[pCounter] := vslice_dummy_var_58;
    goto L32;

  anon50_Then:
    assume {:partition} Oid_1 == 131331;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_59;
    Mem_T.INT4[pCounter] := vslice_dummy_var_59;
    goto L32;

  anon51_Then:
    assume {:partition} Oid_1 == 131330;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_60;
    Mem_T.INT4[pCounter] := vslice_dummy_var_60;
    goto L32;

  anon35_Then:
    assume {:partition} Oid_1 == 131329;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    havoc vslice_dummy_var_61;
    Mem_T.INT4[pCounter] := vslice_dummy_var_61;
    goto L32;
}



procedure {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_61: int, actual_PacketFilter_1: int) returns (Tmp_749: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_749 == 0 || Tmp_749 == -1073741668 || Tmp_749 == -1073741661;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_61: int, actual_PacketFilter_1: int) returns (Tmp_749: int)
{
  var {:scalar} i_6: int;
  var {:pointer} Tmp_750: int;
  var {:pointer} Tmp_751: int;
  var {:pointer} Tmp_752: int;
  var {:pointer} Tmp_753: int;
  var {:pointer} Tmp_754: int;
  var {:pointer} Tmp_755: int;
  var {:pointer} Tmp_756: int;
  var {:pointer} Tmp_757: int;
  var {:pointer} Tmp_758: int;
  var {:pointer} Tmp_759: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} Tmp_762: int;
  var {:pointer} Tmp_763: int;
  var {:pointer} Tmp_764: int;
  var {:pointer} Tmp_765: int;
  var {:scalar} counter_2: int;
  var {:pointer} Tmp_766: int;
  var {:pointer} Tmp_767: int;
  var {:pointer} Tmp_768: int;
  var {:scalar} NewParameterField: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} Tmp_772: int;
  var {:pointer} Tmp_773: int;
  var {:scalar} sdv_361: int;
  var {:pointer} Tmp_774: int;
  var {:pointer} Tmp_775: int;
  var {:pointer} Tmp_776: int;
  var {:scalar} Tmp_777: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:scalar} Tmp_781: int;
  var {:pointer} Tmp_782: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_784: int;
  var {:pointer} Tmp_785: int;
  var {:pointer} Tmp_786: int;
  var {:pointer} Tmp_787: int;
  var {:pointer} Tmp_788: int;
  var {:pointer} Tmp_789: int;
  var {:pointer} Tmp_790: int;
  var {:pointer} Tmp_791: int;
  var {:pointer} Tmp_792: int;
  var {:pointer} Tmp_793: int;
  var {:pointer} Tmp_794: int;
  var {:pointer} Tmp_795: int;
  var {:pointer} Tmp_796: int;
  var {:pointer} Tmp_797: int;
  var {:pointer} Tmp_798: int;
  var {:pointer} Tmp_799: int;
  var {:scalar} Tmp_800: int;
  var {:pointer} Tmp_801: int;
  var {:scalar} sdv_363: int;
  var {:pointer} Tmp_802: int;
  var {:pointer} Tmp_803: int;
  var {:pointer} Tmp_804: int;
  var {:pointer} Tmp_805: int;
  var {:pointer} Tmp_806: int;
  var {:pointer} Tmp_807: int;
  var {:pointer} Tmp_808: int;
  var {:pointer} Tmp_809: int;
  var {:pointer} Tmp_810: int;
  var {:pointer} Tmp_811: int;
  var {:pointer} Tmp_812: int;
  var {:pointer} Tmp_813: int;
  var {:pointer} Tmp_814: int;
  var {:pointer} Tmp_815: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} Tmp_817: int;
  var {:pointer} Tmp_818: int;
  var {:pointer} Tmp_819: int;
  var {:scalar} bResult_2: int;
  var {:scalar} status_60: int;
  var {:pointer} Tmp_820: int;
  var {:pointer} Tmp_821: int;
  var {:pointer} Tmp_822: int;
  var {:pointer} Tmp_823: int;
  var {:pointer} Tmp_824: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} Tmp_827: int;
  var {:pointer} Tmp_828: int;
  var {:pointer} Tmp_829: int;
  var {:pointer} Tmp_830: int;
  var {:pointer} FdoData_61: int;
  var {:scalar} PacketFilter_1: int;
  var boogieTmp: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;

  anon0:
    FdoData_61 := actual_FdoData_61;
    PacketFilter_1 := actual_PacketFilter_1;
    call {:si_unique_call 1704} Tmp_754 := __HAVOC_malloc(100);
    call {:si_unique_call 1705} Tmp_756 := __HAVOC_malloc(88);
    call {:si_unique_call 1706} Tmp_758 := __HAVOC_malloc(88);
    call {:si_unique_call 1707} Tmp_759 := __HAVOC_malloc(88);
    call {:si_unique_call 1708} Tmp_760 := __HAVOC_malloc(88);
    call {:si_unique_call 1709} Tmp_767 := __HAVOC_malloc(88);
    call {:si_unique_call 1710} Tmp_769 := __HAVOC_malloc(88);
    call {:si_unique_call 1711} Tmp_772 := __HAVOC_malloc(88);
    call {:si_unique_call 1712} Tmp_774 := __HAVOC_malloc(88);
    call {:si_unique_call 1713} Tmp_775 := __HAVOC_malloc(188);
    call {:si_unique_call 1714} Tmp_776 := __HAVOC_malloc(88);
    call {:si_unique_call 1715} Tmp_778 := __HAVOC_malloc(172);
    call {:si_unique_call 1716} Tmp_780 := __HAVOC_malloc(88);
    call {:si_unique_call 1717} Tmp_782 := __HAVOC_malloc(88);
    call {:si_unique_call 1718} Tmp_783 := __HAVOC_malloc(88);
    call {:si_unique_call 1719} Tmp_787 := __HAVOC_malloc(88);
    call {:si_unique_call 1720} Tmp_788 := __HAVOC_malloc(140);
    call {:si_unique_call 1721} Tmp_789 := __HAVOC_malloc(88);
    call {:si_unique_call 1722} Tmp_790 := __HAVOC_malloc(88);
    call {:si_unique_call 1723} Tmp_792 := __HAVOC_malloc(88);
    call {:si_unique_call 1724} Tmp_794 := __HAVOC_malloc(88);
    call {:si_unique_call 1725} Tmp_796 := __HAVOC_malloc(88);
    call {:si_unique_call 1726} Tmp_797 := __HAVOC_malloc(88);
    call {:si_unique_call 1727} Tmp_798 := __HAVOC_malloc(88);
    call {:si_unique_call 1728} Tmp_801 := __HAVOC_malloc(88);
    call {:si_unique_call 1729} Tmp_802 := __HAVOC_malloc(88);
    call {:si_unique_call 1730} Tmp_803 := __HAVOC_malloc(88);
    call {:si_unique_call 1731} Tmp_804 := __HAVOC_malloc(88);
    call {:si_unique_call 1732} Tmp_807 := __HAVOC_malloc(88);
    call {:si_unique_call 1733} Tmp_812 := __HAVOC_malloc(88);
    call {:si_unique_call 1734} Tmp_813 := __HAVOC_malloc(88);
    call {:si_unique_call 1735} Tmp_815 := __HAVOC_malloc(88);
    call {:si_unique_call 1736} Tmp_816 := __HAVOC_malloc(192);
    call {:si_unique_call 1737} Tmp_817 := __HAVOC_malloc(88);
    call {:si_unique_call 1738} Tmp_820 := __HAVOC_malloc(88);
    call {:si_unique_call 1739} Tmp_823 := __HAVOC_malloc(88);
    call {:si_unique_call 1740} Tmp_828 := __HAVOC_malloc(88);
    status_60 := 0;
    Tmp_778 := strConst__li2bpl175;
    call {:si_unique_call 1741} DebugPrint(5, 32, Tmp_778);
    NewParameterField := 234;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} BAND(PacketFilter_1, 8) != 0;
    NewParameterField := BAND(NewParameterField, BNOT(2));
    goto L15;

  L15:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(PacketFilter_1, 32) != 0;
    NewParameterField := BOR(NewParameterField, 1);
    goto L18;

  L18:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    goto L22;

  L22:
    Tmp_788 := strConst__li2bpl173;
    call {:si_unique_call 1742} DebugPrint(5, 32, Tmp_788);
    Tmp_749 := status_60;
    return;

  anon45_Then:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    goto L19;

  L19:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_768;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_822;
    assume {:nonnull} Tmp_822 != 0;
    assume Tmp_822 > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(Tmp_822)] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_770;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_810;
    assume {:nonnull} Tmp_810 != 0;
    assume Tmp_810 > 0;
    havoc Tmp_817;
    assume {:nonnull} Tmp_817 != 0;
    assume Tmp_817 > 0;
    Mem_T.INT4[Tmp_817] := 22;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_821;
    assume {:nonnull} Tmp_821 != 0;
    assume Tmp_821 > 0;
    havoc Tmp_794;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    Mem_T.INT4[Tmp_794 + 2 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_752;
    assume {:nonnull} Tmp_752 != 0;
    assume Tmp_752 > 0;
    havoc Tmp_772;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    Mem_T.INT4[Tmp_772 + 3 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_761;
    assume {:nonnull} Tmp_761 != 0;
    assume Tmp_761 > 0;
    havoc Tmp_783;
    assume {:nonnull} Tmp_783 != 0;
    assume Tmp_783 > 0;
    Mem_T.INT4[Tmp_783 + 6 * 4] := 50;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_827;
    assume {:nonnull} Tmp_827 != 0;
    assume Tmp_827 > 0;
    havoc Tmp_769;
    assume {:nonnull} Tmp_769 != 0;
    assume Tmp_769 > 0;
    Mem_T.INT4[Tmp_769 + 9 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_811;
    assume {:nonnull} Tmp_811 != 0;
    assume Tmp_811 > 0;
    havoc Tmp_787;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    Mem_T.INT4[Tmp_787 + 10 * 4] := 46;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_762;
    assume {:nonnull} Tmp_762 != 0;
    assume Tmp_762 > 0;
    havoc Tmp_815;
    assume {:nonnull} Tmp_815 != 0;
    assume Tmp_815 > 0;
    Mem_T.INT4[Tmp_815 + 11 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_757;
    assume {:nonnull} Tmp_757 != 0;
    assume Tmp_757 > 0;
    havoc Tmp_759;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    Mem_T.INT4[Tmp_759 + 12 * 4] := 96;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_814;
    assume {:nonnull} Tmp_814 != 0;
    assume Tmp_814 > 0;
    havoc Tmp_776;
    assume {:nonnull} Tmp_776 != 0;
    assume Tmp_776 > 0;
    Mem_T.INT4[Tmp_776 + 13 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_764;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    havoc Tmp_789;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    Mem_T.INT4[Tmp_789 + 14 * 4] := 242;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_773;
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    havoc Tmp_790;
    assume {:nonnull} Tmp_790 != 0;
    assume Tmp_790 > 0;
    Mem_T.INT4[Tmp_790 + 16 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_785;
    assume {:nonnull} Tmp_785 != 0;
    assume Tmp_785 > 0;
    havoc Tmp_796;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    Mem_T.INT4[Tmp_796 + 17 * 4] := 64;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_791;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    havoc Tmp_758;
    assume {:nonnull} Tmp_758 != 0;
    assume Tmp_758 > 0;
    Mem_T.INT4[Tmp_758 + 18 * 4] := 242;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_799;
    assume {:nonnull} Tmp_799 != 0;
    assume Tmp_799 > 0;
    havoc Tmp_767;
    assume {:nonnull} Tmp_767 != 0;
    assume Tmp_767 > 0;
    Mem_T.INT4[Tmp_767 + 20 * 4] := 63;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_771;
    assume {:nonnull} Tmp_771 != 0;
    assume Tmp_771 > 0;
    havoc Tmp_780;
    assume {:nonnull} Tmp_780 != 0;
    assume Tmp_780 > 0;
    call {:si_unique_call 1743} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_780 + 7 * 4] := boogieTmp;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_826;
    assume {:nonnull} Tmp_826 != 0;
    assume Tmp_826 > 0;
    havoc Tmp_804;
    assume {:nonnull} Tmp_804 != 0;
    assume Tmp_804 > 0;
    call {:si_unique_call 1744} boogieTmp := corral_nondet();
    Mem_T.INT4[Tmp_804 + 1 * 4] := boogieTmp;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_750;
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    havoc Tmp_820;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_829;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    havoc Tmp_803;
    assume {:nonnull} Tmp_803 != 0;
    assume Tmp_803 > 0;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    Mem_T.INT4[Tmp_820 + 3 * 4] := BOR(Mem_T.INT4[Tmp_803 + 3 * 4], 1);
    goto L46;

  L46:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L49;

  L49:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_784;
    assume {:nonnull} Tmp_784 != 0;
    assume Tmp_784 > 0;
    havoc Tmp_812;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_812 != 0;
    assume Tmp_812 > 0;
    havoc vslice_dummy_var_62;
    Mem_T.INT4[Tmp_812 + 4 * 4] := vslice_dummy_var_62;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_763;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    havoc Tmp_760;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    havoc vslice_dummy_var_63;
    Mem_T.INT4[Tmp_760 + 5 * 4] := vslice_dummy_var_63;
    goto L51;

  L51:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_819;
    assume {:nonnull} Tmp_819 != 0;
    assume Tmp_819 > 0;
    havoc Tmp_807;
    assume {:nonnull} Tmp_807 != 0;
    assume Tmp_807 > 0;
    Mem_T.INT4[Tmp_807 + 8 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_753;
    assume {:nonnull} Tmp_753 != 0;
    assume Tmp_753 > 0;
    havoc Tmp_801;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    Mem_T.INT4[Tmp_801 + 15 * 4] := BOR(NewParameterField, 128);
    goto L55;

  L55:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_818;
    assume {:nonnull} Tmp_818 != 0;
    assume Tmp_818 > 0;
    havoc Tmp_823;
    assume {:nonnull} Tmp_823 != 0;
    assume Tmp_823 > 0;
    Mem_T.INT4[Tmp_823 + 19 * 4] := 0;
    goto L58;

  L58:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_808;
    assume {:nonnull} Tmp_808 != 0;
    assume Tmp_808 > 0;
    havoc Tmp_828;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    Mem_T.INT4[Tmp_828 + 21 * 4] := 13;
    goto L61;

  L61:
    call {:si_unique_call 1745} sdv_361 := WaitScb(FdoData_61);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_361 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    bResult_2 := 0;
    counter_2 := 250000;
    goto L91;

  L91:
    call {:si_unique_call 1746} counter_2, Tmp_766, Tmp_800 := NICSetPacketFilter_loop_L91(counter_2, Tmp_766, Tmp_800, FdoData_61);
    goto L91_last;

  L91_last:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} counter_2 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_766;
    assume {:nonnull} Tmp_766 != 0;
    assume Tmp_766 > 0;
    havoc Tmp_800;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Tmp_800 == 128;
    counter_2 := counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Tmp_800 != 128;
    bResult_2 := 1;
    goto L92;

  L92:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} bResult_2 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_805;
    assume {:nonnull} Tmp_805 != 0;
    assume Tmp_805 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 1747} status_60 := D100IssueScbCommand(FdoData_61, 4, 1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_60 == 0;
    goto L103;

  L103:
    call {:si_unique_call 1748} sdv_363 := WaitScb(FdoData_61);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_363 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto L68;

  L68:
    Tmp_816 := strConst__li2bpl174;
    call {:si_unique_call 1749} DebugPrint(5, 32, Tmp_816);
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_809;
    assume {:nonnull} Tmp_809 != 0;
    assume Tmp_809 > 0;
    Tmp_795 := CbStatus__CB_HEADER_STRUC(Tmp_809);
    Tmp_775 := strConst__li2bpl176;
    call {:si_unique_call 1750} DebugPrint(5, 32, Tmp_775);
    i_6 := 0;
    goto L76;

  L76:
    call {:si_unique_call 1751} i_6, Tmp_754, Tmp_777, Tmp_781, Tmp_782, Tmp_786 := NICSetPacketFilter_loop_L76(i_6, Tmp_754, Tmp_777, Tmp_781, Tmp_782, Tmp_786, FdoData_61);
    goto L76_last;

  L76_last:
    assume {:CounterLoop 22} {:Counter "i_6"} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} 22 > i_6;
    Tmp_781 := i_6;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_786;
    assume {:nonnull} Tmp_786 != 0;
    assume Tmp_786 > 0;
    havoc Tmp_782;
    assume {:nonnull} Tmp_782 != 0;
    assume Tmp_782 > 0;
    Tmp_777 := Mem_T.INT4[Tmp_782 + Tmp_781 * 4];
    Tmp_754 := strConst__li2bpl177;
    call {:si_unique_call 1752} DebugPrint(6, 32, Tmp_754);
    i_6 := i_6 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} i_6 >= 22;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_765;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    call {:si_unique_call 1753} status_60 := D100SubmitCommandBlockAndWait(FdoData_61);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_60 != 0;
    status_60 := -1073741661;
    goto L22;

  anon55_Then:
    assume {:partition} status_60 == 0;
    goto L22;

  anon59_Then:
    assume {:partition} sdv_363 == 0;
    status_60 := -1073741668;
    goto L22;

  anon58_Then:
    assume {:partition} status_60 != 0;
    goto L22;

  anon63_Then:
    goto L103;

  anon57_Then:
    assume {:partition} bResult_2 == 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    status_60 := -1073741668;
    goto L22;

  anon56_Then:
    assume {:partition} counter_2 == 0;
    goto L92;

  anon53_Then:
    goto L68;

  anon52_Then:
    assume {:partition} sdv_361 == 0;
    status_60 := -1073741668;
    goto L22;

  anon51_Then:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_755;
    assume {:nonnull} Tmp_755 != 0;
    assume Tmp_755 > 0;
    havoc Tmp_802;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    Mem_T.INT4[Tmp_802 + 21 * 4] := 5;
    goto L61;

  anon49_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_824;
    assume {:nonnull} Tmp_824 != 0;
    assume Tmp_824 > 0;
    havoc Tmp_798;
    assume {:nonnull} Tmp_798 != 0;
    assume Tmp_798 > 0;
    Mem_T.INT4[Tmp_798 + 19 * 4] := 192;
    goto L58;

  anon50_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_751;
    assume {:nonnull} Tmp_751 != 0;
    assume Tmp_751 > 0;
    havoc Tmp_813;
    assume {:nonnull} Tmp_813 != 0;
    assume Tmp_813 > 0;
    Mem_T.INT4[Tmp_813 + 19 * 4] := 128;
    goto L58;

  anon48_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_793;
    assume {:nonnull} Tmp_793 != 0;
    assume Tmp_793 > 0;
    havoc Tmp_774;
    assume {:nonnull} Tmp_774 != 0;
    assume Tmp_774 > 0;
    Mem_T.INT4[Tmp_774 + 8 * 4] := 1;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_806;
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    havoc Tmp_792;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    Mem_T.INT4[Tmp_792 + 15 * 4] := BAND(NewParameterField, BNOT(128));
    goto L55;

  anon46_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_830;
    assume {:nonnull} Tmp_830 != 0;
    assume Tmp_830 > 0;
    havoc Tmp_797;
    assume {:nonnull} Tmp_797 != 0;
    assume Tmp_797 > 0;
    Mem_T.INT4[Tmp_797 + 4 * 4] := 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_779;
    assume {:nonnull} Tmp_779 != 0;
    assume Tmp_779 > 0;
    havoc Tmp_756;
    assume {:nonnull} Tmp_756 != 0;
    assume Tmp_756 > 0;
    Mem_T.INT4[Tmp_756 + 5 * 4] := 0;
    goto L51;

  anon47_Then:
    goto L49;

  anon61_Then:
    goto L46;

  anon44_Then:
    goto L19;

  anon43_Then:
    assume {:partition} BAND(PacketFilter_1, 32) == 0;
    NewParameterField := BAND(NewParameterField, BNOT(1));
    goto L18;

  anon60_Then:
    assume {:partition} BAND(PacketFilter_1, 8) == 0;
    NewParameterField := BOR(NewParameterField, 2);
    goto L15;
}



procedure {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_62: int, actual_Irp_31: int, actual_BytesWritten: int) returns (Tmp_831: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_62: int, actual_Irp_31: int, actual_BytesWritten: int) returns (Tmp_831: int)
{
  var {:dopa} {:scalar} ulInfoLen: int;
  var {:scalar} CurrMediaState: int;
  var {:dopa} {:scalar} ulInfo: int;
  var {:pointer} DataBuffer_1: int;
  var {:scalar} InformationBufferLength_3: int;
  var {:scalar} Oid_2: int;
  var {:scalar} Power: int;
  var {:scalar} BufferLength_1: int;
  var {:pointer} Tmp_832: int;
  var {:scalar} oldIrql_15: int;
  var {:pointer} Tmp_833: int;
  var {:scalar} ulBytesAvailable: int;
  var {:dopa} {:scalar} ul64Info: int;
  var {:dopa} {:scalar} status_61: int;
  var {:scalar} Tmp_834: int;
  var {:pointer} pIrpSp_4: int;
  var {:pointer} Tmp_835: int;
  var {:pointer} Tmp_836: int;
  var {:pointer} pQuery: int;
  var {:pointer} FdoData_62: int;
  var {:pointer} Irp_31: int;
  var {:pointer} BytesWritten: int;
  var boogieTmp: int;
  var vslice_dummy_var_64: int;

  anon0:
    call {:si_unique_call 1754} ulInfoLen := __HAVOC_malloc(4);
    call {:si_unique_call 1755} ulInfo := __HAVOC_malloc(4);
    call {:si_unique_call 1756} Power := __HAVOC_malloc(16);
    call {:si_unique_call 1757} ul64Info := __HAVOC_malloc(4);
    call {:si_unique_call 1758} status_61 := __HAVOC_malloc(4);
    FdoData_62 := actual_FdoData_62;
    Irp_31 := actual_Irp_31;
    BytesWritten := actual_BytesWritten;
    call {:si_unique_call 1759} Tmp_833 := __HAVOC_malloc(180);
    call {:si_unique_call 1760} Tmp_835 := __HAVOC_malloc(16);
    call {:si_unique_call 1761} Tmp_836 := __HAVOC_malloc(108);
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := 0;
    assume {:nonnull} ul64Info != 0;
    assume ul64Info > 0;
    Mem_T.INT4[ul64Info] := 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 4;
    InformationBufferLength_3 := 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    call {:si_unique_call 1762} pIrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_31);
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    havoc DataBuffer_1;
    assume {:nonnull} pIrpSp_4 != 0;
    assume pIrpSp_4 > 0;
    havoc BufferLength_1;
    Tmp_836 := strConst__li2bpl179;
    call {:si_unique_call 1763} DebugPrint(5, 32, Tmp_836);
    Oid_2 := 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} 8 > BufferLength_1;
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := 5;
    goto L41;

  L41:
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} Mem_T.INT4[status_61] != 0;
    goto L43;

  L43:
    Tmp_833 := strConst__li2bpl178;
    call {:si_unique_call 1764} DebugPrint(6, 32, Tmp_833);
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Tmp_831 := Mem_T.INT4[status_61];
    return;

  anon71_Then:
    assume {:partition} Mem_T.INT4[status_61] == 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} InformationBufferLength_3 >= Mem_T.INT4[ulInfoLen];
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[BytesWritten] := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} Mem_T.INT4[ulInfoLen] != 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    call {:si_unique_call 1765} sdv_RtlMoveMemory(0, 0, Mem_T.INT4[ulInfoLen]);
    goto L43;

  anon103_Then:
    assume {:partition} Mem_T.INT4[ulInfoLen] == 0;
    goto L43;

  anon72_Then:
    assume {:partition} Mem_T.INT4[ulInfoLen] > InformationBufferLength_3;
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[BytesWritten] := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := -1073741789;
    goto L43;

  anon102_Then:
    assume {:partition} BufferLength_1 >= 8;
    pQuery := DataBuffer_1;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Oid_2;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Tmp_835;
    InformationBufferLength_3 := BufferLength_1 - 4;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} Oid_2 != 65799;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} Oid_2 != 65812;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} Oid_2 != 131329;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Oid_2 != 131330;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} Oid_2 != 131331;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} Oid_2 != 131332;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Oid_2 != 131333;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} Oid_2 != 131597;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Oid_2 != 131598;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} Oid_2 != 16843009;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Oid_2 != 16843010;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} Oid_2 != 16843012;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Oid_2 != 16908545;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Oid_2 != 16908546;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Oid_2 != 16908547;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Oid_2 != 16908801;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} Oid_2 != 16908802;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Oid_2 != 16908803;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Oid_2 != 16908804;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Oid_2 != 16908805;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Oid_2 != 16908806;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Oid_2 != 16908807;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Oid_2 != -50265856;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} Oid_2 == -50265854;
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := 0;
    goto L41;

  anon79_Then:
    assume {:partition} Oid_2 != -50265854;
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := -1073741637;
    goto L41;

  anon80_Then:
    assume {:partition} Oid_2 == -50265856;
    call {:si_unique_call 1766} NICFillPoMgmtCaps(FdoData_62, Power, status_61, ulInfoLen);
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Mem_T.INT4[status_61] != 0;
    goto L41;

  anon74_Then:
    assume {:partition} Mem_T.INT4[status_61] == 0;
    goto L41;

  anon81_Then:
    assume {:partition} Oid_2 == 16908807;
    goto L60;

  L60:
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    call {:si_unique_call 1767} boogieTmp := NICGetStatsCounters(FdoData_62, Oid_2, ul64Info);
    Mem_T.INT4[status_61] := boogieTmp;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 8;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} Mem_T.INT4[status_61] == 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 4 > InformationBufferLength_3;
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    Mem_T.INT4[status_61] := -1073741789;
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    Mem_T.INT4[BytesWritten] := ulBytesAvailable;
    goto L41;

  anon75_Then:
    assume {:partition} InformationBufferLength_3 >= 4;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} InformationBufferLength_3 > ulBytesAvailable;
    Tmp_834 := ulBytesAvailable;
    goto L94;

  L94:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := Tmp_834;
    goto L41;

  anon76_Then:
    assume {:partition} ulBytesAvailable >= InformationBufferLength_3;
    Tmp_834 := InformationBufferLength_3;
    goto L94;

  anon105_Then:
    assume {:partition} Mem_T.INT4[status_61] != 0;
    goto L41;

  anon82_Then:
    assume {:partition} Oid_2 == 16908806;
    goto L60;

  anon83_Then:
    assume {:partition} Oid_2 == 16908805;
    goto L60;

  anon84_Then:
    assume {:partition} Oid_2 == 16908804;
    goto L60;

  anon85_Then:
    assume {:partition} Oid_2 == 16908803;
    goto L60;

  anon86_Then:
    assume {:partition} Oid_2 == 16908802;
    goto L60;

  anon87_Then:
    assume {:partition} Oid_2 == 16908801;
    goto L60;

  anon88_Then:
    assume {:partition} Oid_2 == 16908547;
    goto L60;

  anon89_Then:
    assume {:partition} Oid_2 == 16908546;
    goto L60;

  anon90_Then:
    assume {:partition} Oid_2 == 16908545;
    goto L60;

  anon91_Then:
    assume {:partition} Oid_2 == 16843012;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := 32;
    goto L41;

  anon92_Then:
    assume {:partition} Oid_2 == 16843010;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 6;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    goto L41;

  anon93_Then:
    assume {:partition} Oid_2 == 16843009;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    Mem_T.INT4[ulInfoLen] := 6;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    ulBytesAvailable := Mem_T.INT4[ulInfoLen];
    goto L41;

  anon94_Then:
    assume {:partition} Oid_2 == 131598;
    goto L60;

  anon95_Then:
    assume {:partition} Oid_2 == 131597;
    goto L60;

  anon96_Then:
    assume {:partition} Oid_2 == 131333;
    goto L60;

  anon97_Then:
    assume {:partition} Oid_2 == 131332;
    goto L60;

  anon98_Then:
    assume {:partition} Oid_2 == 131331;
    goto L60;

  anon99_Then:
    assume {:partition} Oid_2 == 131330;
    goto L60;

  anon100_Then:
    assume {:partition} Oid_2 == 131329;
    goto L60;

  anon101_Then:
    assume {:partition} Oid_2 == 65812;
    goto L59;

  L59:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Mem_T.INT4[ulInfoLen] <= InformationBufferLength_3;
    call {:si_unique_call 1768} Tmp_832 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    Mem_T.INT4[Tmp_832] := oldIrql_15;
    call {:si_unique_call 1769} sdv_KeAcquireSpinLock(0, Tmp_832);
    assume {:nonnull} Tmp_832 != 0;
    assume Tmp_832 > 0;
    oldIrql_15 := Mem_T.INT4[Tmp_832];
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} status_61 != 0;
    assume status_61 > 0;
    call {:si_unique_call 1770} boogieTmp := PciDrvQueueIoctlIrp(FdoData_62, Irp_31);
    Mem_T.INT4[status_61] := boogieTmp;
    call {:si_unique_call 1771} sdv_KeReleaseSpinLock(0, oldIrql_15);
    goto L41;

  anon77_Then:
    call {:si_unique_call 1772} sdv_KeReleaseSpinLock(0, oldIrql_15);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Oid_2 == 65799;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    havoc vslice_dummy_var_64;
    Mem_T.INT4[ulInfo] := vslice_dummy_var_64;
    goto L41;

  anon78_Then:
    assume {:partition} Oid_2 != 65799;
    call {:si_unique_call 1773} CurrMediaState := NICIndicateMediaState(FdoData_62);
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    Mem_T.INT4[ulInfo] := CurrMediaState;
    goto L41;

  anon73_Then:
    assume {:partition} InformationBufferLength_3 < Mem_T.INT4[ulInfoLen];
    goto L41;

  anon104_Then:
    assume {:partition} Oid_2 == 65799;
    goto L59;
}



procedure {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_63: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_63: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int)
{
  var {:scalar} bIsPoMgmtSupported: int;
  var {:pointer} FdoData_63: int;
  var {:pointer} pPower: int;
  var {:pointer} pStatus: int;
  var {:pointer} pulInfoLen: int;
  var vslice_dummy_var_199: int;

  anon0:
    call {:si_unique_call 1774} vslice_dummy_var_199 := __HAVOC_malloc(4);
    FdoData_63 := actual_FdoData_63;
    pPower := actual_pPower;
    pStatus := actual_pStatus;
    pulInfoLen := actual_pulInfoLen;
    call {:si_unique_call 1775} bIsPoMgmtSupported := IsPoMgmtSupported(FdoData_63);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} bIsPoMgmtSupported == 1;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    Mem_T.INT4[pulInfoLen] := 16;
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    Mem_T.INT4[pStatus] := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} bIsPoMgmtSupported != 1;
    call {:si_unique_call 1776} sdv_RtlZeroMemory(0, 16);
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    Mem_T.INT4[pStatus] := -1073741637;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    Mem_T.INT4[pulInfoLen] := 0;
    goto L1;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1777} vslice_dummy_var_200 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_64: int) returns (Tmp_841: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_64: int) returns (Tmp_841: int)
{
  var {:scalar} CurrMediaState_1: int;
  var {:pointer} Tmp_842: int;
  var {:pointer} Tmp_843: int;
  var {:pointer} Tmp_844: int;
  var {:scalar} oldIrql_16: int;
  var {:pointer} FdoData_64: int;

  anon0:
    FdoData_64 := actual_FdoData_64;
    call {:si_unique_call 1778} Tmp_843 := __HAVOC_malloc(108);
    call {:si_unique_call 1779} Tmp_844 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    Mem_T.INT4[Tmp_844] := oldIrql_16;
    call {:si_unique_call 1780} sdv_KeAcquireSpinLock(0, Tmp_844);
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    oldIrql_16 := Mem_T.INT4[Tmp_844];
    call {:si_unique_call 1781} CurrMediaState_1 := GetMediaState(FdoData_64);
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} CurrMediaState_1 != 0;
    Tmp_842 := strConst__li2bpl181;
    goto L19;

  L19:
    Tmp_843 := strConst__li2bpl182;
    call {:si_unique_call 1782} DebugPrint(3, 32, Tmp_843);
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} CurrMediaState_1 != 0;
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto L26;

  L26:
    call {:si_unique_call 1783} sdv_KeReleaseSpinLock(0, oldIrql_16);
    call {:si_unique_call 1784} NICServiceIndicateStatusIrp(FdoData_64);
    goto L32;

  L32:
    Tmp_841 := CurrMediaState_1;
    return;

  anon9_Then:
    assume {:partition} CurrMediaState_1 == 0;
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto L26;

  anon8_Then:
    assume {:partition} CurrMediaState_1 == 0;
    Tmp_842 := strConst__li2bpl180;
    goto L19;

  anon7_Then:
    call {:si_unique_call 1785} sdv_KeReleaseSpinLock(0, oldIrql_16);
    goto L32;
}



procedure {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_845: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_845 == 1 || Tmp_845 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_845: int)
{
  var {:scalar} counter_3: int;
  var {:pointer} Tmp_846: int;
  var {:pointer} Tmp_847: int;
  var {:scalar} bResult_3: int;
  var {:pointer} Tmp_849: int;
  var {:pointer} Adapter_1: int;
  var {:scalar} Recoverable: int;
  var {:pointer} DataValue: int;
  var boogieTmp: int;
  var vslice_dummy_var_65: int;

  anon0:
    Adapter_1 := actual_Adapter_1;
    Recoverable := actual_Recoverable;
    DataValue := actual_DataValue;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_847;
    assume {:nonnull} Tmp_847 != 0;
    assume Tmp_847 > 0;
    call {:si_unique_call 1786} boogieTmp := corral_nondet();
    bResult_3 := 0;
    counter_3 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 1787} counter_3, Tmp_846 := MdiRead_loop_L11(counter_3, Tmp_846, Adapter_1);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} counter_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_846;
    assume {:nonnull} Tmp_846 != 0;
    assume Tmp_846 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    counter_3 := counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    assume false;
    return;

  anon12_Then:
    bResult_3 := 1;
    goto L12;

  L12:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} bResult_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_849;
    assume {:nonnull} DataValue != 0;
    assume DataValue > 0;
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    havoc vslice_dummy_var_65;
    Mem_T.INT4[DataValue] := vslice_dummy_var_65;
    Tmp_845 := bResult_3;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} bResult_3 == 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Recoverable != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    Tmp_845 := bResult_3;
    goto L1;

  anon11_Then:
    assume {:partition} Recoverable == 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    goto L24;

  anon9_Then:
    assume {:partition} counter_3 == 0;
    goto L12;
}



procedure {:origName "WaitScb"} WaitScb(actual_FdoData_65: int) returns (Tmp_850: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_850 == 1 || Tmp_850 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "WaitScb"} WaitScb(actual_FdoData_65: int) returns (Tmp_850: int)
{
  var {:scalar} counter_4: int;
  var {:pointer} pCSRAddress: int;
  var {:scalar} bResult_4: int;
  var {:pointer} Tmp_852: int;
  var {:pointer} FdoData_65: int;

  anon0:
    FdoData_65 := actual_FdoData_65;
    call {:si_unique_call 1788} Tmp_852 := __HAVOC_malloc(136);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    havoc pCSRAddress;
    bResult_4 := 0;
    counter_4 := 30000;
    goto L9;

  L9:
    call {:si_unique_call 1789} counter_4 := WaitScb_loop_L9(counter_4, pCSRAddress);
    goto L9_last;

  L9_last:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_4 != 0;
    assume {:nonnull} pCSRAddress != 0;
    assume pCSRAddress > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_4 := counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_4 := 1;
    goto L10;

  L10:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_4 != 0;
    goto L21;

  L21:
    Tmp_850 := bResult_4;
    return;

  anon8_Then:
    assume {:partition} bResult_4 == 0;
    Tmp_852 := strConst__li2bpl183;
    call {:si_unique_call 1790} DebugPrint(2, 4096, Tmp_852);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    goto L21;

  anon7_Then:
    assume {:partition} counter_4 == 0;
    goto L10;
}



procedure {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_853: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_853 == 0 || Tmp_853 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_853: int)
{
  var {:scalar} counter_5: int;
  var {:pointer} Tmp_854: int;
  var {:pointer} Tmp_855: int;
  var {:pointer} CommandBlock: int;
  var {:scalar} sdv_372: int;
  var {:pointer} Tmp_856: int;
  var {:pointer} Tmp_857: int;
  var {:scalar} status_62: int;
  var {:scalar} bResult_5: int;
  var {:pointer} Adapter_2: int;
  var vslice_dummy_var_201: int;

  anon0:
    Adapter_2 := actual_Adapter_2;
    call {:si_unique_call 1791} Tmp_856 := __HAVOC_malloc(64);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc CommandBlock;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))] := 0;
    call {:si_unique_call 1792} vslice_dummy_var_201 := D100IssueScbCommand(Adapter_2, 16, 0);
    call {:si_unique_call 1793} sdv_372 := WaitScb(Adapter_2);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_372 != 0;
    bResult_5 := 0;
    counter_5 := 150000;
    goto L20;

  L20:
    call {:si_unique_call 1794} counter_5 := D100SubmitCommandBlockAndWait_loop_L20(counter_5, CommandBlock);
    goto L20_last;

  L20_last:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} counter_5 != 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 32768) == 0;
    counter_5 := counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 32768) != 0;
    bResult_5 := 1;
    goto L21;

  L21:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bResult_5 != 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_855;
    assume {:nonnull} Tmp_855 != 0;
    assume Tmp_855 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_854;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_857;
    assume {:nonnull} Tmp_854 != 0;
    assume Tmp_854 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    goto L31;

  L31:
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 8192) != 0;
    status_62 := 0;
    goto L37;

  L37:
    Tmp_853 := status_62;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(CommandBlock))))], 8192) == 0;
    Tmp_856 := strConst__li2bpl184;
    call {:si_unique_call 1795} DebugPrint(2, 4096, Tmp_856);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    status_62 := -1073741668;
    goto L37;

  anon18_Then:
    goto L31;

  anon15_Then:
    assume {:partition} bResult_5 == 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    Tmp_853 := -1073741668;
    goto L1;

  anon14_Then:
    assume {:partition} counter_5 == 0;
    goto L21;

  anon13_Then:
    assume {:partition} sdv_372 == 0;
    Tmp_853 := -1073741668;
    goto L1;
}



procedure {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_859: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_859: int)
{
  var {:dopa} {:scalar} MdiStatusReg: int;
  var {:scalar} bResult2: int;
  var {:scalar} bResult1: int;
  var {:pointer} Adapter_3: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 1796} MdiStatusReg := __HAVOC_malloc(4);
    Adapter_3 := actual_Adapter_3;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    Mem_T.INT4[MdiStatusReg] := 0;
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_66;
    call {:si_unique_call 1797} bResult1 := MdiRead(Adapter_3, 1, vslice_dummy_var_66, 1, MdiStatusReg);
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_67;
    call {:si_unique_call 1798} bResult2 := MdiRead(Adapter_3, 1, vslice_dummy_var_67, 1, MdiStatusReg);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} bResult1 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult2 != 0;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} BAND(Mem_T.INT4[MdiStatusReg], 4) != 0;
    Tmp_859 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} BAND(Mem_T.INT4[MdiStatusReg], 4) == 0;
    Tmp_859 := 1;
    goto L1;

  anon8_Then:
    assume {:partition} bResult2 == 0;
    goto L16;

  L16:
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc Tmp_859;
    goto L1;

  anon7_Then:
    assume {:partition} bResult1 == 0;
    goto L16;
}



procedure {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int)
{
  var {:pointer} Tmp_861: int;
  var {:scalar} counter_6: int;
  var {:pointer} Tmp_862: int;
  var {:scalar} bResult_6: int;
  var {:pointer} Adapter_4: int;
  var vslice_dummy_var_202: int;

  anon0:
    call {:si_unique_call 1799} vslice_dummy_var_202 := __HAVOC_malloc(4);
    Adapter_4 := actual_Adapter_4;
    call {:si_unique_call 1800} NICIssueSelectiveReset(Adapter_4);
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_862;
    assume {:nonnull} Tmp_862 != 0;
    assume Tmp_862 > 0;
    bResult_6 := 0;
    counter_6 := 100;
    goto L11;

  L11:
    call {:si_unique_call 1801} Tmp_861, counter_6 := NICIssueFullReset_loop_L11(Tmp_861, counter_6, Adapter_4);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_6 != 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_861;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_6 := counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_6 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_6 != 0;
    call {:si_unique_call 1802} NICDisableInterrupt(Adapter_4);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_6 == 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_6 == 0;
    goto L12;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_203: int;

  anon0:
    call {:si_unique_call 1803} vslice_dummy_var_203 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int)
{
  var {:pointer} Tmp_867: int;
  var {:pointer} Tmp_868: int;
  var {:pointer} Tmp_869: int;
  var {:pointer} Tmp_870: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_873: int;
  var {:pointer} Tmp_874: int;
  var {:pointer} Tmp_875: int;
  var {:scalar} counter_7: int;
  var {:pointer} Tmp_876: int;
  var {:pointer} Tmp_877: int;
  var {:pointer} Tmp_878: int;
  var {:pointer} Tmp_879: int;
  var {:pointer} Tmp_880: int;
  var {:pointer} Tmp_881: int;
  var {:pointer} Tmp_882: int;
  var {:pointer} Tmp_883: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} Tmp_885: int;
  var {:pointer} Tmp_886: int;
  var {:pointer} Tmp_887: int;
  var {:pointer} Tmp_888: int;
  var {:pointer} Tmp_889: int;
  var {:pointer} Tmp_891: int;
  var {:pointer} Tmp_892: int;
  var {:pointer} Tmp_893: int;
  var {:pointer} Tmp_894: int;
  var {:pointer} Tmp_895: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} Tmp_897: int;
  var {:pointer} Tmp_898: int;
  var {:pointer} Tmp_899: int;
  var {:pointer} Tmp_900: int;
  var {:scalar} oldIrql_17: int;
  var {:pointer} Tmp_901: int;
  var {:pointer} Tmp_902: int;
  var {:pointer} Tmp_903: int;
  var {:pointer} Tmp_904: int;
  var {:pointer} Tmp_905: int;
  var {:pointer} Tmp_906: int;
  var {:pointer} Tmp_907: int;
  var {:pointer} Tmp_908: int;
  var {:scalar} bResult_7: int;
  var {:pointer} Tmp_909: int;
  var {:pointer} Tmp_910: int;
  var {:pointer} Tmp_911: int;
  var {:pointer} Tmp_912: int;
  var {:pointer} Tmp_913: int;
  var {:pointer} Tmp_914: int;
  var {:pointer} Tmp_915: int;
  var {:pointer} Tmp_916: int;
  var {:pointer} Tmp_917: int;
  var {:pointer} Tmp_918: int;
  var {:pointer} Adapter_5: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 1804} vslice_dummy_var_204 := __HAVOC_malloc(4);
    Adapter_5 := actual_Adapter_5;
    call {:si_unique_call 1805} Tmp_873 := __HAVOC_malloc(72);
    call {:si_unique_call 1806} Tmp_875 := __HAVOC_malloc(76);
    call {:si_unique_call 1807} Tmp_878 := __HAVOC_malloc(100);
    call {:si_unique_call 1808} Tmp_879 := __HAVOC_malloc(92);
    call {:si_unique_call 1809} Tmp_884 := __HAVOC_malloc(92);
    call {:si_unique_call 1810} Tmp_885 := __HAVOC_malloc(84);
    call {:si_unique_call 1811} Tmp_893 := __HAVOC_malloc(108);
    call {:si_unique_call 1812} Tmp_895 := __HAVOC_malloc(92);
    call {:si_unique_call 1813} Tmp_896 := __HAVOC_malloc(96);
    call {:si_unique_call 1814} Tmp_899 := __HAVOC_malloc(100);
    call {:si_unique_call 1815} Tmp_906 := __HAVOC_malloc(88);
    call {:si_unique_call 1816} Tmp_907 := __HAVOC_malloc(116);
    call {:si_unique_call 1817} Tmp_909 := __HAVOC_malloc(92);
    call {:si_unique_call 1818} Tmp_910 := __HAVOC_malloc(80);
    call {:si_unique_call 1819} Tmp_914 := __HAVOC_malloc(100);
    call {:si_unique_call 1820} Tmp_918 := __HAVOC_malloc(76);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_900;
    assume {:nonnull} Tmp_900 != 0;
    assume Tmp_900 > 0;
    call {:si_unique_call 1821} Tmp_908 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_908 != 0;
    assume Tmp_908 > 0;
    Mem_T.INT4[Tmp_908] := oldIrql_17;
    call {:si_unique_call 1822} sdv_KeAcquireSpinLock(0, Tmp_908);
    assume {:nonnull} Tmp_908 != 0;
    assume Tmp_908 > 0;
    oldIrql_17 := Mem_T.INT4[Tmp_908];
    call {:si_unique_call 1823} vslice_dummy_var_205 := D100IssueScbCommand(Adapter_5, 112, 1);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    call {:si_unique_call 1824} sdv_KeReleaseSpinLock(0, oldIrql_17);
    bResult_7 := 0;
    counter_7 := 100000;
    goto L19;

  L19:
    call {:si_unique_call 1825} counter_7, Tmp_904 := DumpStatsCounters_loop_L19(counter_7, Tmp_904, Adapter_5);
    goto L19_last;

  L19_last:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_7 != 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_904;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_7 := counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_7 := 1;
    goto L20;

  L20:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_7 != 0;
    Tmp_875 := strConst__li2bpl185;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_880;
    call {:si_unique_call 1826} DebugPrint(6, 32, Tmp_875);
    Tmp_873 := strConst__li2bpl186;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_882;
    call {:si_unique_call 1827} DebugPrint(6, 32, Tmp_873);
    Tmp_918 := strConst__li2bpl187;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_911;
    call {:si_unique_call 1828} DebugPrint(6, 32, Tmp_918);
    Tmp_910 := strConst__li2bpl188;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_886;
    call {:si_unique_call 1829} DebugPrint(6, 32, Tmp_910);
    Tmp_884 := strConst__li2bpl189;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_869;
    call {:si_unique_call 1830} DebugPrint(6, 32, Tmp_884);
    Tmp_906 := strConst__li2bpl190;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_876;
    call {:si_unique_call 1831} DebugPrint(6, 32, Tmp_906);
    Tmp_895 := strConst__li2bpl191;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_912;
    call {:si_unique_call 1832} DebugPrint(6, 32, Tmp_895);
    Tmp_896 := strConst__li2bpl192;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_868;
    call {:si_unique_call 1833} DebugPrint(6, 32, Tmp_896);
    Tmp_914 := strConst__li2bpl193;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_881;
    call {:si_unique_call 1834} DebugPrint(6, 32, Tmp_914);
    Tmp_885 := strConst__li2bpl194;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_915;
    call {:si_unique_call 1835} DebugPrint(6, 32, Tmp_885);
    Tmp_909 := strConst__li2bpl195;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_891;
    call {:si_unique_call 1836} DebugPrint(6, 32, Tmp_909);
    Tmp_907 := strConst__li2bpl196;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_905;
    call {:si_unique_call 1837} DebugPrint(6, 32, Tmp_907);
    Tmp_878 := strConst__li2bpl197;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_889;
    call {:si_unique_call 1838} DebugPrint(6, 32, Tmp_878);
    Tmp_893 := strConst__li2bpl198;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_913;
    call {:si_unique_call 1839} DebugPrint(6, 32, Tmp_893);
    Tmp_879 := strConst__li2bpl199;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_867;
    call {:si_unique_call 1840} DebugPrint(6, 32, Tmp_879);
    Tmp_899 := strConst__li2bpl200;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_874;
    call {:si_unique_call 1841} DebugPrint(6, 32, Tmp_899);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_870;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_870 != 0;
    assume Tmp_870 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_903;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_903 != 0;
    assume Tmp_903 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_877;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_877 != 0;
    assume Tmp_877 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_916;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_897;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_897 != 0;
    assume Tmp_897 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_887;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_883;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_872;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_917;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_917 != 0;
    assume Tmp_917 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_892;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_892 != 0;
    assume Tmp_892 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_871;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_902;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_902 != 0;
    assume Tmp_902 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_894;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_894 != 0;
    assume Tmp_894 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_901;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_901 != 0;
    assume Tmp_901 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_888;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_898;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_898 != 0;
    assume Tmp_898 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_7 == 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_7 == 0;
    goto L20;
}



procedure {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int)
{
  var {:pointer} Tmp_919: int;
  var {:scalar} Tmp_920: int;
  var {:scalar} counter_8: int;
  var {:pointer} Tmp_921: int;
  var {:pointer} Tmp_922: int;
  var {:pointer} Tmp_923: int;
  var {:scalar} counter_9: int;
  var {:scalar} bResult_8: int;
  var {:pointer} Tmp_926: int;
  var {:pointer} Tmp_927: int;
  var {:pointer} Adapter_6: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;

  anon0:
    call {:si_unique_call 1842} vslice_dummy_var_206 := __HAVOC_malloc(4);
    Adapter_6 := actual_Adapter_6;
    call {:si_unique_call 1843} Tmp_927 := __HAVOC_malloc(208);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L9;

  L9:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_8 := 0;
    counter_8 := 100000;
    goto L13;

  L13:
    call {:si_unique_call 1844} Tmp_920, counter_8, Tmp_921 := NICIssueSelectiveReset_loop_L13(Tmp_920, counter_8, Tmp_921, Adapter_6);
    goto L13_last;

  L13_last:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} counter_8 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_921;
    assume {:nonnull} Tmp_921 != 0;
    assume Tmp_921 > 0;
    havoc Tmp_920;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_920 == 128;
    counter_8 := counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} Tmp_920 != 128;
    bResult_8 := 1;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bResult_8 != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_919;
    assume {:nonnull} Tmp_919 != 0;
    assume Tmp_919 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1845} vslice_dummy_var_208 := D100IssueScbCommand(Adapter_6, 4, 1);
    goto L25;

  L25:
    Tmp_927 := strConst__li2bpl201;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_923;
    call {:si_unique_call 1846} DebugPrint(5, 4096, Tmp_927);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_926;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    bResult_8 := 0;
    counter_9 := 100;
    goto L39;

  L39:
    call {:si_unique_call 1847} Tmp_922, counter_9 := NICIssueSelectiveReset_loop_L39(Tmp_922, counter_9, Adapter_6);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} counter_9 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_922;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    counter_9 := counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    bResult_8 := 1;
    goto L40;

  L40:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} bResult_8 != 0;
    goto L49;

  L49:
    call {:si_unique_call 1848} NICDisableInterrupt(Adapter_6);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L49;

  anon23_Then:
    assume {:partition} counter_9 == 0;
    goto L40;

  anon26_Then:
    goto L25;

  anon22_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L24;

  anon21_Then:
    assume {:partition} counter_8 == 0;
    goto L14;

  anon20_Then:
    goto L1;

  anon19_Then:
    call {:si_unique_call 1849} vslice_dummy_var_207 := WaitScb(Adapter_6);
    goto L9;
}



procedure {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int)
{
  var {:scalar} counter_10: int;
  var {:pointer} Tmp_929: int;
  var {:pointer} Tmp_930: int;
  var {:scalar} bResult_9: int;
  var {:pointer} Adapter_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_209: int;

  anon0:
    call {:si_unique_call 1850} vslice_dummy_var_209 := __HAVOC_malloc(4);
    Adapter_7 := actual_Adapter_7;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_929;
    assume {:nonnull} Tmp_929 != 0;
    assume Tmp_929 > 0;
    call {:si_unique_call 1851} boogieTmp := corral_nondet();
    bResult_9 := 0;
    counter_10 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 1852} counter_10, Tmp_930 := MdiWrite_loop_L11(counter_10, Tmp_930, Adapter_7);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_10 != 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_930;
    assume {:nonnull} Tmp_930 != 0;
    assume Tmp_930 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_10 := counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_9 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_9 == 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_9 != 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_10 == 0;
    goto L12;
}



procedure {:origName "ResetPhy"} ResetPhy(actual_FdoData_66: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ResetPhy"} ResetPhy(actual_FdoData_66: int)
{
  var {:scalar} MdiControlReg: int;
  var {:pointer} FdoData_66: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_68: int;

  anon0:
    call {:si_unique_call 1853} vslice_dummy_var_210 := __HAVOC_malloc(4);
    FdoData_66 := actual_FdoData_66;
    MdiControlReg := 37376;
    assume {:nonnull} FdoData_66 != 0;
    assume FdoData_66 > 0;
    havoc vslice_dummy_var_68;
    call {:si_unique_call 1854} MdiWrite(FdoData_66, 0, vslice_dummy_var_68, MdiControlReg);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_211: int;

  anon0:
    call {:si_unique_call 1855} vslice_dummy_var_211 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_212: int;

  anon0:
    call {:si_unique_call 1856} vslice_dummy_var_212 := __HAVOC_malloc(4);
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    havoc Mem_T.INT4;
    return;
}



procedure {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_938: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} Tmp_938 == 0 || Tmp_938 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_938: int)
{
  var {:scalar} status_64: int;
  var {:scalar} ulAugend: int;
  var {:scalar} ulAddend: int;
  var {:pointer} pulResult: int;

  anon0:
    ulAugend := actual_ulAugend;
    ulAddend := actual_ulAddend;
    pulResult := actual_pulResult;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ulAugend + ulAddend >= ulAugend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    Mem_T.INT4[pulResult] := ulAugend + ulAddend;
    status_64 := 0;
    goto L8;

  L8:
    Tmp_938 := status_64;
    return;

  anon3_Then:
    assume {:partition} ulAugend > ulAugend + ulAddend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    Mem_T.INT4[pulResult] := -1;
    status_64 := -1073741675;
    goto L8;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_940: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_940: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry_1: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1857} FatalListEntryError(ListHead_2, Entry_1, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_940 := Entry_1;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_213: int;

  anon0:
    call {:si_unique_call 1858} vslice_dummy_var_213 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_67: int) returns (Tmp_944: int);
  free ensures {:va_keep} Tmp_944 == -1073741661 || Tmp_944 == 16 || Tmp_944 == -1073741667 || Tmp_944 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_67: int) returns (Tmp_944: int)
{
  var {:scalar} Status_3: int;
  var {:pointer} FdoData_67: int;

  anon0:
    FdoData_67 := actual_FdoData_67;
    Status_3 := -1073741823;
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Status_3 := -1073741661;
    goto L8;

  L8:
    Tmp_944 := Status_3;
    return;

  anon9_Then:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Status_3 := 16;
    goto L8;

  anon7_Then:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Status_3 := -1073741667;
    goto L8;

  anon8_Then:
    goto L8;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int)
{
  var {:pointer} ListHead_3: int;
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 1859} vslice_dummy_var_214 := __HAVOC_malloc(4);
    ListHead_3 := actual_ListHead_3;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    return;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1_1: int, actual_p2_1: int, actual_p3: int)
{
  var vslice_dummy_var_215: int;

  anon0:
    call {:si_unique_call 1860} vslice_dummy_var_215 := __HAVOC_malloc(4);
    call {:si_unique_call 1861} RtlFailFast(3);
    return;
}



procedure {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_68: int) returns (Tmp_950: int);
  free ensures {:va_keep} Tmp_950 == 1 || Tmp_950 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_68: int) returns (Tmp_950: int)
{
  var {:pointer} FdoData_68: int;

  anon0:
    FdoData_68 := actual_FdoData_68;
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_950 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    goto L4;

  L4:
    Tmp_950 := 0;
    goto L1;

  anon8_Then:
    goto L4;

  anon7_Then:
    goto L4;
}



procedure {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_69: int, actual_ScbCommandLow: int, actual_WaitForScb: int) returns (Tmp_952: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_952 == -1073741668 || Tmp_952 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_69: int, actual_ScbCommandLow: int, actual_WaitForScb: int) returns (Tmp_952: int)
{
  var {:pointer} Tmp_953: int;
  var {:scalar} sdv_378: int;
  var {:pointer} FdoData_69: int;
  var {:scalar} ScbCommandLow: int;
  var {:scalar} WaitForScb: int;

  anon0:
    FdoData_69 := actual_FdoData_69;
    ScbCommandLow := actual_ScbCommandLow;
    WaitForScb := actual_WaitForScb;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} WaitForScb == 1;
    call {:si_unique_call 1862} sdv_378 := WaitScb(FdoData_69);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_378 == 0;
    Tmp_952 := -1073741668;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_378 != 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_69 != 0;
    assume FdoData_69 > 0;
    havoc Tmp_953;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    Tmp_952 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} WaitForScb != 1;
    goto L4;
}



procedure {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_70: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_70: int)
{
  var {:pointer} Tmp_956: int;
  var {:pointer} FdoData_70: int;
  var vslice_dummy_var_216: int;

  anon0:
    call {:si_unique_call 1863} vslice_dummy_var_216 := __HAVOC_malloc(4);
    FdoData_70 := actual_FdoData_70;
    assume {:nonnull} FdoData_70 != 0;
    assume FdoData_70 > 0;
    havoc Tmp_956;
    assume {:nonnull} Tmp_956 != 0;
    assume Tmp_956 > 0;
    return;
}



procedure {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_2: int, actual_Entry_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_2: int, actual_Entry_2: int)
{
  var {:pointer} Tmp_960: int;
  var {:pointer} Lookaside_2: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 1864} vslice_dummy_var_217 := __HAVOC_malloc(4);
    Lookaside_2 := actual_Lookaside_2;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    Tmp_960 := ListHead__GENERAL_LOOKASIDE(L__NPAGED_LOOKASIDE_LIST(Lookaside_2));
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Tmp_960 != 0;
    assume Tmp_960 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L1;

  anon5_Then:
    call {:si_unique_call 1865} vslice_dummy_var_218 := __HAVOC_malloc(1);
    goto L1;
}



procedure {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_8: int) returns (Tmp_961: int);
  free ensures {:va_keep} Tmp_961 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_8: int) returns (Tmp_961: int)
{
  var {:pointer} FdoData_71: int;
  var {:pointer} Tmp_963: int;
  var {:pointer} Context_8: int;

  anon0:
    Context_8 := actual_Context_8;
    FdoData_71 := Context_8;
    assume {:nonnull} FdoData_71 != 0;
    assume FdoData_71 > 0;
    havoc Tmp_963;
    assume {:nonnull} Tmp_963 != 0;
    assume Tmp_963 > 0;
    Tmp_961 := 1;
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_383: int, actual_sdv_384: int) returns (Tmp_966: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_383: int, actual_sdv_384: int) returns (Tmp_966: int)
{
  var {:scalar} sdv_385: int;

  anon0:
    call {:si_unique_call 1866} sdv_385 := __HAVOC_malloc(4);
    call {:si_unique_call 1867} Tmp_966 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_966 != 0;
    assume Tmp_966 > 0;
    assume {:nonnull} sdv_385 != 0;
    assume sdv_385 > 0;
    Mem_T.INT4[Tmp_966] := Mem_T.INT4[sdv_385];
    return;
}



procedure {:origName "_sdv_init18"} _sdv_init18();
  modifies SLAM_guard_S_0, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "_sdv_init18"} _sdv_init18()
{

  anon0:
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_sdv_IoCallDriver_entry"} {:osmodel} SLIC_sdv_IoCallDriver_entry(actual_caller: int, actual_sdv_389: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_sdv_IoCallDriver_entry"} {:osmodel} SLIC_sdv_IoCallDriver_entry(actual_caller: int, actual_sdv_389: int)
{
  var {:pointer} Tmp_970: int;
  var {:pointer} Tmp_971: int;
  var {:pointer} Tmp_972: int;
  var {:pointer} Tmp_973: int;
  var {:pointer} Tmp_974: int;
  var {:pointer} caller: int;
  var {:pointer} sdv_389: int;

  anon0:
    caller := actual_caller;
    sdv_389 := actual_sdv_389;
    assume {:nonnull} sdv_389 != 0;
    assume sdv_389 > 0;
    havoc Tmp_970;
    assume {:nonnull} sdv_389 != 0;
    assume sdv_389 > 0;
    havoc Tmp_973;
    assume {:nonnull} sdv_389 != 0;
    assume sdv_389 > 0;
    havoc Tmp_974;
    assume {:nonnull} sdv_389 != 0;
    assume sdv_389 > 0;
    havoc Tmp_971;
    assume {:nonnull} sdv_389 != 0;
    assume sdv_389 > 0;
    havoc Tmp_972;
    assume {:nonnull} Tmp_972 != 0;
    assume Tmp_972 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Tmp_971 != 0;
    assume Tmp_971 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Tmp_974 != 0;
    assume Tmp_974 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Tmp_973 != 0;
    assume Tmp_973 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Tmp_970 != 0;
    assume Tmp_970 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 2 > sdv_irql_current;
    call {:si_unique_call 1868} SLIC_EXIT_ROUTINE(strConst__li2bpl202);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} sdv_irql_current >= 2;
    call {:si_unique_call 1869} SLIC_ABORT_3_0(caller, sdv_389);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    goto L4;

  L4:
    call {:si_unique_call 1870} SLIC_EXIT_ROUTINE(strConst__li2bpl202);
    goto L2;

  anon17_Then:
    goto L4;

  anon18_Then:
    goto L4;

  anon19_Then:
    goto L4;

  anon20_Then:
    goto L4;
}



procedure {:origName "SLIC_PoCallDriver_entry"} {:osmodel} SLIC_PoCallDriver_entry(actual_caller_1: int, actual_PoCallDriver_1: int);
  modifies yogi_error;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_PoCallDriver_entry"} {:osmodel} SLIC_PoCallDriver_entry(actual_caller_1: int, actual_PoCallDriver_1: int)
{
  var {:pointer} Tmp_975: int;
  var {:pointer} Tmp_976: int;
  var {:pointer} Tmp_977: int;
  var {:pointer} Tmp_978: int;
  var {:pointer} Tmp_979: int;
  var {:pointer} caller_1: int;
  var {:pointer} PoCallDriver_1: int;

  anon0:
    caller_1 := actual_caller_1;
    PoCallDriver_1 := actual_PoCallDriver_1;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    havoc Tmp_976;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    havoc Tmp_975;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    havoc Tmp_979;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    havoc Tmp_978;
    assume {:nonnull} PoCallDriver_1 != 0;
    assume PoCallDriver_1 > 0;
    havoc Tmp_977;
    assume {:nonnull} Tmp_977 != 0;
    assume Tmp_977 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Tmp_978 != 0;
    assume Tmp_978 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} Tmp_979 != 0;
    assume Tmp_979 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Tmp_975 != 0;
    assume Tmp_975 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} Tmp_976 != 0;
    assume Tmp_976 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 2 > sdv_irql_current;
    call {:si_unique_call 1871} SLIC_EXIT_ROUTINE(strConst__li2bpl202);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} sdv_irql_current >= 2;
    call {:si_unique_call 1872} SLIC_ABORT_1_0(caller_1, PoCallDriver_1);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    goto L4;

  L4:
    call {:si_unique_call 1873} SLIC_EXIT_ROUTINE(strConst__li2bpl202);
    goto L2;

  anon17_Then:
    goto L4;

  anon18_Then:
    goto L4;

  anon19_Then:
    goto L4;

  anon20_Then:
    goto L4;
}



procedure {:origName "SLIC_ABORT_3_0"} SLIC_ABORT_3_0(actual_caller_2: int, actual_sdv_390: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_3_0"} SLIC_ABORT_3_0(actual_caller_2: int, actual_sdv_390: int)
{
  var {:pointer} caller_2: int;
  var {:pointer} sdv_390: int;

  anon0:
    caller_2 := actual_caller_2;
    sdv_390 := actual_sdv_390;
    call {:si_unique_call 1874} SLIC_ERROR_ROUTINE(strConst__li2bpl203);
    return;
}



procedure {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller_3: int, actual_PoCallDriver_2: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ABORT_1_0"} SLIC_ABORT_1_0(actual_caller_3: int, actual_PoCallDriver_2: int)
{
  var {:pointer} caller_3: int;
  var {:pointer} PoCallDriver_2: int;

  anon0:
    caller_3 := actual_caller_3;
    PoCallDriver_2 := actual_PoCallDriver_2;
    call {:si_unique_call 1875} SLIC_ERROR_ROUTINE(strConst__li2bpl203);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures {:va_keep} false;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddDevice__DRIVER_EXTENSION"} {:fieldname "AddDevice"} AddDevice__DRIVER_EXTENSION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AiForceDpx__FDO_DATA"} {:fieldname "AiForceDpx"} AiForceDpx__FDO_DATA(x: int) : int
{
  x + 1760
}

function {:inline true} {:fieldmap "Mem_T.AiRxDmaCount__FDO_DATA"} {:fieldname "AiRxDmaCount"} AiRxDmaCount__FDO_DATA(x: int) : int
{
  x + 1752
}

function {:inline true} {:fieldmap "Mem_T.AiRxFifo__FDO_DATA"} {:fieldname "AiRxFifo"} AiRxFifo__FDO_DATA(x: int) : int
{
  x + 1744
}

function {:inline true} {:fieldmap "Mem_T.AiTempSpeed__FDO_DATA"} {:fieldname "AiTempSpeed"} AiTempSpeed__FDO_DATA(x: int) : int
{
  x + 1764
}

function {:inline true} {:fieldmap "Mem_T.AiThreshold__FDO_DATA"} {:fieldname "AiThreshold"} AiThreshold__FDO_DATA(x: int) : int
{
  x + 1768
}

function {:inline true} {:fieldmap "Mem_T.AiTxDmaCount__FDO_DATA"} {:fieldname "AiTxDmaCount"} AiTxDmaCount__FDO_DATA(x: int) : int
{
  x + 1748
}

function {:inline true} {:fieldmap "Mem_T.AiTxFifo__FDO_DATA"} {:fieldname "AiTxFifo"} AiTxFifo__FDO_DATA(x: int) : int
{
  x + 1740
}

function {:inline true} {:fieldmap "Mem_T.AiUnderrunRetry__FDO_DATA"} {:fieldname "AiUnderrunRetry"} AiUnderrunRetry__FDO_DATA(x: int) : int
{
  x + 1756
}

function {:inline true} {:fieldmap "Mem_T.AllocNewRfd__FDO_DATA"} {:fieldname "AllocNewRfd"} AllocNewRfd__FDO_DATA(x: int) : int
{
  x + 2308
}

function {:inline true} {:fieldmap "Mem_T.AllocateCommonBuffer__FDO_DATA"} {:fieldname "AllocateCommonBuffer"} AllocateCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2044
}

function {:inline true} {:fieldmap "Mem_T.AllocatedMapRegisters__FDO_DATA"} {:fieldname "AllocatedMapRegisters"} AllocatedMapRegisters__FDO_DATA(x: int) : int
{
  x + 1920
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__MP_WAKE_PATTERN"} {:fieldname "AllocationSize"} AllocationSize__MP_WAKE_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AllowIdleDetectionRegistration__FDO_DATA"} {:fieldname "AllowIdleDetectionRegistration"} AllowIdleDetectionRegistration__FDO_DATA(x: int) : int
{
  x + 1620
}

function {:inline true} {:fieldmap "Mem_T.AllowWakeArming__FDO_DATA"} {:fieldname "AllowWakeArming"} AllowWakeArming__FDO_DATA(x: int) : int
{
  x + 900
}

function {:inline true} {:fieldmap "Mem_T.Argument1__WORKER_ITEM_CONTEXT"} {:fieldname "Argument1"} Argument1__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Argument2__WORKER_ITEM_CONTEXT"} {:fieldname "Argument2"} Argument2__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BuildScatterGatherList__DMA_OPERATIONS"} {:fieldname "BuildScatterGatherList"} BuildScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T._BUS_INTERFACE_STANDARD"} {:fieldname "BusInterface"} BusInterface__FDO_DATA(x: int) : int
{
  x + 1856
}

function {:inline true} {:fieldmap "Mem_T.CSRAddress__FDO_DATA"} {:fieldname "CSRAddress"} CSRAddress__FDO_DATA(x: int) : int
{
  x + 1852
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.CbCommand__CB_HEADER_STRUC"} {:fieldname "CbCommand"} CbCommand__CB_HEADER_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CbLinkPointer__CB_HEADER_STRUC"} {:fieldname "CbLinkPointer"} CbLinkPointer__CB_HEADER_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CbStatus"} CbStatus__CB_HEADER_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CommandComplete__ERR_COUNT_STRUC"} {:fieldname "CommandComplete"} CommandComplete__ERR_COUNT_STRUC(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.ConfigBytes__CONFIG_CB_STRUC"} {:fieldname "ConfigBytes"} ConfigBytes__CONFIG_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ConfigCBHeader__CONFIG_CB_STRUC"} {:fieldname "ConfigCBHeader"} ConfigCBHeader__CONFIG_CB_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Config_unnamed_tag_69"} {:fieldname "Config"} Config_unnamed_tag_69(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.Congest__FDO_DATA"} {:fieldname "Congest"} Congest__FDO_DATA(x: int) : int
{
  x + 1776
}

function {:inline true} {:fieldmap "Mem_T.Connector__FDO_DATA"} {:fieldname "Connector"} Connector__FDO_DATA(x: int) : int
{
  x + 3172
}

function {:inline true} {:fieldmap "Mem_T.ConservationIdleTime__FDO_DATA"} {:fieldname "ConservationIdleTime"} ConservationIdleTime__FDO_DATA(x: int) : int
{
  x + 1624
}

function {:inline true} {:fieldmap "Mem_T.Count__MP_TCB"} {:fieldname "Count"} Count__MP_TCB(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CurrNumRfd__FDO_DATA"} {:fieldname "CurrNumRfd"} CurrNumRfd__FDO_DATA(x: int) : int
{
  x + 2164
}

function {:inline true} {:fieldmap "Mem_T.CurrSendHead__FDO_DATA"} {:fieldname "CurrSendHead"} CurrSendHead__FDO_DATA(x: int) : int
{
  x + 2052
}

function {:inline true} {:fieldmap "Mem_T.CurrentAddress__FDO_DATA"} {:fieldname "CurrentAddress"} CurrentAddress__FDO_DATA(x: int) : int
{
  x + 1712
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__NDISPROT_QUERY_OID"} {:fieldname "Data"} Data__NDISPROT_QUERY_OID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Depth__GENERAL_LOOKASIDE"} {:fieldname "Depth"} Depth__GENERAL_LOOKASIDE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Depth__SLIST_HEADER"} {:fieldname "Depth"} Depth__SLIST_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceCaps__FDO_DATA"} {:fieldname "DeviceCaps"} DeviceCaps__FDO_DATA(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DevicePnPState__FDO_DATA"} {:fieldname "DevicePnPState"} DevicePnPState__FDO_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DevicePowerState__FDO_DATA"} {:fieldname "DevicePowerState"} DevicePowerState__FDO_DATA(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DmaAdapterObject__FDO_DATA"} {:fieldname "DmaAdapterObject"} DmaAdapterObject__FDO_DATA(x: int) : int
{
  x + 2040
}

function {:inline true} {:fieldmap "Mem_T.DmaOperations__DMA_ADAPTER"} {:fieldname "DmaOperations"} DmaOperations__DMA_ADAPTER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DriverContext_unnamed_tag_6"} {:fieldname "DriverContext"} DriverContext_unnamed_tag_6(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DriverExtension__DRIVER_OBJECT"} {:fieldname "DriverExtension"} DriverExtension__DRIVER_OBJECT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.DriverUnload__DRIVER_OBJECT"} {:fieldname "DriverUnload"} DriverUnload__DRIVER_OBJECT(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.DumpSpace__FDO_DATA"} {:fieldname "DumpSpace"} DumpSpace__FDO_DATA(x: int) : int
{
  x + 3152
}

function {:inline true} {:fieldmap "Mem_T.FileObject__IO_STACK_LOCATION"} {:fieldname "FileObject"} FileObject__IO_STACK_LOCATION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.Flags__DEVICE_OBJECT"} {:fieldname "Flags"} Flags__DEVICE_OBJECT(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Flags__FDO_DATA"} {:fieldname "Flags"} Flags__FDO_DATA(x: int) : int
{
  x + 1680
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_RFD"} {:fieldname "Flags"} Flags__MP_RFD(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_TCB"} {:fieldname "Flags"} Flags__MP_TCB(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flags__NDIS_PNP_CAPABILITIES"} {:fieldname "Flags"} Flags__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FreeCommonBuffer__FDO_DATA"} {:fieldname "FreeCommonBuffer"} FreeCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2048
}

function {:inline true} {:fieldmap "Mem_T.FreeMisses__GENERAL_LOOKASIDE"} {:fieldname "FreeMisses"} FreeMisses__GENERAL_LOOKASIDE(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Free__GENERAL_LOOKASIDE"} {:fieldname "Free"} Free__GENERAL_LOOKASIDE(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.GoodReceives__FDO_DATA"} {:fieldname "GoodReceives"} GoodReceives__FDO_DATA(x: int) : int
{
  x + 3604
}

function {:inline true} {:fieldmap "Mem_T.GoodTransmits__FDO_DATA"} {:fieldname "GoodTransmits"} GoodTransmits__FDO_DATA(x: int) : int
{
  x + 3600
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HwMiscMemAllocVa__FDO_DATA"} {:fieldname "HwMiscMemAllocVa"} HwMiscMemAllocVa__FDO_DATA(x: int) : int
{
  x + 3108
}

function {:inline true} {:fieldmap "Mem_T.HwRfdPhys__MP_RFD"} {:fieldname "HwRfdPhys"} HwRfdPhys__MP_RFD(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.HwRfd__MP_RFD"} {:fieldname "HwRfd"} HwRfd__MP_RFD(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.HwSendMemAllocVa__FDO_DATA"} {:fieldname "HwSendMemAllocVa"} HwSendMemAllocVa__FDO_DATA(x: int) : int
{
  x + 2108
}

function {:inline true} {:fieldmap "Mem_T.HwTcb__MP_TCB"} {:fieldname "HwTcb"} HwTcb__MP_TCB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.IaAddress__IA_CB_STRUC"} {:fieldname "IaAddress"} IaAddress__IA_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IdleDetectionEnabled__FDO_DATA"} {:fieldname "IdleDetectionEnabled"} IdleDetectionEnabled__FDO_DATA(x: int) : int
{
  x + 1616
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IdleDetectionTimerDpc"} IdleDetectionTimerDpc__FDO_DATA(x: int) : int
{
  x + 1064
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerDownCompleteEvent"} IdlePowerDownCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1460
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerUpCompleteEvent"} IdlePowerUpCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1304
}

function {:inline true} {:fieldmap "Mem_T.IdlePowerUpRequested__FDO_DATA"} {:fieldname "IdlePowerUpRequested"} IdlePowerUpRequested__FDO_DATA(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.IndicatedStatus__NDISPROT_INDICATE_STATUS"} {:fieldname "IndicatedStatus"} IndicatedStatus__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "InterfaceName"} InterfaceName__FDO_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.InterfaceSpecificData_unnamed_tag_29"} {:fieldname "InterfaceSpecificData"} InterfaceSpecificData_unnamed_tag_29(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType_unnamed_tag_29"} {:fieldname "InterfaceType"} InterfaceType_unnamed_tag_29(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Interface_unnamed_tag_29"} {:fieldname "Interface"} Interface_unnamed_tag_29(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__FDO_DATA"} {:fieldname "InterruptAffinity"} InterruptAffinity__FDO_DATA(x: int) : int
{
  x + 1840
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__FDO_DATA"} {:fieldname "InterruptLevel"} InterruptLevel__FDO_DATA(x: int) : int
{
  x + 1832
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__FDO_DATA"} {:fieldname "InterruptMode"} InterruptMode__FDO_DATA(x: int) : int
{
  x + 1844
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__FDO_DATA"} {:fieldname "InterruptVector"} InterruptVector__FDO_DATA(x: int) : int
{
  x + 1836
}

function {:inline true} {:fieldmap "Mem_T.Interrupt__FDO_DATA"} {:fieldname "Interrupt"} Interrupt__FDO_DATA(x: int) : int
{
  x + 1828
}

function {:inline true} {:fieldmap "Mem_T.IoBaseAddress__FDO_DATA"} {:fieldname "IoBaseAddress"} IoBaseAddress__FDO_DATA(x: int) : int
{
  x + 1800
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoRange__FDO_DATA"} {:fieldname "IoRange"} IoRange__FDO_DATA(x: int) : int
{
  x + 1804
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Irp__MP_TCB"} {:fieldname "Irp"} Irp__MP_TCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsDeviceIdle__FDO_DATA"} {:fieldname "IsDeviceIdle"} IsDeviceIdle__FDO_DATA(x: int) : int
{
  x + 904
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "IsUpperEdgeNdis"} IsUpperEdgeNdis__FDO_DATA(x: int) : int
{
  x + 1684
}

function {:inline true} {:fieldmap "Mem_T.L__NPAGED_LOOKASIDE_LIST"} {:fieldname "L"} L__NPAGED_LOOKASIDE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T._SLIST_HEADER"} {:fieldname "ListHead"} ListHead__GENERAL_LOOKASIDE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Lock__FDO_DATA"} {:fieldname "Lock"} Lock__FDO_DATA(x: int) : int
{
  x + 2312
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MCAddressCount__FDO_DATA"} {:fieldname "MCAddressCount"} MCAddressCount__FDO_DATA(x: int) : int
{
  x + 2336
}

function {:inline true} {:fieldmap "Mem_T.MCList__FDO_DATA"} {:fieldname "MCList"} MCList__FDO_DATA(x: int) : int
{
  x + 2340
}

function {:inline true} {:fieldmap "Mem_T.MDIControl__CSR_STRUC"} {:fieldname "MDIControl"} MDIControl__CSR_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MWIEnable__FDO_DATA"} {:fieldname "MWIEnable"} MWIEnable__FDO_DATA(x: int) : int
{
  x + 1772
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__DRIVER_OBJECT"} {:fieldname "MajorFunction"} MajorFunction__DRIVER_OBJECT(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MappedPorts__FDO_DATA"} {:fieldname "MappedPorts"} MappedPorts__FDO_DATA(x: int) : int
{
  x + 1848
}

function {:inline true} {:fieldmap "Mem_T.MaskSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "MaskSize"} MaskSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MaxNumRfd__FDO_DATA"} {:fieldname "MaxNumRfd"} MaxNumRfd__FDO_DATA(x: int) : int
{
  x + 2168
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.McAddress__MULTICAST_CB_STRUC"} {:fieldname "McAddress"} McAddress__MULTICAST_CB_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.McCount__MULTICAST_CB_STRUC"} {:fieldname "McCount"} McCount__MULTICAST_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MdlAddress__IRP"} {:fieldname "MdlAddress"} MdlAddress__IRP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MediaState__FDO_DATA"} {:fieldname "MediaState"} MediaState__FDO_DATA(x: int) : int
{
  x + 1916
}

function {:inline true} {:fieldmap "Mem_T.MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinLinkChangeWakeUp"} MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinMagicPacketWakeUp"} MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinPatternWakeUp"} MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MoreThanOneRetry__FDO_DATA"} {:fieldname "MoreThanOneRetry"} MoreThanOneRetry__FDO_DATA(x: int) : int
{
  x + 3636
}

function {:inline true} {:fieldmap "Mem_T.MpTcbMem__FDO_DATA"} {:fieldname "MpTcbMem"} MpTcbMem__FDO_DATA(x: int) : int
{
  x + 2100
}

function {:inline true} {:fieldmap "Mem_T.Multicast_unnamed_tag_69"} {:fieldname "Multicast"} Multicast_unnamed_tag_69(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "NewRequestsQueue"} NewRequestsQueue__FDO_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NextLowerDriver__FDO_DATA"} {:fieldname "NextLowerDriver"} NextLowerDriver__FDO_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Next__MDL"} {:fieldname "Next"} Next__MDL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Next__MP_TCB"} {:fieldname "Next"} Next__MP_TCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCb__NON_TRANSMIT_CB"} {:fieldname "NonTxCb"} NonTxCb__NON_TRANSMIT_CB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlockPhys__FDO_DATA"} {:fieldname "NonTxCmdBlockPhys"} NonTxCmdBlockPhys__FDO_DATA(x: int) : int
{
  x + 3148
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlock__FDO_DATA"} {:fieldname "NonTxCmdBlock"} NonTxCmdBlock__FDO_DATA(x: int) : int
{
  x + 3144
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumBuffers"} NumBuffers__FDO_DATA(x: int) : int
{
  x + 2096
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumRfd"} NumRfd__FDO_DATA(x: int) : int
{
  x + 2160
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "NumTcb"} NumTcb__FDO_DATA(x: int) : int
{
  x + 2084
}

function {:inline true} {:fieldmap "Mem_T.Oid__NDISPROT_QUERY_OID"} {:fieldname "Oid"} Oid__NDISPROT_QUERY_OID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OldPacketFilter__FDO_DATA"} {:fieldname "OldPacketFilter"} OldPacketFilter__FDO_DATA(x: int) : int
{
  x + 2320
}

function {:inline true} {:fieldmap "Mem_T.OldParameterField__FDO_DATA"} {:fieldname "OldParameterField"} OldParameterField__FDO_DATA(x: int) : int
{
  x + 3176
}

function {:inline true} {:fieldmap "Mem_T.OneRetry__FDO_DATA"} {:fieldname "OneRetry"} OneRetry__FDO_DATA(x: int) : int
{
  x + 3632
}

function {:inline true} {:fieldmap "Mem_T.OriginalHwRfd__MP_RFD"} {:fieldname "OriginalHwRfd"} OriginalHwRfd__MP_RFD(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutstandingIO__FDO_DATA"} {:fieldname "OutstandingIO"} OutstandingIO__FDO_DATA(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketFilter__FDO_DATA"} {:fieldname "PacketFilter"} PacketFilter__FDO_DATA(x: int) : int
{
  x + 2316
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__MP_TCB"} {:fieldname "PacketLength"} PacketLength__MP_TCB(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.PacketSize__MP_RFD"} {:fieldname "PacketSize"} PacketSize__MP_RFD(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PatternList"} PatternList__MP_POWER_MGMT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PatternOffset__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternOffset"} PatternOffset__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.PatternSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternSize"} PatternSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Pattern__MP_WAKE_PATTERN"} {:fieldname "Pattern"} Pattern__MP_WAKE_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PendingSIrp__FDO_DATA"} {:fieldname "PendingSIrp"} PendingSIrp__FDO_DATA(x: int) : int
{
  x + 568
}

function {:inline true} {:fieldmap "Mem_T.PerformanceIdleTime__FDO_DATA"} {:fieldname "PerformanceIdleTime"} PerformanceIdleTime__FDO_DATA(x: int) : int
{
  x + 1628
}

function {:inline true} {:fieldmap "Mem_T.PermanentAddress__FDO_DATA"} {:fieldname "PermanentAddress"} PermanentAddress__FDO_DATA(x: int) : int
{
  x + 1688
}

function {:inline true} {:fieldmap "Mem_T.PhyAddress__FDO_DATA"} {:fieldname "PhyAddress"} PhyAddress__FDO_DATA(x: int) : int
{
  x + 3168
}

function {:inline true} {:fieldmap "Mem_T.PoMgmt__FDO_DATA"} {:fieldname "PoMgmt"} PoMgmt__FDO_DATA(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.Port__CSR_STRUC"} {:fieldname "Port"} Port__CSR_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PowerCodeLockHandle__FDO_DATA"} {:fieldname "PowerCodeLockHandle"} PowerCodeLockHandle__FDO_DATA(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerSaveDisableEnableLock"} PowerSaveDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 908
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackObject__FDO_DATA"} {:fieldname "PowerStateCallbackObject"} PowerStateCallbackObject__FDO_DATA(x: int) : int
{
  x + 1636
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackRegistrationHandle__FDO_DATA"} {:fieldname "PowerStateCallbackRegistrationHandle"} PowerStateCallbackRegistrationHandle__FDO_DATA(x: int) : int
{
  x + 1640
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PreviousPnPState__FDO_DATA"} {:fieldname "PreviousPnPState"} PreviousPnPState__FDO_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Priority__NDIS_PM_PACKET_PATTERN"} {:fieldname "Priority"} Priority__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PutDmaAdapter__DMA_OPERATIONS"} {:fieldname "PutDmaAdapter"} PutDmaAdapter__DMA_OPERATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PutScatterGatherList__DMA_OPERATIONS"} {:fieldname "PutScatterGatherList"} PutScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryInterface_unnamed_tag_8"} {:fieldname "QueryInterface"} QueryInterface_unnamed_tag_8(x: int) : int
{
  x + 332
}

function {:inline true} {:fieldmap "Mem_T.QueryRequest__FDO_DATA"} {:fieldname "QueryRequest"} QueryRequest__FDO_DATA(x: int) : int
{
  x + 3588
}

function {:inline true} {:fieldmap "Mem_T.QueueLock__FDO_DATA"} {:fieldname "QueueLock"} QueueLock__FDO_DATA(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.QueueState__FDO_DATA"} {:fieldname "QueueState"} QueueState__FDO_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__ERR_COUNT_STRUC"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__FDO_DATA"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__FDO_DATA(x: int) : int
{
  x + 3648
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCdtErrors"} RcvCdtErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtFrames__FDO_DATA"} {:fieldname "RcvCdtFrames"} RcvCdtFrames__FDO_DATA(x: int) : int
{
  x + 3660
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__FDO_DATA"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__FDO_DATA(x: int) : int
{
  x + 3644
}

function {:inline true} {:fieldmap "Mem_T.RcvDmaOverrunErrors__FDO_DATA"} {:fieldname "RcvDmaOverrunErrors"} RcvDmaOverrunErrors__FDO_DATA(x: int) : int
{
  x + 3656
}

function {:inline true} {:fieldmap "Mem_T.RcvGoodFrames__ERR_COUNT_STRUC"} {:fieldname "RcvGoodFrames"} RcvGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvLock__FDO_DATA"} {:fieldname "RcvLock"} RcvLock__FDO_DATA(x: int) : int
{
  x + 2192
}

function {:inline true} {:fieldmap "Mem_T.RcvOverrunErrors__ERR_COUNT_STRUC"} {:fieldname "RcvOverrunErrors"} RcvOverrunErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__ERR_COUNT_STRUC"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__FDO_DATA"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__FDO_DATA(x: int) : int
{
  x + 3652
}

function {:inline true} {:fieldmap "Mem_T.RcvRuntErrors__FDO_DATA"} {:fieldname "RcvRuntErrors"} RcvRuntErrors__FDO_DATA(x: int) : int
{
  x + 3664
}

function {:inline true} {:fieldmap "Mem_T.RcvShortFrames__ERR_COUNT_STRUC"} {:fieldname "RcvShortFrames"} RcvShortFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvList"} RecvList__FDO_DATA(x: int) : int
{
  x + 2144
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "RecvLookaside"} RecvLookaside__FDO_DATA(x: int) : int
{
  x + 2196
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvQueueHead"} RecvQueueHead__FDO_DATA(x: int) : int
{
  x + 2180
}

function {:inline true} {:fieldmap "Mem_T.RecvQueueLock__FDO_DATA"} {:fieldname "RecvQueueLock"} RecvQueueLock__FDO_DATA(x: int) : int
{
  x + 2188
}

function {:inline true} {:fieldmap "Mem_T.RegistryPath__GLOBALS"} {:fieldname "RegistryPath"} RegistryPath__GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "RemoveEvent"} RemoveEvent__FDO_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ResumeWait__FDO_DATA"} {:fieldname "ResumeWait"} ResumeWait__FDO_DATA(x: int) : int
{
  x + 2140
}

function {:inline true} {:fieldmap "Mem_T.RevsionID__FDO_DATA"} {:fieldname "RevsionID"} RevsionID__FDO_DATA(x: int) : int
{
  x + 1784
}

function {:inline true} {:fieldmap "Mem_T.RfdActualCount__RFD_STRUC"} {:fieldname "RfdActualCount"} RfdActualCount__RFD_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.RfdCbHeader__RFD_STRUC"} {:fieldname "RfdCbHeader"} RfdCbHeader__RFD_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RfdShrinkCount__FDO_DATA"} {:fieldname "RfdShrinkCount"} RfdShrinkCount__FDO_DATA(x: int) : int
{
  x + 2176
}

function {:inline true} {:fieldmap "Mem_T.RunningOnBattery__FDO_DATA"} {:fieldname "RunningOnBattery"} RunningOnBattery__FDO_DATA(x: int) : int
{
  x + 1632
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "SGListLookasideList"} SGListLookasideList__FDO_DATA(x: int) : int
{
  x + 1928
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandHigh__CSR_STRUC"} {:fieldname "ScbCommandHigh"} ScbCommandHigh__CSR_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandLow__CSR_STRUC"} {:fieldname "ScbCommandLow"} ScbCommandLow__CSR_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ScbGeneralPointer__CSR_STRUC"} {:fieldname "ScbGeneralPointer"} ScbGeneralPointer__CSR_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ScbStatus__CSR_STRUC"} {:fieldname "ScbStatus"} ScbStatus__CSR_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SelfTest__FDO_DATA"} {:fieldname "SelfTest"} SelfTest__FDO_DATA(x: int) : int
{
  x + 3136
}

function {:inline true} {:fieldmap "Mem_T.Self__FDO_DATA"} {:fieldname "Self"} Self__FDO_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SendLock__FDO_DATA"} {:fieldname "SendLock"} SendLock__FDO_DATA(x: int) : int
{
  x + 2080
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SendQueueHead"} SendQueueHead__FDO_DATA(x: int) : int
{
  x + 2072
}

function {:inline true} {:fieldmap "Mem_T.SetRequest__FDO_DATA"} {:fieldname "SetRequest"} SetRequest__FDO_DATA(x: int) : int
{
  x + 3592
}

function {:inline true} {:fieldmap "Mem_T.Setup_unnamed_tag_69"} {:fieldname "Setup"} Setup_unnamed_tag_69(x: int) : int
{
  x + 884
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Signature__DRIVE_LAYOUT_INFORMATION_MBR"} {:fieldname "Signature"} Signature__DRIVE_LAYOUT_INFORMATION_MBR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Signature__MP_WAKE_PATTERN"} {:fieldname "Signature"} Signature__MP_WAKE_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.Size_unnamed_tag_29"} {:fieldname "Size"} Size_unnamed_tag_29(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SpeedDuplex"} SpeedDuplex__FDO_DATA(x: int) : int
{
  x + 1780
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatsCounterPhys__FDO_DATA"} {:fieldname "StatsCounterPhys"} StatsCounterPhys__FDO_DATA(x: int) : int
{
  x + 3164
}

function {:inline true} {:fieldmap "Mem_T.StatsCounters__FDO_DATA"} {:fieldname "StatsCounters"} StatsCounters__FDO_DATA(x: int) : int
{
  x + 3160
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferLength__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferLength"} StatusBufferLength__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferOffset__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferOffset"} StatusBufferOffset__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.StatusIndicationIrp__FDO_DATA"} {:fieldname "StatusIndicationIrp"} StatusIndicationIrp__FDO_DATA(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "StopEvent"} StopEvent__FDO_DATA(x: int) : int
{
  x + 208
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerState__FDO_DATA"} {:fieldname "SystemPowerState"} SystemPowerState__FDO_DATA(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TotalFrees__GENERAL_LOOKASIDE"} {:fieldname "TotalFrees"} TotalFrees__GENERAL_LOOKASIDE(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.TotalRetries__FDO_DATA"} {:fieldname "TotalRetries"} TotalRetries__FDO_DATA(x: int) : int
{
  x + 3640
}

function {:inline true} {:fieldmap "Mem_T.TransmitIdle__FDO_DATA"} {:fieldname "TransmitIdle"} TransmitIdle__FDO_DATA(x: int) : int
{
  x + 2136
}

function {:inline true} {:fieldmap "Mem_T.TxAbortExcessCollisions__FDO_DATA"} {:fieldname "TxAbortExcessCollisions"} TxAbortExcessCollisions__FDO_DATA(x: int) : int
{
  x + 3612
}

function {:inline true} {:fieldmap "Mem_T.TxCbHeader__GENERIC_TxCB"} {:fieldname "TxCbHeader"} TxCbHeader__GENERIC_TxCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TxDmaUnderrun__FDO_DATA"} {:fieldname "TxDmaUnderrun"} TxDmaUnderrun__FDO_DATA(x: int) : int
{
  x + 3620
}

function {:inline true} {:fieldmap "Mem_T.TxLateCollisions__FDO_DATA"} {:fieldname "TxLateCollisions"} TxLateCollisions__FDO_DATA(x: int) : int
{
  x + 3616
}

function {:inline true} {:fieldmap "Mem_T.TxLostCRS__FDO_DATA"} {:fieldname "TxLostCRS"} TxLostCRS__FDO_DATA(x: int) : int
{
  x + 3624
}

function {:inline true} {:fieldmap "Mem_T.TxOKButDeferred__FDO_DATA"} {:fieldname "TxOKButDeferred"} TxOKButDeferred__FDO_DATA(x: int) : int
{
  x + 3628
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UnderlyingPDO__FDO_DATA"} {:fieldname "UnderlyingPDO"} UnderlyingPDO__FDO_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Version_unnamed_tag_29"} {:fieldname "Version"} Version_unnamed_tag_29(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeCompletedEvent"} WakeCompletedEvent__FDO_DATA(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeDisableEnableLock"} WakeDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD0__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD0"} WakeFromD0__DEVICE_CAPABILITIES(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD1__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD1"} WakeFromD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD2__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD2"} WakeFromD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD3__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD3"} WakeFromD3__DEVICE_CAPABILITIES(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.WakeIrp__FDO_DATA"} {:fieldname "WakeIrp"} WakeIrp__FDO_DATA(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.WakeState__FDO_DATA"} {:fieldname "WakeState"} WakeState__FDO_DATA(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.WakeUpCapabilities__NDIS_PNP_CAPABILITIES"} {:fieldname "WakeUpCapabilities"} WakeUpCapabilities__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "WatchDogTimerDpc"} WatchDogTimerDpc__FDO_DATA(x: int) : int
{
  x + 3184
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WatchDogTimerEvent"} WatchDogTimerEvent__FDO_DATA(x: int) : int
{
  x + 3420
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__WORKER_ITEM_CONTEXT"} {:fieldname "WorkItem"} WorkItem__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.XmtDeferred__ERR_COUNT_STRUC"} {:fieldname "XmtDeferred"} XmtDeferred__ERR_COUNT_STRUC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XmtGoodFrames__ERR_COUNT_STRUC"} {:fieldname "XmtGoodFrames"} XmtGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.XmtLateCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtLateCollisions"} XmtLateCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XmtLostCRS__ERR_COUNT_STRUC"} {:fieldname "XmtLostCRS"} XmtLostCRS__ERR_COUNT_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XmtMaxCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMaxCollisions"} XmtMaxCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.XmtMultCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMultCollisions"} XmtMultCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XmtSingleCollision__ERR_COUNT_STRUC"} {:fieldname "XmtSingleCollision"} XmtSingleCollision__ERR_COUNT_STRUC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XmtTotalCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtTotalCollisions"} XmtTotalCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.XmtUnderruns__ERR_COUNT_STRUC"} {:fieldname "XmtUnderruns"} XmtUnderruns__ERR_COUNT_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fmtid__DEVPROPKEY"} {:fieldname "fmtid"} fmtid__DEVPROPKEY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.nBusySend__FDO_DATA"} {:fieldname "nBusySend"} nBusySend__FDO_DATA(x: int) : int
{
  x + 2060
}

function {:inline true} {:fieldmap "Mem_T.nReadyRecv__FDO_DATA"} {:fieldname "nReadyRecv"} nReadyRecv__FDO_DATA(x: int) : int
{
  x + 2152
}

function {:inline true} {:fieldmap "Mem_T.nWaitSend__FDO_DATA"} {:fieldname "nWaitSend"} nWaitSend__FDO_DATA(x: int) : int
{
  x + 2064
}

function {:inline true} {:fieldmap "Mem_T.pid__DEVPROPKEY"} {:fieldname "pid"} pid__DEVPROPKEY(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.usDuplexMode__FDO_DATA"} {:fieldname "usDuplexMode"} usDuplexMode__FDO_DATA(x: int) : int
{
  x + 2332
}

function {:inline true} {:fieldmap "Mem_T.usLinkSpeed__FDO_DATA"} {:fieldname "usLinkSpeed"} usLinkSpeed__FDO_DATA(x: int) : int
{
  x + 2328
}

const {:string ""} unique strConst__li2bpl66: int;

const {:string "\t ****Completing S0 IRP\n"} unique strConst__li2bpl24: int;

const {:string "   Config Block at virt addr %p phys address %x\n"} unique strConst__li2bpl51: int;

const {:string "   Config byte %x = %.2x\n"} unique strConst__li2bpl54: int;

const {:string "   Issuing Configure command\n"} unique strConst__li2bpl50: int;

const {:string "  Config byte %x = %.2x\n"} unique strConst__li2bpl177: int;

const {:string " not"} unique strConst__li2bpl72: int;

const {:string "---> NICHandleRecvInterrupt\n"} unique strConst__li2bpl19: int;

const {:string "---> NICShutdown\n"} unique strConst__li2bpl44: int;

const {:string "---> NICStartRecv\n"} unique strConst__li2bpl20: int;

const {:string "--->PciDrvRead %p\n"} unique strConst__li2bpl118: int;

const {:string "--> ArmForWake\n"} unique strConst__li2bpl75: int;

const {:string "--> DisarmWake\n"} unique strConst__li2bpl77: int;

const {:string "--> HandleQueryOIDRequest\n"} unique strConst__li2bpl179: int;

const {:string "--> HandleSetOIDRequest\n"} unique strConst__li2bpl165: int;

const {:string "--> HwClearAllCounters\n"} unique strConst__li2bpl61: int;

const {:string "--> HwConfigure\n"} unique strConst__li2bpl53: int;

const {:string "--> HwSetupIAAddress\n"} unique strConst__li2bpl47: int;

const {:string "--> HwSoftwareReset\n"} unique strConst__li2bpl48: int;

const {:string "--> MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl2: int;

const {:string "--> NICAddWakeUpPattern\n"} unique strConst__li2bpl8: int;

const {:string "--> NICFreeAdapterMemory\n"} unique strConst__li2bpl42: int;

const {:string "--> NICFreeBusySendPackets\n"} unique strConst__li2bpl105: int;

const {:string "--> NICFreeQueuedSendPackets\n"} unique strConst__li2bpl95: int;

const {:string "--> NICGetStatsCounters\n"} unique strConst__li2bpl172: int;

const {:string "--> NICInitializeAdapter\n"} unique strConst__li2bpl58: int;

const {:string "--> NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl4: int;

const {:string "--> NICRemoveWakeUpPattern\n"} unique strConst__li2bpl6: int;

const {:string "--> NICServiceReadIrps\n"} unique strConst__li2bpl14: int;

const {:string "--> NICSetMulticastList\n"} unique strConst__li2bpl166: int;

const {:string "--> NICSetPacketFilter, PacketFilter=%08x\n"} unique strConst__li2bpl175: int;

const {:string "--> OID_PNP_ADD_WAKE_UP_PATTERN\n"} unique strConst__li2bpl162: int;

const {:string "--> OID_PNP_ENABLE_WAKE_UP\n"} unique strConst__li2bpl163: int;

const {:string "--> PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl84: int;

const {:string "--> PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl94: int;

const {:string "--> PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl91: int;

const {:string "--> PciDrvWrite %p\n"} unique strConst__li2bpl104: int;

const {:string "-->MPSetPowerD0Private\n"} unique strConst__li2bpl9: int;

const {:string "-->NICFreeDeviceResources\n"} unique strConst__li2bpl55: int;

const {:string "-->NICQueueIoctlIrp\n"} unique strConst__li2bpl121: int;

const {:string "-->PciDrvProcessQueuedRequests\n"} unique strConst__li2bpl123: int;

const {:string "-->PciDrvReadRegistryValue \n"} unique strConst__li2bpl130: int;

const {:string "-->PciDrvReturnResources\n"} unique strConst__li2bpl132: int;

const {:string "-->ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl170: int;

const {:string "<-- ArmForWake\n"} unique strConst__li2bpl76: int;

const {:string "<-- DisarmWake\n"} unique strConst__li2bpl79: int;

const {:string "<-- HandleSetOIDRequest\n"} unique strConst__li2bpl161: int;

const {:string "<-- HwClearAllCounters, status=%x\n"} unique strConst__li2bpl62: int;

const {:string "<-- HwConfigure, status=%x\n"} unique strConst__li2bpl52: int;

const {:string "<-- HwSetupIAAddress, status=%x\n"} unique strConst__li2bpl46: int;

const {:string "<-- HwSoftwareReset\n"} unique strConst__li2bpl49: int;

const {:string "<-- MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl1: int;

const {:string "<-- NICAddWakeUpPattern\n"} unique strConst__li2bpl7: int;

const {:string "<-- NICFreeAdapterMemory\n"} unique strConst__li2bpl43: int;

const {:string "<-- NICFreeBusySendPackets\n"} unique strConst__li2bpl106: int;

const {:string "<-- NICFreeQueuedSendPackets\n"} unique strConst__li2bpl96: int;

const {:string "<-- NICGetStatsCounters\n"} unique strConst__li2bpl171: int;

const {:string "<-- NICInitializeAdapter, status=%x\n"} unique strConst__li2bpl59: int;

const {:string "<-- NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl3: int;

const {:string "<-- NICRemoveWakeUpPattern\n"} unique strConst__li2bpl5: int;

const {:string "<-- NICServiceReadIrps\n"} unique strConst__li2bpl13: int;

const {:string "<-- NICSetMulticastList, status=%x\n"} unique strConst__li2bpl167: int;

const {:string "<-- NICSetPacketFilter, Status=%x\n"} unique strConst__li2bpl173: int;

const {:string "<-- PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl86: int;

const {:string "<-- PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl93: int;

const {:string "<-- PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl92: int;

const {:string "<-- PciDrvWrite %x\n"} unique strConst__li2bpl99: int;

const {:string "<-- Read called %x\n"} unique strConst__li2bpl119: int;

const {:string "<--- NICHandleRecvInterrupt\n"} unique strConst__li2bpl18: int;

const {:string "<--- NICShutdown\n"} unique strConst__li2bpl45: int;

const {:string "<--- NICStartRecv, Status=%x\n"} unique strConst__li2bpl23: int;

const {:string "<--HandleQueryOIDRequest: OID %x, Status %x\n"} unique strConst__li2bpl178: int;

const {:string "<--MPSetPowerD0Private\n"} unique strConst__li2bpl10: int;

const {:string "<--NICFreeDeviceResources\n"} unique strConst__li2bpl57: int;

const {:string "<--NICQueueIoctlIrp\n"} unique strConst__li2bpl120: int;

const {:string "<--PciDrvProcessQueuedRequests %d\n"} unique strConst__li2bpl122: int;

const {:string "<--PciDrvReadRegistryValue %ws %d \n"} unique strConst__li2bpl131: int;

const {:string "<--PciDrvReturnResources\n"} unique strConst__li2bpl133: int;

const {:string "<--ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl169: int;

const {:string "Acquiring  PowerSaveDisableEnableLock\n"} unique strConst__li2bpl85: int;

const {:string "AddDevice FDO (0x%p), DevExt (0x%p)\n"} unique strConst__li2bpl117: int;

const {:string "AddDevice PDO (0x%p)\n"} unique strConst__li2bpl114: int;

const {:string "AddDevice: IoRegisterDeviceInterface failed (%x)\n"} unique strConst__li2bpl116: int;

const {:string "BuildScatterGatherList %x\n"} unique strConst__li2bpl103: int;

const {:string "CU suspended. ScbStatus=%04x Issue selective reset\n"} unique strConst__li2bpl201: int;

const {:string "Cleanup called\n"} unique strConst__li2bpl109: int;

const {:string "Close \n"} unique strConst__li2bpl113: int;

const {:string "Command failed\n"} unique strConst__li2bpl184: int;

const {:string "Config Block at virt addr %p, phys address %x\n"} unique strConst__li2bpl176: int;

const {:string "Connected"} unique strConst__li2bpl180: int;

const {:string "Couldn't allocate pool for registry path."} unique strConst__li2bpl124: int;

const {:string "Create \n"} unique strConst__li2bpl129: int;

const {:string "Device not ready %p\n"} unique strConst__li2bpl98: int;

const {:string "Disconnected"} unique strConst__li2bpl181: int;

const {:string "Entered DriverEntry of PCIDRV version built on Aug  7 2014 at 02:42:33\n"} unique strConst__li2bpl125: int;

const {:string "Entered PciDrvCompletionDevicePowerUp\n"} unique strConst__li2bpl28: int;

const {:string "Entered PciDrvCompletionSystemPowerUp\n"} unique strConst__li2bpl29: int;

const {:string "Entered PciDrvFinalizeDevicePowerIrp\n"} unique strConst__li2bpl27: int;

const {:string "Entered PciDrvQueueCorrespondingDeviceIrp\n"} unique strConst__li2bpl25: int;

const {:string "Entered WaitWakeIoCompletionRoutine\n"} unique strConst__li2bpl74: int;

const {:string "Entering a deeper sleep state\n"} unique strConst__li2bpl11: int;

const {:string "Entering fully on state\n"} unique strConst__li2bpl12: int;

const {:string "FDO %s\n"} unique strConst__li2bpl30: int;

const {:string "FDO %s \n"} unique strConst__li2bpl107: int;

const {:string "Failed to create a Callback object status %lx\n"} unique strConst__li2bpl88: int;

const {:string "Failed to register callback\n"} unique strConst__li2bpl89: int;

const {:string "GetPciBusInterfaceStandard entered.\n"} unique strConst__li2bpl60: int;

const {:string "Good Receives %d\n"} unique strConst__li2bpl186: int;

const {:string "Good Transmits %d\n"} unique strConst__li2bpl185: int;

const {:string "IRP_MN_CANCEL_REMOVE_DEVICE"} unique strConst__li2bpl138: int;

const {:string "IRP_MN_CANCEL_STOP_DEVICE"} unique strConst__li2bpl141: int;

const {:string "IRP_MN_CHANGE_SINGLE_INSTANCE"} unique strConst__li2bpl34: int;

const {:string "IRP_MN_CHANGE_SINGLE_ITEM"} unique strConst__li2bpl35: int;

const {:string "IRP_MN_DEVICE_USAGE_NOTIFICATION"} unique strConst__li2bpl156: int;

const {:string "IRP_MN_DISABLE_COLLECTION"} unique strConst__li2bpl39: int;

const {:string "IRP_MN_DISABLE_EVENTS"} unique strConst__li2bpl37: int;

const {:string "IRP_MN_EJECT"} unique strConst__li2bpl151: int;

const {:string "IRP_MN_ENABLE_COLLECTION"} unique strConst__li2bpl38: int;

const {:string "IRP_MN_ENABLE_EVENTS"} unique strConst__li2bpl36: int;

const {:string "IRP_MN_EXECUTE_METHOD"} unique strConst__li2bpl41: int;

const {:string "IRP_MN_FILTER_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl148: int;

const {:string "IRP_MN_QUERY_ALL_DATA"} unique strConst__li2bpl32: int;

const {:string "IRP_MN_QUERY_BUS_INFORMATION"} unique strConst__li2bpl155: int;

const {:string "IRP_MN_QUERY_CAPABILITIES"} unique strConst__li2bpl144: int;

const {:string "IRP_MN_QUERY_DEVICE_RELATIONS"} unique strConst__li2bpl142: int;

const {:string "IRP_MN_QUERY_DEVICE_TEXT"} unique strConst__li2bpl147: int;

const {:string "IRP_MN_QUERY_ID"} unique strConst__li2bpl153: int;

const {:string "IRP_MN_QUERY_INTERFACE"} unique strConst__li2bpl143: int;

const {:string "IRP_MN_QUERY_LEGACY_BUS_INFORMATION"} unique strConst__li2bpl158: int;

const {:string "IRP_MN_QUERY_PNP_DEVICE_STATE"} unique strConst__li2bpl154: int;

const {:string "IRP_MN_QUERY_REMOVE_DEVICE"} unique strConst__li2bpl136: int;

const {:string "IRP_MN_QUERY_RESOURCES"} unique strConst__li2bpl145: int;

const {:string "IRP_MN_QUERY_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl146: int;

const {:string "IRP_MN_QUERY_SINGLE_INSTANCE"} unique strConst__li2bpl33: int;

const {:string "IRP_MN_QUERY_STOP_DEVICE"} unique strConst__li2bpl140: int;

const {:string "IRP_MN_READ_CONFIG"} unique strConst__li2bpl149: int;

const {:string "IRP_MN_REGINFO"} unique strConst__li2bpl40: int;

const {:string "IRP_MN_REMOVE_DEVICE"} unique strConst__li2bpl137: int;

const {:string "IRP_MN_SET_LOCK"} unique strConst__li2bpl152: int;

const {:string "IRP_MN_START_DEVICE"} unique strConst__li2bpl135: int;

const {:string "IRP_MN_STOP_DEVICE"} unique strConst__li2bpl139: int;

const {:string "IRP_MN_SURPRISE_REMOVAL"} unique strConst__li2bpl157: int;

const {:string "IRP_MN_WRITE_CONFIG"} unique strConst__li2bpl150: int;

const {:string "Idle detection is%s enabled\n"} unique strConst__li2bpl83: int;

const {:string "IoConnectInterrupt failed %x\n"} unique strConst__li2bpl0: int;

const {:string "IoSetDeviceInterfaceState failed: 0x%x\n"} unique strConst__li2bpl108: int;

const {:string "Ioctl called %p\n"} unique strConst__li2bpl159: int;

const {:string "IsUpperEdgeNdis"} unique strConst__li2bpl64: int;

const {:string "KeWaitForMultipleObjects %x"} unique strConst__li2bpl81: int;

const {:string "Late Collisions %d\n"} unique strConst__li2bpl188: int;

const {:string "MC(%d) = %02x-%02x-%02x-%02x-%02x-%02x\n"} unique strConst__li2bpl168: int;

const {:string "Max Collisions %d\n"} unique strConst__li2bpl187: int;

const {:string "Media state changed to %s\n"} unique strConst__li2bpl182: int;

const {:string "Media state changed to Connected\n"} unique strConst__li2bpl17: int;

const {:string "Mult Collision xmits %d\n"} unique strConst__li2bpl193: int;

const {:string "NICCompleteSendRequest, Pkt= %p Sgl %p\n"} unique strConst__li2bpl97: int;

const {:string "NICInitializeDeviceExtension failed (%x)\n"} unique strConst__li2bpl115: int;

const {:string "NumCoalesce"} unique strConst__li2bpl69: int;

const {:string "NumRfd"} unique strConst__li2bpl63: int;

const {:string "NumTcb"} unique strConst__li2bpl68: int;

const {:string "One Collision xmits %d\n"} unique strConst__li2bpl192: int;

const {:string "Packet needs to be coalesced\n"} unique strConst__li2bpl102: int;

const {:string "Packet size is less than %d\n"} unique strConst__li2bpl101: int;

const {:string "PciDrvDispatchIO called %p\n"} unique strConst__li2bpl111: int;

const {:string "PciDrvIoDecrement %d\n"} unique strConst__li2bpl112: int;

const {:string "PciDrvIoIncrement %d\n"} unique strConst__li2bpl160: int;

const {:string "PowerSaveEnabled"} unique strConst__li2bpl82: int;

const {:string "Queuing Requests\n"} unique strConst__li2bpl128: int;

const {:string "Re-Issuing Configure command for filter change\n"} unique strConst__li2bpl174: int;

const {:string "Re-start receive unit...\n"} unique strConst__li2bpl21: int;

const {:string "Receive Alignment errors %d\n"} unique strConst__li2bpl196: int;

const {:string "Receive CDT errors %d\n"} unique strConst__li2bpl199: int;

const {:string "Receive CRC errors %d\n"} unique strConst__li2bpl195: int;

const {:string "Receive failure = %x\n"} unique strConst__li2bpl16: int;

const {:string "Receive no resources %d\n"} unique strConst__li2bpl197: int;

const {:string "Receive overrun errors %d\n"} unique strConst__li2bpl198: int;

const {:string "Receive short frames %d\n"} unique strConst__li2bpl200: int;

const {:string "Receive unit already active\n"} unique strConst__li2bpl22: int;

const {:string "SET Power: Hardware error !!!\n"} unique strConst__li2bpl164: int;

const {:string "Set Idle timer\n"} unique strConst__li2bpl87: int;

const {:string "Shrink... CurrNumRfd = %d\n"} unique strConst__li2bpl15: int;

const {:string "SpeedDuplex"} unique strConst__li2bpl70: int;

const {:string "The driver is forwarding an IRP at an IRQL that is illegal for the IRP's major code"} unique strConst__li2bpl203: int;

const {:string "Total Collisions %d\n"} unique strConst__li2bpl194: int;

const {:string "Transmit Lost CRS %d\n"} unique strConst__li2bpl190: int;

const {:string "Transmit Underruns %d\n"} unique strConst__li2bpl189: int;

const {:string "Transmits Deferred %d\n"} unique strConst__li2bpl191: int;

const {:string "Unload\n"} unique strConst__li2bpl110: int;

const {:string "Upper edge is %sNDIS\n"} unique strConst__li2bpl67: int;

const {:string "Wait-Wake is%s enabled\n"} unique strConst__li2bpl73: int;

const {:string "WaitScb failed, ScbCommandLow=%x\n"} unique strConst__li2bpl183: int;

const {:string "WaitWakeEnabled"} unique strConst__li2bpl71: int;

const {:string "Waiting for pending requests to complete (Remove)...\n"} unique strConst__li2bpl127: int;

const {:string "Waiting for pending requests to complete (Stop)...\n"} unique strConst__li2bpl126: int;

const {:string "Waiting for the previously generated power irp to complete\n"} unique strConst__li2bpl80: int;

const {:string "Waiting for the watchdogtimer to exit..\n"} unique strConst__li2bpl56: int;

const {:string "Zero length buffer %p\n"} unique strConst__li2bpl100: int;

const {:string "\\Callback\\PowerState"} unique strConst__li2bpl90: int;

const {:string "caller"} unique strConst__li2bpl26: int;

const {:string "canceling wakeIrp\n"} unique strConst__li2bpl78: int;

const {:string "halt"} unique strConst__li2bpl202: int;

const {:string "not "} unique strConst__li2bpl65: int;

const {:string "unknown_pnp_irp"} unique strConst__li2bpl134: int;

const {:string "unknown_syscontrol_irp"} unique strConst__li2bpl31: int;

const {:allocated} li2bplFunctionConstant1377: int;

axiom li2bplFunctionConstant1377 == 1377;

const {:allocated} li2bplFunctionConstant3726: int;

axiom li2bplFunctionConstant3726 == 3726;

const {:allocated} li2bplFunctionConstant3731: int;

axiom li2bplFunctionConstant3731 == 3731;

const {:allocated} li2bplFunctionConstant5286: int;

axiom li2bplFunctionConstant5286 == 5286;

const {:allocated} li2bplFunctionConstant5292: int;

axiom li2bplFunctionConstant5292 == 5292;

const {:allocated} li2bplFunctionConstant5293: int;

axiom li2bplFunctionConstant5293 == 5293;

const {:allocated} li2bplFunctionConstant5299: int;

axiom li2bplFunctionConstant5299 == 5299;

const {:allocated} li2bplFunctionConstant5762: int;

axiom li2bplFunctionConstant5762 == 5762;

const {:allocated} li2bplFunctionConstant5764: int;

axiom li2bplFunctionConstant5764 == 5764;

const {:allocated} li2bplFunctionConstant6237: int;

axiom li2bplFunctionConstant6237 == 6237;

const {:allocated} li2bplFunctionConstant6699: int;

axiom li2bplFunctionConstant6699 == 6699;

const {:allocated} li2bplFunctionConstant6704: int;

axiom li2bplFunctionConstant6704 == 6704;

const {:allocated} li2bplFunctionConstant6706: int;

axiom li2bplFunctionConstant6706 == 6706;

const {:allocated} li2bplFunctionConstant6710: int;

axiom li2bplFunctionConstant6710 == 6710;

const {:allocated} li2bplFunctionConstant6711: int;

axiom li2bplFunctionConstant6711 == 6711;

const {:allocated} li2bplFunctionConstant7182: int;

axiom li2bplFunctionConstant7182 == 7182;

const {:allocated} li2bplFunctionConstant7183: int;

axiom li2bplFunctionConstant7183 == 7183;

const {:allocated} li2bplFunctionConstant7184: int;

axiom li2bplFunctionConstant7184 == 7184;

const {:allocated} li2bplFunctionConstant7185: int;

axiom li2bplFunctionConstant7185 == 7185;

const {:allocated} li2bplFunctionConstant7186: int;

axiom li2bplFunctionConstant7186 == 7186;

const {:allocated} li2bplFunctionConstant7187: int;

axiom li2bplFunctionConstant7187 == 7187;

const {:allocated} li2bplFunctionConstant7188: int;

axiom li2bplFunctionConstant7188 == 7188;

const {:allocated} li2bplFunctionConstant7189: int;

axiom li2bplFunctionConstant7189 == 7189;

const {:allocated} li2bplFunctionConstant7190: int;

axiom li2bplFunctionConstant7190 == 7190;

const {:allocated} li2bplFunctionConstant7191: int;

axiom li2bplFunctionConstant7191 == 7191;

const {:allocated} li2bplFunctionConstant7194: int;

axiom li2bplFunctionConstant7194 == 7194;

const {:allocated} li2bplFunctionConstant7198: int;

axiom li2bplFunctionConstant7198 == 7198;

const {:allocated} li2bplFunctionConstant7201: int;

axiom li2bplFunctionConstant7201 == 7201;

const {:allocated} li2bplFunctionConstant7727: int;

axiom li2bplFunctionConstant7727 == 7727;

const {:allocated} li2bplFunctionConstant7729: int;

axiom li2bplFunctionConstant7729 == 7729;

const {:allocated} li2bplFunctionConstant7732: int;

axiom li2bplFunctionConstant7732 == 7732;

const {:allocated} li2bplFunctionConstant909: int;

axiom li2bplFunctionConstant909 == 909;

const {:allocated} li2bplFunctionConstant911: int;

axiom li2bplFunctionConstant911 == 911;

implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_29: int, actual_Irp_28: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_646: int)
{
  var {:scalar} Status_2: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_28: int;
  var {:pointer} Context_7: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_28 := actual_Irp_28;
    Context_7 := actual_Context_7;
    Completion := actual_Completion;
    call {:si_unique_call 1876} irpsp := sdv_IoGetNextIrpStackLocation(Irp_28);
    Status_2 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1877} Status_2 := PciDrvCompletionDevicePowerUp#0(DeviceObject_29, Irp_28, Context_7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1878} Status_2 := PciDrvCompletionSystemPowerUp(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1879} Status_2 := PciDrvDispatchPnpComplete(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1880} Status_2 := PciDrvDispatchPnpStartComplete(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1881} Status_2 := PciDrvWaitWakeIoCompletionRoutine(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L79;

  L79:
    Tmp_646 := Status_2;
    goto LM2;

  LM2:
    return;

  anon16_Then:
    goto L79;

  anon15_Then:
    goto L62;

  anon14_Then:
    goto L45;

  anon13_Then:
    goto L28;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#0(actual_DeviceObject_29: int, actual_Irp_28: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_646: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_29: int, actual_Irp_28: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_646: int)
{
  var {:scalar} Status_2: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_29: int;
  var {:pointer} Irp_28: int;
  var {:pointer} Context_7: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_29 := actual_DeviceObject_29;
    Irp_28 := actual_Irp_28;
    Context_7 := actual_Context_7;
    Completion := actual_Completion;
    call {:si_unique_call 1882} irpsp := sdv_IoGetNextIrpStackLocation(Irp_28);
    Status_2 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1883} Status_2 := PciDrvCompletionDevicePowerUp#1(DeviceObject_29, Irp_28, Context_7);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1884} Status_2 := PciDrvCompletionSystemPowerUp(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L28;

  L28:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1885} Status_2 := PciDrvDispatchPnpComplete(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L45;

  L45:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1886} Status_2 := PciDrvDispatchPnpStartComplete(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L62;

  L62:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    sdv_irql_previous_5 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_current;
    sdv_irql_current := 2;
    call {:si_unique_call 1887} Status_2 := PciDrvWaitWakeIoCompletionRoutine(DeviceObject_29, Irp_28, Context_7);
    sdv_irql_current := sdv_irql_previous;
    sdv_irql_previous := sdv_irql_previous_2;
    sdv_irql_previous_2 := sdv_irql_previous_3;
    sdv_irql_previous_3 := sdv_irql_previous_4;
    sdv_irql_previous_4 := sdv_irql_previous_5;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    Mem_T.INT4[Completion] := 1;
    goto L79;

  L79:
    Tmp_646 := Status_2;
    goto LM2;

  LM2:
    return;

  anon16_Then:
    goto L79;

  anon15_Then:
    goto L62;

  anon14_Then:
    goto L45;

  anon13_Then:
    goto L28;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L11;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines#1(actual_DeviceObject_29: int, actual_Irp_28: int, actual_Context_7: int, actual_Completion: int) returns (Tmp_646: int);
  modifies sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, Mem_T.INT4, alloc, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_current) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == 2 || sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_2) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#0(actual_DeviceObject_4: int, actual_Irp_2: int, actual_NotUsed: int) returns (Tmp_97: int)
{
  var {:pointer} Tmp_98: int;
  var {:pointer} fdoData_4: int;
  var {:scalar} status_13: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;

  anon0:
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 1888} Tmp_98 := __HAVOC_malloc(156);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc fdoData_4;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    havoc status_13;
    call {:si_unique_call 1889} vslice_dummy_var_221 := sdv_IoGetCurrentIrpStackLocation(Irp_2);
    Tmp_98 := strConst__li2bpl28;
    call {:si_unique_call 1890} DebugPrint(5, 4, Tmp_98);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_13 >= 0;
    call {:si_unique_call 1891} status_13 := PciDrvQueuePassiveLevelCallback(fdoData_4, li2bplFunctionConstant6710, Irp_2, 2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_13 >= 0;
    goto L27;

  L27:
    Tmp_97 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 > status_13;
    call {:si_unique_call 1892} vslice_dummy_var_219 := PciDrvFinalizeDevicePowerIrp#0(DeviceObject_4, Irp_2, 2, status_13);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_13;
    call {:si_unique_call 1893} PoStartNextPowerIrp(0);
    call {:si_unique_call 1894} vslice_dummy_var_220 := PciDrvIoDecrement(fdoData_4);
    Tmp_97 := 0;
    goto L1;
}



procedure {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#0(actual_DeviceObject_4: int, actual_Irp_2: int, actual_NotUsed: int) returns (Tmp_97: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#1(actual_DeviceObject_4: int, actual_Irp_2: int, actual_NotUsed: int) returns (Tmp_97: int)
{
  var {:pointer} Tmp_98: int;
  var {:pointer} fdoData_4: int;
  var {:scalar} status_13: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;

  anon0:
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 1895} Tmp_98 := __HAVOC_malloc(156);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    havoc fdoData_4;
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    havoc status_13;
    call {:si_unique_call 1896} vslice_dummy_var_224 := sdv_IoGetCurrentIrpStackLocation(Irp_2);
    Tmp_98 := strConst__li2bpl28;
    call {:si_unique_call 1897} DebugPrint(5, 4, Tmp_98);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_13 >= 0;
    call {:si_unique_call 1898} status_13 := PciDrvQueuePassiveLevelCallback(fdoData_4, li2bplFunctionConstant6710, Irp_2, 2);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_13 >= 0;
    goto L27;

  L27:
    Tmp_97 := -1073741802;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 0 > status_13;
    call {:si_unique_call 1899} vslice_dummy_var_222 := PciDrvFinalizeDevicePowerIrp#1(DeviceObject_4, Irp_2, 2, status_13);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L27;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} 0 > status_13;
    call {:si_unique_call 1900} PoStartNextPowerIrp(0);
    call {:si_unique_call 1901} vslice_dummy_var_223 := PciDrvIoDecrement(fdoData_4);
    Tmp_97 := 0;
    goto L1;
}



procedure {:origName "PciDrvCompletionDevicePowerUp"} PciDrvCompletionDevicePowerUp#1(actual_DeviceObject_4: int, actual_Irp_2: int, actual_NotUsed: int) returns (Tmp_97: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#0(actual_DeviceObject_3: int, actual_Irp_1: int, actual_Direction: int, actual_Result: int) returns (Tmp_94: int)
{
  var {:pointer} fdoData_3: int;
  var {:pointer} Tmp_96: int;
  var {:scalar} status_12: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_1: int;
  var {:scalar} Direction: int;
  var {:scalar} Result: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;

  anon0:
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_1 := actual_Irp_1;
    Direction := actual_Direction;
    Result := actual_Result;
    call {:si_unique_call 1902} Tmp_96 := __HAVOC_malloc(152);
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc fdoData_3;
    Tmp_96 := strConst__li2bpl27;
    call {:si_unique_call 1903} DebugPrint(5, 4, Tmp_96);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Direction == 2;
    goto L11;

  L11:
    call {:si_unique_call 1904} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 1905} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1906} vslice_dummy_var_225 := PciDrvIoDecrement(fdoData_3);
    Tmp_94 := Result;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} Direction != 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Result >= 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 1907} status_12 := PciDrvDispatchPowerDefault#0(DeviceObject_3, Irp_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1908} vslice_dummy_var_226 := PciDrvIoDecrement(fdoData_3);
    Tmp_94 := status_12;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} 0 > Result;
    goto L11;
}



procedure {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#0(actual_DeviceObject_3: int, actual_Irp_1: int, actual_Direction: int, actual_Result: int) returns (Tmp_94: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#1(actual_DeviceObject_3: int, actual_Irp_1: int, actual_Direction: int, actual_Result: int) returns (Tmp_94: int)
{
  var {:pointer} fdoData_3: int;
  var {:pointer} Tmp_96: int;
  var {:scalar} status_12: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_1: int;
  var {:scalar} Direction: int;
  var {:scalar} Result: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;

  anon0:
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_1 := actual_Irp_1;
    Direction := actual_Direction;
    Result := actual_Result;
    call {:si_unique_call 1909} Tmp_96 := __HAVOC_malloc(152);
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc fdoData_3;
    Tmp_96 := strConst__li2bpl27;
    call {:si_unique_call 1910} DebugPrint(5, 4, Tmp_96);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Direction == 2;
    goto L11;

  L11:
    call {:si_unique_call 1911} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 1912} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1913} vslice_dummy_var_227 := PciDrvIoDecrement(fdoData_3);
    Tmp_94 := Result;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    assume {:partition} Direction != 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Result >= 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 1914} status_12 := PciDrvDispatchPowerDefault#1(DeviceObject_3, Irp_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1915} vslice_dummy_var_228 := PciDrvIoDecrement(fdoData_3);
    Tmp_94 := status_12;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} 0 > Result;
    goto L11;
}



procedure {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp#1(actual_DeviceObject_3: int, actual_Irp_1: int, actual_Direction: int, actual_Result: int) returns (Tmp_94: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#0(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_92: int)
{
  var {:scalar} status_11: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp := actual_Irp;
    call {:si_unique_call 1916} sdv_do_paged_code_check();
    call {:si_unique_call 1917} PoStartNextPowerIrp(0);
    call {:si_unique_call 1918} sdv_IoSkipCurrentIrpStackLocation(Irp);
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume Irp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1919} SLIC_PoCallDriver_entry(strConst__li2bpl26, Irp);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  L21:
    call {:si_unique_call 1920} status_11 := PoCallDriver#0(0, Irp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_92 := status_11;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume !(Irp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L21;
}



procedure {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#0(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_92: int);
  modifies alloc, Mem_T.INT4, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#1(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_92: int)
{
  var {:scalar} status_11: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp := actual_Irp;
    call {:si_unique_call 1921} sdv_do_paged_code_check();
    call {:si_unique_call 1922} PoStartNextPowerIrp(0);
    call {:si_unique_call 1923} sdv_IoSkipCurrentIrpStackLocation(Irp);
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume Irp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1924} SLIC_PoCallDriver_entry(strConst__li2bpl26, Irp);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  L21:
    call {:si_unique_call 1925} status_11 := PoCallDriver#1(0, Irp);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_92 := status_11;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume !(Irp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L21;
}



procedure {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault#1(actual_DeviceObject_2: int, actual_Irp: int) returns (Tmp_92: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous) || sdv_irql_previous == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_21: int, actual_Irp_23: int) returns (Tmp_525: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_52: int;
  var {:pointer} Irp_23: int;

  anon0:
    call {:si_unique_call 1926} completion := __HAVOC_malloc(4);
    Irp_23 := actual_Irp_23;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_52 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_525 := status_52;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    assume false;
    return;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume false;
    return;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume false;
    return;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume false;
    return;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#0(actual_DeviceObject_21: int, actual_Irp_23: int) returns (Tmp_525: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} Tmp_525 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_21: int, actual_Irp_23: int) returns (Tmp_525: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} status_52: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 1927} completion := __HAVOC_malloc(4);
    Irp_23 := actual_Irp_23;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    Mem_T.INT4[completion] := 0;
    status_52 := 259;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L21;

  L21:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon56_Then, anon56_Else;

  anon56_Else:
    goto L29;

  L29:
    Tmp_525 := status_52;
    goto LM2;

  LM2:
    return;

  anon56_Then:
    havoc vslice_dummy_var_69;
    call {:si_unique_call 1928} vslice_dummy_var_229 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_69, completion);
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon76_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon55_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L23;

  anon54_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L21;

  anon75_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L19;

  anon69_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L58;

  L58:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L60;

  L60:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_70;
    call {:si_unique_call 1929} vslice_dummy_var_232 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_70, completion);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L62;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L60;

  anon77_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L58;

  anon70_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L32;

  L32:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L34;

  L34:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    havoc vslice_dummy_var_71;
    call {:si_unique_call 1930} vslice_dummy_var_230 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_71, completion);
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon74_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon60_Then:
    goto L29;

  anon59_Then:
    goto L29;

  anon58_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L36;

  anon57_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L34;

  anon73_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L32;

  anon53_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L45;

  L45:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_23;
    goto L47;

  L47:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_23;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    havoc vslice_dummy_var_72;
    call {:si_unique_call 1931} vslice_dummy_var_231 := sdv_RunIoCompletionRoutines#0(sdv_p_devobj_fdo, Irp_23, vslice_dummy_var_72, completion);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  anon72_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon64_Then:
    goto L29;

  anon63_Then:
    goto L29;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_23;
    goto L49;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_23;
    goto L47;

  anon71_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_23;
    goto L45;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver#1(actual_DeviceObject_21: int, actual_Irp_23: int) returns (Tmp_525: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current, yogi_error;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous) || sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_current) || sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_2) || sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_57: int, actual_Irp_30: int) returns (Tmp_687: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_688: int;
  var {:scalar} Tmp_689: int;
  var {:pointer} Tmp_690: int;
  var {:pointer} Tmp_691: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_693: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_694: int;
  var {:pointer} Tmp_695: int;
  var {:scalar} sdv_349: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} sdv_351: int;
  var {:scalar} sdv_352: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_57: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_696: int;
  var {:pointer} Tmp_697: int;
  var {:scalar} Tmp_698: int;
  var {:pointer} FdoData_57: int;
  var {:pointer} Irp_30: int;
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 1932} unUsed := __HAVOC_malloc(4);
    FdoData_57 := actual_FdoData_57;
    Irp_30 := actual_Irp_30;
    call {:si_unique_call 1933} Tmp_688 := __HAVOC_malloc(124);
    call {:si_unique_call 1934} Tmp_690 := __HAVOC_malloc(132);
    call {:si_unique_call 1935} Tmp_691 := __HAVOC_malloc(112);
    call {:si_unique_call 1936} Tmp_692 := __HAVOC_malloc(16);
    call {:si_unique_call 1937} Tmp_695 := __HAVOC_malloc(132);
    call {:si_unique_call 1938} Tmp_696 := __HAVOC_malloc(100);
    call {:si_unique_call 1939} Tmp_697 := __HAVOC_malloc(100);
    status_57 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 1940} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_30);
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_697 := strConst__li2bpl165;
    call {:si_unique_call 1941} DebugPrint(6, 32, Tmp_697);
    Oid := 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} 8 > BufferLength;
    status_57 := 5;
    goto L33;

  L33:
    Tmp_696 := strConst__li2bpl161;
    call {:si_unique_call 1942} DebugPrint(6, 32, Tmp_696);
    Tmp_687 := status_57;
    goto L1;

  L1:
    return;

  anon65_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_692;
    InformationBuffer_2 := Tmp_692;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid != 65806;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Oid != 16843011;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Oid != -50265855;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Oid != -50265853;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Oid != -50265852;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Oid == -50265850;
    Tmp_691 := strConst__li2bpl163;
    call {:si_unique_call 1943} DebugPrint(5, 32, Tmp_691);
    call {:si_unique_call 1944} sdv_349 := IsPoMgmtSupported(FdoData_57);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_349 != 0;
    call {:si_unique_call 1945} sdv_RtlMoveMemory(0, 0, 4);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_689 := BAND(WakeUpEnable, 2);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Tmp_689 != 2;
    status_57 := -1073741637;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon69_Then:
    assume {:partition} Tmp_689 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    status_57 := 0;
    goto L33;

  anon51_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon50_Then:
    assume {:partition} sdv_349 == 0;
    status_57 := -1073741637;
    goto L33;

  anon60_Then:
    assume {:partition} Oid != -50265850;
    status_57 := -1073741637;
    goto L33;

  anon61_Then:
    assume {:partition} Oid == -50265852;
    Tmp_690 := strConst__li2bpl162;
    call {:si_unique_call 1946} DebugPrint(5, 32, Tmp_690);
    call {:si_unique_call 1947} sdv_351 := IsPoMgmtSupported(FdoData_57);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_351 != 0;
    call {:si_unique_call 1948} status_57 := NICRemoveWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed, unUsed);
    goto L33;

  anon52_Then:
    assume {:partition} sdv_351 == 0;
    status_57 := -1073741637;
    goto L33;

  anon62_Then:
    assume {:partition} Oid == -50265853;
    Tmp_695 := strConst__li2bpl162;
    call {:si_unique_call 1949} DebugPrint(5, 32, Tmp_695);
    call {:si_unique_call 1950} sdv_352 := IsPoMgmtSupported(FdoData_57);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_352 != 0;
    call {:si_unique_call 1951} status_57 := NICAddWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed, unUsed);
    goto L33;

  anon53_Then:
    assume {:partition} sdv_352 == 0;
    status_57 := -1073741637;
    goto L33;

  anon63_Then:
    assume {:partition} Oid == -50265855;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_687 := -1073741789;
    goto L1;

  anon49_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_694 := InformationBuffer_2;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    newDeviceState := Mem_T.INT4[Tmp_694];
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc oldDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc vslice_dummy_var_73;
    call {:si_unique_call 1952} status_57 := PciDrvPowerBeginQueuingIrps#0(vslice_dummy_var_73, 1, 0);
    goto L97;

  L97:
    call {:si_unique_call 1953} status_57 := NICSetPower(FdoData_57, newDeviceState);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_57 != 0;
    Tmp_688 := strConst__li2bpl164;
    call {:si_unique_call 1954} DebugPrint(2, 32, Tmp_688);
    goto L33;

  anon54_Then:
    assume {:partition} status_57 == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    assume false;
    return;

  anon55_Then:
    assume {:partition} newDeviceState != 1;
    goto L111;

  L111:
    status_57 := 0;
    goto L33;

  anon68_Then:
    assume {:partition} oldDeviceState != 1;
    goto L97;

  anon64_Then:
    assume {:partition} Oid == 16843011;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_687 := -1073741306;
    goto L1;

  anon48_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_698 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_698;
    call {:si_unique_call 1955} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 1956} Tmp_693 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    Mem_T.INT4[Tmp_693] := oldIrql_13;
    call {:si_unique_call 1957} sdv_KeAcquireSpinLock(0, Tmp_693);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_693];
    call {:si_unique_call 1958} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 1959} status_57 := NICSetMulticastList(FdoData_57);
    call {:si_unique_call 1960} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1961} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon67_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_698 := InformationBufferLength_2;
    goto L122;

  anon66_Then:
    assume {:partition} Oid == 65806;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_687 := -1073741306;
    goto L1;

  anon47_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 1962} sdv_RtlMoveMemory(0, 0, 4);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_687 := -1073741637;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 1963} Tmp_693 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    Mem_T.INT4[Tmp_693] := oldIrql_13;
    call {:si_unique_call 1964} sdv_KeAcquireSpinLock(0, Tmp_693);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_693];
    call {:si_unique_call 1965} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 1966} status_57 := PciDrvQueueIoctlIrp(FdoData_57, Irp_30);
    call {:si_unique_call 1967} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1968} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon58_Then:
    call {:si_unique_call 1969} status_57 := NICSetPacketFilter(FdoData_57, PacketFilter);
    call {:si_unique_call 1970} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1971} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_57 == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon59_Then:
    assume {:partition} status_57 != 0;
    goto L33;

  anon57_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_57: int, actual_Irp_30: int) returns (Tmp_687: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_687 == -1073741789 || Tmp_687 == -1073741306 || Tmp_687 == -1073741637 || Tmp_687 == 5 || Tmp_687 == 0 || Tmp_687 == -1073741675 || Tmp_687 == -1073741823 || Tmp_687 == -1073741668 || Tmp_687 == -1073741661 || Tmp_687 == -1073741536 || Tmp_687 == 259 || Tmp_687 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_57: int, actual_Irp_30: int) returns (Tmp_687: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_688: int;
  var {:scalar} Tmp_689: int;
  var {:pointer} Tmp_690: int;
  var {:pointer} Tmp_691: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_692: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_693: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_694: int;
  var {:pointer} Tmp_695: int;
  var {:scalar} sdv_349: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} sdv_351: int;
  var {:scalar} sdv_352: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_57: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_696: int;
  var {:pointer} Tmp_697: int;
  var {:scalar} Tmp_698: int;
  var {:pointer} FdoData_57: int;
  var {:pointer} Irp_30: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 1972} unUsed := __HAVOC_malloc(4);
    FdoData_57 := actual_FdoData_57;
    Irp_30 := actual_Irp_30;
    call {:si_unique_call 1973} Tmp_688 := __HAVOC_malloc(124);
    call {:si_unique_call 1974} Tmp_690 := __HAVOC_malloc(132);
    call {:si_unique_call 1975} Tmp_691 := __HAVOC_malloc(112);
    call {:si_unique_call 1976} Tmp_692 := __HAVOC_malloc(16);
    call {:si_unique_call 1977} Tmp_695 := __HAVOC_malloc(132);
    call {:si_unique_call 1978} Tmp_696 := __HAVOC_malloc(100);
    call {:si_unique_call 1979} Tmp_697 := __HAVOC_malloc(100);
    status_57 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 1980} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_30);
    assume {:nonnull} Irp_30 != 0;
    assume Irp_30 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_697 := strConst__li2bpl165;
    call {:si_unique_call 1981} DebugPrint(6, 32, Tmp_697);
    Oid := 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} 8 > BufferLength;
    status_57 := 5;
    goto L33;

  L33:
    Tmp_696 := strConst__li2bpl161;
    call {:si_unique_call 1982} DebugPrint(6, 32, Tmp_696);
    Tmp_687 := status_57;
    goto L1;

  L1:
    return;

  anon65_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_692;
    InformationBuffer_2 := Tmp_692;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid != 65806;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Oid != 16843011;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Oid != -50265855;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Oid != -50265853;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Oid != -50265852;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Oid == -50265850;
    Tmp_691 := strConst__li2bpl163;
    call {:si_unique_call 1983} DebugPrint(5, 32, Tmp_691);
    call {:si_unique_call 1984} sdv_349 := IsPoMgmtSupported(FdoData_57);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_349 != 0;
    call {:si_unique_call 1985} sdv_RtlMoveMemory(0, 0, 4);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_689 := BAND(WakeUpEnable, 2);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Tmp_689 != 2;
    status_57 := -1073741637;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon69_Then:
    assume {:partition} Tmp_689 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    status_57 := 0;
    goto L33;

  anon51_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon50_Then:
    assume {:partition} sdv_349 == 0;
    status_57 := -1073741637;
    goto L33;

  anon60_Then:
    assume {:partition} Oid != -50265850;
    status_57 := -1073741637;
    goto L33;

  anon61_Then:
    assume {:partition} Oid == -50265852;
    Tmp_690 := strConst__li2bpl162;
    call {:si_unique_call 1986} DebugPrint(5, 32, Tmp_690);
    call {:si_unique_call 1987} sdv_351 := IsPoMgmtSupported(FdoData_57);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_351 != 0;
    call {:si_unique_call 1988} status_57 := NICRemoveWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed, unUsed);
    goto L33;

  anon52_Then:
    assume {:partition} sdv_351 == 0;
    status_57 := -1073741637;
    goto L33;

  anon62_Then:
    assume {:partition} Oid == -50265853;
    Tmp_695 := strConst__li2bpl162;
    call {:si_unique_call 1989} DebugPrint(5, 32, Tmp_695);
    call {:si_unique_call 1990} sdv_352 := IsPoMgmtSupported(FdoData_57);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_352 != 0;
    call {:si_unique_call 1991} status_57 := NICAddWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed, unUsed);
    goto L33;

  anon53_Then:
    assume {:partition} sdv_352 == 0;
    status_57 := -1073741637;
    goto L33;

  anon63_Then:
    assume {:partition} Oid == -50265855;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_687 := -1073741789;
    goto L1;

  anon49_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_694 := InformationBuffer_2;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    newDeviceState := Mem_T.INT4[Tmp_694];
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc oldDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc vslice_dummy_var_74;
    call {:si_unique_call 1992} status_57 := PciDrvPowerBeginQueuingIrps#1(vslice_dummy_var_74, 1, 0);
    goto L97;

  L97:
    call {:si_unique_call 1993} status_57 := NICSetPower(FdoData_57, newDeviceState);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_57 != 0;
    Tmp_688 := strConst__li2bpl164;
    call {:si_unique_call 1994} DebugPrint(2, 32, Tmp_688);
    goto L33;

  anon54_Then:
    assume {:partition} status_57 == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    call {:si_unique_call 1995} PciDrvProcessQueuedRequests#0(FdoData_57);
    goto L111;

  L111:
    status_57 := 0;
    goto L33;

  anon55_Then:
    assume {:partition} newDeviceState != 1;
    goto L111;

  anon68_Then:
    assume {:partition} oldDeviceState != 1;
    goto L97;

  anon64_Then:
    assume {:partition} Oid == 16843011;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_687 := -1073741306;
    goto L1;

  anon48_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_698 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_698;
    call {:si_unique_call 1996} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 1997} Tmp_693 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    Mem_T.INT4[Tmp_693] := oldIrql_13;
    call {:si_unique_call 1998} sdv_KeAcquireSpinLock(0, Tmp_693);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_693];
    call {:si_unique_call 1999} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2000} status_57 := NICSetMulticastList(FdoData_57);
    call {:si_unique_call 2001} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2002} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon67_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_698 := InformationBufferLength_2;
    goto L122;

  anon66_Then:
    assume {:partition} Oid == 65806;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_687 := -1073741306;
    goto L1;

  anon47_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 2003} sdv_RtlMoveMemory(0, 0, 4);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_687 := -1073741637;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 2004} Tmp_693 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    Mem_T.INT4[Tmp_693] := oldIrql_13;
    call {:si_unique_call 2005} sdv_KeAcquireSpinLock(0, Tmp_693);
    assume {:nonnull} Tmp_693 != 0;
    assume Tmp_693 > 0;
    oldIrql_13 := Mem_T.INT4[Tmp_693];
    call {:si_unique_call 2006} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 2007} status_57 := PciDrvQueueIoctlIrp(FdoData_57, Irp_30);
    call {:si_unique_call 2008} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2009} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon58_Then:
    call {:si_unique_call 2010} status_57 := NICSetPacketFilter(FdoData_57, PacketFilter);
    call {:si_unique_call 2011} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2012} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_57 == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon59_Then:
    assume {:partition} status_57 != 0;
    goto L33;

  anon57_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_57: int, actual_Irp_30: int) returns (Tmp_687: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} Tmp_687 == -1073741789 || Tmp_687 == -1073741306 || Tmp_687 == -1073741637 || Tmp_687 == 5 || Tmp_687 == 0 || Tmp_687 == -1073741675 || Tmp_687 == -1073741823 || Tmp_687 == -1073741668 || Tmp_687 == -1073741661 || Tmp_687 == -1073741536 || Tmp_687 == 259 || Tmp_687 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_6: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_107: int)
{
  var {:pointer} fdoData_6: int;
  var {:scalar} status_15: int;
  var {:pointer} DeviceObject_6: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_6 := actual_DeviceObject_6;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 2013} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc fdoData_6;
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    call {:si_unique_call 2014} PciDrvWithdrawIrps(fdoData_6);
    call {:si_unique_call 2015} PciDrvCancelIdleDetectionTimer(fdoData_6);
    call {:si_unique_call 2016} PciDrvReleaseAndWait(fdoData_6, IrpIoCharges, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 2017} status_15 := PciDrvCanSuspendDevice(DeviceObject_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_15 >= 0;
    goto L27;

  L27:
    Tmp_107 := status_15;
    return;

  anon6_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    assume false;
    return;

  anon5_Then:
    assume {:partition} Query == 0;
    status_15 := 0;
    goto L27;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_6: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_107: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} Tmp_107 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_6: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_107: int)
{
  var {:pointer} fdoData_6: int;
  var {:scalar} status_15: int;
  var {:pointer} DeviceObject_6: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_6 := actual_DeviceObject_6;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 2018} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc fdoData_6;
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    call {:si_unique_call 2019} PciDrvWithdrawIrps(fdoData_6);
    call {:si_unique_call 2020} PciDrvCancelIdleDetectionTimer(fdoData_6);
    call {:si_unique_call 2021} PciDrvReleaseAndWait(fdoData_6, IrpIoCharges, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 2022} status_15 := PciDrvCanSuspendDevice(DeviceObject_6);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_15 >= 0;
    goto L27;

  L27:
    Tmp_107 := status_15;
    return;

  anon6_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    call {:si_unique_call 2023} PciDrvProcessQueuedRequests#0(fdoData_6);
    goto L27;

  anon5_Then:
    assume {:partition} Query == 0;
    status_15 := 0;
    goto L27;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_6: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_107: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} Tmp_107 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_48: int)
{
  var {:pointer} Tmp_414: int;
  var {:pointer} Tmp_415: int;
  var {:scalar} sdv_232: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_417: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} sdv_235: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_48: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 2024} vslice_dummy_var_233 := __HAVOC_malloc(4);
    FdoData_48 := actual_FdoData_48;
    call {:si_unique_call 2025} Tmp_414 := __HAVOC_malloc(140);
    call {:si_unique_call 2026} Tmp_415 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_415 := strConst__li2bpl123;
    call {:si_unique_call 2027} DebugPrint(5, 2048, Tmp_415);
    goto L13;

  L13:
    call {:si_unique_call 2028} sdv_232, listEntry_3, Tmp_417, cancelRoutine, oldIrql_9, sdv_235, nIrpsReDispatched, nextIrp, vslice_dummy_var_235 := PciDrvProcessQueuedRequests#0_loop_L13(sdv_232, listEntry_3, Tmp_417, cancelRoutine, oldIrql_9, sdv_235, nIrpsReDispatched, nextIrp, FdoData_48, vslice_dummy_var_235);
    goto L13_last;

  L13_last:
    call {:si_unique_call 2043} Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    Mem_T.INT4[Tmp_417] := oldIrql_9;
    call {:si_unique_call 2044} sdv_KeAcquireSpinLock(0, Tmp_417);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_417];
    call {:si_unique_call 2045} sdv_232 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_232 != 0;
    call {:si_unique_call 2029} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto L27;

  L27:
    Tmp_414 := strConst__li2bpl122;
    call {:si_unique_call 2030} DebugPrint(5, 2048, Tmp_414);
    return;

  anon11_Then:
    assume {:partition} sdv_232 == 0;
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    call {:si_unique_call 2031} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_48));
    call {:si_unique_call 2032} sdv_235 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_235;
    call {:si_unique_call 2033} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 2034} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2035} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 2036} InitializeListHead(listEntry_3);
    call {:si_unique_call 2037} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon12_Then:
    call {:si_unique_call 2038} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2039} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    havoc vslice_dummy_var_75;
    call {:si_unique_call 2040} vslice_dummy_var_235 := PciDrvDispatchIO#0(vslice_dummy_var_75, nextIrp);
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    call {:si_unique_call 2041} vslice_dummy_var_234 := PciDrvIoIncrement(FdoData_48);
    call {:si_unique_call 2042} vslice_dummy_var_236 := PciDrvQueueRequest(FdoData_48, nextIrp);
    goto L27;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_48: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_48: int)
{
  var {:pointer} Tmp_414: int;
  var {:pointer} Tmp_415: int;
  var {:scalar} sdv_232: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_417: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} sdv_235: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_48: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 2046} vslice_dummy_var_237 := __HAVOC_malloc(4);
    FdoData_48 := actual_FdoData_48;
    call {:si_unique_call 2047} Tmp_414 := __HAVOC_malloc(140);
    call {:si_unique_call 2048} Tmp_415 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_415 := strConst__li2bpl123;
    call {:si_unique_call 2049} DebugPrint(5, 2048, Tmp_415);
    goto L13;

  L13:
    call {:si_unique_call 2050} sdv_232, listEntry_3, Tmp_417, cancelRoutine, oldIrql_9, sdv_235, nIrpsReDispatched, nextIrp, vslice_dummy_var_239 := PciDrvProcessQueuedRequests#1_loop_L13(sdv_232, listEntry_3, Tmp_417, cancelRoutine, oldIrql_9, sdv_235, nIrpsReDispatched, nextIrp, FdoData_48, vslice_dummy_var_239);
    goto L13_last;

  L13_last:
    call {:si_unique_call 2065} Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    Mem_T.INT4[Tmp_417] := oldIrql_9;
    call {:si_unique_call 2066} sdv_KeAcquireSpinLock(0, Tmp_417);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    oldIrql_9 := Mem_T.INT4[Tmp_417];
    call {:si_unique_call 2067} sdv_232 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_232 != 0;
    call {:si_unique_call 2051} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto L27;

  L27:
    Tmp_414 := strConst__li2bpl122;
    call {:si_unique_call 2052} DebugPrint(5, 2048, Tmp_414);
    return;

  anon11_Then:
    assume {:partition} sdv_232 == 0;
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    call {:si_unique_call 2053} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_48));
    call {:si_unique_call 2054} sdv_235 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_235;
    call {:si_unique_call 2055} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 2056} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2057} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 2058} InitializeListHead(listEntry_3);
    call {:si_unique_call 2059} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon12_Then:
    call {:si_unique_call 2060} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(nextIrp))] := 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2061} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    havoc vslice_dummy_var_76;
    call {:si_unique_call 2062} vslice_dummy_var_239 := PciDrvDispatchIO#1(vslice_dummy_var_76, nextIrp);
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    call {:si_unique_call 2063} vslice_dummy_var_238 := PciDrvIoIncrement(FdoData_48);
    call {:si_unique_call 2064} vslice_dummy_var_240 := PciDrvQueueRequest(FdoData_48, nextIrp);
    goto L27;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_48: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_15: int, actual_Irp_13: int) returns (Tmp_385: int)
{
  var {:pointer} irpStack_2: int;
  var {:pointer} fdoData_13: int;
  var {:pointer} Tmp_387: int;
  var {:scalar} status_37: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;
  var vslice_dummy_var_243: int;

  anon0:
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 2068} Tmp_387 := __HAVOC_malloc(112);
    status_37 := 0;
    Tmp_387 := strConst__li2bpl111;
    call {:si_unique_call 2069} DebugPrint(6, 32, Tmp_387);
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc fdoData_13;
    call {:si_unique_call 2070} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    call {:si_unique_call 2071} status_37 := PciDrvPowerUpDevice(fdoData_13, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_37 >= 0;
    call {:si_unique_call 2072} vslice_dummy_var_241 := PciDrvIoIncrement(fdoData_13);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2073} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2074} vslice_dummy_var_242 := PciDrvIoDecrement(fdoData_13);
    Tmp_385 := -1073741810;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2075} status_37 := PciDrvDispatchIoctl#0(fdoData_13, Irp_13);
    goto L48;

  L48:
    Tmp_385 := status_37;
    goto L1;

  anon26_Then:
    status_37 := -1073741823;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2076} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2077} vslice_dummy_var_243 := PciDrvIoDecrement(fdoData_13);
    goto L48;

  anon27_Then:
    call {:si_unique_call 2078} status_37 := PciDrvWrite(fdoData_13, Irp_13);
    goto L48;

  anon23_Then:
    call {:si_unique_call 2079} status_37 := PciDrvRead(fdoData_13, Irp_13);
    goto L48;

  anon21_Then:
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_13)] != 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L61;

  L61:
    call {:si_unique_call 2080} Tmp_385 := PciDrvQueueRequest(fdoData_13, Irp_13);
    goto L1;

  anon25_Then:
    goto L35;

  anon24_Then:
    goto L61;

  anon22_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_13)] == 0;
    goto L61;

  anon19_Then:
    assume {:partition} 0 > status_37;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2081} sdv_IoCompleteRequest(0, 0);
    Tmp_385 := status_37;
    goto L1;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_15: int, actual_Irp_13: int) returns (Tmp_385: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2) || sdv_irql_previous_2 == old(sdv_irql_previous_3) || sdv_irql_previous_2 == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3) || sdv_irql_previous_4 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3) || sdv_irql_previous_3 == old(sdv_irql_previous_4) || sdv_irql_previous_3 == old(sdv_irql_previous_2);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_15: int, actual_Irp_13: int) returns (Tmp_385: int)
{
  var {:pointer} irpStack_2: int;
  var {:pointer} fdoData_13: int;
  var {:pointer} Tmp_387: int;
  var {:scalar} status_37: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;

  anon0:
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 2082} Tmp_387 := __HAVOC_malloc(112);
    status_37 := 0;
    Tmp_387 := strConst__li2bpl111;
    call {:si_unique_call 2083} DebugPrint(6, 32, Tmp_387);
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc fdoData_13;
    call {:si_unique_call 2084} irpStack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    call {:si_unique_call 2085} status_37 := PciDrvPowerUpDevice(fdoData_13, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_37 >= 0;
    call {:si_unique_call 2086} vslice_dummy_var_244 := PciDrvIoIncrement(fdoData_13);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2087} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2088} vslice_dummy_var_245 := PciDrvIoDecrement(fdoData_13);
    Tmp_385 := -1073741810;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2089} status_37 := PciDrvDispatchIoctl#1(fdoData_13, Irp_13);
    goto L48;

  L48:
    Tmp_385 := status_37;
    goto L1;

  anon26_Then:
    status_37 := -1073741823;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2090} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2091} vslice_dummy_var_246 := PciDrvIoDecrement(fdoData_13);
    goto L48;

  anon27_Then:
    call {:si_unique_call 2092} status_37 := PciDrvWrite(fdoData_13, Irp_13);
    goto L48;

  anon23_Then:
    call {:si_unique_call 2093} status_37 := PciDrvRead(fdoData_13, Irp_13);
    goto L48;

  anon21_Then:
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_13)] != 0;
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} irpStack_2 != 0;
    assume irpStack_2 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L61;

  L61:
    call {:si_unique_call 2094} Tmp_385 := PciDrvQueueRequest(fdoData_13, Irp_13);
    goto L1;

  anon25_Then:
    goto L35;

  anon24_Then:
    goto L61;

  anon22_Then:
    assume {:partition} Mem_T.INT4[IsUpperEdgeNdis__FDO_DATA(fdoData_13)] == 0;
    goto L61;

  anon19_Then:
    assume {:partition} 0 > status_37;
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 2095} sdv_IoCompleteRequest(0, 0);
    Tmp_385 := status_37;
    goto L1;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_15: int, actual_Irp_13: int) returns (Tmp_385: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_55: int, actual_Irp_22: int) returns (Tmp_467: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_468: int;
  var {:pointer} Tmp_469: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} status_49: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_55: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 2096} bytesReturned := __HAVOC_malloc(4);
    FdoData_55 := actual_FdoData_55;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 2097} Tmp_468 := __HAVOC_malloc(68);
    status_49 := 0;
    Tmp_468 := strConst__li2bpl159;
    call {:si_unique_call 2098} DebugPrint(6, 32, Tmp_468);
    call {:si_unique_call 2099} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2100} Tmp_469 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    Mem_T.INT4[Tmp_469] := oldIrql_12;
    call {:si_unique_call 2101} sdv_KeAcquireSpinLock(0, Tmp_469);
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    oldIrql_12 := Mem_T.INT4[Tmp_469];
    call {:si_unique_call 2102} status_49 := PciDrvQueueIoctlIrp(FdoData_55, Irp_22);
    call {:si_unique_call 2103} sdv_KeReleaseSpinLock(0, oldIrql_12);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_49 != 259;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_22))] := Mem_T.INT4[bytesReturned];
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 2104} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2105} vslice_dummy_var_247 := PciDrvIoDecrement(FdoData_55);
    goto L39;

  L39:
    Tmp_467 := status_49;
    return;

  anon9_Then:
    assume {:partition} status_49 == 259;
    goto L39;

  anon10_Then:
    assume {:partition} FunctionCode != 1230872;
    status_49 := -1073741637;
    goto L38;

  anon11_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2106} status_49 := NICHandleSetOidRequest#0(FdoData_55, Irp_22);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  anon12_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2107} status_49 := NICHandleQueryOidRequest(FdoData_55, Irp_22, bytesReturned);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := Mem_T.INT4[bytesReturned] + 4;
    goto L38;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_55: int, actual_Irp_22: int) returns (Tmp_467: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_4) || sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4) || sdv_irql_previous_4 == old(sdv_irql_previous_3);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_55: int, actual_Irp_22: int) returns (Tmp_467: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_468: int;
  var {:pointer} Tmp_469: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} status_49: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_55: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_248: int;

  anon0:
    call {:si_unique_call 2108} bytesReturned := __HAVOC_malloc(4);
    FdoData_55 := actual_FdoData_55;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 2109} Tmp_468 := __HAVOC_malloc(68);
    status_49 := 0;
    Tmp_468 := strConst__li2bpl159;
    call {:si_unique_call 2110} DebugPrint(6, 32, Tmp_468);
    call {:si_unique_call 2111} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2112} Tmp_469 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    Mem_T.INT4[Tmp_469] := oldIrql_12;
    call {:si_unique_call 2113} sdv_KeAcquireSpinLock(0, Tmp_469);
    assume {:nonnull} Tmp_469 != 0;
    assume Tmp_469 > 0;
    oldIrql_12 := Mem_T.INT4[Tmp_469];
    call {:si_unique_call 2114} status_49 := PciDrvQueueIoctlIrp(FdoData_55, Irp_22);
    call {:si_unique_call 2115} sdv_KeReleaseSpinLock(0, oldIrql_12);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_49 != 259;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_22))] := Mem_T.INT4[bytesReturned];
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 2116} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2117} vslice_dummy_var_248 := PciDrvIoDecrement(FdoData_55);
    goto L39;

  L39:
    Tmp_467 := status_49;
    return;

  anon9_Then:
    assume {:partition} status_49 == 259;
    goto L39;

  anon10_Then:
    assume {:partition} FunctionCode != 1230872;
    status_49 := -1073741637;
    goto L38;

  anon11_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2118} status_49 := NICHandleSetOidRequest#1(FdoData_55, Irp_22);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := 0;
    goto L38;

  anon12_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2119} status_49 := NICHandleQueryOidRequest(FdoData_55, Irp_22, bytesReturned);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    Mem_T.INT4[bytesReturned] := Mem_T.INT4[bytesReturned] + 4;
    goto L38;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_55: int, actual_Irp_22: int) returns (Tmp_467: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int)
{

  entry:
    out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := in_i, in_Tmp_7, in_MaskBit, in_Signature, in_n, in_MaskOffset, in_Tmp_11, in_BitOffsetInMask;
    goto L41, exit;

  exit:
    return;

  L41:
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 128 > out_n;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} in_FrameLength > out_n;
    out_BitOffsetInMask := INTMOD(out_n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 2122} out_MaskBit := corral_nondet();
    assume {:nonnull} in_pCurrentMaskByte != 0;
    assume in_pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(out_MaskBit, Mem_T.INT4[in_pCurrentMaskByte]) == 0;
    goto L57;

  L57:
    out_n := out_n + 1;
    goto L57_dummy;

  L57_dummy:
    call {:si_unique_call 2123} {:si_old_unique_call 1} out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(out_i, out_Tmp_7, out_MaskBit, in_pCurrentMaskByte, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask, in_pFrame, in_FrameLength, in_MaskLength);
    return;

  anon22_Then:
    assume {:partition} BAND(out_MaskBit, Mem_T.INT4[in_pCurrentMaskByte]) != 0;
    out_Tmp_11 := out_n;
    assume {:nonnull} in_pFrame != 0;
    assume in_pFrame > 0;
    out_Tmp_7 := INTMOD(out_i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(out_Signature, 0) != 0;
    call {:si_unique_call 2120} out_Signature := corral_nondet();
    goto L56;

  L56:
    out_i := out_i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(out_Signature, 0) == 0;
    call {:si_unique_call 2121} out_Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} out_BitOffsetInMask == 0;
    out_MaskOffset := INTDIV(out_n, 8);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_MaskOffset != in_MaskLength;
    goto L47;
}



procedure {:LoopProcedure} MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_10: int, in_pPatternEntry: int, in_vslice_dummy_var_7: int) returns (out_sdv_10: int, out_pPatternEntry: int, out_vslice_dummy_var_7: int)
{

  entry:
    out_sdv_10, out_pPatternEntry, out_vslice_dummy_var_7 := in_sdv_10, in_pPatternEntry, in_vslice_dummy_var_7;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon3_Else;

  anon3_Else:
    call {:si_unique_call 2124} out_sdv_10 := sdv_containing_record(out_pPatternEntry, 0);
    assume {:nonnull} out_pPatternEntry != 0;
    assume out_pPatternEntry > 0;
    havoc out_pPatternEntry;
    call {:si_unique_call 2125} out_vslice_dummy_var_7 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2126} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_pPatternEntry;
    return;
}



procedure {:LoopProcedure} NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_10: int, in_pPatternEntry: int, in_vslice_dummy_var_7: int) returns (out_sdv_10: int, out_pPatternEntry: int, out_vslice_dummy_var_7: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_10 == in_pPatternEntry || out_sdv_10 == in_sdv_10;
  free ensures {:va_keep} out_vslice_dummy_var_7 == 1 || out_vslice_dummy_var_7 == 0 || out_vslice_dummy_var_7 == in_vslice_dummy_var_7;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_20: int, in_bIsThisThePattern: int, in_sdv_13: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_20: int, out_bIsThisThePattern: int, out_sdv_13: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int)
{

  entry:
    out_Tmp_20, out_bIsThisThePattern, out_sdv_13, out_pWakeUpPattern_1, out_pCurrPattern, out_pPatternEntry_1 := in_Tmp_20, in_bIsThisThePattern, in_sdv_13, in_pWakeUpPattern_1, in_pCurrPattern, in_pPatternEntry_1;
    goto L32, exit;

  exit:
    return;

  L32:
    goto anon14_Else;

  anon14_Else:
    out_bIsThisThePattern := 0;
    out_pWakeUpPattern_1 := 0;
    out_pCurrPattern := 0;
    call {:si_unique_call 2127} out_sdv_13 := sdv_containing_record(out_pPatternEntry_1, 0);
    out_pWakeUpPattern_1 := out_sdv_13;
    assume {:nonnull} out_pWakeUpPattern_1 != 0;
    assume out_pWakeUpPattern_1 > 0;
    havoc out_Tmp_20;
    out_pCurrPattern := out_Tmp_20;
    assume {:nonnull} out_pPatternEntry_1 != 0;
    assume out_pPatternEntry_1 > 0;
    havoc out_pPatternEntry_1;
    call {:si_unique_call 2128} out_bIsThisThePattern := MPAreTwoPatternsEqual(in_pReqPattern, out_pCurrPattern);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    havoc out_pPatternEntry_1;
    return;
}



procedure {:LoopProcedure} NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_20: int, in_bIsThisThePattern: int, in_sdv_13: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_20: int, out_bIsThisThePattern: int, out_sdv_13: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int);
  free ensures {:va_keep} out_bIsThisThePattern == 0 || out_bIsThisThePattern == 1 || out_bIsThisThePattern == in_bIsThisThePattern;
  free ensures {:va_keep} out_sdv_13 == in_pPatternEntry_1 || out_sdv_13 == in_sdv_13;
  free ensures {:va_keep} out_pWakeUpPattern_1 == in_pPatternEntry_1 || out_pWakeUpPattern_1 == in_pWakeUpPattern_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps_loop_L27(in_listEntry: int, in_sdv_29: int, in_sdv_35: int, in_sdv_37: int, in_irp: int, in_FdoData_7: int) returns (out_listEntry: int, out_sdv_29: int, out_sdv_35: int, out_sdv_37: int, out_irp: int)
{

  entry:
    out_listEntry, out_sdv_29, out_sdv_35, out_sdv_37, out_irp := in_listEntry, in_sdv_29, in_sdv_35, in_sdv_37, in_irp;
    goto L27, exit;

  exit:
    return;

  L27:
    call {:si_unique_call 2129} out_sdv_29 := sdv_IsListEmpty(0);
    goto anon16_Then;

  anon16_Then:
    assume {:partition} out_sdv_29 == 0;
    assume {:nonnull} in_FdoData_7 != 0;
    assume in_FdoData_7 > 0;
    call {:si_unique_call 2131} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_7));
    call {:si_unique_call 2132} out_sdv_35 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_35;
    call {:si_unique_call 2133} out_sdv_37 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon17_Then;

  anon17_Then:
    assume {:partition} out_sdv_37 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 2130} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    call {:si_unique_call 2134} {:si_old_unique_call 1} out_listEntry, out_sdv_29, out_sdv_35, out_sdv_37, out_irp := NICServiceReadIrps_loop_L27(out_listEntry, out_sdv_29, out_sdv_35, out_sdv_37, out_irp, in_FdoData_7);
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps_loop_L27(in_listEntry: int, in_sdv_29: int, in_sdv_35: int, in_sdv_37: int, in_irp: int, in_FdoData_7: int) returns (out_listEntry: int, out_sdv_29: int, out_sdv_35: int, out_sdv_37: int, out_irp: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_29 == 1 || out_sdv_29 == 0 || out_sdv_29 == in_sdv_29;
  free ensures {:va_keep} out_irp == 0 || out_irp == in_irp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICServiceReadIrps_loop_L15(in_Tmp_50: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_29: int, in_sdv_30: int, in_buffer: int, in_sdv_35: int, in_index: int, in_sdv_37: int, in_irp: int, in_Tmp_55: int, in_status_7: int, in_Tmp_56: int, in_FdoData_7: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_15: int, in_vslice_dummy_var_16: int, in_vslice_dummy_var_17: int, in_vslice_dummy_var_18: int) returns (out_Tmp_50: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_29: int, out_sdv_30: int, out_buffer: int, out_sdv_35: int, out_index: int, out_sdv_37: int, out_irp: int, out_Tmp_55: int, out_status_7: int, out_Tmp_56: int, out_vslice_dummy_var_15: int, out_vslice_dummy_var_16: int, out_vslice_dummy_var_17: int, out_vslice_dummy_var_18: int)
{

  entry:
    out_Tmp_50, out_length, out_pMpRfd, out_listEntry, out_sdv_29, out_sdv_30, out_buffer, out_sdv_35, out_index, out_sdv_37, out_irp, out_Tmp_55, out_status_7, out_Tmp_56, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18 := in_Tmp_50, in_length, in_pMpRfd, in_listEntry, in_sdv_29, in_sdv_30, in_buffer, in_sdv_35, in_index, in_sdv_37, in_irp, in_Tmp_55, in_status_7, in_Tmp_56, in_vslice_dummy_var_15, in_vslice_dummy_var_16, in_vslice_dummy_var_17, in_vslice_dummy_var_18;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon15_Else;

  anon15_Else:
    assume {:partition} in_PacketArrayCount > out_index;
    out_Tmp_55 := out_index;
    assume {:nonnull} in_PacketArray != 0;
    assume in_PacketArray > 0;
    havoc out_pMpRfd;
    call {:si_unique_call 2155} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 2153} out_listEntry, out_sdv_29, out_sdv_35, out_sdv_37, out_irp := NICServiceReadIrps_loop_L27(out_listEntry, out_sdv_29, out_sdv_35, out_sdv_37, out_irp, in_FdoData_7);
    goto L27_last;

  L27_last:
    call {:si_unique_call 2154} out_sdv_29 := sdv_IsListEmpty(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_sdv_29 != 0;
    call {:si_unique_call 2144} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 2142} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2143} out_vslice_dummy_var_16 := PciDrvIoDecrement(in_FdoData_7);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    assume {:nonnull} in_FdoData_7 != 0;
    assume in_FdoData_7 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2136} NICReturnRFD(in_FdoData_7, out_pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 2135} sdv_KeReleaseSpinLockFromDpcLevel(0);
    out_index := out_index + 1;
    goto L96_dummy;

  L96_dummy:
    call {:si_unique_call 2159} {:si_old_unique_call 1} out_Tmp_50, out_length, out_pMpRfd, out_listEntry, out_sdv_29, out_sdv_30, out_buffer, out_sdv_35, out_index, out_sdv_37, out_irp, out_Tmp_55, out_status_7, out_Tmp_56, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18 := NICServiceReadIrps_loop_L15(out_Tmp_50, out_length, out_pMpRfd, out_listEntry, out_sdv_29, out_sdv_30, out_buffer, out_sdv_35, out_index, out_sdv_37, out_irp, out_Tmp_55, out_status_7, out_Tmp_56, in_FdoData_7, in_PacketArray, in_PacketArrayCount, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18);
    return;

  anon21_Then:
    call {:si_unique_call 2140} out_vslice_dummy_var_17 := PciDrvIoIncrement(in_FdoData_7);
    call {:si_unique_call 2141} out_status_7 := PciDrvQueuePassiveLevelCallback(in_FdoData_7, li2bplFunctionConstant3731, out_pMpRfd, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_status_7 >= 0;
    assume {:nonnull} in_FdoData_7 != 0;
    assume in_FdoData_7 > 0;
    assume {:nonnull} in_FdoData_7 != 0;
    assume in_FdoData_7 > 0;
    out_Tmp_56 := strConst__li2bpl15;
    call {:si_unique_call 2137} DebugPrint(5, 128, out_Tmp_56);
    goto L96;

  anon20_Then:
    assume {:partition} 0 > out_status_7;
    call {:si_unique_call 2138} out_vslice_dummy_var_18 := PciDrvIoDecrement(in_FdoData_7);
    call {:si_unique_call 2139} NICReturnRFD(in_FdoData_7, out_pMpRfd);
    goto L96;

  anon16_Then:
    assume {:partition} out_sdv_29 == 0;
    assume {:nonnull} in_FdoData_7 != 0;
    assume in_FdoData_7 > 0;
    call {:si_unique_call 2150} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_7));
    call {:si_unique_call 2151} out_sdv_35 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_35;
    call {:si_unique_call 2152} out_sdv_37 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_sdv_37 != 0;
    call {:si_unique_call 2148} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2149} out_buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_buffer != 0;
    call {:si_unique_call 2158} out_sdv_30 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2157} out_Tmp_50 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    out_length := out_Tmp_50;
    call {:si_unique_call 2147} sdv_RtlCopyMemory(0, 0, out_length);
    out_status_7 := 0;
    goto L73;

  L73:
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp))] := out_length;
    call {:si_unique_call 2145} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2146} out_vslice_dummy_var_15 := PciDrvIoDecrement(in_FdoData_7);
    goto L24;

  anon19_Then:
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    havoc out_Tmp_50;
    goto L68;

  anon18_Then:
    assume {:partition} out_buffer == 0;
    out_status_7 := -1073741670;
    out_length := 0;
    goto L73;

  anon17_Then:
    assume {:partition} out_sdv_37 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 2156} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    assume false;
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps_loop_L15(in_Tmp_50: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_29: int, in_sdv_30: int, in_buffer: int, in_sdv_35: int, in_index: int, in_sdv_37: int, in_irp: int, in_Tmp_55: int, in_status_7: int, in_Tmp_56: int, in_FdoData_7: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_15: int, in_vslice_dummy_var_16: int, in_vslice_dummy_var_17: int, in_vslice_dummy_var_18: int) returns (out_Tmp_50: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_29: int, out_sdv_30: int, out_buffer: int, out_sdv_35: int, out_index: int, out_sdv_37: int, out_irp: int, out_Tmp_55: int, out_status_7: int, out_Tmp_56: int, out_vslice_dummy_var_15: int, out_vslice_dummy_var_16: int, out_vslice_dummy_var_17: int, out_vslice_dummy_var_18: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_current) == sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5) || sdv_irql_previous_5 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous == old(sdv_irql_previous);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_29 == 1 || out_sdv_29 == 0 || out_sdv_29 == in_sdv_29;
  free ensures {:va_keep} out_status_7 == 0 || out_status_7 == -1073741670 || out_status_7 == in_status_7;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt_loop_L115(in_pMpRfd_2: int, in_Tmp_66: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_9: int) returns (out_pMpRfd_2: int, out_Tmp_66: int, out_Index: int)
{

  entry:
    out_pMpRfd_2, out_Tmp_66, out_Index := in_pMpRfd_2, in_Tmp_66, in_Index;
    goto L115, exit;

  exit:
    return;

  L115:
    goto anon44_Else;

  anon44_Else:
    assume {:partition} in_PacketFreeCount > out_Index;
    out_Tmp_66 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2160} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    out_Index := out_Index + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    call {:si_unique_call 2161} {:si_old_unique_call 1} out_pMpRfd_2, out_Tmp_66, out_Index := NICHandleRecvInterrupt_loop_L115(out_pMpRfd_2, out_Tmp_66, in_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_9);
    return;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L115(in_pMpRfd_2: int, in_Tmp_66: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_9: int) returns (out_pMpRfd_2: int, out_Tmp_66: int, out_Index: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt_loop_L29(in_PacketArrayCount_1: int, in_Tmp_61: int, in_Tmp_63: int, in_PacketStatus: int, in_Tmp_64: int, in_sdv_41: int, in_pMpRfd_2: int, in_Tmp_67: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_70: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_9: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_61: int, out_Tmp_63: int, out_PacketStatus: int, out_Tmp_64: int, out_sdv_41: int, out_pMpRfd_2: int, out_Tmp_67: int, out_PacketFreeCount: int, out_Tmp_70: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_61, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_67, out_PacketFreeCount, out_Tmp_70, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := in_PacketArrayCount_1, in_Tmp_61, in_Tmp_63, in_PacketStatus, in_Tmp_64, in_sdv_41, in_pMpRfd_2, in_Tmp_67, in_PacketFreeCount, in_Tmp_70, in_bAllocNewRfd, in_pHwRfd_1, in_vslice_dummy_var_22, in_vslice_dummy_var_25;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon37_Else;

  anon37_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 2164} out_sdv_41 := sdv_IsListEmpty(0);
    goto anon39_Then;

  anon39_Then:
    assume {:partition} out_sdv_41 == 0;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    out_Tmp_70 := RecvList__FDO_DATA(in_FdoData_9);
    assume {:nonnull} out_Tmp_70 != 0;
    assume out_Tmp_70 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon49_Else;

  anon49_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_64;
    goto anon50_Else;

  anon50_Else:
    assume {:partition} out_Tmp_64 == 49152;
    call {:si_unique_call 2163} out_vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 2162} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2170} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_61, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_67, out_PacketFreeCount, out_Tmp_70, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(out_PacketArrayCount_1, out_Tmp_61, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_67, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_70, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_9, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    return;

  anon41_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2166} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_63 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 2165} out_vslice_dummy_var_25 := PciDrvIoIncrement(in_FdoData_9);
    goto L70_dummy;

  L70_dummy:
    goto L_BAF_0;

  anon42_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_61 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 2167} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    goto L_BAF_0;

  anon51_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_67 := strConst__li2bpl16;
    call {:si_unique_call 2168} DebugPrint(3, 128, out_Tmp_67);
    call {:si_unique_call 2169} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    goto anon51_Then_dummy;

  anon51_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L29(in_PacketArrayCount_1: int, in_Tmp_61: int, in_Tmp_63: int, in_PacketStatus: int, in_Tmp_64: int, in_sdv_41: int, in_pMpRfd_2: int, in_Tmp_67: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_70: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_9: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_61: int, out_Tmp_63: int, out_PacketStatus: int, out_Tmp_64: int, out_sdv_41: int, out_pMpRfd_2: int, out_Tmp_67: int, out_PacketFreeCount: int, out_Tmp_70: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_sdv_41 == 1 || out_sdv_41 == 0 || out_sdv_41 == in_sdv_41;
  free ensures {:va_keep} out_Tmp_70 == in_Tmp_70 || out_Tmp_70 == RecvList__FDO_DATA(in_FdoData_9);
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_22 == 1 || out_vslice_dummy_var_22 == 0 || out_vslice_dummy_var_22 == in_vslice_dummy_var_22;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICHandleRecvInterrupt_loop_L24(in_PacketArrayCount_1: int, in_Tmp_61: int, in_Tmp_62: int, in_Tmp_63: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_64: int, in_sdv_41: int, in_pMpRfd_2: int, in_Tmp_66: int, in_Tmp_67: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_69: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_70: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_9: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_61: int, out_Tmp_62: int, out_Tmp_63: int, out_PacketStatus: int, out_Tmp_64: int, out_sdv_41: int, out_pMpRfd_2: int, out_Tmp_66: int, out_Tmp_67: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_69: int, out_Tmp_70: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_61, out_Tmp_62, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_66, out_Tmp_67, out_LoopIndex, out_PacketFreeCount, out_Tmp_69, out_Tmp_70, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := in_PacketArrayCount_1, in_Tmp_61, in_Tmp_62, in_Tmp_63, in_PacketStatus, in_Tmp_64, in_sdv_41, in_pMpRfd_2, in_Tmp_66, in_Tmp_67, in_LoopIndex, in_PacketFreeCount, in_Tmp_69, in_Tmp_70, in_bContinue, in_bAllocNewRfd, in_Index, in_pHwRfd_1, in_vslice_dummy_var_22, in_vslice_dummy_var_25;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_69 := out_LoopIndex;
    out_LoopIndex := out_LoopIndex + 1;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} in_LoopCount > out_Tmp_69;
    goto anon36_Else;

  anon36_Else:
    assume {:partition} out_bContinue != 0;
    out_PacketArrayCount_1 := 0;
    out_PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 2181} out_PacketArrayCount_1, out_Tmp_61, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_67, out_PacketFreeCount, out_Tmp_70, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(out_PacketArrayCount_1, out_Tmp_61, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_67, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_70, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_9, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    goto L29_last;

  L29_last:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 2188} out_sdv_41 := sdv_IsListEmpty(0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} out_sdv_41 != 0;
    out_bContinue := 0;
    goto L30;

  L30:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} out_PacketArrayCount_1 != 0;
    call {:si_unique_call 2179} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2180} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    out_Tmp_62 := strConst__li2bpl17;
    call {:si_unique_call 2175} DebugPrint(3, 128, out_Tmp_62);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    call {:si_unique_call 2176} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2177} NICServiceIndicateStatusIrp(in_FdoData_9);
    goto L108;

  L108:
    call {:si_unique_call 2172} NICServiceReadIrps(in_FdoData_9, in_PacketArray_1, out_PacketArrayCount_1);
    call {:si_unique_call 2173} sdv_KeAcquireSpinLockAtDpcLevel(0);
    out_Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 2171} out_pMpRfd_2, out_Tmp_66, out_Index := NICHandleRecvInterrupt_loop_L115(out_pMpRfd_2, out_Tmp_66, out_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_9);
    goto L115_last;

  L115_last:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} out_PacketFreeCount > out_Index;
    out_Tmp_66 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2174} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    out_Index := out_Index + 1;
    assume false;
    return;

  anon44_Then:
    assume {:partition} out_Index >= out_PacketFreeCount;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 2190} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_61, out_Tmp_62, out_Tmp_63, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_66, out_Tmp_67, out_LoopIndex, out_PacketFreeCount, out_Tmp_69, out_Tmp_70, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L24(out_PacketArrayCount_1, out_Tmp_61, out_Tmp_62, out_Tmp_63, in_LoopCount, out_PacketStatus, out_Tmp_64, out_sdv_41, out_pMpRfd_2, out_Tmp_66, out_Tmp_67, out_LoopIndex, out_PacketFreeCount, out_Tmp_69, in_PacketFreeArray, in_PacketArray_1, out_Tmp_70, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, in_FdoData_9, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    return;

  anon43_Then:
    call {:si_unique_call 2178} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon39_Then:
    assume {:partition} out_sdv_41 == 0;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    out_Tmp_70 := RecvList__FDO_DATA(in_FdoData_9);
    assume {:nonnull} out_Tmp_70 != 0;
    assume out_Tmp_70 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    out_PacketStatus := Mem_T.INT4[CbStatus__CB_HEADER_STRUC(RfdCbHeader__RFD_STRUC(out_pHwRfd_1))];
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_64;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} out_Tmp_64 == 49152;
    call {:si_unique_call 2187} out_vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 2182} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2189} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_63 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 2183} out_vslice_dummy_var_25 := PciDrvIoIncrement(in_FdoData_9);
    assume false;
    return;

  anon42_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_61 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_9 != 0;
    assume in_FdoData_9 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 2184} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    assume false;
    return;

  anon51_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_67 := strConst__li2bpl16;
    call {:si_unique_call 2185} DebugPrint(3, 128, out_Tmp_67);
    call {:si_unique_call 2186} NICReturnRFD(in_FdoData_9, out_pMpRfd_2);
    assume false;
    return;

  anon50_Then:
    assume {:partition} out_Tmp_64 != 49152;
    out_bContinue := 0;
    goto L30;

  anon49_Then:
    assume {:partition} BAND(out_PacketStatus, 32768) == 0;
    out_bContinue := 0;
    goto L30;

  anon37_Then:
    assume {:partition} out_PacketArrayCount_1 >= 20;
    goto L30;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L24(in_PacketArrayCount_1: int, in_Tmp_61: int, in_Tmp_62: int, in_Tmp_63: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_64: int, in_sdv_41: int, in_pMpRfd_2: int, in_Tmp_66: int, in_Tmp_67: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_69: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_70: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_9: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_61: int, out_Tmp_62: int, out_Tmp_63: int, out_PacketStatus: int, out_Tmp_64: int, out_sdv_41: int, out_pMpRfd_2: int, out_Tmp_66: int, out_Tmp_67: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_69: int, out_Tmp_70: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_41 == 1 || out_sdv_41 == 0 || out_sdv_41 == in_sdv_41;
  free ensures {:va_keep} out_Tmp_70 == in_Tmp_70 || out_Tmp_70 == RecvList__FDO_DATA(in_FdoData_9);
  free ensures {:va_keep} out_bContinue == 0 || out_bContinue == in_bContinue;
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_22 == 1 || out_vslice_dummy_var_22 == 0 || out_vslice_dummy_var_22 == in_vslice_dummy_var_22;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvGetPowerPoliciesDeviceState_loop_L24(in_wakeSupported: int, in_Tmp_89: int, in_fdoData_1: int, in_Tmp_90: int, in_systemState: int, in_deviceState: int) returns (out_wakeSupported: int, out_Tmp_89: int, out_Tmp_90: int, out_deviceState: int)
{

  entry:
    out_wakeSupported, out_Tmp_89, out_Tmp_90, out_deviceState := in_wakeSupported, in_Tmp_89, in_Tmp_90, in_deviceState;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_89 := in_systemState;
    assume {:nonnull} in_fdoData_1 != 0;
    assume in_fdoData_1 > 0;
    havoc out_Tmp_90;
    assume {:nonnull} out_Tmp_90 != 0;
    assume out_Tmp_90 > 0;
    goto anon33_Else;

  anon33_Else:
    assume {:partition} out_deviceState >= Mem_T.INT4[out_Tmp_90 + out_Tmp_89 * 4];
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_deviceState != 1;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} out_deviceState != 2;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} out_deviceState != 3;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} out_deviceState == 4;
    assume {:nonnull} in_fdoData_1 != 0;
    assume in_fdoData_1 > 0;
    havoc out_wakeSupported;
    goto L33;

  L33:
    goto anon28_Then;

  anon28_Then:
    assume {:partition} out_wakeSupported == 0;
    out_deviceState := out_deviceState - 1;
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    havoc out_deviceState;
    return;

  anon29_Then:
    assume {:partition} out_deviceState != 4;
    out_wakeSupported := 0;
    goto L33;

  anon30_Then:
    assume {:partition} out_deviceState == 3;
    assume {:nonnull} in_fdoData_1 != 0;
    assume in_fdoData_1 > 0;
    havoc out_wakeSupported;
    goto L33;

  anon31_Then:
    assume {:partition} out_deviceState == 2;
    assume {:nonnull} in_fdoData_1 != 0;
    assume in_fdoData_1 > 0;
    havoc out_wakeSupported;
    goto L33;

  anon27_Then:
    assume {:partition} out_deviceState == 1;
    assume {:nonnull} in_fdoData_1 != 0;
    assume in_fdoData_1 > 0;
    havoc out_wakeSupported;
    goto L33;
}



procedure {:LoopProcedure} PciDrvGetPowerPoliciesDeviceState_loop_L24(in_wakeSupported: int, in_Tmp_89: int, in_fdoData_1: int, in_Tmp_90: int, in_systemState: int, in_deviceState: int) returns (out_wakeSupported: int, out_Tmp_89: int, out_Tmp_90: int, out_deviceState: int);
  free ensures {:va_keep} out_Tmp_89 == in_systemState || out_Tmp_89 == in_Tmp_89;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeAdapterMemory_loop_L11(in_pMpRfd_4: int, in_sdv_78: int, in_sdv_79: int, in_FdoData_12: int) returns (out_pMpRfd_4: int, out_sdv_78: int, out_sdv_79: int)
{

  entry:
    out_pMpRfd_4, out_sdv_78, out_sdv_79 := in_pMpRfd_4, in_sdv_78, in_sdv_79;
    goto L11, exit;

  exit:
    return;

  L11:
    call {:si_unique_call 2191} out_sdv_78 := sdv_IsListEmpty(0);
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_sdv_78 == 0;
    assume {:nonnull} in_FdoData_12 != 0;
    assume in_FdoData_12 > 0;
    call {:si_unique_call 2192} out_sdv_79 := RemoveHeadList(RecvList__FDO_DATA(in_FdoData_12));
    out_pMpRfd_4 := out_sdv_79;
    call {:si_unique_call 2193} NICFreeRfd(in_FdoData_12, out_pMpRfd_4);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 2194} {:si_old_unique_call 1} out_pMpRfd_4, out_sdv_78, out_sdv_79 := NICFreeAdapterMemory_loop_L11(out_pMpRfd_4, out_sdv_78, out_sdv_79, in_FdoData_12);
    return;
}



procedure {:LoopProcedure} NICFreeAdapterMemory_loop_L11(in_pMpRfd_4: int, in_sdv_78: int, in_sdv_79: int, in_FdoData_12: int) returns (out_pMpRfd_4: int, out_sdv_78: int, out_sdv_79: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_78 == 1 || out_sdv_78 == 0 || out_sdv_78 == in_sdv_78;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 6} HwSetupIAAddress_loop_L17(in_i_1: int, in_Tmp_130: int, in_Tmp_134: int, in_Tmp_135: int, in_Tmp_136: int, in_Tmp_137: int, in_FdoData_15: int) returns (out_i_1: int, out_Tmp_130: int, out_Tmp_134: int, out_Tmp_135: int, out_Tmp_136: int, out_Tmp_137: int)
{

  entry:
    out_i_1, out_Tmp_130, out_Tmp_134, out_Tmp_135, out_Tmp_136, out_Tmp_137 := in_i_1, in_Tmp_130, in_Tmp_134, in_Tmp_135, in_Tmp_136, in_Tmp_137;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:CounterLoop 6} {:Counter "i_1"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 6 > out_i_1;
    out_Tmp_130 := out_i_1;
    assume {:nonnull} in_FdoData_15 != 0;
    assume in_FdoData_15 > 0;
    havoc out_Tmp_136;
    assume {:nonnull} out_Tmp_136 != 0;
    assume out_Tmp_136 > 0;
    havoc out_Tmp_134;
    out_Tmp_135 := out_i_1;
    assume {:nonnull} in_FdoData_15 != 0;
    assume in_FdoData_15 > 0;
    havoc out_Tmp_137;
    assume {:nonnull} out_Tmp_134 != 0;
    assume out_Tmp_134 > 0;
    assume {:nonnull} out_Tmp_137 != 0;
    assume out_Tmp_137 > 0;
    Mem_T.INT4[out_Tmp_134 + out_Tmp_130 * 4] := Mem_T.INT4[out_Tmp_137 + out_Tmp_135 * 4];
    out_i_1 := out_i_1 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2195} {:si_old_unique_call 1} out_i_1, out_Tmp_130, out_Tmp_134, out_Tmp_135, out_Tmp_136, out_Tmp_137 := HwSetupIAAddress_loop_L17(out_i_1, out_Tmp_130, out_Tmp_134, out_Tmp_135, out_Tmp_136, out_Tmp_137, in_FdoData_15);
    return;
}



procedure {:LoopProcedure} HwSetupIAAddress_loop_L17(in_i_1: int, in_Tmp_130: int, in_Tmp_134: int, in_Tmp_135: int, in_Tmp_136: int, in_Tmp_137: int, in_FdoData_15: int) returns (out_i_1: int, out_Tmp_130: int, out_Tmp_134: int, out_Tmp_135: int, out_Tmp_136: int, out_Tmp_137: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation HwConfigure_loop_L56(in_i_2: int, in_Tmp_158: int, in_Tmp_169: int, in_Tmp_183: int, in_Tmp_199: int, in_Tmp_200: int, in_FdoData_17: int) returns (out_i_2: int, out_Tmp_158: int, out_Tmp_169: int, out_Tmp_183: int, out_Tmp_199: int, out_Tmp_200: int)
{

  entry:
    out_i_2, out_Tmp_158, out_Tmp_169, out_Tmp_183, out_Tmp_199, out_Tmp_200 := in_i_2, in_Tmp_158, in_Tmp_169, in_Tmp_183, in_Tmp_199, in_Tmp_200;
    goto L56, exit;

  exit:
    return;

  L56:
    assume {:CounterLoop 22} {:Counter "i_2"} true;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} 22 > out_i_2;
    out_Tmp_199 := out_i_2;
    assume {:nonnull} in_FdoData_17 != 0;
    assume in_FdoData_17 > 0;
    havoc out_Tmp_158;
    assume {:nonnull} out_Tmp_158 != 0;
    assume out_Tmp_158 > 0;
    havoc out_Tmp_169;
    assume {:nonnull} out_Tmp_169 != 0;
    assume out_Tmp_169 > 0;
    out_Tmp_200 := Mem_T.INT4[out_Tmp_169 + out_Tmp_199 * 4];
    out_Tmp_183 := strConst__li2bpl54;
    call {:si_unique_call 2196} DebugPrint(6, 4096, out_Tmp_183);
    out_i_2 := out_i_2 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_i_2;
    return;
}



procedure {:LoopProcedure} HwConfigure_loop_L56(in_i_2: int, in_Tmp_158: int, in_Tmp_169: int, in_Tmp_183: int, in_Tmp_199: int, in_Tmp_200: int, in_FdoData_17: int) returns (out_i_2: int, out_Tmp_158: int, out_Tmp_169: int, out_Tmp_183: int, out_Tmp_199: int, out_Tmp_200: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_199 == in_i_2 || out_Tmp_199 == in_Tmp_199;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_241: int, in_FdoData_22: int) returns (out_counter: int, out_Tmp_241: int)
{

  entry:
    out_counter, out_Tmp_241 := in_counter, in_Tmp_241;
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_counter != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    havoc out_Tmp_241;
    assume {:nonnull} out_Tmp_241 != 0;
    assume out_Tmp_241 > 0;
    goto anon15_Else;

  anon15_Else:
    out_counter := out_counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    havoc out_counter;
    return;
}



procedure {:LoopProcedure} HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_241: int, in_FdoData_22: int) returns (out_counter: int, out_Tmp_241: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_144: int, in_sdv_146: int, in_irp_2: int, in_status_31: int, in_FdoData_35: int) returns (out_pEntry: int, out_sdv_144: int, out_sdv_146: int, out_irp_2: int)
{

  entry:
    out_pEntry, out_sdv_144, out_sdv_146, out_irp_2 := in_pEntry, in_sdv_144, in_sdv_146, in_irp_2;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2197} out_sdv_144 := sdv_IsListEmpty(0);
    goto anon3_Then;

  anon3_Then:
    assume {:partition} out_sdv_144 == 0;
    assume {:nonnull} in_FdoData_35 != 0;
    assume in_FdoData_35 > 0;
    call {:si_unique_call 2198} out_pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(in_FdoData_35));
    assume {:nonnull} in_FdoData_35 != 0;
    assume in_FdoData_35 > 0;
    call {:si_unique_call 2199} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2200} out_sdv_146 := sdv_containing_record(out_pEntry, 88);
    out_irp_2 := out_sdv_146;
    call {:si_unique_call 2201} NICCompleteSendRequest(in_FdoData_35, out_irp_2, in_status_31, 0, 1);
    call {:si_unique_call 2202} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    call {:si_unique_call 2203} {:si_old_unique_call 1} out_pEntry, out_sdv_144, out_sdv_146, out_irp_2 := NICFreeQueuedSendPackets_loop_L13(out_pEntry, out_sdv_144, out_sdv_146, out_irp_2, in_status_31, in_FdoData_35);
    return;
}



procedure {:LoopProcedure} NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_144: int, in_sdv_146: int, in_irp_2: int, in_status_31: int, in_FdoData_35: int) returns (out_pEntry: int, out_sdv_144: int, out_sdv_146: int, out_irp_2: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} out_sdv_144 == 1 || out_sdv_144 == 0 || out_sdv_144 == in_sdv_144;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 2} NICWrite_loop_L46(in_length_1: int, in_sdv_151: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress: int) returns (out_length_1: int, out_sdv_151: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress: int)
{

  entry:
    out_length_1, out_sdv_151, out_tempMdl, out_pageCount, out_virtualAddress := in_length_1, in_sdv_151, in_tempMdl, in_pageCount, in_virtualAddress;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon23_Else;

  anon23_Else:
    assume {:partition} out_tempMdl != 0;
    call {:si_unique_call 2204} out_virtualAddress := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 2205} out_sdv_151 := sdv_MmGetMdlByteCount(0);
    out_length_1 := out_length_1 + out_sdv_151;
    call {:si_unique_call 2206} out_pageCount := corral_nondet();
    assume {:nonnull} out_tempMdl != 0;
    assume out_tempMdl > 0;
    havoc out_tempMdl;
    goto anon23_Else_dummy;

  anon23_Else_dummy:
    call {:si_unique_call 2207} {:si_old_unique_call 1} out_length_1, out_sdv_151, out_tempMdl, out_pageCount, out_virtualAddress := NICWrite_loop_L46(out_length_1, out_sdv_151, out_tempMdl, out_pageCount, out_virtualAddress);
    return;
}



procedure {:LoopProcedure} NICWrite_loop_L46(in_length_1: int, in_sdv_151: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress: int) returns (out_length_1: int, out_sdv_151: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICFreeBusySendPackets_loop_L12(in_Tmp_355: int, in_pMpTcb: int, in_status_33: int, in_Tmp_357: int, in_FdoData_38: int) returns (out_Tmp_355: int, out_pMpTcb: int, out_Tmp_357: int)
{

  entry:
    out_Tmp_355, out_pMpTcb, out_Tmp_357 := in_Tmp_355, in_pMpTcb, in_Tmp_357;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_38 != 0;
    assume in_FdoData_38 > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_FdoData_38 != 0;
    assume in_FdoData_38 > 0;
    havoc out_pMpTcb;
    assume {:nonnull} out_pMpTcb != 0;
    assume out_pMpTcb > 0;
    havoc out_Tmp_355;
    assume {:nonnull} out_Tmp_355 != 0;
    assume out_Tmp_355 > 0;
    havoc out_Tmp_357;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_357 != 3;
    call {:si_unique_call 2208} MP_FREE_SEND_PACKET(in_FdoData_38, out_pMpTcb, in_status_33);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 2209} {:si_old_unique_call 1} out_Tmp_355, out_pMpTcb, out_Tmp_357 := NICFreeBusySendPackets_loop_L12(out_Tmp_355, out_pMpTcb, in_status_33, out_Tmp_357, in_FdoData_38);
    return;
}



procedure {:LoopProcedure} NICFreeBusySendPackets_loop_L12(in_Tmp_355: int, in_pMpTcb: int, in_status_33: int, in_Tmp_357: int, in_FdoData_38: int) returns (out_Tmp_355: int, out_pMpTcb: int, out_Tmp_357: int);
  modifies alloc, Mem_T.INT4, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} old(sdv_irql_current) <= 2 && old(sdv_irql_previous) <= 2 && old(sdv_irql_previous_2) <= 2 && old(sdv_irql_previous_3) <= 2 ==> sdv_irql_current <= 2 && sdv_irql_previous <= 2 && sdv_irql_previous_2 <= 2 && sdv_irql_previous_3 <= 2 && sdv_irql_current >= 0 && sdv_irql_previous >= 0 && sdv_irql_previous_2 >= 0 && sdv_irql_previous_3 >= 0;
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_155: int, in_listEntry_1: int, in_oldIrql_4: int, in_sdv_157: int, in_sdv_159: int, in_irp_3: int, in_Tmp_363: int, in_FdoData_40: int, in_vslice_dummy_var_88: int) returns (out_sdv_155: int, out_listEntry_1: int, out_oldIrql_4: int, out_sdv_157: int, out_sdv_159: int, out_irp_3: int, out_Tmp_363: int, out_vslice_dummy_var_88: int)
{

  entry:
    out_sdv_155, out_listEntry_1, out_oldIrql_4, out_sdv_157, out_sdv_159, out_irp_3, out_Tmp_363, out_vslice_dummy_var_88 := in_sdv_155, in_listEntry_1, in_oldIrql_4, in_sdv_157, in_sdv_159, in_irp_3, in_Tmp_363, in_vslice_dummy_var_88;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2210} out_sdv_155 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_155 == 0;
    assume {:nonnull} in_FdoData_40 != 0;
    assume in_FdoData_40 > 0;
    call {:si_unique_call 2216} out_listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_40));
    call {:si_unique_call 2217} out_sdv_157 := sdv_containing_record(out_listEntry_1, 88);
    out_irp_3 := out_sdv_157;
    call {:si_unique_call 2218} out_sdv_159 := sdv_IoSetCancelRoutine(out_irp_3, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} out_sdv_159 != 0;
    call {:si_unique_call 2211} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    assume {:nonnull} out_irp_3 != 0;
    assume out_irp_3 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp_3))] := 0;
    call {:si_unique_call 2212} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2213} out_vslice_dummy_var_88 := PciDrvIoDecrement(in_FdoData_40);
    call {:si_unique_call 2214} out_Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_363 != 0;
    assume out_Tmp_363 > 0;
    Mem_T.INT4[out_Tmp_363] := out_oldIrql_4;
    call {:si_unique_call 2215} sdv_KeAcquireSpinLock(0, out_Tmp_363);
    assume {:nonnull} out_Tmp_363 != 0;
    assume out_Tmp_363 > 0;
    out_oldIrql_4 := Mem_T.INT4[out_Tmp_363];
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 2219} {:si_old_unique_call 1} out_sdv_155, out_listEntry_1, out_oldIrql_4, out_sdv_157, out_sdv_159, out_irp_3, out_Tmp_363, out_vslice_dummy_var_88 := PciDrvCancelQueuedReadIrps_loop_L10(out_sdv_155, out_listEntry_1, out_oldIrql_4, out_sdv_157, out_sdv_159, out_irp_3, out_Tmp_363, in_FdoData_40, out_vslice_dummy_var_88);
    return;

  anon6_Then:
    assume {:partition} out_sdv_159 == 0;
    out_irp_3 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    goto L_BAF_1;
}



procedure {:LoopProcedure} PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_155: int, in_listEntry_1: int, in_oldIrql_4: int, in_sdv_157: int, in_sdv_159: int, in_irp_3: int, in_Tmp_363: int, in_FdoData_40: int, in_vslice_dummy_var_88: int) returns (out_sdv_155: int, out_listEntry_1: int, out_oldIrql_4: int, out_sdv_157: int, out_sdv_159: int, out_irp_3: int, out_Tmp_363: int, out_vslice_dummy_var_88: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_155 == 1 || out_sdv_155 == 0 || out_sdv_155 == in_sdv_155;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvWithdrawReadIrps_loop_L10(in_Tmp_371: int, in_sdv_186: int, in_listEntry_2: int, in_oldIrql_5: int, in_sdv_188: int, in_sdv_190: int, in_irp_4: int, in_FdoData_41: int, in_vslice_dummy_var_102: int) returns (out_Tmp_371: int, out_sdv_186: int, out_listEntry_2: int, out_oldIrql_5: int, out_sdv_188: int, out_sdv_190: int, out_irp_4: int, out_vslice_dummy_var_102: int)
{

  entry:
    out_Tmp_371, out_sdv_186, out_listEntry_2, out_oldIrql_5, out_sdv_188, out_sdv_190, out_irp_4, out_vslice_dummy_var_102 := in_Tmp_371, in_sdv_186, in_listEntry_2, in_oldIrql_5, in_sdv_188, in_sdv_190, in_irp_4, in_vslice_dummy_var_102;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2220} out_sdv_186 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_186 == 0;
    assume {:nonnull} in_FdoData_41 != 0;
    assume in_FdoData_41 > 0;
    call {:si_unique_call 2225} out_listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_41));
    call {:si_unique_call 2226} out_sdv_188 := sdv_containing_record(out_listEntry_2, 88);
    out_irp_4 := out_sdv_188;
    call {:si_unique_call 2227} out_sdv_190 := sdv_IoSetCancelRoutine(out_irp_4, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} out_sdv_190 != 0;
    call {:si_unique_call 2221} sdv_KeReleaseSpinLock(0, out_oldIrql_5);
    call {:si_unique_call 2222} out_vslice_dummy_var_102 := PciDrvQueueRequest(in_FdoData_41, out_irp_4);
    call {:si_unique_call 2223} out_Tmp_371 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_371 != 0;
    assume out_Tmp_371 > 0;
    Mem_T.INT4[out_Tmp_371] := out_oldIrql_5;
    call {:si_unique_call 2224} sdv_KeAcquireSpinLock(0, out_Tmp_371);
    assume {:nonnull} out_Tmp_371 != 0;
    assume out_Tmp_371 > 0;
    out_oldIrql_5 := Mem_T.INT4[out_Tmp_371];
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 2229} {:si_old_unique_call 1} out_Tmp_371, out_sdv_186, out_listEntry_2, out_oldIrql_5, out_sdv_188, out_sdv_190, out_irp_4, out_vslice_dummy_var_102 := PciDrvWithdrawReadIrps_loop_L10(out_Tmp_371, out_sdv_186, out_listEntry_2, out_oldIrql_5, out_sdv_188, out_sdv_190, out_irp_4, in_FdoData_41, out_vslice_dummy_var_102);
    return;

  anon6_Then:
    assume {:partition} out_sdv_190 == 0;
    call {:si_unique_call 2228} InitializeListHead(out_listEntry_2);
    out_irp_4 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    goto L_BAF_2;
}



procedure {:LoopProcedure} PciDrvWithdrawReadIrps_loop_L10(in_Tmp_371: int, in_sdv_186: int, in_listEntry_2: int, in_oldIrql_5: int, in_sdv_188: int, in_sdv_190: int, in_irp_4: int, in_FdoData_41: int, in_vslice_dummy_var_102: int) returns (out_Tmp_371: int, out_sdv_186: int, out_listEntry_2: int, out_oldIrql_5: int, out_sdv_188: int, out_sdv_190: int, out_irp_4: int, out_vslice_dummy_var_102: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_sdv_186 == 1 || out_sdv_186 == 0 || out_sdv_186 == in_sdv_186;
  free ensures {:va_keep} out_vslice_dummy_var_102 == 259 || out_vslice_dummy_var_102 == in_vslice_dummy_var_102;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_199: int, in_pendingIrp: int, in_sdv_200: int) returns (out_thisEntry: int, out_sdv_199: int, out_pendingIrp: int, out_sdv_200: int)
{

  entry:
    out_thisEntry, out_sdv_199, out_pendingIrp, out_sdv_200 := in_thisEntry, in_sdv_199, in_pendingIrp, in_sdv_200;
    goto L59, exit;

  exit:
    return;

  L59:
    call {:si_unique_call 2230} out_sdv_199 := sdv_IsListEmpty(0);
    goto anon12_Then;

  anon12_Then:
    assume {:partition} out_sdv_199 == 0;
    call {:si_unique_call 2231} out_thisEntry := RemoveHeadList(in_cleanupList);
    call {:si_unique_call 2232} out_sdv_200 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_200;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_pendingIrp))] := 0;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    call {:si_unique_call 2233} sdv_IoCompleteRequest(0, 0);
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    call {:si_unique_call 2234} {:si_old_unique_call 1} out_thisEntry, out_sdv_199, out_pendingIrp, out_sdv_200 := PciDrvCleanup_loop_L59(in_cleanupList, out_thisEntry, out_sdv_199, out_pendingIrp, out_sdv_200);
    return;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_199: int, in_pendingIrp: int, in_sdv_200: int) returns (out_thisEntry: int, out_sdv_199: int, out_pendingIrp: int, out_sdv_200: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} out_sdv_199 == 1 || out_sdv_199 == 0 || out_sdv_199 == in_sdv_199;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack_1: int, in_nextEntry: int, in_sdv_192: int, in_sdv_196: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_103: int, in_vslice_dummy_var_104: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_192: int, out_sdv_196: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_103: int, out_vslice_dummy_var_104: int)
{

  entry:
    out_thisEntry, out_nextEntry, out_sdv_192, out_sdv_196, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := in_thisEntry, in_nextEntry, in_sdv_192, in_sdv_196, in_pendingIrp, in_pendingIrpStack, in_vslice_dummy_var_103, in_vslice_dummy_var_104;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon9_Else;

  anon9_Else:
    assume {:nonnull} out_thisEntry != 0;
    assume out_thisEntry > 0;
    havoc out_nextEntry;
    call {:si_unique_call 2237} out_sdv_196 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_196;
    call {:si_unique_call 2238} out_pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(out_pendingIrp);
    assume {:nonnull} in_irpStack_1 != 0;
    assume in_irpStack_1 > 0;
    assume {:nonnull} out_pendingIrpStack != 0;
    assume out_pendingIrpStack > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 2239} out_vslice_dummy_var_103 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2240} out_sdv_192 := sdv_IoSetCancelRoutine(out_pendingIrp, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} out_sdv_192 != 0;
    call {:si_unique_call 2235} out_vslice_dummy_var_104 := sdv_InsertTailList(in_cleanupList, out_thisEntry);
    goto L45;

  L45:
    out_thisEntry := out_nextEntry;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 2241} {:si_old_unique_call 1} out_thisEntry, out_nextEntry, out_sdv_192, out_sdv_196, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := PciDrvCleanup_loop_L31(in_cleanupList, out_thisEntry, in_irpStack_1, out_nextEntry, out_sdv_192, out_sdv_196, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_103, out_vslice_dummy_var_104);
    return;

  anon11_Then:
    assume {:partition} out_sdv_192 == 0;
    call {:si_unique_call 2236} InitializeListHead(out_thisEntry);
    goto L45;

  anon10_Then:
    goto L45;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack_1: int, in_nextEntry: int, in_sdv_192: int, in_sdv_196: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_103: int, in_vslice_dummy_var_104: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_192: int, out_sdv_196: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_103: int, out_vslice_dummy_var_104: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} out_vslice_dummy_var_103 == 1 || out_vslice_dummy_var_103 == 0 || out_vslice_dummy_var_103 == in_vslice_dummy_var_103;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_3: int, in_sdv_203: int, in_oldIrql_7: int, in_irp_5: int, in_Tmp_384: int, in_FdoData_42: int, in_vslice_dummy_var_110: int) returns (out_i_3: int, out_sdv_203: int, out_oldIrql_7: int, out_irp_5: int, out_Tmp_384: int, out_vslice_dummy_var_110: int)
{

  entry:
    out_i_3, out_sdv_203, out_oldIrql_7, out_irp_5, out_Tmp_384, out_vslice_dummy_var_110 := in_i_3, in_sdv_203, in_oldIrql_7, in_irp_5, in_Tmp_384, in_vslice_dummy_var_110;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_3"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} 3 > out_i_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_i_3 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_i_3 != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_i_3 != 2;
    goto L22;

  L22:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} out_irp_5 != 0;
    call {:si_unique_call 2247} out_sdv_203 := sdv_IoSetCancelRoutine(out_irp_5, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_sdv_203 != 0;
    call {:si_unique_call 2242} sdv_KeReleaseSpinLock(0, out_oldIrql_7);
    assume {:nonnull} out_irp_5 != 0;
    assume out_irp_5 > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_irp_5))] := 0;
    assume {:nonnull} out_irp_5 != 0;
    assume out_irp_5 > 0;
    call {:si_unique_call 2243} sdv_IoCompleteRequest(0, 0);
    out_irp_5 := 0;
    call {:si_unique_call 2244} out_Tmp_384 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_384 != 0;
    assume out_Tmp_384 > 0;
    Mem_T.INT4[out_Tmp_384] := out_oldIrql_7;
    call {:si_unique_call 2245} sdv_KeAcquireSpinLock(0, out_Tmp_384);
    assume {:nonnull} out_Tmp_384 != 0;
    assume out_Tmp_384 > 0;
    out_oldIrql_7 := Mem_T.INT4[out_Tmp_384];
    call {:si_unique_call 2246} out_vslice_dummy_var_110 := PciDrvIoDecrement(in_FdoData_42);
    goto L23;

  L23:
    out_i_3 := out_i_3 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 2248} {:si_old_unique_call 1} out_i_3, out_sdv_203, out_oldIrql_7, out_irp_5, out_Tmp_384, out_vslice_dummy_var_110 := PciDrvCancelQueuedIoctlIrps_loop_L11(out_i_3, out_sdv_203, out_oldIrql_7, out_irp_5, out_Tmp_384, in_FdoData_42, out_vslice_dummy_var_110);
    return;

  anon16_Then:
    assume {:partition} out_sdv_203 == 0;
    out_irp_5 := 0;
    goto L23;

  anon15_Then:
    assume {:partition} out_irp_5 == 0;
    goto L23;

  anon17_Then:
    assume {:partition} out_i_3 == 2;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;

  anon18_Then:
    assume {:partition} out_i_3 == 1;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} out_i_3 == 0;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_3: int, in_sdv_203: int, in_oldIrql_7: int, in_irp_5: int, in_Tmp_384: int, in_FdoData_42: int, in_vslice_dummy_var_110: int) returns (out_i_3: int, out_sdv_203: int, out_oldIrql_7: int, out_irp_5: int, out_Tmp_384: int, out_vslice_dummy_var_110: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_443: int, in_FdoData_50: int, in_vslice_dummy_var_124: int) returns (out_chargeRemining: int, out_Tmp_443: int, out_vslice_dummy_var_124: int)
{

  entry:
    out_chargeRemining, out_Tmp_443, out_vslice_dummy_var_124 := in_chargeRemining, in_Tmp_443, in_vslice_dummy_var_124;
    goto L20, exit;

  exit:
    return;

  L20:
    out_Tmp_443 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_Tmp_443 != 0;
    call {:si_unique_call 2249} out_vslice_dummy_var_124 := PciDrvIoIncrement(in_FdoData_50);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 2250} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_443, out_vslice_dummy_var_124 := PciDrvReleaseAndWait_loop_L20(out_chargeRemining, out_Tmp_443, in_FdoData_50, out_vslice_dummy_var_124);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_443: int, in_FdoData_50: int, in_vslice_dummy_var_124: int) returns (out_chargeRemining: int, out_Tmp_443: int, out_vslice_dummy_var_124: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_440: int, in_FdoData_50: int, in_vslice_dummy_var_122: int) returns (out_chargeRemining: int, out_Tmp_440: int, out_vslice_dummy_var_122: int)
{

  entry:
    out_chargeRemining, out_Tmp_440, out_vslice_dummy_var_122 := in_chargeRemining, in_Tmp_440, in_vslice_dummy_var_122;
    goto L8, exit;

  exit:
    return;

  L8:
    out_Tmp_440 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_Tmp_440 != 0;
    call {:si_unique_call 2251} out_vslice_dummy_var_122 := PciDrvIoDecrement(in_FdoData_50);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    call {:si_unique_call 2252} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_440, out_vslice_dummy_var_122 := PciDrvReleaseAndWait_loop_L8(out_chargeRemining, out_Tmp_440, in_FdoData_50, out_vslice_dummy_var_122);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_440: int, in_FdoData_50: int, in_vslice_dummy_var_122: int) returns (out_chargeRemining: int, out_Tmp_440: int, out_vslice_dummy_var_122: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_441: int, in_FdoData_50: int, in_vslice_dummy_var_125: int) returns (out_chargeRemining: int, out_Tmp_441: int, out_vslice_dummy_var_125: int)
{

  entry:
    out_chargeRemining, out_Tmp_441, out_vslice_dummy_var_125 := in_chargeRemining, in_Tmp_441, in_vslice_dummy_var_125;
    goto L26, exit;

  exit:
    return;

  L26:
    out_Tmp_441 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} out_Tmp_441 != 0;
    call {:si_unique_call 2253} out_vslice_dummy_var_125 := PciDrvIoDecrement(in_FdoData_50);
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 2254} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_441, out_vslice_dummy_var_125 := PciDrvReleaseAndWait_loop_L26(out_chargeRemining, out_Tmp_441, in_FdoData_50, out_vslice_dummy_var_125);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_441: int, in_FdoData_50: int, in_vslice_dummy_var_125: int) returns (out_chargeRemining: int, out_Tmp_441: int, out_vslice_dummy_var_125: int);
  modifies alloc, Mem_T.INT4;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:SIextraRecBound 3} PciDrvWithdrawIoctlIrps_loop_L10(in_i_4: int, in_oldIrql_10: int, in_irp_6: int, in_Tmp_445: int, in_FdoData_51: int, in_vslice_dummy_var_128: int) returns (out_i_4: int, out_oldIrql_10: int, out_irp_6: int, out_Tmp_445: int, out_vslice_dummy_var_128: int)
{

  entry:
    out_i_4, out_oldIrql_10, out_irp_6, out_Tmp_445, out_vslice_dummy_var_128 := in_i_4, in_oldIrql_10, in_irp_6, in_Tmp_445, in_vslice_dummy_var_128;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 3} {:Counter "i_4"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 3 > out_i_4;
    out_irp_6 := 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} out_i_4 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_i_4 != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_i_4 != 2;
    goto L22;

  L22:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} out_irp_6 != 0;
    call {:si_unique_call 2255} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    call {:si_unique_call 2256} out_vslice_dummy_var_128 := PciDrvQueueRequest(in_FdoData_51, out_irp_6);
    call {:si_unique_call 2257} out_Tmp_445 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_445 != 0;
    assume out_Tmp_445 > 0;
    Mem_T.INT4[out_Tmp_445] := out_oldIrql_10;
    call {:si_unique_call 2258} sdv_KeAcquireSpinLock(0, out_Tmp_445);
    assume {:nonnull} out_Tmp_445 != 0;
    assume out_Tmp_445 > 0;
    out_oldIrql_10 := Mem_T.INT4[out_Tmp_445];
    goto L23;

  L23:
    out_i_4 := out_i_4 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 2259} {:si_old_unique_call 1} out_i_4, out_oldIrql_10, out_irp_6, out_Tmp_445, out_vslice_dummy_var_128 := PciDrvWithdrawIoctlIrps_loop_L10(out_i_4, out_oldIrql_10, out_irp_6, out_Tmp_445, in_FdoData_51, out_vslice_dummy_var_128);
    return;

  anon12_Then:
    assume {:partition} out_irp_6 == 0;
    goto L23;

  anon13_Then:
    assume {:partition} out_i_4 == 2;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_6;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} out_i_4 == 1;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_6;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} out_i_4 == 0;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_6;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvWithdrawIoctlIrps_loop_L10(in_i_4: int, in_oldIrql_10: int, in_irp_6: int, in_Tmp_445: int, in_FdoData_51: int, in_vslice_dummy_var_128: int) returns (out_i_4: int, out_oldIrql_10: int, out_irp_6: int, out_Tmp_445: int, out_vslice_dummy_var_128: int);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, Mem_T.INT4, sdv_irql_previous_5;
  free ensures {:va_keep} sdv_irql_previous_5 == old(sdv_irql_previous_5);
  free ensures {:va_keep} sdv_irql_previous_2 == old(sdv_irql_previous_2);
  free ensures {:va_keep} sdv_irql_current == 2 || sdv_irql_current == old(sdv_irql_current);
  free ensures {:va_keep} sdv_irql_previous_4 == old(sdv_irql_previous_4);
  free ensures {:va_keep} sdv_irql_previous_3 == old(sdv_irql_previous_3);
  free ensures {:va_keep} out_vslice_dummy_var_128 == 259 || out_vslice_dummy_var_128 == in_vslice_dummy_var_128;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L25(in_i_5: int, in_McAddress: int, in_Tmp_707: int, in_j: int, in_Tmp_735: int, in_Tmp_738: int, in_Tmp_739: int, in_FdoData_58: int) returns (out_Tmp_707: int, out_j: int, out_Tmp_735: int, out_Tmp_738: int, out_Tmp_739: int)
{

  entry:
    out_Tmp_707, out_j, out_Tmp_735, out_Tmp_738, out_Tmp_739 := in_Tmp_707, in_j, in_Tmp_735, in_Tmp_738, in_Tmp_739;
    goto L25, exit;

  exit:
    return;

  L25:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_735 := out_j;
    out_Tmp_707 := in_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_738;
    assume {:nonnull} out_Tmp_738 != 0;
    assume out_Tmp_738 > 0;
    havoc out_Tmp_739;
    assume {:nonnull} in_McAddress != 0;
    assume in_McAddress > 0;
    assume {:nonnull} out_Tmp_739 != 0;
    assume out_Tmp_739 > 0;
    Mem_T.INT4[in_McAddress] := Mem_T.INT4[out_Tmp_739 + out_Tmp_735 * 4];
    out_j := out_j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    call {:si_unique_call 2260} {:si_old_unique_call 1} out_Tmp_707, out_j, out_Tmp_735, out_Tmp_738, out_Tmp_739 := NICSetMulticastList_loop_L25(in_i_5, in_McAddress, out_Tmp_707, out_j, out_Tmp_735, out_Tmp_738, out_Tmp_739, in_FdoData_58);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L25(in_i_5: int, in_McAddress: int, in_Tmp_707: int, in_j: int, in_Tmp_735: int, in_Tmp_738: int, in_Tmp_739: int, in_FdoData_58: int) returns (out_Tmp_707: int, out_j: int, out_Tmp_735: int, out_Tmp_738: int, out_Tmp_739: int);
  modifies Mem_T.INT4;
  free ensures {:va_keep} out_Tmp_707 == in_Tmp_707 || out_Tmp_707 == in_i_5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_719: int, in_Tmp_722: int, in_FdoData_58: int) returns (out_counter_1: int, out_Tmp_719: int, out_Tmp_722: int)
{

  entry:
    out_counter_1, out_Tmp_719, out_Tmp_722 := in_counter_1, in_Tmp_719, in_Tmp_722;
    goto L51, exit;

  exit:
    return;

  L51:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Else;

  anon22_Else:
    assume {:partition} out_counter_1 != 0;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_722;
    assume {:nonnull} out_Tmp_722 != 0;
    assume out_Tmp_722 > 0;
    havoc out_Tmp_719;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_Tmp_719 == 128;
    out_counter_1 := out_counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    havoc out_counter_1;
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_719: int, in_Tmp_722: int, in_FdoData_58: int) returns (out_counter_1: int, out_Tmp_719: int, out_Tmp_722: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetMulticastList_loop_L12(in_i_5: int, in_Tmp_701: int, in_Tmp_702: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_Tmp_706: int, in_McAddress: int, in_Tmp_707: int, in_Tmp_708: int, in_Tmp_709: int, in_Tmp_710: int, in_Tmp_711: int, in_Tmp_712: int, in_Tmp_714: int, in_Tmp_715: int, in_j: int, in_Tmp_717: int, in_Tmp_718: int, in_Tmp_720: int, in_Tmp_721: int, in_Tmp_723: int, in_Tmp_724: int, in_Tmp_725: int, in_Tmp_726: int, in_Tmp_728: int, in_Tmp_731: int, in_Tmp_732: int, in_Tmp_733: int, in_Tmp_735: int, in_Tmp_736: int, in_Tmp_737: int, in_Tmp_738: int, in_Tmp_739: int, in_Tmp_740: int, in_FdoData_58: int) returns (out_i_5: int, out_Tmp_701: int, out_Tmp_702: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_McAddress: int, out_Tmp_707: int, out_Tmp_708: int, out_Tmp_709: int, out_Tmp_710: int, out_Tmp_711: int, out_Tmp_712: int, out_Tmp_714: int, out_Tmp_715: int, out_j: int, out_Tmp_717: int, out_Tmp_718: int, out_Tmp_720: int, out_Tmp_721: int, out_Tmp_723: int, out_Tmp_724: int, out_Tmp_725: int, out_Tmp_726: int, out_Tmp_728: int, out_Tmp_731: int, out_Tmp_732: int, out_Tmp_733: int, out_Tmp_735: int, out_Tmp_736: int, out_Tmp_737: int, out_Tmp_738: int, out_Tmp_739: int, out_Tmp_740: int)
{

  entry:
    out_i_5, out_Tmp_701, out_Tmp_702, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_McAddress, out_Tmp_707, out_Tmp_708, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_714, out_Tmp_715, out_j, out_Tmp_717, out_Tmp_718, out_Tmp_720, out_Tmp_721, out_Tmp_723, out_Tmp_724, out_Tmp_725, out_Tmp_726, out_Tmp_728, out_Tmp_731, out_Tmp_732, out_Tmp_733, out_Tmp_735, out_Tmp_736, out_Tmp_737, out_Tmp_738, out_Tmp_739, out_Tmp_740 := in_i_5, in_Tmp_701, in_Tmp_702, in_Tmp_703, in_Tmp_704, in_Tmp_705, in_Tmp_706, in_McAddress, in_Tmp_707, in_Tmp_708, in_Tmp_709, in_Tmp_710, in_Tmp_711, in_Tmp_712, in_Tmp_714, in_Tmp_715, in_j, in_Tmp_717, in_Tmp_718, in_Tmp_720, in_Tmp_721, in_Tmp_723, in_Tmp_724, in_Tmp_725, in_Tmp_726, in_Tmp_728, in_Tmp_731, in_Tmp_732, in_Tmp_733, in_Tmp_735, in_Tmp_736, in_Tmp_737, in_Tmp_738, in_Tmp_739, in_Tmp_740;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    goto anon17_Else;

  anon17_Else:
    out_Tmp_715 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_728;
    assume {:nonnull} out_Tmp_728 != 0;
    assume out_Tmp_728 > 0;
    havoc out_Tmp_711;
    assume {:nonnull} out_Tmp_711 != 0;
    assume out_Tmp_711 > 0;
    out_Tmp_704 := Mem_T.INT4[out_Tmp_711 + 5 * 4];
    out_Tmp_718 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_732;
    assume {:nonnull} out_Tmp_732 != 0;
    assume out_Tmp_732 > 0;
    havoc out_Tmp_733;
    assume {:nonnull} out_Tmp_733 != 0;
    assume out_Tmp_733 > 0;
    out_Tmp_724 := Mem_T.INT4[out_Tmp_733 + 4 * 4];
    out_Tmp_725 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_736;
    assume {:nonnull} out_Tmp_736 != 0;
    assume out_Tmp_736 > 0;
    havoc out_Tmp_709;
    assume {:nonnull} out_Tmp_709 != 0;
    assume out_Tmp_709 > 0;
    out_Tmp_706 := Mem_T.INT4[out_Tmp_709 + 3 * 4];
    out_Tmp_705 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_717;
    assume {:nonnull} out_Tmp_717 != 0;
    assume out_Tmp_717 > 0;
    havoc out_Tmp_708;
    assume {:nonnull} out_Tmp_708 != 0;
    assume out_Tmp_708 > 0;
    out_Tmp_723 := Mem_T.INT4[out_Tmp_708 + 2 * 4];
    out_Tmp_731 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_720;
    assume {:nonnull} out_Tmp_720 != 0;
    assume out_Tmp_720 > 0;
    havoc out_Tmp_702;
    assume {:nonnull} out_Tmp_702 != 0;
    assume out_Tmp_702 > 0;
    out_Tmp_714 := Mem_T.INT4[out_Tmp_702 + 1 * 4];
    out_Tmp_740 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_710;
    assume {:nonnull} out_Tmp_710 != 0;
    assume out_Tmp_710 > 0;
    havoc out_Tmp_703;
    assume {:nonnull} out_Tmp_703 != 0;
    assume out_Tmp_703 > 0;
    out_Tmp_701 := Mem_T.INT4[out_Tmp_703];
    out_Tmp_737 := strConst__li2bpl168;
    call {:si_unique_call 2262} DebugPrint(5, 32, out_Tmp_737);
    out_Tmp_712 := out_i_5 * 6;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_721;
    assume {:nonnull} out_Tmp_721 != 0;
    assume out_Tmp_721 > 0;
    havoc out_Tmp_726;
    out_McAddress := out_Tmp_726 + out_Tmp_712 * 4;
    out_j := 0;
    goto L25;

  L25:
    call {:si_unique_call 2261} out_Tmp_707, out_j, out_Tmp_735, out_Tmp_738, out_Tmp_739 := NICSetMulticastList_loop_L25(out_i_5, out_McAddress, out_Tmp_707, out_j, out_Tmp_735, out_Tmp_738, out_Tmp_739, in_FdoData_58);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_735 := out_j;
    out_Tmp_707 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_738;
    assume {:nonnull} out_Tmp_738 != 0;
    assume out_Tmp_738 > 0;
    havoc out_Tmp_739;
    assume {:nonnull} out_McAddress != 0;
    assume out_McAddress > 0;
    assume {:nonnull} out_Tmp_739 != 0;
    assume out_Tmp_739 > 0;
    Mem_T.INT4[out_McAddress] := Mem_T.INT4[out_Tmp_739 + out_Tmp_735 * 4];
    out_j := out_j + 1;
    assume false;
    return;

  anon18_Then:
    assume {:partition} out_j >= 6;
    out_i_5 := out_i_5 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    call {:si_unique_call 2263} {:si_old_unique_call 1} out_i_5, out_Tmp_701, out_Tmp_702, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_McAddress, out_Tmp_707, out_Tmp_708, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_714, out_Tmp_715, out_j, out_Tmp_717, out_Tmp_718, out_Tmp_720, out_Tmp_721, out_Tmp_723, out_Tmp_724, out_Tmp_725, out_Tmp_726, out_Tmp_728, out_Tmp_731, out_Tmp_732, out_Tmp_733, out_Tmp_735, out_Tmp_736, out_Tmp_737, out_Tmp_738, out_Tmp_739, out_Tmp_740 := NICSetMulticastList_loop_L12(out_i_5, out_Tmp_701, out_Tmp_702, out_Tmp_703, out_Tmp_704, out_Tmp_705, out_Tmp_706, out_McAddress, out_Tmp_707, out_Tmp_708, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_714, out_Tmp_715, out_j, out_Tmp_717, out_Tmp_718, out_Tmp_720, out_Tmp_721, out_Tmp_723, out_Tmp_724, out_Tmp_725, out_Tmp_726, out_Tmp_728, out_Tmp_731, out_Tmp_732, out_Tmp_733, out_Tmp_735, out_Tmp_736, out_Tmp_737, out_Tmp_738, out_Tmp_739, out_Tmp_740, in_FdoData_58);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L12(in_i_5: int, in_Tmp_701: int, in_Tmp_702: int, in_Tmp_703: int, in_Tmp_704: int, in_Tmp_705: int, in_Tmp_706: int, in_McAddress: int, in_Tmp_707: int, in_Tmp_708: int, in_Tmp_709: int, in_Tmp_710: int, in_Tmp_711: int, in_Tmp_712: int, in_Tmp_714: int, in_Tmp_715: int, in_j: int, in_Tmp_717: int, in_Tmp_718: int, in_Tmp_720: int, in_Tmp_721: int, in_Tmp_723: int, in_Tmp_724: int, in_Tmp_725: int, in_Tmp_726: int, in_Tmp_728: int, in_Tmp_731: int, in_Tmp_732: int, in_Tmp_733: int, in_Tmp_735: int, in_Tmp_736: int, in_Tmp_737: int, in_Tmp_738: int, in_Tmp_739: int, in_Tmp_740: int, in_FdoData_58: int) returns (out_i_5: int, out_Tmp_701: int, out_Tmp_702: int, out_Tmp_703: int, out_Tmp_704: int, out_Tmp_705: int, out_Tmp_706: int, out_McAddress: int, out_Tmp_707: int, out_Tmp_708: int, out_Tmp_709: int, out_Tmp_710: int, out_Tmp_711: int, out_Tmp_712: int, out_Tmp_714: int, out_Tmp_715: int, out_j: int, out_Tmp_717: int, out_Tmp_718: int, out_Tmp_720: int, out_Tmp_721: int, out_Tmp_723: int, out_Tmp_724: int, out_Tmp_725: int, out_Tmp_726: int, out_Tmp_728: int, out_Tmp_731: int, out_Tmp_732: int, out_Tmp_733: int, out_Tmp_735: int, out_Tmp_736: int, out_Tmp_737: int, out_Tmp_738: int, out_Tmp_739: int, out_Tmp_740: int);
  modifies Mem_T.INT4, alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_766: int, in_Tmp_800: int, in_FdoData_61: int) returns (out_counter_2: int, out_Tmp_766: int, out_Tmp_800: int)
{

  entry:
    out_counter_2, out_Tmp_766, out_Tmp_800 := in_counter_2, in_Tmp_766, in_Tmp_800;
    goto L91, exit;

  exit:
    return;

  L91:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} out_counter_2 != 0;
    assume {:nonnull} in_FdoData_61 != 0;
    assume in_FdoData_61 > 0;
    havoc out_Tmp_766;
    assume {:nonnull} out_Tmp_766 != 0;
    assume out_Tmp_766 > 0;
    havoc out_Tmp_800;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_800 == 128;
    out_counter_2 := out_counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    havoc out_counter_2;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_766: int, in_Tmp_800: int, in_FdoData_61: int) returns (out_counter_2: int, out_Tmp_766: int, out_Tmp_800: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICSetPacketFilter_loop_L76(in_i_6: int, in_Tmp_754: int, in_Tmp_777: int, in_Tmp_781: int, in_Tmp_782: int, in_Tmp_786: int, in_FdoData_61: int) returns (out_i_6: int, out_Tmp_754: int, out_Tmp_777: int, out_Tmp_781: int, out_Tmp_782: int, out_Tmp_786: int)
{

  entry:
    out_i_6, out_Tmp_754, out_Tmp_777, out_Tmp_781, out_Tmp_782, out_Tmp_786 := in_i_6, in_Tmp_754, in_Tmp_777, in_Tmp_781, in_Tmp_782, in_Tmp_786;
    goto L76, exit;

  exit:
    return;

  L76:
    assume {:CounterLoop 22} {:Counter "i_6"} true;
    goto anon54_Else;

  anon54_Else:
    assume {:partition} 22 > out_i_6;
    out_Tmp_781 := out_i_6;
    assume {:nonnull} in_FdoData_61 != 0;
    assume in_FdoData_61 > 0;
    havoc out_Tmp_786;
    assume {:nonnull} out_Tmp_786 != 0;
    assume out_Tmp_786 > 0;
    havoc out_Tmp_782;
    assume {:nonnull} out_Tmp_782 != 0;
    assume out_Tmp_782 > 0;
    out_Tmp_777 := Mem_T.INT4[out_Tmp_782 + out_Tmp_781 * 4];
    out_Tmp_754 := strConst__li2bpl177;
    call {:si_unique_call 2264} DebugPrint(6, 32, out_Tmp_754);
    out_i_6 := out_i_6 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    havoc out_i_6;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L76(in_i_6: int, in_Tmp_754: int, in_Tmp_777: int, in_Tmp_781: int, in_Tmp_782: int, in_Tmp_786: int, in_FdoData_61: int) returns (out_i_6: int, out_Tmp_754: int, out_Tmp_777: int, out_Tmp_781: int, out_Tmp_782: int, out_Tmp_786: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_781 == in_i_6 || out_Tmp_781 == in_Tmp_781;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MdiRead_loop_L11(in_counter_3: int, in_Tmp_846: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_846: int)
{

  entry:
    out_counter_3, out_Tmp_846 := in_counter_3, in_Tmp_846;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} out_counter_3 != 0;
    assume {:nonnull} in_Adapter_1 != 0;
    assume in_Adapter_1 > 0;
    havoc out_Tmp_846;
    assume {:nonnull} out_Tmp_846 != 0;
    assume out_Tmp_846 > 0;
    goto anon12_Else;

  anon12_Else:
    out_counter_3 := out_counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    havoc out_counter_3;
    return;
}



procedure {:LoopProcedure} MdiRead_loop_L11(in_counter_3: int, in_Tmp_846: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_846: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int)
{

  entry:
    out_counter_4 := in_counter_4;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_4 != 0;
    assume {:nonnull} in_pCSRAddress != 0;
    assume in_pCSRAddress > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_4 := out_counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_4;
    return;
}



procedure {:LoopProcedure} WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int)
{

  entry:
    out_counter_5 := in_counter_5;
    goto L20, exit;

  exit:
    return;

  L20:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_counter_5 != 0;
    assume {:nonnull} in_CommandBlock != 0;
    assume in_CommandBlock > 0;
    goto anon16_Else;

  anon16_Else:
    assume {:partition} BAND(Mem_T.INT4[CbStatus__CB_HEADER_STRUC(ConfigCBHeader__CONFIG_CB_STRUC(Config_unnamed_tag_69(NonTxCb__NON_TRANSMIT_CB(in_CommandBlock))))], 32768) == 0;
    out_counter_5 := out_counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    havoc out_counter_5;
    return;
}



procedure {:LoopProcedure} D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueFullReset_loop_L11(in_Tmp_861: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_861: int, out_counter_6: int)
{

  entry:
    out_Tmp_861, out_counter_6 := in_Tmp_861, in_counter_6;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_6 != 0;
    assume {:nonnull} in_Adapter_4 != 0;
    assume in_Adapter_4 > 0;
    havoc out_Tmp_861;
    assume {:nonnull} out_Tmp_861 != 0;
    assume out_Tmp_861 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_6 := out_counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_6;
    return;
}



procedure {:LoopProcedure} NICIssueFullReset_loop_L11(in_Tmp_861: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_861: int, out_counter_6: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_904: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_904: int)
{

  entry:
    out_counter_7, out_Tmp_904 := in_counter_7, in_Tmp_904;
    goto L19, exit;

  exit:
    return;

  L19:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_7 != 0;
    assume {:nonnull} in_Adapter_5 != 0;
    assume in_Adapter_5 > 0;
    havoc out_Tmp_904;
    assume {:nonnull} out_Tmp_904 != 0;
    assume out_Tmp_904 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_7 := out_counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_7;
    return;
}



procedure {:LoopProcedure} DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_904: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_904: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueSelectiveReset_loop_L39(in_Tmp_922: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_922: int, out_counter_9: int)
{

  entry:
    out_Tmp_922, out_counter_9 := in_Tmp_922, in_counter_9;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Else;

  anon23_Else:
    assume {:partition} out_counter_9 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_922;
    assume {:nonnull} out_Tmp_922 != 0;
    assume out_Tmp_922 > 0;
    goto anon27_Else;

  anon27_Else:
    out_counter_9 := out_counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_counter_9;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L39(in_Tmp_922: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_922: int, out_counter_9: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation NICIssueSelectiveReset_loop_L13(in_Tmp_920: int, in_counter_8: int, in_Tmp_921: int, in_Adapter_6: int) returns (out_Tmp_920: int, out_counter_8: int, out_Tmp_921: int)
{

  entry:
    out_Tmp_920, out_counter_8, out_Tmp_921 := in_Tmp_920, in_counter_8, in_Tmp_921;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Else;

  anon21_Else:
    assume {:partition} out_counter_8 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_921;
    assume {:nonnull} out_Tmp_921 != 0;
    assume out_Tmp_921 > 0;
    havoc out_Tmp_920;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_Tmp_920 == 128;
    out_counter_8 := out_counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_counter_8;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L13(in_Tmp_920: int, in_counter_8: int, in_Tmp_921: int, in_Adapter_6: int) returns (out_Tmp_920: int, out_counter_8: int, out_Tmp_921: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation MdiWrite_loop_L11(in_counter_10: int, in_Tmp_930: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_930: int)
{

  entry:
    out_counter_10, out_Tmp_930 := in_counter_10, in_Tmp_930;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_10 != 0;
    assume {:nonnull} in_Adapter_7 != 0;
    assume in_Adapter_7 > 0;
    havoc out_Tmp_930;
    assume {:nonnull} out_Tmp_930 != 0;
    assume out_Tmp_930 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_10 := out_counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_10;
    return;
}



procedure {:LoopProcedure} MdiWrite_loop_L11(in_counter_10: int, in_Tmp_930: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_930: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_232: int, in_listEntry_3: int, in_Tmp_417: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_235: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_235: int) returns (out_sdv_232: int, out_listEntry_3: int, out_Tmp_417: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_235: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_235: int)
{
  var vslice_dummy_var_77: int;

  entry:
    out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_235 := in_sdv_232, in_listEntry_3, in_Tmp_417, in_cancelRoutine, in_oldIrql_9, in_sdv_235, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_235;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2265} out_Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    Mem_T.INT4[out_Tmp_417] := out_oldIrql_9;
    call {:si_unique_call 2266} sdv_KeAcquireSpinLock(0, out_Tmp_417);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    out_oldIrql_9 := Mem_T.INT4[out_Tmp_417];
    call {:si_unique_call 2267} out_sdv_232 := sdv_IsListEmpty(0);
    goto anon11_Then;

  anon11_Then:
    assume {:partition} out_sdv_232 == 0;
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    call {:si_unique_call 2270} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_48));
    call {:si_unique_call 2271} out_sdv_235 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_235;
    call {:si_unique_call 2272} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 2268} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2269} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 2278} {:si_old_unique_call 1} out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_235 := PciDrvProcessQueuedRequests#0_loop_L13(out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, in_FdoData_48, out_vslice_dummy_var_235);
    return;

  anon13_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 2273} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 2274} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    goto L_BAF_3;

  anon12_Then:
    call {:si_unique_call 2276} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2275} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    goto L_BAF_3;

  anon14_Then:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon15_Else;

  anon15_Else:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    havoc vslice_dummy_var_77;
    call {:si_unique_call 2277} out_vslice_dummy_var_235 := PciDrvDispatchIO#0(vslice_dummy_var_77, out_nextIrp);
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    goto L_BAF_3;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_232: int, in_listEntry_3: int, in_Tmp_417: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_235: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_235: int) returns (out_sdv_232: int, out_listEntry_3: int, out_Tmp_417: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_235: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_235: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} out_sdv_232 == 1 || out_sdv_232 == 0 || out_sdv_232 == in_sdv_232;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_232: int, in_listEntry_3: int, in_Tmp_417: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_235: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_239: int) returns (out_sdv_232: int, out_listEntry_3: int, out_Tmp_417: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_235: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_239: int)
{
  var vslice_dummy_var_78: int;

  entry:
    out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_239 := in_sdv_232, in_listEntry_3, in_Tmp_417, in_cancelRoutine, in_oldIrql_9, in_sdv_235, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_239;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2279} out_Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    Mem_T.INT4[out_Tmp_417] := out_oldIrql_9;
    call {:si_unique_call 2280} sdv_KeAcquireSpinLock(0, out_Tmp_417);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    out_oldIrql_9 := Mem_T.INT4[out_Tmp_417];
    call {:si_unique_call 2281} out_sdv_232 := sdv_IsListEmpty(0);
    goto anon11_Then;

  anon11_Then:
    assume {:partition} out_sdv_232 == 0;
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    call {:si_unique_call 2284} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_48));
    call {:si_unique_call 2285} out_sdv_235 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_235;
    call {:si_unique_call 2286} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 2282} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2283} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 2292} {:si_old_unique_call 1} out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_239 := PciDrvProcessQueuedRequests#1_loop_L13(out_sdv_232, out_listEntry_3, out_Tmp_417, out_cancelRoutine, out_oldIrql_9, out_sdv_235, out_nIrpsReDispatched, out_nextIrp, in_FdoData_48, out_vslice_dummy_var_239);
    return;

  anon13_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 2287} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 2288} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    goto L_BAF_4;

  anon12_Then:
    call {:si_unique_call 2290} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    Mem_T.INT4[Information__IO_STATUS_BLOCK(IoStatus__IRP(out_nextIrp))] := 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2289} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    goto L_BAF_4;

  anon14_Then:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon15_Else;

  anon15_Else:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    havoc vslice_dummy_var_78;
    call {:si_unique_call 2291} out_vslice_dummy_var_239 := PciDrvDispatchIO#1(vslice_dummy_var_78, out_nextIrp);
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    goto L_BAF_4;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_232: int, in_listEntry_3: int, in_Tmp_417: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_235: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_239: int) returns (out_sdv_232: int, out_listEntry_3: int, out_Tmp_417: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_235: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_239: int);
  modifies alloc, Mem_T.INT4, sdv_irql_previous_5, sdv_irql_previous_4, sdv_irql_previous_3, sdv_irql_previous_2, sdv_irql_previous, sdv_irql_current;
  free ensures {:va_keep} old(sdv_irql_previous) == sdv_irql_previous;
  free ensures {:va_keep} out_sdv_232 == 1 || out_sdv_232 == 0 || out_sdv_232 == in_sdv_232;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



procedure fakeMain() returns (Tmp_562: int, dup_assertVar: bool);
  modifies alloc, sdv_irql_current, sdv_irql_previous, sdv_irql_previous_2, sdv_irql_previous_3, sdv_irql_previous_4, sdv_irql_previous_5, Mem_T.INT4, SLAM_guard_S_0, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} alloc >= old(alloc);



implementation {:entrypoint} fakeMain() returns (Tmp_562: int, dup_assertVar: bool)
{

  start:
    call Tmp_562, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


