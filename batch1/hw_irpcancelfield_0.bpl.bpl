var {:scalar} alloc: int;

var {:pointer} SLAM_guard_S_1: int;

var {:scalar} IoSetCancelRoutineCalled: int;

var {:scalar} IrpPended: int;

var {:scalar} yogi_error: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} IrpCancelChecked: int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const DEVPKEY_Device_ProblemCode: int;

const DEVPKEY_Device_DHP_Rebalance_Policy: int;

const GUID_NWF_DATA_RATE_MAPPING_TABLE: int;

const DEVPKEY_DeviceContainer_IsMetadataSearchInProgress: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceContainer_IsShowInDisconnectedState: int;

const GUID_NWF_FRAGMENTATION_THRESHOLD: int;

const GUID_NWF_MAX_MAC_ADDRESS_STATES: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const DEVPKEY_Device_SafeRemovalRequired: int;

const DEVPKEY_PciRootBus_PCIExpressAERControl: int;

const DEVPKEY_PciDevice_BaseClass: int;

const GUID_NWF_ACTIVE_PHY_LIST: int;

const DEVPKEY_Device_ResourcePickerTags: int;

const DEVPKEY_DeviceContainer_IsPaired: int;

const DEVPKEY_Device_HardwareIds: int;

const DEVPKEY_DeviceContainer_InstallInProgress: int;

const DEVPKEY_PciDevice_MaxPayloadSize: int;

const GUID_NWF_COUNTRY_STRING: int;

const DEVPKEY_Device_LowerFilters: int;

const DEVPKEY_Device_FirmwareVersion: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_NWF_CURRENT_INDEX: int;

const GUID_NWF_TI_THRESHOLD: int;

const GUID_NWF_ERP_PBCC_OPTION_ENABLED: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const DEVPKEY_PciDevice_BarTypes: int;

const GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM: int;

const GUID_POWER_CONSERVATION_IDLE_TIME: int;

const GUID_NWF_RECV_SENSITIVITY_LIST: int;

const DEVPKEY_DeviceClass_UpperFilters: int;

const DEVPKEY_DeviceClass_NoInstallClass: int;

const GUID_NWF_RANDOM_TABLE_FLAG: int;

const DEVPKEY_Device_DeviceDesc: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Mask: int;

const GUID_NWF_RF_USAGE: int;

const DEVPKEY_DeviceContainer_IsEncrypted: int;

const DEVPKEY_Device_LastArrivalDate: int;

const GUID_NWF_RSSI_RANGE: int;

const GUID_NWF_CURRENT_PHY_ID: int;

const GUID_NWF_JOIN_REQUEST: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_Characteristics: int;

const DEVPKEY_DrvPkg_DetailedDescription: int;

const DEVPKEY_DeviceContainer_DeviceDescription2: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Desc: int;

const DEVPKEY_PciRootBus_CurrentSpeedAndMode: int;

const GUID_NWF_RTS_THRESHOLD: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Icon: int;

const DEVPKEY_DeviceInterfaceClass_Name: int;

const GUID_NWF_PRIVACY_EXEMPTION_LIST: int;

const DEVPKEY_Device_InstanceId: int;

const GUID_NWF_SUPPORTED_RX_ANTENNA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_LastRemovalDate: int;

const DEVPKEY_DeviceContainer_RequiresPairingElevation: int;

const GUID_NWF_POWER_MGMT_MODE: int;

const GUID_NWF_ED_THRESHOLD: int;

const DEVPKEY_DeviceContainer_RequiresUninstallElevation: int;

const GUID_NWF_OPERATION_MODE_CAPABILITY: int;

const DEVPKEY_Device_Manufacturer: int;

const DEVPKEY_Device_DriverLogoLevel: int;

const DEVPKEY_DeviceContainer_Address: int;

const DEVPKEY_DeviceContainer_IsAuthenticated: int;

const DEVPKEY_PciDevice_SubClass: int;

const GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames: int;

const GUID_NWF_PERMANENT_ADDRESS: int;

const DEVPKEY_Device_ConfigurationId: int;

const GUID_NWF_CURRENT_TX_POWER_LEVEL: int;

const GUID_DEVINTERFACE_PCIDRV: int;

const DEVPKEY_Device_HasProblem: int;

const DEVPKEY_DeviceContainer_Category_Desc_Plural: int;

const GUID_NWF_MEDIA_STREAMING_ENABLED: int;

const DEVPKEY_PciDevice_AriSupport: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MAX: int;

const GUID_NWF_PMKID_LIST: int;

const DEVPKEY_PciRootBus_DeviceIDMessagingCapable: int;

const DEVPKEY_Device_PhysicalDeviceLocation: int;

const DEVPKEY_DeviceContainer_Version: int;

const GUID_NWF_BEACON_PERIOD: int;

const GUID_NWF_DESIRED_SSID_LIST: int;

const DEVPKEY_PciRootBus_ASPMSupport: int;

const GUID_NWF_CURRENT_OFFLOAD_CAPABILITY: int;

const DEVPKEY_Device_PostInstallInProgress: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_Driver: int;

const DEVPKEY_PciDevice_CurrentPayloadSize: int;

const GUID_NWF_DSSS_OFDM_OPTION_ENABLED: int;

const GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST: int;

const DEVPKEY_Device_InstallState: int;

const GUID_NWF_MAX_DWELL_TIME: int;

const GUID_NWF_WPA_TSC: int;

const GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED: int;

const GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM: int;

const GUID_BUS_TYPE_PCI: int;

const DEVPKEY_PciDevice_Label_String: int;

const GUID_NWF_NUMBER_OF_HOPPING_SETS: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const DEVPKEY_Device_FirmwareDate: int;

const DEVPKEY_PciDevice_SriovSupport: int;

const GUID_NWF_SAFE_MODE_ENABLED: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceInterface_FriendlyName: int;

const DEVPKEY_PciDevice_Uncorrectable_Error_Severity: int;

const DEVPKEY_PciDevice_S0WakeupSupported: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const DEVPKEY_PciDevice_InterruptSupport: int;

const DEVPKEY_PciDevice_Label_Id: int;

const DEVPKEY_Device_CompatibleIds: int;

const DEVPKEY_Device_ReportedDeviceIdsHash: int;

const DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport: int;

const GUID_NWF_CURRENT_CHANNEL: int;

const GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED: int;

const DEVPKEY_Device_DriverPropPageProvider: int;

const DEVPKEY_DeviceContainer_UnpairUninstall: int;

const DEVPKEY_PciDevice_CurrentLinkSpeed: int;

const GUID_NWF_NIC_SPECIFIC_EXTENSION: int;

const DEVPKEY_Device_BiosDeviceName: int;

const GUID_NWF_CFP_MAX_DURATION: int;

const GUID_NWF_HOPPING_PATTERN: int;

const GUID_NWF_CURRENT_CHANNEL_NUMBER: int;

const GUID_NWF_DISCONNECT_REQUEST: int;

const GUID_NWF_CURRENT_PACKET_FILTER: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PowerRelations: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer: int;

const GUID_NWF_SUPPORTED_PHY_TYPES: int;

const GUID_NWF_HOP_ALGORITHM_ADOPTED: int;

const DEVPKEY_DrvPkg_BrandingIcon: int;

const DEVPKEY_DeviceClass_Characteristics: int;

const GUID_NWF_SCAN_REQUEST: int;

const GUID_NWF_DESIRED_BSS_TYPE: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const DEVPKEY_Device_MatchingDeviceId: int;

const GUID_NWF_EXCLUDE_UNENCRYPTED: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST: int;

const DEVPKEY_Device_PDOName: int;

const DEVPKEY_Device_Address: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_Exclusive: int;

const DEVPKEY_PciDevice_Correctable_Error_Mask: int;

const DEVPKEY_DeviceContainer_DeviceDescription1: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED: int;

const DEVPKEY_DeviceContainer_Manufacturer: int;

const DEVPKEY_DeviceClass_NoUseClass: int;

const GUID_NWF_SUPPORTED_DATA_RATES_VALUE: int;

const GUID_NWF_CHANNEL_AGILITY_ENABLED: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_MaxLinkWidth: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const DEVPKEY_Device_DevNodeStatus: int;

const GUID_NWF_WME_ENABLED: int;

const DEVPKEY_Device_DriverProvider: int;

const DEVPKEY_DeviceContainer_CategoryGroup_Icon: int;

const DEVPKEY_PciDevice_CurrentSpeedAndMode: int;

const DEVPKEY_PciDevice_AERCapabilityPresent: int;

const GUID_NWF_WME_AC_PARAMETERS: int;

const DEVPKEY_Device_ModelId: int;

const GUID_NWF_AP_JOIN_REQUEST: int;

const DEVPKEY_DeviceContainer_PrimaryCategory: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const DEVPKEY_Device_Children: int;

const DEVPKEY_Device_Stack: int;

const DEVPKEY_DeviceContainer_IsLocalMachine: int;

const GUID_NWF_MPDU_MAX_LENGTH: int;

const GUID_NWF_CURRENT_OPTIONAL_CAPABILITY: int;

const DEVPKEY_Device_DriverDate: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_NWF_STATION_ID: int;

const GUID_NWF_REG_DOMAINS_SUPPORT_VALUE: int;

const DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect: int;

const GUID_NWF_MEDIUM_OCCUPANCY_LIMIT: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_DeviceFunctionSubRank: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const DEVPKEY_Device_DriverDesc: int;

const GUID_NWF_HOP_MODULUS: int;

const DEVPKEY_DeviceClass_NoDisplayClass: int;

const GUID_NWF_OFFLOAD_CAPABILITY: int;

const GUID_NWF_SUPPORTED_POWER_LEVELS: int;

const GUID_NWF_DIVERSITY_SELECTION_RX: int;

const GUID_NWF_WME_IMPLEMENTED: int;

const DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const DEVPKEY_Device_BusNumber: int;

const DEVPKEY_Device_PowerData: int;

const DEVPKEY_Device_ConfigFlags: int;

const DEVPKEY_PciDevice_MaxReadRequestSize: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_BUS_TYPE_AVC: int;

const DEVPKEY_DeviceContainer_MetadataPath: int;

const GUID_NWF_CIPHER_DEFAULT_KEY_ID: int;

const GUID_NWF_CURRENT_SET: int;

const GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR: int;

const DEVPKEY_DeviceContainer_FriendlyName: int;

const DEVPKEY_PciRootBus_SupportedSpeedsAndModes: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const DEVPKEY_Device_PresenceNotForDevice: int;

const GUID_NWF_DESIRED_BSSID_LIST: int;

const GUID_NWF_ENUM_ASSOCIATION_INFO: int;

const DEVPKEY_DeviceInterface_ClassGuid: int;

const DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable: int;

const DEVPKEY_Device_FriendlyNameAttributes: int;

const GUID_NWF_NIC_POWER_STATE: int;

const GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST: int;

const DEVPKEY_Device_SessionId: int;

const DEVPKEY_DeviceInterface_Enabled: int;

const DEVPKEY_DeviceInterface_Restricted: int;

const GUID_NWF_FREQUENCY_BANDS_SUPPORTED: int;

const DEVPKEY_Device_TransportRelations: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const DEVPKEY_NAME: int;

const DEVPKEY_Device_UINumberDescFormat: int;

const GUID_NWF_WEP_OFFLOAD: int;

const GUID_NWF_UPDATE_IE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const DEVPKEY_DeviceClass_ClassCoInstallers: int;

const GUID_NWF_POWER_MGMT_REQUEST: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const DEVPKEY_Device_FriendlyName: int;

const DEVPKEY_Device_LocationInfo: int;

const DEVPKEY_DeviceContainer_Category_Icon: int;

const GUID_NWF_DESIRED_PHY_LIST: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MAX: int;

const DEVPKEY_Device_Exclusive: int;

const GUID_NWF_CIPHER_KEY_MAPPING_KEY: int;

const DEVPKEY_Device_Numa_Proximity_Domain: int;

const GUID_NWF_QOS_TX_DURATION: int;

const DEVPKEY_Device_DriverProblemDesc: int;

const DEVPKEY_DeviceContainer_IsSharedDevice: int;

const GUID_NWF_CURRENT_DWELL_TIME: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const DEVPKEY_PciDevice_CurrentLinkWidth: int;

const DEVPKEY_Device_UINumber: int;

const DEVPKEY_Device_ExtendedConfigurationIds: int;

const DEVPKEY_Device_DriverRank: int;

const DEVPKEY_DeviceContainer_IsRebootRequired: int;

const DEVPKEY_PciRootBus_PCIExpressNativePMEControl: int;

const GUID_NWF_PORT_STATE_NOTIFICATION: int;

const DEVPKEY_Device_SafeRemovalRequiredOverride: int;

const DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl: int;

const DEVPKEY_PciDevice_DeviceType: int;

const GUID_NWF_QOS_TX_MEDIUM_TIME: int;

const GUID_NWF_DIVERSITY_SUPPORT: int;

const GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR: int;

const DEVPKEY_Device_DriverInfSection: int;

const DEVPKEY_DeviceClass_PropPageProvider: int;

const GUID_NWF_TEMP_TYPE: int;

const DEVPKEY_Device_Class: int;

const DEVPKEY_Device_NoConnectSound: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const DEVPKEY_DeviceClass_DevType: int;

const GUID_NWF_CURRENT_PATTERN: int;

const DEVPKEY_Device_ManufacturerAttributes: int;

const GUID_NWF_ENUM_BSS_LIST: int;

const GUID_BUS_TYPE_ISAPNP: int;

const DEVPKEY_Device_Reported: int;

const DEVPKEY_PciRootBus_NativePciExpressControl: int;

const GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME: int;

const DEVPKEY_DeviceContainer_IsNetworkDevice: int;

const DEVPKEY_Device_ResourcePickerExceptions: int;

const GUID_NWF_OPERATIONAL_RATE_SET: int;

const GUID_BUS_TYPE_ACPI: int;

const DEVPKEY_Device_RemovalPolicyDefault: int;

const DEVPKEY_Device_ProblemStatus: int;

const GUID_NWF_WEP_UPLOAD: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const DEVPKEY_DeviceContainer_IsNotInterestingForDisplay: int;

const GUID_NWF_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const DEVPKEY_Device_EjectionRelations: int;

const GUID_BUS_TYPE_EISA: int;

const DEVPKEY_PciDevice_MaxLinkSpeed: int;

const DEVPKEY_PciDevice_FirmwareErrorHandling: int;

const GUID_NWF_CURRENT_OPERATION_MODE: int;

const GUID_NWF_STATISTICS: int;

const DEVPKEY_Device_IsAssociateableByUserAction: int;

const DEVPKEY_DrvPkg_Icon: int;

const DEVPKEY_PciDevice_ProgIf: int;

const DEVPKEY_Device_AdditionalSoftwareRequested: int;

const GUID_NWF_CHANNEL_AGILITY_PRESENT: int;

const DEVPKEY_Device_LocationPaths: int;

const GUID_NWF_CURRENT_FREQUENCY: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const DEVPKEY_DeviceClass_SilentInstall: int;

const DEVPKEY_Device_LegacyBusType: int;

const DEVPKEY_DeviceContainer_IsDefaultDevice: int;

const GUID_BUS_TYPE_IRDA: int;

const DEVPKEY_Device_UpperFilters: int;

const DEVPKEY_Device_DevType: int;

const DEVPKEY_Device_DriverInfPath: int;

const DEVPKEY_DeviceInterface_ReferenceString: int;

const GUID_NWF_CCA_WATCHDOG_TIMER_MIN: int;

const GUID_NWF_PBCC_OPTION_IMPLEMENTED: int;

const GUID_POWER_PERFORMANCE_IDLE_TIME: int;

const DEVPKEY_Device_IsRebootRequired: int;

const DEVPKEY_DeviceClass_ClassInstaller: int;

const DEVPKEY_DeviceContainer_IsConnected: int;

const DEVPKEY_DeviceContainer_Icon: int;

const GUID_BUS_TYPE_MCA: int;

const DEVPKEY_DeviceContainer_Category_Desc_Singular: int;

const DEVPKEY_Device_SecuritySDS: int;

const DEVPKEY_DeviceClass_DHPRebalanceOptOut: int;

const GUID_NWF_CFP_PERIOD: int;

const GUID_NWF_EHCC_CAPABILITY_ENABLED: int;

const DEVPKEY_Device_InstallDate: int;

const DEVPKEY_DeviceClass_LowerFilters: int;

const DEVPKEY_DeviceContainer_MetadataChecksum: int;

const DEVPKEY_DeviceClass_DefaultService: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_NWF_WEP_ICV_ERROR_COUNT: int;

const DEVPKEY_DrvPkg_VendorWebSite: int;

const DEVPKEY_DeviceContainer_ConfigFlags: int;

const DEVPKEY_PciDevice_AcsSupport: int;

const DEVPKEY_Device_RemovalRelations: int;

const DEVPKEY_DrvPkg_DocumentationLink: int;

const GUID_NWF_MULTICAST_LIST: int;

const GUID_NWF_DEFAULT_WEP_UPLOAD: int;

const GUID_NWF_RESET_REQUEST: int;

const DEVPKEY_Device_BusTypeGuid: int;

const GUID_NWF_DTIM_PERIOD: int;

const GUID_NWF_RANDOM_TABLE_FIELD_NUMBER: int;

const GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING: int;

const DEVPKEY_Device_ShowInUninstallUI: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED: int;

const GUID_NWF_CURRENT_ADDRESS: int;

const DEVPKEY_Device_ContainerId: int;

const DEVPKEY_Device_InLocalMachineContainer: int;

const DEVPKEY_DeviceContainer_ExperienceId: int;

const GUID_NWF_CURRENT_RX_ANTENNA: int;

const GUID_NWF_CIPHER_DEFAULT_KEY: int;

const DEVPKEY_Device_FirmwareRevision: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_NWF_SUPPORTED_TX_ANTENNA: int;

const DEVPKEY_DeviceContainer_BaselineExperienceId: int;

const DEVPKEY_PciRootBus_SecondaryInterface: int;

const GUID_NWF_CONNECT_REQUEST: int;

const GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED: int;

const GUID_NWF_EXTSTA_CAPABILITY: int;

const DEVPKEY_Device_Security: int;

const DEVPKEY_DeviceClass_SecuritySDS: int;

const GUID_BUS_TYPE_SD: int;

const DEVPKEY_Device_EnumeratorName: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const DEVPKEY_DeviceClass_Security: int;

const DEVPKEY_DeviceContainer_Last_Seen: int;

const DEVPKEY_PciRootBus_ExtendedConfigAvailable: int;

const DEVPKEY_Device_ClassGuid: int;

const DEVPKEY_Device_FirstInstallDate: int;

const GUID_NWF_MAXIMUM_LIST_SIZE: int;

const GUID_BUS_TYPE_HID: int;

const GUID_NWF_IBSS_PARAMS: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_NWF_ATIM_WINDOW: int;

const GUID_NWF_CF_POLLABLE: int;

const GUID_NWF_MAC_ADDRESS: int;

const DEVPKEY_Device_BusReportedDeviceDesc: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const GUID_NWF_HOP_TIME: int;

const DEVPKEY_Device_RemovalPolicy: int;

const DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames: int;

const GUID_NWF_START_REQUEST: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const DEVPKEY_DeviceClass_Name: int;

const DEVPKEY_DeviceContainer_ModelName: int;

const DEVPKEY_Device_IsPresent: int;

const GUID_BUS_TYPE_1394: int;

const DEVPKEY_Device_RemovalPolicyOverride: int;

const DEVPKEY_Device_Model: int;

const DEVPKEY_PciDevice_RootError_Reporting: int;

const GUID_NWF_SHORT_RETRY_LIMIT: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_NWF_MULTI_DOMAIN_CAPABILITY: int;

const DEVPKEY_DeviceContainer_DiscoveryMethod: int;

const DEVPKEY_Device_DriverInfSectionExt: int;

const DEVPKEY_DeviceClass_ClassName: int;

const DEVPKEY_PciRootBus_SystemMsiSupport: int;

const GUID_NWF_QOS_TX_QUEUES_SUPPORTED: int;

const GUID_NWF_HOP_OFFSET: int;

const DEVPKEY_DeviceContainer_AssociationArray: int;

const DEVPKEY_PciRootBus_SecondaryBusWidth: int;

const GUID_NWF_ASSOCIATION_PARAMS: int;

const DEVPKEY_PciRootBus_SHPCNativeHotPlugControl: int;

const DEVPKEY_Device_BaseContainerId: int;

const GUID_NWF_FLUSH_BSS_LIST: int;

const GUID_NWF_CURRENT_TX_ANTENNA: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const DEVPKEY_Device_BusRelations: int;

const GUID_NWF_HR_CCA_MODE_SUPPORTED: int;

const GUID_BUS_TYPE_SERENUM: int;

const DEVPKEY_DeviceContainer_ModelNumber: int;

const PCIDRV_WMI_STD_DATA_GUID: int;

const DEVPKEY_DeviceContainer_Last_Connected: int;

const GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED: int;

const DEVPKEY_PciDevice_Error_Reporting: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const DEVPKEY_PciRootBus_MSISupport: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_NWF_CCA_WATCHDOG_COUNT_MIN: int;

const DEVPKEY_Device_SignalStrength: int;

const DEVPKEY_Device_DebuggerSafe: int;

const DEVPKEY_Device_DriverCoInstallers: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_NWF_OPTIONAL_CAPABILITY: int;

const GUID_NWF_EHCC_PRIME_RADIX: int;

const GUID_NWF_CURRENT_PHY_TYPE: int;

const GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD: int;

const DEVPKEY_Device_Numa_Node: int;

const DEVPKEY_PciDevice_ExpressSpecVersion: int;

const DEVPKEY_PciRootBus_PCIExpressCapabilityControl: int;

const GUID_NWF_DEFAULT_WEP_OFFLOAD: int;

const GUID_NWF_QOS_PARAMS: int;

const GUID_BUS_TYPE_USB: int;

const DEVPKEY_Device_GenericDriverInstalled: int;

const GUID_NWF_CURRENT_REG_DOMAIN: int;

const GUID_NWF_WME_UPDATE_IE: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const DEVPKEY_PciRootBus_PCISegmentGroupsSupport: int;

const DEVPKEY_Device_Service: int;

const DEVPKEY_Device_Capabilities: int;

const DEVPKEY_PciRootBus_ClockPowerManagementSupport: int;

const GUID_NWF_UNICAST_USE_GROUP_ENABLED: int;

const GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING: int;

const GUID_BUS_TYPE_USBPRINT: int;

const DEVPKEY_DeviceInterfaceClass_DefaultInterface: int;

const DEVPKEY_DeviceContainer_MetadataCabinet: int;

const GUID_NWF_COUNTERS_ENTRY: int;

const GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX: int;

const GUID_NWF_PHY_STATE: int;

const DEVPKEY_Device_Parent: int;

const GUID_NWF_MAX_RECEIVE_LIFETIME: int;

const DEVPKEY_DeviceContainer_Category: int;

const DEVPKEY_PciDevice_ECRC_Errors: int;

const GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_NWF_AUTO_CONFIG_ENABLED: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const DEVPKEY_Device_DriverVersion: int;

const GUID_NWF_CURRENT_CCA_MODE: int;

const DEVPKEY_DrvPkg_Model: int;

const DEVPKEY_DeviceClass_IconPath: int;

const GUID_NWF_LONG_RETRY_LIMIT: int;

const DEVPKEY_PciDevice_InterruptMessageMaximum: int;

const GUID_NWF_HIDDEN_NETWORK_ENABLED: int;

const DEVPKEY_Device_Legacy: int;

const DEVPKEY_Device_Siblings: int;

const DEVPKEY_DeviceContainer_HasProblem: int;

const DebugLevel: int;

const Globals: int;

const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: int;

const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: int;

const GUID_ALLOW_RTC_WAKE: int;

const GUID_BATTERY_DISCHARGE_LEVEL_2: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: int;

const GUID_DISK_IDLE_TIMEOUT: int;

const GUID_ACDC_POWER_SOURCE: int;

const GUID_SYSTEM_COOLING_POLICY: int;

const GUID_BATTERY_DISCHARGE_LEVEL_3: int;

const GUID_LOCK_CONSOLE_ON_WAKE: int;

const GUID_VIDEO_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLESTATE_POLICY: int;

const GUID_UNATTEND_SLEEP_TIMEOUT: int;

const PPM_THERMALCONSTRAINT_GUID: int;

const GUID_CRITICAL_POWER_TRANSITION: int;

const GUID_SLEEP_IDLE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: int;

const GUID_PROCESSOR_THROTTLE_MAXIMUM: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT: int;

const GUID_STANDBY_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_GUID: int;

const GUID_TYPICAL_POWER_SAVINGS: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: int;

const GUID_PROCESSOR_SETTINGS_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_2: int;

const GUID_HIBERNATE_TIMEOUT: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: int;

const GUID_BATTERY_DISCHARGE_ACTION_3: int;

const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: int;

const PPM_IDLESTATES_DATA_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: int;

const GUID_POWERBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: int;

const GUID_AUDIO_PLAYBACK: int;

const GUID_PROCESSOR_THROTTLE_POLICY: int;

const GUID_BATTERY_PERCENTAGE_REMAINING: int;

const GUID_GLOBAL_USER_PRESENCE: int;

const GUID_BATTERY_DISCHARGE_ACTION_2: int;

const GUID_APPLAUNCH_BUTTON: int;

const GUID_PROCESSOR_ALLOW_THROTTLING: int;

const GUID_IDLE_RESILIENCY_PERIOD: int;

const GUID_PROCESSOR_DISTRIBUTE_UTILITY: int;

const GUID_SLEEPBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: int;

const GUID_PROCESSOR_IDLE_DISABLE: int;

const GUID_CONSOLE_DISPLAY_STATE: int;

const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_0: int;

const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: int;

const GUID_INTSTEER_TIME_UNPARK_TRIGGER: int;

const GUID_LIDSWITCH_STATE_CHANGE: int;

const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: int;

const GUID_SESSION_DISPLAY_STATUS: int;

const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: int;

const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: int;

const GUID_VIDEO_ANNOYANCE_TIMEOUT: int;

const GUID_BATTERY_DISCHARGE_FLAGS_3: int;

const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: int;

const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: int;

const GUID_MIN_POWER_SAVINGS: int;

const GUID_DEVICE_IDLE_POLICY: int;

const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: int;

const GUID_SLEEP_SUBGROUP: int;

const GUID_DISK_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_LEVEL_1: int;

const GUID_BATTERY_DISCHARGE_ACTION_0: int;

const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: int;

const GUID_BATTERY_DISCHARGE_LEVEL_0: int;

const GUID_VIDEO_DIM_TIMEOUT: int;

const PPM_THERMAL_POLICY_CHANGE_GUID: int;

const GUID_PROCESSOR_PERF_TIME_CHECK: int;

const GUID_LIDOPEN_POWERSTATE: int;

const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: int;

const GUID_PROCESSOR_PERF_INCREASE_TIME: int;

const GUID_MONITOR_POWER_ON: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: int;

const GUID_PROCESSOR_THROTTLE_MINIMUM: int;

const GUID_ALLOW_AWAYMODE: int;

const GUID_DISK_ADAPTIVE_POWERDOWN: int;

const GUID_SYSTEM_BUTTON_SUBGROUP: int;

const PPM_PERFMON_PERFSTATE_GUID: int;

const GUID_ALLOW_SYSTEM_REQUIRED: int;

const GUID_ALLOW_DISPLAY_REQUIRED: int;

const PPM_PERFSTATE_DOMAIN_CHANGE_GUID: int;

const GUID_PROCESSOR_PARKING_PERF_STATE: int;

const GUID_PROCESSOR_PERF_DECREASE_POLICY: int;

const PPM_IDLESTATE_CHANGE_GUID: int;

const GUID_ALLOW_STANDBY_STATES: int;

const GUID_PROCESSOR_PERFSTATE_POLICY: int;

const GUID_BATTERY_DISCHARGE_ACTION_1: int;

const GUID_PROCESSOR_PERF_INCREASE_POLICY: int;

const GUID_VIDEO_SUBGROUP: int;

const GUID_HIBERNATE_FASTS4_POLICY: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: int;

const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: int;

const PPM_PERFSTATE_CHANGE_GUID: int;

const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: int;

const GUID_USERINTERFACEBUTTON_ACTION: int;

const GUID_PCIEXPRESS_ASPM_POLICY: int;

const GUID_BATTERY_DISCHARGE_FLAGS_1: int;

const GUID_PROCESSOR_PERF_INCREASE_HISTORY: int;

const GUID_INTSTEER_SUBGROUP: int;

const GUID_DISK_BURST_IGNORE_THRESHOLD: int;

const GUID_DISK_POWERDOWN_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: int;

const PPM_PERFSTATES_DATA_GUID: int;

const NO_SUBGROUP_GUID: int;

const GUID_VIDEO_FULLSCREEN_PLAYBACK: int;

const GUID_PROCESSOR_PERF_BOOST_MODE: int;

const ALL_POWERSCHEMES_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: int;

const GUID_PROCESSOR_IDLE_ALLOW_SCALING: int;

const GUID_PROCESSOR_IDLE_TIME_CHECK: int;

const GUID_INTSTEER_MODE: int;

const GUID_IDLE_RESILIENCY_PLATFORM_STATE: int;

const GUID_BACKGROUND_TASK_NOTIFICATION: int;

const GUID_PROCESSOR_PERF_HISTORY: int;

const GUID_VIDEO_ADAPTIVE_POWERDOWN: int;

const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: int;

const GUID_PROCESSOR_PERF_BOOST_POLICY: int;

const GUID_SESSION_USER_PRESENCE: int;

const GUID_LIDCLOSE_ACTION: int;

const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: int;

const PPM_IDLE_ACCOUNTING_EX_GUID: int;

const GUID_PROCESSOR_PERF_DECREASE_TIME: int;

const GUID_MAX_POWER_SAVINGS: int;

const GUID_BATTERY_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_HISTORY: int;

const GUID_IDLE_BACKGROUND_TASK: int;

const GUID_POWERSCHEME_PERSONALITY: int;

const GUID_IDLE_RESILIENCY_SUBGROUP: int;

const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: int;

const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: int;

const GUID_ACTIVE_POWERSCHEME: int;

const GUID_SYSTEM_AWAYMODE: int;

const DebugFlag: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_kdpc3: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_dpc_ke_registered: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_Io_Removelock_release_wait_returned: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_harnessStackLocation: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_1_init: int;

const SLAM_guard_S_0_init: int;

procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MPSetPowerD0"} MPSetPowerD0(actual_FdoData: int) returns (Tmp_3: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} Tmp_3 == -1073741661 || Tmp_3 == 0 || Tmp_3 == -1073741668 || Tmp_3 == -1073741811 || Tmp_3 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MPSetPowerD0"} MPSetPowerD0(actual_FdoData: int) returns (Tmp_3: int)
{
  var {:pointer} Tmp_4: int;
  var {:scalar} oldIrql: int;
  var {:scalar} DueTime_1: int;
  var {:pointer} Tmp_5: int;
  var {:scalar} status: int;
  var {:pointer} FdoData: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_0: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;

  anon0:
    call {:si_unique_call 1} DueTime_1 := __HAVOC_malloc(20);
    FdoData := actual_FdoData;
    call {:si_unique_call 2} Tmp_5 := __HAVOC_malloc(120);
    call {:si_unique_call 3} vslice_dummy_var_1 := MPSetPowerD0Private(FdoData);
    call {:si_unique_call 4} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    call {:si_unique_call 5} sdv_KeAcquireSpinLock(0, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    havoc oldIrql;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_0;
    call {:si_unique_call 6} status := NICSetPacketFilter(FdoData, vslice_dummy_var_0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status != 0;
    goto L18;

  L18:
    call {:si_unique_call 7} sdv_KeReleaseSpinLock(0, oldIrql);
    call {:si_unique_call 8} Tmp_4 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    call {:si_unique_call 9} sdv_KeRaiseIrql(2, Tmp_4);
    assume {:nonnull} Tmp_4 != 0;
    assume Tmp_4 > 0;
    havoc oldIrql;
    call {:si_unique_call 10} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 11} status := NICSetMulticastList(FdoData);
    call {:si_unique_call 12} vslice_dummy_var_2 := NICStartRecv(FdoData);
    call {:si_unique_call 13} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 14} sdv_KeLowerIrql(oldIrql);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 15} KeClearEvent(WatchDogTimerEvent__FDO_DATA(FdoData));
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    call {:si_unique_call 16} vslice_dummy_var_4 := KeSetTimer(0, DueTime_1, 0);
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 17} vslice_dummy_var_3 := NICEnableInterrupt(FdoData);
    goto L54;

  L54:
    Tmp_3 := status;
    return;

  anon8_Then:
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    havoc vslice_dummy_var_6;
    havoc vslice_dummy_var_7;
    havoc vslice_dummy_var_8;
    havoc vslice_dummy_var_9;
    havoc vslice_dummy_var_10;
    call {:si_unique_call 18} status := IoConnectInterrupt(0, li2bplFunctionConstant909, FdoData, 0, vslice_dummy_var_6, vslice_dummy_var_7, vslice_dummy_var_8, vslice_dummy_var_9, 1, vslice_dummy_var_10, 0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status >= 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    call {:si_unique_call 19} vslice_dummy_var_5 := NICEnableInterrupt(FdoData);
    goto L54;

  anon9_Then:
    assume {:partition} 0 > status;
    Tmp_5 := strConst__li2bpl0;
    call {:si_unique_call 20} DebugPrint(2, 1, Tmp_5);
    goto L54;

  anon7_Then:
    assume {:partition} status == 0;
    assume {:nonnull} FdoData != 0;
    assume FdoData > 0;
    goto L18;
}



procedure {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_6 == -1073741823 || Tmp_6 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MPCalculateE100PatternForFilter"} MPCalculateE100PatternForFilter(actual_pFrame: int, actual_FrameLength: int, actual_pMask: int, actual_MaskLength: int, actual_pSignature: int) returns (Tmp_6: int)
{
  var {:scalar} i: int;
  var {:scalar} Tmp_7: int;
  var {:scalar} MaskBit: int;
  var {:pointer} pCurrentMaskByte: int;
  var {:scalar} Signature: int;
  var {:scalar} n: int;
  var {:pointer} Tmp_9: int;
  var {:pointer} Tmp_10: int;
  var {:scalar} MaskOffset: int;
  var {:scalar} Tmp_11: int;
  var {:scalar} BitOffsetInMask: int;
  var {:scalar} status_1: int;
  var {:pointer} pFrame: int;
  var {:scalar} FrameLength: int;
  var {:pointer} pMask: int;
  var {:scalar} MaskLength: int;
  var {:pointer} pSignature: int;

  anon0:
    pFrame := actual_pFrame;
    FrameLength := actual_FrameLength;
    pMask := actual_pMask;
    MaskLength := actual_MaskLength;
    pSignature := actual_pSignature;
    call {:si_unique_call 21} Tmp_9 := __HAVOC_malloc(148);
    call {:si_unique_call 22} Tmp_10 := __HAVOC_malloc(148);
    Signature := 0;
    n := 0;
    i := 0;
    pCurrentMaskByte := pMask;
    MaskOffset := 0;
    BitOffsetInMask := 0;
    MaskBit := 0;
    status_1 := -1073741823;
    Tmp_9 := strConst__li2bpl2;
    call {:si_unique_call 23} DebugPrint(5, 4, Tmp_9);
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} FrameLength > 128;
    status_1 := -1073741823;
    goto L33;

  L33:
    Tmp_10 := strConst__li2bpl1;
    call {:si_unique_call 24} DebugPrint(5, 4, Tmp_10);
    Tmp_6 := status_1;
    return;

  anon20_Then:
    assume {:partition} 128 >= FrameLength;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} MaskLength > 12;
    status_1 := -1073741823;
    goto L33;

  anon17_Then:
    assume {:partition} 12 >= MaskLength;
    i := 0;
    n := i;
    goto L41;

  L41:
    call {:si_unique_call 25} i, Tmp_7, MaskBit, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(i, Tmp_7, MaskBit, pCurrentMaskByte, Signature, n, MaskOffset, Tmp_11, BitOffsetInMask, pFrame, FrameLength, MaskLength);
    goto L41_last;

  L41_last:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 128 > n;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} FrameLength > n;
    BitOffsetInMask := INTMOD(n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 26} MaskBit := corral_nondet();
    assume {:nonnull} pCurrentMaskByte != 0;
    assume pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L57;

  L57:
    n := n + 1;
    goto L57_dummy;

  L57_dummy:
    assume false;
    return;

  anon22_Then:
    Tmp_11 := n;
    assume {:nonnull} pFrame != 0;
    assume pFrame > 0;
    Tmp_7 := INTMOD(i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(Signature, 0) != 0;
    call {:si_unique_call 27} Signature := corral_nondet();
    goto L56;

  L56:
    i := i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(Signature, 0) == 0;
    call {:si_unique_call 28} Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} BitOffsetInMask == 0;
    MaskOffset := INTDIV(n, 8);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MaskOffset != MaskLength;
    goto L47;

  anon24_Then:
    assume {:partition} MaskOffset == MaskLength;
    goto L42;

  L42:
    Signature := BAND(Signature, BNOT(BOR(BOR(BOR(BOR(BOR(BOR(BOR(16777216, 33554432), 67108864), 134217728), 268435456), 536870912), 1073741824), -2147483648)));
    assume {:nonnull} pSignature != 0;
    assume pSignature > 0;
    status_1 := 0;
    goto L33;

  anon19_Then:
    assume {:partition} n >= FrameLength;
    goto L42;

  anon18_Then:
    assume {:partition} n >= 128;
    goto L42;
}



procedure {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICRemoveAllWakeUpPatterns"} NICRemoveAllWakeUpPatterns(actual_FdoData_1: int)
{
  var {:pointer} sdv_9: int;
  var {:pointer} Tmp_14: int;
  var {:pointer} Tmp_15: int;
  var {:pointer} pPatternEntry: int;
  var {:pointer} Tmp_16: int;
  var {:pointer} FdoData_1: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;

  anon0:
    call {:si_unique_call 29} vslice_dummy_var_6 := __HAVOC_malloc(4);
    FdoData_1 := actual_FdoData_1;
    call {:si_unique_call 30} Tmp_14 := __HAVOC_malloc(128);
    call {:si_unique_call 31} Tmp_16 := __HAVOC_malloc(128);
    assume {:nonnull} FdoData_1 != 0;
    assume FdoData_1 > 0;
    Tmp_15 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_1));
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    havoc pPatternEntry;
    Tmp_16 := strConst__li2bpl4;
    call {:si_unique_call 32} DebugPrint(5, 4, Tmp_16);
    goto L8;

  L8:
    call {:si_unique_call 33} sdv_9, pPatternEntry, vslice_dummy_var_7 := NICRemoveAllWakeUpPatterns_loop_L8(sdv_9, pPatternEntry, vslice_dummy_var_7);
    goto L8_last;

  L8_last:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 34} sdv_9 := sdv_containing_record(pPatternEntry, 0);
    assume {:nonnull} pPatternEntry != 0;
    assume pPatternEntry > 0;
    havoc pPatternEntry;
    call {:si_unique_call 35} vslice_dummy_var_7 := sdv_RemoveEntryList(0);
    call {:si_unique_call 36} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    Tmp_14 := strConst__li2bpl3;
    call {:si_unique_call 37} DebugPrint(5, 4, Tmp_14);
    return;
}



procedure {:origName "NICConfigureForWakeUp"} NICConfigureForWakeUp(actual_FdoData_2: int, actual_AddPattern: int) returns (Tmp_17: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_17 == -1073741789 || Tmp_17 == 0 || Tmp_17 == -1073741823 || Tmp_17 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICConfigureForWakeUp"} NICConfigureForWakeUp(actual_FdoData_2: int, actual_AddPattern: int) returns (Tmp_17: int)
{
  var {:pointer} nextPattern: int;
  var {:scalar} bufLen: int;
  var {:pointer} Tmp_18: int;
  var {:pointer} ndisPattern: int;
  var {:dopa} {:scalar} unUsed: int;
  var {:pointer} Tmp_19: int;
  var {:pointer} Buffer: int;
  var {:pointer} wakePattern: int;
  var {:pointer} patternBuffer: int;
  var {:scalar} maskLen: int;
  var {:pointer} nextMask: int;
  var {:scalar} status_2: int;
  var {:pointer} FdoData_2: int;
  var {:scalar} AddPattern: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 38} unUsed := __HAVOC_malloc(4);
    call {:si_unique_call 39} Buffer := __HAVOC_malloc(4);
    FdoData_2 := actual_FdoData_2;
    AddPattern := actual_AddPattern;
    call {:si_unique_call 40} Tmp_18 := __HAVOC_malloc(124);
    call {:si_unique_call 41} Tmp_19 := __HAVOC_malloc(136);
    assume {:nonnull} Buffer != 0;
    assume Buffer > 0;
    call {:si_unique_call 42} boogieTmp := __HAVOC_malloc(608);
    call {:si_unique_call 43} wakePattern := __HAVOC_malloc(24);
    assume {:nonnull} wakePattern != 0;
    assume wakePattern > 0;
    assume {:nonnull} Buffer != 0;
    assume Buffer > 0;
    havoc patternBuffer;
    ndisPattern := patternBuffer;
    call {:si_unique_call 44} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    havoc maskLen;
    nextMask := patternBuffer;
    nextPattern := nextMask;
    assume {:nonnull} nextMask != 0;
    assume nextMask > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    assume {:nonnull} ndisPattern != 0;
    assume ndisPattern > 0;
    havoc bufLen;
    call {:si_unique_call 45} sdv_RtlCopyMemory(0, 0, 6);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} AddPattern != 0;
    call {:si_unique_call 46} status_2 := NICAddWakeUpPattern(FdoData_2, Buffer, bufLen, unUsed, unUsed);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_2 >= 0;
    goto L42;

  L42:
    Tmp_17 := status_2;
    return;

  anon8_Then:
    assume {:partition} 0 > status_2;
    Tmp_18 := strConst__li2bpl5;
    call {:si_unique_call 47} DebugPrint(5, 4, Tmp_18);
    goto L42;

  anon7_Then:
    assume {:partition} AddPattern == 0;
    call {:si_unique_call 48} status_2 := NICRemoveWakeUpPattern(FdoData_2, Buffer, bufLen, unUsed, unUsed);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_2 < 0;
    Tmp_19 := strConst__li2bpl6;
    call {:si_unique_call 49} DebugPrint(5, 4, Tmp_19);
    goto L42;

  anon9_Then:
    assume {:partition} 0 <= status_2;
    goto L42;
}



procedure {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_3: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_21: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_21 == -1073741789 || Tmp_21 == 0 || Tmp_21 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICRemoveWakeUpPattern"} NICRemoveWakeUpPattern(actual_FdoData_3: int, actual_InformationBuffer: int, actual_InformationBufferLength: int, actual_BytesRead: int, actual_BytesNeeded: int) returns (Tmp_21: int)
{
  var {:pointer} Tmp_23: int;
  var {:pointer} pReqPattern: int;
  var {:pointer} Tmp_24: int;
  var {:scalar} bIsThisThePattern: int;
  var {:pointer} Tmp_25: int;
  var {:dopa} {:scalar} result: int;
  var {:pointer} sdv_14: int;
  var {:pointer} pWakeUpPattern_1: int;
  var {:pointer} pCurrPattern: int;
  var {:scalar} status_3: int;
  var {:pointer} pPatternEntry_1: int;
  var {:pointer} Tmp_26: int;
  var {:pointer} FdoData_3: int;
  var {:pointer} InformationBuffer: int;
  var {:scalar} InformationBufferLength: int;
  var {:pointer} BytesRead: int;
  var {:pointer} BytesNeeded: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 50} result := __HAVOC_malloc(4);
    FdoData_3 := actual_FdoData_3;
    InformationBuffer := actual_InformationBuffer;
    InformationBufferLength := actual_InformationBufferLength;
    BytesRead := actual_BytesRead;
    BytesNeeded := actual_BytesNeeded;
    call {:si_unique_call 51} Tmp_23 := __HAVOC_malloc(112);
    call {:si_unique_call 52} Tmp_24 := __HAVOC_malloc(4);
    call {:si_unique_call 53} Tmp_25 := __HAVOC_malloc(112);
    status_3 := -1073741823;
    pReqPattern := InformationBuffer;
    assume {:nonnull} FdoData_3 != 0;
    assume FdoData_3 > 0;
    Tmp_26 := PatternList__MP_POWER_MGMT(PoMgmt__FDO_DATA(FdoData_3));
    assume {:nonnull} Tmp_26 != 0;
    assume Tmp_26 > 0;
    havoc pPatternEntry_1;
    Tmp_25 := strConst__li2bpl8;
    call {:si_unique_call 54} DebugPrint(5, 4, Tmp_25);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 24 > InformationBufferLength;
    status_3 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    goto L20;

  L20:
    Tmp_23 := strConst__li2bpl7;
    call {:si_unique_call 55} DebugPrint(5, 4, Tmp_23);
    Tmp_21 := status_3;
    return;

  anon11_Then:
    assume {:partition} InformationBufferLength >= 24;
    assume {:nonnull} pReqPattern != 0;
    assume pReqPattern > 0;
    havoc vslice_dummy_var_11;
    havoc vslice_dummy_var_12;
    call {:si_unique_call 56} status_3 := RtlULongAdd(vslice_dummy_var_11, vslice_dummy_var_12, result);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_3 >= 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    status_3 := -1073741789;
    assume {:nonnull} BytesNeeded != 0;
    assume BytesNeeded > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    goto L20;

  anon13_Then:
    assume {:nonnull} BytesRead != 0;
    assume BytesRead > 0;
    assume {:nonnull} result != 0;
    assume result > 0;
    goto L32;

  L32:
    call {:si_unique_call 57} Tmp_24, bIsThisThePattern, sdv_14, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1 := NICRemoveWakeUpPattern_loop_L32(pReqPattern, Tmp_24, bIsThisThePattern, sdv_14, pWakeUpPattern_1, pCurrPattern, pPatternEntry_1);
    goto L32_last;

  L32_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    bIsThisThePattern := 0;
    pWakeUpPattern_1 := 0;
    pCurrPattern := 0;
    call {:si_unique_call 58} sdv_14 := sdv_containing_record(pPatternEntry_1, 0);
    pWakeUpPattern_1 := sdv_14;
    assume {:nonnull} pWakeUpPattern_1 != 0;
    assume pWakeUpPattern_1 > 0;
    havoc Tmp_24;
    pCurrPattern := Tmp_24;
    assume {:nonnull} pPatternEntry_1 != 0;
    assume pPatternEntry_1 > 0;
    havoc pPatternEntry_1;
    call {:si_unique_call 59} bIsThisThePattern := MPAreTwoPatternsEqual(pReqPattern, pCurrPattern);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bIsThisThePattern == 1;
    call {:si_unique_call 60} vslice_dummy_var_8 := sdv_RemoveEntryList(0);
    call {:si_unique_call 61} ExFreePoolWithTag(0, -1001831600);
    status_3 := 0;
    goto L20;

  anon15_Then:
    assume {:partition} bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    assume false;
    return;

  anon14_Then:
    goto L20;

  anon12_Then:
    assume {:partition} 0 > status_3;
    goto L20;
}



procedure {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_4: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_27: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_27 == -1073741789 || Tmp_27 == 0 || Tmp_27 == -1073741823 || Tmp_27 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICAddWakeUpPattern"} NICAddWakeUpPattern(actual_FdoData_4: int, actual_InformationBuffer_1: int, actual_InformationBufferLength_1: int, actual_BytesRead_1: int, actual_BytesNeeded_1: int) returns (Tmp_27: int)
{
  var {:pointer} Tmp_28: int;
  var {:pointer} Tmp_30: int;
  var {:pointer} Tmp_31: int;
  var {:dopa} {:scalar} Signature_1: int;
  var {:dopa} {:scalar} CopyLength: int;
  var {:pointer} Tmp_33: int;
  var {:pointer} sdv_19: int;
  var {:pointer} Tmp_34: int;
  var {:pointer} pWakeUpPattern_2: int;
  var {:scalar} AllocationLength: int;
  var {:scalar} status_4: int;
  var {:pointer} pPmPattern: int;
  var {:pointer} InformationBuffer_1: int;
  var {:scalar} InformationBufferLength_1: int;
  var {:pointer} BytesRead_1: int;
  var {:pointer} BytesNeeded_1: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;

  anon0:
    call {:si_unique_call 62} Signature_1 := __HAVOC_malloc(4);
    call {:si_unique_call 63} CopyLength := __HAVOC_malloc(4);
    InformationBuffer_1 := actual_InformationBuffer_1;
    InformationBufferLength_1 := actual_InformationBufferLength_1;
    BytesRead_1 := actual_BytesRead_1;
    BytesNeeded_1 := actual_BytesNeeded_1;
    call {:si_unique_call 64} Tmp_28 := __HAVOC_malloc(4);
    call {:si_unique_call 65} Tmp_31 := __HAVOC_malloc(100);
    call {:si_unique_call 66} Tmp_34 := __HAVOC_malloc(100);
    status_4 := -1073741823;
    pWakeUpPattern_2 := 0;
    AllocationLength := 0;
    pPmPattern := 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Tmp_31 := strConst__li2bpl10;
    call {:si_unique_call 67} DebugPrint(5, 4, Tmp_31);
    pPmPattern := InformationBuffer_1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} 24 > InformationBufferLength_1;
    status_4 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    goto L26;

  L26:
    Tmp_34 := strConst__li2bpl9;
    call {:si_unique_call 68} DebugPrint(5, 4, Tmp_34);
    Tmp_27 := status_4;
    return;

  anon14_Then:
    assume {:partition} InformationBufferLength_1 >= 24;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_13;
    havoc vslice_dummy_var_14;
    call {:si_unique_call 69} status_4 := RtlULongAdd(vslice_dummy_var_13, vslice_dummy_var_14, CopyLength);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_4 >= 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    status_4 := -1073741789;
    assume {:nonnull} BytesNeeded_1 != 0;
    assume BytesNeeded_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    goto L26;

  anon12_Then:
    assume {:nonnull} BytesRead_1 != 0;
    assume BytesRead_1 > 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    Tmp_30 := pPmPattern;
    Tmp_33 := pPmPattern;
    assume {:nonnull} pPmPattern != 0;
    assume pPmPattern > 0;
    havoc vslice_dummy_var_15;
    havoc vslice_dummy_var_16;
    call {:si_unique_call 70} status_4 := MPCalculateE100PatternForFilter(Tmp_33, vslice_dummy_var_15, Tmp_30, vslice_dummy_var_16, Signature_1);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_4 == 0;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    havoc AllocationLength;
    call {:si_unique_call 71} sdv_19 := ExAllocatePoolWithTag(512, AllocationLength, -1001831600);
    pWakeUpPattern_2 := sdv_19;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} pWakeUpPattern_2 != 0;
    call {:si_unique_call 72} sdv_RtlZeroMemory(0, AllocationLength);
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    assume {:nonnull} Signature_1 != 0;
    assume Signature_1 > 0;
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    assume {:nonnull} pWakeUpPattern_2 != 0;
    assume pWakeUpPattern_2 > 0;
    havoc Tmp_28;
    assume {:nonnull} CopyLength != 0;
    assume CopyLength > 0;
    havoc vslice_dummy_var_17;
    call {:si_unique_call 73} sdv_RtlMoveMemory(0, 0, vslice_dummy_var_17);
    call {:si_unique_call 74} vslice_dummy_var_9 := sdv_ExInterlockedInsertHeadList(0, 0, 0);
    status_4 := 0;
    goto L26;

  anon15_Then:
    assume {:partition} pWakeUpPattern_2 == 0;
    goto L26;

  anon13_Then:
    assume {:partition} status_4 != 0;
    goto L26;

  anon11_Then:
    assume {:partition} 0 > status_4;
    goto L26;
}



procedure {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_35: int);
  free ensures {:va_keep} Tmp_35 == 0 || Tmp_35 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MPAreTwoPatternsEqual"} MPAreTwoPatternsEqual(actual_pNdisPattern1: int, actual_pNdisPattern2: int) returns (Tmp_35: int)
{
  var {:scalar} sdv_21: int;
  var {:scalar} sdv_22: int;
  var {:scalar} bEqual: int;
  var {:pointer} pNdisPattern1: int;
  var {:pointer} pNdisPattern2: int;

  anon0:
    pNdisPattern1 := actual_pNdisPattern1;
    pNdisPattern2 := actual_pNdisPattern2;
    bEqual := 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    bEqual := 0;
    goto L47;

  L47:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  L38:
    Tmp_35 := bEqual;
    return;

  anon22_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    bEqual := 0;
    goto L50;

  L50:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon23_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_21 != 0;
    bEqual := 0;
    goto L56;

  L56:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon25_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern1 != 0;
    assume pNdisPattern1 > 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bEqual := 0;
    goto L59;

  L59:
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} bEqual == 0;
    goto L38;

  anon26_Then:
    assume {:partition} bEqual != 0;
    assume {:nonnull} pNdisPattern2 != 0;
    assume pNdisPattern2 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_22 != 0;
    bEqual := 0;
    goto L65;

  L65:
    goto L38;

  anon27_Then:
    assume {:partition} sdv_22 == 0;
    bEqual := 1;
    goto L65;

  anon20_Then:
    bEqual := 1;
    goto L59;

  anon24_Then:
    assume {:partition} sdv_21 == 0;
    bEqual := 1;
    goto L56;

  anon19_Then:
    bEqual := 1;
    goto L50;

  anon21_Then:
    bEqual := 1;
    goto L47;
}



procedure {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_5: int) returns (Tmp_37: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_37 == -1073741668 || Tmp_37 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MPSetPowerD0Private"} MPSetPowerD0Private(actual_FdoData_5: int) returns (Tmp_37: int)
{
  var {:pointer} Tmp_38: int;
  var {:pointer} Tmp_39: int;
  var {:pointer} pPMDR: int;
  var {:scalar} status_5: int;
  var {:pointer} FdoData_5: int;

  anon0:
    FdoData_5 := actual_FdoData_5;
    call {:si_unique_call 75} Tmp_38 := __HAVOC_malloc(96);
    call {:si_unique_call 76} Tmp_39 := __HAVOC_malloc(96);
    Tmp_39 := strConst__li2bpl11;
    call {:si_unique_call 77} DebugPrint(5, 4, Tmp_39);
    call {:si_unique_call 78} pPMDR := HwReadPowerPMDR(FdoData_5);
    call {:si_unique_call 79} status_5 := NICInitializeAdapter(FdoData_5);
    assume {:nonnull} pPMDR != 0;
    assume pPMDR > 0;
    call {:si_unique_call 80} NICIssueSelectiveReset(FdoData_5);
    Tmp_38 := strConst__li2bpl12;
    call {:si_unique_call 81} DebugPrint(5, 4, Tmp_38);
    Tmp_37 := status_5;
    return;
}



procedure {:origName "NICSetPower"} NICSetPower(actual_FdoData_6: int, actual_PowerState_1: int) returns (Tmp_41: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} Tmp_41 == 0 || Tmp_41 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICSetPower"} NICSetPower(actual_FdoData_6: int, actual_PowerState_1: int) returns (Tmp_41: int)
{
  var {:pointer} Tmp_42: int;
  var {:scalar} status_6: int;
  var {:pointer} Tmp_44: int;
  var {:pointer} FdoData_6: int;
  var {:scalar} PowerState_1: int;
  var vslice_dummy_var_10: int;

  anon0:
    FdoData_6 := actual_FdoData_6;
    PowerState_1 := actual_PowerState_1;
    call {:si_unique_call 82} Tmp_42 := __HAVOC_malloc(100);
    call {:si_unique_call 83} Tmp_44 := __HAVOC_malloc(124);
    status_6 := 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} PowerState_1 == 1;
    Tmp_42 := strConst__li2bpl14;
    call {:si_unique_call 84} DebugPrint(5, 4, Tmp_42);
    call {:si_unique_call 85} vslice_dummy_var_10 := MPSetPowerD0(FdoData_6);
    goto L15;

  L15:
    Tmp_41 := status_6;
    return;

  anon3_Then:
    assume {:partition} PowerState_1 != 1;
    Tmp_44 := strConst__li2bpl13;
    call {:si_unique_call 86} DebugPrint(5, 4, Tmp_44);
    call {:si_unique_call 87} status_6 := MPSetPowerLow(FdoData_6, PowerState_1);
    goto L15;
}



procedure {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_45: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "HwReadPowerPMDR"} HwReadPowerPMDR(actual_Adapter: int) returns (Tmp_45: int)
{
  var {:pointer} pPMDR_1: int;
  var {:pointer} Adapter: int;

  anon0:
    Adapter := actual_Adapter;
    pPMDR_1 := 0;
    assume {:nonnull} Adapter != 0;
    assume Adapter > 0;
    havoc pPMDR_1;
    assume {:nonnull} pPMDR_1 != 0;
    assume pPMDR_1 > 0;
    Tmp_45 := pPMDR_1;
    return;
}



procedure {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_7: int, actual_PowerState_2: int) returns (Tmp_47: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_47 == -1073741668 || Tmp_47 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MPSetPowerLow"} MPSetPowerLow(actual_FdoData_7: int, actual_PowerState_2: int) returns (Tmp_47: int)
{
  var {:scalar} status_7: int;
  var {:pointer} Tmp_49: int;
  var {:pointer} FdoData_7: int;
  var vslice_dummy_var_11: int;

  anon0:
    FdoData_7 := actual_FdoData_7;
    status_7 := 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    havoc Tmp_49;
    assume {:nonnull} Tmp_49 != 0;
    assume Tmp_49 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 88} status_7 := D100IssueScbCommand(FdoData_7, 4, 1);
    goto L6;

  L6:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_7 != 0;
    goto L15;

  L15:
    Tmp_47 := status_7;
    return;

  anon5_Then:
    assume {:partition} status_7 == 0;
    call {:si_unique_call 89} vslice_dummy_var_11 := KeSynchronizeExecution(0, li2bplFunctionConstant1377, 0);
    call {:si_unique_call 90} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    assume {:nonnull} FdoData_7 != 0;
    assume FdoData_7 > 0;
    status_7 := 0;
    goto L15;

  anon6_Then:
    goto L6;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_12: int;

  anon0:
    call {:si_unique_call 91} vslice_dummy_var_12 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_13: int;

  anon0:
    call {:si_unique_call 92} vslice_dummy_var_13 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "NICServiceReadIrps"} NICServiceReadIrps(actual_FdoData_8: int, actual_PacketArray: int, actual_PacketArrayCount: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICServiceReadIrps"} NICServiceReadIrps(actual_FdoData_8: int, actual_PacketArray: int, actual_PacketArrayCount: int)
{
  var {:scalar} Tmp_54: int;
  var {:scalar} length: int;
  var {:pointer} pMpRfd: int;
  var {:pointer} listEntry: int;
  var {:scalar} sdv_30: int;
  var {:scalar} sdv_31: int;
  var {:pointer} buffer: int;
  var {:pointer} sdv_36: int;
  var {:scalar} index: int;
  var {:scalar} sdv_38: int;
  var {:pointer} Tmp_57: int;
  var {:pointer} Tmp_58: int;
  var {:pointer} irp: int;
  var {:scalar} Tmp_59: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_60: int;
  var {:pointer} FdoData_8: int;
  var {:pointer} PacketArray: int;
  var {:scalar} PacketArrayCount: int;
  var vslice_dummy_var_14: int;
  var vslice_dummy_var_15: int;
  var vslice_dummy_var_16: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;

  anon0:
    call {:si_unique_call 93} vslice_dummy_var_14 := __HAVOC_malloc(4);
    FdoData_8 := actual_FdoData_8;
    PacketArray := actual_PacketArray;
    PacketArrayCount := actual_PacketArrayCount;
    call {:si_unique_call 94} Tmp_57 := __HAVOC_malloc(96);
    call {:si_unique_call 95} Tmp_58 := __HAVOC_malloc(96);
    call {:si_unique_call 96} Tmp_60 := __HAVOC_malloc(108);
    pMpRfd := 0;
    Tmp_58 := strConst__li2bpl16;
    call {:si_unique_call 97} DebugPrint(5, 128, Tmp_58);
    index := 0;
    goto L15;

  L15:
    call {:si_unique_call 98} Tmp_54, length, pMpRfd, listEntry, sdv_30, sdv_31, buffer, sdv_36, index, sdv_38, irp, Tmp_59, status_8, Tmp_60, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18 := NICServiceReadIrps_loop_L15(Tmp_54, length, pMpRfd, listEntry, sdv_30, sdv_31, buffer, sdv_36, index, sdv_38, irp, Tmp_59, status_8, Tmp_60, FdoData_8, PacketArray, PacketArrayCount, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18);
    goto L15_last;

  L15_last:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} PacketArrayCount > index;
    Tmp_59 := index;
    assume {:nonnull} PacketArray != 0;
    assume PacketArray > 0;
    havoc pMpRfd;
    call {:si_unique_call 99} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 100} listEntry, sdv_30, sdv_36, sdv_38, irp := NICServiceReadIrps_loop_L27(listEntry, sdv_30, sdv_36, sdv_38, irp, FdoData_8);
    goto L27_last;

  L27_last:
    call {:si_unique_call 123} sdv_30 := sdv_IsListEmpty(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_30 != 0;
    call {:si_unique_call 101} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 102} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 103} vslice_dummy_var_16 := PciDrvIoDecrement(FdoData_8);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 104} NICReturnRFD(FdoData_8, pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 105} sdv_KeReleaseSpinLockFromDpcLevel(0);
    index := index + 1;
    goto L96_dummy;

  L96_dummy:
    assume false;
    return;

  anon21_Then:
    call {:si_unique_call 106} vslice_dummy_var_17 := PciDrvIoIncrement(FdoData_8);
    call {:si_unique_call 107} status_8 := PciDrvQueuePassiveLevelCallback(FdoData_8, li2bplFunctionConstant3731, pMpRfd, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_8 >= 0;
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    Tmp_60 := strConst__li2bpl17;
    call {:si_unique_call 108} DebugPrint(5, 128, Tmp_60);
    goto L96;

  anon20_Then:
    assume {:partition} 0 > status_8;
    call {:si_unique_call 109} vslice_dummy_var_18 := PciDrvIoDecrement(FdoData_8);
    call {:si_unique_call 110} NICReturnRFD(FdoData_8, pMpRfd);
    goto L96;

  anon16_Then:
    assume {:partition} sdv_30 == 0;
    assume {:nonnull} FdoData_8 != 0;
    assume FdoData_8 > 0;
    call {:si_unique_call 111} listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_8));
    call {:si_unique_call 112} sdv_36 := sdv_containing_record(listEntry, 88);
    irp := sdv_36;
    call {:si_unique_call 113} sdv_38 := sdv_IoSetCancelRoutine(irp, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_38 != 0;
    call {:si_unique_call 114} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 115} buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} buffer != 0;
    call {:si_unique_call 116} sdv_31 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 117} Tmp_54 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    length := Tmp_54;
    call {:si_unique_call 118} sdv_RtlCopyMemory(0, 0, length);
    status_8 := 0;
    goto L73;

  L73:
    assume {:nonnull} irp != 0;
    assume irp > 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 119} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 120} vslice_dummy_var_15 := PciDrvIoDecrement(FdoData_8);
    goto L24;

  anon19_Then:
    assume {:nonnull} pMpRfd != 0;
    assume pMpRfd > 0;
    havoc Tmp_54;
    goto L68;

  anon18_Then:
    assume {:partition} buffer == 0;
    status_8 := -1073741670;
    length := 0;
    goto L73;

  anon17_Then:
    assume {:partition} sdv_38 == 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    call {:si_unique_call 121} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(irp))));
    irp := 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} index >= PacketArrayCount;
    Tmp_57 := strConst__li2bpl15;
    call {:si_unique_call 122} DebugPrint(5, 128, Tmp_57);
    return;
}



procedure {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_9: int, actual_pMpRfd_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICReturnRFD"} NICReturnRFD(actual_FdoData_9: int, actual_pMpRfd_1: int)
{
  var {:scalar} sdv_41: int;
  var {:pointer} Tmp_62: int;
  var {:pointer} pLastMpRfd: int;
  var {:pointer} pHwRfd: int;
  var {:pointer} FdoData_9: int;
  var {:pointer} pMpRfd_1: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 124} vslice_dummy_var_19 := __HAVOC_malloc(4);
    FdoData_9 := actual_FdoData_9;
    pMpRfd_1 := actual_pMpRfd_1;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    havoc pHwRfd;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    call {:si_unique_call 125} sdv_41 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_41 != 0;
    goto L16;

  L16:
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    call {:si_unique_call 126} vslice_dummy_var_20 := sdv_InsertTailList(RecvList__FDO_DATA(FdoData_9), pMpRfd_1);
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    return;

  anon3_Then:
    assume {:partition} sdv_41 == 0;
    assume {:nonnull} FdoData_9 != 0;
    assume FdoData_9 > 0;
    Tmp_62 := RecvList__FDO_DATA(FdoData_9);
    assume {:nonnull} Tmp_62 != 0;
    assume Tmp_62 > 0;
    havoc pLastMpRfd;
    assume {:nonnull} pLastMpRfd != 0;
    assume pLastMpRfd > 0;
    havoc pHwRfd;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    assume {:nonnull} pMpRfd_1 != 0;
    assume pMpRfd_1 > 0;
    assume {:nonnull} pHwRfd != 0;
    assume pHwRfd > 0;
    goto L16;
}



procedure {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt(actual_FdoData_10: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICHandleRecvInterrupt"} NICHandleRecvInterrupt(actual_FdoData_10: int)
{
  var {:scalar} PacketArrayCount_1: int;
  var {:pointer} Tmp_64: int;
  var {:scalar} Tmp_65: int;
  var {:pointer} Tmp_66: int;
  var {:scalar} Tmp_67: int;
  var {:scalar} LoopCount: int;
  var {:scalar} PacketStatus: int;
  var {:scalar} Tmp_68: int;
  var {:scalar} sdv_42: int;
  var {:pointer} pMpRfd_2: int;
  var {:scalar} Tmp_70: int;
  var {:pointer} Tmp_71: int;
  var {:pointer} Tmp_72: int;
  var {:scalar} LoopIndex: int;
  var {:scalar} PacketFreeCount: int;
  var {:scalar} Tmp_73: int;
  var {:pointer} PacketFreeArray: int;
  var {:pointer} PacketArray_1: int;
  var {:pointer} Tmp_74: int;
  var {:scalar} status_9: int;
  var {:scalar} bContinue: int;
  var {:scalar} bAllocNewRfd: int;
  var {:scalar} Index: int;
  var {:pointer} pHwRfd_1: int;
  var {:pointer} FdoData_10: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 127} vslice_dummy_var_21 := __HAVOC_malloc(4);
    FdoData_10 := actual_FdoData_10;
    call {:si_unique_call 128} Tmp_64 := __HAVOC_malloc(116);
    call {:si_unique_call 129} Tmp_66 := __HAVOC_malloc(136);
    call {:si_unique_call 130} Tmp_71 := __HAVOC_malloc(88);
    call {:si_unique_call 131} Tmp_72 := __HAVOC_malloc(116);
    call {:si_unique_call 132} PacketFreeArray := __HAVOC_malloc(80);
    call {:si_unique_call 133} PacketArray_1 := __HAVOC_malloc(80);
    pMpRfd_2 := 0;
    pHwRfd_1 := 0;
    LoopIndex := 0;
    LoopCount := 52;
    bContinue := 1;
    bAllocNewRfd := 0;
    Tmp_64 := strConst__li2bpl21;
    call {:si_unique_call 134} DebugPrint(5, 128, Tmp_64);
    goto L24;

  L24:
    call {:si_unique_call 135} PacketArrayCount_1, Tmp_65, Tmp_66, Tmp_67, PacketStatus, Tmp_68, sdv_42, pMpRfd_2, Tmp_70, Tmp_71, LoopIndex, PacketFreeCount, Tmp_73, Tmp_74, bContinue, bAllocNewRfd, Index, pHwRfd_1, vslice_dummy_var_22, vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L24(PacketArrayCount_1, Tmp_65, Tmp_66, Tmp_67, LoopCount, PacketStatus, Tmp_68, sdv_42, pMpRfd_2, Tmp_70, Tmp_71, LoopIndex, PacketFreeCount, Tmp_73, PacketFreeArray, PacketArray_1, Tmp_74, bContinue, bAllocNewRfd, Index, pHwRfd_1, FdoData_10, vslice_dummy_var_22, vslice_dummy_var_25);
    goto L24_last;

  L24_last:
    Tmp_73 := LoopIndex;
    LoopIndex := LoopIndex + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} LoopCount > Tmp_73;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} bContinue != 0;
    PacketArrayCount_1 := 0;
    PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 136} PacketArrayCount_1, Tmp_65, Tmp_67, PacketStatus, Tmp_68, sdv_42, pMpRfd_2, Tmp_71, PacketFreeCount, Tmp_74, bAllocNewRfd, pHwRfd_1, vslice_dummy_var_22, vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(PacketArrayCount_1, Tmp_65, Tmp_67, PacketStatus, Tmp_68, sdv_42, pMpRfd_2, Tmp_71, PacketFreeCount, PacketFreeArray, PacketArray_1, Tmp_74, bAllocNewRfd, pHwRfd_1, FdoData_10, vslice_dummy_var_22, vslice_dummy_var_25);
    goto L29_last;

  L29_last:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} 20 > PacketArrayCount_1;
    call {:si_unique_call 137} sdv_42 := sdv_IsListEmpty(0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_42 != 0;
    bContinue := 0;
    goto L30;

  L30:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} PacketArrayCount_1 != 0;
    call {:si_unique_call 138} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 139} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    Tmp_66 := strConst__li2bpl19;
    call {:si_unique_call 140} DebugPrint(3, 128, Tmp_66);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    call {:si_unique_call 141} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 142} NICServiceIndicateStatusIrp(FdoData_10);
    goto L108;

  L108:
    call {:si_unique_call 143} NICServiceReadIrps(FdoData_10, PacketArray_1, PacketArrayCount_1);
    call {:si_unique_call 144} sdv_KeAcquireSpinLockAtDpcLevel(0);
    Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 145} pMpRfd_2, Tmp_70, Index := NICHandleRecvInterrupt_loop_L115(pMpRfd_2, Tmp_70, PacketFreeCount, PacketFreeArray, Index, FdoData_10);
    goto L115_last;

  L115_last:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} PacketFreeCount > Index;
    Tmp_70 := Index;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 146} NICReturnRFD(FdoData_10, pMpRfd_2);
    Index := Index + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    assume false;
    return;

  anon44_Then:
    assume {:partition} Index >= PacketFreeCount;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    assume false;
    return;

  anon43_Then:
    call {:si_unique_call 147} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon38_Then:
    assume {:partition} PacketArrayCount_1 == 0;
    goto L25;

  L25:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} bAllocNewRfd != 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    call {:si_unique_call 148} vslice_dummy_var_23 := PciDrvIoIncrement(FdoData_10);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    call {:si_unique_call 149} status_9 := PciDrvQueuePassiveLevelCallback(FdoData_10, li2bplFunctionConstant3726, 0, 0);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_9 < 0;
    call {:si_unique_call 150} vslice_dummy_var_24 := PciDrvIoDecrement(FdoData_10);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto L122;

  L122:
    Tmp_72 := strConst__li2bpl20;
    call {:si_unique_call 151} DebugPrint(5, 128, Tmp_72);
    return;

  anon47_Then:
    assume {:partition} 0 <= status_9;
    goto L122;

  anon46_Then:
    goto L122;

  anon45_Then:
    goto L122;

  anon35_Then:
    assume {:partition} bAllocNewRfd == 0;
    goto L122;

  anon39_Then:
    assume {:partition} sdv_42 == 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    Tmp_74 := RecvList__FDO_DATA(FdoData_10);
    assume {:nonnull} Tmp_74 != 0;
    assume Tmp_74 > 0;
    havoc pMpRfd_2;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    havoc pHwRfd_1;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    havoc PacketStatus;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(PacketStatus, 32768) != 0;
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    havoc Tmp_68;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Tmp_68 == 49152;
    call {:si_unique_call 152} vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(PacketStatus, 8192) != 0;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 153} NICReturnRFD(FdoData_10, pMpRfd_2);
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} pHwRfd_1 != 0;
    assume pHwRfd_1 > 0;
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    call {:si_unique_call 154} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    goto L70;

  L70:
    Tmp_67 := PacketArrayCount_1;
    assume {:nonnull} PacketArray_1 != 0;
    assume PacketArray_1 > 0;
    PacketArrayCount_1 := PacketArrayCount_1 + 1;
    call {:si_unique_call 155} vslice_dummy_var_25 := PciDrvIoIncrement(FdoData_10);
    goto L70_dummy;

  L70_dummy:
    assume false;
    return;

  anon42_Then:
    assume {:nonnull} pMpRfd_2 != 0;
    assume pMpRfd_2 > 0;
    Tmp_65 := PacketFreeCount;
    assume {:nonnull} PacketFreeArray != 0;
    assume PacketFreeArray > 0;
    PacketFreeCount := PacketFreeCount + 1;
    assume {:nonnull} FdoData_10 != 0;
    assume FdoData_10 > 0;
    bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 156} NICReturnRFD(FdoData_10, pMpRfd_2);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    assume false;
    return;

  anon51_Then:
    assume {:partition} BAND(PacketStatus, 8192) == 0;
    Tmp_71 := strConst__li2bpl18;
    call {:si_unique_call 157} DebugPrint(3, 128, Tmp_71);
    call {:si_unique_call 158} NICReturnRFD(FdoData_10, pMpRfd_2);
    goto anon51_Then_dummy;

  anon51_Then_dummy:
    assume false;
    return;

  anon50_Then:
    assume {:partition} Tmp_68 != 49152;
    bContinue := 0;
    goto L30;

  anon49_Then:
    assume {:partition} BAND(PacketStatus, 32768) == 0;
    bContinue := 0;
    goto L30;

  anon37_Then:
    assume {:partition} PacketArrayCount_1 >= 20;
    goto L30;

  anon36_Then:
    assume {:partition} bContinue == 0;
    goto L25;

  anon48_Then:
    assume {:partition} Tmp_73 >= LoopCount;
    goto L25;
}



procedure {:origName "NICStartRecv"} NICStartRecv(actual_FdoData_11: int) returns (Tmp_76: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} Tmp_76 == 0 || Tmp_76 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICStartRecv"} NICStartRecv(actual_FdoData_11: int) returns (Tmp_76: int)
{
  var {:scalar} Tmp_77: int;
  var {:pointer} Tmp_78: int;
  var {:pointer} Tmp_79: int;
  var {:pointer} Tmp_80: int;
  var {:scalar} sdv_48: int;
  var {:pointer} pMpRfd_3: int;
  var {:pointer} Tmp_81: int;
  var {:pointer} Tmp_82: int;
  var {:pointer} Tmp_83: int;
  var {:scalar} sdv_50: int;
  var {:pointer} Tmp_85: int;
  var {:scalar} status_10: int;
  var {:pointer} Tmp_86: int;
  var {:pointer} Tmp_87: int;
  var {:pointer} FdoData_11: int;

  anon0:
    FdoData_11 := actual_FdoData_11;
    call {:si_unique_call 159} Tmp_78 := __HAVOC_malloc(120);
    call {:si_unique_call 160} Tmp_79 := __HAVOC_malloc(76);
    call {:si_unique_call 161} Tmp_82 := __HAVOC_malloc(104);
    call {:si_unique_call 162} Tmp_83 := __HAVOC_malloc(116);
    Tmp_79 := strConst__li2bpl22;
    call {:si_unique_call 163} DebugPrint(5, 128, Tmp_79);
    assume {:nonnull} FdoData_11 != 0;
    assume FdoData_11 > 0;
    havoc Tmp_81;
    assume {:nonnull} Tmp_81 != 0;
    assume Tmp_81 > 0;
    havoc Tmp_77;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Tmp_77 == 16;
    Tmp_83 := strConst__li2bpl24;
    call {:si_unique_call 164} DebugPrint(6, 128, Tmp_83);
    Tmp_76 := 0;
    goto L1;

  L1:
    return;

  anon17_Then:
    assume {:partition} Tmp_77 != 16;
    Tmp_82 := strConst__li2bpl23;
    call {:si_unique_call 165} DebugPrint(6, 128, Tmp_82);
    assume {:nonnull} FdoData_11 != 0;
    assume FdoData_11 > 0;
    Tmp_85 := RecvList__FDO_DATA(FdoData_11);
    assume {:nonnull} Tmp_85 != 0;
    assume Tmp_85 > 0;
    havoc pMpRfd_3;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    havoc Tmp_86;
    assume {:nonnull} Tmp_86 != 0;
    assume Tmp_86 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 166} NICHandleRecvInterrupt(FdoData_11);
    assume {:nonnull} FdoData_11 != 0;
    assume FdoData_11 > 0;
    Tmp_87 := RecvList__FDO_DATA(FdoData_11);
    assume {:nonnull} Tmp_87 != 0;
    assume Tmp_87 > 0;
    havoc pMpRfd_3;
    goto L19;

  L19:
    call {:si_unique_call 167} sdv_48 := WaitScb(FdoData_11);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_48 != 0;
    assume {:nonnull} FdoData_11 != 0;
    assume FdoData_11 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    status_10 := -1073741668;
    goto L32;

  L32:
    Tmp_78 := strConst__li2bpl25;
    call {:si_unique_call 168} DebugPrint(5, 128, Tmp_78);
    Tmp_76 := status_10;
    goto L1;

  anon14_Then:
    assume {:nonnull} FdoData_11 != 0;
    assume FdoData_11 > 0;
    havoc Tmp_80;
    assume {:nonnull} Tmp_80 != 0;
    assume Tmp_80 > 0;
    assume {:nonnull} pMpRfd_3 != 0;
    assume pMpRfd_3 > 0;
    call {:si_unique_call 169} status_10 := D100IssueScbCommand(FdoData_11, 1, 0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_10 == 0;
    call {:si_unique_call 170} sdv_50 := WaitScb(FdoData_11);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_50 == 0;
    status_10 := -1073741668;
    goto L32;

  anon16_Then:
    assume {:partition} sdv_50 != 0;
    goto L32;

  anon15_Then:
    assume {:partition} status_10 != 0;
    goto L32;

  anon13_Then:
    assume {:partition} sdv_48 == 0;
    status_10 := -1073741668;
    goto L32;

  anon18_Then:
    goto L19;
}



procedure {:origName "DbgDevicePowerString"} DbgDevicePowerString(actual_Type: int) returns (Tmp_88: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "DbgDevicePowerString"} DbgDevicePowerString(actual_Type: int) returns (Tmp_88: int)
{
  var {:scalar} Type: int;

  anon0:
    Type := actual_Type;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Type != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Type != 1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Type != 2;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Type != 3;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Type != 4;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Type == 5;
    Tmp_88 := strConst__li2bpl32;
    goto L1;

  L1:
    return;

  anon14_Then:
    assume {:partition} Type != 5;
    Tmp_88 := strConst__li2bpl26;
    goto L1;

  anon15_Then:
    assume {:partition} Type == 4;
    Tmp_88 := strConst__li2bpl31;
    goto L1;

  anon16_Then:
    assume {:partition} Type == 3;
    Tmp_88 := strConst__li2bpl30;
    goto L1;

  anon17_Then:
    assume {:partition} Type == 2;
    Tmp_88 := strConst__li2bpl29;
    goto L1;

  anon18_Then:
    assume {:partition} Type == 1;
    Tmp_88 := strConst__li2bpl28;
    goto L1;

  anon13_Then:
    assume {:partition} Type == 0;
    Tmp_88 := strConst__li2bpl27;
    goto L1;
}



procedure {:origName "DbgPowerMinorFunctionString"} DbgPowerMinorFunctionString(actual_MinorFunction: int) returns (Tmp_90: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "DbgPowerMinorFunctionString"} DbgPowerMinorFunctionString(actual_MinorFunction: int) returns (Tmp_90: int)
{
  var {:scalar} MinorFunction: int;

  anon0:
    MinorFunction := actual_MinorFunction;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} MinorFunction != 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction == 3;
    Tmp_90 := strConst__li2bpl37;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} MinorFunction != 3;
    Tmp_90 := strConst__li2bpl33;
    goto L1;

  anon11_Then:
    assume {:partition} MinorFunction == 2;
    Tmp_90 := strConst__li2bpl36;
    goto L1;

  anon12_Then:
    assume {:partition} MinorFunction == 1;
    Tmp_90 := strConst__li2bpl35;
    goto L1;

  anon9_Then:
    assume {:partition} MinorFunction == 0;
    Tmp_90 := strConst__li2bpl34;
    goto L1;
}



procedure {:origName "PciDrvDispatchSetPowerState"} PciDrvDispatchSetPowerState(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_92: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_92 == 259 || Tmp_92 == 0 || Tmp_92 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchSetPowerState"} PciDrvDispatchSetPowerState(actual_DeviceObject: int, actual_Irp: int) returns (Tmp_92: int)
{
  var {:scalar} Tmp_94: int;
  var {:pointer} Tmp_95: int;
  var {:pointer} stack: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Irp: int;

  anon0:
    DeviceObject := actual_DeviceObject;
    Irp := actual_Irp;
    call {:si_unique_call 171} Tmp_95 := __HAVOC_malloc(148);
    call {:si_unique_call 172} stack := sdv_IoGetCurrentIrpStackLocation(Irp);
    Tmp_95 := strConst__li2bpl38;
    call {:si_unique_call 173} DebugPrint(5, 4, Tmp_95);
    call {:si_unique_call 174} sdv_do_paged_code_check();
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 175} Tmp_94 := PciDrvDispatchDeviceSetPower(DeviceObject, Irp);
    goto L22;

  L22:
    Tmp_92 := Tmp_94;
    return;

  anon3_Then:
    call {:si_unique_call 176} Tmp_94 := PciDrvDispatchSystemPowerIrp(DeviceObject, Irp);
    goto L22;
}



procedure {:origName "PciDrvDispatchQueryPowerState"} PciDrvDispatchQueryPowerState(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_96: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_96 == 259 || Tmp_96 == 0 || Tmp_96 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchQueryPowerState"} PciDrvDispatchQueryPowerState(actual_DeviceObject_1: int, actual_Irp_1: int) returns (Tmp_96: int)
{
  var {:scalar} Tmp_97: int;
  var {:pointer} Tmp_99: int;
  var {:pointer} stack_1: int;
  var {:pointer} DeviceObject_1: int;
  var {:pointer} Irp_1: int;

  anon0:
    DeviceObject_1 := actual_DeviceObject_1;
    Irp_1 := actual_Irp_1;
    call {:si_unique_call 177} Tmp_99 := __HAVOC_malloc(156);
    call {:si_unique_call 178} stack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    Tmp_99 := strConst__li2bpl39;
    call {:si_unique_call 179} DebugPrint(5, 4, Tmp_99);
    call {:si_unique_call 180} sdv_do_paged_code_check();
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 181} Tmp_97 := PciDrvDispatchDeviceQueryPower(DeviceObject_1, Irp_1);
    goto L22;

  L22:
    Tmp_96 := Tmp_97;
    return;

  anon3_Then:
    call {:si_unique_call 182} Tmp_97 := PciDrvDispatchSystemPowerIrp(DeviceObject_1, Irp_1);
    goto L22;
}



procedure {:origName "PciDrvDispatchPower"} PciDrvDispatchPower(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_100: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_100 == -1073741810 || Tmp_100 == 259 || Tmp_100 == 0 || Tmp_100 == -1073741670 || Tmp_100 == -1073741536 || Tmp_100 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchPower"} PciDrvDispatchPower(actual_DeviceObject_2: int, actual_Irp_2: int) returns (Tmp_100: int)
{
  var {:pointer} Tmp_101: int;
  var {:pointer} fdoData: int;
  var {:pointer} sdv_63: int;
  var {:pointer} sdv_65: int;
  var {:pointer} sdv_67: int;
  var {:scalar} status_11: int;
  var {:pointer} Tmp_103: int;
  var {:pointer} stack_2: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} Irp_2: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;

  anon0:
    DeviceObject_2 := actual_DeviceObject_2;
    Irp_2 := actual_Irp_2;
    call {:si_unique_call 183} Tmp_103 := __HAVOC_malloc(104);
    call {:si_unique_call 184} sdv_do_paged_code_check();
    call {:si_unique_call 185} stack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_2);
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc fdoData;
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    havoc vslice_dummy_var_18;
    call {:si_unique_call 186} sdv_63 := DbgDevicePowerString(vslice_dummy_var_18);
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    havoc vslice_dummy_var_19;
    call {:si_unique_call 187} sdv_65 := DbgSystemPowerString(vslice_dummy_var_19);
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_101 := strConst__li2bpl41;
    goto L23;

  L23:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    havoc vslice_dummy_var_20;
    call {:si_unique_call 188} sdv_67 := DbgPowerMinorFunctionString(vslice_dummy_var_20);
    Tmp_103 := strConst__li2bpl42;
    call {:si_unique_call 189} DebugPrint(4, 4, Tmp_103);
    call {:si_unique_call 190} vslice_dummy_var_26 := PciDrvIoIncrement(fdoData);
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 191} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_2 != 0;
    assume Irp_2 > 0;
    call {:si_unique_call 192} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 193} vslice_dummy_var_27 := PciDrvIoDecrement(fdoData);
    Tmp_100 := -1073741810;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} fdoData != 0;
    assume fdoData > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 194} PoStartNextPowerIrp(0);
    call {:si_unique_call 195} sdv_IoSkipCurrentIrpStackLocation(Irp_2);
    call {:si_unique_call 196} status_11 := PoCallDriver(0, Irp_2);
    call {:si_unique_call 197} vslice_dummy_var_28 := PciDrvIoDecrement(fdoData);
    Tmp_100 := status_11;
    goto L1;

  anon20_Then:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 198} status_11 := PciDrvDispatchQueryPowerState(DeviceObject_2, Irp_2);
    goto L78;

  L78:
    Tmp_100 := status_11;
    goto L1;

  anon22_Then:
    goto L64;

  L64:
    call {:si_unique_call 199} status_11 := PciDrvDispatchPowerDefault(DeviceObject_2, Irp_2);
    call {:si_unique_call 200} vslice_dummy_var_29 := PciDrvIoDecrement(fdoData);
    goto L78;

  anon23_Then:
    call {:si_unique_call 201} status_11 := PciDrvDispatchSetPowerState(DeviceObject_2, Irp_2);
    goto L78;

  anon24_Then:
    goto L64;

  anon21_Then:
    call {:si_unique_call 202} status_11 := PciDrvDispatchWaitWake(DeviceObject_2, Irp_2);
    goto L78;

  anon19_Then:
    call {:si_unique_call 203} PoStartNextPowerIrp(0);
    call {:si_unique_call 204} sdv_IoSkipCurrentIrpStackLocation(Irp_2);
    call {:si_unique_call 205} status_11 := PoCallDriver(0, Irp_2);
    call {:si_unique_call 206} vslice_dummy_var_30 := PciDrvIoDecrement(fdoData);
    Tmp_100 := status_11;
    goto L1;

  anon17_Then:
    Tmp_101 := strConst__li2bpl40;
    goto L23;
}



procedure {:origName "DbgSystemPowerString"} DbgSystemPowerString(actual_Type_1: int) returns (Tmp_104: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "DbgSystemPowerString"} DbgSystemPowerString(actual_Type_1: int) returns (Tmp_104: int)
{
  var {:scalar} Type_1: int;

  anon0:
    Type_1 := actual_Type_1;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Type_1 != 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Type_1 != 1;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Type_1 != 2;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Type_1 != 3;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Type_1 != 4;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} Type_1 != 5;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Type_1 != 6;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} Type_1 == 7;
    Tmp_104 := strConst__li2bpl51;
    goto L1;

  L1:
    return;

  anon18_Then:
    assume {:partition} Type_1 != 7;
    Tmp_104 := strConst__li2bpl43;
    goto L1;

  anon19_Then:
    assume {:partition} Type_1 == 6;
    Tmp_104 := strConst__li2bpl50;
    goto L1;

  anon20_Then:
    assume {:partition} Type_1 == 5;
    Tmp_104 := strConst__li2bpl49;
    goto L1;

  anon21_Then:
    assume {:partition} Type_1 == 4;
    Tmp_104 := strConst__li2bpl48;
    goto L1;

  anon22_Then:
    assume {:partition} Type_1 == 3;
    Tmp_104 := strConst__li2bpl47;
    goto L1;

  anon23_Then:
    assume {:partition} Type_1 == 2;
    Tmp_104 := strConst__li2bpl46;
    goto L1;

  anon24_Then:
    assume {:partition} Type_1 == 1;
    Tmp_104 := strConst__li2bpl45;
    goto L1;

  anon17_Then:
    assume {:partition} Type_1 == 0;
    Tmp_104 := strConst__li2bpl44;
    goto L1;
}



procedure {:origName "PciDrvDispatchSystemPowerIrp"} PciDrvDispatchSystemPowerIrp(actual_DeviceObject_3: int, actual_Irp_3: int) returns (Tmp_106: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_106 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchSystemPowerIrp"} PciDrvDispatchSystemPowerIrp(actual_DeviceObject_3: int, actual_Irp_3: int) returns (Tmp_106: int)
{
  var {:pointer} Tmp_107: int;
  var {:pointer} Tmp_108: int;
  var {:pointer} sdv_73: int;
  var {:pointer} fdoData_1: int;
  var {:pointer} stack_3: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_3: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_21: int;

  anon0:
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_3 := actual_Irp_3;
    call {:si_unique_call 207} Tmp_107 := __HAVOC_malloc(132);
    call {:si_unique_call 208} Tmp_108 := __HAVOC_malloc(152);
    call {:si_unique_call 209} stack_3 := sdv_IoGetCurrentIrpStackLocation(Irp_3);
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc fdoData_1;
    Tmp_108 := strConst__li2bpl53;
    call {:si_unique_call 210} DebugPrint(5, 4, Tmp_108);
    call {:si_unique_call 211} sdv_do_paged_code_check();
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    assume {:nonnull} fdoData_1 != 0;
    assume fdoData_1 > 0;
    havoc vslice_dummy_var_21;
    call {:si_unique_call 212} sdv_73 := DbgSystemPowerString(vslice_dummy_var_21);
    Tmp_107 := strConst__li2bpl52;
    call {:si_unique_call 213} DebugPrint(4, 4, Tmp_107);
    goto L17;

  L17:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume Irp_3 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 214} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L39;

  L39:
    call {:si_unique_call 215} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 216} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_3);
    call {:si_unique_call 217} sdv_IoSetCompletionRoutine(Irp_3, li2bplFunctionConstant6704, 0, 1, 1, 1);
    call {:si_unique_call 218} vslice_dummy_var_31 := PoCallDriver(0, Irp_3);
    Tmp_106 := 259;
    return;

  anon6_Then:
    assume !(Irp_3 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L39;

  anon5_Then:
    goto L17;
}



procedure {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault(actual_DeviceObject_4: int, actual_Irp_4: int) returns (Tmp_110: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_110 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchPowerDefault"} PciDrvDispatchPowerDefault(actual_DeviceObject_4: int, actual_Irp_4: int) returns (Tmp_110: int)
{
  var {:scalar} status_12: int;
  var {:pointer} DeviceObject_4: int;
  var {:pointer} Irp_4: int;

  anon0:
    DeviceObject_4 := actual_DeviceObject_4;
    Irp_4 := actual_Irp_4;
    call {:si_unique_call 219} sdv_do_paged_code_check();
    call {:si_unique_call 220} PoStartNextPowerIrp(0);
    call {:si_unique_call 221} sdv_IoSkipCurrentIrpStackLocation(Irp_4);
    assume {:nonnull} DeviceObject_4 != 0;
    assume DeviceObject_4 > 0;
    call {:si_unique_call 222} status_12 := PoCallDriver(0, Irp_4);
    Tmp_110 := status_12;
    return;
}



procedure {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp(actual_DeviceObject_5: int, actual_Irp_5: int, actual_Direction: int, actual_Result: int) returns (Tmp_112: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_112 == 259 || Tmp_112 == actual_Result;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvFinalizeDevicePowerIrp"} PciDrvFinalizeDevicePowerIrp(actual_DeviceObject_5: int, actual_Irp_5: int, actual_Direction: int, actual_Result: int) returns (Tmp_112: int)
{
  var {:pointer} fdoData_3: int;
  var {:pointer} Tmp_114: int;
  var {:scalar} status_13: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_5: int;
  var {:scalar} Direction: int;
  var {:scalar} Result: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_5 := actual_Irp_5;
    Direction := actual_Direction;
    Result := actual_Result;
    call {:si_unique_call 223} Tmp_114 := __HAVOC_malloc(152);
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc fdoData_3;
    Tmp_114 := strConst__li2bpl54;
    call {:si_unique_call 224} DebugPrint(5, 4, Tmp_114);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Direction == 2;
    goto L11;

  L11:
    call {:si_unique_call 225} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    call {:si_unique_call 226} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 227} vslice_dummy_var_32 := PciDrvIoDecrement(fdoData_3);
    Tmp_112 := Result;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} Direction != 2;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Result >= 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    call {:si_unique_call 228} status_13 := PciDrvDispatchPowerDefault(DeviceObject_5, Irp_5);
    call {:si_unique_call 229} vslice_dummy_var_33 := PciDrvIoDecrement(fdoData_3);
    Tmp_112 := status_13;
    goto L1;

  anon6_Then:
    assume {:partition} 0 > Result;
    goto L11;
}



procedure {:origName "PciDrvDispatchDeviceSetPower"} PciDrvDispatchDeviceSetPower(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_115: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_115 == 259 || Tmp_115 == 0 || Tmp_115 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchDeviceSetPower"} PciDrvDispatchDeviceSetPower(actual_DeviceObject_6: int, actual_Irp_6: int) returns (Tmp_115: int)
{
  var {:pointer} Tmp_116: int;
  var {:pointer} fdoData_4: int;
  var {:scalar} status_14: int;
  var {:pointer} stack_4: int;
  var {:scalar} state: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_6: int;
  var vslice_dummy_var_34: int;

  anon0:
    call {:si_unique_call 230} state := __HAVOC_malloc(8);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_6 := actual_Irp_6;
    call {:si_unique_call 231} Tmp_116 := __HAVOC_malloc(152);
    call {:si_unique_call 232} stack_4 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    assume {:nonnull} state != 0;
    assume state > 0;
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    assume {:nonnull} state != 0;
    assume state > 0;
    assume {:nonnull} DeviceObject_6 != 0;
    assume DeviceObject_6 > 0;
    havoc fdoData_4;
    Tmp_116 := strConst__li2bpl55;
    call {:si_unique_call 233} DebugPrint(5, 4, Tmp_116);
    call {:si_unique_call 234} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_4 != 0;
    assume fdoData_4 > 0;
    assume {:nonnull} state != 0;
    assume state > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 235} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L44;

  L44:
    call {:si_unique_call 236} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 237} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_6);
    call {:si_unique_call 238} sdv_IoSetCompletionRoutine(Irp_6, li2bplFunctionConstant6711, 0, 1, 1, 1);
    call {:si_unique_call 239} vslice_dummy_var_34 := PoCallDriver(0, Irp_6);
    Tmp_115 := 259;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L44;

  anon7_Then:
    call {:si_unique_call 240} status_14 := PciDrvQueuePassiveLevelCallback(fdoData_4, li2bplFunctionConstant6710, Irp_6, 1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_14 >= 0;
    Tmp_115 := 259;
    goto L1;

  anon9_Then:
    assume {:partition} 0 > status_14;
    call {:si_unique_call 241} Tmp_115 := PciDrvFinalizeDevicePowerIrp(DeviceObject_6, Irp_6, 1, status_14);
    goto L1;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_35: int;

  anon0:
    call {:si_unique_call 242} vslice_dummy_var_35 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_7: int) returns (Tmp_120: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_120 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCanSuspendDevice"} PciDrvCanSuspendDevice(actual_DeviceObject_7: int) returns (Tmp_120: int)
{

  anon0:
    call {:si_unique_call 243} sdv_do_paged_code_check();
    Tmp_120 := 0;
    return;
}



procedure {:origName "PciDrvDispatchDeviceQueryPower"} PciDrvDispatchDeviceQueryPower(actual_DeviceObject_9: int, actual_Irp_7: int) returns (Tmp_124: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_124 == 259 || Tmp_124 == 0 || Tmp_124 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchDeviceQueryPower"} PciDrvDispatchDeviceQueryPower(actual_DeviceObject_9: int, actual_Irp_7: int) returns (Tmp_124: int)
{
  var {:scalar} deviceState: int;
  var {:pointer} Tmp_126: int;
  var {:scalar} status_16: int;
  var {:pointer} stack_5: int;
  var {:pointer} DeviceObject_9: int;
  var {:pointer} Irp_7: int;
  var vslice_dummy_var_22: int;

  anon0:
    DeviceObject_9 := actual_DeviceObject_9;
    Irp_7 := actual_Irp_7;
    call {:si_unique_call 244} Tmp_126 := __HAVOC_malloc(160);
    call {:si_unique_call 245} stack_5 := sdv_IoGetCurrentIrpStackLocation(Irp_7);
    assume {:nonnull} stack_5 != 0;
    assume stack_5 > 0;
    havoc deviceState;
    Tmp_126 := strConst__li2bpl56;
    call {:si_unique_call 246} DebugPrint(5, 4, Tmp_126);
    call {:si_unique_call 247} sdv_do_paged_code_check();
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deviceState == 1;
    status_16 := 0;
    goto L22;

  L22:
    call {:si_unique_call 248} Tmp_124 := PciDrvFinalizeDevicePowerIrp(DeviceObject_9, Irp_7, 1, status_16);
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} deviceState != 1;
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc vslice_dummy_var_22;
    call {:si_unique_call 249} status_16 := PciDrvQueuePassiveLevelCallback(vslice_dummy_var_22, li2bplFunctionConstant6708, Irp_7, 1);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_16 >= 0;
    Tmp_124 := 259;
    goto L1;

  anon6_Then:
    assume {:partition} 0 > status_16;
    goto L22;
}



procedure {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_10: int, actual_Irp_8: int) returns (Tmp_127: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_127 == -1073741810 || Tmp_127 == 259 || Tmp_127 == 0 || Tmp_127 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvSystemControl"} PciDrvSystemControl(actual_DeviceObject_10: int, actual_Irp_8: int) returns (Tmp_127: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} Tmp_129: int;
  var {:pointer} fdoData_6: int;
  var {:pointer} sdv_91: int;
  var {:scalar} status_17: int;
  var {:pointer} stack_6: int;
  var {:pointer} DeviceObject_10: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_36: int;
  var vslice_dummy_var_37: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;
  var vslice_dummy_var_25: int;

  anon0:
    call {:si_unique_call 250} disposition := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    Irp_8 := actual_Irp_8;
    call {:si_unique_call 251} Tmp_129 := __HAVOC_malloc(32);
    call {:si_unique_call 252} sdv_do_paged_code_check();
    call {:si_unique_call 253} stack_6 := sdv_IoGetCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    havoc vslice_dummy_var_23;
    call {:si_unique_call 254} sdv_91 := WMIMinorFunctionString_sdv_static_function_12(vslice_dummy_var_23);
    Tmp_129 := strConst__li2bpl57;
    call {:si_unique_call 255} DebugPrint(5, 8, Tmp_129);
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc fdoData_6;
    call {:si_unique_call 256} vslice_dummy_var_39 := PciDrvPowerUpDevice(fdoData_6, 1);
    call {:si_unique_call 257} vslice_dummy_var_36 := PciDrvIoIncrement(fdoData_6);
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    status_17 := -1073741810;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    call {:si_unique_call 258} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 259} vslice_dummy_var_37 := PciDrvIoDecrement(fdoData_6);
    Tmp_127 := status_17;
    goto L1;

  L1:
    return;

  anon11_Then:
    call {:si_unique_call 260} status_17 := WmiSystemControl(0, 0, Irp_8, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto L49;

  L49:
    call {:si_unique_call 261} sdv_IoSkipCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    havoc vslice_dummy_var_24;
    call {:si_unique_call 262} status_17 := sdv_IoCallDriver(vslice_dummy_var_24, Irp_8);
    goto L57;

  L57:
    call {:si_unique_call 263} vslice_dummy_var_38 := PciDrvIoDecrement(fdoData_6);
    Tmp_127 := status_17;
    goto L1;

  anon13_Then:
    call {:si_unique_call 264} sdv_IoSkipCurrentIrpStackLocation(Irp_8);
    assume {:nonnull} fdoData_6 != 0;
    assume fdoData_6 > 0;
    havoc vslice_dummy_var_25;
    call {:si_unique_call 265} status_17 := sdv_IoCallDriver(vslice_dummy_var_25, Irp_8);
    goto L57;

  anon14_Then:
    goto L49;

  anon15_Then:
    call {:si_unique_call 266} sdv_IoCompleteRequest(0, 0);
    goto L57;

  anon12_Then:
    goto L57;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 267} vslice_dummy_var_40 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_12: int) returns (Tmp_132: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_132 == -1073741823 || Tmp_132 == -1073741811 || Tmp_132 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvWmiDeRegistration"} PciDrvWmiDeRegistration(actual_FdoData_12: int) returns (Tmp_132: int)
{

  anon0:
    call {:si_unique_call 268} sdv_do_paged_code_check();
    call {:si_unique_call 269} Tmp_132 := IoWMIRegistrationControl(0, 2);
    return;
}



procedure {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction_1: int) returns (Tmp_134: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "WMIMinorFunctionString_sdv_static_function_12"} WMIMinorFunctionString_sdv_static_function_12(actual_MinorFunction_1: int) returns (Tmp_134: int)
{
  var {:scalar} MinorFunction_1: int;

  anon0:
    MinorFunction_1 := actual_MinorFunction_1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} MinorFunction_1 != 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} MinorFunction_1 != 1;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} MinorFunction_1 != 2;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} MinorFunction_1 != 3;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} MinorFunction_1 != 4;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} MinorFunction_1 != 5;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} MinorFunction_1 != 6;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} MinorFunction_1 != 7;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} MinorFunction_1 != 8;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} MinorFunction_1 == 9;
    Tmp_134 := strConst__li2bpl68;
    goto L1;

  L1:
    return;

  anon22_Then:
    assume {:partition} MinorFunction_1 != 9;
    Tmp_134 := strConst__li2bpl58;
    goto L1;

  anon23_Then:
    assume {:partition} MinorFunction_1 == 8;
    Tmp_134 := strConst__li2bpl67;
    goto L1;

  anon24_Then:
    assume {:partition} MinorFunction_1 == 7;
    Tmp_134 := strConst__li2bpl66;
    goto L1;

  anon25_Then:
    assume {:partition} MinorFunction_1 == 6;
    Tmp_134 := strConst__li2bpl65;
    goto L1;

  anon26_Then:
    assume {:partition} MinorFunction_1 == 5;
    Tmp_134 := strConst__li2bpl64;
    goto L1;

  anon27_Then:
    assume {:partition} MinorFunction_1 == 4;
    Tmp_134 := strConst__li2bpl63;
    goto L1;

  anon28_Then:
    assume {:partition} MinorFunction_1 == 3;
    Tmp_134 := strConst__li2bpl62;
    goto L1;

  anon29_Then:
    assume {:partition} MinorFunction_1 == 2;
    Tmp_134 := strConst__li2bpl61;
    goto L1;

  anon30_Then:
    assume {:partition} MinorFunction_1 == 1;
    Tmp_134 := strConst__li2bpl60;
    goto L1;

  anon21_Then:
    assume {:partition} MinorFunction_1 == 0;
    Tmp_134 := strConst__li2bpl59;
    goto L1;
}



procedure {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_13: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFreeAdapterMemory"} NICFreeAdapterMemory(actual_FdoData_13: int)
{
  var {:pointer} Tmp_137: int;
  var {:pointer} pMpRfd_4: int;
  var {:scalar} sdv_97: int;
  var {:pointer} sdv_98: int;
  var {:pointer} Tmp_139: int;
  var {:pointer} FdoData_13: int;
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 270} vslice_dummy_var_41 := __HAVOC_malloc(4);
    FdoData_13 := actual_FdoData_13;
    call {:si_unique_call 271} Tmp_137 := __HAVOC_malloc(104);
    call {:si_unique_call 272} Tmp_139 := __HAVOC_malloc(104);
    Tmp_137 := strConst__li2bpl69;
    call {:si_unique_call 273} DebugPrint(5, 1, Tmp_137);
    call {:si_unique_call 274} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 275} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto L11;

  L11:
    call {:si_unique_call 276} pMpRfd_4, sdv_97, sdv_98 := NICFreeAdapterMemory_loop_L11(pMpRfd_4, sdv_97, sdv_98, FdoData_13);
    goto L11_last;

  L11_last:
    call {:si_unique_call 283} sdv_97 := sdv_IsListEmpty(0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_97 != 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    call {:si_unique_call 277} ExDeleteNPagedLookasideList(0);
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto L23;

  L23:
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto L28;

  L28:
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto L33;

  L33:
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 278} ExFreePoolWithTag(0, -1001831600);
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    goto L42;

  L42:
    call {:si_unique_call 279} NICRemoveAllWakeUpPatterns(FdoData_13);
    Tmp_139 := strConst__li2bpl70;
    call {:si_unique_call 280} DebugPrint(5, 1, Tmp_139);
    return;

  anon18_Then:
    goto L42;

  anon17_Then:
    goto L33;

  anon16_Then:
    goto L28;

  anon15_Then:
    goto L23;

  anon14_Then:
    assume {:partition} sdv_97 == 0;
    assume {:nonnull} FdoData_13 != 0;
    assume FdoData_13 > 0;
    call {:si_unique_call 281} sdv_98 := RemoveHeadList(RecvList__FDO_DATA(FdoData_13));
    pMpRfd_4 := sdv_98;
    call {:si_unique_call 282} NICFreeRfd(FdoData_13, pMpRfd_4);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    assume false;
    return;

  anon13_Then:
    goto L11;
}



procedure {:origName "NICShutdown"} NICShutdown(actual_FdoData_14: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICShutdown"} NICShutdown(actual_FdoData_14: int)
{
  var {:pointer} Tmp_140: int;
  var {:pointer} Tmp_142: int;
  var {:pointer} FdoData_14: int;
  var vslice_dummy_var_42: int;

  anon0:
    call {:si_unique_call 284} vslice_dummy_var_42 := __HAVOC_malloc(4);
    FdoData_14 := actual_FdoData_14;
    call {:si_unique_call 285} Tmp_140 := __HAVOC_malloc(72);
    call {:si_unique_call 286} Tmp_142 := __HAVOC_malloc(72);
    Tmp_142 := strConst__li2bpl71;
    call {:si_unique_call 287} DebugPrint(4, 1, Tmp_142);
    assume {:nonnull} FdoData_14 != 0;
    assume FdoData_14 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 288} NICDisableInterrupt(FdoData_14);
    call {:si_unique_call 289} NICIssueFullReset(FdoData_14);
    call {:si_unique_call 290} ResetPhy(FdoData_14);
    goto L7;

  L7:
    Tmp_140 := strConst__li2bpl72;
    call {:si_unique_call 291} DebugPrint(4, 1, Tmp_140);
    return;

  anon3_Then:
    goto L7;
}



procedure {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_15: int) returns (Tmp_144: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_144 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICUnmapHWResources"} NICUnmapHWResources(actual_FdoData_15: int) returns (Tmp_144: int)
{
  var {:pointer} DmaAdapterObject: int;
  var {:pointer} Tmp_146: int;
  var {:pointer} FdoData_15: int;
  var vslice_dummy_var_26: int;

  anon0:
    FdoData_15 := actual_FdoData_15;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc DmaAdapterObject;
    call {:si_unique_call 292} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    call {:si_unique_call 293} IoDisconnectInterrupt(0);
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto L9;

  L9:
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 294} MmUnmapIoSpace(0, 24);
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto L15;

  L15:
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    havoc vslice_dummy_var_26;
    call {:si_unique_call 295} MmUnmapIoSpace(0, vslice_dummy_var_26);
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto L20;

  L20:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} DmaAdapterObject != 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} DmaAdapterObject != 0;
    assume DmaAdapterObject > 0;
    havoc Tmp_146;
    assume {:nonnull} Tmp_146 != 0;
    assume Tmp_146 > 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    assume {:nonnull} FdoData_15 != 0;
    assume FdoData_15 > 0;
    goto L25;

  L25:
    Tmp_144 := 0;
    return;

  anon15_Then:
    goto L25;

  anon14_Then:
    assume {:partition} DmaAdapterObject == 0;
    goto L25;

  anon13_Then:
    goto L20;

  anon12_Then:
    goto L15;

  anon11_Then:
    goto L9;
}



procedure {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_16: int) returns (Tmp_147: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_147 == 0 || Tmp_147 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "HwSetupIAAddress"} HwSetupIAAddress(actual_FdoData_16: int) returns (Tmp_147: int)
{
  var {:scalar} i_1: int;
  var {:scalar} Tmp_148: int;
  var {:pointer} Tmp_150: int;
  var {:pointer} Tmp_151: int;
  var {:pointer} Tmp_152: int;
  var {:pointer} NonTxCmdBlockHdr: int;
  var {:scalar} Tmp_153: int;
  var {:pointer} Tmp_154: int;
  var {:pointer} Tmp_155: int;
  var {:scalar} status_18: int;
  var {:pointer} Tmp_156: int;
  var {:pointer} FdoData_16: int;

  anon0:
    FdoData_16 := actual_FdoData_16;
    call {:si_unique_call 296} Tmp_150 := __HAVOC_malloc(88);
    call {:si_unique_call 297} Tmp_151 := __HAVOC_malloc(132);
    call {:si_unique_call 298} Tmp_152 := __HAVOC_malloc(24);
    call {:si_unique_call 299} Tmp_155 := __HAVOC_malloc(24);
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    havoc NonTxCmdBlockHdr;
    Tmp_150 := strConst__li2bpl74;
    call {:si_unique_call 300} DebugPrint(5, 4096, Tmp_150);
    call {:si_unique_call 301} sdv_do_paged_code_check();
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    assume {:nonnull} NonTxCmdBlockHdr != 0;
    assume NonTxCmdBlockHdr > 0;
    i_1 := 0;
    goto L17;

  L17:
    call {:si_unique_call 302} i_1, Tmp_148, Tmp_152, Tmp_153, Tmp_154, Tmp_155 := HwSetupIAAddress_loop_L17(i_1, Tmp_148, Tmp_152, Tmp_153, Tmp_154, Tmp_155, FdoData_16);
    goto L17_last;

  L17_last:
    assume {:CounterLoop 6} {:Counter "i_1"} true;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 6 > i_1;
    Tmp_148 := i_1;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    havoc Tmp_154;
    assume {:nonnull} Tmp_154 != 0;
    assume Tmp_154 > 0;
    havoc Tmp_152;
    Tmp_153 := i_1;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    havoc Tmp_155;
    assume {:nonnull} Tmp_152 != 0;
    assume Tmp_152 > 0;
    assume {:nonnull} Tmp_155 != 0;
    assume Tmp_155 > 0;
    i_1 := i_1 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    assume false;
    return;

  anon3_Then:
    assume {:partition} i_1 >= 6;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    havoc Tmp_156;
    assume {:nonnull} FdoData_16 != 0;
    assume FdoData_16 > 0;
    assume {:nonnull} Tmp_156 != 0;
    assume Tmp_156 > 0;
    call {:si_unique_call 303} status_18 := D100SubmitCommandBlockAndWait(FdoData_16);
    Tmp_151 := strConst__li2bpl73;
    call {:si_unique_call 304} DebugPrint(5, 4096, Tmp_151);
    Tmp_147 := status_18;
    return;
}



procedure {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_17: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "HwSoftwareReset"} HwSoftwareReset(actual_FdoData_17: int)
{
  var {:pointer} Tmp_158: int;
  var {:pointer} Tmp_160: int;
  var {:pointer} Tmp_161: int;
  var {:pointer} FdoData_17: int;
  var vslice_dummy_var_43: int;

  anon0:
    call {:si_unique_call 305} vslice_dummy_var_43 := __HAVOC_malloc(4);
    FdoData_17 := actual_FdoData_17;
    call {:si_unique_call 306} Tmp_158 := __HAVOC_malloc(84);
    call {:si_unique_call 307} Tmp_160 := __HAVOC_malloc(84);
    Tmp_158 := strConst__li2bpl75;
    call {:si_unique_call 308} DebugPrint(5, 4096, Tmp_158);
    assume {:nonnull} FdoData_17 != 0;
    assume FdoData_17 > 0;
    havoc Tmp_161;
    assume {:nonnull} Tmp_161 != 0;
    assume Tmp_161 > 0;
    call {:si_unique_call 309} NICDisableInterrupt(FdoData_17);
    Tmp_160 := strConst__li2bpl76;
    call {:si_unique_call 310} DebugPrint(5, 4096, Tmp_160);
    return;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 311} vslice_dummy_var_44 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "HwConfigure"} HwConfigure(actual_FdoData_18: int) returns (Tmp_164: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_164 == 0 || Tmp_164 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "HwConfigure"} HwConfigure(actual_FdoData_18: int) returns (Tmp_164: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_165: int;
  var {:pointer} Tmp_166: int;
  var {:pointer} Tmp_167: int;
  var {:pointer} Tmp_168: int;
  var {:pointer} Tmp_169: int;
  var {:pointer} Tmp_170: int;
  var {:pointer} Tmp_171: int;
  var {:pointer} Tmp_172: int;
  var {:pointer} Tmp_173: int;
  var {:pointer} Tmp_174: int;
  var {:pointer} Tmp_175: int;
  var {:pointer} Tmp_176: int;
  var {:pointer} Tmp_177: int;
  var {:pointer} Tmp_178: int;
  var {:pointer} Tmp_179: int;
  var {:pointer} Tmp_180: int;
  var {:pointer} Tmp_181: int;
  var {:pointer} Tmp_182: int;
  var {:pointer} Tmp_183: int;
  var {:scalar} sdv_100: int;
  var {:pointer} Tmp_184: int;
  var {:pointer} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:pointer} Tmp_188: int;
  var {:pointer} Tmp_189: int;
  var {:pointer} Tmp_190: int;
  var {:pointer} Tmp_191: int;
  var {:pointer} Tmp_192: int;
  var {:pointer} Tmp_193: int;
  var {:pointer} Tmp_194: int;
  var {:pointer} Tmp_195: int;
  var {:pointer} Tmp_196: int;
  var {:pointer} Tmp_197: int;
  var {:pointer} Tmp_198: int;
  var {:pointer} Tmp_199: int;
  var {:pointer} NonTxCmdBlockHdr_1: int;
  var {:pointer} Tmp_201: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:pointer} Tmp_204: int;
  var {:pointer} Tmp_205: int;
  var {:pointer} Tmp_206: int;
  var {:pointer} Tmp_207: int;
  var {:pointer} Tmp_208: int;
  var {:pointer} Tmp_209: int;
  var {:pointer} Tmp_210: int;
  var {:pointer} Tmp_211: int;
  var {:pointer} Tmp_212: int;
  var {:pointer} Tmp_213: int;
  var {:pointer} Tmp_214: int;
  var {:pointer} Tmp_215: int;
  var {:pointer} Tmp_216: int;
  var {:scalar} Tmp_217: int;
  var {:scalar} Tmp_218: int;
  var {:pointer} Tmp_219: int;
  var {:pointer} Tmp_220: int;
  var {:pointer} Tmp_221: int;
  var {:pointer} Tmp_222: int;
  var {:pointer} Tmp_223: int;
  var {:pointer} Tmp_224: int;
  var {:pointer} Tmp_225: int;
  var {:pointer} Tmp_226: int;
  var {:pointer} Tmp_227: int;
  var {:pointer} Tmp_228: int;
  var {:pointer} Tmp_229: int;
  var {:scalar} status_19: int;
  var {:pointer} Tmp_230: int;
  var {:pointer} Tmp_231: int;
  var {:pointer} Tmp_232: int;
  var {:pointer} Tmp_233: int;
  var {:pointer} Tmp_234: int;
  var {:pointer} Tmp_235: int;
  var {:pointer} Tmp_236: int;
  var {:pointer} Tmp_237: int;
  var {:pointer} FdoData_18: int;
  var boogieTmp: int;

  anon0:
    FdoData_18 := actual_FdoData_18;
    call {:si_unique_call 312} Tmp_165 := __HAVOC_malloc(88);
    call {:si_unique_call 313} Tmp_166 := __HAVOC_malloc(88);
    call {:si_unique_call 314} Tmp_169 := __HAVOC_malloc(88);
    call {:si_unique_call 315} Tmp_175 := __HAVOC_malloc(88);
    call {:si_unique_call 316} Tmp_177 := __HAVOC_malloc(88);
    call {:si_unique_call 317} Tmp_179 := __HAVOC_malloc(88);
    call {:si_unique_call 318} Tmp_180 := __HAVOC_malloc(88);
    call {:si_unique_call 319} Tmp_181 := __HAVOC_malloc(88);
    call {:si_unique_call 320} Tmp_187 := __HAVOC_malloc(88);
    call {:si_unique_call 321} Tmp_189 := __HAVOC_malloc(88);
    call {:si_unique_call 322} Tmp_190 := __HAVOC_malloc(88);
    call {:si_unique_call 323} Tmp_191 := __HAVOC_malloc(88);
    call {:si_unique_call 324} Tmp_194 := __HAVOC_malloc(112);
    call {:si_unique_call 325} Tmp_196 := __HAVOC_malloc(88);
    call {:si_unique_call 326} Tmp_197 := __HAVOC_malloc(88);
    call {:si_unique_call 327} Tmp_198 := __HAVOC_malloc(88);
    call {:si_unique_call 328} Tmp_199 := __HAVOC_malloc(88);
    call {:si_unique_call 329} Tmp_201 := __HAVOC_malloc(104);
    call {:si_unique_call 330} Tmp_203 := __HAVOC_malloc(88);
    call {:si_unique_call 331} Tmp_205 := __HAVOC_malloc(88);
    call {:si_unique_call 332} Tmp_206 := __HAVOC_malloc(88);
    call {:si_unique_call 333} Tmp_208 := __HAVOC_malloc(88);
    call {:si_unique_call 334} Tmp_209 := __HAVOC_malloc(88);
    call {:si_unique_call 335} Tmp_210 := __HAVOC_malloc(68);
    call {:si_unique_call 336} Tmp_211 := __HAVOC_malloc(88);
    call {:si_unique_call 337} Tmp_212 := __HAVOC_malloc(88);
    call {:si_unique_call 338} Tmp_214 := __HAVOC_malloc(88);
    call {:si_unique_call 339} Tmp_215 := __HAVOC_malloc(196);
    call {:si_unique_call 340} Tmp_216 := __HAVOC_malloc(88);
    call {:si_unique_call 341} Tmp_219 := __HAVOC_malloc(88);
    call {:si_unique_call 342} Tmp_221 := __HAVOC_malloc(88);
    call {:si_unique_call 343} Tmp_222 := __HAVOC_malloc(88);
    call {:si_unique_call 344} Tmp_227 := __HAVOC_malloc(88);
    call {:si_unique_call 345} Tmp_229 := __HAVOC_malloc(88);
    call {:si_unique_call 346} Tmp_233 := __HAVOC_malloc(120);
    call {:si_unique_call 347} Tmp_234 := __HAVOC_malloc(88);
    call {:si_unique_call 348} Tmp_236 := __HAVOC_malloc(88);
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc NonTxCmdBlockHdr_1;
    Tmp_210 := strConst__li2bpl80;
    call {:si_unique_call 349} DebugPrint(5, 4096, Tmp_210);
    call {:si_unique_call 350} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} NonTxCmdBlockHdr_1 != 0;
    assume NonTxCmdBlockHdr_1 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_184;
    assume {:nonnull} Tmp_184 != 0;
    assume Tmp_184 > 0;
    havoc Tmp_199;
    assume {:nonnull} Tmp_199 != 0;
    assume Tmp_199 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_204;
    assume {:nonnull} Tmp_204 != 0;
    assume Tmp_204 > 0;
    havoc Tmp_175;
    assume {:nonnull} Tmp_175 != 0;
    assume Tmp_175 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_224;
    assume {:nonnull} Tmp_224 != 0;
    assume Tmp_224 > 0;
    havoc Tmp_197;
    assume {:nonnull} Tmp_197 != 0;
    assume Tmp_197 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_235;
    assume {:nonnull} Tmp_235 != 0;
    assume Tmp_235 > 0;
    havoc Tmp_216;
    assume {:nonnull} Tmp_216 != 0;
    assume Tmp_216 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_183;
    assume {:nonnull} Tmp_183 != 0;
    assume Tmp_183 > 0;
    havoc Tmp_234;
    assume {:nonnull} Tmp_234 != 0;
    assume Tmp_234 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_174;
    assume {:nonnull} Tmp_174 != 0;
    assume Tmp_174 > 0;
    havoc Tmp_189;
    assume {:nonnull} Tmp_189 != 0;
    assume Tmp_189 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_185;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    havoc Tmp_227;
    assume {:nonnull} Tmp_227 != 0;
    assume Tmp_227 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_192;
    assume {:nonnull} Tmp_192 != 0;
    assume Tmp_192 > 0;
    havoc Tmp_222;
    assume {:nonnull} Tmp_222 != 0;
    assume Tmp_222 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_220;
    assume {:nonnull} Tmp_220 != 0;
    assume Tmp_220 > 0;
    havoc Tmp_212;
    assume {:nonnull} Tmp_212 != 0;
    assume Tmp_212 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_171;
    assume {:nonnull} Tmp_171 != 0;
    assume Tmp_171 > 0;
    havoc Tmp_191;
    assume {:nonnull} Tmp_191 != 0;
    assume Tmp_191 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_202;
    assume {:nonnull} Tmp_202 != 0;
    assume Tmp_202 > 0;
    havoc Tmp_190;
    assume {:nonnull} Tmp_190 != 0;
    assume Tmp_190 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_193;
    assume {:nonnull} Tmp_193 != 0;
    assume Tmp_193 > 0;
    havoc Tmp_198;
    assume {:nonnull} Tmp_198 != 0;
    assume Tmp_198 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_232;
    assume {:nonnull} Tmp_232 != 0;
    assume Tmp_232 > 0;
    havoc Tmp_206;
    assume {:nonnull} Tmp_206 != 0;
    assume Tmp_206 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_178;
    assume {:nonnull} Tmp_178 != 0;
    assume Tmp_178 > 0;
    havoc Tmp_165;
    assume {:nonnull} Tmp_165 != 0;
    assume Tmp_165 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_225;
    assume {:nonnull} Tmp_225 != 0;
    assume Tmp_225 > 0;
    havoc Tmp_196;
    assume {:nonnull} Tmp_196 != 0;
    assume Tmp_196 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_172;
    assume {:nonnull} Tmp_172 != 0;
    assume Tmp_172 > 0;
    havoc Tmp_166;
    assume {:nonnull} Tmp_166 != 0;
    assume Tmp_166 > 0;
    call {:si_unique_call 351} boogieTmp := corral_nondet();
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_230;
    assume {:nonnull} Tmp_230 != 0;
    assume Tmp_230 > 0;
    havoc Tmp_169;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_173;
    assume {:nonnull} Tmp_173 != 0;
    assume Tmp_173 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_169 != 0;
    assume Tmp_169 > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    goto L36;

  L36:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L39;

  L39:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_228;
    assume {:nonnull} Tmp_228 != 0;
    assume Tmp_228 > 0;
    havoc Tmp_205;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} Tmp_205 != 0;
    assume Tmp_205 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_186;
    assume {:nonnull} Tmp_186 != 0;
    assume Tmp_186 > 0;
    havoc Tmp_203;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} Tmp_203 != 0;
    assume Tmp_203 > 0;
    goto L41;

  L41:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_237;
    assume {:nonnull} Tmp_237 != 0;
    assume Tmp_237 > 0;
    havoc Tmp_221;
    assume {:nonnull} Tmp_221 != 0;
    assume Tmp_221 > 0;
    call {:si_unique_call 352} boogieTmp := corral_nondet();
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_182;
    assume {:nonnull} Tmp_182 != 0;
    assume Tmp_182 > 0;
    havoc Tmp_229;
    assume {:nonnull} Tmp_229 != 0;
    assume Tmp_229 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_167;
    assume {:nonnull} Tmp_167 != 0;
    assume Tmp_167 > 0;
    havoc Tmp_179;
    assume {:nonnull} Tmp_179 != 0;
    assume Tmp_179 > 0;
    goto L46;

  L46:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_170;
    assume {:nonnull} Tmp_170 != 0;
    assume Tmp_170 > 0;
    havoc Tmp_219;
    assume {:nonnull} Tmp_219 != 0;
    assume Tmp_219 > 0;
    goto L49;

  L49:
    Tmp_233 := strConst__li2bpl77;
    call {:si_unique_call 353} DebugPrint(6, 4096, Tmp_233);
    Tmp_215 := strConst__li2bpl78;
    call {:si_unique_call 354} DebugPrint(6, 4096, Tmp_215);
    i_2 := 0;
    goto L56;

  L56:
    call {:si_unique_call 355} i_2, Tmp_176, Tmp_187, Tmp_201, Tmp_217, Tmp_218 := HwConfigure_loop_L56(i_2, Tmp_176, Tmp_187, Tmp_201, Tmp_217, Tmp_218, FdoData_18);
    goto L56_last;

  L56_last:
    assume {:CounterLoop 22} {:Counter "i_2"} true;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} 22 > i_2;
    Tmp_217 := i_2;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_176;
    assume {:nonnull} Tmp_176 != 0;
    assume Tmp_176 > 0;
    havoc Tmp_187;
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    havoc Tmp_218;
    Tmp_201 := strConst__li2bpl81;
    call {:si_unique_call 356} DebugPrint(6, 4096, Tmp_201);
    i_2 := i_2 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} i_2 >= 22;
    call {:si_unique_call 357} sdv_100 := WaitScb(FdoData_18);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} sdv_100 != 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_195;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    assume {:nonnull} Tmp_195 != 0;
    assume Tmp_195 > 0;
    call {:si_unique_call 358} status_19 := D100SubmitCommandBlockAndWait(FdoData_18);
    goto L72;

  L72:
    Tmp_194 := strConst__li2bpl79;
    call {:si_unique_call 359} DebugPrint(5, 4096, Tmp_194);
    Tmp_164 := status_19;
    return;

  anon26_Then:
    assume {:partition} sdv_100 == 0;
    status_19 := -1073741668;
    goto L72;

  anon23_Then:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_207;
    assume {:nonnull} Tmp_207 != 0;
    assume Tmp_207 > 0;
    havoc Tmp_211;
    assume {:nonnull} Tmp_211 != 0;
    assume Tmp_211 > 0;
    goto L49;

  anon24_Then:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L79;

  L79:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_226;
    assume {:nonnull} Tmp_226 != 0;
    assume Tmp_226 > 0;
    havoc Tmp_180;
    assume {:nonnull} Tmp_180 != 0;
    assume Tmp_180 > 0;
    goto L49;

  anon27_Then:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_213;
    assume {:nonnull} Tmp_213 != 0;
    assume Tmp_213 > 0;
    havoc Tmp_236;
    assume {:nonnull} Tmp_236 != 0;
    assume Tmp_236 > 0;
    goto L49;

  anon28_Then:
    goto L79;

  anon30_Then:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_188;
    assume {:nonnull} Tmp_188 != 0;
    assume Tmp_188 > 0;
    havoc Tmp_214;
    assume {:nonnull} Tmp_214 != 0;
    assume Tmp_214 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_223;
    assume {:nonnull} Tmp_223 != 0;
    assume Tmp_223 > 0;
    havoc Tmp_209;
    assume {:nonnull} Tmp_209 != 0;
    assume Tmp_209 > 0;
    goto L46;

  anon21_Then:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_231;
    assume {:nonnull} Tmp_231 != 0;
    assume Tmp_231 > 0;
    havoc Tmp_177;
    assume {:nonnull} Tmp_177 != 0;
    assume Tmp_177 > 0;
    assume {:nonnull} FdoData_18 != 0;
    assume FdoData_18 > 0;
    havoc Tmp_168;
    assume {:nonnull} Tmp_168 != 0;
    assume Tmp_168 > 0;
    havoc Tmp_181;
    assume {:nonnull} Tmp_181 != 0;
    assume Tmp_181 > 0;
    goto L41;

  anon22_Then:
    goto L39;

  anon29_Then:
    goto L36;
}



procedure {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_19: int) returns (Tmp_238: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_238 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFreeDeviceResources"} NICFreeDeviceResources(actual_FdoData_19: int) returns (Tmp_238: int)
{
  var {:pointer} Tmp_239: int;
  var {:scalar} sdv_102: int;
  var {:pointer} Tmp_240: int;
  var {:scalar} oldIrql_1: int;
  var {:pointer} Tmp_241: int;
  var {:pointer} Tmp_242: int;
  var {:pointer} FdoData_19: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;

  anon0:
    FdoData_19 := actual_FdoData_19;
    call {:si_unique_call 360} Tmp_239 := __HAVOC_malloc(108);
    call {:si_unique_call 361} Tmp_240 := __HAVOC_malloc(164);
    call {:si_unique_call 362} Tmp_241 := __HAVOC_malloc(108);
    Tmp_239 := strConst__li2bpl82;
    call {:si_unique_call 363} DebugPrint(4, 1, Tmp_239);
    call {:si_unique_call 364} sdv_102 := KeCancelTimer(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_102 != 0;
    goto L15;

  L15:
    call {:si_unique_call 365} Tmp_242 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_242 != 0;
    assume Tmp_242 > 0;
    call {:si_unique_call 366} sdv_KeRaiseIrql(2, Tmp_242);
    assume {:nonnull} Tmp_242 != 0;
    assume Tmp_242 > 0;
    havoc oldIrql_1;
    call {:si_unique_call 367} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 368} NICFreeQueuedSendPackets(FdoData_19);
    call {:si_unique_call 369} NICFreeBusySendPackets(FdoData_19);
    call {:si_unique_call 370} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 371} sdv_KeLowerIrql(oldIrql_1);
    call {:si_unique_call 372} NICFreeAdapterMemory(FdoData_19);
    call {:si_unique_call 373} vslice_dummy_var_45 := NICUnmapHWResources(FdoData_19);
    Tmp_241 := strConst__li2bpl84;
    call {:si_unique_call 374} DebugPrint(4, 1, Tmp_241);
    Tmp_238 := 0;
    return;

  anon3_Then:
    assume {:partition} sdv_102 == 0;
    Tmp_240 := strConst__li2bpl83;
    call {:si_unique_call 375} DebugPrint(4, 1, Tmp_240);
    call {:si_unique_call 376} vslice_dummy_var_46 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L15;
}



procedure {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_20: int, actual_pMpRfd_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFreeRfd"} NICFreeRfd(actual_FdoData_20: int, actual_pMpRfd_5: int)
{
  var {:pointer} FdoData_20: int;
  var {:pointer} pMpRfd_5: int;
  var vslice_dummy_var_47: int;

  anon0:
    call {:si_unique_call 377} vslice_dummy_var_47 := __HAVOC_malloc(4);
    FdoData_20 := actual_FdoData_20;
    pMpRfd_5 := actual_pMpRfd_5;
    call {:si_unique_call 378} sdv_do_paged_code_check();
    call {:si_unique_call 379} IoFreeMdl(0);
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    assume {:nonnull} pMpRfd_5 != 0;
    assume pMpRfd_5 > 0;
    assume {:nonnull} pMpRfd_5 != 0;
    assume pMpRfd_5 > 0;
    assume {:nonnull} FdoData_20 != 0;
    assume FdoData_20 > 0;
    call {:si_unique_call 380} ExFreeToNPagedLookasideList(RecvLookaside__FDO_DATA(FdoData_20), pMpRfd_5);
    return;
}



procedure {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_21: int) returns (Tmp_245: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_245 == -1073741668 || Tmp_245 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICInitializeAdapter"} NICInitializeAdapter(actual_FdoData_21: int) returns (Tmp_245: int)
{
  var {:pointer} Tmp_246: int;
  var {:pointer} Tmp_247: int;
  var {:pointer} Tmp_248: int;
  var {:scalar} sdv_107: int;
  var {:pointer} Tmp_249: int;
  var {:scalar} status_21: int;
  var {:pointer} FdoData_21: int;
  var vslice_dummy_var_48: int;

  anon0:
    FdoData_21 := actual_FdoData_21;
    call {:si_unique_call 381} Tmp_247 := __HAVOC_malloc(104);
    call {:si_unique_call 382} Tmp_249 := __HAVOC_malloc(148);
    Tmp_247 := strConst__li2bpl85;
    call {:si_unique_call 383} DebugPrint(5, 1, Tmp_247);
    call {:si_unique_call 384} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    call {:si_unique_call 385} HwSoftwareReset(FdoData_21);
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    havoc Tmp_248;
    assume {:nonnull} Tmp_248 != 0;
    assume Tmp_248 > 0;
    call {:si_unique_call 386} status_21 := D100IssueScbCommand(FdoData_21, 96, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_21 != 0;
    goto L25;

  L25:
    Tmp_249 := strConst__li2bpl86;
    call {:si_unique_call 387} DebugPrint(5, 1, Tmp_249);
    Tmp_245 := status_21;
    return;

  anon11_Then:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 388} sdv_107 := WaitScb(FdoData_21);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_107 != 0;
    assume {:nonnull} FdoData_21 != 0;
    assume FdoData_21 > 0;
    havoc Tmp_246;
    assume {:nonnull} Tmp_246 != 0;
    assume Tmp_246 > 0;
    call {:si_unique_call 389} status_21 := D100IssueScbCommand(FdoData_21, 6, 0);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 390} status_21 := HwConfigure(FdoData_21);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 391} status_21 := HwSetupIAAddress(FdoData_21);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_21 == 0;
    call {:si_unique_call 392} vslice_dummy_var_48 := HwClearAllCounters(FdoData_21);
    goto L25;

  anon15_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon14_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon13_Then:
    assume {:partition} status_21 != 0;
    goto L25;

  anon12_Then:
    assume {:partition} sdv_107 == 0;
    status_21 := -1073741668;
    goto L25;
}



procedure {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_22: int) returns (Tmp_251: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_251 == -1073741668 || Tmp_251 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "HwClearAllCounters"} HwClearAllCounters(actual_FdoData_22: int) returns (Tmp_251: int)
{
  var {:scalar} counter: int;
  var {:pointer} Tmp_253: int;
  var {:pointer} Tmp_254: int;
  var {:pointer} Tmp_255: int;
  var {:pointer} Tmp_256: int;
  var {:scalar} status_22: int;
  var {:scalar} bResult: int;
  var {:pointer} FdoData_22: int;

  anon0:
    FdoData_22 := actual_FdoData_22;
    call {:si_unique_call 393} Tmp_253 := __HAVOC_malloc(96);
    call {:si_unique_call 394} Tmp_256 := __HAVOC_malloc(140);
    Tmp_253 := strConst__li2bpl87;
    call {:si_unique_call 395} DebugPrint(5, 4096, Tmp_253);
    call {:si_unique_call 396} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    havoc Tmp_255;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} Tmp_255 != 0;
    assume Tmp_255 > 0;
    call {:si_unique_call 397} status_22 := D100IssueScbCommand(FdoData_22, 64, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} status_22 != 0;
    goto L21;

  L21:
    Tmp_256 := strConst__li2bpl88;
    call {:si_unique_call 398} DebugPrint(5, 4096, Tmp_256);
    Tmp_251 := status_22;
    return;

  anon11_Then:
    assume {:partition} status_22 == 0;
    call {:si_unique_call 399} status_22 := D100IssueScbCommand(FdoData_22, 112, 1);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} status_22 == 0;
    bResult := 0;
    counter := 100000;
    goto L31;

  L31:
    call {:si_unique_call 400} counter, Tmp_254 := HwClearAllCounters_loop_L31(counter, Tmp_254, FdoData_22);
    goto L31_last;

  L31_last:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} counter != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    havoc Tmp_254;
    assume {:nonnull} Tmp_254 != 0;
    assume Tmp_254 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    counter := counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    bResult := 1;
    goto L32;

  L32:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} bResult != 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    goto L21;

  anon14_Then:
    assume {:partition} bResult == 0;
    assume {:nonnull} FdoData_22 != 0;
    assume FdoData_22 > 0;
    status_22 := -1073741668;
    goto L21;

  anon13_Then:
    assume {:partition} counter == 0;
    goto L32;

  anon12_Then:
    assume {:partition} status_22 != 0;
    goto L21;
}



procedure {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_23: int) returns (Tmp_257: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvGetWaitWakeEnableState"} PciDrvGetWaitWakeEnableState(actual_FdoData_23: int) returns (Tmp_257: int)
{
  var {:dopa} {:scalar} waitWakeEnabled: int;
  var {:pointer} Tmp_258: int;
  var {:pointer} Tmp_259: int;
  var {:pointer} Tmp_260: int;
  var {:pointer} FdoData_23: int;
  var vslice_dummy_var_49: int;

  anon0:
    call {:si_unique_call 401} waitWakeEnabled := __HAVOC_malloc(4);
    FdoData_23 := actual_FdoData_23;
    call {:si_unique_call 402} Tmp_258 := __HAVOC_malloc(96);
    call {:si_unique_call 403} Tmp_259 := __HAVOC_malloc(64);
    call {:si_unique_call 404} sdv_do_paged_code_check();
    Tmp_259 := strConst__li2bpl89;
    call {:si_unique_call 405} vslice_dummy_var_49 := PciDrvReadRegistryValue(FdoData_23, Tmp_259, waitWakeEnabled);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_260 := strConst__li2bpl91;
    goto L13;

  L13:
    Tmp_258 := strConst__li2bpl92;
    call {:si_unique_call 406} DebugPrint(5, 4, Tmp_258);
    assume {:nonnull} waitWakeEnabled != 0;
    assume waitWakeEnabled > 0;
    havoc Tmp_257;
    return;

  anon3_Then:
    Tmp_260 := strConst__li2bpl90;
    goto L13;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_50: int;

  anon0:
    call {:si_unique_call 407} vslice_dummy_var_50 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvArmForWake"} PciDrvArmForWake(actual_FdoData_24: int, actual_DeviceStateChange: int) returns (Tmp_264: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_264 == 1 || Tmp_264 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvArmForWake"} PciDrvArmForWake(actual_FdoData_24: int, actual_DeviceStateChange: int) returns (Tmp_264: int)
{
  var {:scalar} oldWakeState: int;
  var {:pointer} Tmp_265: int;
  var {:scalar} sdv_114: int;
  var {:pointer} Tmp_266: int;
  var {:scalar} powerState: int;
  var {:scalar} sdv_117: int;
  var {:scalar} sdv_119: int;
  var {:scalar} status_23: int;
  var {:scalar} Tmp_267: int;
  var {:pointer} FdoData_24: int;
  var {:scalar} DeviceStateChange: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 408} powerState := __HAVOC_malloc(8);
    FdoData_24 := actual_FdoData_24;
    DeviceStateChange := actual_DeviceStateChange;
    call {:si_unique_call 409} Tmp_265 := __HAVOC_malloc(64);
    call {:si_unique_call 410} Tmp_266 := __HAVOC_malloc(64);
    call {:si_unique_call 411} sdv_do_paged_code_check();
    call {:si_unique_call 412} sdv_114 := IsPoMgmtSupported(FdoData_24);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} sdv_114 != 0;
    Tmp_265 := strConst__li2bpl93;
    call {:si_unique_call 413} DebugPrint(5, 4, Tmp_265);
    call {:si_unique_call 414} KeEnterCriticalRegion();
    call {:si_unique_call 415} status_23 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} DeviceStateChange != 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    goto L25;

  L25:
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 416} sdv_117 := PciDrvGetWaitWakeEnableState(FdoData_24);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} sdv_117 != 0;
    oldWakeState := sdv_119;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} oldWakeState != 1;
    status_23 := 0;
    goto L42;

  L42:
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    call {:si_unique_call 417} vslice_dummy_var_51 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_24), 0, 0);
    call {:si_unique_call 418} KeLeaveCriticalRegion();
    Tmp_266 := strConst__li2bpl94;
    call {:si_unique_call 419} DebugPrint(5, 4, Tmp_266);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_23 == 259;
    Tmp_267 := 1;
    goto L54;

  L54:
    Tmp_264 := Tmp_267;
    goto L1;

  L1:
    return;

  anon19_Then:
    assume {:partition} status_23 != 259;
    Tmp_267 := 0;
    goto L54;

  anon21_Then:
    assume {:partition} oldWakeState == 1;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    call {:si_unique_call 420} KeClearEvent(WakeCompletedEvent__FDO_DATA(FdoData_24));
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} powerState != 0;
    assume powerState > 0;
    call {:si_unique_call 421} status_23 := PoRequestPowerIrp(0, 0, powerState, li2bplFunctionConstant5764, 0, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_23 < 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    assume {:nonnull} FdoData_24 != 0;
    assume FdoData_24 > 0;
    call {:si_unique_call 422} vslice_dummy_var_52 := KeSetEvent(WakeCompletedEvent__FDO_DATA(FdoData_24), 0, 0);
    goto L42;

  anon20_Then:
    assume {:partition} 0 <= status_23;
    goto L42;

  anon18_Then:
    assume {:partition} sdv_117 == 0;
    goto L27;

  L27:
    status_23 := -1073741823;
    goto L42;

  anon17_Then:
    goto L27;

  anon16_Then:
    assume {:partition} DeviceStateChange == 0;
    goto L25;

  anon15_Then:
    assume {:partition} sdv_114 == 0;
    Tmp_264 := 0;
    goto L1;
}



procedure {:origName "PciDrvDispatchWaitWake"} PciDrvDispatchWaitWake(actual_DeviceObject_11: int, actual_Irp_9: int) returns (Tmp_269: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_269 == -1073741536 || Tmp_269 == 259 || Tmp_269 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchWaitWake"} PciDrvDispatchWaitWake(actual_DeviceObject_11: int, actual_Irp_9: int) returns (Tmp_269: int)
{
  var {:scalar} oldWakeState_1: int;
  var {:pointer} fdoData_7: int;
  var {:scalar} sdv_124: int;
  var {:pointer} Tmp_271: int;
  var {:scalar} sdv_126: int;
  var {:pointer} stack_7: int;
  var {:pointer} DeviceObject_11: int;
  var {:pointer} Irp_9: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_55: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_27: int;

  anon0:
    DeviceObject_11 := actual_DeviceObject_11;
    Irp_9 := actual_Irp_9;
    call {:si_unique_call 423} Tmp_271 := __HAVOC_malloc(128);
    call {:si_unique_call 424} sdv_do_paged_code_check();
    Tmp_271 := strConst__li2bpl95;
    call {:si_unique_call 425} DebugPrint(5, 4, Tmp_271);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc fdoData_7;
    call {:si_unique_call 426} stack_7 := sdv_IoGetCurrentIrpStackLocation(Irp_9);
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L21;

  L21:
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 427} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 428} vslice_dummy_var_53 := PciDrvIoDecrement(fdoData_7);
    Tmp_269 := -1073741808;
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:nonnull} stack_7 != 0;
    assume stack_7 > 0;
    havoc vslice_dummy_var_27;
    call {:si_unique_call 429} sdv_124 := PciDrvCanWakeUpDevice(fdoData_7, vslice_dummy_var_27);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_124 != 0;
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    oldWakeState_1 := sdv_126;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} oldWakeState_1 == 3;
    assume {:nonnull} fdoData_7 != 0;
    assume fdoData_7 > 0;
    assume {:nonnull} Irp_9 != 0;
    assume Irp_9 > 0;
    call {:si_unique_call 430} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 431} vslice_dummy_var_55 := PciDrvIoDecrement(fdoData_7);
    Tmp_269 := -1073741536;
    goto L1;

  anon12_Then:
    assume {:partition} oldWakeState_1 != 3;
    call {:si_unique_call 432} vslice_dummy_var_54 := NICConfigureForWakeUp(fdoData_7, 1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume Irp_9 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 433} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L68;

  L68:
    call {:si_unique_call 434} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 435} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_9);
    call {:si_unique_call 436} sdv_IoSetCompletionRoutine(Irp_9, li2bplFunctionConstant5762, 0, 1, 1, 1);
    call {:si_unique_call 437} vslice_dummy_var_56 := PoCallDriver(0, Irp_9);
    call {:si_unique_call 438} vslice_dummy_var_57 := PciDrvIoDecrement(fdoData_7);
    Tmp_269 := 259;
    goto L1;

  anon11_Then:
    assume !(Irp_9 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L68;

  anon10_Then:
    assume {:partition} sdv_124 == 0;
    goto L21;
}



procedure {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_25: int, actual_DeviceStateChange_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDisarmWake"} PciDrvDisarmWake(actual_FdoData_25: int, actual_DeviceStateChange_1: int)
{
  var {:pointer} Tmp_272: int;
  var {:scalar} oldWakeState_2: int;
  var {:scalar} sdv_131: int;
  var {:scalar} sdv_133: int;
  var {:pointer} Tmp_275: int;
  var {:pointer} Tmp_276: int;
  var {:pointer} FdoData_25: int;
  var {:scalar} DeviceStateChange_1: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_59: int;
  var vslice_dummy_var_60: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;

  anon0:
    call {:si_unique_call 439} vslice_dummy_var_58 := __HAVOC_malloc(4);
    FdoData_25 := actual_FdoData_25;
    DeviceStateChange_1 := actual_DeviceStateChange_1;
    call {:si_unique_call 440} Tmp_272 := __HAVOC_malloc(64);
    call {:si_unique_call 441} Tmp_275 := __HAVOC_malloc(64);
    call {:si_unique_call 442} Tmp_276 := __HAVOC_malloc(76);
    call {:si_unique_call 443} sdv_do_paged_code_check();
    Tmp_272 := strConst__li2bpl96;
    call {:si_unique_call 444} DebugPrint(5, 4, Tmp_272);
    call {:si_unique_call 445} KeEnterCriticalRegion();
    call {:si_unique_call 446} vslice_dummy_var_59 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceStateChange_1 == 0;
    goto L24;

  L24:
    oldWakeState_2 := sdv_131;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} oldWakeState_2 == 4;
    Tmp_276 := strConst__li2bpl97;
    call {:si_unique_call 447} DebugPrint(5, 4, Tmp_276);
    call {:si_unique_call 448} vslice_dummy_var_61 := IoCancelIrp(0);
    oldWakeState_2 := sdv_133;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} oldWakeState_2 == 7;
    call {:si_unique_call 449} sdv_IoCompleteRequest(0, 0);
    goto L26;

  L26:
    call {:si_unique_call 450} vslice_dummy_var_60 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    call {:si_unique_call 451} vslice_dummy_var_62 := KeSetEvent(WakeDisableEnableLock__FDO_DATA(FdoData_25), 0, 0);
    call {:si_unique_call 452} KeLeaveCriticalRegion();
    Tmp_275 := strConst__li2bpl98;
    call {:si_unique_call 453} DebugPrint(5, 4, Tmp_275);
    return;

  anon9_Then:
    assume {:partition} oldWakeState_2 != 7;
    goto L26;

  anon8_Then:
    assume {:partition} oldWakeState_2 != 4;
    goto L26;

  anon7_Then:
    assume {:partition} DeviceStateChange_1 != 0;
    assume {:nonnull} FdoData_25 != 0;
    assume FdoData_25 > 0;
    goto L24;
}



procedure {:origName "PciDrvCanWakeUpDevice"} PciDrvCanWakeUpDevice(actual_FdoData_26: int, actual_PowerState_3: int) returns (Tmp_277: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCanWakeUpDevice"} PciDrvCanWakeUpDevice(actual_FdoData_26: int, actual_PowerState_3: int) returns (Tmp_277: int)
{
  var {:scalar} canWakeUp: int;
  var {:scalar} dState: int;
  var {:scalar} Tmp_279: int;
  var {:pointer} Tmp_280: int;
  var {:pointer} FdoData_26: int;
  var {:scalar} PowerState_3: int;

  anon0:
    FdoData_26 := actual_FdoData_26;
    PowerState_3 := actual_PowerState_3;
    call {:si_unique_call 454} Tmp_280 := __HAVOC_malloc(28);
    canWakeUp := 0;
    Tmp_279 := PowerState_3;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    havoc Tmp_280;
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    havoc dState;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} dState != 1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} dState != 2;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} dState != 3;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} dState == 4;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    havoc canWakeUp;
    goto L14;

  L14:
    Tmp_277 := canWakeUp;
    return;

  anon9_Then:
    assume {:partition} dState != 4;
    canWakeUp := 0;
    goto L14;

  anon10_Then:
    assume {:partition} dState == 3;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    havoc canWakeUp;
    goto L14;

  anon11_Then:
    assume {:partition} dState == 2;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    havoc canWakeUp;
    goto L14;

  anon12_Then:
    assume {:partition} dState == 1;
    assume {:nonnull} FdoData_26 != 0;
    assume FdoData_26 > 0;
    havoc canWakeUp;
    goto L14;
}



procedure {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice(actual_FdoData_27: int, actual_Wait: int) returns (Tmp_281: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_281 == 0 || Tmp_281 == 258 || Tmp_281 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvPowerUpDevice"} PciDrvPowerUpDevice(actual_FdoData_27: int, actual_Wait: int) returns (Tmp_281: int)
{
  var {:pointer} waitObjects: int;
  var {:pointer} Tmp_282: int;
  var {:scalar} sdv_136: int;
  var {:pointer} Tmp_284: int;
  var {:scalar} status_25: int;
  var {:pointer} FdoData_27: int;
  var {:scalar} Wait: int;
  var vslice_dummy_var_28: int;

  anon0:
    FdoData_27 := actual_FdoData_27;
    Wait := actual_Wait;
    call {:si_unique_call 455} waitObjects := __HAVOC_malloc(8);
    call {:si_unique_call 456} Tmp_282 := __HAVOC_malloc(112);
    call {:si_unique_call 457} Tmp_284 := __HAVOC_malloc(240);
    status_25 := 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} Wait != 0;
    Tmp_284 := strConst__li2bpl99;
    call {:si_unique_call 458} DebugPrint(5, 4, Tmp_284);
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    assume {:nonnull} waitObjects != 0;
    assume waitObjects > 0;
    call {:si_unique_call 459} status_25 := KeWaitForMultipleObjects(2, 0, 0, 0, 0, 0, 0, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_25 < 0;
    Tmp_282 := strConst__li2bpl100;
    call {:si_unique_call 460} DebugPrint(2, 4, Tmp_282);
    goto L7;

  L7:
    Tmp_281 := status_25;
    return;

  anon20_Then:
    assume {:partition} 0 <= status_25;
    goto L11;

  L11:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 461} sdv_136 := sdv_KeGetCurrentIrql();
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} sdv_136 == 2;
    call {:si_unique_call 462} status_25 := PciDrvQueuePassiveLevelCallback(FdoData_27, li2bplFunctionConstant5293, 0, 0);
    goto L7;

  anon22_Then:
    assume {:partition} sdv_136 != 2;
    assume {:nonnull} FdoData_27 != 0;
    assume FdoData_27 > 0;
    havoc vslice_dummy_var_28;
    call {:si_unique_call 463} PciDrvPowerUpDeviceCallback(vslice_dummy_var_28, 0);
    goto L7;

  anon21_Then:
    goto L7;

  anon18_Then:
    goto L7;

  anon19_Then:
    assume {:partition} Wait == 0;
    goto L7;

  anon24_Then:
    goto L11;

  anon17_Then:
    goto L7;

  anon23_Then:
    goto L7;
}



procedure {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_28: int) returns (Tmp_285: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvGetPowerSaveEnableState"} PciDrvGetPowerSaveEnableState(actual_FdoData_28: int) returns (Tmp_285: int)
{
  var {:pointer} Tmp_286: int;
  var {:pointer} Tmp_287: int;
  var {:dopa} {:scalar} savePowerEnabled: int;
  var {:pointer} Tmp_288: int;
  var {:pointer} FdoData_28: int;
  var vslice_dummy_var_63: int;

  anon0:
    call {:si_unique_call 464} savePowerEnabled := __HAVOC_malloc(4);
    FdoData_28 := actual_FdoData_28;
    call {:si_unique_call 465} Tmp_287 := __HAVOC_malloc(68);
    call {:si_unique_call 466} Tmp_288 := __HAVOC_malloc(116);
    call {:si_unique_call 467} sdv_do_paged_code_check();
    Tmp_287 := strConst__li2bpl101;
    call {:si_unique_call 468} vslice_dummy_var_63 := PciDrvReadRegistryValue(FdoData_28, Tmp_287, savePowerEnabled);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_286 := strConst__li2bpl91;
    goto L13;

  L13:
    Tmp_288 := strConst__li2bpl102;
    call {:si_unique_call 469} DebugPrint(5, 4, Tmp_288);
    assume {:nonnull} savePowerEnabled != 0;
    assume savePowerEnabled > 0;
    havoc Tmp_285;
    return;

  anon3_Then:
    Tmp_286 := strConst__li2bpl90;
    goto L13;
}



procedure {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_29: int, actual_DeviceStateChange_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDeregisterIdleDetection"} PciDrvDeregisterIdleDetection(actual_FdoData_29: int, actual_DeviceStateChange_2: int)
{
  var {:pointer} Tmp_290: int;
  var {:scalar} sdv_141: int;
  var {:pointer} Tmp_292: int;
  var {:pointer} Tmp_294: int;
  var {:pointer} FdoData_29: int;
  var {:scalar} DeviceStateChange_2: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_65: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;

  anon0:
    call {:si_unique_call 470} vslice_dummy_var_64 := __HAVOC_malloc(4);
    FdoData_29 := actual_FdoData_29;
    DeviceStateChange_2 := actual_DeviceStateChange_2;
    call {:si_unique_call 471} Tmp_290 := __HAVOC_malloc(140);
    call {:si_unique_call 472} Tmp_292 := __HAVOC_malloc(156);
    call {:si_unique_call 473} Tmp_294 := __HAVOC_malloc(140);
    call {:si_unique_call 474} sdv_do_paged_code_check();
    Tmp_294 := strConst__li2bpl103;
    call {:si_unique_call 475} DebugPrint(5, 4, Tmp_294);
    call {:si_unique_call 476} KeEnterCriticalRegion();
    Tmp_292 := strConst__li2bpl104;
    call {:si_unique_call 477} DebugPrint(5, 1024, Tmp_292);
    call {:si_unique_call 478} vslice_dummy_var_65 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 479} PciDrvUnregisterPowerStateNotification(FdoData_29);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} DeviceStateChange_2 != 0;
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 480} sdv_141 := KeCancelTimer(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_141 != 0;
    call {:si_unique_call 481} vslice_dummy_var_67 := PciDrvIoDecrement(FdoData_29);
    goto L26;

  L26:
    assume {:nonnull} FdoData_29 != 0;
    assume FdoData_29 > 0;
    call {:si_unique_call 482} vslice_dummy_var_66 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_29), 0, 0);
    call {:si_unique_call 483} KeLeaveCriticalRegion();
    Tmp_290 := strConst__li2bpl105;
    call {:si_unique_call 484} DebugPrint(5, 4, Tmp_290);
    return;

  anon9_Then:
    assume {:partition} sdv_141 == 0;
    goto L26;

  anon8_Then:
    goto L26;

  anon7_Then:
    assume {:partition} DeviceStateChange_2 == 0;
    goto L24;
}



procedure {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_30: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvSetIdleTimer"} PciDrvSetIdleTimer(actual_FdoData_30: int)
{
  var {:scalar} delay: int;
  var {:pointer} Tmp_297: int;
  var {:pointer} FdoData_30: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_70: int;

  anon0:
    call {:si_unique_call 485} delay := __HAVOC_malloc(20);
    call {:si_unique_call 486} vslice_dummy_var_68 := __HAVOC_malloc(4);
    FdoData_30 := actual_FdoData_30;
    call {:si_unique_call 487} Tmp_297 := __HAVOC_malloc(64);
    Tmp_297 := strConst__li2bpl106;
    call {:si_unique_call 488} DebugPrint(5, 4, Tmp_297);
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;

  L11:
    call {:si_unique_call 489} vslice_dummy_var_69 := PciDrvIoIncrement(FdoData_30);
    call {:si_unique_call 490} vslice_dummy_var_70 := KeSetTimer(0, delay, 0);
    return;

  anon3_Then:
    assume {:nonnull} FdoData_30 != 0;
    assume FdoData_30 > 0;
    assume {:nonnull} delay != 0;
    assume delay > 0;
    goto L11;
}



procedure {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_31: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvRegisterPowerStateNotification"} PciDrvRegisterPowerStateNotification(actual_FdoData_31: int)
{
  var {:pointer} Tmp_298: int;
  var {:scalar} callbackName: int;
  var {:pointer} Tmp_299: int;
  var {:pointer} Tmp_300: int;
  var {:scalar} status_27: int;
  var {:pointer} FdoData_31: int;
  var boogieTmp: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;
  var vslice_dummy_var_73: int;

  anon0:
    call {:si_unique_call 491} callbackName := __HAVOC_malloc(12);
    call {:si_unique_call 492} vslice_dummy_var_71 := __HAVOC_malloc(4);
    call {:si_unique_call 493} vslice_dummy_var_72 := __HAVOC_malloc(24);
    FdoData_31 := actual_FdoData_31;
    call {:si_unique_call 494} Tmp_298 := __HAVOC_malloc(84);
    call {:si_unique_call 495} Tmp_299 := __HAVOC_malloc(188);
    call {:si_unique_call 496} Tmp_300 := __HAVOC_malloc(116);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    Tmp_298 := strConst__li2bpl109;
    call {:si_unique_call 497} RtlInitUnicodeString(callbackName, Tmp_298);
    call {:si_unique_call 498} sdv_InitializeObjectAttributes(0, 0, 80, 0, 0);
    call {:si_unique_call 499} status_27 := ExCreateCallback(0, 0, 0, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_27 >= 0;
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    call {:si_unique_call 500} boogieTmp := ExRegisterCallback(0, li2bplFunctionConstant5299, 0);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_300 := strConst__li2bpl108;
    call {:si_unique_call 501} DebugPrint(2, 4, Tmp_300);
    call {:si_unique_call 502} vslice_dummy_var_73 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_31 != 0;
    assume FdoData_31 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    assume {:partition} 0 > status_27;
    Tmp_299 := strConst__li2bpl107;
    call {:si_unique_call 503} DebugPrint(2, 4, Tmp_299);
    goto L1;
}



procedure {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_32: int, actual_DeviceStateChange_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvRegisterForIdleDetection"} PciDrvRegisterForIdleDetection(actual_FdoData_32: int, actual_DeviceStateChange_3: int)
{
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_305: int;
  var {:scalar} sdv_150: int;
  var {:pointer} Tmp_307: int;
  var {:pointer} FdoData_32: int;
  var {:scalar} DeviceStateChange_3: int;
  var vslice_dummy_var_74: int;
  var vslice_dummy_var_75: int;
  var vslice_dummy_var_76: int;

  anon0:
    call {:si_unique_call 504} vslice_dummy_var_74 := __HAVOC_malloc(4);
    FdoData_32 := actual_FdoData_32;
    DeviceStateChange_3 := actual_DeviceStateChange_3;
    call {:si_unique_call 505} Tmp_303 := __HAVOC_malloc(156);
    call {:si_unique_call 506} Tmp_305 := __HAVOC_malloc(144);
    call {:si_unique_call 507} Tmp_307 := __HAVOC_malloc(144);
    call {:si_unique_call 508} sdv_do_paged_code_check();
    Tmp_305 := strConst__li2bpl110;
    call {:si_unique_call 509} DebugPrint(5, 4, Tmp_305);
    call {:si_unique_call 510} KeEnterCriticalRegion();
    Tmp_303 := strConst__li2bpl104;
    call {:si_unique_call 511} DebugPrint(5, 1024, Tmp_303);
    call {:si_unique_call 512} vslice_dummy_var_75 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    call {:si_unique_call 513} PciDrvRegisterPowerStateNotification(FdoData_32);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} DeviceStateChange_3 != 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto L24;

  L24:
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 514} sdv_150 := PciDrvGetPowerSaveEnableState(FdoData_32);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_150 != 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto L37;

  L37:
    call {:si_unique_call 515} PciDrvSetIdleTimer(FdoData_32);
    goto L26;

  L26:
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 516} vslice_dummy_var_76 := KeSetEvent(PowerSaveDisableEnableLock__FDO_DATA(FdoData_32), 0, 0);
    call {:si_unique_call 517} KeLeaveCriticalRegion();
    Tmp_307 := strConst__li2bpl111;
    call {:si_unique_call 518} DebugPrint(5, 4, Tmp_307);
    return;

  anon12_Then:
    call {:si_unique_call 519} KeInitializeTimer(0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 520} KeInitializeDpc(IdleDetectionTimerDpc__FDO_DATA(FdoData_32), li2bplFunctionConstant5286, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 521} KeInitializeEvent(IdlePowerUpCompleteEvent__FDO_DATA(FdoData_32), 0, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    call {:si_unique_call 522} KeInitializeEvent(IdlePowerDownCompleteEvent__FDO_DATA(FdoData_32), 0, 0);
    assume {:nonnull} FdoData_32 != 0;
    assume FdoData_32 > 0;
    goto L37;

  anon11_Then:
    assume {:partition} sdv_150 == 0;
    goto L26;

  anon10_Then:
    goto L26;

  anon9_Then:
    assume {:partition} DeviceStateChange_3 == 0;
    goto L24;
}



procedure {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback(actual_DeviceObject_12: int, actual_Context: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvPowerUpDeviceCallback"} PciDrvPowerUpDeviceCallback(actual_DeviceObject_12: int, actual_Context: int)
{
  var {:pointer} Tmp_308: int;
  var {:pointer} Tmp_310: int;
  var {:pointer} Tmp_311: int;
  var {:scalar} powerState_1: int;
  var {:pointer} fdoData_8: int;
  var {:scalar} status_29: int;
  var {:pointer} DeviceObject_12: int;
  var {:pointer} Context: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;

  anon0:
    call {:si_unique_call 523} powerState_1 := __HAVOC_malloc(8);
    call {:si_unique_call 524} vslice_dummy_var_77 := __HAVOC_malloc(4);
    DeviceObject_12 := actual_DeviceObject_12;
    Context := actual_Context;
    call {:si_unique_call 525} Tmp_308 := __HAVOC_malloc(132);
    call {:si_unique_call 526} Tmp_310 := __HAVOC_malloc(132);
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc fdoData_8;
    Tmp_308 := strConst__li2bpl113;
    call {:si_unique_call 527} DebugPrint(5, 4, Tmp_308);
    call {:si_unique_call 528} sdv_do_paged_code_check();
    assume {:nonnull} fdoData_8 != 0;
    assume fdoData_8 > 0;
    assume {:nonnull} fdoData_8 != 0;
    assume fdoData_8 > 0;
    call {:si_unique_call 529} KeClearEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_8));
    assume {:nonnull} powerState_1 != 0;
    assume powerState_1 > 0;
    call {:si_unique_call 530} status_29 := PoRequestPowerIrp(0, 2, powerState_1, li2bplFunctionConstant5292, 0, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_29 >= 0;
    call {:si_unique_call 531} status_29 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L28;

  L28:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Context != 0;
    Tmp_311 := Context;
    assume {:nonnull} Tmp_311 != 0;
    assume Tmp_311 > 0;
    call {:si_unique_call 532} IoFreeWorkItem(0);
    call {:si_unique_call 533} sdv_ExFreePool(0);
    goto L29;

  L29:
    Tmp_310 := strConst__li2bpl112;
    call {:si_unique_call 534} DebugPrint(5, 4, Tmp_310);
    return;

  anon6_Then:
    assume {:partition} Context == 0;
    goto L29;

  anon5_Then:
    assume {:partition} 0 > status_29;
    assume {:nonnull} fdoData_8 != 0;
    assume fdoData_8 > 0;
    assume {:nonnull} fdoData_8 != 0;
    assume fdoData_8 > 0;
    call {:si_unique_call 535} vslice_dummy_var_78 := KeSetEvent(IdlePowerUpCompleteEvent__FDO_DATA(fdoData_8), 0, 0);
    goto L28;
}



procedure {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_33: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCancelIdleDetectionTimer"} PciDrvCancelIdleDetectionTimer(actual_FdoData_33: int)
{
  var {:scalar} sdv_154: int;
  var {:pointer} FdoData_33: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 536} vslice_dummy_var_79 := __HAVOC_malloc(4);
    FdoData_33 := actual_FdoData_33;
    call {:si_unique_call 537} sdv_do_paged_code_check();
    assume {:nonnull} FdoData_33 != 0;
    assume FdoData_33 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 538} sdv_154 := KeCancelTimer(0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_154 != 0;
    call {:si_unique_call 539} vslice_dummy_var_80 := PciDrvIoDecrement(FdoData_33);
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_154 == 0;
    goto L1;

  anon5_Then:
    goto L1;
}



procedure {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_34: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvUnregisterPowerStateNotification"} PciDrvUnregisterPowerStateNotification(actual_FdoData_34: int)
{
  var {:pointer} FdoData_34: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;

  anon0:
    call {:si_unique_call 540} vslice_dummy_var_81 := __HAVOC_malloc(4);
    FdoData_34 := actual_FdoData_34;
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 541} ExUnregisterCallback(0);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    call {:si_unique_call 542} vslice_dummy_var_82 := sdv_ObDereferenceObject(0);
    assume {:nonnull} FdoData_34 != 0;
    assume FdoData_34 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto L1;

  anon5_Then:
    goto L4;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_83: int;

  anon0:
    call {:si_unique_call 543} vslice_dummy_var_83 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init15"} _sdv_init15();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init15"} _sdv_init15()
{
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 544} vslice_dummy_var_84 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_35: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFreeQueuedSendPackets"} NICFreeQueuedSendPackets(actual_FdoData_35: int)
{
  var {:pointer} pEntry: int;
  var {:pointer} Tmp_322: int;
  var {:scalar} sdv_158: int;
  var {:pointer} sdv_160: int;
  var {:pointer} irp_1: int;
  var {:pointer} Tmp_325: int;
  var {:scalar} status_30: int;
  var {:pointer} FdoData_35: int;
  var vslice_dummy_var_85: int;

  anon0:
    call {:si_unique_call 545} vslice_dummy_var_85 := __HAVOC_malloc(4);
    FdoData_35 := actual_FdoData_35;
    call {:si_unique_call 546} Tmp_322 := __HAVOC_malloc(120);
    call {:si_unique_call 547} Tmp_325 := __HAVOC_malloc(120);
    call {:si_unique_call 548} status_30 := MP_GET_STATUS_FROM_FLAGS(FdoData_35);
    Tmp_322 := strConst__li2bpl114;
    call {:si_unique_call 549} DebugPrint(5, 64, Tmp_322);
    goto L13;

  L13:
    call {:si_unique_call 550} pEntry, sdv_158, sdv_160, irp_1 := NICFreeQueuedSendPackets_loop_L13(pEntry, sdv_158, sdv_160, irp_1, status_30, FdoData_35);
    goto L13_last;

  L13_last:
    call {:si_unique_call 557} sdv_158 := sdv_IsListEmpty(0);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_158 != 0;
    Tmp_325 := strConst__li2bpl115;
    call {:si_unique_call 551} DebugPrint(5, 64, Tmp_325);
    return;

  anon3_Then:
    assume {:partition} sdv_158 == 0;
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    call {:si_unique_call 552} pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(FdoData_35));
    assume {:nonnull} FdoData_35 != 0;
    assume FdoData_35 > 0;
    call {:si_unique_call 553} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 554} sdv_160 := sdv_containing_record(pEntry, 88);
    irp_1 := sdv_160;
    call {:si_unique_call 555} NICCompleteSendRequest(FdoData_35, irp_1, status_30, 0, 1);
    call {:si_unique_call 556} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    assume false;
    return;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_86: int;

  anon0:
    call {:si_unique_call 558} vslice_dummy_var_86 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_36: int, actual_Irp_10: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICCompleteSendRequest"} NICCompleteSendRequest(actual_FdoData_36: int, actual_Irp_10: int, actual_Status: int, actual_Information: int, actual_AtDispatchLevel: int)
{
  var {:pointer} Tmp_328: int;
  var {:pointer} Tmp_329: int;
  var {:pointer} Tmp_331: int;
  var {:pointer} sglBuffer: int;
  var {:pointer} Tmp_332: int;
  var {:pointer} sgl: int;
  var {:pointer} Tmp_333: int;
  var {:pointer} Tmp_334: int;
  var {:scalar} oldIrql_2: int;
  var {:pointer} Tmp_335: int;
  var {:pointer} Tmp_336: int;
  var {:pointer} FdoData_36: int;
  var {:pointer} Irp_10: int;
  var {:scalar} Status: int;
  var {:scalar} Information: int;
  var {:scalar} AtDispatchLevel: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 559} vslice_dummy_var_87 := __HAVOC_malloc(4);
    FdoData_36 := actual_FdoData_36;
    Irp_10 := actual_Irp_10;
    Status := actual_Status;
    Information := actual_Information;
    AtDispatchLevel := actual_AtDispatchLevel;
    call {:si_unique_call 560} Tmp_328 := __HAVOC_malloc(16);
    call {:si_unique_call 561} Tmp_329 := __HAVOC_malloc(16);
    call {:si_unique_call 562} Tmp_332 := __HAVOC_malloc(16);
    call {:si_unique_call 563} Tmp_333 := __HAVOC_malloc(160);
    call {:si_unique_call 564} Tmp_334 := __HAVOC_malloc(16);
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc Tmp_334;
    assume {:nonnull} Tmp_334 != 0;
    assume Tmp_334 > 0;
    havoc sgl;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc Tmp_332;
    assume {:nonnull} Tmp_332 != 0;
    assume Tmp_332 > 0;
    havoc sglBuffer;
    oldIrql_2 := 0;
    Tmp_333 := strConst__li2bpl116;
    call {:si_unique_call 565} DebugPrint(5, 64, Tmp_333);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sgl != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} AtDispatchLevel != 0;
    goto L18;

  L18:
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    havoc Tmp_331;
    assume {:nonnull} Tmp_331 != 0;
    assume Tmp_331 > 0;
    havoc Tmp_335;
    assume {:nonnull} Tmp_335 != 0;
    assume Tmp_335 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 566} sdv_KeLowerIrql(oldIrql_2);
    goto L13;

  L13:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sglBuffer != 0;
    assume {:nonnull} FdoData_36 != 0;
    assume FdoData_36 > 0;
    call {:si_unique_call 567} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_36), sglBuffer);
    goto L25;

  L25:
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc Tmp_329;
    assume {:nonnull} Tmp_329 != 0;
    assume Tmp_329 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    havoc Tmp_328;
    assume {:nonnull} Tmp_328 != 0;
    assume Tmp_328 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    assume {:nonnull} Irp_10 != 0;
    assume Irp_10 > 0;
    call {:si_unique_call 568} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 569} vslice_dummy_var_88 := PciDrvIoDecrement(FdoData_36);
    return;

  anon10_Then:
    assume {:partition} sglBuffer == 0;
    goto L25;

  anon12_Then:
    assume {:partition} AtDispatchLevel != 0;
    goto L13;

  anon11_Then:
    assume {:partition} AtDispatchLevel == 0;
    call {:si_unique_call 570} Tmp_336 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_336 != 0;
    assume Tmp_336 > 0;
    call {:si_unique_call 571} sdv_KeRaiseIrql(2, Tmp_336);
    assume {:nonnull} Tmp_336 != 0;
    assume Tmp_336 > 0;
    havoc oldIrql_2;
    goto L18;

  anon9_Then:
    assume {:partition} sgl == 0;
    goto L13;
}



procedure {:origName "NICWrite"} NICWrite(actual_FdoData_37: int, actual_Irp_11: int) returns (Tmp_337: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_337 == -1073741661 || Tmp_337 == -1073741808 || Tmp_337 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICWrite"} NICWrite(actual_FdoData_37: int, actual_Irp_11: int) returns (Tmp_337: int)
{
  var {:pointer} Tmp_338: int;
  var {:pointer} Tmp_339: int;
  var {:pointer} sgListBuffer: int;
  var {:scalar} length_1: int;
  var {:scalar} sdv_162: int;
  var {:pointer} Tmp_340: int;
  var {:pointer} Tmp_341: int;
  var {:pointer} Tmp_342: int;
  var {:pointer} Tmp_343: int;
  var {:pointer} Tmp_344: int;
  var {:scalar} oldIrql_3: int;
  var {:scalar} sdv_165: int;
  var {:pointer} Tmp_346: int;
  var {:pointer} Tmp_347: int;
  var {:pointer} Tmp_348: int;
  var {:pointer} Tmp_349: int;
  var {:scalar} returnStatus: int;
  var {:pointer} Tmp_350: int;
  var {:pointer} Tmp_351: int;
  var {:pointer} tempMdl: int;
  var {:scalar} pageCount: int;
  var {:scalar} status_31: int;
  var {:pointer} virtualAddress: int;
  var {:pointer} Tmp_352: int;
  var {:pointer} mdl: int;
  var {:pointer} FdoData_37: int;
  var {:pointer} Irp_11: int;
  var vslice_dummy_var_89: int;

  anon0:
    FdoData_37 := actual_FdoData_37;
    Irp_11 := actual_Irp_11;
    call {:si_unique_call 572} Tmp_338 := __HAVOC_malloc(80);
    call {:si_unique_call 573} Tmp_339 := __HAVOC_malloc(16);
    call {:si_unique_call 574} Tmp_342 := __HAVOC_malloc(80);
    call {:si_unique_call 575} Tmp_343 := __HAVOC_malloc(108);
    call {:si_unique_call 576} Tmp_344 := __HAVOC_malloc(84);
    call {:si_unique_call 577} Tmp_346 := __HAVOC_malloc(16);
    call {:si_unique_call 578} Tmp_347 := __HAVOC_malloc(92);
    call {:si_unique_call 579} Tmp_348 := __HAVOC_malloc(16);
    call {:si_unique_call 580} Tmp_349 := __HAVOC_malloc(120);
    call {:si_unique_call 581} Tmp_350 := __HAVOC_malloc(116);
    call {:si_unique_call 582} Tmp_352 := __HAVOC_malloc(16);
    pageCount := 0;
    length_1 := 0;
    Tmp_338 := strConst__li2bpl123;
    call {:si_unique_call 583} DebugPrint(5, 64, Tmp_338);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_352;
    assume {:nonnull} Tmp_352 != 0;
    assume Tmp_352 > 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_348;
    assume {:nonnull} Tmp_348 != 0;
    assume Tmp_348 > 0;
    status_31 := 0;
    returnStatus := status_31;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    Tmp_344 := strConst__li2bpl117;
    call {:si_unique_call 584} DebugPrint(2, 64, Tmp_344);
    status_31 := -1073741661;
    returnStatus := status_31;
    goto L29;

  L29:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} status_31 >= 0;
    goto L33;

  L33:
    Tmp_342 := strConst__li2bpl118;
    call {:si_unique_call 585} DebugPrint(6, 64, Tmp_342);
    Tmp_337 := returnStatus;
    return;

  anon23_Then:
    assume {:partition} 0 > status_31;
    call {:si_unique_call 586} NICCompleteSendRequest(FdoData_37, Irp_11, status_31, 0, 0);
    goto L33;

  anon32_Then:
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc mdl;
    tempMdl := mdl;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} mdl != 0;
    call {:si_unique_call 587} sdv_162 := sdv_MmGetMdlByteCount(0);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} sdv_162 != 0;
    goto L46;

  L46:
    call {:si_unique_call 588} length_1, sdv_165, tempMdl, pageCount, virtualAddress := NICWrite_loop_L46(length_1, sdv_165, tempMdl, pageCount, virtualAddress);
    goto L46_last;

  L46_last:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} tempMdl != 0;
    call {:si_unique_call 589} virtualAddress := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 590} sdv_165 := sdv_MmGetMdlByteCount(0);
    length_1 := length_1 + sdv_165;
    call {:si_unique_call 591} pageCount := corral_nondet();
    assume {:nonnull} tempMdl != 0;
    assume tempMdl > 0;
    havoc tempMdl;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} tempMdl == 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 60 > length_1;
    Tmp_350 := strConst__li2bpl120;
    call {:si_unique_call 592} DebugPrint(2, 64, Tmp_350);
    returnStatus := -1073741808;
    status_31 := returnStatus;
    goto L29;

  anon26_Then:
    assume {:partition} length_1 >= 60;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} pageCount > 8;
    goto L67;

  L67:
    Tmp_349 := strConst__li2bpl121;
    call {:si_unique_call 593} DebugPrint(2, 64, Tmp_349);
    returnStatus := -1073741808;
    status_31 := returnStatus;
    goto L29;

  anon27_Then:
    assume {:partition} 8 >= pageCount;
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    call {:si_unique_call 594} Tmp_341 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    call {:si_unique_call 595} sdv_KeRaiseIrql(2, Tmp_341);
    assume {:nonnull} Tmp_341 != 0;
    assume Tmp_341 > 0;
    havoc oldIrql_3;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume Irp_11 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 596} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L118;

  L118:
    call {:si_unique_call 597} sdv_IoMarkIrpPending(0);
    returnStatus := 259;
    call {:si_unique_call 598} sgListBuffer := sdv_ExAllocateFromNPagedLookasideList(0);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} sgListBuffer != 0;
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_339;
    assume {:nonnull} Tmp_339 != 0;
    assume Tmp_339 > 0;
    call {:si_unique_call 599} vslice_dummy_var_89 := sdv_MmGetMdlVirtualAddress(0);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    havoc Tmp_351;
    assume {:nonnull} Tmp_351 != 0;
    assume Tmp_351 > 0;
    havoc Tmp_340;
    assume {:nonnull} Tmp_340 != 0;
    assume Tmp_340 > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_31 < 0;
    Tmp_343 := strConst__li2bpl122;
    call {:si_unique_call 600} DebugPrint(2, 64, Tmp_343);
    assume {:nonnull} FdoData_37 != 0;
    assume FdoData_37 > 0;
    call {:si_unique_call 601} ExFreeToNPagedLookasideList(SGListLookasideList__FDO_DATA(FdoData_37), sgListBuffer);
    assume {:nonnull} Irp_11 != 0;
    assume Irp_11 > 0;
    havoc Tmp_346;
    assume {:nonnull} Tmp_346 != 0;
    assume Tmp_346 > 0;
    goto L85;

  L85:
    call {:si_unique_call 602} sdv_KeLowerIrql(oldIrql_3);
    goto L29;

  anon31_Then:
    assume {:partition} 0 <= status_31;
    goto L85;

  anon30_Then:
    assume {:partition} sgListBuffer == 0;
    goto L85;

  anon29_Then:
    assume !(Irp_11 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L118;

  anon28_Then:
    goto L67;

  anon24_Then:
    assume {:partition} sdv_162 == 0;
    goto L39;

  L39:
    Tmp_347 := strConst__li2bpl119;
    call {:si_unique_call 603} DebugPrint(2, 64, Tmp_347);
    returnStatus := -1073741808;
    status_31 := returnStatus;
    goto L29;

  anon33_Then:
    assume {:partition} mdl == 0;
    goto L39;
}



procedure {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_38: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFreeBusySendPackets"} NICFreeBusySendPackets(actual_FdoData_38: int)
{
  var {:pointer} Tmp_355: int;
  var {:pointer} pMpTcb: int;
  var {:pointer} Tmp_356: int;
  var {:scalar} status_32: int;
  var {:scalar} Tmp_357: int;
  var {:pointer} Tmp_358: int;
  var {:pointer} FdoData_38: int;
  var vslice_dummy_var_90: int;

  anon0:
    call {:si_unique_call 604} vslice_dummy_var_90 := __HAVOC_malloc(4);
    FdoData_38 := actual_FdoData_38;
    call {:si_unique_call 605} Tmp_356 := __HAVOC_malloc(112);
    call {:si_unique_call 606} Tmp_358 := __HAVOC_malloc(112);
    call {:si_unique_call 607} status_32 := MP_GET_STATUS_FROM_FLAGS(FdoData_38);
    Tmp_358 := strConst__li2bpl124;
    call {:si_unique_call 608} DebugPrint(5, 64, Tmp_358);
    goto L12;

  L12:
    call {:si_unique_call 609} Tmp_355, pMpTcb, Tmp_357 := NICFreeBusySendPackets_loop_L12(Tmp_355, pMpTcb, status_32, Tmp_357, FdoData_38);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_38 != 0;
    assume FdoData_38 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} FdoData_38 != 0;
    assume FdoData_38 > 0;
    havoc pMpTcb;
    assume {:nonnull} pMpTcb != 0;
    assume pMpTcb > 0;
    havoc Tmp_355;
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    havoc Tmp_357;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} Tmp_357 != 3;
    call {:si_unique_call 610} MP_FREE_SEND_PACKET(FdoData_38, pMpTcb, status_32);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} Tmp_357 == 3;
    goto L13;

  L13:
    Tmp_356 := strConst__li2bpl125;
    call {:si_unique_call 611} DebugPrint(5, 64, Tmp_356);
    return;

  anon5_Then:
    goto L13;
}



procedure {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_39: int, actual_pMpTcb_1: int, actual_Status_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MP_FREE_SEND_PACKET"} MP_FREE_SEND_PACKET(actual_FdoData_39: int, actual_pMpTcb_1: int, actual_Status_1: int)
{
  var {:pointer} Irp_12: int;
  var {:pointer} Tmp_360: int;
  var {:pointer} FdoData_39: int;
  var {:pointer} pMpTcb_1: int;
  var {:scalar} Status_1: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_29: int;

  anon0:
    call {:si_unique_call 612} vslice_dummy_var_91 := __HAVOC_malloc(4);
    FdoData_39 := actual_FdoData_39;
    pMpTcb_1 := actual_pMpTcb_1;
    Status_1 := actual_Status_1;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    havoc Irp_12;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    havoc Tmp_360;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    assume {:nonnull} Tmp_360 != 0;
    assume Tmp_360 > 0;
    assume {:nonnull} FdoData_39 != 0;
    assume FdoData_39 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Irp_12 != 0;
    call {:si_unique_call 613} sdv_KeReleaseSpinLockFromDpcLevel(0);
    assume {:nonnull} pMpTcb_1 != 0;
    assume pMpTcb_1 > 0;
    havoc vslice_dummy_var_29;
    call {:si_unique_call 614} NICCompleteSendRequest(FdoData_39, Irp_12, Status_1, vslice_dummy_var_29, 1);
    call {:si_unique_call 615} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} Irp_12 == 0;
    goto L1;
}



procedure {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_40: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCancelQueuedReadIrps"} PciDrvCancelQueuedReadIrps(actual_FdoData_40: int)
{
  var {:scalar} sdv_169: int;
  var {:pointer} listEntry_1: int;
  var {:scalar} oldIrql_4: int;
  var {:pointer} sdv_171: int;
  var {:scalar} sdv_173: int;
  var {:pointer} irp_2: int;
  var {:pointer} Tmp_363: int;
  var {:pointer} FdoData_40: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_93: int;

  anon0:
    call {:si_unique_call 616} vslice_dummy_var_92 := __HAVOC_malloc(4);
    FdoData_40 := actual_FdoData_40;
    call {:si_unique_call 617} Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    call {:si_unique_call 618} sdv_KeAcquireSpinLock(0, Tmp_363);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    havoc oldIrql_4;
    goto L10;

  L10:
    call {:si_unique_call 619} sdv_169, listEntry_1, oldIrql_4, sdv_171, sdv_173, irp_2, Tmp_363, vslice_dummy_var_93 := PciDrvCancelQueuedReadIrps_loop_L10(sdv_169, listEntry_1, oldIrql_4, sdv_171, sdv_173, irp_2, Tmp_363, FdoData_40, vslice_dummy_var_93);
    goto L10_last;

  L10_last:
    call {:si_unique_call 629} sdv_169 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_169 != 0;
    call {:si_unique_call 620} sdv_KeReleaseSpinLock(0, oldIrql_4);
    return;

  anon5_Then:
    assume {:partition} sdv_169 == 0;
    assume {:nonnull} FdoData_40 != 0;
    assume FdoData_40 > 0;
    call {:si_unique_call 621} listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_40));
    call {:si_unique_call 622} sdv_171 := sdv_containing_record(listEntry_1, 88);
    irp_2 := sdv_171;
    call {:si_unique_call 623} sdv_173 := sdv_IoSetCancelRoutine(irp_2, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_173 != 0;
    call {:si_unique_call 624} sdv_KeReleaseSpinLock(0, oldIrql_4);
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    call {:si_unique_call 625} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 626} vslice_dummy_var_93 := PciDrvIoDecrement(FdoData_40);
    call {:si_unique_call 627} Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    call {:si_unique_call 628} sdv_KeAcquireSpinLock(0, Tmp_363);
    assume {:nonnull} Tmp_363 != 0;
    assume Tmp_363 > 0;
    havoc oldIrql_4;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} sdv_173 == 0;
    irp_2 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_364: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchPnp"} PciDrvDispatchPnp(actual_DeviceObject_13: int, actual_Irp_13: int) returns (Tmp_364: int)
{
  var {:pointer} sdv_185: int;
  var {:pointer} fdoData_9: int;
  var {:pointer} deviceState_1: int;
  var {:scalar} status_33: int;
  var {:pointer} Tmp_366: int;
  var {:pointer} Tmp_367: int;
  var {:pointer} Tmp_368: int;
  var {:pointer} stack_8: int;
  var {:pointer} DeviceObject_13: int;
  var {:pointer} Irp_13: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;
  var vslice_dummy_var_102: int;
  var vslice_dummy_var_103: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;

  anon0:
    DeviceObject_13 := actual_DeviceObject_13;
    Irp_13 := actual_Irp_13;
    call {:si_unique_call 630} Tmp_366 := __HAVOC_malloc(36);
    call {:si_unique_call 631} Tmp_367 := __HAVOC_malloc(160);
    call {:si_unique_call 632} Tmp_368 := __HAVOC_malloc(160);
    status_33 := 0;
    call {:si_unique_call 633} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc fdoData_9;
    call {:si_unique_call 634} stack_8 := sdv_IoGetCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    havoc vslice_dummy_var_30;
    call {:si_unique_call 635} sdv_185 := PnPMinorFunctionString(vslice_dummy_var_30);
    Tmp_366 := strConst__li2bpl126;
    call {:si_unique_call 636} DebugPrint(5, 2, Tmp_366);
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 637} vslice_dummy_var_95 := PciDrvPowerUpDevice(fdoData_9, 1);
    goto L23;

  L23:
    call {:si_unique_call 638} vslice_dummy_var_94 := PciDrvIoIncrement(fdoData_9);
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 639} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 640} vslice_dummy_var_96 := PciDrvIoDecrement(fdoData_9);
    Tmp_364 := -1073741810;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} stack_8 != 0;
    assume stack_8 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 641} PciDrvProcessQueuedRequests#1(fdoData_9);
    call {:si_unique_call 642} PciDrvCancelQueuedReadIrps(fdoData_9);
    call {:si_unique_call 643} PciDrvCancelQueuedIoctlIrps(fdoData_9);
    call {:si_unique_call 644} status_33 := IoSetDeviceInterfaceState(0, 0);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_33 >= 0;
    goto L78;

  L78:
    call {:si_unique_call 645} vslice_dummy_var_98 := PciDrvReturnResources(DeviceObject_13);
    call {:si_unique_call 646} PciDrvDisarmWake(fdoData_9, 1);
    call {:si_unique_call 647} PciDrvDeregisterIdleDetection(fdoData_9, 1);
    call {:si_unique_call 648} vslice_dummy_var_99 := PciDrvWmiDeRegistration(fdoData_9);
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 649} Tmp_364 := PciDrvForwardAndForget(fdoData_9, Irp_13);
    goto L1;

  anon54_Then:
    assume {:partition} 0 > status_33;
    Tmp_367 := strConst__li2bpl127;
    call {:si_unique_call 650} DebugPrint(2, 2, Tmp_367);
    goto L78;

  anon62_Then:
    call {:si_unique_call 651} Tmp_364 := PciDrvForwardAndForget(fdoData_9, Irp_13);
    goto L1;

  anon63_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    havoc vslice_dummy_var_31;
    call {:si_unique_call 652} vslice_dummy_var_97 := PciDrvSendIrpSynchronously(vslice_dummy_var_31, Irp_13);
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    goto L101;

  L101:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 653} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 654} vslice_dummy_var_100 := PciDrvIoDecrement(fdoData_9);
    Tmp_364 := status_33;
    goto L1;

  anon55_Then:
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    deviceState_1 := Information__IO_STATUS_BLOCK(IoStatus__IRP(Irp_13));
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} deviceState_1 != 0;
    assume {:nonnull} deviceState_1 != 0;
    assume deviceState_1 > 0;
    goto L99;

  L99:
    status_33 := 0;
    goto L101;

  anon72_Then:
    assume {:partition} deviceState_1 == 0;
    goto L99;

  anon64_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    havoc vslice_dummy_var_32;
    call {:si_unique_call 655} status_33 := PciDrvSendIrpSynchronously(vslice_dummy_var_32, Irp_13);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} status_33 >= 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 656} PciDrvProcessQueuedRequests#1(fdoData_9);
    goto L101;

  anon57_Then:
    goto L101;

  anon56_Then:
    assume {:partition} 0 > status_33;
    goto L101;

  anon65_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto L122;

  L122:
    call {:si_unique_call 657} PciDrvWithdrawIrps(fdoData_9);
    call {:si_unique_call 658} PciDrvReleaseAndWait(fdoData_9, 1, 1);
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 659} Tmp_364 := PciDrvForwardAndForget(fdoData_9, Irp_13);
    goto L1;

  anon71_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto L122;

  anon66_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 660} status_33 := PciDrvReturnResources(DeviceObject_13);
    call {:si_unique_call 661} PciDrvDisarmWake(fdoData_9, 1);
    call {:si_unique_call 662} PciDrvDeregisterIdleDetection(fdoData_9, 1);
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 663} Tmp_364 := PciDrvForwardAndForget(fdoData_9, Irp_13);
    goto L1;

  anon67_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    havoc vslice_dummy_var_33;
    call {:si_unique_call 664} status_33 := PciDrvSendIrpSynchronously(vslice_dummy_var_33, Irp_13);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_33 >= 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 665} PciDrvProcessQueuedRequests#1(fdoData_9);
    call {:si_unique_call 666} vslice_dummy_var_101 := PciDrvArmForWake(fdoData_9, 1);
    call {:si_unique_call 667} PciDrvRegisterForIdleDetection(fdoData_9, 1);
    goto L101;

  anon59_Then:
    goto L101;

  anon58_Then:
    assume {:partition} 0 > status_33;
    goto L101;

  anon68_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 668} PciDrvProcessQueuedRequests#1(fdoData_9);
    call {:si_unique_call 669} PciDrvCancelQueuedReadIrps(fdoData_9);
    call {:si_unique_call 670} PciDrvCancelQueuedIoctlIrps(fdoData_9);
    call {:si_unique_call 671} status_33 := IoSetDeviceInterfaceState(0, 0);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_33 >= 0;
    goto L185;

  L185:
    call {:si_unique_call 672} vslice_dummy_var_102 := PciDrvReturnResources(DeviceObject_13);
    call {:si_unique_call 673} vslice_dummy_var_103 := PciDrvWmiDeRegistration(fdoData_9);
    goto L166;

  L166:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    call {:si_unique_call 674} MmUnlockPagableImageSection(0);
    goto L191;

  L191:
    call {:si_unique_call 675} PciDrvReleaseAndWait(fdoData_9, 1, 0);
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 676} sdv_IoSkipCurrentIrpStackLocation(Irp_13);
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    havoc vslice_dummy_var_34;
    call {:si_unique_call 677} status_33 := sdv_IoCallDriver(vslice_dummy_var_34, Irp_13);
    call {:si_unique_call 678} IoDetachDevice(0);
    call {:si_unique_call 679} RtlFreeUnicodeString(0);
    call {:si_unique_call 680} IoDeleteDevice(0);
    Tmp_364 := status_33;
    goto L1;

  anon60_Then:
    goto L191;

  anon61_Then:
    assume {:partition} 0 > status_33;
    Tmp_368 := strConst__li2bpl127;
    call {:si_unique_call 681} DebugPrint(2, 2, Tmp_368);
    goto L185;

  anon70_Then:
    goto L166;

  anon69_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto L217;

  L217:
    call {:si_unique_call 682} PciDrvWithdrawIrps(fdoData_9);
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    call {:si_unique_call 683} PciDrvDisarmWake(fdoData_9, 1);
    call {:si_unique_call 684} PciDrvDeregisterIdleDetection(fdoData_9, 1);
    call {:si_unique_call 685} PciDrvReleaseAndWait(fdoData_9, 1, 1);
    assume {:nonnull} Irp_13 != 0;
    assume Irp_13 > 0;
    call {:si_unique_call 686} Tmp_364 := PciDrvForwardAndForget(fdoData_9, Irp_13);
    goto L1;

  anon53_Then:
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    goto L217;

  anon51_Then:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume Irp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 687} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L268;

  L268:
    call {:si_unique_call 688} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 689} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_13);
    call {:si_unique_call 690} sdv_IoSetCompletionRoutine(Irp_13, li2bplFunctionConstant7189, fdoData_9, 1, 1, 1);
    assume {:nonnull} fdoData_9 != 0;
    assume fdoData_9 > 0;
    havoc vslice_dummy_var_35;
    call {:si_unique_call 691} vslice_dummy_var_104 := sdv_IoCallDriver(vslice_dummy_var_35, Irp_13);
    Tmp_364 := 259;
    goto L1;

  anon52_Then:
    assume !(Irp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L268;

  anon49_Then:
    goto L23;
}



procedure {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_41: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvWithdrawReadIrps"} PciDrvWithdrawReadIrps(actual_FdoData_41: int)
{
  var {:pointer} Tmp_369: int;
  var {:scalar} sdv_198: int;
  var {:pointer} listEntry_2: int;
  var {:scalar} oldIrql_5: int;
  var {:pointer} sdv_200: int;
  var {:scalar} sdv_202: int;
  var {:pointer} irp_3: int;
  var {:pointer} FdoData_41: int;
  var vslice_dummy_var_105: int;
  var vslice_dummy_var_106: int;

  anon0:
    call {:si_unique_call 692} vslice_dummy_var_105 := __HAVOC_malloc(4);
    FdoData_41 := actual_FdoData_41;
    call {:si_unique_call 693} Tmp_369 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    call {:si_unique_call 694} sdv_KeAcquireSpinLock(0, Tmp_369);
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    havoc oldIrql_5;
    goto L10;

  L10:
    call {:si_unique_call 695} Tmp_369, sdv_198, listEntry_2, oldIrql_5, sdv_200, sdv_202, irp_3, vslice_dummy_var_106 := PciDrvWithdrawReadIrps_loop_L10(Tmp_369, sdv_198, listEntry_2, oldIrql_5, sdv_200, sdv_202, irp_3, FdoData_41, vslice_dummy_var_106);
    goto L10_last;

  L10_last:
    call {:si_unique_call 705} sdv_198 := sdv_IsListEmpty(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_198 != 0;
    call {:si_unique_call 696} sdv_KeReleaseSpinLock(0, oldIrql_5);
    return;

  anon5_Then:
    assume {:partition} sdv_198 == 0;
    assume {:nonnull} FdoData_41 != 0;
    assume FdoData_41 > 0;
    call {:si_unique_call 697} listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(FdoData_41));
    call {:si_unique_call 698} sdv_200 := sdv_containing_record(listEntry_2, 88);
    irp_3 := sdv_200;
    call {:si_unique_call 699} sdv_202 := sdv_IoSetCancelRoutine(irp_3, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_202 != 0;
    call {:si_unique_call 700} sdv_KeReleaseSpinLock(0, oldIrql_5);
    call {:si_unique_call 701} vslice_dummy_var_106 := PciDrvQueueRequest(FdoData_41, irp_3);
    call {:si_unique_call 702} Tmp_369 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    call {:si_unique_call 703} sdv_KeAcquireSpinLock(0, Tmp_369);
    assume {:nonnull} Tmp_369 != 0;
    assume Tmp_369 > 0;
    havoc oldIrql_5;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    assume false;
    return;

  anon6_Then:
    assume {:partition} sdv_202 == 0;
    call {:si_unique_call 704} InitializeListHead(listEntry_2);
    irp_3 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    assume false;
    return;
}



procedure {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_14: int, actual_Irp_14: int) returns (Tmp_371: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_371 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCleanup"} PciDrvCleanup(actual_DeviceObject_14: int, actual_Irp_14: int) returns (Tmp_371: int)
{
  var {:scalar} cleanupList: int;
  var {:pointer} thisEntry: int;
  var {:pointer} irpStack: int;
  var {:pointer} listHead: int;
  var {:pointer} nextEntry: int;
  var {:pointer} Tmp_372: int;
  var {:scalar} sdv_204: int;
  var {:pointer} fdoData_10: int;
  var {:scalar} oldIrql_6: int;
  var {:pointer} sdv_208: int;
  var {:scalar} sdv_211: int;
  var {:pointer} pendingIrp: int;
  var {:pointer} sdv_212: int;
  var {:pointer} Tmp_373: int;
  var {:pointer} pendingIrpStack: int;
  var {:pointer} DeviceObject_14: int;
  var {:pointer} Irp_14: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;
  var vslice_dummy_var_110: int;

  anon0:
    call {:si_unique_call 706} cleanupList := __HAVOC_malloc(8);
    DeviceObject_14 := actual_DeviceObject_14;
    Irp_14 := actual_Irp_14;
    call {:si_unique_call 707} Tmp_373 := __HAVOC_malloc(64);
    Tmp_373 := strConst__li2bpl128;
    call {:si_unique_call 708} DebugPrint(5, 16, Tmp_373);
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc fdoData_10;
    call {:si_unique_call 709} vslice_dummy_var_110 := PciDrvIoIncrement(fdoData_10);
    call {:si_unique_call 710} irpStack := sdv_IoGetCurrentIrpStackLocation(Irp_14);
    call {:si_unique_call 711} InitializeListHead(cleanupList);
    call {:si_unique_call 712} Tmp_372 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    call {:si_unique_call 713} sdv_KeAcquireSpinLock(0, Tmp_372);
    assume {:nonnull} Tmp_372 != 0;
    assume Tmp_372 > 0;
    havoc oldIrql_6;
    assume {:nonnull} fdoData_10 != 0;
    assume fdoData_10 > 0;
    listHead := NewRequestsQueue__FDO_DATA(fdoData_10);
    assume {:nonnull} listHead != 0;
    assume listHead > 0;
    havoc thisEntry;
    goto L31;

  L31:
    call {:si_unique_call 714} thisEntry, nextEntry, sdv_204, sdv_208, pendingIrp, pendingIrpStack, vslice_dummy_var_107, vslice_dummy_var_108 := PciDrvCleanup_loop_L31(cleanupList, thisEntry, irpStack, nextEntry, sdv_204, sdv_208, pendingIrp, pendingIrpStack, vslice_dummy_var_107, vslice_dummy_var_108);
    goto L31_last;

  L31_last:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} thisEntry != 0;
    assume thisEntry > 0;
    havoc nextEntry;
    call {:si_unique_call 715} sdv_208 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_208;
    call {:si_unique_call 716} pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(pendingIrp);
    assume {:nonnull} irpStack != 0;
    assume irpStack > 0;
    assume {:nonnull} pendingIrpStack != 0;
    assume pendingIrpStack > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 717} vslice_dummy_var_107 := sdv_RemoveEntryList(0);
    call {:si_unique_call 718} sdv_204 := sdv_IoSetCancelRoutine(pendingIrp, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_204 != 0;
    call {:si_unique_call 719} vslice_dummy_var_108 := sdv_InsertTailList(cleanupList, thisEntry);
    goto L45;

  L45:
    thisEntry := nextEntry;
    goto L45_dummy;

  L45_dummy:
    assume false;
    return;

  anon11_Then:
    assume {:partition} sdv_204 == 0;
    call {:si_unique_call 720} InitializeListHead(thisEntry);
    goto L45;

  anon10_Then:
    goto L45;

  anon9_Then:
    call {:si_unique_call 721} sdv_KeReleaseSpinLock(0, oldIrql_6);
    goto L59;

  L59:
    call {:si_unique_call 722} thisEntry, sdv_211, pendingIrp, sdv_212 := PciDrvCleanup_loop_L59(cleanupList, thisEntry, sdv_211, pendingIrp, sdv_212);
    goto L59_last;

  L59_last:
    call {:si_unique_call 728} sdv_211 := sdv_IsListEmpty(0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_211 != 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    call {:si_unique_call 723} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 724} vslice_dummy_var_109 := PciDrvIoDecrement(fdoData_10);
    Tmp_371 := 0;
    return;

  anon12_Then:
    assume {:partition} sdv_211 == 0;
    call {:si_unique_call 725} thisEntry := RemoveHeadList(cleanupList);
    call {:si_unique_call 726} sdv_212 := sdv_containing_record(thisEntry, 88);
    pendingIrp := sdv_212;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    assume {:nonnull} pendingIrp != 0;
    assume pendingIrp > 0;
    call {:si_unique_call 727} sdv_IoCompleteRequest(0, 0);
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    assume false;
    return;
}



procedure {:origName "_sdv_init14"} _sdv_init14();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init14"} _sdv_init14()
{
  var vslice_dummy_var_111: int;

  anon0:
    call {:si_unique_call 729} vslice_dummy_var_111 := __HAVOC_malloc(4);
    assume DebugLevel == 6;
    assume DebugFlag == 15;
    return;
}



procedure {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_376: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvSendIrpSynchronously"} PciDrvSendIrpSynchronously(actual_DeviceObject_15: int, actual_Irp_15: int) returns (Tmp_376: int)
{
  var {:scalar} status_34: int;
  var {:scalar} event: int;
  var {:pointer} DeviceObject_15: int;
  var {:pointer} Irp_15: int;

  anon0:
    call {:si_unique_call 730} event := __HAVOC_malloc(156);
    DeviceObject_15 := actual_DeviceObject_15;
    Irp_15 := actual_Irp_15;
    call {:si_unique_call 731} sdv_do_paged_code_check();
    call {:si_unique_call 732} KeInitializeEvent(event, 0, 0);
    call {:si_unique_call 733} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_15);
    call {:si_unique_call 734} sdv_IoSetCompletionRoutine(Irp_15, li2bplFunctionConstant7191, event, 1, 1, 1);
    call {:si_unique_call 735} status_34 := sdv_IoCallDriver(DeviceObject_15, Irp_15);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_34 == 259;
    call {:si_unique_call 736} status_34 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_15 != 0;
    assume Irp_15 > 0;
    havoc status_34;
    goto L22;

  L22:
    Tmp_376 := status_34;
    return;

  anon3_Then:
    assume {:partition} status_34 != 259;
    goto L22;
}



procedure {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_42: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCancelQueuedIoctlIrps"} PciDrvCancelQueuedIoctlIrps(actual_FdoData_42: int)
{
  var {:scalar} i_3: int;
  var {:scalar} sdv_215: int;
  var {:scalar} oldIrql_7: int;
  var {:pointer} irp_4: int;
  var {:pointer} Tmp_379: int;
  var {:pointer} FdoData_42: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;

  anon0:
    call {:si_unique_call 737} vslice_dummy_var_112 := __HAVOC_malloc(4);
    FdoData_42 := actual_FdoData_42;
    irp_4 := 0;
    call {:si_unique_call 738} Tmp_379 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    call {:si_unique_call 739} sdv_KeAcquireSpinLock(0, Tmp_379);
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    havoc oldIrql_7;
    i_3 := 0;
    goto L11;

  L11:
    call {:si_unique_call 740} i_3, sdv_215, oldIrql_7, irp_4, Tmp_379, vslice_dummy_var_113 := PciDrvCancelQueuedIoctlIrps_loop_L11(i_3, sdv_215, oldIrql_7, irp_4, Tmp_379, FdoData_42, vslice_dummy_var_113);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 3} {:Counter "i_3"} true;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 3 > i_3;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} i_3 != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} i_3 != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} i_3 != 2;
    goto L22;

  L22:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} irp_4 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 741} SLIC_sdv_IoSetCancelRoutine_entry(0, 0);
    goto L59;

  L59:
    call {:si_unique_call 742} sdv_215 := sdv_IoSetCancelRoutine(irp_4, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_215 != 0;
    call {:si_unique_call 743} sdv_KeReleaseSpinLock(0, oldIrql_7);
    assume {:nonnull} irp_4 != 0;
    assume irp_4 > 0;
    assume {:nonnull} irp_4 != 0;
    assume irp_4 > 0;
    call {:si_unique_call 744} sdv_IoCompleteRequest(0, 0);
    irp_4 := 0;
    call {:si_unique_call 745} Tmp_379 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    call {:si_unique_call 746} sdv_KeAcquireSpinLock(0, Tmp_379);
    assume {:nonnull} Tmp_379 != 0;
    assume Tmp_379 > 0;
    havoc oldIrql_7;
    call {:si_unique_call 747} vslice_dummy_var_113 := PciDrvIoDecrement(FdoData_42);
    goto L23;

  L23:
    i_3 := i_3 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} sdv_215 == 0;
    irp_4 := 0;
    goto L23;

  anon18_Then:
    assume !(irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L59;

  anon17_Then:
    assume {:partition} irp_4 == 0;
    goto L23;

  anon20_Then:
    assume {:partition} i_3 == 2;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_4;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon21_Then:
    assume {:partition} i_3 == 1;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_4;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} i_3 == 0;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    havoc irp_4;
    assume {:nonnull} FdoData_42 != 0;
    assume FdoData_42 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} i_3 >= 3;
    call {:si_unique_call 748} sdv_KeReleaseSpinLock(0, oldIrql_7);
    return;
}



procedure {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_43: int) returns (Tmp_383: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvIoDecrement"} PciDrvIoDecrement(actual_FdoData_43: int) returns (Tmp_383: int)
{
  var {:pointer} Tmp_384: int;
  var {:pointer} Tmp_385: int;
  var {:scalar} result_1: int;
  var {:pointer} FdoData_43: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;

  anon0:
    FdoData_43 := actual_FdoData_43;
    call {:si_unique_call 749} Tmp_385 := __HAVOC_malloc(88);
    call {:si_unique_call 750} Tmp_384 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    call {:si_unique_call 751} result_1 := sdv_InterlockedDecrement(Tmp_384);
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    assume {:nonnull} Tmp_384 != 0;
    assume Tmp_384 > 0;
    Tmp_385 := strConst__li2bpl130;
    call {:si_unique_call 752} DebugPrint(6, 1024, Tmp_385);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} result_1 == 1;
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    call {:si_unique_call 753} vslice_dummy_var_114 := KeSetEvent(StopEvent__FDO_DATA(FdoData_43), 0, 0);
    goto L12;

  L12:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} result_1 != 0;
    goto L19;

  L19:
    Tmp_383 := result_1;
    return;

  anon6_Then:
    assume {:partition} result_1 == 0;
    assume {:nonnull} FdoData_43 != 0;
    assume FdoData_43 > 0;
    call {:si_unique_call 754} vslice_dummy_var_115 := KeSetEvent(RemoveEvent__FDO_DATA(FdoData_43), 0, 0);
    goto L19;

  anon5_Then:
    assume {:partition} result_1 != 1;
    goto L12;
}



procedure {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_386: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_386 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvClose"} PciDrvClose(actual_DeviceObject_17: int, actual_Irp_17: int) returns (Tmp_386: int)
{
  var {:pointer} fdoData_12: int;
  var {:pointer} Tmp_387: int;
  var {:scalar} status_36: int;
  var {:pointer} DeviceObject_17: int;
  var {:pointer} Irp_17: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;

  anon0:
    DeviceObject_17 := actual_DeviceObject_17;
    Irp_17 := actual_Irp_17;
    call {:si_unique_call 755} Tmp_387 := __HAVOC_malloc(32);
    call {:si_unique_call 756} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_17 != 0;
    assume DeviceObject_17 > 0;
    havoc fdoData_12;
    Tmp_387 := strConst__li2bpl131;
    call {:si_unique_call 757} DebugPrint(5, 16, Tmp_387);
    call {:si_unique_call 758} vslice_dummy_var_116 := PciDrvIoIncrement(fdoData_12);
    status_36 := 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    call {:si_unique_call 759} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 760} vslice_dummy_var_117 := PciDrvIoDecrement(fdoData_12);
    Tmp_386 := status_36;
    return;
}



procedure {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_44: int, actual_Irp_18: int) returns (Tmp_389: int);
  modifies alloc, IrpPended;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} Tmp_389 == -1073741661 || Tmp_389 == -1073741808 || Tmp_389 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvWrite"} PciDrvWrite(actual_FdoData_44: int, actual_Irp_18: int) returns (Tmp_389: int)
{
  var {:pointer} FdoData_44: int;
  var {:pointer} Irp_18: int;

  anon0:
    FdoData_44 := actual_FdoData_44;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 761} Tmp_389 := NICWrite(FdoData_44, Irp_18);
    return;
}



procedure {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_45: int, actual_Irp_19: int) returns (Tmp_391: int);
  modifies alloc, IoSetCancelRoutineCalled, IrpCancelChecked, IrpPended;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1;
  free ensures {:va_keep} Tmp_391 == -1073741536 || Tmp_391 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvRead"} PciDrvRead(actual_FdoData_45: int, actual_Irp_19: int) returns (Tmp_391: int)
{
  var {:pointer} Tmp_392: int;
  var {:scalar} sdv_233: int;
  var {:scalar} oldIrql_8: int;
  var {:pointer} Tmp_393: int;
  var {:scalar} status_37: int;
  var {:pointer} Tmp_394: int;
  var {:pointer} FdoData_45: int;
  var {:pointer} Irp_19: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;

  anon0:
    FdoData_45 := actual_FdoData_45;
    Irp_19 := actual_Irp_19;
    call {:si_unique_call 762} Tmp_392 := __HAVOC_malloc(76);
    call {:si_unique_call 763} Tmp_394 := __HAVOC_malloc(80);
    Tmp_392 := strConst__li2bpl132;
    call {:si_unique_call 764} DebugPrint(5, 128, Tmp_392);
    call {:si_unique_call 765} Tmp_393 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_393 != 0;
    assume Tmp_393 > 0;
    call {:si_unique_call 766} sdv_KeAcquireSpinLock(0, Tmp_393);
    assume {:nonnull} Tmp_393 != 0;
    assume Tmp_393 > 0;
    havoc oldIrql_8;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume Irp_19 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 767} SLIC_sdv_IoSetCancelRoutine_entry(0, li2bplFunctionConstant7194);
    goto L51;

  L51:
    call {:si_unique_call 768} vslice_dummy_var_120 := sdv_IoSetCancelRoutine(Irp_19, li2bplFunctionConstant7194);
    call {:si_unique_call 769} SLIC__read_via_variable_1(0, 0);
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume Irp_19 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 770} SLIC_sdv_IoSetCancelRoutine_entry(0, 0);
    goto L54;

  L54:
    call {:si_unique_call 771} sdv_233 := sdv_IoSetCancelRoutine(Irp_19, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_233 != 0;
    status_37 := -1073741536;
    goto L23;

  L23:
    call {:si_unique_call 772} sdv_KeReleaseSpinLock(0, oldIrql_8);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_37 != 259;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    call {:si_unique_call 773} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 774} vslice_dummy_var_118 := PciDrvIoDecrement(FdoData_45);
    goto L27;

  L27:
    Tmp_394 := strConst__li2bpl133;
    call {:si_unique_call 775} DebugPrint(5, 128, Tmp_394);
    Tmp_391 := status_37;
    return;

  anon17_Then:
    assume {:partition} status_37 == 259;
    goto L27;

  anon16_Then:
    assume {:partition} sdv_233 == 0;
    goto L15;

  L15:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume Irp_19 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 776} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L57;

  L57:
    call {:si_unique_call 777} sdv_IoMarkIrpPending(0);
    assume {:nonnull} FdoData_45 != 0;
    assume FdoData_45 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    call {:si_unique_call 778} vslice_dummy_var_119 := sdv_InsertTailList(RecvQueueHead__FDO_DATA(FdoData_45), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_19))));
    status_37 := 259;
    goto L23;

  anon14_Then:
    assume !(Irp_19 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L57;

  anon15_Then:
    assume !(Irp_19 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L54;

  anon18_Then:
    goto L15;

  anon13_Then:
    assume !(Irp_19 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L51;
}



procedure {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_46: int, actual_Irp_20: int) returns (Tmp_395: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_395 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvForwardAndForget"} PciDrvForwardAndForget(actual_FdoData_46: int, actual_Irp_20: int) returns (Tmp_395: int)
{
  var {:scalar} status_38: int;
  var {:pointer} FdoData_46: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_36: int;

  anon0:
    FdoData_46 := actual_FdoData_46;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 779} sdv_IoSkipCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} FdoData_46 != 0;
    assume FdoData_46 > 0;
    havoc vslice_dummy_var_36;
    call {:si_unique_call 780} status_38 := sdv_IoCallDriver(vslice_dummy_var_36, Irp_20);
    call {:si_unique_call 781} vslice_dummy_var_121 := PciDrvIoDecrement(FdoData_46);
    Tmp_395 := status_38;
    return;
}



procedure {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_47: int, actual_Irp_21: int) returns (Tmp_397: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1;
  free ensures {:va_keep} Tmp_397 == -1073741536 || Tmp_397 == 259 || Tmp_397 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvQueueIoctlIrp"} PciDrvQueueIoctlIrp(actual_FdoData_47: int, actual_Irp_21: int) returns (Tmp_397: int)
{
  var {:pointer} Tmp_398: int;
  var {:pointer} Tmp_400: int;
  var {:scalar} status_39: int;
  var {:pointer} pIrpSp: int;
  var {:pointer} FdoData_47: int;
  var {:pointer} Irp_21: int;
  var vslice_dummy_var_122: int;

  anon0:
    FdoData_47 := actual_FdoData_47;
    Irp_21 := actual_Irp_21;
    call {:si_unique_call 782} Tmp_398 := __HAVOC_malloc(84);
    call {:si_unique_call 783} Tmp_400 := __HAVOC_malloc(84);
    status_39 := 259;
    pIrpSp := 0;
    Tmp_398 := strConst__li2bpl135;
    call {:si_unique_call 784} DebugPrint(5, 32, Tmp_398);
    call {:si_unique_call 785} pIrpSp := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    call {:si_unique_call 786} SLIC__read_via_variable_1(0, 0);
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    Tmp_397 := -1073741536;
    goto L1;

  L1:
    return;

  anon30_Then:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} pIrpSp != 0;
    assume pIrpSp > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L24;

  L24:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_39 == 259;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_21 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 787} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L52;

  L52:
    call {:si_unique_call 788} sdv_IoMarkIrpPending(0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume Irp_21 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 789} SLIC_sdv_IoSetCancelRoutine_entry(0, li2bplFunctionConstant7201);
    goto L55;

  L55:
    call {:si_unique_call 790} vslice_dummy_var_122 := sdv_IoSetCancelRoutine(Irp_21, li2bplFunctionConstant7201);
    goto L25;

  L25:
    Tmp_400 := strConst__li2bpl134;
    call {:si_unique_call 791} DebugPrint(5, 32, Tmp_400);
    Tmp_397 := status_39;
    goto L1;

  anon27_Then:
    assume !(Irp_21 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L55;

  anon26_Then:
    assume !(Irp_21 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L52;

  anon25_Then:
    assume {:partition} status_39 != 259;
    goto L25;

  anon28_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    status_39 := -1073741808;
    goto L24;

  anon24_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;

  anon29_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    status_39 := -1073741808;
    goto L24;

  anon23_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;

  anon21_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    status_39 := -1073741808;
    goto L24;

  anon22_Then:
    assume {:nonnull} FdoData_47 != 0;
    assume FdoData_47 > 0;
    goto L24;
}



procedure {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback(actual_FdoData_49: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_405: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_405 == 0 || Tmp_405 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvQueuePassiveLevelCallback"} PciDrvQueuePassiveLevelCallback(actual_FdoData_49: int, actual_CallbackFunction: int, actual_Context1: int, actual_Context2: int) returns (Tmp_405: int)
{
  var {:pointer} item: int;
  var {:pointer} sdv_246: int;
  var {:pointer} context: int;
  var {:scalar} status_40: int;
  var {:scalar} CallbackFunction: int;
  var {:pointer} Context1: int;
  var {:pointer} Context2: int;

  anon0:
    CallbackFunction := actual_CallbackFunction;
    Context1 := actual_Context1;
    Context2 := actual_Context2;
    item := 0;
    status_40 := 0;
    call {:si_unique_call 792} sdv_246 := ExAllocatePoolWithTag(512, 16, -1001831600);
    context := sdv_246;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} context != 0;
    call {:si_unique_call 793} item := IoAllocateWorkItem(0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} item != 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    assume {:nonnull} context != 0;
    assume context > 0;
    call {:si_unique_call 794} IoQueueWorkItem(0, CallbackFunction, 1, 0);
    goto L26;

  L26:
    Tmp_405 := status_40;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} item == 0;
    status_40 := -1073741670;
    call {:si_unique_call 795} ExFreePoolWithTag(0, -1001831600);
    goto L26;

  anon6_Then:
    assume {:partition} context == 0;
    Tmp_405 := -1073741670;
    goto L1;
}



procedure {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "DebugPrint"} DebugPrint(actual_DebugPrintLevel: int, actual_DebugPrintFlag: int, actual_DebugMessage: int)
{
  var vslice_dummy_var_123: int;

  anon0:
    call {:si_unique_call 796} vslice_dummy_var_123 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_50: int, actual_OnHoldCount: int, actual_Reason: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvReleaseAndWait"} PciDrvReleaseAndWait(actual_FdoData_50: int, actual_OnHoldCount: int, actual_Reason: int)
{
  var {:scalar} chargeRemining: int;
  var {:pointer} Tmp_410: int;
  var {:scalar} Tmp_412: int;
  var {:scalar} Tmp_413: int;
  var {:pointer} Tmp_414: int;
  var {:scalar} Tmp_415: int;
  var {:pointer} FdoData_50: int;
  var {:scalar} OnHoldCount: int;
  var {:scalar} Reason: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;

  anon0:
    call {:si_unique_call 797} vslice_dummy_var_124 := __HAVOC_malloc(4);
    FdoData_50 := actual_FdoData_50;
    OnHoldCount := actual_OnHoldCount;
    Reason := actual_Reason;
    call {:si_unique_call 798} Tmp_410 := __HAVOC_malloc(208);
    call {:si_unique_call 799} Tmp_414 := __HAVOC_malloc(216);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Reason == 1;
    chargeRemining := OnHoldCount + 1;
    goto L8;

  L8:
    call {:si_unique_call 800} chargeRemining, Tmp_412, vslice_dummy_var_125 := PciDrvReleaseAndWait_loop_L8(chargeRemining, Tmp_412, FdoData_50, vslice_dummy_var_125);
    goto L8_last;

  L8_last:
    Tmp_412 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} Tmp_412 != 0;
    call {:si_unique_call 801} vslice_dummy_var_125 := PciDrvIoDecrement(FdoData_50);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} Tmp_412 == 0;
    Tmp_410 := strConst__li2bpl138;
    call {:si_unique_call 802} DebugPrint(4, 2, Tmp_410);
    call {:si_unique_call 803} vslice_dummy_var_126 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    chargeRemining := OnHoldCount + 1;
    goto L20;

  L20:
    call {:si_unique_call 804} chargeRemining, Tmp_415, vslice_dummy_var_127 := PciDrvReleaseAndWait_loop_L20(chargeRemining, Tmp_415, FdoData_50, vslice_dummy_var_127);
    goto L20_last;

  L20_last:
    Tmp_415 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Tmp_415 != 0;
    call {:si_unique_call 805} vslice_dummy_var_127 := PciDrvIoIncrement(FdoData_50);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} Tmp_415 == 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} Reason != 1;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} Reason == 0;
    chargeRemining := OnHoldCount + 2;
    goto L26;

  L26:
    call {:si_unique_call 806} chargeRemining, Tmp_413, vslice_dummy_var_128 := PciDrvReleaseAndWait_loop_L26(chargeRemining, Tmp_413, FdoData_50, vslice_dummy_var_128);
    goto L26_last;

  L26_last:
    Tmp_413 := chargeRemining;
    chargeRemining := chargeRemining - 1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} Tmp_413 != 0;
    call {:si_unique_call 807} vslice_dummy_var_128 := PciDrvIoDecrement(FdoData_50);
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} Tmp_413 == 0;
    Tmp_414 := strConst__li2bpl139;
    call {:si_unique_call 808} DebugPrint(4, 2, Tmp_414);
    call {:si_unique_call 809} vslice_dummy_var_129 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    goto L1;

  anon12_Then:
    assume {:partition} Reason != 0;
    goto L1;
}



procedure {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_51: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvWithdrawIoctlIrps"} PciDrvWithdrawIoctlIrps(actual_FdoData_51: int)
{
  var {:scalar} i_4: int;
  var {:scalar} oldIrql_10: int;
  var {:pointer} irp_5: int;
  var {:pointer} Tmp_417: int;
  var {:pointer} FdoData_51: int;
  var vslice_dummy_var_130: int;
  var vslice_dummy_var_131: int;

  anon0:
    call {:si_unique_call 810} vslice_dummy_var_130 := __HAVOC_malloc(4);
    FdoData_51 := actual_FdoData_51;
    call {:si_unique_call 811} Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    call {:si_unique_call 812} sdv_KeAcquireSpinLock(0, Tmp_417);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    havoc oldIrql_10;
    i_4 := 0;
    goto L10;

  L10:
    call {:si_unique_call 813} i_4, oldIrql_10, irp_5, Tmp_417, vslice_dummy_var_131 := PciDrvWithdrawIoctlIrps_loop_L10(i_4, oldIrql_10, irp_5, Tmp_417, FdoData_51, vslice_dummy_var_131);
    goto L10_last;

  L10_last:
    assume {:CounterLoop 3} {:Counter "i_4"} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} 3 > i_4;
    irp_5 := 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} i_4 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} i_4 != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} i_4 != 2;
    goto L22;

  L22:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} irp_5 != 0;
    call {:si_unique_call 814} sdv_KeReleaseSpinLock(0, oldIrql_10);
    call {:si_unique_call 815} vslice_dummy_var_131 := PciDrvQueueRequest(FdoData_51, irp_5);
    call {:si_unique_call 816} Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    call {:si_unique_call 817} sdv_KeAcquireSpinLock(0, Tmp_417);
    assume {:nonnull} Tmp_417 != 0;
    assume Tmp_417 > 0;
    havoc oldIrql_10;
    goto L23;

  L23:
    i_4 := i_4 + 1;
    goto L23_dummy;

  L23_dummy:
    assume false;
    return;

  anon12_Then:
    assume {:partition} irp_5 == 0;
    goto L23;

  anon13_Then:
    assume {:partition} i_4 == 2;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} i_4 == 1;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} i_4 == 0;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    havoc irp_5;
    assume {:nonnull} FdoData_51 != 0;
    assume FdoData_51 > 0;
    goto L22;

  anon11_Then:
    assume {:partition} i_4 >= 3;
    call {:si_unique_call 818} sdv_KeReleaseSpinLock(0, oldIrql_10);
    return;
}



procedure {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_52: int, actual_Irp_22: int) returns (Tmp_418: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1;
  free ensures {:va_keep} Tmp_418 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvQueueRequest"} PciDrvQueueRequest(actual_FdoData_52: int, actual_Irp_22: int) returns (Tmp_418: int)
{
  var {:pointer} Tmp_419: int;
  var {:scalar} ret: int;
  var {:scalar} oldIrql_11: int;
  var {:pointer} Tmp_420: int;
  var {:pointer} FdoData_52: int;
  var {:pointer} Irp_22: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;

  anon0:
    FdoData_52 := actual_FdoData_52;
    Irp_22 := actual_Irp_22;
    call {:si_unique_call 819} Tmp_420 := __HAVOC_malloc(72);
    Tmp_420 := strConst__li2bpl140;
    call {:si_unique_call 820} DebugPrint(5, 2048, Tmp_420);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 821} SLIC_sdv_IoMarkIrpPending_entry(0);
    goto L51;

  L51:
    call {:si_unique_call 822} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 823} Tmp_419 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    call {:si_unique_call 824} sdv_KeAcquireSpinLock(0, Tmp_419);
    assume {:nonnull} Tmp_419 != 0;
    assume Tmp_419 > 0;
    havoc oldIrql_11;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 825} SLIC_sdv_IoSetCancelRoutine_entry(0, li2bplFunctionConstant7198);
    goto L54;

  L54:
    call {:si_unique_call 826} vslice_dummy_var_134 := sdv_IoSetCancelRoutine(Irp_22, li2bplFunctionConstant7198);
    call {:si_unique_call 827} SLIC__read_via_variable_1(0, 0);
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume Irp_22 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 828} SLIC_sdv_IoSetCancelRoutine_entry(0, 0);
    goto L57;

  L57:
    call {:si_unique_call 829} ret := sdv_IoSetCancelRoutine(Irp_22, 0);
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 830} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_22))));
    call {:si_unique_call 831} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} ret != 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 832} sdv_IoCompleteRequest(0, 0);
    goto L33;

  L33:
    call {:si_unique_call 833} vslice_dummy_var_133 := PciDrvIoDecrement(FdoData_52);
    Tmp_418 := 259;
    return;

  anon14_Then:
    assume {:partition} ret == 0;
    goto L33;

  anon13_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L57;

  anon15_Then:
    assume {:nonnull} FdoData_52 != 0;
    assume FdoData_52 > 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    call {:si_unique_call 834} vslice_dummy_var_132 := sdv_InsertTailList(NewRequestsQueue__FDO_DATA(FdoData_52), ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(Irp_22))));
    call {:si_unique_call 835} sdv_KeReleaseSpinLock(0, oldIrql_11);
    goto L33;

  anon12_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L54;

  anon11_Then:
    assume !(Irp_22 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L51;
}



procedure {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_18: int, actual_Irp_23: int) returns (Tmp_421: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_421 == -1073741810 || Tmp_421 == 0 || Tmp_421 == 258 || Tmp_421 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvCreate"} PciDrvCreate(actual_DeviceObject_18: int, actual_Irp_23: int) returns (Tmp_421: int)
{
  var {:pointer} Tmp_422: int;
  var {:pointer} fdoData_13: int;
  var {:scalar} status_42: int;
  var {:pointer} DeviceObject_18: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;

  anon0:
    DeviceObject_18 := actual_DeviceObject_18;
    Irp_23 := actual_Irp_23;
    call {:si_unique_call 836} Tmp_422 := __HAVOC_malloc(36);
    status_42 := 0;
    call {:si_unique_call 837} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_18 != 0;
    assume DeviceObject_18 > 0;
    havoc fdoData_13;
    Tmp_422 := strConst__li2bpl141;
    call {:si_unique_call 838} DebugPrint(5, 16, Tmp_422);
    call {:si_unique_call 839} vslice_dummy_var_135 := PciDrvIoIncrement(fdoData_13);
    assume {:nonnull} fdoData_13 != 0;
    assume fdoData_13 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    call {:si_unique_call 840} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 841} vslice_dummy_var_136 := PciDrvIoDecrement(fdoData_13);
    Tmp_421 := -1073741810;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 842} status_42 := PciDrvPowerUpDevice(fdoData_13, 1);
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    call {:si_unique_call 843} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 844} vslice_dummy_var_137 := PciDrvIoDecrement(fdoData_13);
    Tmp_421 := status_42;
    goto L1;
}



procedure {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_53: int, actual_Name: int, actual_Value: int) returns (Tmp_424: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_424 == 1 || Tmp_424 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvReadRegistryValue"} PciDrvReadRegistryValue(actual_FdoData_53: int, actual_Name: int, actual_Value: int) returns (Tmp_424: int)
{
  var {:scalar} valueName: int;
  var {:pointer} Tmp_425: int;
  var {:pointer} fullInfo: int;
  var {:scalar} retValue: int;
  var {:scalar} length_2: int;
  var {:pointer} Tmp_426: int;
  var {:pointer} sdv_262: int;
  var {:scalar} status_43: int;
  var {:pointer} Tmp_428: int;
  var {:pointer} Name: int;
  var {:pointer} Value: int;
  var vslice_dummy_var_138: int;
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 845} valueName := __HAVOC_malloc(12);
    Name := actual_Name;
    Value := actual_Value;
    call {:si_unique_call 846} Tmp_425 := __HAVOC_malloc(144);
    call {:si_unique_call 847} Tmp_426 := __HAVOC_malloc(116);
    retValue := 0;
    call {:si_unique_call 848} sdv_do_paged_code_check();
    Tmp_426 := strConst__li2bpl142;
    call {:si_unique_call 849} DebugPrint(5, 1, Tmp_426);
    assume {:nonnull} Value != 0;
    assume Value > 0;
    call {:si_unique_call 850} status_43 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} status_43 >= 0;
    call {:si_unique_call 851} RtlInitUnicodeString(valueName, Name);
    assume {:nonnull} valueName != 0;
    assume valueName > 0;
    havoc length_2;
    call {:si_unique_call 852} sdv_262 := ExAllocatePoolWithTag(1, length_2, -1001831600);
    fullInfo := sdv_262;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} fullInfo != 0;
    call {:si_unique_call 853} Tmp_428 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    call {:si_unique_call 854} status_43 := ZwQueryValueKey(0, 0, 1, 0, length_2, Tmp_428);
    assume {:nonnull} Tmp_428 != 0;
    assume Tmp_428 > 0;
    havoc length_2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_43 >= 0;
    assume {:nonnull} fullInfo != 0;
    assume fullInfo > 0;
    havoc vslice_dummy_var_37;
    call {:si_unique_call 855} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_37);
    retValue := 1;
    goto L43;

  L43:
    call {:si_unique_call 856} sdv_ExFreePool(0);
    goto L35;

  L35:
    call {:si_unique_call 857} vslice_dummy_var_138 := ZwClose(0);
    goto L23;

  L23:
    Tmp_425 := strConst__li2bpl143;
    call {:si_unique_call 858} DebugPrint(5, 1, Tmp_425);
    Tmp_424 := retValue;
    return;

  anon8_Then:
    assume {:partition} 0 > status_43;
    goto L43;

  anon9_Then:
    assume {:partition} fullInfo == 0;
    goto L35;

  anon7_Then:
    assume {:partition} 0 > status_43;
    goto L23;
}



procedure {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_54: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvWithdrawIrps"} PciDrvWithdrawIrps(actual_FdoData_54: int)
{
  var {:pointer} FdoData_54: int;
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 859} vslice_dummy_var_139 := __HAVOC_malloc(4);
    FdoData_54 := actual_FdoData_54;
    call {:si_unique_call 860} PciDrvWithdrawIoctlIrps(FdoData_54);
    call {:si_unique_call 861} PciDrvWithdrawReadIrps(FdoData_54);
    return;
}



procedure {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_19: int) returns (Tmp_431: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_431 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvReturnResources"} PciDrvReturnResources(actual_DeviceObject_19: int) returns (Tmp_431: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:scalar} powerState_2: int;
  var {:pointer} Tmp_432: int;
  var {:pointer} fdoData_14: int;
  var {:scalar} sdv: int;
  var {:pointer} Tmp_433: int;
  var {:scalar} status_44: int;
  var {:pointer} DeviceObject_19: int;

  anon0:
    call {:si_unique_call 862} powerState_2 := __HAVOC_malloc(8);
    call {:si_unique_call 863} sdv := __HAVOC_malloc(8);
    DeviceObject_19 := actual_DeviceObject_19;
    call {:si_unique_call 864} Tmp_432 := __HAVOC_malloc(104);
    call {:si_unique_call 865} Tmp_433 := __HAVOC_malloc(104);
    assume {:nonnull} DeviceObject_19 != 0;
    assume DeviceObject_19 > 0;
    havoc fdoData_14;
    Tmp_432 := strConst__li2bpl144;
    call {:si_unique_call 866} DebugPrint(4, 2, Tmp_432);
    assume {:nonnull} fdoData_14 != 0;
    assume fdoData_14 > 0;
    assume {:nonnull} fdoData_14 != 0;
    assume fdoData_14 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} fdoData_14 != 0;
    assume fdoData_14 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} powerState_2 != 0;
    assume powerState_2 > 0;
    call {:si_unique_call 867} structPtr888sdv := PoSetPowerState(0, 1, powerState_2);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    goto L17;

  L17:
    call {:si_unique_call 868} NICShutdown(fdoData_14);
    goto L13;

  L13:
    call {:si_unique_call 869} status_44 := NICFreeDeviceResources(fdoData_14);
    assume {:nonnull} fdoData_14 != 0;
    assume fdoData_14 > 0;
    Tmp_433 := strConst__li2bpl145;
    call {:si_unique_call 870} DebugPrint(4, 2, Tmp_433);
    Tmp_431 := status_44;
    return;

  anon5_Then:
    goto L17;

  anon6_Then:
    goto L13;
}



procedure {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_2: int) returns (Tmp_435: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PnPMinorFunctionString"} PnPMinorFunctionString(actual_MinorFunction_2: int) returns (Tmp_435: int)
{
  var {:scalar} MinorFunction_2: int;

  anon0:
    MinorFunction_2 := actual_MinorFunction_2;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} MinorFunction_2 != 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} MinorFunction_2 != 1;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} MinorFunction_2 != 2;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} MinorFunction_2 != 3;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} MinorFunction_2 != 4;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} MinorFunction_2 != 5;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} MinorFunction_2 != 6;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} MinorFunction_2 != 7;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} MinorFunction_2 != 8;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} MinorFunction_2 != 9;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} MinorFunction_2 != 10;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} MinorFunction_2 != 11;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} MinorFunction_2 != 12;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} MinorFunction_2 != 13;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} MinorFunction_2 != 15;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} MinorFunction_2 != 16;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} MinorFunction_2 != 17;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} MinorFunction_2 != 18;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} MinorFunction_2 != 19;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} MinorFunction_2 != 20;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} MinorFunction_2 != 21;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} MinorFunction_2 != 22;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} MinorFunction_2 != 23;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} MinorFunction_2 == 24;
    Tmp_435 := strConst__li2bpl170;
    goto L1;

  L1:
    return;

  anon50_Then:
    assume {:partition} MinorFunction_2 != 24;
    Tmp_435 := strConst__li2bpl146;
    goto L1;

  anon51_Then:
    assume {:partition} MinorFunction_2 == 23;
    Tmp_435 := strConst__li2bpl169;
    goto L1;

  anon52_Then:
    assume {:partition} MinorFunction_2 == 22;
    Tmp_435 := strConst__li2bpl168;
    goto L1;

  anon53_Then:
    assume {:partition} MinorFunction_2 == 21;
    Tmp_435 := strConst__li2bpl167;
    goto L1;

  anon54_Then:
    assume {:partition} MinorFunction_2 == 20;
    Tmp_435 := strConst__li2bpl166;
    goto L1;

  anon55_Then:
    assume {:partition} MinorFunction_2 == 19;
    Tmp_435 := strConst__li2bpl165;
    goto L1;

  anon56_Then:
    assume {:partition} MinorFunction_2 == 18;
    Tmp_435 := strConst__li2bpl164;
    goto L1;

  anon57_Then:
    assume {:partition} MinorFunction_2 == 17;
    Tmp_435 := strConst__li2bpl163;
    goto L1;

  anon58_Then:
    assume {:partition} MinorFunction_2 == 16;
    Tmp_435 := strConst__li2bpl162;
    goto L1;

  anon59_Then:
    assume {:partition} MinorFunction_2 == 15;
    Tmp_435 := strConst__li2bpl161;
    goto L1;

  anon60_Then:
    assume {:partition} MinorFunction_2 == 13;
    Tmp_435 := strConst__li2bpl160;
    goto L1;

  anon61_Then:
    assume {:partition} MinorFunction_2 == 12;
    Tmp_435 := strConst__li2bpl159;
    goto L1;

  anon62_Then:
    assume {:partition} MinorFunction_2 == 11;
    Tmp_435 := strConst__li2bpl158;
    goto L1;

  anon63_Then:
    assume {:partition} MinorFunction_2 == 10;
    Tmp_435 := strConst__li2bpl157;
    goto L1;

  anon64_Then:
    assume {:partition} MinorFunction_2 == 9;
    Tmp_435 := strConst__li2bpl156;
    goto L1;

  anon65_Then:
    assume {:partition} MinorFunction_2 == 8;
    Tmp_435 := strConst__li2bpl155;
    goto L1;

  anon66_Then:
    assume {:partition} MinorFunction_2 == 7;
    Tmp_435 := strConst__li2bpl154;
    goto L1;

  anon67_Then:
    assume {:partition} MinorFunction_2 == 6;
    Tmp_435 := strConst__li2bpl153;
    goto L1;

  anon68_Then:
    assume {:partition} MinorFunction_2 == 5;
    Tmp_435 := strConst__li2bpl152;
    goto L1;

  anon69_Then:
    assume {:partition} MinorFunction_2 == 4;
    Tmp_435 := strConst__li2bpl151;
    goto L1;

  anon70_Then:
    assume {:partition} MinorFunction_2 == 3;
    Tmp_435 := strConst__li2bpl150;
    goto L1;

  anon71_Then:
    assume {:partition} MinorFunction_2 == 2;
    Tmp_435 := strConst__li2bpl149;
    goto L1;

  anon72_Then:
    assume {:partition} MinorFunction_2 == 1;
    Tmp_435 := strConst__li2bpl148;
    goto L1;

  anon49_Then:
    assume {:partition} MinorFunction_2 == 0;
    Tmp_435 := strConst__li2bpl147;
    goto L1;
}



procedure {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_56: int) returns (Tmp_440: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvIoIncrement"} PciDrvIoIncrement(actual_FdoData_56: int) returns (Tmp_440: int)
{
  var {:pointer} Tmp_441: int;
  var {:pointer} Tmp_442: int;
  var {:scalar} result_2: int;
  var {:pointer} FdoData_56: int;

  anon0:
    FdoData_56 := actual_FdoData_56;
    call {:si_unique_call 871} Tmp_442 := __HAVOC_malloc(88);
    call {:si_unique_call 872} Tmp_441 := __HAVOC_malloc(4);
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} Tmp_441 != 0;
    assume Tmp_441 > 0;
    call {:si_unique_call 873} result_2 := sdv_InterlockedIncrement(Tmp_441);
    assume {:nonnull} FdoData_56 != 0;
    assume FdoData_56 > 0;
    assume {:nonnull} Tmp_441 != 0;
    assume Tmp_441 > 0;
    Tmp_442 := strConst__li2bpl172;
    call {:si_unique_call 874} DebugPrint(6, 1024, Tmp_442);
    Tmp_440 := result_2;
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_140: int;

  anon0:
    call {:si_unique_call 875} vslice_dummy_var_140 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int)
{
  var vslice_dummy_var_141: int;

  anon0:
    call {:si_unique_call 876} vslice_dummy_var_141 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 877} vslice_dummy_var_142 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_449: int);
  free ensures {:va_keep} Tmp_449 == actual_Address;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_containing_record"} {:osmodel} sdv_containing_record(actual_Address: int, actual_FieldOffset: int) returns (Tmp_449: int)
{
  var {:pointer} record: int;
  var {:pointer} Address: int;

  anon0:
    Address := actual_Address;
    record := Address;
    Tmp_449 := record;
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 878} vslice_dummy_var_143 := __HAVOC_malloc(4);
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    return;
}



procedure {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_453: int);
  free ensures {:va_keep} Tmp_453 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckDispatchRoutines"} {:osmodel} sdv_CheckDispatchRoutines() returns (Tmp_453: int)
{

  anon0:
    Tmp_453 := 1;
    return;
}



procedure {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_startio_end"} {:osmodel} sdv_stub_startio_end()
{
  var vslice_dummy_var_144: int;

  anon0:
    call {:si_unique_call 879} vslice_dummy_var_144 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_457: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_457 == 1 || Tmp_457 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_structPtr888DueTime: int, actual_Dpc: int) returns (Tmp_457: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 880} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_457 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_457 := 0;
    goto L1;
}



procedure {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_459: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_MmGetMdlByteCount"} {:osmodel} sdv_MmGetMdlByteCount(actual_Mdl: int) returns (Tmp_459: int)
{
  var {:scalar} x: int;
  var {:pointer} sdv_273: int;

  anon0:
    call {:si_unique_call 881} sdv_273 := __HAVOC_malloc(1);
    x := sdv_273;
    Tmp_459 := x;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int)
{
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 882} vslice_dummy_var_145 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_463: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_463: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_463 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_463 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_463 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeLeaveCriticalRegion"} {:osmodel} KeLeaveCriticalRegion()
{
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 883} vslice_dummy_var_146 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_1: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_1: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 884} vslice_dummy_var_147 := __HAVOC_malloc(4);
    Dpc_1 := actual_Dpc_1;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_1 != 0;
    assume Dpc_1 > 0;
    return;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_1: int)
{
  var vslice_dummy_var_148: int;

  anon0:
    call {:si_unique_call 885} vslice_dummy_var_148 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_149: int;

  anon0:
    call {:si_unique_call 886} vslice_dummy_var_149 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_473: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_473: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_473 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination: int, actual_Source: int, actual_Length: int)
{
  var vslice_dummy_var_150: int;

  anon0:
    call {:si_unique_call 887} vslice_dummy_var_150 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_477: int);
  free ensures {:va_keep} Tmp_477 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckIrpMjPower"} {:osmodel} sdv_CheckIrpMjPower() returns (Tmp_477: int)
{

  anon0:
    Tmp_477 := 1;
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_151: int;

  anon0:
    call {:si_unique_call 888} vslice_dummy_var_151 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s: int, actual_pirp_4: int)
{
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 889} vslice_dummy_var_152 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_483: int);
  free ensures {:va_keep} Tmp_483 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckCancelRoutines"} {:osmodel} sdv_CheckCancelRoutines() returns (Tmp_483: int)
{

  anon0:
    Tmp_483 := 1;
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_485: int);
  free ensures {:va_keep} Tmp_485 == 1 || Tmp_485 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_485: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_485 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_485 := 0;
    goto L1;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 890} vslice_dummy_var_153 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_489: int);
  free ensures {:va_keep} Tmp_489 == 0 || Tmp_489 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExCreateCallback"} {:osmodel} ExCreateCallback(actual_CallbackObject: int, actual_ObjectAttributes: int, actual_Create: int, actual_AllowMultipleCallbacks: int) returns (Tmp_489: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_489 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_489 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked, yogi_error;
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var {:scalar} sdv_281: int;
  var {:scalar} sdv_296: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;
  var vslice_dummy_var_157: int;
  var vslice_dummy_var_158: int;
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;
  var vslice_dummy_var_161: int;
  var vslice_dummy_var_162: int;
  var vslice_dummy_var_163: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 891} vslice_dummy_var_154 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 892} sdv_296 := sdv_CheckDispatchRoutines();
    call {:si_unique_call 893} sdv_281 := sdv_CheckStartIoRoutines();
    call {:si_unique_call 894} vslice_dummy_var_155 := sdv_CheckDpcRoutines();
    call {:si_unique_call 895} vslice_dummy_var_156 := sdv_CheckIsrRoutines();
    call {:si_unique_call 896} vslice_dummy_var_157 := sdv_CheckCancelRoutines();
    call {:si_unique_call 897} vslice_dummy_var_158 := sdv_CheckIoDpcRoutines();
    call {:si_unique_call 898} vslice_dummy_var_159 := sdv_IoCompletionRoutines();
    call {:si_unique_call 899} vslice_dummy_var_160 := sdv_CheckWorkerRoutines();
    call {:si_unique_call 900} vslice_dummy_var_161 := sdv_CheckAddDevice();
    call {:si_unique_call 901} vslice_dummy_var_162 := sdv_CheckIrpMjPnp();
    call {:si_unique_call 902} vslice_dummy_var_163 := sdv_CheckIrpMjPower();
    call {:si_unique_call 903} vslice_dummy_var_164 := sdv_CheckDriverUnload();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_281 != 0;
    call {:si_unique_call 904} sdv_stub_driver_init();
    call {:si_unique_call 905} sdv_RunStartIo(0, 0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    assume {:partition} sdv_281 == 0;
    goto L1;

  anon14_Then:
    goto L1;

  anon11_Then:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_296 != 0;
    call {:si_unique_call 906} sdv_stub_driver_init();
    call {:si_unique_call 907} vslice_dummy_var_165 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon12_Then:
    assume {:partition} sdv_296 == 0;
    goto L1;
}



procedure {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_493: int);
  free ensures {:va_keep} Tmp_493 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckDriverUnload"} {:osmodel} sdv_CheckDriverUnload() returns (Tmp_493: int)
{

  anon0:
    Tmp_493 := 1;
    return;
}



procedure {:origName "_sdv_init16"} {:osmodel} _sdv_init16();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init16"} {:osmodel} _sdv_init16()
{
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 908} vslice_dummy_var_166 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    assume sdv_maskedEflags == 0;
    assume sdv_kdpc3 == sdv_kdpc_val3;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_Io_Removelock_release_wait_returned == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant7729;
    assume sdv_dpc_ke_registered == 0;
    assume sdv_io_dpc == li2bplFunctionConstant7732;
    assume sdv_p_devobj_top == sdv_devobj_top;
    assume sdv_MmMapIoSpace_int == 0;
    return;
}



procedure {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_497: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_MmGetSystemAddressForMdlSafe"} {:osmodel} sdv_MmGetSystemAddressForMdlSafe(actual_MDL: int, actual_PRIORITY: int) returns (Tmp_497: int)
{
  var {:pointer} sdv_307: int;
  var {:pointer} p_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 909} sdv_307 := __HAVOC_malloc(1);
    p_1 := sdv_307;
    Tmp_497 := p_1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_497 := 0;
    goto L1;
}



procedure {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeEnterCriticalRegion"} {:osmodel} KeEnterCriticalRegion()
{
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 910} vslice_dummy_var_167 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_501: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_MmGetMdlVirtualAddress"} {:osmodel} sdv_MmGetMdlVirtualAddress(actual_Mdl_1: int) returns (Tmp_501: int)
{
  var {:pointer} x_3: int;
  var {:pointer} sdv_308: int;

  anon0:
    call {:si_unique_call 911} sdv_308 := __HAVOC_malloc(1);
    x_3 := sdv_308;
    Tmp_501 := x_3;
    return;
}



procedure {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_503: int);
  free ensures {:va_keep} Tmp_503 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckIoDpcRoutines"} {:osmodel} sdv_CheckIoDpcRoutines() returns (Tmp_503: int)
{

  anon0:
    Tmp_503 := 1;
    return;
}



procedure {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_505: int);
  free ensures {:va_keep} Tmp_505 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckDpcRoutines"} {:osmodel} sdv_CheckDpcRoutines() returns (Tmp_505: int)
{

  anon0:
    Tmp_505 := 1;
    return;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_20: int, actual_Irp_25: int) returns (Tmp_507: int);
  free ensures {:va_keep} Tmp_507 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_20: int, actual_Irp_25: int) returns (Tmp_507: int)
{
  var {:scalar} status_46: int;
  var {:pointer} Irp_25: int;

  anon0:
    Irp_25 := actual_Irp_25;
    status_46 := 259;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_25;
    goto L25;

  L25:
    Tmp_507 := status_46;
    return;

  anon33_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon32_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_25;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_25;
    goto L19;

  anon40_Then:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L44;

  L44:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon39_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_25;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_25;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_25;
    goto L44;

  anon41_Then:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L28;

  L28:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_25;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_25;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_25;
    goto L28;

  anon31_Then:
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_25;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_25;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_25;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_25;
    goto L36;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_21: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_509: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_509 == 0 || Tmp_509 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_21: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_509: int)
{
  var {:scalar} s_1: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 912} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_509 := s_1;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    call {:si_unique_call 913} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_1 := 0;
    goto L24;

  anon10_Then:
    s_1 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 914} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_1 := 0;
    call {:si_unique_call 915} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_22: int, actual_Type_2: int, actual_structPtr888State: int) returns (structPtr888Tmp: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_22: int, actual_Type_2: int, actual_structPtr888State: int) returns (structPtr888Tmp: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 916} State := __HAVOC_malloc(8);
    call {:si_unique_call 917} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 918} Tmp := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_2: int)
{
  var {:scalar} new: int;
  var {:pointer} p_2: int;
  var vslice_dummy_var_168: int;

  anon0:
    call {:si_unique_call 919} vslice_dummy_var_168 := __HAVOC_malloc(4);
    new := actual_new;
    p_2 := actual_p_2;
    assume {:nonnull} p_2 != 0;
    assume p_2 > 0;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_514: int);
  free ensures {:va_keep} Tmp_514 == 1 || Tmp_514 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_514: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_514 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_514 := 0;
    goto L1;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_2: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_2: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_169: int;

  anon0:
    call {:si_unique_call 920} vslice_dummy_var_169 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_2 := actual_Context_2;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 921} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    return;
}



procedure {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_518: int);
  free ensures {:va_keep} Tmp_518 == 1 || Tmp_518 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RemoveEntryList"} {:osmodel} sdv_RemoveEntryList(actual_Entry: int) returns (Tmp_518: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_518 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_518 := 0;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_26: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_26: int)
{
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 922} vslice_dummy_var_170 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_522: int);
  free ensures {:va_keep} Tmp_522 == 258 || Tmp_522 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode: int, actual_Alertable: int, actual_Timeout: int) returns (Tmp_522: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_522 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_522 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_522 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_23: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_23: int)
{
  var vslice_dummy_var_171: int;

  anon0:
    call {:si_unique_call 923} vslice_dummy_var_171 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_526: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event: int, actual_Increment: int, actual_Wait_1: int) returns (Tmp_526: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event: int;

  anon0:
    Event := actual_Event;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    havoc OldState;
    assume {:nonnull} Event != 0;
    assume Event > 0;
    Tmp_526 := OldState;
    return;
}



procedure {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_530: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExRegisterCallback"} {:osmodel} ExRegisterCallback(actual_CallbackObject_1: int, actual_CallbackFunction_1: int, actual_CallbackContext: int) returns (Tmp_530: int)
{
  var {:pointer} sdv_317: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_530 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    call {:si_unique_call 924} sdv_317 := __HAVOC_malloc(1);
    Tmp_530 := sdv_317;
    goto L1;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_532: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_532: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_532;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_3: int, actual_s_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_3: int, actual_n_1: int, actual_a: int, actual_r_3: int, actual_s_2: int)
{
  var vslice_dummy_var_172: int;

  anon0:
    call {:si_unique_call 925} vslice_dummy_var_172 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_536: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_536: int)
{

  anon0:
    havoc Tmp_536;
    return;
}



procedure {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_27: int) returns (Tmp_538: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_538 == -1073741584 || Tmp_538 == 259 || Tmp_538 == -1073741670;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PoRequestPowerIrp"} {:osmodel} PoRequestPowerIrp(actual_DeviceObject_24: int, actual_MinorFunction_3: int, actual_structPtr888PowerState: int, actual_CompletionFunction: int, actual_Context_3: int, actual_Irp_27: int) returns (Tmp_538: int)
{
  var {:scalar} PowerState: int;
  var {:scalar} MinorFunction_3: int;
  var {:pointer} structPtr888PowerState: int;

  anon0:
    call {:si_unique_call 926} PowerState := __HAVOC_malloc(8);
    MinorFunction_3 := actual_MinorFunction_3;
    structPtr888PowerState := actual_structPtr888PowerState;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    assume {:nonnull} PowerState != 0;
    assume PowerState > 0;
    assume {:nonnull} structPtr888PowerState != 0;
    assume structPtr888PowerState > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} MinorFunction_3 != 3;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} MinorFunction_3 != 2;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} MinorFunction_3 != 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_538 := -1073741584;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:partition} MinorFunction_3 == 0;
    goto L13;

  L13:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_538 := 259;
    goto L1;

  anon9_Then:
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    assume {:nonnull} sdv_power_irp != 0;
    assume sdv_power_irp > 0;
    Tmp_538 := -1073741670;
    goto L1;

  anon10_Then:
    assume {:partition} MinorFunction_3 == 2;
    goto L13;

  anon12_Then:
    assume {:partition} MinorFunction_3 == 3;
    goto L13;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_540: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_1, SLAM_guard_S_0, IoSetCancelRoutineCalled, IrpPended, IrpCancelChecked, yogi_error;
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == 0;
  free ensures {:va_keep} IrpPended == 1 || IrpPended == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == 0;
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "main"} {:osmodel} main() returns (Tmp_540: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_541: int;
  var {:scalar} Tmp_542: int;
  var boogieTmp: int;
  var DEVPKEY_Device_ProblemCode__Loc: int;
  var DEVPKEY_Device_DHP_Rebalance_Policy__Loc: int;
  var GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc: int;
  var DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc: int;
  var GUID_NWF_FRAGMENTATION_THRESHOLD__Loc: int;
  var GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressAERControl__Loc: int;
  var DEVPKEY_PciDevice_BaseClass__Loc: int;
  var GUID_NWF_ACTIVE_PHY_LIST__Loc: int;
  var DEVPKEY_Device_ResourcePickerTags__Loc: int;
  var DEVPKEY_DeviceContainer_IsPaired__Loc: int;
  var DEVPKEY_Device_HardwareIds__Loc: int;
  var DEVPKEY_DeviceContainer_InstallInProgress__Loc: int;
  var DEVPKEY_PciDevice_MaxPayloadSize__Loc: int;
  var GUID_NWF_COUNTRY_STRING__Loc: int;
  var DEVPKEY_Device_LowerFilters__Loc: int;
  var DEVPKEY_Device_FirmwareVersion__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_NWF_CURRENT_INDEX__Loc: int;
  var GUID_NWF_TI_THRESHOLD__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_BarTypes__Loc: int;
  var GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc: int;
  var GUID_POWER_CONSERVATION_IDLE_TIME__Loc: int;
  var GUID_NWF_RECV_SENSITIVITY_LIST__Loc: int;
  var DEVPKEY_DeviceClass_UpperFilters__Loc: int;
  var DEVPKEY_DeviceClass_NoInstallClass__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FLAG__Loc: int;
  var DEVPKEY_Device_DeviceDesc__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc: int;
  var GUID_NWF_RF_USAGE__Loc: int;
  var DEVPKEY_DeviceContainer_IsEncrypted__Loc: int;
  var DEVPKEY_Device_LastArrivalDate__Loc: int;
  var GUID_NWF_RSSI_RANGE__Loc: int;
  var GUID_NWF_CURRENT_PHY_ID__Loc: int;
  var GUID_NWF_JOIN_REQUEST__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_Characteristics__Loc: int;
  var DEVPKEY_DrvPkg_DetailedDescription__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription2__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc: int;
  var DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc: int;
  var GUID_NWF_RTS_THRESHOLD__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Icon__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_Name__Loc: int;
  var GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc: int;
  var DEVPKEY_Device_InstanceId__Loc: int;
  var GUID_NWF_SUPPORTED_RX_ANTENNA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_LastRemovalDate__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc: int;
  var GUID_NWF_POWER_MGMT_MODE__Loc: int;
  var GUID_NWF_ED_THRESHOLD__Loc: int;
  var DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc: int;
  var GUID_NWF_OPERATION_MODE_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Manufacturer__Loc: int;
  var DEVPKEY_Device_DriverLogoLevel__Loc: int;
  var DEVPKEY_DeviceContainer_Address__Loc: int;
  var DEVPKEY_DeviceContainer_IsAuthenticated__Loc: int;
  var DEVPKEY_PciDevice_SubClass__Loc: int;
  var GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_PERMANENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ConfigurationId__Loc: int;
  var GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc: int;
  var GUID_DEVINTERFACE_PCIDRV__Loc: int;
  var DEVPKEY_Device_HasProblem__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc: int;
  var GUID_NWF_MEDIA_STREAMING_ENABLED__Loc: int;
  var DEVPKEY_PciDevice_AriSupport__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc: int;
  var GUID_NWF_PMKID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc: int;
  var DEVPKEY_Device_PhysicalDeviceLocation__Loc: int;
  var DEVPKEY_DeviceContainer_Version__Loc: int;
  var GUID_NWF_BEACON_PERIOD__Loc: int;
  var GUID_NWF_DESIRED_SSID_LIST__Loc: int;
  var DEVPKEY_PciRootBus_ASPMSupport__Loc: int;
  var GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc: int;
  var DEVPKEY_Device_PostInstallInProgress__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_Driver__Loc: int;
  var DEVPKEY_PciDevice_CurrentPayloadSize__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc: int;
  var DEVPKEY_Device_InstallState__Loc: int;
  var GUID_NWF_MAX_DWELL_TIME__Loc: int;
  var GUID_NWF_WPA_TSC__Loc: int;
  var GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var DEVPKEY_PciDevice_Label_String__Loc: int;
  var GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var DEVPKEY_Device_FirmwareDate__Loc: int;
  var DEVPKEY_PciDevice_SriovSupport__Loc: int;
  var GUID_NWF_SAFE_MODE_ENABLED__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceInterface_FriendlyName__Loc: int;
  var DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc: int;
  var DEVPKEY_PciDevice_S0WakeupSupported__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var DEVPKEY_PciDevice_InterruptSupport__Loc: int;
  var DEVPKEY_PciDevice_Label_Id__Loc: int;
  var DEVPKEY_Device_CompatibleIds__Loc: int;
  var DEVPKEY_Device_ReportedDeviceIdsHash__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc: int;
  var DEVPKEY_Device_DriverPropPageProvider__Loc: int;
  var DEVPKEY_DeviceContainer_UnpairUninstall__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkSpeed__Loc: int;
  var GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc: int;
  var DEVPKEY_Device_BiosDeviceName__Loc: int;
  var GUID_NWF_CFP_MAX_DURATION__Loc: int;
  var GUID_NWF_HOPPING_PATTERN__Loc: int;
  var GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc: int;
  var GUID_NWF_DISCONNECT_REQUEST__Loc: int;
  var GUID_NWF_CURRENT_PACKET_FILTER__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PowerRelations__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc: int;
  var GUID_NWF_SUPPORTED_PHY_TYPES__Loc: int;
  var GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc: int;
  var DEVPKEY_DrvPkg_BrandingIcon__Loc: int;
  var DEVPKEY_DeviceClass_Characteristics__Loc: int;
  var GUID_NWF_SCAN_REQUEST__Loc: int;
  var GUID_NWF_DESIRED_BSS_TYPE__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var DEVPKEY_Device_MatchingDeviceId__Loc: int;
  var GUID_NWF_EXCLUDE_UNENCRYPTED__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc: int;
  var DEVPKEY_Device_PDOName__Loc: int;
  var DEVPKEY_Device_Address__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_Exclusive__Loc: int;
  var DEVPKEY_PciDevice_Correctable_Error_Mask__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceDescription1__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc: int;
  var DEVPKEY_DeviceContainer_Manufacturer__Loc: int;
  var DEVPKEY_DeviceClass_NoUseClass__Loc: int;
  var GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkWidth__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_DevNodeStatus__Loc: int;
  var GUID_NWF_WME_ENABLED__Loc: int;
  var DEVPKEY_Device_DriverProvider__Loc: int;
  var DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc: int;
  var DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc: int;
  var DEVPKEY_PciDevice_AERCapabilityPresent__Loc: int;
  var GUID_NWF_WME_AC_PARAMETERS__Loc: int;
  var DEVPKEY_Device_ModelId__Loc: int;
  var GUID_NWF_AP_JOIN_REQUEST__Loc: int;
  var DEVPKEY_DeviceContainer_PrimaryCategory__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var DEVPKEY_Device_Children__Loc: int;
  var DEVPKEY_Device_Stack__Loc: int;
  var DEVPKEY_DeviceContainer_IsLocalMachine__Loc: int;
  var GUID_NWF_MPDU_MAX_LENGTH__Loc: int;
  var GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc: int;
  var DEVPKEY_Device_DriverDate__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_NWF_STATION_ID__Loc: int;
  var GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc: int;
  var DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc: int;
  var GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var DEVPKEY_Device_DriverDesc__Loc: int;
  var GUID_NWF_HOP_MODULUS__Loc: int;
  var DEVPKEY_DeviceClass_NoDisplayClass__Loc: int;
  var GUID_NWF_OFFLOAD_CAPABILITY__Loc: int;
  var GUID_NWF_SUPPORTED_POWER_LEVELS__Loc: int;
  var GUID_NWF_DIVERSITY_SELECTION_RX__Loc: int;
  var GUID_NWF_WME_IMPLEMENTED__Loc: int;
  var DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var DEVPKEY_Device_BusNumber__Loc: int;
  var DEVPKEY_Device_PowerData__Loc: int;
  var DEVPKEY_Device_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_MaxReadRequestSize__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataPath__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc: int;
  var GUID_NWF_CURRENT_SET__Loc: int;
  var GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_DeviceContainer_FriendlyName__Loc: int;
  var DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_Device_PresenceNotForDevice__Loc: int;
  var GUID_NWF_DESIRED_BSSID_LIST__Loc: int;
  var GUID_NWF_ENUM_ASSOCIATION_INFO__Loc: int;
  var DEVPKEY_DeviceInterface_ClassGuid__Loc: int;
  var DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc: int;
  var DEVPKEY_Device_FriendlyNameAttributes__Loc: int;
  var GUID_NWF_NIC_POWER_STATE__Loc: int;
  var GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc: int;
  var DEVPKEY_Device_SessionId__Loc: int;
  var DEVPKEY_DeviceInterface_Enabled__Loc: int;
  var DEVPKEY_DeviceInterface_Restricted__Loc: int;
  var GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc: int;
  var DEVPKEY_Device_TransportRelations__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var DEVPKEY_NAME__Loc: int;
  var DEVPKEY_Device_UINumberDescFormat__Loc: int;
  var GUID_NWF_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_UPDATE_IE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceClass_ClassCoInstallers__Loc: int;
  var GUID_NWF_POWER_MGMT_REQUEST__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_FriendlyName__Loc: int;
  var DEVPKEY_Device_LocationInfo__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Icon__Loc: int;
  var GUID_NWF_DESIRED_PHY_LIST__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc: int;
  var DEVPKEY_Device_Exclusive__Loc: int;
  var GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc: int;
  var DEVPKEY_Device_Numa_Proximity_Domain__Loc: int;
  var GUID_NWF_QOS_TX_DURATION__Loc: int;
  var DEVPKEY_Device_DriverProblemDesc__Loc: int;
  var DEVPKEY_DeviceContainer_IsSharedDevice__Loc: int;
  var GUID_NWF_CURRENT_DWELL_TIME__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciDevice_CurrentLinkWidth__Loc: int;
  var DEVPKEY_Device_UINumber__Loc: int;
  var DEVPKEY_Device_ExtendedConfigurationIds__Loc: int;
  var DEVPKEY_Device_DriverRank__Loc: int;
  var DEVPKEY_DeviceContainer_IsRebootRequired__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc: int;
  var GUID_NWF_PORT_STATE_NOTIFICATION__Loc: int;
  var DEVPKEY_Device_SafeRemovalRequiredOverride__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc: int;
  var DEVPKEY_PciDevice_DeviceType__Loc: int;
  var GUID_NWF_QOS_TX_MEDIUM_TIME__Loc: int;
  var GUID_NWF_DIVERSITY_SUPPORT__Loc: int;
  var GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc: int;
  var DEVPKEY_Device_DriverInfSection__Loc: int;
  var DEVPKEY_DeviceClass_PropPageProvider__Loc: int;
  var GUID_NWF_TEMP_TYPE__Loc: int;
  var DEVPKEY_Device_Class__Loc: int;
  var DEVPKEY_Device_NoConnectSound__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_DeviceClass_DevType__Loc: int;
  var GUID_NWF_CURRENT_PATTERN__Loc: int;
  var DEVPKEY_Device_ManufacturerAttributes__Loc: int;
  var GUID_NWF_ENUM_BSS_LIST__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var DEVPKEY_Device_Reported__Loc: int;
  var DEVPKEY_PciRootBus_NativePciExpressControl__Loc: int;
  var GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_IsNetworkDevice__Loc: int;
  var DEVPKEY_Device_ResourcePickerExceptions__Loc: int;
  var GUID_NWF_OPERATIONAL_RATE_SET__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var DEVPKEY_Device_RemovalPolicyDefault__Loc: int;
  var DEVPKEY_Device_ProblemStatus__Loc: int;
  var GUID_NWF_WEP_UPLOAD__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc: int;
  var GUID_NWF_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var DEVPKEY_Device_EjectionRelations__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var DEVPKEY_PciDevice_MaxLinkSpeed__Loc: int;
  var DEVPKEY_PciDevice_FirmwareErrorHandling__Loc: int;
  var GUID_NWF_CURRENT_OPERATION_MODE__Loc: int;
  var GUID_NWF_STATISTICS__Loc: int;
  var DEVPKEY_Device_IsAssociateableByUserAction__Loc: int;
  var DEVPKEY_DrvPkg_Icon__Loc: int;
  var DEVPKEY_PciDevice_ProgIf__Loc: int;
  var DEVPKEY_Device_AdditionalSoftwareRequested__Loc: int;
  var GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc: int;
  var DEVPKEY_Device_LocationPaths__Loc: int;
  var GUID_NWF_CURRENT_FREQUENCY__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var DEVPKEY_DeviceClass_SilentInstall__Loc: int;
  var DEVPKEY_Device_LegacyBusType__Loc: int;
  var DEVPKEY_DeviceContainer_IsDefaultDevice__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var DEVPKEY_Device_UpperFilters__Loc: int;
  var DEVPKEY_Device_DevType__Loc: int;
  var DEVPKEY_Device_DriverInfPath__Loc: int;
  var DEVPKEY_DeviceInterface_ReferenceString__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc: int;
  var GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc: int;
  var GUID_POWER_PERFORMANCE_IDLE_TIME__Loc: int;
  var DEVPKEY_Device_IsRebootRequired__Loc: int;
  var DEVPKEY_DeviceClass_ClassInstaller__Loc: int;
  var DEVPKEY_DeviceContainer_IsConnected__Loc: int;
  var DEVPKEY_DeviceContainer_Icon__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc: int;
  var DEVPKEY_Device_SecuritySDS__Loc: int;
  var DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc: int;
  var GUID_NWF_CFP_PERIOD__Loc: int;
  var GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc: int;
  var DEVPKEY_Device_InstallDate__Loc: int;
  var DEVPKEY_DeviceClass_LowerFilters__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataChecksum__Loc: int;
  var DEVPKEY_DeviceClass_DefaultService__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_NWF_WEP_ICV_ERROR_COUNT__Loc: int;
  var DEVPKEY_DrvPkg_VendorWebSite__Loc: int;
  var DEVPKEY_DeviceContainer_ConfigFlags__Loc: int;
  var DEVPKEY_PciDevice_AcsSupport__Loc: int;
  var DEVPKEY_Device_RemovalRelations__Loc: int;
  var DEVPKEY_DrvPkg_DocumentationLink__Loc: int;
  var GUID_NWF_MULTICAST_LIST__Loc: int;
  var GUID_NWF_DEFAULT_WEP_UPLOAD__Loc: int;
  var GUID_NWF_RESET_REQUEST__Loc: int;
  var DEVPKEY_Device_BusTypeGuid__Loc: int;
  var GUID_NWF_DTIM_PERIOD__Loc: int;
  var GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc: int;
  var GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc: int;
  var DEVPKEY_Device_ShowInUninstallUI__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc: int;
  var GUID_NWF_CURRENT_ADDRESS__Loc: int;
  var DEVPKEY_Device_ContainerId__Loc: int;
  var DEVPKEY_Device_InLocalMachineContainer__Loc: int;
  var DEVPKEY_DeviceContainer_ExperienceId__Loc: int;
  var GUID_NWF_CURRENT_RX_ANTENNA__Loc: int;
  var GUID_NWF_CIPHER_DEFAULT_KEY__Loc: int;
  var DEVPKEY_Device_FirmwareRevision__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_NWF_SUPPORTED_TX_ANTENNA__Loc: int;
  var DEVPKEY_DeviceContainer_BaselineExperienceId__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryInterface__Loc: int;
  var GUID_NWF_CONNECT_REQUEST__Loc: int;
  var GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc: int;
  var GUID_NWF_EXTSTA_CAPABILITY__Loc: int;
  var DEVPKEY_Device_Security__Loc: int;
  var DEVPKEY_DeviceClass_SecuritySDS__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var DEVPKEY_Device_EnumeratorName__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var DEVPKEY_DeviceClass_Security__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Seen__Loc: int;
  var DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc: int;
  var DEVPKEY_Device_ClassGuid__Loc: int;
  var DEVPKEY_Device_FirstInstallDate__Loc: int;
  var GUID_NWF_MAXIMUM_LIST_SIZE__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_NWF_IBSS_PARAMS__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_NWF_ATIM_WINDOW__Loc: int;
  var GUID_NWF_CF_POLLABLE__Loc: int;
  var GUID_NWF_MAC_ADDRESS__Loc: int;
  var DEVPKEY_Device_BusReportedDeviceDesc__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var GUID_NWF_HOP_TIME__Loc: int;
  var DEVPKEY_Device_RemovalPolicy__Loc: int;
  var DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc: int;
  var GUID_NWF_START_REQUEST__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var DEVPKEY_DeviceClass_Name__Loc: int;
  var DEVPKEY_DeviceContainer_ModelName__Loc: int;
  var DEVPKEY_Device_IsPresent__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var DEVPKEY_Device_RemovalPolicyOverride__Loc: int;
  var DEVPKEY_Device_Model__Loc: int;
  var DEVPKEY_PciDevice_RootError_Reporting__Loc: int;
  var GUID_NWF_SHORT_RETRY_LIMIT__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc: int;
  var DEVPKEY_DeviceContainer_DiscoveryMethod__Loc: int;
  var DEVPKEY_Device_DriverInfSectionExt__Loc: int;
  var DEVPKEY_DeviceClass_ClassName__Loc: int;
  var DEVPKEY_PciRootBus_SystemMsiSupport__Loc: int;
  var GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc: int;
  var GUID_NWF_HOP_OFFSET__Loc: int;
  var DEVPKEY_DeviceContainer_AssociationArray__Loc: int;
  var DEVPKEY_PciRootBus_SecondaryBusWidth__Loc: int;
  var GUID_NWF_ASSOCIATION_PARAMS__Loc: int;
  var DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc: int;
  var DEVPKEY_Device_BaseContainerId__Loc: int;
  var GUID_NWF_FLUSH_BSS_LIST__Loc: int;
  var GUID_NWF_CURRENT_TX_ANTENNA__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var DEVPKEY_Device_BusRelations__Loc: int;
  var GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var DEVPKEY_DeviceContainer_ModelNumber__Loc: int;
  var PCIDRV_WMI_STD_DATA_GUID__Loc: int;
  var DEVPKEY_DeviceContainer_Last_Connected__Loc: int;
  var GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc: int;
  var DEVPKEY_PciDevice_Error_Reporting__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var DEVPKEY_PciRootBus_MSISupport__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc: int;
  var DEVPKEY_Device_SignalStrength__Loc: int;
  var DEVPKEY_Device_DebuggerSafe__Loc: int;
  var DEVPKEY_Device_DriverCoInstallers__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_NWF_OPTIONAL_CAPABILITY__Loc: int;
  var GUID_NWF_EHCC_PRIME_RADIX__Loc: int;
  var GUID_NWF_CURRENT_PHY_TYPE__Loc: int;
  var GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc: int;
  var DEVPKEY_Device_Numa_Node__Loc: int;
  var DEVPKEY_PciDevice_ExpressSpecVersion__Loc: int;
  var DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc: int;
  var GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc: int;
  var GUID_NWF_QOS_PARAMS__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var DEVPKEY_Device_GenericDriverInstalled__Loc: int;
  var GUID_NWF_CURRENT_REG_DOMAIN__Loc: int;
  var GUID_NWF_WME_UPDATE_IE__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc: int;
  var DEVPKEY_Device_Service__Loc: int;
  var DEVPKEY_Device_Capabilities__Loc: int;
  var DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc: int;
  var GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc: int;
  var GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc: int;
  var DEVPKEY_DeviceContainer_MetadataCabinet__Loc: int;
  var GUID_NWF_COUNTERS_ENTRY__Loc: int;
  var GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc: int;
  var GUID_NWF_PHY_STATE__Loc: int;
  var DEVPKEY_Device_Parent__Loc: int;
  var GUID_NWF_MAX_RECEIVE_LIFETIME__Loc: int;
  var DEVPKEY_DeviceContainer_Category__Loc: int;
  var DEVPKEY_PciDevice_ECRC_Errors__Loc: int;
  var GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_NWF_AUTO_CONFIG_ENABLED__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var DEVPKEY_Device_DriverVersion__Loc: int;
  var GUID_NWF_CURRENT_CCA_MODE__Loc: int;
  var DEVPKEY_DrvPkg_Model__Loc: int;
  var DEVPKEY_DeviceClass_IconPath__Loc: int;
  var GUID_NWF_LONG_RETRY_LIMIT__Loc: int;
  var DEVPKEY_PciDevice_InterruptMessageMaximum__Loc: int;
  var GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc: int;
  var DEVPKEY_Device_Legacy__Loc: int;
  var DEVPKEY_Device_Siblings__Loc: int;
  var DEVPKEY_DeviceContainer_HasProblem__Loc: int;
  var Globals__Loc: int;
  var GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc: int;
  var GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc: int;
  var GUID_ALLOW_RTC_WAKE__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_2__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc: int;
  var GUID_DISK_IDLE_TIMEOUT__Loc: int;
  var GUID_ACDC_POWER_SOURCE__Loc: int;
  var GUID_SYSTEM_COOLING_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_3__Loc: int;
  var GUID_LOCK_CONSOLE_ON_WAKE__Loc: int;
  var GUID_VIDEO_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLESTATE_POLICY__Loc: int;
  var GUID_UNATTEND_SLEEP_TIMEOUT__Loc: int;
  var PPM_THERMALCONSTRAINT_GUID__Loc: int;
  var GUID_CRITICAL_POWER_TRANSITION__Loc: int;
  var GUID_SLEEP_IDLE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT__Loc: int;
  var GUID_STANDBY_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_GUID__Loc: int;
  var GUID_TYPICAL_POWER_SAVINGS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc: int;
  var GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_2__Loc: int;
  var GUID_HIBERNATE_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc: int;
  var PPM_IDLESTATES_DATA_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc: int;
  var GUID_POWERBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc: int;
  var GUID_AUDIO_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_THROTTLE_POLICY__Loc: int;
  var GUID_BATTERY_PERCENTAGE_REMAINING__Loc: int;
  var GUID_GLOBAL_USER_PRESENCE__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_2__Loc: int;
  var GUID_APPLAUNCH_BUTTON__Loc: int;
  var GUID_PROCESSOR_ALLOW_THROTTLING__Loc: int;
  var GUID_IDLE_RESILIENCY_PERIOD__Loc: int;
  var GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc: int;
  var GUID_SLEEPBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc: int;
  var GUID_PROCESSOR_IDLE_DISABLE__Loc: int;
  var GUID_CONSOLE_DISPLAY_STATE__Loc: int;
  var GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_0__Loc: int;
  var GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc: int;
  var GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc: int;
  var GUID_LIDSWITCH_STATE_CHANGE__Loc: int;
  var GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc: int;
  var GUID_SESSION_DISPLAY_STATUS__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc: int;
  var GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc: int;
  var GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc: int;
  var GUID_MIN_POWER_SAVINGS__Loc: int;
  var GUID_DEVICE_IDLE_POLICY__Loc: int;
  var GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc: int;
  var GUID_SLEEP_SUBGROUP__Loc: int;
  var GUID_DISK_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_1__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_0__Loc: int;
  var GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_0__Loc: int;
  var GUID_VIDEO_DIM_TIMEOUT__Loc: int;
  var PPM_THERMAL_POLICY_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_TIME_CHECK__Loc: int;
  var GUID_LIDOPEN_POWERSTATE__Loc: int;
  var GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_TIME__Loc: int;
  var GUID_MONITOR_POWER_ON__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MINIMUM__Loc: int;
  var GUID_ALLOW_AWAYMODE__Loc: int;
  var GUID_DISK_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_SYSTEM_BUTTON_SUBGROUP__Loc: int;
  var PPM_PERFMON_PERFSTATE_GUID__Loc: int;
  var GUID_ALLOW_SYSTEM_REQUIRED__Loc: int;
  var GUID_ALLOW_DISPLAY_REQUIRED__Loc: int;
  var PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc: int;
  var GUID_PROCESSOR_PARKING_PERF_STATE__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc: int;
  var PPM_IDLESTATE_CHANGE_GUID__Loc: int;
  var GUID_ALLOW_STANDBY_STATES__Loc: int;
  var GUID_PROCESSOR_PERFSTATE_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc: int;
  var GUID_VIDEO_SUBGROUP__Loc: int;
  var GUID_HIBERNATE_FASTS4_POLICY__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc: int;
  var PPM_PERFSTATE_CHANGE_GUID__Loc: int;
  var GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_USERINTERFACEBUTTON_ACTION__Loc: int;
  var GUID_PCIEXPRESS_ASPM_POLICY__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc: int;
  var GUID_INTSTEER_SUBGROUP__Loc: int;
  var GUID_DISK_BURST_IGNORE_THRESHOLD__Loc: int;
  var GUID_DISK_POWERDOWN_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc: int;
  var PPM_PERFSTATES_DATA_GUID__Loc: int;
  var NO_SUBGROUP_GUID__Loc: int;
  var GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_MODE__Loc: int;
  var ALL_POWERSCHEMES_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc: int;
  var GUID_PROCESSOR_IDLE_TIME_CHECK__Loc: int;
  var GUID_INTSTEER_MODE__Loc: int;
  var GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc: int;
  var GUID_BACKGROUND_TASK_NOTIFICATION__Loc: int;
  var GUID_PROCESSOR_PERF_HISTORY__Loc: int;
  var GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_POLICY__Loc: int;
  var GUID_SESSION_USER_PRESENCE__Loc: int;
  var GUID_LIDCLOSE_ACTION__Loc: int;
  var GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc: int;
  var PPM_IDLE_ACCOUNTING_EX_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_TIME__Loc: int;
  var GUID_MAX_POWER_SAVINGS__Loc: int;
  var GUID_BATTERY_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc: int;
  var GUID_IDLE_BACKGROUND_TASK__Loc: int;
  var GUID_POWERSCHEME_PERSONALITY__Loc: int;
  var GUID_IDLE_RESILIENCY_SUBGROUP__Loc: int;
  var GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc: int;
  var GUID_ACTIVE_POWERSCHEME__Loc: int;
  var GUID_SYSTEM_AWAYMODE__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var SLAM_guard_S_1_init__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var vslice_dummy_var_241: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 927} DEVPKEY_Device_ProblemCode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemCode__Loc == DEVPKEY_Device_ProblemCode;
    assume DEVPKEY_Device_ProblemCode != 0;
    call {:si_unique_call 928} DEVPKEY_Device_DHP_Rebalance_Policy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DHP_Rebalance_Policy__Loc == DEVPKEY_Device_DHP_Rebalance_Policy;
    assume DEVPKEY_Device_DHP_Rebalance_Policy != 0;
    call {:si_unique_call 929} GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE__Loc == GUID_NWF_DATA_RATE_MAPPING_TABLE;
    assume GUID_NWF_DATA_RATE_MAPPING_TABLE != 0;
    call {:si_unique_call 930} DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress__Loc == DEVPKEY_DeviceContainer_IsMetadataSearchInProgress;
    assume DEVPKEY_DeviceContainer_IsMetadataSearchInProgress != 0;
    call {:si_unique_call 931} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 932} DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState__Loc == DEVPKEY_DeviceContainer_IsShowInDisconnectedState;
    assume DEVPKEY_DeviceContainer_IsShowInDisconnectedState != 0;
    call {:si_unique_call 933} GUID_NWF_FRAGMENTATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FRAGMENTATION_THRESHOLD__Loc == GUID_NWF_FRAGMENTATION_THRESHOLD;
    assume GUID_NWF_FRAGMENTATION_THRESHOLD != 0;
    call {:si_unique_call 934} GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES__Loc == GUID_NWF_MAX_MAC_ADDRESS_STATES;
    assume GUID_NWF_MAX_MAC_ADDRESS_STATES != 0;
    call {:si_unique_call 935} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 936} DEVPKEY_Device_SafeRemovalRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequired__Loc == DEVPKEY_Device_SafeRemovalRequired;
    assume DEVPKEY_Device_SafeRemovalRequired != 0;
    call {:si_unique_call 937} DEVPKEY_PciRootBus_PCIExpressAERControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressAERControl__Loc == DEVPKEY_PciRootBus_PCIExpressAERControl;
    assume DEVPKEY_PciRootBus_PCIExpressAERControl != 0;
    call {:si_unique_call 938} DEVPKEY_PciDevice_BaseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BaseClass__Loc == DEVPKEY_PciDevice_BaseClass;
    assume DEVPKEY_PciDevice_BaseClass != 0;
    call {:si_unique_call 939} GUID_NWF_ACTIVE_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ACTIVE_PHY_LIST__Loc == GUID_NWF_ACTIVE_PHY_LIST;
    assume GUID_NWF_ACTIVE_PHY_LIST != 0;
    call {:si_unique_call 940} DEVPKEY_Device_ResourcePickerTags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerTags__Loc == DEVPKEY_Device_ResourcePickerTags;
    assume DEVPKEY_Device_ResourcePickerTags != 0;
    call {:si_unique_call 941} DEVPKEY_DeviceContainer_IsPaired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsPaired__Loc == DEVPKEY_DeviceContainer_IsPaired;
    assume DEVPKEY_DeviceContainer_IsPaired != 0;
    call {:si_unique_call 942} DEVPKEY_Device_HardwareIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HardwareIds__Loc == DEVPKEY_Device_HardwareIds;
    assume DEVPKEY_Device_HardwareIds != 0;
    call {:si_unique_call 943} DEVPKEY_DeviceContainer_InstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_InstallInProgress__Loc == DEVPKEY_DeviceContainer_InstallInProgress;
    assume DEVPKEY_DeviceContainer_InstallInProgress != 0;
    call {:si_unique_call 944} DEVPKEY_PciDevice_MaxPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxPayloadSize__Loc == DEVPKEY_PciDevice_MaxPayloadSize;
    assume DEVPKEY_PciDevice_MaxPayloadSize != 0;
    call {:si_unique_call 945} GUID_NWF_COUNTRY_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTRY_STRING__Loc == GUID_NWF_COUNTRY_STRING;
    assume GUID_NWF_COUNTRY_STRING != 0;
    call {:si_unique_call 946} DEVPKEY_Device_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LowerFilters__Loc == DEVPKEY_Device_LowerFilters;
    assume DEVPKEY_Device_LowerFilters != 0;
    call {:si_unique_call 947} DEVPKEY_Device_FirmwareVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareVersion__Loc == DEVPKEY_Device_FirmwareVersion;
    assume DEVPKEY_Device_FirmwareVersion != 0;
    call {:si_unique_call 948} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 949} GUID_NWF_CURRENT_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_INDEX__Loc == GUID_NWF_CURRENT_INDEX;
    assume GUID_NWF_CURRENT_INDEX != 0;
    call {:si_unique_call 950} GUID_NWF_TI_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TI_THRESHOLD__Loc == GUID_NWF_TI_THRESHOLD;
    assume GUID_NWF_TI_THRESHOLD != 0;
    call {:si_unique_call 951} GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED__Loc == GUID_NWF_ERP_PBCC_OPTION_ENABLED;
    assume GUID_NWF_ERP_PBCC_OPTION_ENABLED != 0;
    call {:si_unique_call 952} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 953} DEVPKEY_PciDevice_BarTypes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_BarTypes__Loc == DEVPKEY_PciDevice_BarTypes;
    assume DEVPKEY_PciDevice_BarTypes != 0;
    call {:si_unique_call 954} GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM__Loc == GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM;
    assume GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM != 0;
    call {:si_unique_call 955} GUID_POWER_CONSERVATION_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_CONSERVATION_IDLE_TIME__Loc == GUID_POWER_CONSERVATION_IDLE_TIME;
    assume GUID_POWER_CONSERVATION_IDLE_TIME != 0;
    call {:si_unique_call 956} GUID_NWF_RECV_SENSITIVITY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RECV_SENSITIVITY_LIST__Loc == GUID_NWF_RECV_SENSITIVITY_LIST;
    assume GUID_NWF_RECV_SENSITIVITY_LIST != 0;
    call {:si_unique_call 957} DEVPKEY_DeviceClass_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_UpperFilters__Loc == DEVPKEY_DeviceClass_UpperFilters;
    assume DEVPKEY_DeviceClass_UpperFilters != 0;
    call {:si_unique_call 958} DEVPKEY_DeviceClass_NoInstallClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoInstallClass__Loc == DEVPKEY_DeviceClass_NoInstallClass;
    assume DEVPKEY_DeviceClass_NoInstallClass != 0;
    call {:si_unique_call 959} GUID_NWF_RANDOM_TABLE_FLAG__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FLAG__Loc == GUID_NWF_RANDOM_TABLE_FLAG;
    assume GUID_NWF_RANDOM_TABLE_FLAG != 0;
    call {:si_unique_call 960} DEVPKEY_Device_DeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DeviceDesc__Loc == DEVPKEY_Device_DeviceDesc;
    assume DEVPKEY_Device_DeviceDesc != 0;
    call {:si_unique_call 961} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 962} DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Mask;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Mask != 0;
    call {:si_unique_call 963} GUID_NWF_RF_USAGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RF_USAGE__Loc == GUID_NWF_RF_USAGE;
    assume GUID_NWF_RF_USAGE != 0;
    call {:si_unique_call 964} DEVPKEY_DeviceContainer_IsEncrypted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsEncrypted__Loc == DEVPKEY_DeviceContainer_IsEncrypted;
    assume DEVPKEY_DeviceContainer_IsEncrypted != 0;
    call {:si_unique_call 965} DEVPKEY_Device_LastArrivalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastArrivalDate__Loc == DEVPKEY_Device_LastArrivalDate;
    assume DEVPKEY_Device_LastArrivalDate != 0;
    call {:si_unique_call 966} GUID_NWF_RSSI_RANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RSSI_RANGE__Loc == GUID_NWF_RSSI_RANGE;
    assume GUID_NWF_RSSI_RANGE != 0;
    call {:si_unique_call 967} GUID_NWF_CURRENT_PHY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_ID__Loc == GUID_NWF_CURRENT_PHY_ID;
    assume GUID_NWF_CURRENT_PHY_ID != 0;
    call {:si_unique_call 968} GUID_NWF_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_JOIN_REQUEST__Loc == GUID_NWF_JOIN_REQUEST;
    assume GUID_NWF_JOIN_REQUEST != 0;
    call {:si_unique_call 969} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 970} DEVPKEY_Device_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Characteristics__Loc == DEVPKEY_Device_Characteristics;
    assume DEVPKEY_Device_Characteristics != 0;
    call {:si_unique_call 971} DEVPKEY_DrvPkg_DetailedDescription__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DetailedDescription__Loc == DEVPKEY_DrvPkg_DetailedDescription;
    assume DEVPKEY_DrvPkg_DetailedDescription != 0;
    call {:si_unique_call 972} DEVPKEY_DeviceContainer_DeviceDescription2__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription2__Loc == DEVPKEY_DeviceContainer_DeviceDescription2;
    assume DEVPKEY_DeviceContainer_DeviceDescription2 != 0;
    call {:si_unique_call 973} DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Desc;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Desc != 0;
    call {:si_unique_call 974} DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode__Loc == DEVPKEY_PciRootBus_CurrentSpeedAndMode;
    assume DEVPKEY_PciRootBus_CurrentSpeedAndMode != 0;
    call {:si_unique_call 975} GUID_NWF_RTS_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RTS_THRESHOLD__Loc == GUID_NWF_RTS_THRESHOLD;
    assume GUID_NWF_RTS_THRESHOLD != 0;
    call {:si_unique_call 976} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 977} DEVPKEY_DeviceClass_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Icon__Loc == DEVPKEY_DeviceClass_Icon;
    assume DEVPKEY_DeviceClass_Icon != 0;
    call {:si_unique_call 978} DEVPKEY_DeviceInterfaceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_Name__Loc == DEVPKEY_DeviceInterfaceClass_Name;
    assume DEVPKEY_DeviceInterfaceClass_Name != 0;
    call {:si_unique_call 979} GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST__Loc == GUID_NWF_PRIVACY_EXEMPTION_LIST;
    assume GUID_NWF_PRIVACY_EXEMPTION_LIST != 0;
    call {:si_unique_call 980} DEVPKEY_Device_InstanceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstanceId__Loc == DEVPKEY_Device_InstanceId;
    assume DEVPKEY_Device_InstanceId != 0;
    call {:si_unique_call 981} GUID_NWF_SUPPORTED_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_RX_ANTENNA__Loc == GUID_NWF_SUPPORTED_RX_ANTENNA;
    assume GUID_NWF_SUPPORTED_RX_ANTENNA != 0;
    call {:si_unique_call 982} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 983} DEVPKEY_Device_LastRemovalDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LastRemovalDate__Loc == DEVPKEY_Device_LastRemovalDate;
    assume DEVPKEY_Device_LastRemovalDate != 0;
    call {:si_unique_call 984} DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation__Loc == DEVPKEY_DeviceContainer_RequiresPairingElevation;
    assume DEVPKEY_DeviceContainer_RequiresPairingElevation != 0;
    call {:si_unique_call 985} GUID_NWF_POWER_MGMT_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_MODE__Loc == GUID_NWF_POWER_MGMT_MODE;
    assume GUID_NWF_POWER_MGMT_MODE != 0;
    call {:si_unique_call 986} GUID_NWF_ED_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ED_THRESHOLD__Loc == GUID_NWF_ED_THRESHOLD;
    assume GUID_NWF_ED_THRESHOLD != 0;
    call {:si_unique_call 987} DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation__Loc == DEVPKEY_DeviceContainer_RequiresUninstallElevation;
    assume DEVPKEY_DeviceContainer_RequiresUninstallElevation != 0;
    call {:si_unique_call 988} GUID_NWF_OPERATION_MODE_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATION_MODE_CAPABILITY__Loc == GUID_NWF_OPERATION_MODE_CAPABILITY;
    assume GUID_NWF_OPERATION_MODE_CAPABILITY != 0;
    call {:si_unique_call 989} DEVPKEY_Device_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Manufacturer__Loc == DEVPKEY_Device_Manufacturer;
    assume DEVPKEY_Device_Manufacturer != 0;
    call {:si_unique_call 990} DEVPKEY_Device_DriverLogoLevel__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverLogoLevel__Loc == DEVPKEY_Device_DriverLogoLevel;
    assume DEVPKEY_Device_DriverLogoLevel != 0;
    call {:si_unique_call 991} DEVPKEY_DeviceContainer_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Address__Loc == DEVPKEY_DeviceContainer_Address;
    assume DEVPKEY_DeviceContainer_Address != 0;
    call {:si_unique_call 992} DEVPKEY_DeviceContainer_IsAuthenticated__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsAuthenticated__Loc == DEVPKEY_DeviceContainer_IsAuthenticated;
    assume DEVPKEY_DeviceContainer_IsAuthenticated != 0;
    call {:si_unique_call 993} DEVPKEY_PciDevice_SubClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SubClass__Loc == DEVPKEY_PciDevice_SubClass;
    assume DEVPKEY_PciDevice_SubClass != 0;
    call {:si_unique_call 994} GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 995} DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 996} GUID_NWF_PERMANENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PERMANENT_ADDRESS__Loc == GUID_NWF_PERMANENT_ADDRESS;
    assume GUID_NWF_PERMANENT_ADDRESS != 0;
    call {:si_unique_call 997} DEVPKEY_Device_ConfigurationId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigurationId__Loc == DEVPKEY_Device_ConfigurationId;
    assume DEVPKEY_Device_ConfigurationId != 0;
    call {:si_unique_call 998} GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL__Loc == GUID_NWF_CURRENT_TX_POWER_LEVEL;
    assume GUID_NWF_CURRENT_TX_POWER_LEVEL != 0;
    call {:si_unique_call 999} GUID_DEVINTERFACE_PCIDRV__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_PCIDRV__Loc == GUID_DEVINTERFACE_PCIDRV;
    assume GUID_DEVINTERFACE_PCIDRV != 0;
    call {:si_unique_call 1000} DEVPKEY_Device_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_HasProblem__Loc == DEVPKEY_Device_HasProblem;
    assume DEVPKEY_Device_HasProblem != 0;
    call {:si_unique_call 1001} DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural__Loc == DEVPKEY_DeviceContainer_Category_Desc_Plural;
    assume DEVPKEY_DeviceContainer_Category_Desc_Plural != 0;
    call {:si_unique_call 1002} GUID_NWF_MEDIA_STREAMING_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIA_STREAMING_ENABLED__Loc == GUID_NWF_MEDIA_STREAMING_ENABLED;
    assume GUID_NWF_MEDIA_STREAMING_ENABLED != 0;
    call {:si_unique_call 1003} DEVPKEY_PciDevice_AriSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AriSupport__Loc == DEVPKEY_PciDevice_AriSupport;
    assume DEVPKEY_PciDevice_AriSupport != 0;
    call {:si_unique_call 1004} GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MAX;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MAX != 0;
    call {:si_unique_call 1005} GUID_NWF_PMKID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PMKID_LIST__Loc == GUID_NWF_PMKID_LIST;
    assume GUID_NWF_PMKID_LIST != 0;
    call {:si_unique_call 1006} DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable__Loc == DEVPKEY_PciRootBus_DeviceIDMessagingCapable;
    assume DEVPKEY_PciRootBus_DeviceIDMessagingCapable != 0;
    call {:si_unique_call 1007} DEVPKEY_Device_PhysicalDeviceLocation__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PhysicalDeviceLocation__Loc == DEVPKEY_Device_PhysicalDeviceLocation;
    assume DEVPKEY_Device_PhysicalDeviceLocation != 0;
    call {:si_unique_call 1008} DEVPKEY_DeviceContainer_Version__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Version__Loc == DEVPKEY_DeviceContainer_Version;
    assume DEVPKEY_DeviceContainer_Version != 0;
    call {:si_unique_call 1009} GUID_NWF_BEACON_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_BEACON_PERIOD__Loc == GUID_NWF_BEACON_PERIOD;
    assume GUID_NWF_BEACON_PERIOD != 0;
    call {:si_unique_call 1010} GUID_NWF_DESIRED_SSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_SSID_LIST__Loc == GUID_NWF_DESIRED_SSID_LIST;
    assume GUID_NWF_DESIRED_SSID_LIST != 0;
    call {:si_unique_call 1011} DEVPKEY_PciRootBus_ASPMSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ASPMSupport__Loc == DEVPKEY_PciRootBus_ASPMSupport;
    assume DEVPKEY_PciRootBus_ASPMSupport != 0;
    call {:si_unique_call 1012} GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY__Loc == GUID_NWF_CURRENT_OFFLOAD_CAPABILITY;
    assume GUID_NWF_CURRENT_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1013} DEVPKEY_Device_PostInstallInProgress__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PostInstallInProgress__Loc == DEVPKEY_Device_PostInstallInProgress;
    assume DEVPKEY_Device_PostInstallInProgress != 0;
    call {:si_unique_call 1014} GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1015} DEVPKEY_Device_Driver__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Driver__Loc == DEVPKEY_Device_Driver;
    assume DEVPKEY_Device_Driver != 0;
    call {:si_unique_call 1016} DEVPKEY_PciDevice_CurrentPayloadSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentPayloadSize__Loc == DEVPKEY_PciDevice_CurrentPayloadSize;
    assume DEVPKEY_PciDevice_CurrentPayloadSize != 0;
    call {:si_unique_call 1017} GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED__Loc == GUID_NWF_DSSS_OFDM_OPTION_ENABLED;
    assume GUID_NWF_DSSS_OFDM_OPTION_ENABLED != 0;
    call {:si_unique_call 1018} GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST__Loc == GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST;
    assume GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST != 0;
    call {:si_unique_call 1019} DEVPKEY_Device_InstallState__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallState__Loc == DEVPKEY_Device_InstallState;
    assume DEVPKEY_Device_InstallState != 0;
    call {:si_unique_call 1020} GUID_NWF_MAX_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_DWELL_TIME__Loc == GUID_NWF_MAX_DWELL_TIME;
    assume GUID_NWF_MAX_DWELL_TIME != 0;
    call {:si_unique_call 1021} GUID_NWF_WPA_TSC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WPA_TSC__Loc == GUID_NWF_WPA_TSC;
    assume GUID_NWF_WPA_TSC != 0;
    call {:si_unique_call 1022} GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1023} GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1024} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 1025} DEVPKEY_PciDevice_Label_String__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_String__Loc == DEVPKEY_PciDevice_Label_String;
    assume DEVPKEY_PciDevice_Label_String != 0;
    call {:si_unique_call 1026} GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS__Loc == GUID_NWF_NUMBER_OF_HOPPING_SETS;
    assume GUID_NWF_NUMBER_OF_HOPPING_SETS != 0;
    call {:si_unique_call 1027} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 1028} DEVPKEY_Device_FirmwareDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareDate__Loc == DEVPKEY_Device_FirmwareDate;
    assume DEVPKEY_Device_FirmwareDate != 0;
    call {:si_unique_call 1029} DEVPKEY_PciDevice_SriovSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_SriovSupport__Loc == DEVPKEY_PciDevice_SriovSupport;
    assume DEVPKEY_PciDevice_SriovSupport != 0;
    call {:si_unique_call 1030} GUID_NWF_SAFE_MODE_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SAFE_MODE_ENABLED__Loc == GUID_NWF_SAFE_MODE_ENABLED;
    assume GUID_NWF_SAFE_MODE_ENABLED != 0;
    call {:si_unique_call 1031} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1032} DEVPKEY_DeviceInterface_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_FriendlyName__Loc == DEVPKEY_DeviceInterface_FriendlyName;
    assume DEVPKEY_DeviceInterface_FriendlyName != 0;
    call {:si_unique_call 1033} DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity__Loc == DEVPKEY_PciDevice_Uncorrectable_Error_Severity;
    assume DEVPKEY_PciDevice_Uncorrectable_Error_Severity != 0;
    call {:si_unique_call 1034} DEVPKEY_PciDevice_S0WakeupSupported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_S0WakeupSupported__Loc == DEVPKEY_PciDevice_S0WakeupSupported;
    assume DEVPKEY_PciDevice_S0WakeupSupported != 0;
    call {:si_unique_call 1035} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 1036} DEVPKEY_PciDevice_InterruptSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptSupport__Loc == DEVPKEY_PciDevice_InterruptSupport;
    assume DEVPKEY_PciDevice_InterruptSupport != 0;
    call {:si_unique_call 1037} DEVPKEY_PciDevice_Label_Id__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Label_Id__Loc == DEVPKEY_PciDevice_Label_Id;
    assume DEVPKEY_PciDevice_Label_Id != 0;
    call {:si_unique_call 1038} DEVPKEY_Device_CompatibleIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_CompatibleIds__Loc == DEVPKEY_Device_CompatibleIds;
    assume DEVPKEY_Device_CompatibleIds != 0;
    call {:si_unique_call 1039} DEVPKEY_Device_ReportedDeviceIdsHash__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ReportedDeviceIdsHash__Loc == DEVPKEY_Device_ReportedDeviceIdsHash;
    assume DEVPKEY_Device_ReportedDeviceIdsHash != 0;
    call {:si_unique_call 1040} DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport__Loc == DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport;
    assume DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport != 0;
    call {:si_unique_call 1041} GUID_NWF_CURRENT_CHANNEL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL__Loc == GUID_NWF_CURRENT_CHANNEL;
    assume GUID_NWF_CURRENT_CHANNEL != 0;
    call {:si_unique_call 1042} GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1043} DEVPKEY_Device_DriverPropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverPropPageProvider__Loc == DEVPKEY_Device_DriverPropPageProvider;
    assume DEVPKEY_Device_DriverPropPageProvider != 0;
    call {:si_unique_call 1044} DEVPKEY_DeviceContainer_UnpairUninstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_UnpairUninstall__Loc == DEVPKEY_DeviceContainer_UnpairUninstall;
    assume DEVPKEY_DeviceContainer_UnpairUninstall != 0;
    call {:si_unique_call 1045} DEVPKEY_PciDevice_CurrentLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkSpeed__Loc == DEVPKEY_PciDevice_CurrentLinkSpeed;
    assume DEVPKEY_PciDevice_CurrentLinkSpeed != 0;
    call {:si_unique_call 1046} GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION__Loc == GUID_NWF_NIC_SPECIFIC_EXTENSION;
    assume GUID_NWF_NIC_SPECIFIC_EXTENSION != 0;
    call {:si_unique_call 1047} DEVPKEY_Device_BiosDeviceName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BiosDeviceName__Loc == DEVPKEY_Device_BiosDeviceName;
    assume DEVPKEY_Device_BiosDeviceName != 0;
    call {:si_unique_call 1048} GUID_NWF_CFP_MAX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_MAX_DURATION__Loc == GUID_NWF_CFP_MAX_DURATION;
    assume GUID_NWF_CFP_MAX_DURATION != 0;
    call {:si_unique_call 1049} GUID_NWF_HOPPING_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOPPING_PATTERN__Loc == GUID_NWF_HOPPING_PATTERN;
    assume GUID_NWF_HOPPING_PATTERN != 0;
    call {:si_unique_call 1050} GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER__Loc == GUID_NWF_CURRENT_CHANNEL_NUMBER;
    assume GUID_NWF_CURRENT_CHANNEL_NUMBER != 0;
    call {:si_unique_call 1051} GUID_NWF_DISCONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DISCONNECT_REQUEST__Loc == GUID_NWF_DISCONNECT_REQUEST;
    assume GUID_NWF_DISCONNECT_REQUEST != 0;
    call {:si_unique_call 1052} GUID_NWF_CURRENT_PACKET_FILTER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PACKET_FILTER__Loc == GUID_NWF_CURRENT_PACKET_FILTER;
    assume GUID_NWF_CURRENT_PACKET_FILTER != 0;
    call {:si_unique_call 1053} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1054} DEVPKEY_Device_PowerRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerRelations__Loc == DEVPKEY_Device_PowerRelations;
    assume DEVPKEY_Device_PowerRelations != 0;
    call {:si_unique_call 1055} DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer != 0;
    call {:si_unique_call 1056} GUID_NWF_SUPPORTED_PHY_TYPES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_PHY_TYPES__Loc == GUID_NWF_SUPPORTED_PHY_TYPES;
    assume GUID_NWF_SUPPORTED_PHY_TYPES != 0;
    call {:si_unique_call 1057} GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED__Loc == GUID_NWF_HOP_ALGORITHM_ADOPTED;
    assume GUID_NWF_HOP_ALGORITHM_ADOPTED != 0;
    call {:si_unique_call 1058} DEVPKEY_DrvPkg_BrandingIcon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_BrandingIcon__Loc == DEVPKEY_DrvPkg_BrandingIcon;
    assume DEVPKEY_DrvPkg_BrandingIcon != 0;
    call {:si_unique_call 1059} DEVPKEY_DeviceClass_Characteristics__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Characteristics__Loc == DEVPKEY_DeviceClass_Characteristics;
    assume DEVPKEY_DeviceClass_Characteristics != 0;
    call {:si_unique_call 1060} GUID_NWF_SCAN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SCAN_REQUEST__Loc == GUID_NWF_SCAN_REQUEST;
    assume GUID_NWF_SCAN_REQUEST != 0;
    call {:si_unique_call 1061} GUID_NWF_DESIRED_BSS_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSS_TYPE__Loc == GUID_NWF_DESIRED_BSS_TYPE;
    assume GUID_NWF_DESIRED_BSS_TYPE != 0;
    call {:si_unique_call 1062} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 1063} DEVPKEY_Device_MatchingDeviceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_MatchingDeviceId__Loc == DEVPKEY_Device_MatchingDeviceId;
    assume DEVPKEY_Device_MatchingDeviceId != 0;
    call {:si_unique_call 1064} GUID_NWF_EXCLUDE_UNENCRYPTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDE_UNENCRYPTED__Loc == GUID_NWF_EXCLUDE_UNENCRYPTED;
    assume GUID_NWF_EXCLUDE_UNENCRYPTED != 0;
    call {:si_unique_call 1065} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 1066} GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST__Loc == GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST;
    assume GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST != 0;
    call {:si_unique_call 1067} DEVPKEY_Device_PDOName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PDOName__Loc == DEVPKEY_Device_PDOName;
    assume DEVPKEY_Device_PDOName != 0;
    call {:si_unique_call 1068} DEVPKEY_Device_Address__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Address__Loc == DEVPKEY_Device_Address;
    assume DEVPKEY_Device_Address != 0;
    call {:si_unique_call 1069} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 1070} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1071} DEVPKEY_DeviceClass_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Exclusive__Loc == DEVPKEY_DeviceClass_Exclusive;
    assume DEVPKEY_DeviceClass_Exclusive != 0;
    call {:si_unique_call 1072} DEVPKEY_PciDevice_Correctable_Error_Mask__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Correctable_Error_Mask__Loc == DEVPKEY_PciDevice_Correctable_Error_Mask;
    assume DEVPKEY_PciDevice_Correctable_Error_Mask != 0;
    call {:si_unique_call 1073} DEVPKEY_DeviceContainer_DeviceDescription1__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceDescription1__Loc == DEVPKEY_DeviceContainer_DeviceDescription1;
    assume DEVPKEY_DeviceContainer_DeviceDescription1 != 0;
    call {:si_unique_call 1074} GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED != 0;
    call {:si_unique_call 1075} DEVPKEY_DeviceContainer_Manufacturer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Manufacturer__Loc == DEVPKEY_DeviceContainer_Manufacturer;
    assume DEVPKEY_DeviceContainer_Manufacturer != 0;
    call {:si_unique_call 1076} DEVPKEY_DeviceClass_NoUseClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoUseClass__Loc == DEVPKEY_DeviceClass_NoUseClass;
    assume DEVPKEY_DeviceClass_NoUseClass != 0;
    call {:si_unique_call 1077} GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE__Loc == GUID_NWF_SUPPORTED_DATA_RATES_VALUE;
    assume GUID_NWF_SUPPORTED_DATA_RATES_VALUE != 0;
    call {:si_unique_call 1078} GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED__Loc == GUID_NWF_CHANNEL_AGILITY_ENABLED;
    assume GUID_NWF_CHANNEL_AGILITY_ENABLED != 0;
    call {:si_unique_call 1079} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1080} DEVPKEY_PciDevice_MaxLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkWidth__Loc == DEVPKEY_PciDevice_MaxLinkWidth;
    assume DEVPKEY_PciDevice_MaxLinkWidth != 0;
    call {:si_unique_call 1081} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1082} DEVPKEY_Device_DevNodeStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevNodeStatus__Loc == DEVPKEY_Device_DevNodeStatus;
    assume DEVPKEY_Device_DevNodeStatus != 0;
    call {:si_unique_call 1083} GUID_NWF_WME_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_ENABLED__Loc == GUID_NWF_WME_ENABLED;
    assume GUID_NWF_WME_ENABLED != 0;
    call {:si_unique_call 1084} DEVPKEY_Device_DriverProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProvider__Loc == DEVPKEY_Device_DriverProvider;
    assume DEVPKEY_Device_DriverProvider != 0;
    call {:si_unique_call 1085} DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon__Loc == DEVPKEY_DeviceContainer_CategoryGroup_Icon;
    assume DEVPKEY_DeviceContainer_CategoryGroup_Icon != 0;
    call {:si_unique_call 1086} DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode__Loc == DEVPKEY_PciDevice_CurrentSpeedAndMode;
    assume DEVPKEY_PciDevice_CurrentSpeedAndMode != 0;
    call {:si_unique_call 1087} DEVPKEY_PciDevice_AERCapabilityPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AERCapabilityPresent__Loc == DEVPKEY_PciDevice_AERCapabilityPresent;
    assume DEVPKEY_PciDevice_AERCapabilityPresent != 0;
    call {:si_unique_call 1088} GUID_NWF_WME_AC_PARAMETERS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_AC_PARAMETERS__Loc == GUID_NWF_WME_AC_PARAMETERS;
    assume GUID_NWF_WME_AC_PARAMETERS != 0;
    call {:si_unique_call 1089} DEVPKEY_Device_ModelId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ModelId__Loc == DEVPKEY_Device_ModelId;
    assume DEVPKEY_Device_ModelId != 0;
    call {:si_unique_call 1090} GUID_NWF_AP_JOIN_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AP_JOIN_REQUEST__Loc == GUID_NWF_AP_JOIN_REQUEST;
    assume GUID_NWF_AP_JOIN_REQUEST != 0;
    call {:si_unique_call 1091} DEVPKEY_DeviceContainer_PrimaryCategory__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_PrimaryCategory__Loc == DEVPKEY_DeviceContainer_PrimaryCategory;
    assume DEVPKEY_DeviceContainer_PrimaryCategory != 0;
    call {:si_unique_call 1092} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 1093} DEVPKEY_Device_Children__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Children__Loc == DEVPKEY_Device_Children;
    assume DEVPKEY_Device_Children != 0;
    call {:si_unique_call 1094} DEVPKEY_Device_Stack__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Stack__Loc == DEVPKEY_Device_Stack;
    assume DEVPKEY_Device_Stack != 0;
    call {:si_unique_call 1095} DEVPKEY_DeviceContainer_IsLocalMachine__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsLocalMachine__Loc == DEVPKEY_DeviceContainer_IsLocalMachine;
    assume DEVPKEY_DeviceContainer_IsLocalMachine != 0;
    call {:si_unique_call 1096} GUID_NWF_MPDU_MAX_LENGTH__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MPDU_MAX_LENGTH__Loc == GUID_NWF_MPDU_MAX_LENGTH;
    assume GUID_NWF_MPDU_MAX_LENGTH != 0;
    call {:si_unique_call 1097} GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY__Loc == GUID_NWF_CURRENT_OPTIONAL_CAPABILITY;
    assume GUID_NWF_CURRENT_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1098} DEVPKEY_Device_DriverDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDate__Loc == DEVPKEY_Device_DriverDate;
    assume DEVPKEY_Device_DriverDate != 0;
    call {:si_unique_call 1099} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 1100} GUID_NWF_STATION_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATION_ID__Loc == GUID_NWF_STATION_ID;
    assume GUID_NWF_STATION_ID != 0;
    call {:si_unique_call 1101} GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE__Loc == GUID_NWF_REG_DOMAINS_SUPPORT_VALUE;
    assume GUID_NWF_REG_DOMAINS_SUPPORT_VALUE != 0;
    call {:si_unique_call 1102} DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect__Loc == DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect;
    assume DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect != 0;
    call {:si_unique_call 1103} GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT__Loc == GUID_NWF_MEDIUM_OCCUPANCY_LIMIT;
    assume GUID_NWF_MEDIUM_OCCUPANCY_LIMIT != 0;
    call {:si_unique_call 1104} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 1105} DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank__Loc == DEVPKEY_DeviceContainer_DeviceFunctionSubRank;
    assume DEVPKEY_DeviceContainer_DeviceFunctionSubRank != 0;
    call {:si_unique_call 1106} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 1107} DEVPKEY_Device_DriverDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverDesc__Loc == DEVPKEY_Device_DriverDesc;
    assume DEVPKEY_Device_DriverDesc != 0;
    call {:si_unique_call 1108} GUID_NWF_HOP_MODULUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_MODULUS__Loc == GUID_NWF_HOP_MODULUS;
    assume GUID_NWF_HOP_MODULUS != 0;
    call {:si_unique_call 1109} DEVPKEY_DeviceClass_NoDisplayClass__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_NoDisplayClass__Loc == DEVPKEY_DeviceClass_NoDisplayClass;
    assume DEVPKEY_DeviceClass_NoDisplayClass != 0;
    call {:si_unique_call 1110} GUID_NWF_OFFLOAD_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OFFLOAD_CAPABILITY__Loc == GUID_NWF_OFFLOAD_CAPABILITY;
    assume GUID_NWF_OFFLOAD_CAPABILITY != 0;
    call {:si_unique_call 1111} GUID_NWF_SUPPORTED_POWER_LEVELS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_POWER_LEVELS__Loc == GUID_NWF_SUPPORTED_POWER_LEVELS;
    assume GUID_NWF_SUPPORTED_POWER_LEVELS != 0;
    call {:si_unique_call 1112} GUID_NWF_DIVERSITY_SELECTION_RX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SELECTION_RX__Loc == GUID_NWF_DIVERSITY_SELECTION_RX;
    assume GUID_NWF_DIVERSITY_SELECTION_RX != 0;
    call {:si_unique_call 1113} GUID_NWF_WME_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_IMPLEMENTED__Loc == GUID_NWF_WME_IMPLEMENTED;
    assume GUID_NWF_WME_IMPLEMENTED != 0;
    call {:si_unique_call 1114} DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected__Loc == DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected;
    assume DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected != 0;
    call {:si_unique_call 1115} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 1116} DEVPKEY_Device_BusNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusNumber__Loc == DEVPKEY_Device_BusNumber;
    assume DEVPKEY_Device_BusNumber != 0;
    call {:si_unique_call 1117} DEVPKEY_Device_PowerData__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PowerData__Loc == DEVPKEY_Device_PowerData;
    assume DEVPKEY_Device_PowerData != 0;
    call {:si_unique_call 1118} DEVPKEY_Device_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ConfigFlags__Loc == DEVPKEY_Device_ConfigFlags;
    assume DEVPKEY_Device_ConfigFlags != 0;
    call {:si_unique_call 1119} DEVPKEY_PciDevice_MaxReadRequestSize__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxReadRequestSize__Loc == DEVPKEY_PciDevice_MaxReadRequestSize;
    assume DEVPKEY_PciDevice_MaxReadRequestSize != 0;
    call {:si_unique_call 1120} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 1121} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 1122} DEVPKEY_DeviceContainer_MetadataPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataPath__Loc == DEVPKEY_DeviceContainer_MetadataPath;
    assume DEVPKEY_DeviceContainer_MetadataPath != 0;
    call {:si_unique_call 1123} GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID__Loc == GUID_NWF_CIPHER_DEFAULT_KEY_ID;
    assume GUID_NWF_CIPHER_DEFAULT_KEY_ID != 0;
    call {:si_unique_call 1124} GUID_NWF_CURRENT_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_SET__Loc == GUID_NWF_CURRENT_SET;
    assume GUID_NWF_CURRENT_SET != 0;
    call {:si_unique_call 1125} GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1126} DEVPKEY_DeviceContainer_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_FriendlyName__Loc == DEVPKEY_DeviceContainer_FriendlyName;
    assume DEVPKEY_DeviceContainer_FriendlyName != 0;
    call {:si_unique_call 1127} DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes__Loc == DEVPKEY_PciRootBus_SupportedSpeedsAndModes;
    assume DEVPKEY_PciRootBus_SupportedSpeedsAndModes != 0;
    call {:si_unique_call 1128} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1129} DEVPKEY_Device_PresenceNotForDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_PresenceNotForDevice__Loc == DEVPKEY_Device_PresenceNotForDevice;
    assume DEVPKEY_Device_PresenceNotForDevice != 0;
    call {:si_unique_call 1130} GUID_NWF_DESIRED_BSSID_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_BSSID_LIST__Loc == GUID_NWF_DESIRED_BSSID_LIST;
    assume GUID_NWF_DESIRED_BSSID_LIST != 0;
    call {:si_unique_call 1131} GUID_NWF_ENUM_ASSOCIATION_INFO__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_ASSOCIATION_INFO__Loc == GUID_NWF_ENUM_ASSOCIATION_INFO;
    assume GUID_NWF_ENUM_ASSOCIATION_INFO != 0;
    call {:si_unique_call 1132} DEVPKEY_DeviceInterface_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ClassGuid__Loc == DEVPKEY_DeviceInterface_ClassGuid;
    assume DEVPKEY_DeviceInterface_ClassGuid != 0;
    call {:si_unique_call 1133} DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable__Loc == DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable;
    assume DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable != 0;
    call {:si_unique_call 1134} DEVPKEY_Device_FriendlyNameAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyNameAttributes__Loc == DEVPKEY_Device_FriendlyNameAttributes;
    assume DEVPKEY_Device_FriendlyNameAttributes != 0;
    call {:si_unique_call 1135} GUID_NWF_NIC_POWER_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_NIC_POWER_STATE__Loc == GUID_NWF_NIC_POWER_STATE;
    assume GUID_NWF_NIC_POWER_STATE != 0;
    call {:si_unique_call 1136} GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST__Loc == GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST;
    assume GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST != 0;
    call {:si_unique_call 1137} DEVPKEY_Device_SessionId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SessionId__Loc == DEVPKEY_Device_SessionId;
    assume DEVPKEY_Device_SessionId != 0;
    call {:si_unique_call 1138} DEVPKEY_DeviceInterface_Enabled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Enabled__Loc == DEVPKEY_DeviceInterface_Enabled;
    assume DEVPKEY_DeviceInterface_Enabled != 0;
    call {:si_unique_call 1139} DEVPKEY_DeviceInterface_Restricted__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_Restricted__Loc == DEVPKEY_DeviceInterface_Restricted;
    assume DEVPKEY_DeviceInterface_Restricted != 0;
    call {:si_unique_call 1140} GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED__Loc == GUID_NWF_FREQUENCY_BANDS_SUPPORTED;
    assume GUID_NWF_FREQUENCY_BANDS_SUPPORTED != 0;
    call {:si_unique_call 1141} DEVPKEY_Device_TransportRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_TransportRelations__Loc == DEVPKEY_Device_TransportRelations;
    assume DEVPKEY_Device_TransportRelations != 0;
    call {:si_unique_call 1142} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 1143} DEVPKEY_NAME__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_NAME__Loc == DEVPKEY_NAME;
    assume DEVPKEY_NAME != 0;
    call {:si_unique_call 1144} DEVPKEY_Device_UINumberDescFormat__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumberDescFormat__Loc == DEVPKEY_Device_UINumberDescFormat;
    assume DEVPKEY_Device_UINumberDescFormat != 0;
    call {:si_unique_call 1145} GUID_NWF_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_OFFLOAD__Loc == GUID_NWF_WEP_OFFLOAD;
    assume GUID_NWF_WEP_OFFLOAD != 0;
    call {:si_unique_call 1146} GUID_NWF_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UPDATE_IE__Loc == GUID_NWF_UPDATE_IE;
    assume GUID_NWF_UPDATE_IE != 0;
    call {:si_unique_call 1147} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 1148} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 1149} DEVPKEY_DeviceClass_ClassCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassCoInstallers__Loc == DEVPKEY_DeviceClass_ClassCoInstallers;
    assume DEVPKEY_DeviceClass_ClassCoInstallers != 0;
    call {:si_unique_call 1150} GUID_NWF_POWER_MGMT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_POWER_MGMT_REQUEST__Loc == GUID_NWF_POWER_MGMT_REQUEST;
    assume GUID_NWF_POWER_MGMT_REQUEST != 0;
    call {:si_unique_call 1151} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 1152} DEVPKEY_Device_FriendlyName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FriendlyName__Loc == DEVPKEY_Device_FriendlyName;
    assume DEVPKEY_Device_FriendlyName != 0;
    call {:si_unique_call 1153} DEVPKEY_Device_LocationInfo__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationInfo__Loc == DEVPKEY_Device_LocationInfo;
    assume DEVPKEY_Device_LocationInfo != 0;
    call {:si_unique_call 1154} DEVPKEY_DeviceContainer_Category_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Icon__Loc == DEVPKEY_DeviceContainer_Category_Icon;
    assume DEVPKEY_DeviceContainer_Category_Icon != 0;
    call {:si_unique_call 1155} GUID_NWF_DESIRED_PHY_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_PHY_LIST__Loc == GUID_NWF_DESIRED_PHY_LIST;
    assume GUID_NWF_DESIRED_PHY_LIST != 0;
    call {:si_unique_call 1156} GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MAX;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MAX != 0;
    call {:si_unique_call 1157} DEVPKEY_Device_Exclusive__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Exclusive__Loc == DEVPKEY_Device_Exclusive;
    assume DEVPKEY_Device_Exclusive != 0;
    call {:si_unique_call 1158} GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY__Loc == GUID_NWF_CIPHER_KEY_MAPPING_KEY;
    assume GUID_NWF_CIPHER_KEY_MAPPING_KEY != 0;
    call {:si_unique_call 1159} DEVPKEY_Device_Numa_Proximity_Domain__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Proximity_Domain__Loc == DEVPKEY_Device_Numa_Proximity_Domain;
    assume DEVPKEY_Device_Numa_Proximity_Domain != 0;
    call {:si_unique_call 1160} GUID_NWF_QOS_TX_DURATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_DURATION__Loc == GUID_NWF_QOS_TX_DURATION;
    assume GUID_NWF_QOS_TX_DURATION != 0;
    call {:si_unique_call 1161} DEVPKEY_Device_DriverProblemDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverProblemDesc__Loc == DEVPKEY_Device_DriverProblemDesc;
    assume DEVPKEY_Device_DriverProblemDesc != 0;
    call {:si_unique_call 1162} DEVPKEY_DeviceContainer_IsSharedDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsSharedDevice__Loc == DEVPKEY_DeviceContainer_IsSharedDevice;
    assume DEVPKEY_DeviceContainer_IsSharedDevice != 0;
    call {:si_unique_call 1163} GUID_NWF_CURRENT_DWELL_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_DWELL_TIME__Loc == GUID_NWF_CURRENT_DWELL_TIME;
    assume GUID_NWF_CURRENT_DWELL_TIME != 0;
    call {:si_unique_call 1164} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1165} DEVPKEY_PciDevice_CurrentLinkWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_CurrentLinkWidth__Loc == DEVPKEY_PciDevice_CurrentLinkWidth;
    assume DEVPKEY_PciDevice_CurrentLinkWidth != 0;
    call {:si_unique_call 1166} DEVPKEY_Device_UINumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UINumber__Loc == DEVPKEY_Device_UINumber;
    assume DEVPKEY_Device_UINumber != 0;
    call {:si_unique_call 1167} DEVPKEY_Device_ExtendedConfigurationIds__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ExtendedConfigurationIds__Loc == DEVPKEY_Device_ExtendedConfigurationIds;
    assume DEVPKEY_Device_ExtendedConfigurationIds != 0;
    call {:si_unique_call 1168} DEVPKEY_Device_DriverRank__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverRank__Loc == DEVPKEY_Device_DriverRank;
    assume DEVPKEY_Device_DriverRank != 0;
    call {:si_unique_call 1169} DEVPKEY_DeviceContainer_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsRebootRequired__Loc == DEVPKEY_DeviceContainer_IsRebootRequired;
    assume DEVPKEY_DeviceContainer_IsRebootRequired != 0;
    call {:si_unique_call 1170} DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativePMEControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativePMEControl != 0;
    call {:si_unique_call 1171} GUID_NWF_PORT_STATE_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PORT_STATE_NOTIFICATION__Loc == GUID_NWF_PORT_STATE_NOTIFICATION;
    assume GUID_NWF_PORT_STATE_NOTIFICATION != 0;
    call {:si_unique_call 1172} DEVPKEY_Device_SafeRemovalRequiredOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SafeRemovalRequiredOverride__Loc == DEVPKEY_Device_SafeRemovalRequiredOverride;
    assume DEVPKEY_Device_SafeRemovalRequiredOverride != 0;
    call {:si_unique_call 1173} DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl != 0;
    call {:si_unique_call 1174} DEVPKEY_PciDevice_DeviceType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_DeviceType__Loc == DEVPKEY_PciDevice_DeviceType;
    assume DEVPKEY_PciDevice_DeviceType != 0;
    call {:si_unique_call 1175} GUID_NWF_QOS_TX_MEDIUM_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_MEDIUM_TIME__Loc == GUID_NWF_QOS_TX_MEDIUM_TIME;
    assume GUID_NWF_QOS_TX_MEDIUM_TIME != 0;
    call {:si_unique_call 1176} GUID_NWF_DIVERSITY_SUPPORT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DIVERSITY_SUPPORT__Loc == GUID_NWF_DIVERSITY_SUPPORT;
    assume GUID_NWF_DIVERSITY_SUPPORT != 0;
    call {:si_unique_call 1177} GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR__Loc == GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR;
    assume GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR != 0;
    call {:si_unique_call 1178} DEVPKEY_Device_DriverInfSection__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSection__Loc == DEVPKEY_Device_DriverInfSection;
    assume DEVPKEY_Device_DriverInfSection != 0;
    call {:si_unique_call 1179} DEVPKEY_DeviceClass_PropPageProvider__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_PropPageProvider__Loc == DEVPKEY_DeviceClass_PropPageProvider;
    assume DEVPKEY_DeviceClass_PropPageProvider != 0;
    call {:si_unique_call 1180} GUID_NWF_TEMP_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_TEMP_TYPE__Loc == GUID_NWF_TEMP_TYPE;
    assume GUID_NWF_TEMP_TYPE != 0;
    call {:si_unique_call 1181} DEVPKEY_Device_Class__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Class__Loc == DEVPKEY_Device_Class;
    assume DEVPKEY_Device_Class != 0;
    call {:si_unique_call 1182} DEVPKEY_Device_NoConnectSound__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_NoConnectSound__Loc == DEVPKEY_Device_NoConnectSound;
    assume DEVPKEY_Device_NoConnectSound != 0;
    call {:si_unique_call 1183} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1184} DEVPKEY_DeviceClass_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DevType__Loc == DEVPKEY_DeviceClass_DevType;
    assume DEVPKEY_DeviceClass_DevType != 0;
    call {:si_unique_call 1185} GUID_NWF_CURRENT_PATTERN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PATTERN__Loc == GUID_NWF_CURRENT_PATTERN;
    assume GUID_NWF_CURRENT_PATTERN != 0;
    call {:si_unique_call 1186} DEVPKEY_Device_ManufacturerAttributes__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ManufacturerAttributes__Loc == DEVPKEY_Device_ManufacturerAttributes;
    assume DEVPKEY_Device_ManufacturerAttributes != 0;
    call {:si_unique_call 1187} GUID_NWF_ENUM_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENUM_BSS_LIST__Loc == GUID_NWF_ENUM_BSS_LIST;
    assume GUID_NWF_ENUM_BSS_LIST != 0;
    call {:si_unique_call 1188} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 1189} DEVPKEY_Device_Reported__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Reported__Loc == DEVPKEY_Device_Reported;
    assume DEVPKEY_Device_Reported != 0;
    call {:si_unique_call 1190} DEVPKEY_PciRootBus_NativePciExpressControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_NativePciExpressControl__Loc == DEVPKEY_PciRootBus_NativePciExpressControl;
    assume DEVPKEY_PciRootBus_NativePciExpressControl != 0;
    call {:si_unique_call 1191} GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME__Loc == GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME;
    assume GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME != 0;
    call {:si_unique_call 1192} DEVPKEY_DeviceContainer_IsNetworkDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNetworkDevice__Loc == DEVPKEY_DeviceContainer_IsNetworkDevice;
    assume DEVPKEY_DeviceContainer_IsNetworkDevice != 0;
    call {:si_unique_call 1193} DEVPKEY_Device_ResourcePickerExceptions__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ResourcePickerExceptions__Loc == DEVPKEY_Device_ResourcePickerExceptions;
    assume DEVPKEY_Device_ResourcePickerExceptions != 0;
    call {:si_unique_call 1194} GUID_NWF_OPERATIONAL_RATE_SET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPERATIONAL_RATE_SET__Loc == GUID_NWF_OPERATIONAL_RATE_SET;
    assume GUID_NWF_OPERATIONAL_RATE_SET != 0;
    call {:si_unique_call 1195} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 1196} DEVPKEY_Device_RemovalPolicyDefault__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyDefault__Loc == DEVPKEY_Device_RemovalPolicyDefault;
    assume DEVPKEY_Device_RemovalPolicyDefault != 0;
    call {:si_unique_call 1197} DEVPKEY_Device_ProblemStatus__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ProblemStatus__Loc == DEVPKEY_Device_ProblemStatus;
    assume DEVPKEY_Device_ProblemStatus != 0;
    call {:si_unique_call 1198} GUID_NWF_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_UPLOAD__Loc == GUID_NWF_WEP_UPLOAD;
    assume GUID_NWF_WEP_UPLOAD != 0;
    call {:si_unique_call 1199} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 1200} DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay__Loc == DEVPKEY_DeviceContainer_IsNotInterestingForDisplay;
    assume DEVPKEY_DeviceContainer_IsNotInterestingForDisplay != 0;
    call {:si_unique_call 1201} GUID_NWF_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_MODE_SUPPORTED__Loc == GUID_NWF_CCA_MODE_SUPPORTED;
    assume GUID_NWF_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1202} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 1203} DEVPKEY_Device_EjectionRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EjectionRelations__Loc == DEVPKEY_Device_EjectionRelations;
    assume DEVPKEY_Device_EjectionRelations != 0;
    call {:si_unique_call 1204} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 1205} DEVPKEY_PciDevice_MaxLinkSpeed__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_MaxLinkSpeed__Loc == DEVPKEY_PciDevice_MaxLinkSpeed;
    assume DEVPKEY_PciDevice_MaxLinkSpeed != 0;
    call {:si_unique_call 1206} DEVPKEY_PciDevice_FirmwareErrorHandling__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_FirmwareErrorHandling__Loc == DEVPKEY_PciDevice_FirmwareErrorHandling;
    assume DEVPKEY_PciDevice_FirmwareErrorHandling != 0;
    call {:si_unique_call 1207} GUID_NWF_CURRENT_OPERATION_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_OPERATION_MODE__Loc == GUID_NWF_CURRENT_OPERATION_MODE;
    assume GUID_NWF_CURRENT_OPERATION_MODE != 0;
    call {:si_unique_call 1208} GUID_NWF_STATISTICS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_STATISTICS__Loc == GUID_NWF_STATISTICS;
    assume GUID_NWF_STATISTICS != 0;
    call {:si_unique_call 1209} DEVPKEY_Device_IsAssociateableByUserAction__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsAssociateableByUserAction__Loc == DEVPKEY_Device_IsAssociateableByUserAction;
    assume DEVPKEY_Device_IsAssociateableByUserAction != 0;
    call {:si_unique_call 1210} DEVPKEY_DrvPkg_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Icon__Loc == DEVPKEY_DrvPkg_Icon;
    assume DEVPKEY_DrvPkg_Icon != 0;
    call {:si_unique_call 1211} DEVPKEY_PciDevice_ProgIf__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ProgIf__Loc == DEVPKEY_PciDevice_ProgIf;
    assume DEVPKEY_PciDevice_ProgIf != 0;
    call {:si_unique_call 1212} DEVPKEY_Device_AdditionalSoftwareRequested__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_AdditionalSoftwareRequested__Loc == DEVPKEY_Device_AdditionalSoftwareRequested;
    assume DEVPKEY_Device_AdditionalSoftwareRequested != 0;
    call {:si_unique_call 1213} GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT__Loc == GUID_NWF_CHANNEL_AGILITY_PRESENT;
    assume GUID_NWF_CHANNEL_AGILITY_PRESENT != 0;
    call {:si_unique_call 1214} DEVPKEY_Device_LocationPaths__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LocationPaths__Loc == DEVPKEY_Device_LocationPaths;
    assume DEVPKEY_Device_LocationPaths != 0;
    call {:si_unique_call 1215} GUID_NWF_CURRENT_FREQUENCY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_FREQUENCY__Loc == GUID_NWF_CURRENT_FREQUENCY;
    assume GUID_NWF_CURRENT_FREQUENCY != 0;
    call {:si_unique_call 1216} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 1217} DEVPKEY_DeviceClass_SilentInstall__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SilentInstall__Loc == DEVPKEY_DeviceClass_SilentInstall;
    assume DEVPKEY_DeviceClass_SilentInstall != 0;
    call {:si_unique_call 1218} DEVPKEY_Device_LegacyBusType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_LegacyBusType__Loc == DEVPKEY_Device_LegacyBusType;
    assume DEVPKEY_Device_LegacyBusType != 0;
    call {:si_unique_call 1219} DEVPKEY_DeviceContainer_IsDefaultDevice__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsDefaultDevice__Loc == DEVPKEY_DeviceContainer_IsDefaultDevice;
    assume DEVPKEY_DeviceContainer_IsDefaultDevice != 0;
    call {:si_unique_call 1220} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 1221} DEVPKEY_Device_UpperFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_UpperFilters__Loc == DEVPKEY_Device_UpperFilters;
    assume DEVPKEY_Device_UpperFilters != 0;
    call {:si_unique_call 1222} DEVPKEY_Device_DevType__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DevType__Loc == DEVPKEY_Device_DevType;
    assume DEVPKEY_Device_DevType != 0;
    call {:si_unique_call 1223} DEVPKEY_Device_DriverInfPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfPath__Loc == DEVPKEY_Device_DriverInfPath;
    assume DEVPKEY_Device_DriverInfPath != 0;
    call {:si_unique_call 1224} DEVPKEY_DeviceInterface_ReferenceString__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterface_ReferenceString__Loc == DEVPKEY_DeviceInterface_ReferenceString;
    assume DEVPKEY_DeviceInterface_ReferenceString != 0;
    call {:si_unique_call 1225} GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN__Loc == GUID_NWF_CCA_WATCHDOG_TIMER_MIN;
    assume GUID_NWF_CCA_WATCHDOG_TIMER_MIN != 0;
    call {:si_unique_call 1226} GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED__Loc == GUID_NWF_PBCC_OPTION_IMPLEMENTED;
    assume GUID_NWF_PBCC_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1227} GUID_POWER_PERFORMANCE_IDLE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_PERFORMANCE_IDLE_TIME__Loc == GUID_POWER_PERFORMANCE_IDLE_TIME;
    assume GUID_POWER_PERFORMANCE_IDLE_TIME != 0;
    call {:si_unique_call 1228} DEVPKEY_Device_IsRebootRequired__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsRebootRequired__Loc == DEVPKEY_Device_IsRebootRequired;
    assume DEVPKEY_Device_IsRebootRequired != 0;
    call {:si_unique_call 1229} DEVPKEY_DeviceClass_ClassInstaller__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassInstaller__Loc == DEVPKEY_DeviceClass_ClassInstaller;
    assume DEVPKEY_DeviceClass_ClassInstaller != 0;
    call {:si_unique_call 1230} DEVPKEY_DeviceContainer_IsConnected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_IsConnected__Loc == DEVPKEY_DeviceContainer_IsConnected;
    assume DEVPKEY_DeviceContainer_IsConnected != 0;
    call {:si_unique_call 1231} DEVPKEY_DeviceContainer_Icon__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Icon__Loc == DEVPKEY_DeviceContainer_Icon;
    assume DEVPKEY_DeviceContainer_Icon != 0;
    call {:si_unique_call 1232} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 1233} DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular__Loc == DEVPKEY_DeviceContainer_Category_Desc_Singular;
    assume DEVPKEY_DeviceContainer_Category_Desc_Singular != 0;
    call {:si_unique_call 1234} DEVPKEY_Device_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SecuritySDS__Loc == DEVPKEY_Device_SecuritySDS;
    assume DEVPKEY_Device_SecuritySDS != 0;
    call {:si_unique_call 1235} DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut__Loc == DEVPKEY_DeviceClass_DHPRebalanceOptOut;
    assume DEVPKEY_DeviceClass_DHPRebalanceOptOut != 0;
    call {:si_unique_call 1236} GUID_NWF_CFP_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CFP_PERIOD__Loc == GUID_NWF_CFP_PERIOD;
    assume GUID_NWF_CFP_PERIOD != 0;
    call {:si_unique_call 1237} GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED__Loc == GUID_NWF_EHCC_CAPABILITY_ENABLED;
    assume GUID_NWF_EHCC_CAPABILITY_ENABLED != 0;
    call {:si_unique_call 1238} DEVPKEY_Device_InstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InstallDate__Loc == DEVPKEY_Device_InstallDate;
    assume DEVPKEY_Device_InstallDate != 0;
    call {:si_unique_call 1239} DEVPKEY_DeviceClass_LowerFilters__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_LowerFilters__Loc == DEVPKEY_DeviceClass_LowerFilters;
    assume DEVPKEY_DeviceClass_LowerFilters != 0;
    call {:si_unique_call 1240} DEVPKEY_DeviceContainer_MetadataChecksum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataChecksum__Loc == DEVPKEY_DeviceContainer_MetadataChecksum;
    assume DEVPKEY_DeviceContainer_MetadataChecksum != 0;
    call {:si_unique_call 1241} DEVPKEY_DeviceClass_DefaultService__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_DefaultService__Loc == DEVPKEY_DeviceClass_DefaultService;
    assume DEVPKEY_DeviceClass_DefaultService != 0;
    call {:si_unique_call 1242} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 1243} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 1244} GUID_NWF_WEP_ICV_ERROR_COUNT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WEP_ICV_ERROR_COUNT__Loc == GUID_NWF_WEP_ICV_ERROR_COUNT;
    assume GUID_NWF_WEP_ICV_ERROR_COUNT != 0;
    call {:si_unique_call 1245} DEVPKEY_DrvPkg_VendorWebSite__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_VendorWebSite__Loc == DEVPKEY_DrvPkg_VendorWebSite;
    assume DEVPKEY_DrvPkg_VendorWebSite != 0;
    call {:si_unique_call 1246} DEVPKEY_DeviceContainer_ConfigFlags__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ConfigFlags__Loc == DEVPKEY_DeviceContainer_ConfigFlags;
    assume DEVPKEY_DeviceContainer_ConfigFlags != 0;
    call {:si_unique_call 1247} DEVPKEY_PciDevice_AcsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_AcsSupport__Loc == DEVPKEY_PciDevice_AcsSupport;
    assume DEVPKEY_PciDevice_AcsSupport != 0;
    call {:si_unique_call 1248} DEVPKEY_Device_RemovalRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalRelations__Loc == DEVPKEY_Device_RemovalRelations;
    assume DEVPKEY_Device_RemovalRelations != 0;
    call {:si_unique_call 1249} DEVPKEY_DrvPkg_DocumentationLink__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_DocumentationLink__Loc == DEVPKEY_DrvPkg_DocumentationLink;
    assume DEVPKEY_DrvPkg_DocumentationLink != 0;
    call {:si_unique_call 1250} GUID_NWF_MULTICAST_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTICAST_LIST__Loc == GUID_NWF_MULTICAST_LIST;
    assume GUID_NWF_MULTICAST_LIST != 0;
    call {:si_unique_call 1251} GUID_NWF_DEFAULT_WEP_UPLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_UPLOAD__Loc == GUID_NWF_DEFAULT_WEP_UPLOAD;
    assume GUID_NWF_DEFAULT_WEP_UPLOAD != 0;
    call {:si_unique_call 1252} GUID_NWF_RESET_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RESET_REQUEST__Loc == GUID_NWF_RESET_REQUEST;
    assume GUID_NWF_RESET_REQUEST != 0;
    call {:si_unique_call 1253} DEVPKEY_Device_BusTypeGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusTypeGuid__Loc == DEVPKEY_Device_BusTypeGuid;
    assume DEVPKEY_Device_BusTypeGuid != 0;
    call {:si_unique_call 1254} GUID_NWF_DTIM_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DTIM_PERIOD__Loc == GUID_NWF_DTIM_PERIOD;
    assume GUID_NWF_DTIM_PERIOD != 0;
    call {:si_unique_call 1255} GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER__Loc == GUID_NWF_RANDOM_TABLE_FIELD_NUMBER;
    assume GUID_NWF_RANDOM_TABLE_FIELD_NUMBER != 0;
    call {:si_unique_call 1256} GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1257} DEVPKEY_Device_ShowInUninstallUI__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ShowInUninstallUI__Loc == DEVPKEY_Device_ShowInUninstallUI;
    assume DEVPKEY_Device_ShowInUninstallUI != 0;
    call {:si_unique_call 1258} GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED != 0;
    call {:si_unique_call 1259} GUID_NWF_CURRENT_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_ADDRESS__Loc == GUID_NWF_CURRENT_ADDRESS;
    assume GUID_NWF_CURRENT_ADDRESS != 0;
    call {:si_unique_call 1260} DEVPKEY_Device_ContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ContainerId__Loc == DEVPKEY_Device_ContainerId;
    assume DEVPKEY_Device_ContainerId != 0;
    call {:si_unique_call 1261} DEVPKEY_Device_InLocalMachineContainer__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_InLocalMachineContainer__Loc == DEVPKEY_Device_InLocalMachineContainer;
    assume DEVPKEY_Device_InLocalMachineContainer != 0;
    call {:si_unique_call 1262} DEVPKEY_DeviceContainer_ExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ExperienceId__Loc == DEVPKEY_DeviceContainer_ExperienceId;
    assume DEVPKEY_DeviceContainer_ExperienceId != 0;
    call {:si_unique_call 1263} GUID_NWF_CURRENT_RX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_RX_ANTENNA__Loc == GUID_NWF_CURRENT_RX_ANTENNA;
    assume GUID_NWF_CURRENT_RX_ANTENNA != 0;
    call {:si_unique_call 1264} GUID_NWF_CIPHER_DEFAULT_KEY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CIPHER_DEFAULT_KEY__Loc == GUID_NWF_CIPHER_DEFAULT_KEY;
    assume GUID_NWF_CIPHER_DEFAULT_KEY != 0;
    call {:si_unique_call 1265} DEVPKEY_Device_FirmwareRevision__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirmwareRevision__Loc == DEVPKEY_Device_FirmwareRevision;
    assume DEVPKEY_Device_FirmwareRevision != 0;
    call {:si_unique_call 1266} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1267} GUID_NWF_SUPPORTED_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_TX_ANTENNA__Loc == GUID_NWF_SUPPORTED_TX_ANTENNA;
    assume GUID_NWF_SUPPORTED_TX_ANTENNA != 0;
    call {:si_unique_call 1268} DEVPKEY_DeviceContainer_BaselineExperienceId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_BaselineExperienceId__Loc == DEVPKEY_DeviceContainer_BaselineExperienceId;
    assume DEVPKEY_DeviceContainer_BaselineExperienceId != 0;
    call {:si_unique_call 1269} DEVPKEY_PciRootBus_SecondaryInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryInterface__Loc == DEVPKEY_PciRootBus_SecondaryInterface;
    assume DEVPKEY_PciRootBus_SecondaryInterface != 0;
    call {:si_unique_call 1270} GUID_NWF_CONNECT_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CONNECT_REQUEST__Loc == GUID_NWF_CONNECT_REQUEST;
    assume GUID_NWF_CONNECT_REQUEST != 0;
    call {:si_unique_call 1271} GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED__Loc == GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED;
    assume GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1272} GUID_NWF_EXTSTA_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EXTSTA_CAPABILITY__Loc == GUID_NWF_EXTSTA_CAPABILITY;
    assume GUID_NWF_EXTSTA_CAPABILITY != 0;
    call {:si_unique_call 1273} DEVPKEY_Device_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Security__Loc == DEVPKEY_Device_Security;
    assume DEVPKEY_Device_Security != 0;
    call {:si_unique_call 1274} DEVPKEY_DeviceClass_SecuritySDS__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_SecuritySDS__Loc == DEVPKEY_DeviceClass_SecuritySDS;
    assume DEVPKEY_DeviceClass_SecuritySDS != 0;
    call {:si_unique_call 1275} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 1276} DEVPKEY_Device_EnumeratorName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_EnumeratorName__Loc == DEVPKEY_Device_EnumeratorName;
    assume DEVPKEY_Device_EnumeratorName != 0;
    call {:si_unique_call 1277} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 1278} DEVPKEY_DeviceClass_Security__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Security__Loc == DEVPKEY_DeviceClass_Security;
    assume DEVPKEY_DeviceClass_Security != 0;
    call {:si_unique_call 1279} DEVPKEY_DeviceContainer_Last_Seen__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Seen__Loc == DEVPKEY_DeviceContainer_Last_Seen;
    assume DEVPKEY_DeviceContainer_Last_Seen != 0;
    call {:si_unique_call 1280} DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable__Loc == DEVPKEY_PciRootBus_ExtendedConfigAvailable;
    assume DEVPKEY_PciRootBus_ExtendedConfigAvailable != 0;
    call {:si_unique_call 1281} DEVPKEY_Device_ClassGuid__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_ClassGuid__Loc == DEVPKEY_Device_ClassGuid;
    assume DEVPKEY_Device_ClassGuid != 0;
    call {:si_unique_call 1282} DEVPKEY_Device_FirstInstallDate__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_FirstInstallDate__Loc == DEVPKEY_Device_FirstInstallDate;
    assume DEVPKEY_Device_FirstInstallDate != 0;
    call {:si_unique_call 1283} GUID_NWF_MAXIMUM_LIST_SIZE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAXIMUM_LIST_SIZE__Loc == GUID_NWF_MAXIMUM_LIST_SIZE;
    assume GUID_NWF_MAXIMUM_LIST_SIZE != 0;
    call {:si_unique_call 1284} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 1285} GUID_NWF_IBSS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_IBSS_PARAMS__Loc == GUID_NWF_IBSS_PARAMS;
    assume GUID_NWF_IBSS_PARAMS != 0;
    call {:si_unique_call 1286} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 1287} GUID_NWF_ATIM_WINDOW__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ATIM_WINDOW__Loc == GUID_NWF_ATIM_WINDOW;
    assume GUID_NWF_ATIM_WINDOW != 0;
    call {:si_unique_call 1288} GUID_NWF_CF_POLLABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CF_POLLABLE__Loc == GUID_NWF_CF_POLLABLE;
    assume GUID_NWF_CF_POLLABLE != 0;
    call {:si_unique_call 1289} GUID_NWF_MAC_ADDRESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAC_ADDRESS__Loc == GUID_NWF_MAC_ADDRESS;
    assume GUID_NWF_MAC_ADDRESS != 0;
    call {:si_unique_call 1290} DEVPKEY_Device_BusReportedDeviceDesc__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusReportedDeviceDesc__Loc == DEVPKEY_Device_BusReportedDeviceDesc;
    assume DEVPKEY_Device_BusReportedDeviceDesc != 0;
    call {:si_unique_call 1291} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 1292} GUID_NWF_HOP_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_TIME__Loc == GUID_NWF_HOP_TIME;
    assume GUID_NWF_HOP_TIME != 0;
    call {:si_unique_call 1293} DEVPKEY_Device_RemovalPolicy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicy__Loc == DEVPKEY_Device_RemovalPolicy;
    assume DEVPKEY_Device_RemovalPolicy != 0;
    call {:si_unique_call 1294} DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames__Loc == DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames;
    assume DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames != 0;
    call {:si_unique_call 1295} GUID_NWF_START_REQUEST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_START_REQUEST__Loc == GUID_NWF_START_REQUEST;
    assume GUID_NWF_START_REQUEST != 0;
    call {:si_unique_call 1296} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1297} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 1298} DEVPKEY_DeviceClass_Name__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_Name__Loc == DEVPKEY_DeviceClass_Name;
    assume DEVPKEY_DeviceClass_Name != 0;
    call {:si_unique_call 1299} DEVPKEY_DeviceContainer_ModelName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelName__Loc == DEVPKEY_DeviceContainer_ModelName;
    assume DEVPKEY_DeviceContainer_ModelName != 0;
    call {:si_unique_call 1300} DEVPKEY_Device_IsPresent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_IsPresent__Loc == DEVPKEY_Device_IsPresent;
    assume DEVPKEY_Device_IsPresent != 0;
    call {:si_unique_call 1301} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 1302} DEVPKEY_Device_RemovalPolicyOverride__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_RemovalPolicyOverride__Loc == DEVPKEY_Device_RemovalPolicyOverride;
    assume DEVPKEY_Device_RemovalPolicyOverride != 0;
    call {:si_unique_call 1303} DEVPKEY_Device_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Model__Loc == DEVPKEY_Device_Model;
    assume DEVPKEY_Device_Model != 0;
    call {:si_unique_call 1304} DEVPKEY_PciDevice_RootError_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_RootError_Reporting__Loc == DEVPKEY_PciDevice_RootError_Reporting;
    assume DEVPKEY_PciDevice_RootError_Reporting != 0;
    call {:si_unique_call 1305} GUID_NWF_SHORT_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SHORT_RETRY_LIMIT__Loc == GUID_NWF_SHORT_RETRY_LIMIT;
    assume GUID_NWF_SHORT_RETRY_LIMIT != 0;
    call {:si_unique_call 1306} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 1307} GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY__Loc == GUID_NWF_MULTI_DOMAIN_CAPABILITY;
    assume GUID_NWF_MULTI_DOMAIN_CAPABILITY != 0;
    call {:si_unique_call 1308} DEVPKEY_DeviceContainer_DiscoveryMethod__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_DiscoveryMethod__Loc == DEVPKEY_DeviceContainer_DiscoveryMethod;
    assume DEVPKEY_DeviceContainer_DiscoveryMethod != 0;
    call {:si_unique_call 1309} DEVPKEY_Device_DriverInfSectionExt__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverInfSectionExt__Loc == DEVPKEY_Device_DriverInfSectionExt;
    assume DEVPKEY_Device_DriverInfSectionExt != 0;
    call {:si_unique_call 1310} DEVPKEY_DeviceClass_ClassName__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_ClassName__Loc == DEVPKEY_DeviceClass_ClassName;
    assume DEVPKEY_DeviceClass_ClassName != 0;
    call {:si_unique_call 1311} DEVPKEY_PciRootBus_SystemMsiSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SystemMsiSupport__Loc == DEVPKEY_PciRootBus_SystemMsiSupport;
    assume DEVPKEY_PciRootBus_SystemMsiSupport != 0;
    call {:si_unique_call 1312} GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED__Loc == GUID_NWF_QOS_TX_QUEUES_SUPPORTED;
    assume GUID_NWF_QOS_TX_QUEUES_SUPPORTED != 0;
    call {:si_unique_call 1313} GUID_NWF_HOP_OFFSET__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HOP_OFFSET__Loc == GUID_NWF_HOP_OFFSET;
    assume GUID_NWF_HOP_OFFSET != 0;
    call {:si_unique_call 1314} DEVPKEY_DeviceContainer_AssociationArray__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_AssociationArray__Loc == DEVPKEY_DeviceContainer_AssociationArray;
    assume DEVPKEY_DeviceContainer_AssociationArray != 0;
    call {:si_unique_call 1315} DEVPKEY_PciRootBus_SecondaryBusWidth__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SecondaryBusWidth__Loc == DEVPKEY_PciRootBus_SecondaryBusWidth;
    assume DEVPKEY_PciRootBus_SecondaryBusWidth != 0;
    call {:si_unique_call 1316} GUID_NWF_ASSOCIATION_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ASSOCIATION_PARAMS__Loc == GUID_NWF_ASSOCIATION_PARAMS;
    assume GUID_NWF_ASSOCIATION_PARAMS != 0;
    call {:si_unique_call 1317} DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl__Loc == DEVPKEY_PciRootBus_SHPCNativeHotPlugControl;
    assume DEVPKEY_PciRootBus_SHPCNativeHotPlugControl != 0;
    call {:si_unique_call 1318} DEVPKEY_Device_BaseContainerId__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BaseContainerId__Loc == DEVPKEY_Device_BaseContainerId;
    assume DEVPKEY_Device_BaseContainerId != 0;
    call {:si_unique_call 1319} GUID_NWF_FLUSH_BSS_LIST__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_FLUSH_BSS_LIST__Loc == GUID_NWF_FLUSH_BSS_LIST;
    assume GUID_NWF_FLUSH_BSS_LIST != 0;
    call {:si_unique_call 1320} GUID_NWF_CURRENT_TX_ANTENNA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_TX_ANTENNA__Loc == GUID_NWF_CURRENT_TX_ANTENNA;
    assume GUID_NWF_CURRENT_TX_ANTENNA != 0;
    call {:si_unique_call 1321} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 1322} DEVPKEY_Device_BusRelations__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_BusRelations__Loc == DEVPKEY_Device_BusRelations;
    assume DEVPKEY_Device_BusRelations != 0;
    call {:si_unique_call 1323} GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED__Loc == GUID_NWF_HR_CCA_MODE_SUPPORTED;
    assume GUID_NWF_HR_CCA_MODE_SUPPORTED != 0;
    call {:si_unique_call 1324} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 1325} DEVPKEY_DeviceContainer_ModelNumber__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_ModelNumber__Loc == DEVPKEY_DeviceContainer_ModelNumber;
    assume DEVPKEY_DeviceContainer_ModelNumber != 0;
    call {:si_unique_call 1326} PCIDRV_WMI_STD_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIDRV_WMI_STD_DATA_GUID__Loc == PCIDRV_WMI_STD_DATA_GUID;
    assume PCIDRV_WMI_STD_DATA_GUID != 0;
    call {:si_unique_call 1327} DEVPKEY_DeviceContainer_Last_Connected__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Last_Connected__Loc == DEVPKEY_DeviceContainer_Last_Connected;
    assume DEVPKEY_DeviceContainer_Last_Connected != 0;
    call {:si_unique_call 1328} GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED__Loc == GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED;
    assume GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED != 0;
    call {:si_unique_call 1329} DEVPKEY_PciDevice_Error_Reporting__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_Error_Reporting__Loc == DEVPKEY_PciDevice_Error_Reporting;
    assume DEVPKEY_PciDevice_Error_Reporting != 0;
    call {:si_unique_call 1330} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 1331} DEVPKEY_PciRootBus_MSISupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_MSISupport__Loc == DEVPKEY_PciRootBus_MSISupport;
    assume DEVPKEY_PciRootBus_MSISupport != 0;
    call {:si_unique_call 1332} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 1333} GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN__Loc == GUID_NWF_CCA_WATCHDOG_COUNT_MIN;
    assume GUID_NWF_CCA_WATCHDOG_COUNT_MIN != 0;
    call {:si_unique_call 1334} DEVPKEY_Device_SignalStrength__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_SignalStrength__Loc == DEVPKEY_Device_SignalStrength;
    assume DEVPKEY_Device_SignalStrength != 0;
    call {:si_unique_call 1335} DEVPKEY_Device_DebuggerSafe__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DebuggerSafe__Loc == DEVPKEY_Device_DebuggerSafe;
    assume DEVPKEY_Device_DebuggerSafe != 0;
    call {:si_unique_call 1336} DEVPKEY_Device_DriverCoInstallers__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverCoInstallers__Loc == DEVPKEY_Device_DriverCoInstallers;
    assume DEVPKEY_Device_DriverCoInstallers != 0;
    call {:si_unique_call 1337} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 1338} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 1339} GUID_NWF_OPTIONAL_CAPABILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_OPTIONAL_CAPABILITY__Loc == GUID_NWF_OPTIONAL_CAPABILITY;
    assume GUID_NWF_OPTIONAL_CAPABILITY != 0;
    call {:si_unique_call 1340} GUID_NWF_EHCC_PRIME_RADIX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_PRIME_RADIX__Loc == GUID_NWF_EHCC_PRIME_RADIX;
    assume GUID_NWF_EHCC_PRIME_RADIX != 0;
    call {:si_unique_call 1341} GUID_NWF_CURRENT_PHY_TYPE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_PHY_TYPE__Loc == GUID_NWF_CURRENT_PHY_TYPE;
    assume GUID_NWF_CURRENT_PHY_TYPE != 0;
    call {:si_unique_call 1342} GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD__Loc == GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD;
    assume GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD != 0;
    call {:si_unique_call 1343} DEVPKEY_Device_Numa_Node__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Numa_Node__Loc == DEVPKEY_Device_Numa_Node;
    assume DEVPKEY_Device_Numa_Node != 0;
    call {:si_unique_call 1344} DEVPKEY_PciDevice_ExpressSpecVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ExpressSpecVersion__Loc == DEVPKEY_PciDevice_ExpressSpecVersion;
    assume DEVPKEY_PciDevice_ExpressSpecVersion != 0;
    call {:si_unique_call 1345} DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl__Loc == DEVPKEY_PciRootBus_PCIExpressCapabilityControl;
    assume DEVPKEY_PciRootBus_PCIExpressCapabilityControl != 0;
    call {:si_unique_call 1346} GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD__Loc == GUID_NWF_DEFAULT_WEP_OFFLOAD;
    assume GUID_NWF_DEFAULT_WEP_OFFLOAD != 0;
    call {:si_unique_call 1347} GUID_NWF_QOS_PARAMS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_QOS_PARAMS__Loc == GUID_NWF_QOS_PARAMS;
    assume GUID_NWF_QOS_PARAMS != 0;
    call {:si_unique_call 1348} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 1349} DEVPKEY_Device_GenericDriverInstalled__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_GenericDriverInstalled__Loc == DEVPKEY_Device_GenericDriverInstalled;
    assume DEVPKEY_Device_GenericDriverInstalled != 0;
    call {:si_unique_call 1350} GUID_NWF_CURRENT_REG_DOMAIN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_REG_DOMAIN__Loc == GUID_NWF_CURRENT_REG_DOMAIN;
    assume GUID_NWF_CURRENT_REG_DOMAIN != 0;
    call {:si_unique_call 1351} GUID_NWF_WME_UPDATE_IE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_WME_UPDATE_IE__Loc == GUID_NWF_WME_UPDATE_IE;
    assume GUID_NWF_WME_UPDATE_IE != 0;
    call {:si_unique_call 1352} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 1353} DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport__Loc == DEVPKEY_PciRootBus_PCISegmentGroupsSupport;
    assume DEVPKEY_PciRootBus_PCISegmentGroupsSupport != 0;
    call {:si_unique_call 1354} DEVPKEY_Device_Service__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Service__Loc == DEVPKEY_Device_Service;
    assume DEVPKEY_Device_Service != 0;
    call {:si_unique_call 1355} DEVPKEY_Device_Capabilities__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Capabilities__Loc == DEVPKEY_Device_Capabilities;
    assume DEVPKEY_Device_Capabilities != 0;
    call {:si_unique_call 1356} DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport__Loc == DEVPKEY_PciRootBus_ClockPowerManagementSupport;
    assume DEVPKEY_PciRootBus_ClockPowerManagementSupport != 0;
    call {:si_unique_call 1357} GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED__Loc == GUID_NWF_UNICAST_USE_GROUP_ENABLED;
    assume GUID_NWF_UNICAST_USE_GROUP_ENABLED != 0;
    call {:si_unique_call 1358} GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING__Loc == GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING;
    assume GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING != 0;
    call {:si_unique_call 1359} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 1360} DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface__Loc == DEVPKEY_DeviceInterfaceClass_DefaultInterface;
    assume DEVPKEY_DeviceInterfaceClass_DefaultInterface != 0;
    call {:si_unique_call 1361} DEVPKEY_DeviceContainer_MetadataCabinet__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_MetadataCabinet__Loc == DEVPKEY_DeviceContainer_MetadataCabinet;
    assume DEVPKEY_DeviceContainer_MetadataCabinet != 0;
    call {:si_unique_call 1362} GUID_NWF_COUNTERS_ENTRY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_COUNTERS_ENTRY__Loc == GUID_NWF_COUNTERS_ENTRY;
    assume GUID_NWF_COUNTERS_ENTRY != 0;
    call {:si_unique_call 1363} GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX__Loc == GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX;
    assume GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX != 0;
    call {:si_unique_call 1364} GUID_NWF_PHY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_PHY_STATE__Loc == GUID_NWF_PHY_STATE;
    assume GUID_NWF_PHY_STATE != 0;
    call {:si_unique_call 1365} DEVPKEY_Device_Parent__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Parent__Loc == DEVPKEY_Device_Parent;
    assume DEVPKEY_Device_Parent != 0;
    call {:si_unique_call 1366} GUID_NWF_MAX_RECEIVE_LIFETIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_MAX_RECEIVE_LIFETIME__Loc == GUID_NWF_MAX_RECEIVE_LIFETIME;
    assume GUID_NWF_MAX_RECEIVE_LIFETIME != 0;
    call {:si_unique_call 1367} DEVPKEY_DeviceContainer_Category__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_Category__Loc == DEVPKEY_DeviceContainer_Category;
    assume DEVPKEY_DeviceContainer_Category != 0;
    call {:si_unique_call 1368} DEVPKEY_PciDevice_ECRC_Errors__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_ECRC_Errors__Loc == DEVPKEY_PciDevice_ECRC_Errors;
    assume DEVPKEY_PciDevice_ECRC_Errors != 0;
    call {:si_unique_call 1369} GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM__Loc == GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM;
    assume GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM != 0;
    call {:si_unique_call 1370} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 1371} GUID_NWF_AUTO_CONFIG_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_AUTO_CONFIG_ENABLED__Loc == GUID_NWF_AUTO_CONFIG_ENABLED;
    assume GUID_NWF_AUTO_CONFIG_ENABLED != 0;
    call {:si_unique_call 1372} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 1373} DEVPKEY_Device_DriverVersion__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_DriverVersion__Loc == DEVPKEY_Device_DriverVersion;
    assume DEVPKEY_Device_DriverVersion != 0;
    call {:si_unique_call 1374} GUID_NWF_CURRENT_CCA_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_CURRENT_CCA_MODE__Loc == GUID_NWF_CURRENT_CCA_MODE;
    assume GUID_NWF_CURRENT_CCA_MODE != 0;
    call {:si_unique_call 1375} DEVPKEY_DrvPkg_Model__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DrvPkg_Model__Loc == DEVPKEY_DrvPkg_Model;
    assume DEVPKEY_DrvPkg_Model != 0;
    call {:si_unique_call 1376} DEVPKEY_DeviceClass_IconPath__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceClass_IconPath__Loc == DEVPKEY_DeviceClass_IconPath;
    assume DEVPKEY_DeviceClass_IconPath != 0;
    call {:si_unique_call 1377} GUID_NWF_LONG_RETRY_LIMIT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_LONG_RETRY_LIMIT__Loc == GUID_NWF_LONG_RETRY_LIMIT;
    assume GUID_NWF_LONG_RETRY_LIMIT != 0;
    call {:si_unique_call 1378} DEVPKEY_PciDevice_InterruptMessageMaximum__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_PciDevice_InterruptMessageMaximum__Loc == DEVPKEY_PciDevice_InterruptMessageMaximum;
    assume DEVPKEY_PciDevice_InterruptMessageMaximum != 0;
    call {:si_unique_call 1379} GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED__Loc == GUID_NWF_HIDDEN_NETWORK_ENABLED;
    assume GUID_NWF_HIDDEN_NETWORK_ENABLED != 0;
    call {:si_unique_call 1380} DEVPKEY_Device_Legacy__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Legacy__Loc == DEVPKEY_Device_Legacy;
    assume DEVPKEY_Device_Legacy != 0;
    call {:si_unique_call 1381} DEVPKEY_Device_Siblings__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_Device_Siblings__Loc == DEVPKEY_Device_Siblings;
    assume DEVPKEY_Device_Siblings != 0;
    call {:si_unique_call 1382} DEVPKEY_DeviceContainer_HasProblem__Loc := __HAVOC_malloc_or_null(20);
    assume DEVPKEY_DeviceContainer_HasProblem__Loc == DEVPKEY_DeviceContainer_HasProblem;
    assume DEVPKEY_DeviceContainer_HasProblem != 0;
    call {:si_unique_call 1383} Globals__Loc := __HAVOC_malloc_or_null(12);
    assume Globals__Loc == Globals;
    assume Globals != 0;
    call {:si_unique_call 1384} GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc == GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1385} GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc == GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT != 0;
    call {:si_unique_call 1386} GUID_ALLOW_RTC_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_RTC_WAKE__Loc == GUID_ALLOW_RTC_WAKE;
    assume GUID_ALLOW_RTC_WAKE != 0;
    call {:si_unique_call 1387} GUID_BATTERY_DISCHARGE_LEVEL_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_2__Loc == GUID_BATTERY_DISCHARGE_LEVEL_2;
    assume GUID_BATTERY_DISCHARGE_LEVEL_2 != 0;
    call {:si_unique_call 1388} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1389} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 1390} GUID_DISK_IDLE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_IDLE_TIMEOUT__Loc == GUID_DISK_IDLE_TIMEOUT;
    assume GUID_DISK_IDLE_TIMEOUT != 0;
    call {:si_unique_call 1391} GUID_ACDC_POWER_SOURCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACDC_POWER_SOURCE__Loc == GUID_ACDC_POWER_SOURCE;
    assume GUID_ACDC_POWER_SOURCE != 0;
    call {:si_unique_call 1392} GUID_SYSTEM_COOLING_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_COOLING_POLICY__Loc == GUID_SYSTEM_COOLING_POLICY;
    assume GUID_SYSTEM_COOLING_POLICY != 0;
    call {:si_unique_call 1393} GUID_BATTERY_DISCHARGE_LEVEL_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_3__Loc == GUID_BATTERY_DISCHARGE_LEVEL_3;
    assume GUID_BATTERY_DISCHARGE_LEVEL_3 != 0;
    call {:si_unique_call 1394} GUID_LOCK_CONSOLE_ON_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LOCK_CONSOLE_ON_WAKE__Loc == GUID_LOCK_CONSOLE_ON_WAKE;
    assume GUID_LOCK_CONSOLE_ON_WAKE != 0;
    call {:si_unique_call 1395} GUID_VIDEO_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_POWERDOWN_TIMEOUT__Loc == GUID_VIDEO_POWERDOWN_TIMEOUT;
    assume GUID_VIDEO_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1396} GUID_PROCESSOR_IDLESTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLESTATE_POLICY__Loc == GUID_PROCESSOR_IDLESTATE_POLICY;
    assume GUID_PROCESSOR_IDLESTATE_POLICY != 0;
    call {:si_unique_call 1397} GUID_UNATTEND_SLEEP_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_UNATTEND_SLEEP_TIMEOUT__Loc == GUID_UNATTEND_SLEEP_TIMEOUT;
    assume GUID_UNATTEND_SLEEP_TIMEOUT != 0;
    call {:si_unique_call 1398} PPM_THERMALCONSTRAINT_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMALCONSTRAINT_GUID__Loc == PPM_THERMALCONSTRAINT_GUID;
    assume PPM_THERMALCONSTRAINT_GUID != 0;
    call {:si_unique_call 1399} GUID_CRITICAL_POWER_TRANSITION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CRITICAL_POWER_TRANSITION__Loc == GUID_CRITICAL_POWER_TRANSITION;
    assume GUID_CRITICAL_POWER_TRANSITION != 0;
    call {:si_unique_call 1400} GUID_SLEEP_IDLE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_IDLE_THRESHOLD__Loc == GUID_SLEEP_IDLE_THRESHOLD;
    assume GUID_SLEEP_IDLE_THRESHOLD != 0;
    call {:si_unique_call 1401} GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY != 0;
    call {:si_unique_call 1402} GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc == GUID_PROCESSOR_THROTTLE_MAXIMUM;
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM != 0;
    call {:si_unique_call 1403} GUID_PROCESSOR_PERF_LATENCY_HINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT != 0;
    call {:si_unique_call 1404} GUID_STANDBY_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_STANDBY_TIMEOUT__Loc == GUID_STANDBY_TIMEOUT;
    assume GUID_STANDBY_TIMEOUT != 0;
    call {:si_unique_call 1405} GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD != 0;
    call {:si_unique_call 1406} PPM_IDLE_ACCOUNTING_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_GUID__Loc == PPM_IDLE_ACCOUNTING_GUID;
    assume PPM_IDLE_ACCOUNTING_GUID != 0;
    call {:si_unique_call 1407} GUID_TYPICAL_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TYPICAL_POWER_SAVINGS__Loc == GUID_TYPICAL_POWER_SAVINGS;
    assume GUID_TYPICAL_POWER_SAVINGS != 0;
    call {:si_unique_call 1408} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1409} GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc == GUID_PROCESSOR_SETTINGS_SUBGROUP;
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1410} GUID_BATTERY_DISCHARGE_FLAGS_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_2__Loc == GUID_BATTERY_DISCHARGE_FLAGS_2;
    assume GUID_BATTERY_DISCHARGE_FLAGS_2 != 0;
    call {:si_unique_call 1411} GUID_HIBERNATE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_TIMEOUT__Loc == GUID_HIBERNATE_TIMEOUT;
    assume GUID_HIBERNATE_TIMEOUT != 0;
    call {:si_unique_call 1412} GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME != 0;
    call {:si_unique_call 1413} GUID_BATTERY_DISCHARGE_ACTION_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_3__Loc == GUID_BATTERY_DISCHARGE_ACTION_3;
    assume GUID_BATTERY_DISCHARGE_ACTION_3 != 0;
    call {:si_unique_call 1414} GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES != 0;
    call {:si_unique_call 1415} PPM_IDLESTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATES_DATA_GUID__Loc == PPM_IDLESTATES_DATA_GUID;
    assume PPM_IDLESTATES_DATA_GUID != 0;
    call {:si_unique_call 1416} GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING != 0;
    call {:si_unique_call 1417} GUID_POWERBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERBUTTON_ACTION__Loc == GUID_POWERBUTTON_ACTION;
    assume GUID_POWERBUTTON_ACTION != 0;
    call {:si_unique_call 1418} GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc == GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY != 0;
    call {:si_unique_call 1419} GUID_AUDIO_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AUDIO_PLAYBACK__Loc == GUID_AUDIO_PLAYBACK;
    assume GUID_AUDIO_PLAYBACK != 0;
    call {:si_unique_call 1420} GUID_PROCESSOR_THROTTLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_POLICY__Loc == GUID_PROCESSOR_THROTTLE_POLICY;
    assume GUID_PROCESSOR_THROTTLE_POLICY != 0;
    call {:si_unique_call 1421} GUID_BATTERY_PERCENTAGE_REMAINING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_PERCENTAGE_REMAINING__Loc == GUID_BATTERY_PERCENTAGE_REMAINING;
    assume GUID_BATTERY_PERCENTAGE_REMAINING != 0;
    call {:si_unique_call 1422} GUID_GLOBAL_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_GLOBAL_USER_PRESENCE__Loc == GUID_GLOBAL_USER_PRESENCE;
    assume GUID_GLOBAL_USER_PRESENCE != 0;
    call {:si_unique_call 1423} GUID_BATTERY_DISCHARGE_ACTION_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_2__Loc == GUID_BATTERY_DISCHARGE_ACTION_2;
    assume GUID_BATTERY_DISCHARGE_ACTION_2 != 0;
    call {:si_unique_call 1424} GUID_APPLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_APPLAUNCH_BUTTON__Loc == GUID_APPLAUNCH_BUTTON;
    assume GUID_APPLAUNCH_BUTTON != 0;
    call {:si_unique_call 1425} GUID_PROCESSOR_ALLOW_THROTTLING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_ALLOW_THROTTLING__Loc == GUID_PROCESSOR_ALLOW_THROTTLING;
    assume GUID_PROCESSOR_ALLOW_THROTTLING != 0;
    call {:si_unique_call 1426} GUID_IDLE_RESILIENCY_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PERIOD__Loc == GUID_IDLE_RESILIENCY_PERIOD;
    assume GUID_IDLE_RESILIENCY_PERIOD != 0;
    call {:si_unique_call 1427} GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc == GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY != 0;
    call {:si_unique_call 1428} GUID_SLEEPBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEPBUTTON_ACTION__Loc == GUID_SLEEPBUTTON_ACTION;
    assume GUID_SLEEPBUTTON_ACTION != 0;
    call {:si_unique_call 1429} GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF != 0;
    call {:si_unique_call 1430} GUID_PROCESSOR_IDLE_DISABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DISABLE__Loc == GUID_PROCESSOR_IDLE_DISABLE;
    assume GUID_PROCESSOR_IDLE_DISABLE != 0;
    call {:si_unique_call 1431} GUID_CONSOLE_DISPLAY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CONSOLE_DISPLAY_STATE__Loc == GUID_CONSOLE_DISPLAY_STATE;
    assume GUID_CONSOLE_DISPLAY_STATE != 0;
    call {:si_unique_call 1432} GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc == GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP != 0;
    call {:si_unique_call 1433} GUID_BATTERY_DISCHARGE_FLAGS_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_0__Loc == GUID_BATTERY_DISCHARGE_FLAGS_0;
    assume GUID_BATTERY_DISCHARGE_FLAGS_0 != 0;
    call {:si_unique_call 1434} GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD != 0;
    call {:si_unique_call 1435} GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS != 0;
    call {:si_unique_call 1436} GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc == GUID_INTSTEER_TIME_UNPARK_TRIGGER;
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER != 0;
    call {:si_unique_call 1437} GUID_LIDSWITCH_STATE_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDSWITCH_STATE_CHANGE__Loc == GUID_LIDSWITCH_STATE_CHANGE;
    assume GUID_LIDSWITCH_STATE_CHANGE != 0;
    call {:si_unique_call 1438} GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc == GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS != 0;
    call {:si_unique_call 1439} GUID_SESSION_DISPLAY_STATUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_DISPLAY_STATUS__Loc == GUID_SESSION_DISPLAY_STATUS;
    assume GUID_SESSION_DISPLAY_STATUS != 0;
    call {:si_unique_call 1440} GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1441} GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc == GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM != 0;
    call {:si_unique_call 1442} GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc == GUID_VIDEO_ANNOYANCE_TIMEOUT;
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT != 0;
    call {:si_unique_call 1443} GUID_BATTERY_DISCHARGE_FLAGS_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_3__Loc == GUID_BATTERY_DISCHARGE_FLAGS_3;
    assume GUID_BATTERY_DISCHARGE_FLAGS_3 != 0;
    call {:si_unique_call 1444} GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES != 0;
    call {:si_unique_call 1445} GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc == GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE != 0;
    call {:si_unique_call 1446} GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1447} GUID_MIN_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MIN_POWER_SAVINGS__Loc == GUID_MIN_POWER_SAVINGS;
    assume GUID_MIN_POWER_SAVINGS != 0;
    call {:si_unique_call 1448} GUID_DEVICE_IDLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_IDLE_POLICY__Loc == GUID_DEVICE_IDLE_POLICY;
    assume GUID_DEVICE_IDLE_POLICY != 0;
    call {:si_unique_call 1449} GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc == GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT != 0;
    call {:si_unique_call 1450} GUID_SLEEP_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_SUBGROUP__Loc == GUID_SLEEP_SUBGROUP;
    assume GUID_SLEEP_SUBGROUP != 0;
    call {:si_unique_call 1451} GUID_DISK_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_SUBGROUP__Loc == GUID_DISK_SUBGROUP;
    assume GUID_DISK_SUBGROUP != 0;
    call {:si_unique_call 1452} GUID_BATTERY_DISCHARGE_LEVEL_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_1__Loc == GUID_BATTERY_DISCHARGE_LEVEL_1;
    assume GUID_BATTERY_DISCHARGE_LEVEL_1 != 0;
    call {:si_unique_call 1453} GUID_BATTERY_DISCHARGE_ACTION_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_0__Loc == GUID_BATTERY_DISCHARGE_ACTION_0;
    assume GUID_BATTERY_DISCHARGE_ACTION_0 != 0;
    call {:si_unique_call 1454} GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc == GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER != 0;
    call {:si_unique_call 1455} GUID_BATTERY_DISCHARGE_LEVEL_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_0__Loc == GUID_BATTERY_DISCHARGE_LEVEL_0;
    assume GUID_BATTERY_DISCHARGE_LEVEL_0 != 0;
    call {:si_unique_call 1456} GUID_VIDEO_DIM_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_DIM_TIMEOUT__Loc == GUID_VIDEO_DIM_TIMEOUT;
    assume GUID_VIDEO_DIM_TIMEOUT != 0;
    call {:si_unique_call 1457} PPM_THERMAL_POLICY_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_THERMAL_POLICY_CHANGE_GUID__Loc == PPM_THERMAL_POLICY_CHANGE_GUID;
    assume PPM_THERMAL_POLICY_CHANGE_GUID != 0;
    call {:si_unique_call 1458} GUID_PROCESSOR_PERF_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_TIME_CHECK__Loc == GUID_PROCESSOR_PERF_TIME_CHECK;
    assume GUID_PROCESSOR_PERF_TIME_CHECK != 0;
    call {:si_unique_call 1459} GUID_LIDOPEN_POWERSTATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDOPEN_POWERSTATE__Loc == GUID_LIDOPEN_POWERSTATE;
    assume GUID_LIDOPEN_POWERSTATE != 0;
    call {:si_unique_call 1460} GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc == GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE != 0;
    call {:si_unique_call 1461} GUID_PROCESSOR_PERF_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_TIME__Loc == GUID_PROCESSOR_PERF_INCREASE_TIME;
    assume GUID_PROCESSOR_PERF_INCREASE_TIME != 0;
    call {:si_unique_call 1462} GUID_MONITOR_POWER_ON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MONITOR_POWER_ON__Loc == GUID_MONITOR_POWER_ON;
    assume GUID_MONITOR_POWER_ON != 0;
    call {:si_unique_call 1463} GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME != 0;
    call {:si_unique_call 1464} GUID_PROCESSOR_THROTTLE_MINIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MINIMUM__Loc == GUID_PROCESSOR_THROTTLE_MINIMUM;
    assume GUID_PROCESSOR_THROTTLE_MINIMUM != 0;
    call {:si_unique_call 1465} GUID_ALLOW_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_AWAYMODE__Loc == GUID_ALLOW_AWAYMODE;
    assume GUID_ALLOW_AWAYMODE != 0;
    call {:si_unique_call 1466} GUID_DISK_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_ADAPTIVE_POWERDOWN__Loc == GUID_DISK_ADAPTIVE_POWERDOWN;
    assume GUID_DISK_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1467} GUID_SYSTEM_BUTTON_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_BUTTON_SUBGROUP__Loc == GUID_SYSTEM_BUTTON_SUBGROUP;
    assume GUID_SYSTEM_BUTTON_SUBGROUP != 0;
    call {:si_unique_call 1468} PPM_PERFMON_PERFSTATE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFMON_PERFSTATE_GUID__Loc == PPM_PERFMON_PERFSTATE_GUID;
    assume PPM_PERFMON_PERFSTATE_GUID != 0;
    call {:si_unique_call 1469} GUID_ALLOW_SYSTEM_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_SYSTEM_REQUIRED__Loc == GUID_ALLOW_SYSTEM_REQUIRED;
    assume GUID_ALLOW_SYSTEM_REQUIRED != 0;
    call {:si_unique_call 1470} GUID_ALLOW_DISPLAY_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_DISPLAY_REQUIRED__Loc == GUID_ALLOW_DISPLAY_REQUIRED;
    assume GUID_ALLOW_DISPLAY_REQUIRED != 0;
    call {:si_unique_call 1471} PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID__Loc == PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    assume PPM_PERFSTATE_DOMAIN_CHANGE_GUID != 0;
    call {:si_unique_call 1472} GUID_PROCESSOR_PARKING_PERF_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_PERF_STATE__Loc == GUID_PROCESSOR_PARKING_PERF_STATE;
    assume GUID_PROCESSOR_PARKING_PERF_STATE != 0;
    call {:si_unique_call 1473} GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc == GUID_PROCESSOR_PERF_DECREASE_POLICY;
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY != 0;
    call {:si_unique_call 1474} PPM_IDLESTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLESTATE_CHANGE_GUID__Loc == PPM_IDLESTATE_CHANGE_GUID;
    assume PPM_IDLESTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1475} GUID_ALLOW_STANDBY_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_STANDBY_STATES__Loc == GUID_ALLOW_STANDBY_STATES;
    assume GUID_ALLOW_STANDBY_STATES != 0;
    call {:si_unique_call 1476} GUID_PROCESSOR_PERFSTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERFSTATE_POLICY__Loc == GUID_PROCESSOR_PERFSTATE_POLICY;
    assume GUID_PROCESSOR_PERFSTATE_POLICY != 0;
    call {:si_unique_call 1477} GUID_BATTERY_DISCHARGE_ACTION_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_1__Loc == GUID_BATTERY_DISCHARGE_ACTION_1;
    assume GUID_BATTERY_DISCHARGE_ACTION_1 != 0;
    call {:si_unique_call 1478} GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc == GUID_PROCESSOR_PERF_INCREASE_POLICY;
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY != 0;
    call {:si_unique_call 1479} GUID_VIDEO_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_SUBGROUP__Loc == GUID_VIDEO_SUBGROUP;
    assume GUID_VIDEO_SUBGROUP != 0;
    call {:si_unique_call 1480} GUID_HIBERNATE_FASTS4_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_FASTS4_POLICY__Loc == GUID_HIBERNATE_FASTS4_POLICY;
    assume GUID_HIBERNATE_FASTS4_POLICY != 0;
    call {:si_unique_call 1481} GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS != 0;
    call {:si_unique_call 1482} GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD != 0;
    call {:si_unique_call 1483} GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1484} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1485} PPM_PERFSTATE_CHANGE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATE_CHANGE_GUID__Loc == PPM_PERFSTATE_CHANGE_GUID;
    assume PPM_PERFSTATE_CHANGE_GUID != 0;
    call {:si_unique_call 1486} GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc == GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1487} GUID_USERINTERFACEBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USERINTERFACEBUTTON_ACTION__Loc == GUID_USERINTERFACEBUTTON_ACTION;
    assume GUID_USERINTERFACEBUTTON_ACTION != 0;
    call {:si_unique_call 1488} GUID_PCIEXPRESS_ASPM_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_ASPM_POLICY__Loc == GUID_PCIEXPRESS_ASPM_POLICY;
    assume GUID_PCIEXPRESS_ASPM_POLICY != 0;
    call {:si_unique_call 1489} GUID_BATTERY_DISCHARGE_FLAGS_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_1__Loc == GUID_BATTERY_DISCHARGE_FLAGS_1;
    assume GUID_BATTERY_DISCHARGE_FLAGS_1 != 0;
    call {:si_unique_call 1490} GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_INCREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY != 0;
    call {:si_unique_call 1491} GUID_INTSTEER_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_SUBGROUP__Loc == GUID_INTSTEER_SUBGROUP;
    assume GUID_INTSTEER_SUBGROUP != 0;
    call {:si_unique_call 1492} GUID_DISK_BURST_IGNORE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_BURST_IGNORE_THRESHOLD__Loc == GUID_DISK_BURST_IGNORE_THRESHOLD;
    assume GUID_DISK_BURST_IGNORE_THRESHOLD != 0;
    call {:si_unique_call 1493} GUID_DISK_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_POWERDOWN_TIMEOUT__Loc == GUID_DISK_POWERDOWN_TIMEOUT;
    assume GUID_DISK_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1494} GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD != 0;
    call {:si_unique_call 1495} PPM_PERFSTATES_DATA_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_PERFSTATES_DATA_GUID__Loc == PPM_PERFSTATES_DATA_GUID;
    assume PPM_PERFSTATES_DATA_GUID != 0;
    call {:si_unique_call 1496} NO_SUBGROUP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NO_SUBGROUP_GUID__Loc == NO_SUBGROUP_GUID;
    assume NO_SUBGROUP_GUID != 0;
    call {:si_unique_call 1497} GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc == GUID_VIDEO_FULLSCREEN_PLAYBACK;
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK != 0;
    call {:si_unique_call 1498} GUID_PROCESSOR_PERF_BOOST_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_MODE__Loc == GUID_PROCESSOR_PERF_BOOST_MODE;
    assume GUID_PROCESSOR_PERF_BOOST_MODE != 0;
    call {:si_unique_call 1499} ALL_POWERSCHEMES_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ALL_POWERSCHEMES_GUID__Loc == ALL_POWERSCHEMES_GUID;
    assume ALL_POWERSCHEMES_GUID != 0;
    call {:si_unique_call 1500} GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY != 0;
    call {:si_unique_call 1501} GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc == GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING != 0;
    call {:si_unique_call 1502} GUID_PROCESSOR_IDLE_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_TIME_CHECK__Loc == GUID_PROCESSOR_IDLE_TIME_CHECK;
    assume GUID_PROCESSOR_IDLE_TIME_CHECK != 0;
    call {:si_unique_call 1503} GUID_INTSTEER_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_MODE__Loc == GUID_INTSTEER_MODE;
    assume GUID_INTSTEER_MODE != 0;
    call {:si_unique_call 1504} GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc == GUID_IDLE_RESILIENCY_PLATFORM_STATE;
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE != 0;
    call {:si_unique_call 1505} GUID_BACKGROUND_TASK_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BACKGROUND_TASK_NOTIFICATION__Loc == GUID_BACKGROUND_TASK_NOTIFICATION;
    assume GUID_BACKGROUND_TASK_NOTIFICATION != 0;
    call {:si_unique_call 1506} GUID_PROCESSOR_PERF_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_HISTORY__Loc == GUID_PROCESSOR_PERF_HISTORY;
    assume GUID_PROCESSOR_PERF_HISTORY != 0;
    call {:si_unique_call 1507} GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc == GUID_VIDEO_ADAPTIVE_POWERDOWN;
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1508} GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc == GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT != 0;
    call {:si_unique_call 1509} GUID_PROCESSOR_PERF_BOOST_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_POLICY__Loc == GUID_PROCESSOR_PERF_BOOST_POLICY;
    assume GUID_PROCESSOR_PERF_BOOST_POLICY != 0;
    call {:si_unique_call 1510} GUID_SESSION_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_USER_PRESENCE__Loc == GUID_SESSION_USER_PRESENCE;
    assume GUID_SESSION_USER_PRESENCE != 0;
    call {:si_unique_call 1511} GUID_LIDCLOSE_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDCLOSE_ACTION__Loc == GUID_LIDCLOSE_ACTION;
    assume GUID_LIDCLOSE_ACTION != 0;
    call {:si_unique_call 1512} GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc == GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS != 0;
    call {:si_unique_call 1513} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD != 0;
    call {:si_unique_call 1514} PPM_IDLE_ACCOUNTING_EX_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PPM_IDLE_ACCOUNTING_EX_GUID__Loc == PPM_IDLE_ACCOUNTING_EX_GUID;
    assume PPM_IDLE_ACCOUNTING_EX_GUID != 0;
    call {:si_unique_call 1515} GUID_PROCESSOR_PERF_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_TIME__Loc == GUID_PROCESSOR_PERF_DECREASE_TIME;
    assume GUID_PROCESSOR_PERF_DECREASE_TIME != 0;
    call {:si_unique_call 1516} GUID_MAX_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MAX_POWER_SAVINGS__Loc == GUID_MAX_POWER_SAVINGS;
    assume GUID_MAX_POWER_SAVINGS != 0;
    call {:si_unique_call 1517} GUID_BATTERY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_SUBGROUP__Loc == GUID_BATTERY_SUBGROUP;
    assume GUID_BATTERY_SUBGROUP != 0;
    call {:si_unique_call 1518} GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_DECREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY != 0;
    call {:si_unique_call 1519} GUID_IDLE_BACKGROUND_TASK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_BACKGROUND_TASK__Loc == GUID_IDLE_BACKGROUND_TASK;
    assume GUID_IDLE_BACKGROUND_TASK != 0;
    call {:si_unique_call 1520} GUID_POWERSCHEME_PERSONALITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERSCHEME_PERSONALITY__Loc == GUID_POWERSCHEME_PERSONALITY;
    assume GUID_POWERSCHEME_PERSONALITY != 0;
    call {:si_unique_call 1521} GUID_IDLE_RESILIENCY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_SUBGROUP__Loc == GUID_IDLE_RESILIENCY_SUBGROUP;
    assume GUID_IDLE_RESILIENCY_SUBGROUP != 0;
    call {:si_unique_call 1522} GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc == GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN != 0;
    call {:si_unique_call 1523} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING != 0;
    call {:si_unique_call 1524} GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1525} GUID_ACTIVE_POWERSCHEME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACTIVE_POWERSCHEME__Loc == GUID_ACTIVE_POWERSCHEME;
    assume GUID_ACTIVE_POWERSCHEME != 0;
    call {:si_unique_call 1526} GUID_SYSTEM_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_AWAYMODE__Loc == GUID_SYSTEM_AWAYMODE;
    assume GUID_SYSTEM_AWAYMODE != 0;
    call {:si_unique_call 1527} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 1528} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 1529} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1530} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 1531} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1532} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1533} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 1534} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 1535} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 1536} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 1537} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 1538} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1539} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 1540} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 1541} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 1542} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 1543} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 1544} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 1545} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 1546} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 1547} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 1548} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 1549} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 1550} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 1551} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 1552} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 1553} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 1554} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 1555} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 1556} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 1557} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 1558} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 1559} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 1560} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 1561} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 1562} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 1563} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 1564} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 1565} SLAM_guard_S_1_init__Loc := __HAVOC_malloc_or_null(4);
    assume SLAM_guard_S_1_init__Loc == SLAM_guard_S_1_init;
    assume SLAM_guard_S_1_init != 0;
    call {:si_unique_call 1566} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 1567} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1568} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1569} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1570} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1571} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1572} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1573} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1574} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1575} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1576} vslice_dummy_var_241 := __HAVOC_malloc(60);
    assume {:mainInitDone} true;
    call {:si_unique_call 1577} corralExtraInit();
    call {:si_unique_call 1578} corralExplainErrorInit();
    call {:si_unique_call 1579} _sdv_init18();
    call {:si_unique_call 1580} _sdv_init1();
    call {:si_unique_call 1581} _sdv_init4();
    call {:si_unique_call 1582} _sdv_init5();
    call {:si_unique_call 1583} _sdv_init3();
    call {:si_unique_call 1584} _sdv_init16();
    call {:si_unique_call 1585} _sdv_init14();
    call {:si_unique_call 1586} _sdv_init6();
    call {:si_unique_call 1587} _sdv_init15();
    call {:si_unique_call 1588} _sdv_init10();
    call {:si_unique_call 1589} _sdv_init11();
    call {:si_unique_call 1590} _sdv_init9();
    call {:si_unique_call 1591} _sdv_init12();
    call {:si_unique_call 1592} _sdv_init13();
    call {:si_unique_call 1593} _sdv_init7();
    call {:si_unique_call 1594} _sdv_init8();
    call {:si_unique_call 1595} _sdv_init2();
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    SLAM_guard_S_1 := Cancel__IRP(sdv_irp);
    assume SLAM_guard_S_1 != SLAM_guard_S_1_init;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_542 := 0;
    goto L43;

  L43:
    assume Tmp_542 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_541 := 0;
    goto L47;

  L47:
    assume Tmp_541 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1596} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L39;

  L39:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L39;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_541 := 1;
    goto L47;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_542 := 1;
    goto L43;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_173: int;

  anon0:
    call {:si_unique_call 1597} vslice_dummy_var_173 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_28: int) returns (Tmp_546: int);
  free ensures {:va_keep} Tmp_546 == 0 || Tmp_546 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoCancelIrp"} {:osmodel} IoCancelIrp(actual_Irp_28: int) returns (Tmp_546: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_546 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_546 := 1;
    goto L1;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_548: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_548: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    havoc Tmp_548;
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 1598} vslice_dummy_var_174 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MmUnlockPagableImageSection"} {:osmodel} MmUnlockPagableImageSection(actual_ImageSectionHandle: int)
{
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1599} vslice_dummy_var_175 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po: int, actual_pirp_10: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RunStartIo"} {:osmodel} sdv_RunStartIo(actual_po: int, actual_pirp_10: int)
{
  var vslice_dummy_var_176: int;
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1600} vslice_dummy_var_176 := __HAVOC_malloc(4);
    call {:si_unique_call 1601} sdv_stub_startio_begin();
    call {:si_unique_call 1602} vslice_dummy_var_177 := sdv_DoNothing();
    call {:si_unique_call 1603} sdv_stub_startio_end();
    return;
}



procedure {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_556: int);
  free ensures {:va_keep} Tmp_556 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoCompletionRoutines"} {:osmodel} sdv_IoCompletionRoutines() returns (Tmp_556: int)
{

  anon0:
    Tmp_556 := 1;
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_1: int, actual_Length_1: int)
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1604} vslice_dummy_var_178 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeFlushIoBuffers"} {:osmodel} sdv_KeFlushIoBuffers(actual_Mdl_2: int, actual_ReadOperation: int, actual_DmaOperation: int)
{
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1605} vslice_dummy_var_179 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoFreeMdl"} {:osmodel} IoFreeMdl(actual_Mdl_3: int)
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1606} vslice_dummy_var_180 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_startio_begin"} {:osmodel} sdv_stub_startio_begin()
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1607} vslice_dummy_var_181 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1608} vslice_dummy_var_182 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 1609} vslice_dummy_var_183 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_570: int);
  free ensures {:va_keep} Tmp_570 == 0 || Tmp_570 == 258;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeWaitForMultipleObjects"} {:osmodel} KeWaitForMultipleObjects(actual_Count: int, actual_Object_1: int, actual_WaitType: int, actual_WaitReason_1: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout_1: int, actual_WaitBlockArray: int) returns (Tmp_570: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_570 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_570 := 258;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_11: int)
{
  var vslice_dummy_var_184: int;

  anon0:
    call {:si_unique_call 1610} vslice_dummy_var_184 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_12: int)
{
  var vslice_dummy_var_185: int;

  anon0:
    call {:si_unique_call 1611} vslice_dummy_var_185 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MmUnmapIoSpace"} {:osmodel} MmUnmapIoSpace(actual_BaseAddress: int, actual_NumberOfBytes: int)
{
  var vslice_dummy_var_186: int;

  anon0:
    call {:si_unique_call 1612} vslice_dummy_var_186 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_13: int) returns (Tmp_578: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked, yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po_1: int, actual_pirp_13: int) returns (Tmp_578: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_580: int;
  var {:scalar} sdv_330: int;
  var {:scalar} Tmp_581: int;
  var {:scalar} status_48: int;
  var {:pointer} po_1: int;
  var {:pointer} pirp_13: int;

  anon0:
    po_1 := actual_po_1;
    pirp_13 := actual_pirp_13;
    status_48 := 0;
    minor := sdv_330;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    havoc ps;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    call {:si_unique_call 1613} sdv_SetStatus(pirp_13);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1614} sdv_stub_dispatch_begin();
    goto anon79_Then, anon79_Else;

  anon79_Else:
    goto anon98_Then, anon98_Else;

  anon98_Else:
    goto anon97_Then, anon97_Else;

  anon97_Else:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    goto anon95_Then, anon95_Else;

  anon95_Else:
    goto anon94_Then, anon94_Else;

  anon94_Else:
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto anon92_Then, anon92_Else;

  anon92_Else:
    goto anon91_Then, anon91_Else;

  anon91_Else:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon88_Then, anon88_Else;

  anon88_Else:
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto anon85_Then, anon85_Else;

  anon85_Else:
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    Tmp_581 := 0;
    goto L243;

  L243:
    assume Tmp_581 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto L66;

  L66:
    call {:si_unique_call 1615} status_48 := PciDrvDispatchPnp(po_1, pirp_13);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1616} SLIC_PciDrvDispatchPnp_exit(strConst__li2bpl173);
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1617} sdv_stub_dispatch_end(status_48, 0);
    assume {:nonnull} pirp_13 != 0;
    assume pirp_13 > 0;
    Tmp_578 := status_48;
    goto LM2;

  LM2:
    return;

  anon117_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon107_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon82_Then:
    goto L66;

  anon83_Then:
    Tmp_581 := 1;
    goto L243;

  anon81_Then:
    goto L61;

  anon116_Then:
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_580 := 0;
    goto L249;

  L249:
    assume Tmp_580 != 0;
    goto L60;

  anon80_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_580 := 1;
    goto L249;

  anon84_Then:
    call {:si_unique_call 1618} status_48 := sdv_DoNothing();
    goto L72;

  anon85_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1619} status_48 := PciDrvSystemControl(po_1, pirp_13);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1620} SLIC_PciDrvSystemControl_exit(strConst__li2bpl173);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon115_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon106_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon86_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1621} sdv_SetPowerIrpMinorFunction(pirp_13);
    call {:si_unique_call 1622} status_48 := PciDrvDispatchPower(po_1, pirp_13);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1623} SLIC_PciDrvDispatchPower_exit(strConst__li2bpl173);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon114_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon105_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon87_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1624} status_48 := PciDrvCleanup(po_1, pirp_13);
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1625} SLIC_PciDrvCleanup_exit(strConst__li2bpl173);
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon113_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon104_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon88_Then:
    call {:si_unique_call 1626} status_48 := sdv_DoNothing();
    goto L72;

  anon89_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1627} status_48 := sdv_DoNothing();
    goto L72;

  anon90_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1628} status_48 := sdv_DoNothing();
    goto L72;

  anon91_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1629} status_48 := PciDrvDispatchIO#1(po_1, pirp_13);
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1630} SLIC_PciDrvDispatchIO_exit(strConst__li2bpl173);
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon112_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon103_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon92_Then:
    call {:si_unique_call 1631} status_48 := sdv_DoNothing();
    goto L72;

  anon93_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1632} status_48 := sdv_DoNothing();
    goto L72;

  anon94_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1633} status_48 := sdv_DoNothing();
    goto L72;

  anon95_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1634} status_48 := sdv_DoNothing();
    goto L72;

  anon96_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1635} status_48 := PciDrvDispatchIO#1(po_1, pirp_13);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1636} SLIC_PciDrvDispatchIO_exit(strConst__li2bpl173);
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon111_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon102_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon97_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1637} status_48 := PciDrvDispatchIO#1(po_1, pirp_13);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1638} SLIC_PciDrvDispatchIO_exit(strConst__li2bpl173);
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon110_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon101_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon98_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1639} status_48 := PciDrvClose(po_1, pirp_13);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1640} SLIC_PciDrvClose_exit(strConst__li2bpl173);
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon109_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon100_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;

  anon79_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1641} status_48 := PciDrvCreate(po_1, pirp_13);
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume pirp_13 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1642} SLIC_PciDrvCreate_exit(strConst__li2bpl173);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon108_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon99_Then:
    assume !(pirp_13 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L72;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_187: int;

  anon0:
    call {:si_unique_call 1643} vslice_dummy_var_187 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_584: int);
  free ensures {:va_keep} Tmp_584 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckAddDevice"} {:osmodel} sdv_CheckAddDevice() returns (Tmp_584: int)
{

  anon0:
    Tmp_584 := 1;
    return;
}



procedure {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_586: int);
  free ensures {:va_keep} Tmp_586 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckWorkerRoutines"} {:osmodel} sdv_CheckWorkerRoutines() returns (Tmp_586: int)
{

  anon0:
    Tmp_586 := 0;
    return;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_188: int;

  anon0:
    call {:si_unique_call 1644} vslice_dummy_var_188 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_14: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 1645} vslice_dummy_var_189 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_2: int, actual_Source_1: int, actual_Length_2: int)
{
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 1646} vslice_dummy_var_190 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_594: int);
  free ensures {:va_keep} Tmp_594 == -1073741811 || Tmp_594 == -1073741823 || Tmp_594 == 0 || Tmp_594 == 5 || Tmp_594 == -1073741789;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ZwQueryValueKey"} {:osmodel} ZwQueryValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_KeyValueInformationClass: int, actual_KeyValueInformation: int, actual_Length_3: int, actual_ResultLength: int) returns (Tmp_594: int)
{
  var {:scalar} L: int;
  var {:scalar} sdv_341: int;
  var {:scalar} Length_3: int;
  var {:pointer} ResultLength: int;

  anon0:
    Length_3 := actual_Length_3;
    ResultLength := actual_ResultLength;
    L := sdv_341;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 0 >= L;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} L == 0;
    Tmp_594 := -1073741811;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:partition} L != 0;
    Tmp_594 := -1073741823;
    goto L1;

  anon15_Then:
    assume {:partition} L > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} L == Length_3;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Length_3 != 0;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_594 := 0;
    goto L1;

  anon14_Then:
    assume {:partition} Length_3 == 0;
    goto L13;

  L13:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} L > Length_3;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_594 := 5;
    goto L1;

  anon13_Then:
    assume {:partition} Length_3 >= L;
    assume {:nonnull} ResultLength != 0;
    assume ResultLength > 0;
    Tmp_594 := -1073741789;
    goto L1;

  anon11_Then:
    assume {:partition} L != Length_3;
    goto L13;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_15: int)
{
  var vslice_dummy_var_191: int;

  anon0:
    call {:si_unique_call 1647} vslice_dummy_var_191 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_598: int);
  free ensures {:va_keep} Tmp_598 == 1 || Tmp_598 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_598: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 1648} b := OneOfTwoBOOLEAN();
    Tmp_598 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_192: int;

  anon0:
    call {:si_unique_call 1649} vslice_dummy_var_192 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_602: int);
  free ensures {:va_keep} Tmp_602 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckIsrRoutines"} {:osmodel} sdv_CheckIsrRoutines() returns (Tmp_602: int)
{

  anon0:
    Tmp_602 := 1;
    return;
}



procedure {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExFreePoolWithTag"} {:osmodel} ExFreePoolWithTag(actual_P_1: int, actual_Tag: int)
{
  var vslice_dummy_var_193: int;

  anon0:
    call {:si_unique_call 1650} vslice_dummy_var_193 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExUnregisterCallback"} {:osmodel} ExUnregisterCallback(actual_CbRegistration: int)
{
  var vslice_dummy_var_194: int;

  anon0:
    call {:si_unique_call 1651} vslice_dummy_var_194 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_16: int)
{
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1652} vslice_dummy_var_195 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_612: int);
  free ensures {:va_keep} Tmp_612 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckStartIoRoutines"} {:osmodel} sdv_CheckStartIoRoutines() returns (Tmp_612: int)
{

  anon0:
    Tmp_612 := 0;
    return;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_614: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_614: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    havoc Tmp_614;
    return;
}



procedure {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExDeleteNPagedLookasideList"} {:osmodel} ExDeleteNPagedLookasideList(actual_Lookaside: int)
{
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 1653} vslice_dummy_var_196 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_618: int);
  free ensures {:va_keep} Tmp_618 == 1 || Tmp_618 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IsListEmpty"} {:osmodel} sdv_IsListEmpty(actual_ListHead: int) returns (Tmp_618: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_618 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_618 := 0;
    goto L1;
}



procedure {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_620: int);
  free ensures {:va_keep} Tmp_620 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_CheckIrpMjPnp"} {:osmodel} sdv_CheckIrpMjPnp() returns (Tmp_620: int)
{

  anon0:
    Tmp_620 := 1;
    return;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_29: int) returns (Tmp_622: int);
  free ensures {:va_keep} Tmp_622 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_29: int) returns (Tmp_622: int)
{
  var {:scalar} status_49: int;
  var {:pointer} Irp_29: int;

  anon0:
    Irp_29 := actual_Irp_29;
    status_49 := 259;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L19;

  L19:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_29;
    goto L25;

  L25:
    Tmp_622 := status_49;
    return;

  anon32_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon31_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_29;
    goto L21;

  anon44_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_29;
    goto L19;

  anon39_Then:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L44;

  L44:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L46;

  L46:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon38_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_29;
    goto L25;

  anon37_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_29;
    goto L46;

  anon45_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_29;
    goto L44;

  anon40_Then:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L28;

  L28:
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L30;

  L30:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon34_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_29;
    goto L25;

  anon33_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_29;
    goto L30;

  anon43_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_29;
    goto L28;

  anon41_Then:
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    assume {:nonnull} Irp_29 != 0;
    assume Irp_29 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    assume sdv_IoBuildDeviceIoControlRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L38;

  L38:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_29;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L25;

  anon36_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_29;
    goto L25;

  anon35_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_29;
    goto L38;

  anon42_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_29;
    goto L36;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_197: int;

  anon0:
    call {:si_unique_call 1654} vslice_dummy_var_197 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_3: int, actual_State_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_1: int, actual_Type_3: int, actual_State_1: int)
{
  var {:pointer} Event_1: int;
  var {:scalar} Type_3: int;
  var {:scalar} State_1: int;
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1655} vslice_dummy_var_198 := __HAVOC_malloc(4);
    Event_1 := actual_Event_1;
    Type_3 := actual_Type_3;
    State_1 := actual_State_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_2: int)
{
  var vslice_dummy_var_199: int;

  anon0:
    call {:si_unique_call 1656} vslice_dummy_var_199 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_26: int, actual_Irp_30: int) returns (Tmp_630: int);
  free ensures {:va_keep} Tmp_630 == 259;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_26: int, actual_Irp_30: int) returns (Tmp_630: int)
{
  var {:pointer} Irp_30: int;

  anon0:
    Irp_30 := actual_Irp_30;
    call {:si_unique_call 1657} Tmp_630 := IofCallDriver(0, Irp_30);
    return;
}



procedure {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_632: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_ExInterlockedInsertHeadList"} {:osmodel} sdv_ExInterlockedInsertHeadList(actual_ListHead_1: int, actual_ListEntry: int, actual_Lock: int) returns (Tmp_632: int)
{
  var {:pointer} sdv_347: int;
  var {:pointer} p_5: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1658} sdv_347 := __HAVOC_malloc(1);
    p_5 := sdv_347;
    Tmp_632 := p_5;
    goto L1;

  L1:
    return;

  anon3_Then:
    p_5 := 0;
    Tmp_632 := p_5;
    goto L1;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_1: int) returns (Tmp_634: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_1: int) returns (Tmp_634: int)
{
  var {:pointer} sdv_349: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1659} sdv_349 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_634 := sdv_349;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_634 := 0;
    goto L1;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_27: int) returns (Tmp_636: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_27: int) returns (Tmp_636: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_351: int;
  var {:scalar} Tmp_637: int;

  anon0:
    call {:si_unique_call 1660} sdv_351 := __HAVOC_malloc(1);
    ioWorkItem := sdv_351;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_637 := 0;
    goto L27;

  L27:
    assume Tmp_637 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_636 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_637 := 1;
    goto L27;

  anon6_Then:
    Tmp_636 := 0;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName: int, actual_Enable: int) returns (Tmp_639: int);
  free ensures {:va_keep} Tmp_639 == -1073741772 || Tmp_639 == -1073741824 || Tmp_639 == -1073741789 || Tmp_639 == -1073741670 || Tmp_639 == -1073741808 || Tmp_639 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName: int, actual_Enable: int) returns (Tmp_639: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_639 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_639 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_639 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_639 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_639 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_639 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_4: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_641: int);
  free ensures {:va_keep} Tmp_641 == -1073741811 || Tmp_641 == -1073741670 || Tmp_641 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_4: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_641: int)
{
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_641 := -1073741811;
    goto L1;

  L1:
    return;

  anon5_Then:
    Tmp_641 := -1073741670;
    goto L1;

  anon6_Then:
    Tmp_641 := 0;
    goto L1;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1661} vslice_dummy_var_200 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_201: int;

  anon0:
    call {:si_unique_call 1662} vslice_dummy_var_201 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_647: int);
  free ensures {:va_keep} Tmp_647 == -1073741811 || Tmp_647 == -1073741808 || Tmp_647 == -1073741823 || Tmp_647 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_28: int, actual_DevInstKeyType: int, actual_DesiredAccess: int, actual_DevInstRegKey: int) returns (Tmp_647: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_647 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_647 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_647 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_647 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_649: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_2: int) returns (Tmp_649: int)
{
  var {:scalar} p_6: int;

  anon0:
    Tmp_649 := p_6;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_651: int);
  free ensures {:va_keep} Tmp_651 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_651: int)
{

  anon0:
    Tmp_651 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_653: int);
  free ensures {:va_keep} Tmp_653 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_653: int)
{

  anon0:
    Tmp_653 := -1073741823;
    return;
}



procedure {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_1: int) returns (Tmp_655: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_ExAllocateFromNPagedLookasideList"} {:osmodel} sdv_ExAllocateFromNPagedLookasideList(actual_Lookaside_1: int) returns (Tmp_655: int)
{
  var {:pointer} sdv_357: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1663} sdv_357 := __HAVOC_malloc(1);
    Tmp_655 := sdv_357;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_655 := 0;
    goto L1;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_657: int);
  free ensures {:va_keep} Tmp_657 == -1073741823 || Tmp_657 == -1073741811 || Tmp_657 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_29: int, actual_Action: int) returns (Tmp_657: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_657 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_657 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_657 := 0;
    goto L1;
}



procedure {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "KeClearEvent"} {:osmodel} KeClearEvent(actual_Event_2: int)
{
  var {:pointer} Event_2: int;
  var vslice_dummy_var_202: int;

  anon0:
    call {:si_unique_call 1664} vslice_dummy_var_202 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_58: int) returns (Tmp_673: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_673 == -1073741661 || Tmp_673 == 0 || Tmp_673 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICSetMulticastList"} NICSetMulticastList(actual_FdoData_58: int) returns (Tmp_673: int)
{
  var {:scalar} i_5: int;
  var {:pointer} Tmp_674: int;
  var {:scalar} Tmp_675: int;
  var {:pointer} Tmp_676: int;
  var {:pointer} Tmp_677: int;
  var {:scalar} Tmp_678: int;
  var {:scalar} Tmp_679: int;
  var {:scalar} counter_1: int;
  var {:scalar} Tmp_680: int;
  var {:pointer} McAddress: int;
  var {:scalar} Tmp_681: int;
  var {:pointer} Tmp_682: int;
  var {:pointer} Tmp_683: int;
  var {:scalar} sdv_370: int;
  var {:pointer} Tmp_684: int;
  var {:pointer} Tmp_685: int;
  var {:scalar} Tmp_686: int;
  var {:pointer} Tmp_687: int;
  var {:scalar} Tmp_688: int;
  var {:scalar} Tmp_689: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_690: int;
  var {:pointer} Tmp_691: int;
  var {:scalar} Tmp_692: int;
  var {:scalar} Tmp_693: int;
  var {:pointer} Tmp_694: int;
  var {:pointer} Tmp_695: int;
  var {:pointer} Tmp_696: int;
  var {:scalar} Tmp_697: int;
  var {:scalar} Tmp_698: int;
  var {:scalar} Tmp_699: int;
  var {:pointer} Tmp_700: int;
  var {:pointer} Tmp_702: int;
  var {:pointer} Tmp_703: int;
  var {:pointer} Tmp_704: int;
  var {:scalar} Tmp_705: int;
  var {:pointer} Tmp_706: int;
  var {:pointer} Tmp_707: int;
  var {:pointer} Tmp_708: int;
  var {:scalar} bResult_1: int;
  var {:scalar} status_51: int;
  var {:scalar} Tmp_709: int;
  var {:pointer} Tmp_710: int;
  var {:pointer} Tmp_711: int;
  var {:pointer} Tmp_712: int;
  var {:pointer} Tmp_713: int;
  var {:scalar} Tmp_714: int;
  var {:pointer} FdoData_58: int;

  anon0:
    FdoData_58 := actual_FdoData_58;
    call {:si_unique_call 1665} Tmp_676 := __HAVOC_malloc(24);
    call {:si_unique_call 1666} Tmp_677 := __HAVOC_malloc(24);
    call {:si_unique_call 1667} Tmp_682 := __HAVOC_malloc(24);
    call {:si_unique_call 1668} Tmp_683 := __HAVOC_malloc(24);
    call {:si_unique_call 1669} Tmp_684 := __HAVOC_malloc(768);
    call {:si_unique_call 1670} Tmp_685 := __HAVOC_malloc(24);
    call {:si_unique_call 1671} Tmp_690 := __HAVOC_malloc(100);
    call {:si_unique_call 1672} Tmp_691 := __HAVOC_malloc(768);
    call {:si_unique_call 1673} Tmp_694 := __HAVOC_malloc(768);
    call {:si_unique_call 1674} Tmp_700 := __HAVOC_malloc(768);
    call {:si_unique_call 1675} Tmp_702 := __HAVOC_malloc(768);
    call {:si_unique_call 1676} Tmp_703 := __HAVOC_malloc(144);
    call {:si_unique_call 1677} Tmp_706 := __HAVOC_malloc(768);
    call {:si_unique_call 1678} Tmp_707 := __HAVOC_malloc(24);
    call {:si_unique_call 1679} Tmp_710 := __HAVOC_malloc(768);
    call {:si_unique_call 1680} Tmp_711 := __HAVOC_malloc(160);
    call {:si_unique_call 1681} Tmp_712 := __HAVOC_malloc(768);
    call {:si_unique_call 1682} Tmp_713 := __HAVOC_malloc(24);
    Tmp_690 := strConst__li2bpl179;
    call {:si_unique_call 1683} DebugPrint(5, 32, Tmp_690);
    i_5 := 0;
    goto L12;

  L12:
    call {:si_unique_call 1684} i_5, Tmp_675, Tmp_676, Tmp_677, Tmp_678, Tmp_679, Tmp_680, McAddress, Tmp_681, Tmp_682, Tmp_683, Tmp_684, Tmp_685, Tmp_686, Tmp_688, Tmp_689, j, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_697, Tmp_698, Tmp_699, Tmp_700, Tmp_702, Tmp_705, Tmp_706, Tmp_707, Tmp_709, Tmp_710, Tmp_711, Tmp_712, Tmp_713, Tmp_714 := NICSetMulticastList_loop_L12(i_5, Tmp_675, Tmp_676, Tmp_677, Tmp_678, Tmp_679, Tmp_680, McAddress, Tmp_681, Tmp_682, Tmp_683, Tmp_684, Tmp_685, Tmp_686, Tmp_688, Tmp_689, j, Tmp_691, Tmp_692, Tmp_694, Tmp_695, Tmp_697, Tmp_698, Tmp_699, Tmp_700, Tmp_702, Tmp_705, Tmp_706, Tmp_707, Tmp_709, Tmp_710, Tmp_711, Tmp_712, Tmp_713, Tmp_714, FdoData_58);
    goto L12_last;

  L12_last:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_689 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_702;
    assume {:nonnull} Tmp_702 != 0;
    assume Tmp_702 > 0;
    havoc Tmp_685;
    assume {:nonnull} Tmp_685 != 0;
    assume Tmp_685 > 0;
    havoc Tmp_678;
    Tmp_692 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_706;
    assume {:nonnull} Tmp_706 != 0;
    assume Tmp_706 > 0;
    havoc Tmp_707;
    assume {:nonnull} Tmp_707 != 0;
    assume Tmp_707 > 0;
    havoc Tmp_698;
    Tmp_699 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_710;
    assume {:nonnull} Tmp_710 != 0;
    assume Tmp_710 > 0;
    havoc Tmp_683;
    assume {:nonnull} Tmp_683 != 0;
    assume Tmp_683 > 0;
    havoc Tmp_680;
    Tmp_679 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_691;
    assume {:nonnull} Tmp_691 != 0;
    assume Tmp_691 > 0;
    havoc Tmp_682;
    assume {:nonnull} Tmp_682 != 0;
    assume Tmp_682 > 0;
    havoc Tmp_697;
    Tmp_705 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_694;
    assume {:nonnull} Tmp_694 != 0;
    assume Tmp_694 > 0;
    havoc Tmp_676;
    assume {:nonnull} Tmp_676 != 0;
    assume Tmp_676 > 0;
    havoc Tmp_688;
    Tmp_714 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_684;
    assume {:nonnull} Tmp_684 != 0;
    assume Tmp_684 > 0;
    havoc Tmp_677;
    assume {:nonnull} Tmp_677 != 0;
    assume Tmp_677 > 0;
    havoc Tmp_675;
    Tmp_711 := strConst__li2bpl181;
    call {:si_unique_call 1685} DebugPrint(5, 32, Tmp_711);
    Tmp_686 := i_5 * 6;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_695;
    assume {:nonnull} Tmp_695 != 0;
    assume Tmp_695 > 0;
    havoc Tmp_700;
    McAddress := Tmp_700 + Tmp_686 * 4;
    j := 0;
    goto L25;

  L25:
    call {:si_unique_call 1686} Tmp_681, j, Tmp_709, Tmp_712, Tmp_713 := NICSetMulticastList_loop_L25(i_5, McAddress, Tmp_681, j, Tmp_709, Tmp_712, Tmp_713, FdoData_58);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > j;
    Tmp_709 := j;
    Tmp_681 := i_5;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_712;
    assume {:nonnull} Tmp_712 != 0;
    assume Tmp_712 > 0;
    havoc Tmp_713;
    assume {:nonnull} McAddress != 0;
    assume McAddress > 0;
    assume {:nonnull} Tmp_713 != 0;
    assume Tmp_713 > 0;
    j := j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:partition} j >= 6;
    i_5 := i_5 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_687;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} Tmp_687 != 0;
    assume Tmp_687 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_704;
    assume {:nonnull} Tmp_704 != 0;
    assume Tmp_704 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_708;
    assume {:nonnull} Tmp_708 != 0;
    assume Tmp_708 > 0;
    call {:si_unique_call 1687} sdv_370 := WaitScb(FdoData_58);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_370 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_1 := 0;
    counter_1 := 250000;
    goto L51;

  L51:
    call {:si_unique_call 1688} counter_1, Tmp_693, Tmp_696 := NICSetMulticastList_loop_L51(counter_1, Tmp_693, Tmp_696, FdoData_58);
    goto L51_last;

  L51_last:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} counter_1 != 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_696;
    assume {:nonnull} Tmp_696 != 0;
    assume Tmp_696 > 0;
    havoc Tmp_693;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_693 == 128;
    counter_1 := counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} Tmp_693 != 128;
    bResult_1 := 1;
    goto L52;

  L52:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} bResult_1 != 0;
    goto L62;

  L62:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    goto L38;

  L38:
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    havoc Tmp_674;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    assume {:nonnull} Tmp_674 != 0;
    assume Tmp_674 > 0;
    call {:si_unique_call 1689} status_51 := D100SubmitCommandBlockAndWait(FdoData_58);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_51 != 0;
    status_51 := -1073741661;
    goto L44;

  L44:
    Tmp_703 := strConst__li2bpl180;
    call {:si_unique_call 1690} DebugPrint(5, 32, Tmp_703);
    Tmp_673 := status_51;
    return;

  anon21_Then:
    assume {:partition} status_51 == 0;
    goto L44;

  anon23_Then:
    assume {:partition} bResult_1 == 0;
    assume {:nonnull} FdoData_58 != 0;
    assume FdoData_58 > 0;
    status_51 := -1073741668;
    goto L62;

  anon22_Then:
    assume {:partition} counter_1 == 0;
    goto L52;

  anon20_Then:
    goto L38;

  anon19_Then:
    assume {:partition} sdv_370 == 0;
    status_51 := -1073741668;
    goto L44;
}



procedure {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_59: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICServiceIndicateStatusIrp"} NICServiceIndicateStatusIrp(actual_FdoData_59: int)
{
  var {:pointer} Tmp_715: int;
  var {:pointer} pIndicateStatus: int;
  var {:scalar} sdv_372: int;
  var {:scalar} ntStatus: int;
  var {:scalar} oldIrql_14: int;
  var {:pointer} Tmp_717: int;
  var {:pointer} pIrp: int;
  var {:pointer} Tmp_718: int;
  var {:pointer} pIrpSp_3: int;
  var {:scalar} outBufLength: int;
  var {:pointer} FdoData_59: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;

  anon0:
    call {:si_unique_call 1691} vslice_dummy_var_203 := __HAVOC_malloc(4);
    FdoData_59 := actual_FdoData_59;
    call {:si_unique_call 1692} Tmp_715 := __HAVOC_malloc(132);
    call {:si_unique_call 1693} Tmp_718 := __HAVOC_malloc(132);
    pIrp := 0;
    pIrpSp_3 := 0;
    pIndicateStatus := 0;
    ntStatus := -1073741536;
    Tmp_718 := strConst__li2bpl183;
    call {:si_unique_call 1694} DebugPrint(5, 32, Tmp_718);
    call {:si_unique_call 1695} Tmp_717 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_717 != 0;
    assume Tmp_717 > 0;
    call {:si_unique_call 1696} sdv_KeAcquireSpinLock(0, Tmp_717);
    assume {:nonnull} Tmp_717 != 0;
    assume Tmp_717 > 0;
    havoc oldIrql_14;
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    havoc pIrp;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} pIrp != 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume pIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1697} SLIC_sdv_IoSetCancelRoutine_entry(0, 0);
    goto L64;

  L64:
    call {:si_unique_call 1698} sdv_372 := sdv_IoSetCancelRoutine(pIrp, 0);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_372 != 0;
    call {:si_unique_call 1699} pIrpSp_3 := sdv_IoGetCurrentIrpStackLocation(pIrp);
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    havoc pIndicateStatus;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    assume {:nonnull} pIrpSp_3 != 0;
    assume pIrpSp_3 > 0;
    havoc outBufLength;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} outBufLength >= 12;
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  L42:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    ntStatus := 0;
    goto L45;

  L45:
    assume {:nonnull} FdoData_59 != 0;
    assume FdoData_59 > 0;
    goto L22;

  L22:
    call {:si_unique_call 1700} sdv_KeReleaseSpinLock(0, oldIrql_14);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pIrp != 0;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    assume {:nonnull} pIrp != 0;
    assume pIrp > 0;
    call {:si_unique_call 1701} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 1702} vslice_dummy_var_204 := PciDrvIoDecrement(FdoData_59);
    goto L47;

  L47:
    Tmp_715 := strConst__li2bpl182;
    call {:si_unique_call 1703} DebugPrint(5, 32, Tmp_715);
    return;

  anon16_Then:
    assume {:partition} pIrp == 0;
    goto L47;

  anon15_Then:
    assume {:nonnull} pIndicateStatus != 0;
    assume pIndicateStatus > 0;
    goto L42;

  anon18_Then:
    assume {:partition} 12 > outBufLength;
    ntStatus := 5;
    goto L45;

  anon14_Then:
    assume {:partition} sdv_372 == 0;
    pIrp := 0;
    goto L22;

  anon13_Then:
    assume !(pIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L64;

  anon17_Then:
    assume {:partition} pIrp == 0;
    goto L22;
}



procedure {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_60: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_719: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_719 == 0 || Tmp_719 == -1073741637;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICGetStatsCounters"} NICGetStatsCounters(actual_FdoData_60: int, actual_Oid_1: int, actual_pCounter: int) returns (Tmp_719: int)
{
  var {:pointer} Tmp_720: int;
  var {:scalar} status_52: int;
  var {:pointer} Tmp_722: int;
  var {:pointer} FdoData_60: int;
  var {:scalar} Oid_1: int;
  var {:pointer} pCounter: int;

  anon0:
    FdoData_60 := actual_FdoData_60;
    Oid_1 := actual_Oid_1;
    pCounter := actual_pCounter;
    call {:si_unique_call 1704} Tmp_720 := __HAVOC_malloc(100);
    call {:si_unique_call 1705} Tmp_722 := __HAVOC_malloc(100);
    status_52 := 0;
    Tmp_722 := strConst__li2bpl185;
    call {:si_unique_call 1706} DebugPrint(5, 32, Tmp_722);
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    call {:si_unique_call 1707} DumpStatsCounters(FdoData_60);
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} Oid_1 != 131329;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} Oid_1 != 131330;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} Oid_1 != 131331;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Oid_1 != 131332;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Oid_1 != 131333;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Oid_1 != 131597;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Oid_1 != 131598;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} Oid_1 != 16908545;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} Oid_1 != 16908546;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Oid_1 != 16908547;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Oid_1 != 16908801;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Oid_1 != 16908802;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Oid_1 != 16908803;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} Oid_1 != 16908804;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} Oid_1 != 16908805;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} Oid_1 != 16908806;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Oid_1 == 16908807;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  L32:
    Tmp_720 := strConst__li2bpl184;
    call {:si_unique_call 1708} DebugPrint(5, 32, Tmp_720);
    Tmp_719 := status_52;
    return;

  anon36_Then:
    assume {:partition} Oid_1 != 16908807;
    status_52 := -1073741637;
    goto L32;

  anon37_Then:
    assume {:partition} Oid_1 == 16908806;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon38_Then:
    assume {:partition} Oid_1 == 16908805;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon39_Then:
    assume {:partition} Oid_1 == 16908804;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon40_Then:
    assume {:partition} Oid_1 == 16908803;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon41_Then:
    assume {:partition} Oid_1 == 16908802;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon42_Then:
    assume {:partition} Oid_1 == 16908801;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon43_Then:
    assume {:partition} Oid_1 == 16908547;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon44_Then:
    assume {:partition} Oid_1 == 16908546;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon45_Then:
    assume {:partition} Oid_1 == 16908545;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon46_Then:
    assume {:partition} Oid_1 == 131598;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon47_Then:
    assume {:partition} Oid_1 == 131597;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon48_Then:
    assume {:partition} Oid_1 == 131333;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon49_Then:
    assume {:partition} Oid_1 == 131332;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon50_Then:
    assume {:partition} Oid_1 == 131331;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon51_Then:
    assume {:partition} Oid_1 == 131330;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;

  anon35_Then:
    assume {:partition} Oid_1 == 131329;
    assume {:nonnull} FdoData_60 != 0;
    assume FdoData_60 > 0;
    assume {:nonnull} pCounter != 0;
    assume pCounter > 0;
    goto L32;
}



procedure {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_61: int, actual_PacketFilter_1: int) returns (Tmp_723: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_723 == 0 || Tmp_723 == -1073741668 || Tmp_723 == -1073741661;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICSetPacketFilter"} NICSetPacketFilter(actual_FdoData_61: int, actual_PacketFilter_1: int) returns (Tmp_723: int)
{
  var {:scalar} i_6: int;
  var {:pointer} Tmp_724: int;
  var {:pointer} Tmp_725: int;
  var {:pointer} Tmp_726: int;
  var {:pointer} Tmp_727: int;
  var {:pointer} Tmp_728: int;
  var {:pointer} Tmp_729: int;
  var {:pointer} Tmp_730: int;
  var {:pointer} Tmp_731: int;
  var {:pointer} Tmp_732: int;
  var {:pointer} Tmp_733: int;
  var {:pointer} Tmp_734: int;
  var {:pointer} Tmp_735: int;
  var {:pointer} Tmp_736: int;
  var {:pointer} Tmp_737: int;
  var {:pointer} Tmp_738: int;
  var {:pointer} Tmp_739: int;
  var {:scalar} counter_2: int;
  var {:pointer} Tmp_740: int;
  var {:pointer} Tmp_741: int;
  var {:pointer} Tmp_742: int;
  var {:scalar} NewParameterField: int;
  var {:pointer} Tmp_743: int;
  var {:pointer} Tmp_744: int;
  var {:pointer} Tmp_745: int;
  var {:pointer} Tmp_746: int;
  var {:pointer} Tmp_747: int;
  var {:scalar} sdv_375: int;
  var {:pointer} Tmp_748: int;
  var {:pointer} Tmp_749: int;
  var {:pointer} Tmp_750: int;
  var {:scalar} Tmp_751: int;
  var {:pointer} Tmp_752: int;
  var {:pointer} Tmp_753: int;
  var {:pointer} Tmp_754: int;
  var {:scalar} Tmp_755: int;
  var {:pointer} Tmp_756: int;
  var {:pointer} Tmp_757: int;
  var {:pointer} Tmp_758: int;
  var {:pointer} Tmp_759: int;
  var {:pointer} Tmp_760: int;
  var {:pointer} Tmp_761: int;
  var {:pointer} Tmp_762: int;
  var {:pointer} Tmp_763: int;
  var {:pointer} Tmp_764: int;
  var {:pointer} Tmp_765: int;
  var {:pointer} Tmp_766: int;
  var {:pointer} Tmp_767: int;
  var {:pointer} Tmp_768: int;
  var {:pointer} Tmp_769: int;
  var {:pointer} Tmp_770: int;
  var {:pointer} Tmp_771: int;
  var {:pointer} Tmp_772: int;
  var {:pointer} Tmp_773: int;
  var {:scalar} Tmp_774: int;
  var {:pointer} Tmp_775: int;
  var {:scalar} sdv_377: int;
  var {:pointer} Tmp_776: int;
  var {:pointer} Tmp_777: int;
  var {:pointer} Tmp_778: int;
  var {:pointer} Tmp_779: int;
  var {:pointer} Tmp_780: int;
  var {:pointer} Tmp_781: int;
  var {:pointer} Tmp_782: int;
  var {:pointer} Tmp_783: int;
  var {:pointer} Tmp_784: int;
  var {:pointer} Tmp_785: int;
  var {:pointer} Tmp_786: int;
  var {:pointer} Tmp_787: int;
  var {:pointer} Tmp_788: int;
  var {:pointer} Tmp_789: int;
  var {:pointer} Tmp_790: int;
  var {:pointer} Tmp_791: int;
  var {:pointer} Tmp_792: int;
  var {:pointer} Tmp_793: int;
  var {:scalar} bResult_2: int;
  var {:scalar} status_53: int;
  var {:pointer} Tmp_794: int;
  var {:pointer} Tmp_795: int;
  var {:pointer} Tmp_796: int;
  var {:pointer} Tmp_797: int;
  var {:pointer} Tmp_798: int;
  var {:pointer} Tmp_800: int;
  var {:pointer} Tmp_801: int;
  var {:pointer} Tmp_802: int;
  var {:pointer} Tmp_803: int;
  var {:pointer} Tmp_804: int;
  var {:pointer} FdoData_61: int;
  var {:scalar} PacketFilter_1: int;
  var boogieTmp: int;

  anon0:
    FdoData_61 := actual_FdoData_61;
    PacketFilter_1 := actual_PacketFilter_1;
    call {:si_unique_call 1709} Tmp_728 := __HAVOC_malloc(100);
    call {:si_unique_call 1710} Tmp_730 := __HAVOC_malloc(88);
    call {:si_unique_call 1711} Tmp_732 := __HAVOC_malloc(88);
    call {:si_unique_call 1712} Tmp_733 := __HAVOC_malloc(88);
    call {:si_unique_call 1713} Tmp_734 := __HAVOC_malloc(88);
    call {:si_unique_call 1714} Tmp_741 := __HAVOC_malloc(88);
    call {:si_unique_call 1715} Tmp_743 := __HAVOC_malloc(88);
    call {:si_unique_call 1716} Tmp_746 := __HAVOC_malloc(88);
    call {:si_unique_call 1717} Tmp_748 := __HAVOC_malloc(88);
    call {:si_unique_call 1718} Tmp_749 := __HAVOC_malloc(188);
    call {:si_unique_call 1719} Tmp_750 := __HAVOC_malloc(88);
    call {:si_unique_call 1720} Tmp_752 := __HAVOC_malloc(172);
    call {:si_unique_call 1721} Tmp_754 := __HAVOC_malloc(88);
    call {:si_unique_call 1722} Tmp_756 := __HAVOC_malloc(88);
    call {:si_unique_call 1723} Tmp_757 := __HAVOC_malloc(88);
    call {:si_unique_call 1724} Tmp_761 := __HAVOC_malloc(88);
    call {:si_unique_call 1725} Tmp_762 := __HAVOC_malloc(140);
    call {:si_unique_call 1726} Tmp_763 := __HAVOC_malloc(88);
    call {:si_unique_call 1727} Tmp_764 := __HAVOC_malloc(88);
    call {:si_unique_call 1728} Tmp_766 := __HAVOC_malloc(88);
    call {:si_unique_call 1729} Tmp_768 := __HAVOC_malloc(88);
    call {:si_unique_call 1730} Tmp_770 := __HAVOC_malloc(88);
    call {:si_unique_call 1731} Tmp_771 := __HAVOC_malloc(88);
    call {:si_unique_call 1732} Tmp_772 := __HAVOC_malloc(88);
    call {:si_unique_call 1733} Tmp_775 := __HAVOC_malloc(88);
    call {:si_unique_call 1734} Tmp_776 := __HAVOC_malloc(88);
    call {:si_unique_call 1735} Tmp_777 := __HAVOC_malloc(88);
    call {:si_unique_call 1736} Tmp_778 := __HAVOC_malloc(88);
    call {:si_unique_call 1737} Tmp_781 := __HAVOC_malloc(88);
    call {:si_unique_call 1738} Tmp_786 := __HAVOC_malloc(88);
    call {:si_unique_call 1739} Tmp_787 := __HAVOC_malloc(88);
    call {:si_unique_call 1740} Tmp_789 := __HAVOC_malloc(88);
    call {:si_unique_call 1741} Tmp_790 := __HAVOC_malloc(192);
    call {:si_unique_call 1742} Tmp_791 := __HAVOC_malloc(88);
    call {:si_unique_call 1743} Tmp_794 := __HAVOC_malloc(88);
    call {:si_unique_call 1744} Tmp_797 := __HAVOC_malloc(88);
    call {:si_unique_call 1745} Tmp_802 := __HAVOC_malloc(88);
    status_53 := 0;
    Tmp_752 := strConst__li2bpl188;
    call {:si_unique_call 1746} DebugPrint(5, 32, Tmp_752);
    NewParameterField := 234;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} BAND(PacketFilter_1, 8) != 0;
    NewParameterField := BAND(NewParameterField, BNOT(2));
    goto L15;

  L15:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} BAND(PacketFilter_1, 32) != 0;
    NewParameterField := BOR(NewParameterField, 1);
    goto L18;

  L18:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    goto L22;

  L22:
    Tmp_762 := strConst__li2bpl186;
    call {:si_unique_call 1747} DebugPrint(5, 32, Tmp_762);
    Tmp_723 := status_53;
    return;

  anon45_Then:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    goto L19;

  L19:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_742;
    assume {:nonnull} Tmp_742 != 0;
    assume Tmp_742 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_796;
    assume {:nonnull} Tmp_796 != 0;
    assume Tmp_796 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_744;
    assume {:nonnull} Tmp_744 != 0;
    assume Tmp_744 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_784;
    assume {:nonnull} Tmp_784 != 0;
    assume Tmp_784 > 0;
    havoc Tmp_791;
    assume {:nonnull} Tmp_791 != 0;
    assume Tmp_791 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_795;
    assume {:nonnull} Tmp_795 != 0;
    assume Tmp_795 > 0;
    havoc Tmp_768;
    assume {:nonnull} Tmp_768 != 0;
    assume Tmp_768 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_726;
    assume {:nonnull} Tmp_726 != 0;
    assume Tmp_726 > 0;
    havoc Tmp_746;
    assume {:nonnull} Tmp_746 != 0;
    assume Tmp_746 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_735;
    assume {:nonnull} Tmp_735 != 0;
    assume Tmp_735 > 0;
    havoc Tmp_757;
    assume {:nonnull} Tmp_757 != 0;
    assume Tmp_757 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_801;
    assume {:nonnull} Tmp_801 != 0;
    assume Tmp_801 > 0;
    havoc Tmp_743;
    assume {:nonnull} Tmp_743 != 0;
    assume Tmp_743 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_785;
    assume {:nonnull} Tmp_785 != 0;
    assume Tmp_785 > 0;
    havoc Tmp_761;
    assume {:nonnull} Tmp_761 != 0;
    assume Tmp_761 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_736;
    assume {:nonnull} Tmp_736 != 0;
    assume Tmp_736 > 0;
    havoc Tmp_789;
    assume {:nonnull} Tmp_789 != 0;
    assume Tmp_789 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_731;
    assume {:nonnull} Tmp_731 != 0;
    assume Tmp_731 > 0;
    havoc Tmp_733;
    assume {:nonnull} Tmp_733 != 0;
    assume Tmp_733 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_788;
    assume {:nonnull} Tmp_788 != 0;
    assume Tmp_788 > 0;
    havoc Tmp_750;
    assume {:nonnull} Tmp_750 != 0;
    assume Tmp_750 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_738;
    assume {:nonnull} Tmp_738 != 0;
    assume Tmp_738 > 0;
    havoc Tmp_763;
    assume {:nonnull} Tmp_763 != 0;
    assume Tmp_763 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_747;
    assume {:nonnull} Tmp_747 != 0;
    assume Tmp_747 > 0;
    havoc Tmp_764;
    assume {:nonnull} Tmp_764 != 0;
    assume Tmp_764 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_759;
    assume {:nonnull} Tmp_759 != 0;
    assume Tmp_759 > 0;
    havoc Tmp_770;
    assume {:nonnull} Tmp_770 != 0;
    assume Tmp_770 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_765;
    assume {:nonnull} Tmp_765 != 0;
    assume Tmp_765 > 0;
    havoc Tmp_732;
    assume {:nonnull} Tmp_732 != 0;
    assume Tmp_732 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_773;
    assume {:nonnull} Tmp_773 != 0;
    assume Tmp_773 > 0;
    havoc Tmp_741;
    assume {:nonnull} Tmp_741 != 0;
    assume Tmp_741 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_745;
    assume {:nonnull} Tmp_745 != 0;
    assume Tmp_745 > 0;
    havoc Tmp_754;
    assume {:nonnull} Tmp_754 != 0;
    assume Tmp_754 > 0;
    call {:si_unique_call 1748} boogieTmp := corral_nondet();
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_800;
    assume {:nonnull} Tmp_800 != 0;
    assume Tmp_800 > 0;
    havoc Tmp_778;
    assume {:nonnull} Tmp_778 != 0;
    assume Tmp_778 > 0;
    call {:si_unique_call 1749} boogieTmp := corral_nondet();
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_724;
    assume {:nonnull} Tmp_724 != 0;
    assume Tmp_724 > 0;
    havoc Tmp_794;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_803;
    assume {:nonnull} Tmp_803 != 0;
    assume Tmp_803 > 0;
    havoc Tmp_777;
    assume {:nonnull} Tmp_777 != 0;
    assume Tmp_777 > 0;
    assume {:nonnull} Tmp_794 != 0;
    assume Tmp_794 > 0;
    goto L46;

  L46:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L49;

  L49:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_758;
    assume {:nonnull} Tmp_758 != 0;
    assume Tmp_758 > 0;
    havoc Tmp_786;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_786 != 0;
    assume Tmp_786 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_737;
    assume {:nonnull} Tmp_737 != 0;
    assume Tmp_737 > 0;
    havoc Tmp_734;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_734 != 0;
    assume Tmp_734 > 0;
    goto L51;

  L51:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_793;
    assume {:nonnull} Tmp_793 != 0;
    assume Tmp_793 > 0;
    havoc Tmp_781;
    assume {:nonnull} Tmp_781 != 0;
    assume Tmp_781 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_727;
    assume {:nonnull} Tmp_727 != 0;
    assume Tmp_727 > 0;
    havoc Tmp_775;
    assume {:nonnull} Tmp_775 != 0;
    assume Tmp_775 > 0;
    goto L55;

  L55:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_792;
    assume {:nonnull} Tmp_792 != 0;
    assume Tmp_792 > 0;
    havoc Tmp_797;
    assume {:nonnull} Tmp_797 != 0;
    assume Tmp_797 > 0;
    goto L58;

  L58:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(PacketFilter_1, 4) != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_782;
    assume {:nonnull} Tmp_782 != 0;
    assume Tmp_782 > 0;
    havoc Tmp_802;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    goto L61;

  L61:
    call {:si_unique_call 1750} sdv_375 := WaitScb(FdoData_61);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_375 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    bResult_2 := 0;
    counter_2 := 250000;
    goto L91;

  L91:
    call {:si_unique_call 1751} counter_2, Tmp_740, Tmp_774 := NICSetPacketFilter_loop_L91(counter_2, Tmp_740, Tmp_774, FdoData_61);
    goto L91_last;

  L91_last:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} counter_2 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_740;
    assume {:nonnull} Tmp_740 != 0;
    assume Tmp_740 > 0;
    havoc Tmp_774;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Tmp_774 == 128;
    counter_2 := counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    assume false;
    return;

  anon62_Then:
    assume {:partition} Tmp_774 != 128;
    bResult_2 := 1;
    goto L92;

  L92:
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} bResult_2 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_779;
    assume {:nonnull} Tmp_779 != 0;
    assume Tmp_779 > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    call {:si_unique_call 1752} status_53 := D100IssueScbCommand(FdoData_61, 4, 1);
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} status_53 == 0;
    goto L103;

  L103:
    call {:si_unique_call 1753} sdv_377 := WaitScb(FdoData_61);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} sdv_377 != 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto L68;

  L68:
    Tmp_790 := strConst__li2bpl187;
    call {:si_unique_call 1754} DebugPrint(5, 32, Tmp_790);
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_783;
    assume {:nonnull} Tmp_783 != 0;
    assume Tmp_783 > 0;
    Tmp_769 := CbStatus__CB_HEADER_STRUC(Tmp_783);
    Tmp_749 := strConst__li2bpl189;
    call {:si_unique_call 1755} DebugPrint(5, 32, Tmp_749);
    i_6 := 0;
    goto L76;

  L76:
    call {:si_unique_call 1756} i_6, Tmp_728, Tmp_751, Tmp_755, Tmp_756, Tmp_760 := NICSetPacketFilter_loop_L76(i_6, Tmp_728, Tmp_751, Tmp_755, Tmp_756, Tmp_760, FdoData_61);
    goto L76_last;

  L76_last:
    assume {:CounterLoop 22} {:Counter "i_6"} true;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} 22 > i_6;
    Tmp_755 := i_6;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_760;
    assume {:nonnull} Tmp_760 != 0;
    assume Tmp_760 > 0;
    havoc Tmp_756;
    assume {:nonnull} Tmp_756 != 0;
    assume Tmp_756 > 0;
    havoc Tmp_751;
    Tmp_728 := strConst__li2bpl190;
    call {:si_unique_call 1757} DebugPrint(6, 32, Tmp_728);
    i_6 := i_6 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    assume false;
    return;

  anon54_Then:
    assume {:partition} i_6 >= 22;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_739;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    assume {:nonnull} Tmp_739 != 0;
    assume Tmp_739 > 0;
    call {:si_unique_call 1758} status_53 := D100SubmitCommandBlockAndWait(FdoData_61);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_53 != 0;
    status_53 := -1073741661;
    goto L22;

  anon55_Then:
    assume {:partition} status_53 == 0;
    goto L22;

  anon59_Then:
    assume {:partition} sdv_377 == 0;
    status_53 := -1073741668;
    goto L22;

  anon58_Then:
    assume {:partition} status_53 != 0;
    goto L22;

  anon63_Then:
    goto L103;

  anon57_Then:
    assume {:partition} bResult_2 == 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    status_53 := -1073741668;
    goto L22;

  anon56_Then:
    assume {:partition} counter_2 == 0;
    goto L92;

  anon53_Then:
    goto L68;

  anon52_Then:
    assume {:partition} sdv_375 == 0;
    status_53 := -1073741668;
    goto L22;

  anon51_Then:
    assume {:partition} BAND(PacketFilter_1, 4) == 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_729;
    assume {:nonnull} Tmp_729 != 0;
    assume Tmp_729 > 0;
    havoc Tmp_776;
    assume {:nonnull} Tmp_776 != 0;
    assume Tmp_776 > 0;
    goto L61;

  anon49_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_798;
    assume {:nonnull} Tmp_798 != 0;
    assume Tmp_798 > 0;
    havoc Tmp_772;
    assume {:nonnull} Tmp_772 != 0;
    assume Tmp_772 > 0;
    goto L58;

  anon50_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_725;
    assume {:nonnull} Tmp_725 != 0;
    assume Tmp_725 > 0;
    havoc Tmp_787;
    assume {:nonnull} Tmp_787 != 0;
    assume Tmp_787 > 0;
    goto L58;

  anon48_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_767;
    assume {:nonnull} Tmp_767 != 0;
    assume Tmp_767 > 0;
    havoc Tmp_748;
    assume {:nonnull} Tmp_748 != 0;
    assume Tmp_748 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_780;
    assume {:nonnull} Tmp_780 != 0;
    assume Tmp_780 > 0;
    havoc Tmp_766;
    assume {:nonnull} Tmp_766 != 0;
    assume Tmp_766 > 0;
    goto L55;

  anon46_Then:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_804;
    assume {:nonnull} Tmp_804 != 0;
    assume Tmp_804 > 0;
    havoc Tmp_771;
    assume {:nonnull} Tmp_771 != 0;
    assume Tmp_771 > 0;
    assume {:nonnull} FdoData_61 != 0;
    assume FdoData_61 > 0;
    havoc Tmp_753;
    assume {:nonnull} Tmp_753 != 0;
    assume Tmp_753 > 0;
    havoc Tmp_730;
    assume {:nonnull} Tmp_730 != 0;
    assume Tmp_730 > 0;
    goto L51;

  anon47_Then:
    goto L49;

  anon61_Then:
    goto L46;

  anon44_Then:
    goto L19;

  anon43_Then:
    assume {:partition} BAND(PacketFilter_1, 32) == 0;
    NewParameterField := BAND(NewParameterField, BNOT(1));
    goto L18;

  anon60_Then:
    assume {:partition} BAND(PacketFilter_1, 8) == 0;
    NewParameterField := BOR(NewParameterField, 2);
    goto L15;
}



procedure {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_62: int, actual_Irp_32: int, actual_BytesWritten: int) returns (Tmp_805: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICHandleQueryOidRequest"} NICHandleQueryOidRequest(actual_FdoData_62: int, actual_Irp_32: int, actual_BytesWritten: int) returns (Tmp_805: int)
{
  var {:dopa} {:scalar} ulInfoLen: int;
  var {:scalar} CurrMediaState: int;
  var {:dopa} {:scalar} ulInfo: int;
  var {:pointer} DataBuffer_1: int;
  var {:scalar} InformationBufferLength_3: int;
  var {:scalar} Oid_2: int;
  var {:scalar} Power: int;
  var {:scalar} BufferLength_1: int;
  var {:pointer} Tmp_806: int;
  var {:scalar} oldIrql_15: int;
  var {:pointer} Tmp_807: int;
  var {:scalar} ulBytesAvailable: int;
  var {:dopa} {:scalar} ul64Info: int;
  var {:dopa} {:scalar} status_54: int;
  var {:scalar} Tmp_808: int;
  var {:pointer} pIrpSp_4: int;
  var {:pointer} Tmp_809: int;
  var {:pointer} Tmp_810: int;
  var {:pointer} pQuery: int;
  var {:pointer} FdoData_62: int;
  var {:pointer} Irp_32: int;
  var {:pointer} BytesWritten: int;
  var boogieTmp: int;
  var vslice_dummy_var_38: int;

  anon0:
    call {:si_unique_call 1759} ulInfoLen := __HAVOC_malloc(4);
    call {:si_unique_call 1760} ulInfo := __HAVOC_malloc(4);
    call {:si_unique_call 1761} Power := __HAVOC_malloc(16);
    call {:si_unique_call 1762} ul64Info := __HAVOC_malloc(4);
    call {:si_unique_call 1763} status_54 := __HAVOC_malloc(4);
    FdoData_62 := actual_FdoData_62;
    Irp_32 := actual_Irp_32;
    BytesWritten := actual_BytesWritten;
    call {:si_unique_call 1764} Tmp_807 := __HAVOC_malloc(180);
    call {:si_unique_call 1765} Tmp_809 := __HAVOC_malloc(16);
    call {:si_unique_call 1766} Tmp_810 := __HAVOC_malloc(108);
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    assume {:nonnull} ul64Info != 0;
    assume ul64Info > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    InformationBufferLength_3 := 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    havoc ulBytesAvailable;
    call {:si_unique_call 1767} pIrpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_32);
    assume {:nonnull} Irp_32 != 0;
    assume Irp_32 > 0;
    havoc DataBuffer_1;
    assume {:nonnull} pIrpSp_4 != 0;
    assume pIrpSp_4 > 0;
    havoc BufferLength_1;
    Tmp_810 := strConst__li2bpl192;
    call {:si_unique_call 1768} DebugPrint(5, 32, Tmp_810);
    Oid_2 := 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} 8 > BufferLength_1;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto L41;

  L41:
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto L43;

  L43:
    Tmp_807 := strConst__li2bpl191;
    call {:si_unique_call 1769} DebugPrint(6, 32, Tmp_807);
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    havoc Tmp_805;
    return;

  anon71_Then:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    havoc vslice_dummy_var_38;
    call {:si_unique_call 1770} sdv_RtlMoveMemory(0, 0, vslice_dummy_var_38);
    goto L43;

  anon103_Then:
    goto L43;

  anon72_Then:
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto L43;

  anon102_Then:
    assume {:partition} BufferLength_1 >= 8;
    pQuery := DataBuffer_1;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Oid_2;
    assume {:nonnull} pQuery != 0;
    assume pQuery > 0;
    havoc Tmp_809;
    InformationBufferLength_3 := BufferLength_1 - 4;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} Oid_2 != 65799;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} Oid_2 != 65812;
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} Oid_2 != 131329;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Oid_2 != 131330;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} Oid_2 != 131331;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} Oid_2 != 131332;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Oid_2 != 131333;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} Oid_2 != 131597;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Oid_2 != 131598;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} Oid_2 != 16843009;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Oid_2 != 16843010;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} Oid_2 != 16843012;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Oid_2 != 16908545;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} Oid_2 != 16908546;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} Oid_2 != 16908547;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} Oid_2 != 16908801;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} Oid_2 != 16908802;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} Oid_2 != 16908803;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} Oid_2 != 16908804;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} Oid_2 != 16908805;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} Oid_2 != 16908806;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} Oid_2 != 16908807;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} Oid_2 != -50265856;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} Oid_2 == -50265854;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto L41;

  anon79_Then:
    assume {:partition} Oid_2 != -50265854;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto L41;

  anon80_Then:
    assume {:partition} Oid_2 == -50265856;
    call {:si_unique_call 1771} NICFillPoMgmtCaps(FdoData_62, Power, status_54, ulInfoLen);
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto L41;

  anon74_Then:
    goto L41;

  anon81_Then:
    assume {:partition} Oid_2 == 16908807;
    goto L60;

  L60:
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    call {:si_unique_call 1772} boogieTmp := NICGetStatsCounters(FdoData_62, Oid_2, ul64Info);
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    havoc ulBytesAvailable;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 4 > InformationBufferLength_3;
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    assume {:nonnull} BytesWritten != 0;
    assume BytesWritten > 0;
    goto L41;

  anon75_Then:
    assume {:partition} InformationBufferLength_3 >= 4;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} InformationBufferLength_3 > ulBytesAvailable;
    Tmp_808 := ulBytesAvailable;
    goto L94;

  L94:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto L41;

  anon76_Then:
    assume {:partition} ulBytesAvailable >= InformationBufferLength_3;
    Tmp_808 := InformationBufferLength_3;
    goto L94;

  anon105_Then:
    goto L41;

  anon82_Then:
    assume {:partition} Oid_2 == 16908806;
    goto L60;

  anon83_Then:
    assume {:partition} Oid_2 == 16908805;
    goto L60;

  anon84_Then:
    assume {:partition} Oid_2 == 16908804;
    goto L60;

  anon85_Then:
    assume {:partition} Oid_2 == 16908803;
    goto L60;

  anon86_Then:
    assume {:partition} Oid_2 == 16908802;
    goto L60;

  anon87_Then:
    assume {:partition} Oid_2 == 16908801;
    goto L60;

  anon88_Then:
    assume {:partition} Oid_2 == 16908547;
    goto L60;

  anon89_Then:
    assume {:partition} Oid_2 == 16908546;
    goto L60;

  anon90_Then:
    assume {:partition} Oid_2 == 16908545;
    goto L60;

  anon91_Then:
    assume {:partition} Oid_2 == 16843012;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    goto L41;

  anon92_Then:
    assume {:partition} Oid_2 == 16843010;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    havoc ulBytesAvailable;
    goto L41;

  anon93_Then:
    assume {:partition} Oid_2 == 16843009;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    havoc ulBytesAvailable;
    goto L41;

  anon94_Then:
    assume {:partition} Oid_2 == 131598;
    goto L60;

  anon95_Then:
    assume {:partition} Oid_2 == 131597;
    goto L60;

  anon96_Then:
    assume {:partition} Oid_2 == 131333;
    goto L60;

  anon97_Then:
    assume {:partition} Oid_2 == 131332;
    goto L60;

  anon98_Then:
    assume {:partition} Oid_2 == 131331;
    goto L60;

  anon99_Then:
    assume {:partition} Oid_2 == 131330;
    goto L60;

  anon100_Then:
    assume {:partition} Oid_2 == 131329;
    goto L60;

  anon101_Then:
    assume {:partition} Oid_2 == 65812;
    goto L59;

  L59:
    assume {:nonnull} ulInfoLen != 0;
    assume ulInfoLen > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    call {:si_unique_call 1773} Tmp_806 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    call {:si_unique_call 1774} sdv_KeAcquireSpinLock(0, Tmp_806);
    assume {:nonnull} Tmp_806 != 0;
    assume Tmp_806 > 0;
    havoc oldIrql_15;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} status_54 != 0;
    assume status_54 > 0;
    call {:si_unique_call 1775} boogieTmp := PciDrvQueueIoctlIrp(FdoData_62, Irp_32);
    call {:si_unique_call 1776} sdv_KeReleaseSpinLock(0, oldIrql_15);
    goto L41;

  anon77_Then:
    call {:si_unique_call 1777} sdv_KeReleaseSpinLock(0, oldIrql_15);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} Oid_2 == 65799;
    assume {:nonnull} FdoData_62 != 0;
    assume FdoData_62 > 0;
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    goto L41;

  anon78_Then:
    assume {:partition} Oid_2 != 65799;
    call {:si_unique_call 1778} CurrMediaState := NICIndicateMediaState(FdoData_62);
    assume {:nonnull} ulInfo != 0;
    assume ulInfo > 0;
    goto L41;

  anon73_Then:
    goto L41;

  anon104_Then:
    assume {:partition} Oid_2 == 65799;
    goto L59;
}



procedure {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_63: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICFillPoMgmtCaps"} NICFillPoMgmtCaps(actual_FdoData_63: int, actual_pPower: int, actual_pStatus: int, actual_pulInfoLen: int)
{
  var {:scalar} bIsPoMgmtSupported: int;
  var {:pointer} FdoData_63: int;
  var {:pointer} pPower: int;
  var {:pointer} pStatus: int;
  var {:pointer} pulInfoLen: int;
  var vslice_dummy_var_205: int;

  anon0:
    call {:si_unique_call 1779} vslice_dummy_var_205 := __HAVOC_malloc(4);
    FdoData_63 := actual_FdoData_63;
    pPower := actual_pPower;
    pStatus := actual_pStatus;
    pulInfoLen := actual_pulInfoLen;
    call {:si_unique_call 1780} bIsPoMgmtSupported := IsPoMgmtSupported(FdoData_63);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} bIsPoMgmtSupported == 1;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pPower != 0;
    assume pPower > 0;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} bIsPoMgmtSupported != 1;
    call {:si_unique_call 1781} sdv_RtlZeroMemory(0, 16);
    assume {:nonnull} pStatus != 0;
    assume pStatus > 0;
    assume {:nonnull} pulInfoLen != 0;
    assume pulInfoLen > 0;
    goto L1;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_206: int;

  anon0:
    call {:si_unique_call 1782} vslice_dummy_var_206 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_64: int) returns (Tmp_815: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICIndicateMediaState"} NICIndicateMediaState(actual_FdoData_64: int) returns (Tmp_815: int)
{
  var {:scalar} CurrMediaState_1: int;
  var {:pointer} Tmp_816: int;
  var {:pointer} Tmp_817: int;
  var {:pointer} Tmp_818: int;
  var {:scalar} oldIrql_16: int;
  var {:pointer} FdoData_64: int;

  anon0:
    FdoData_64 := actual_FdoData_64;
    call {:si_unique_call 1783} Tmp_817 := __HAVOC_malloc(108);
    call {:si_unique_call 1784} Tmp_818 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_818 != 0;
    assume Tmp_818 > 0;
    call {:si_unique_call 1785} sdv_KeAcquireSpinLock(0, Tmp_818);
    assume {:nonnull} Tmp_818 != 0;
    assume Tmp_818 > 0;
    havoc oldIrql_16;
    call {:si_unique_call 1786} CurrMediaState_1 := GetMediaState(FdoData_64);
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} CurrMediaState_1 != 0;
    Tmp_816 := strConst__li2bpl194;
    goto L19;

  L19:
    Tmp_817 := strConst__li2bpl195;
    call {:si_unique_call 1787} DebugPrint(3, 32, Tmp_817);
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} CurrMediaState_1 != 0;
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto L26;

  L26:
    call {:si_unique_call 1788} sdv_KeReleaseSpinLock(0, oldIrql_16);
    call {:si_unique_call 1789} NICServiceIndicateStatusIrp(FdoData_64);
    goto L32;

  L32:
    Tmp_815 := CurrMediaState_1;
    return;

  anon9_Then:
    assume {:partition} CurrMediaState_1 == 0;
    assume {:nonnull} FdoData_64 != 0;
    assume FdoData_64 > 0;
    goto L26;

  anon8_Then:
    assume {:partition} CurrMediaState_1 == 0;
    Tmp_816 := strConst__li2bpl193;
    goto L19;

  anon7_Then:
    call {:si_unique_call 1790} sdv_KeReleaseSpinLock(0, oldIrql_16);
    goto L32;
}



procedure {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_819: int);
  free ensures {:va_keep} Tmp_819 == 1 || Tmp_819 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MdiRead"} MdiRead(actual_Adapter_1: int, actual_RegAddress: int, actual_PhyAddress: int, actual_Recoverable: int, actual_DataValue: int) returns (Tmp_819: int)
{
  var {:scalar} counter_3: int;
  var {:pointer} Tmp_820: int;
  var {:pointer} Tmp_821: int;
  var {:scalar} bResult_3: int;
  var {:pointer} Tmp_823: int;
  var {:pointer} Adapter_1: int;
  var {:scalar} Recoverable: int;
  var {:pointer} DataValue: int;
  var boogieTmp: int;

  anon0:
    Adapter_1 := actual_Adapter_1;
    Recoverable := actual_Recoverable;
    DataValue := actual_DataValue;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_821;
    assume {:nonnull} Tmp_821 != 0;
    assume Tmp_821 > 0;
    call {:si_unique_call 1791} boogieTmp := corral_nondet();
    bResult_3 := 0;
    counter_3 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 1792} counter_3, Tmp_820 := MdiRead_loop_L11(counter_3, Tmp_820, Adapter_1);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} counter_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_820;
    assume {:nonnull} Tmp_820 != 0;
    assume Tmp_820 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    counter_3 := counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    assume false;
    return;

  anon12_Then:
    bResult_3 := 1;
    goto L12;

  L12:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} bResult_3 != 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    havoc Tmp_823;
    assume {:nonnull} DataValue != 0;
    assume DataValue > 0;
    assume {:nonnull} Tmp_823 != 0;
    assume Tmp_823 > 0;
    Tmp_819 := bResult_3;
    goto L1;

  L1:
    return;

  anon10_Then:
    assume {:partition} bResult_3 == 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} Recoverable != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    Tmp_819 := bResult_3;
    goto L1;

  anon11_Then:
    assume {:partition} Recoverable == 0;
    assume {:nonnull} Adapter_1 != 0;
    assume Adapter_1 > 0;
    goto L24;

  anon9_Then:
    assume {:partition} counter_3 == 0;
    goto L12;
}



procedure {:origName "WaitScb"} WaitScb(actual_FdoData_65: int) returns (Tmp_824: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_824 == 1 || Tmp_824 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "WaitScb"} WaitScb(actual_FdoData_65: int) returns (Tmp_824: int)
{
  var {:scalar} counter_4: int;
  var {:pointer} pCSRAddress: int;
  var {:scalar} bResult_4: int;
  var {:pointer} Tmp_826: int;
  var {:pointer} FdoData_65: int;

  anon0:
    FdoData_65 := actual_FdoData_65;
    call {:si_unique_call 1793} Tmp_826 := __HAVOC_malloc(136);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    havoc pCSRAddress;
    bResult_4 := 0;
    counter_4 := 30000;
    goto L9;

  L9:
    call {:si_unique_call 1794} counter_4 := WaitScb_loop_L9(counter_4, pCSRAddress);
    goto L9_last;

  L9_last:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_4 != 0;
    assume {:nonnull} pCSRAddress != 0;
    assume pCSRAddress > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_4 := counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_4 := 1;
    goto L10;

  L10:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_4 != 0;
    goto L21;

  L21:
    Tmp_824 := bResult_4;
    return;

  anon8_Then:
    assume {:partition} bResult_4 == 0;
    Tmp_826 := strConst__li2bpl196;
    call {:si_unique_call 1795} DebugPrint(2, 4096, Tmp_826);
    assume {:nonnull} FdoData_65 != 0;
    assume FdoData_65 > 0;
    goto L21;

  anon7_Then:
    assume {:partition} counter_4 == 0;
    goto L10;
}



procedure {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_827: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_827 == 0 || Tmp_827 == -1073741668;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "D100SubmitCommandBlockAndWait"} D100SubmitCommandBlockAndWait(actual_Adapter_2: int) returns (Tmp_827: int)
{
  var {:scalar} counter_5: int;
  var {:pointer} Tmp_828: int;
  var {:pointer} Tmp_829: int;
  var {:pointer} CommandBlock: int;
  var {:scalar} sdv_386: int;
  var {:pointer} Tmp_830: int;
  var {:pointer} Tmp_831: int;
  var {:scalar} status_55: int;
  var {:scalar} bResult_5: int;
  var {:pointer} Adapter_2: int;
  var vslice_dummy_var_207: int;

  anon0:
    Adapter_2 := actual_Adapter_2;
    call {:si_unique_call 1796} Tmp_830 := __HAVOC_malloc(64);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc CommandBlock;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    call {:si_unique_call 1797} vslice_dummy_var_207 := D100IssueScbCommand(Adapter_2, 16, 0);
    call {:si_unique_call 1798} sdv_386 := WaitScb(Adapter_2);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_386 != 0;
    bResult_5 := 0;
    counter_5 := 150000;
    goto L20;

  L20:
    call {:si_unique_call 1799} counter_5 := D100SubmitCommandBlockAndWait_loop_L20(counter_5, CommandBlock);
    goto L20_last;

  L20_last:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} counter_5 != 0;
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    counter_5 := counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    assume false;
    return;

  anon16_Then:
    bResult_5 := 1;
    goto L21;

  L21:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} bResult_5 != 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_829;
    assume {:nonnull} Tmp_829 != 0;
    assume Tmp_829 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_828;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    havoc Tmp_831;
    assume {:nonnull} Tmp_828 != 0;
    assume Tmp_828 > 0;
    assume {:nonnull} Tmp_831 != 0;
    assume Tmp_831 > 0;
    goto L31;

  L31:
    assume {:nonnull} CommandBlock != 0;
    assume CommandBlock > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    status_55 := 0;
    goto L37;

  L37:
    Tmp_827 := status_55;
    goto L1;

  L1:
    return;

  anon17_Then:
    Tmp_830 := strConst__li2bpl197;
    call {:si_unique_call 1800} DebugPrint(2, 4096, Tmp_830);
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    status_55 := -1073741668;
    goto L37;

  anon18_Then:
    goto L31;

  anon15_Then:
    assume {:partition} bResult_5 == 0;
    assume {:nonnull} Adapter_2 != 0;
    assume Adapter_2 > 0;
    Tmp_827 := -1073741668;
    goto L1;

  anon14_Then:
    assume {:partition} counter_5 == 0;
    goto L21;

  anon13_Then:
    assume {:partition} sdv_386 == 0;
    Tmp_827 := -1073741668;
    goto L1;
}



procedure {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_833: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "GetMediaState"} GetMediaState(actual_Adapter_3: int) returns (Tmp_833: int)
{
  var {:dopa} {:scalar} MdiStatusReg: int;
  var {:scalar} bResult2: int;
  var {:scalar} bResult1: int;
  var {:pointer} Adapter_3: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;

  anon0:
    call {:si_unique_call 1801} MdiStatusReg := __HAVOC_malloc(4);
    Adapter_3 := actual_Adapter_3;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_39;
    call {:si_unique_call 1802} bResult1 := MdiRead(Adapter_3, 1, vslice_dummy_var_39, 1, MdiStatusReg);
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc vslice_dummy_var_40;
    call {:si_unique_call 1803} bResult2 := MdiRead(Adapter_3, 1, vslice_dummy_var_40, 1, MdiStatusReg);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} bResult1 != 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult2 != 0;
    assume {:nonnull} MdiStatusReg != 0;
    assume MdiStatusReg > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_833 := 0;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_833 := 1;
    goto L1;

  anon8_Then:
    assume {:partition} bResult2 == 0;
    goto L16;

  L16:
    assume {:nonnull} Adapter_3 != 0;
    assume Adapter_3 > 0;
    havoc Tmp_833;
    goto L1;

  anon7_Then:
    assume {:partition} bResult1 == 0;
    goto L16;
}



procedure {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICIssueFullReset"} NICIssueFullReset(actual_Adapter_4: int)
{
  var {:pointer} Tmp_835: int;
  var {:scalar} counter_6: int;
  var {:pointer} Tmp_836: int;
  var {:scalar} bResult_6: int;
  var {:pointer} Adapter_4: int;
  var vslice_dummy_var_208: int;

  anon0:
    call {:si_unique_call 1804} vslice_dummy_var_208 := __HAVOC_malloc(4);
    Adapter_4 := actual_Adapter_4;
    call {:si_unique_call 1805} NICIssueSelectiveReset(Adapter_4);
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_836;
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    bResult_6 := 0;
    counter_6 := 100;
    goto L11;

  L11:
    call {:si_unique_call 1806} Tmp_835, counter_6 := NICIssueFullReset_loop_L11(Tmp_835, counter_6, Adapter_4);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_6 != 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    havoc Tmp_835;
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_6 := counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_6 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_6 != 0;
    call {:si_unique_call 1807} NICDisableInterrupt(Adapter_4);
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_6 == 0;
    assume {:nonnull} Adapter_4 != 0;
    assume Adapter_4 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_6 == 0;
    goto L12;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_209: int;

  anon0:
    call {:si_unique_call 1808} vslice_dummy_var_209 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "DumpStatsCounters"} DumpStatsCounters(actual_Adapter_5: int)
{
  var {:pointer} Tmp_841: int;
  var {:pointer} Tmp_842: int;
  var {:pointer} Tmp_843: int;
  var {:pointer} Tmp_844: int;
  var {:pointer} Tmp_845: int;
  var {:pointer} Tmp_846: int;
  var {:pointer} Tmp_847: int;
  var {:pointer} Tmp_848: int;
  var {:pointer} Tmp_849: int;
  var {:scalar} counter_7: int;
  var {:pointer} Tmp_850: int;
  var {:pointer} Tmp_851: int;
  var {:pointer} Tmp_852: int;
  var {:pointer} Tmp_853: int;
  var {:pointer} Tmp_854: int;
  var {:pointer} Tmp_855: int;
  var {:pointer} Tmp_856: int;
  var {:pointer} Tmp_857: int;
  var {:pointer} Tmp_858: int;
  var {:pointer} Tmp_859: int;
  var {:pointer} Tmp_860: int;
  var {:pointer} Tmp_861: int;
  var {:pointer} Tmp_862: int;
  var {:pointer} Tmp_863: int;
  var {:pointer} Tmp_865: int;
  var {:pointer} Tmp_866: int;
  var {:pointer} Tmp_867: int;
  var {:pointer} Tmp_868: int;
  var {:pointer} Tmp_869: int;
  var {:pointer} Tmp_870: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_873: int;
  var {:pointer} Tmp_874: int;
  var {:scalar} oldIrql_17: int;
  var {:pointer} Tmp_875: int;
  var {:pointer} Tmp_876: int;
  var {:pointer} Tmp_877: int;
  var {:pointer} Tmp_878: int;
  var {:pointer} Tmp_879: int;
  var {:pointer} Tmp_880: int;
  var {:pointer} Tmp_881: int;
  var {:pointer} Tmp_882: int;
  var {:scalar} bResult_7: int;
  var {:pointer} Tmp_883: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} Tmp_885: int;
  var {:pointer} Tmp_886: int;
  var {:pointer} Tmp_887: int;
  var {:pointer} Tmp_888: int;
  var {:pointer} Tmp_889: int;
  var {:pointer} Tmp_890: int;
  var {:pointer} Tmp_891: int;
  var {:pointer} Tmp_892: int;
  var {:pointer} Adapter_5: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;

  anon0:
    call {:si_unique_call 1809} vslice_dummy_var_210 := __HAVOC_malloc(4);
    Adapter_5 := actual_Adapter_5;
    call {:si_unique_call 1810} Tmp_847 := __HAVOC_malloc(72);
    call {:si_unique_call 1811} Tmp_849 := __HAVOC_malloc(76);
    call {:si_unique_call 1812} Tmp_852 := __HAVOC_malloc(100);
    call {:si_unique_call 1813} Tmp_853 := __HAVOC_malloc(92);
    call {:si_unique_call 1814} Tmp_858 := __HAVOC_malloc(92);
    call {:si_unique_call 1815} Tmp_859 := __HAVOC_malloc(84);
    call {:si_unique_call 1816} Tmp_867 := __HAVOC_malloc(108);
    call {:si_unique_call 1817} Tmp_869 := __HAVOC_malloc(92);
    call {:si_unique_call 1818} Tmp_870 := __HAVOC_malloc(96);
    call {:si_unique_call 1819} Tmp_873 := __HAVOC_malloc(100);
    call {:si_unique_call 1820} Tmp_880 := __HAVOC_malloc(88);
    call {:si_unique_call 1821} Tmp_881 := __HAVOC_malloc(116);
    call {:si_unique_call 1822} Tmp_883 := __HAVOC_malloc(92);
    call {:si_unique_call 1823} Tmp_884 := __HAVOC_malloc(80);
    call {:si_unique_call 1824} Tmp_888 := __HAVOC_malloc(100);
    call {:si_unique_call 1825} Tmp_892 := __HAVOC_malloc(76);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_874;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    call {:si_unique_call 1826} Tmp_882 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    call {:si_unique_call 1827} sdv_KeAcquireSpinLock(0, Tmp_882);
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    havoc oldIrql_17;
    call {:si_unique_call 1828} vslice_dummy_var_211 := D100IssueScbCommand(Adapter_5, 112, 1);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    call {:si_unique_call 1829} sdv_KeReleaseSpinLock(0, oldIrql_17);
    bResult_7 := 0;
    counter_7 := 100000;
    goto L19;

  L19:
    call {:si_unique_call 1830} counter_7, Tmp_878 := DumpStatsCounters_loop_L19(counter_7, Tmp_878, Adapter_5);
    goto L19_last;

  L19_last:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_7 != 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_878;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_7 := counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_7 := 1;
    goto L20;

  L20:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_7 != 0;
    Tmp_849 := strConst__li2bpl198;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_854;
    call {:si_unique_call 1831} DebugPrint(6, 32, Tmp_849);
    Tmp_847 := strConst__li2bpl199;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_856;
    call {:si_unique_call 1832} DebugPrint(6, 32, Tmp_847);
    Tmp_892 := strConst__li2bpl200;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_885;
    call {:si_unique_call 1833} DebugPrint(6, 32, Tmp_892);
    Tmp_884 := strConst__li2bpl201;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_860;
    call {:si_unique_call 1834} DebugPrint(6, 32, Tmp_884);
    Tmp_858 := strConst__li2bpl202;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_843;
    call {:si_unique_call 1835} DebugPrint(6, 32, Tmp_858);
    Tmp_880 := strConst__li2bpl203;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_850;
    call {:si_unique_call 1836} DebugPrint(6, 32, Tmp_880);
    Tmp_869 := strConst__li2bpl204;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_886;
    call {:si_unique_call 1837} DebugPrint(6, 32, Tmp_869);
    Tmp_870 := strConst__li2bpl205;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_842;
    call {:si_unique_call 1838} DebugPrint(6, 32, Tmp_870);
    Tmp_888 := strConst__li2bpl206;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_855;
    call {:si_unique_call 1839} DebugPrint(6, 32, Tmp_888);
    Tmp_859 := strConst__li2bpl207;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_889;
    call {:si_unique_call 1840} DebugPrint(6, 32, Tmp_859);
    Tmp_883 := strConst__li2bpl208;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_865;
    call {:si_unique_call 1841} DebugPrint(6, 32, Tmp_883);
    Tmp_881 := strConst__li2bpl209;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_879;
    call {:si_unique_call 1842} DebugPrint(6, 32, Tmp_881);
    Tmp_852 := strConst__li2bpl210;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_863;
    call {:si_unique_call 1843} DebugPrint(6, 32, Tmp_852);
    Tmp_867 := strConst__li2bpl211;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_887;
    call {:si_unique_call 1844} DebugPrint(6, 32, Tmp_867);
    Tmp_853 := strConst__li2bpl212;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_841;
    call {:si_unique_call 1845} DebugPrint(6, 32, Tmp_853);
    Tmp_873 := strConst__li2bpl213;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_848;
    call {:si_unique_call 1846} DebugPrint(6, 32, Tmp_873);
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_844;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_844 != 0;
    assume Tmp_844 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_877;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_877 != 0;
    assume Tmp_877 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_851;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_851 != 0;
    assume Tmp_851 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_890;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_890 != 0;
    assume Tmp_890 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_871;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_861;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_861 != 0;
    assume Tmp_861 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_857;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_857 != 0;
    assume Tmp_857 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_846;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_846 != 0;
    assume Tmp_846 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_891;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_891 != 0;
    assume Tmp_891 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_866;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_866 != 0;
    assume Tmp_866 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_845;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_845 != 0;
    assume Tmp_845 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_876;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_876 != 0;
    assume Tmp_876 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_868;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_868 != 0;
    assume Tmp_868 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_875;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_875 != 0;
    assume Tmp_875 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_862;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_862 != 0;
    assume Tmp_862 > 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    havoc Tmp_872;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_7 == 0;
    assume {:nonnull} Adapter_5 != 0;
    assume Adapter_5 > 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_7 == 0;
    goto L20;
}



procedure {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICIssueSelectiveReset"} NICIssueSelectiveReset(actual_Adapter_6: int)
{
  var {:pointer} Tmp_893: int;
  var {:scalar} Tmp_894: int;
  var {:scalar} counter_8: int;
  var {:pointer} Tmp_895: int;
  var {:pointer} Tmp_896: int;
  var {:pointer} Tmp_897: int;
  var {:scalar} counter_9: int;
  var {:scalar} bResult_8: int;
  var {:pointer} Tmp_900: int;
  var {:pointer} Tmp_901: int;
  var {:pointer} Adapter_6: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 1847} vslice_dummy_var_212 := __HAVOC_malloc(4);
    Adapter_6 := actual_Adapter_6;
    call {:si_unique_call 1848} Tmp_901 := __HAVOC_malloc(208);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    goto L9;

  L9:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    bResult_8 := 0;
    counter_8 := 100000;
    goto L13;

  L13:
    call {:si_unique_call 1849} Tmp_894, counter_8, Tmp_895 := NICIssueSelectiveReset_loop_L13(Tmp_894, counter_8, Tmp_895, Adapter_6);
    goto L13_last;

  L13_last:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} counter_8 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_895;
    assume {:nonnull} Tmp_895 != 0;
    assume Tmp_895 > 0;
    havoc Tmp_894;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_894 == 128;
    counter_8 := counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} Tmp_894 != 128;
    bResult_8 := 1;
    goto L14;

  L14:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} bResult_8 != 0;
    goto L24;

  L24:
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_893;
    assume {:nonnull} Tmp_893 != 0;
    assume Tmp_893 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 1850} vslice_dummy_var_214 := D100IssueScbCommand(Adapter_6, 4, 1);
    goto L25;

  L25:
    Tmp_901 := strConst__li2bpl214;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_897;
    call {:si_unique_call 1851} DebugPrint(5, 4096, Tmp_901);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_900;
    assume {:nonnull} Tmp_900 != 0;
    assume Tmp_900 > 0;
    bResult_8 := 0;
    counter_9 := 100;
    goto L39;

  L39:
    call {:si_unique_call 1852} Tmp_896, counter_9 := NICIssueSelectiveReset_loop_L39(Tmp_896, counter_9, Adapter_6);
    goto L39_last;

  L39_last:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} counter_9 != 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    havoc Tmp_896;
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    counter_9 := counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    assume false;
    return;

  anon27_Then:
    bResult_8 := 1;
    goto L40;

  L40:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} bResult_8 != 0;
    goto L49;

  L49:
    call {:si_unique_call 1853} NICDisableInterrupt(Adapter_6);
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L49;

  anon23_Then:
    assume {:partition} counter_9 == 0;
    goto L40;

  anon26_Then:
    goto L25;

  anon22_Then:
    assume {:partition} bResult_8 == 0;
    assume {:nonnull} Adapter_6 != 0;
    assume Adapter_6 > 0;
    goto L24;

  anon21_Then:
    assume {:partition} counter_8 == 0;
    goto L14;

  anon20_Then:
    goto L1;

  anon19_Then:
    call {:si_unique_call 1854} vslice_dummy_var_213 := WaitScb(Adapter_6);
    goto L9;
}



procedure {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MdiWrite"} MdiWrite(actual_Adapter_7: int, actual_RegAddress_1: int, actual_PhyAddress_1: int, actual_DataValue_1: int)
{
  var {:scalar} counter_10: int;
  var {:pointer} Tmp_903: int;
  var {:pointer} Tmp_904: int;
  var {:scalar} bResult_9: int;
  var {:pointer} Adapter_7: int;
  var boogieTmp: int;
  var vslice_dummy_var_215: int;

  anon0:
    call {:si_unique_call 1855} vslice_dummy_var_215 := __HAVOC_malloc(4);
    Adapter_7 := actual_Adapter_7;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_903;
    assume {:nonnull} Tmp_903 != 0;
    assume Tmp_903 > 0;
    call {:si_unique_call 1856} boogieTmp := corral_nondet();
    bResult_9 := 0;
    counter_10 := 100000;
    goto L11;

  L11:
    call {:si_unique_call 1857} counter_10, Tmp_904 := MdiWrite_loop_L11(counter_10, Tmp_904, Adapter_7);
    goto L11_last;

  L11_last:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} counter_10 != 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    havoc Tmp_904;
    assume {:nonnull} Tmp_904 != 0;
    assume Tmp_904 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    counter_10 := counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    bResult_9 := 1;
    goto L12;

  L12:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} bResult_9 == 0;
    assume {:nonnull} Adapter_7 != 0;
    assume Adapter_7 > 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    assume {:partition} bResult_9 != 0;
    goto L1;

  anon7_Then:
    assume {:partition} counter_10 == 0;
    goto L12;
}



procedure {:origName "ResetPhy"} ResetPhy(actual_FdoData_66: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ResetPhy"} ResetPhy(actual_FdoData_66: int)
{
  var {:scalar} MdiControlReg: int;
  var {:pointer} FdoData_66: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_41: int;

  anon0:
    call {:si_unique_call 1858} vslice_dummy_var_216 := __HAVOC_malloc(4);
    FdoData_66 := actual_FdoData_66;
    MdiControlReg := 37376;
    assume {:nonnull} FdoData_66 != 0;
    assume FdoData_66 > 0;
    havoc vslice_dummy_var_41;
    call {:si_unique_call 1859} MdiWrite(FdoData_66, 0, vslice_dummy_var_41, MdiControlReg);
    return;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_217: int;

  anon0:
    call {:si_unique_call 1860} vslice_dummy_var_217 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 1861} vslice_dummy_var_218 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_912: int);
  free ensures {:va_keep} Tmp_912 == 0 || Tmp_912 == -1073741675;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "RtlULongAdd"} RtlULongAdd(actual_ulAugend: int, actual_ulAddend: int, actual_pulResult: int) returns (Tmp_912: int)
{
  var {:scalar} status_57: int;
  var {:scalar} ulAugend: int;
  var {:scalar} ulAddend: int;
  var {:pointer} pulResult: int;

  anon0:
    ulAugend := actual_ulAugend;
    ulAddend := actual_ulAddend;
    pulResult := actual_pulResult;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} ulAugend + ulAddend >= ulAugend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    status_57 := 0;
    goto L8;

  L8:
    Tmp_912 := status_57;
    return;

  anon3_Then:
    assume {:partition} ulAugend > ulAugend + ulAddend;
    assume {:nonnull} pulResult != 0;
    assume pulResult > 0;
    status_57 := -1073741675;
    goto L8;
}



procedure {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_914: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "RemoveHeadList"} RemoveHeadList(actual_ListHead_2: int) returns (Tmp_914: int)
{
  var {:pointer} NextEntry: int;
  var {:pointer} Entry_1: int;
  var {:pointer} ListHead_2: int;

  anon0:
    ListHead_2 := actual_ListHead_2;
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    havoc Entry_1;
    assume {:nonnull} Entry_1 != 0;
    assume Entry_1 > 0;
    havoc NextEntry;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto L9;

  L9:
    call {:si_unique_call 1862} FatalListEntryError(ListHead_2, Entry_1, NextEntry);
    goto L12;

  L12:
    assume {:nonnull} ListHead_2 != 0;
    assume ListHead_2 > 0;
    assume {:nonnull} NextEntry != 0;
    assume NextEntry > 0;
    Tmp_914 := Entry_1;
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L12;

  anon5_Then:
    goto L9;
}



procedure {:origName "RtlFailFast"} RtlFailFast(actual_Code: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "RtlFailFast"} RtlFailFast(actual_Code: int)
{
  var vslice_dummy_var_219: int;

  anon0:
    call {:si_unique_call 1863} vslice_dummy_var_219 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_67: int) returns (Tmp_918: int);
  free ensures {:va_keep} Tmp_918 == -1073741661 || Tmp_918 == 16 || Tmp_918 == -1073741667 || Tmp_918 == -1073741823;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "MP_GET_STATUS_FROM_FLAGS"} MP_GET_STATUS_FROM_FLAGS(actual_FdoData_67: int) returns (Tmp_918: int)
{
  var {:scalar} Status_2: int;
  var {:pointer} FdoData_67: int;

  anon0:
    FdoData_67 := actual_FdoData_67;
    Status_2 := -1073741823;
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Status_2 := -1073741661;
    goto L8;

  L8:
    Tmp_918 := Status_2;
    return;

  anon9_Then:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Status_2 := 16;
    goto L8;

  anon7_Then:
    assume {:nonnull} FdoData_67 != 0;
    assume FdoData_67 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Status_2 := -1073741667;
    goto L8;

  anon8_Then:
    goto L8;
}



procedure {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "InitializeListHead"} InitializeListHead(actual_ListHead_3: int)
{
  var {:pointer} ListHead_3: int;
  var vslice_dummy_var_220: int;

  anon0:
    call {:si_unique_call 1864} vslice_dummy_var_220 := __HAVOC_malloc(4);
    ListHead_3 := actual_ListHead_3;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    assume {:nonnull} ListHead_3 != 0;
    assume ListHead_3 > 0;
    return;
}



procedure {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "FatalListEntryError"} FatalListEntryError(actual_p1: int, actual_p2: int, actual_p3: int)
{
  var vslice_dummy_var_221: int;

  anon0:
    call {:si_unique_call 1865} vslice_dummy_var_221 := __HAVOC_malloc(4);
    call {:si_unique_call 1866} RtlFailFast(3);
    return;
}



procedure {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_68: int) returns (Tmp_924: int);
  free ensures {:va_keep} Tmp_924 == 1 || Tmp_924 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "IsPoMgmtSupported"} IsPoMgmtSupported(actual_FdoData_68: int) returns (Tmp_924: int)
{
  var {:pointer} FdoData_68: int;

  anon0:
    FdoData_68 := actual_FdoData_68;
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:nonnull} FdoData_68 != 0;
    assume FdoData_68 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_924 := 1;
    goto L1;

  L1:
    return;

  anon9_Then:
    goto L4;

  L4:
    Tmp_924 := 0;
    goto L1;

  anon8_Then:
    goto L4;

  anon7_Then:
    goto L4;
}



procedure {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_69: int, actual_ScbCommandLow: int, actual_WaitForScb: int) returns (Tmp_926: int);
  modifies alloc;
  free ensures {:va_keep} Tmp_926 == -1073741668 || Tmp_926 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "D100IssueScbCommand"} D100IssueScbCommand(actual_FdoData_69: int, actual_ScbCommandLow: int, actual_WaitForScb: int) returns (Tmp_926: int)
{
  var {:pointer} Tmp_927: int;
  var {:scalar} sdv_392: int;
  var {:pointer} FdoData_69: int;
  var {:scalar} ScbCommandLow: int;
  var {:scalar} WaitForScb: int;

  anon0:
    FdoData_69 := actual_FdoData_69;
    ScbCommandLow := actual_ScbCommandLow;
    WaitForScb := actual_WaitForScb;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} WaitForScb == 1;
    call {:si_unique_call 1867} sdv_392 := WaitScb(FdoData_69);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} sdv_392 == 0;
    Tmp_926 := -1073741668;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} sdv_392 != 0;
    goto L4;

  L4:
    assume {:nonnull} FdoData_69 != 0;
    assume FdoData_69 > 0;
    havoc Tmp_927;
    assume {:nonnull} Tmp_927 != 0;
    assume Tmp_927 > 0;
    Tmp_926 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} WaitForScb != 1;
    goto L4;
}



procedure {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_70: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICDisableInterrupt"} NICDisableInterrupt(actual_FdoData_70: int)
{
  var {:pointer} Tmp_930: int;
  var {:pointer} FdoData_70: int;
  var vslice_dummy_var_222: int;

  anon0:
    call {:si_unique_call 1868} vslice_dummy_var_222 := __HAVOC_malloc(4);
    FdoData_70 := actual_FdoData_70;
    assume {:nonnull} FdoData_70 != 0;
    assume FdoData_70 > 0;
    havoc Tmp_930;
    assume {:nonnull} Tmp_930 != 0;
    assume Tmp_930 > 0;
    return;
}



procedure {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_2: int, actual_Entry_2: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "ExFreeToNPagedLookasideList"} ExFreeToNPagedLookasideList(actual_Lookaside_2: int, actual_Entry_2: int)
{
  var {:pointer} Tmp_934: int;
  var {:pointer} Lookaside_2: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 1869} vslice_dummy_var_223 := __HAVOC_malloc(4);
    Lookaside_2 := actual_Lookaside_2;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    Tmp_934 := ListHead__GENERAL_LOOKASIDE(L__NPAGED_LOOKASIDE_LIST(Lookaside_2));
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Tmp_934 != 0;
    assume Tmp_934 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    assume {:nonnull} Lookaside_2 != 0;
    assume Lookaside_2 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto L1;

  anon5_Then:
    call {:si_unique_call 1870} vslice_dummy_var_224 := __HAVOC_malloc(1);
    goto L1;
}



procedure {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_4: int) returns (Tmp_935: int);
  free ensures {:va_keep} Tmp_935 == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICEnableInterrupt"} NICEnableInterrupt(actual_Context_4: int) returns (Tmp_935: int)
{
  var {:pointer} FdoData_71: int;
  var {:pointer} Tmp_937: int;
  var {:pointer} Context_4: int;

  anon0:
    Context_4 := actual_Context_4;
    FdoData_71 := Context_4;
    assume {:nonnull} FdoData_71 != 0;
    assume FdoData_71 > 0;
    havoc Tmp_937;
    assume {:nonnull} Tmp_937 != 0;
    assume Tmp_937 > 0;
    Tmp_935 := 1;
    return;
}



procedure {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_397: int, actual_sdv_398: int) returns (Tmp_940: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "sdv_InsertTailList"} sdv_InsertTailList(actual_sdv_397: int, actual_sdv_398: int) returns (Tmp_940: int)
{
  var {:scalar} sdv_399: int;

  anon0:
    call {:si_unique_call 1871} sdv_399 := __HAVOC_malloc(4);
    call {:si_unique_call 1872} Tmp_940 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_940 != 0;
    assume Tmp_940 > 0;
    assume {:nonnull} sdv_399 != 0;
    assume sdv_399 > 0;
    return;
}



procedure {:origName "_sdv_init18"} {:osmodel} _sdv_init18();
  modifies SLAM_guard_S_1, SLAM_guard_S_0, IoSetCancelRoutineCalled, IrpPended, IrpCancelChecked, yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> IrpCancelChecked != 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> IrpPended != 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 1;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> yogi_error == old(yogi_error);
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} IoSetCancelRoutineCalled == 0;
  free ensures {:va_keep} IrpPended == 0;
  free ensures {:va_keep} yogi_error == 0;
  free ensures {:va_keep} IrpCancelChecked == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "_sdv_init18"} {:osmodel} _sdv_init18()
{

  anon0:
    SLAM_guard_S_1 := SLAM_guard_S_1_init;
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    IoSetCancelRoutineCalled := 0;
    IrpPended := 0;
    IrpCancelChecked := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_14_0"} SLIC_ABORT_14_0(actual_caller: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_14_0"} SLIC_ABORT_14_0(actual_caller: int)
{
  var {:pointer} caller: int;

  anon0:
    caller := actual_caller;
    call {:si_unique_call 1873} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_sdv_IoMarkIrpPending_entry"} {:osmodel} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_1: int);
  modifies IrpPended;
  free ensures {:va_keep} old(IrpPended) == 0 ==> IrpPended != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} IrpPended == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_sdv_IoMarkIrpPending_entry"} {:osmodel} SLIC_sdv_IoMarkIrpPending_entry(actual_caller_1: int)
{

  anon0:
    IrpPended := 1;
    return;
}



procedure {:origName "SLIC_PciDrvCleanup_exit"} {:osmodel} SLIC_PciDrvCleanup_exit(actual_caller_2: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvCleanup_exit"} {:osmodel} SLIC_PciDrvCleanup_exit(actual_caller_2: int)
{
  var {:pointer} caller_2: int;

  anon0:
    caller_2 := actual_caller_2;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1874} SLIC_ABORT_12_0(caller_2);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC__read_via_variable_1"} {:osmodel} SLIC__read_via_variable_1(actual_caller_3: int, actual_SLIC: int);
  modifies IrpCancelChecked;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} IrpCancelChecked == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC__read_via_variable_1"} {:osmodel} SLIC__read_via_variable_1(actual_caller_3: int, actual_SLIC: int)
{

  anon0:
    IrpCancelChecked := 1;
    return;
}



procedure {:origName "SLIC_ABORT_16_0"} SLIC_ABORT_16_0(actual_caller_4: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_16_0"} SLIC_ABORT_16_0(actual_caller_4: int)
{
  var {:pointer} caller_4: int;

  anon0:
    caller_4 := actual_caller_4;
    call {:si_unique_call 1875} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_ABORT_18_0"} SLIC_ABORT_18_0(actual_caller_5: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_18_0"} SLIC_ABORT_18_0(actual_caller_5: int)
{
  var {:pointer} caller_5: int;

  anon0:
    caller_5 := actual_caller_5;
    call {:si_unique_call 1876} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_ABORT_10_0"} SLIC_ABORT_10_0(actual_caller_6: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_10_0"} SLIC_ABORT_10_0(actual_caller_6: int)
{
  var {:pointer} caller_6: int;

  anon0:
    caller_6 := actual_caller_6;
    call {:si_unique_call 1877} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_PciDrvDispatchIO_exit"} {:osmodel} SLIC_PciDrvDispatchIO_exit(actual_caller_8: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvDispatchIO_exit"} {:osmodel} SLIC_PciDrvDispatchIO_exit(actual_caller_8: int)
{
  var {:pointer} caller_8: int;

  anon0:
    caller_8 := actual_caller_8;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1878} SLIC_ABORT_14_0(caller_8);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC_PciDrvClose_exit"} {:osmodel} SLIC_PciDrvClose_exit(actual_caller_9: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvClose_exit"} {:osmodel} SLIC_PciDrvClose_exit(actual_caller_9: int)
{
  var {:pointer} caller_9: int;

  anon0:
    caller_9 := actual_caller_9;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1879} SLIC_ABORT_16_0(caller_9);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_8_0"} SLIC_ABORT_8_0(actual_caller_10: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_8_0"} SLIC_ABORT_8_0(actual_caller_10: int)
{
  var {:pointer} caller_10: int;

  anon0:
    caller_10 := actual_caller_10;
    call {:si_unique_call 1880} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_ABORT_12_0"} SLIC_ABORT_12_0(actual_caller_11: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_12_0"} SLIC_ABORT_12_0(actual_caller_11: int)
{
  var {:pointer} caller_11: int;

  anon0:
    caller_11 := actual_caller_11;
    call {:si_unique_call 1881} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_sdv_IoSetCancelRoutine_entry"} {:osmodel} SLIC_sdv_IoSetCancelRoutine_entry(actual_caller_12: int, actual_sdv_400: int);
  modifies IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_sdv_IoSetCancelRoutine_entry"} {:osmodel} SLIC_sdv_IoSetCancelRoutine_entry(actual_caller_12: int, actual_sdv_400: int)
{
  var {:scalar} sdv_400: int;

  anon0:
    sdv_400 := actual_sdv_400;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} sdv_400 != 0;
    IoSetCancelRoutineCalled := 1;
    goto L2;

  L2:
    return;

  anon3_Then:
    assume {:partition} sdv_400 == 0;
    goto L2;
}



procedure {:origName "SLIC_ABORT_6_0"} SLIC_ABORT_6_0(actual_caller_13: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ABORT_6_0"} SLIC_ABORT_6_0(actual_caller_13: int)
{
  var {:pointer} caller_13: int;

  anon0:
    caller_13 := actual_caller_13;
    call {:si_unique_call 1882} SLIC_ERROR_ROUTINE(strConst__li2bpl215);
    return;
}



procedure {:origName "SLIC_PciDrvCreate_exit"} {:osmodel} SLIC_PciDrvCreate_exit(actual_caller_14: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvCreate_exit"} {:osmodel} SLIC_PciDrvCreate_exit(actual_caller_14: int)
{
  var {:pointer} caller_14: int;

  anon0:
    caller_14 := actual_caller_14;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1883} SLIC_ABORT_18_0(caller_14);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC_PciDrvSystemControl_exit"} {:osmodel} SLIC_PciDrvSystemControl_exit(actual_caller_16: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvSystemControl_exit"} {:osmodel} SLIC_PciDrvSystemControl_exit(actual_caller_16: int)
{
  var {:pointer} caller_16: int;

  anon0:
    caller_16 := actual_caller_16;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1884} SLIC_ABORT_8_0(caller_16);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 1;
  free ensures {:va_keep} old(IrpPended) == 1 ==> yogi_error == 1;
  free ensures {:va_keep} yogi_error == 1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_PciDrvDispatchPower_exit"} {:osmodel} SLIC_PciDrvDispatchPower_exit(actual_caller_17: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvDispatchPower_exit"} {:osmodel} SLIC_PciDrvDispatchPower_exit(actual_caller_17: int)
{
  var {:pointer} caller_17: int;

  anon0:
    caller_17 := actual_caller_17;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1885} SLIC_ABORT_10_0(caller_17);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:origName "SLIC_PciDrvDispatchPnp_exit"} {:osmodel} SLIC_PciDrvDispatchPnp_exit(actual_caller_18: int);
  modifies yogi_error;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> yogi_error == 0;
  free ensures {:va_keep} old(IrpPended) == 0 ==> yogi_error == 0;
  free ensures {:va_keep} yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "SLIC_PciDrvDispatchPnp_exit"} {:osmodel} SLIC_PciDrvDispatchPnp_exit(actual_caller_18: int)
{
  var {:pointer} caller_18: int;

  anon0:
    caller_18 := actual_caller_18;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} IrpPended != 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} IoSetCancelRoutineCalled != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} IrpCancelChecked == 0;
    call {:si_unique_call 1886} SLIC_ABORT_6_0(caller_18);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    assume {:partition} IrpCancelChecked != 0;
    goto L2;

  anon11_Then:
    assume {:partition} IoSetCancelRoutineCalled == 0;
    goto L2;

  anon9_Then:
    assume {:partition} IrpPended == 0;
    goto L2;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    return;
}



function {:inline true} {:fieldmap "Mem_T.AiForceDpx__FDO_DATA"} {:fieldname "AiForceDpx"} AiForceDpx__FDO_DATA(x: int) : int
{
  x + 1760
}

function {:inline true} {:fieldmap "Mem_T.AiRxDmaCount__FDO_DATA"} {:fieldname "AiRxDmaCount"} AiRxDmaCount__FDO_DATA(x: int) : int
{
  x + 1752
}

function {:inline true} {:fieldmap "Mem_T.AiTxDmaCount__FDO_DATA"} {:fieldname "AiTxDmaCount"} AiTxDmaCount__FDO_DATA(x: int) : int
{
  x + 1748
}

function {:inline true} {:fieldmap "Mem_T.AllocNewRfd__FDO_DATA"} {:fieldname "AllocNewRfd"} AllocNewRfd__FDO_DATA(x: int) : int
{
  x + 2308
}

function {:inline true} {:fieldmap "Mem_T.AllocateCommonBuffer__FDO_DATA"} {:fieldname "AllocateCommonBuffer"} AllocateCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2044
}

function {:inline true} {:fieldmap "Mem_T.AllocatedMapRegisters__FDO_DATA"} {:fieldname "AllocatedMapRegisters"} AllocatedMapRegisters__FDO_DATA(x: int) : int
{
  x + 1920
}

function {:inline true} {:fieldmap "Mem_T.AllocationSize__MP_WAKE_PATTERN"} {:fieldname "AllocationSize"} AllocationSize__MP_WAKE_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AllowIdleDetectionRegistration__FDO_DATA"} {:fieldname "AllowIdleDetectionRegistration"} AllowIdleDetectionRegistration__FDO_DATA(x: int) : int
{
  x + 1620
}

function {:inline true} {:fieldmap "Mem_T.AllowWakeArming__FDO_DATA"} {:fieldname "AllowWakeArming"} AllowWakeArming__FDO_DATA(x: int) : int
{
  x + 900
}

function {:inline true} {:fieldmap "Mem_T.Argument1__WORKER_ITEM_CONTEXT"} {:fieldname "Argument1"} Argument1__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Argument2__WORKER_ITEM_CONTEXT"} {:fieldname "Argument2"} Argument2__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Blink__LIST_ENTRY"} {:fieldname "Blink"} Blink__LIST_ENTRY(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BuildScatterGatherList__DMA_OPERATIONS"} {:fieldname "BuildScatterGatherList"} BuildScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.CSRAddress__FDO_DATA"} {:fieldname "CSRAddress"} CSRAddress__FDO_DATA(x: int) : int
{
  x + 1852
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.CbCommand__CB_HEADER_STRUC"} {:fieldname "CbCommand"} CbCommand__CB_HEADER_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CbLinkPointer__CB_HEADER_STRUC"} {:fieldname "CbLinkPointer"} CbLinkPointer__CB_HEADER_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CbStatus"} CbStatus__CB_HEADER_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CommandComplete__ERR_COUNT_STRUC"} {:fieldname "CommandComplete"} CommandComplete__ERR_COUNT_STRUC(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.ConfigBytes__CONFIG_CB_STRUC"} {:fieldname "ConfigBytes"} ConfigBytes__CONFIG_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ConfigCBHeader__CONFIG_CB_STRUC"} {:fieldname "ConfigCBHeader"} ConfigCBHeader__CONFIG_CB_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Config_unnamed_tag_69"} {:fieldname "Config"} Config_unnamed_tag_69(x: int) : int
{
  x + 784
}

function {:inline true} {:fieldmap "Mem_T.ConservationIdleTime__FDO_DATA"} {:fieldname "ConservationIdleTime"} ConservationIdleTime__FDO_DATA(x: int) : int
{
  x + 1624
}

function {:inline true} {:fieldmap "Mem_T.Count__MP_TCB"} {:fieldname "Count"} Count__MP_TCB(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CurrNumRfd__FDO_DATA"} {:fieldname "CurrNumRfd"} CurrNumRfd__FDO_DATA(x: int) : int
{
  x + 2164
}

function {:inline true} {:fieldmap "Mem_T.CurrSendHead__FDO_DATA"} {:fieldname "CurrSendHead"} CurrSendHead__FDO_DATA(x: int) : int
{
  x + 2052
}

function {:inline true} {:fieldmap "Mem_T.CurrentAddress__FDO_DATA"} {:fieldname "CurrentAddress"} CurrentAddress__FDO_DATA(x: int) : int
{
  x + 1712
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_6"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_6(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataLength__KEY_VALUE_FULL_INFORMATION"} {:fieldname "DataLength"} DataLength__KEY_VALUE_FULL_INFORMATION(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Data__NDISPROT_QUERY_OID"} {:fieldname "Data"} Data__NDISPROT_QUERY_OID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Depth__GENERAL_LOOKASIDE"} {:fieldname "Depth"} Depth__GENERAL_LOOKASIDE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Depth__SLIST_HEADER"} {:fieldname "Depth"} Depth__SLIST_HEADER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DeviceCaps__FDO_DATA"} {:fieldname "DeviceCaps"} DeviceCaps__FDO_DATA(x: int) : int
{
  x + 368
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_8"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_8(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DevicePnPState__FDO_DATA"} {:fieldname "DevicePnPState"} DevicePnPState__FDO_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DevicePowerState__FDO_DATA"} {:fieldname "DevicePowerState"} DevicePowerState__FDO_DATA(x: int) : int
{
  x + 564
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__DEVICE_CAPABILITIES"} {:fieldname "DeviceState"} DeviceState__DEVICE_CAPABILITIES(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DmaAdapterObject__FDO_DATA"} {:fieldname "DmaAdapterObject"} DmaAdapterObject__FDO_DATA(x: int) : int
{
  x + 2040
}

function {:inline true} {:fieldmap "Mem_T.DmaOperations__DMA_ADAPTER"} {:fieldname "DmaOperations"} DmaOperations__DMA_ADAPTER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DriverContext_unnamed_tag_6"} {:fieldname "DriverContext"} DriverContext_unnamed_tag_6(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DumpSpace__FDO_DATA"} {:fieldname "DumpSpace"} DumpSpace__FDO_DATA(x: int) : int
{
  x + 3152
}

function {:inline true} {:fieldmap "Mem_T.FileObject__IO_STACK_LOCATION"} {:fieldname "FileObject"} FileObject__IO_STACK_LOCATION(x: int) : int
{
  x + 532
}

function {:inline true} {:fieldmap "Mem_T.Flags__FDO_DATA"} {:fieldname "Flags"} Flags__FDO_DATA(x: int) : int
{
  x + 1680
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_RFD"} {:fieldname "Flags"} Flags__MP_RFD(x: int) : int
{
  x + 68
}

function {:inline true} {:fieldmap "Mem_T.Flags__MP_TCB"} {:fieldname "Flags"} Flags__MP_TCB(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flags__NDIS_PNP_CAPABILITIES"} {:fieldname "Flags"} Flags__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FreeCommonBuffer__FDO_DATA"} {:fieldname "FreeCommonBuffer"} FreeCommonBuffer__FDO_DATA(x: int) : int
{
  x + 2048
}

function {:inline true} {:fieldmap "Mem_T.FreeMisses__GENERAL_LOOKASIDE"} {:fieldname "FreeMisses"} FreeMisses__GENERAL_LOOKASIDE(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.Free__GENERAL_LOOKASIDE"} {:fieldname "Free"} Free__GENERAL_LOOKASIDE(x: int) : int
{
  x + 76
}

function {:inline true} {:fieldmap "Mem_T.GoodReceives__FDO_DATA"} {:fieldname "GoodReceives"} GoodReceives__FDO_DATA(x: int) : int
{
  x + 3604
}

function {:inline true} {:fieldmap "Mem_T.GoodTransmits__FDO_DATA"} {:fieldname "GoodTransmits"} GoodTransmits__FDO_DATA(x: int) : int
{
  x + 3600
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HwMiscMemAllocVa__FDO_DATA"} {:fieldname "HwMiscMemAllocVa"} HwMiscMemAllocVa__FDO_DATA(x: int) : int
{
  x + 3108
}

function {:inline true} {:fieldmap "Mem_T.HwRfdPhys__MP_RFD"} {:fieldname "HwRfdPhys"} HwRfdPhys__MP_RFD(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.HwRfd__MP_RFD"} {:fieldname "HwRfd"} HwRfd__MP_RFD(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.HwSendMemAllocVa__FDO_DATA"} {:fieldname "HwSendMemAllocVa"} HwSendMemAllocVa__FDO_DATA(x: int) : int
{
  x + 2108
}

function {:inline true} {:fieldmap "Mem_T.HwTcb__MP_TCB"} {:fieldname "HwTcb"} HwTcb__MP_TCB(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.IaAddress__IA_CB_STRUC"} {:fieldname "IaAddress"} IaAddress__IA_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IdleDetectionEnabled__FDO_DATA"} {:fieldname "IdleDetectionEnabled"} IdleDetectionEnabled__FDO_DATA(x: int) : int
{
  x + 1616
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "IdleDetectionTimerDpc"} IdleDetectionTimerDpc__FDO_DATA(x: int) : int
{
  x + 1064
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerDownCompleteEvent"} IdlePowerDownCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1460
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "IdlePowerUpCompleteEvent"} IdlePowerUpCompleteEvent__FDO_DATA(x: int) : int
{
  x + 1304
}

function {:inline true} {:fieldmap "Mem_T.IdlePowerUpRequested__FDO_DATA"} {:fieldname "IdlePowerUpRequested"} IdlePowerUpRequested__FDO_DATA(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.IndicatedStatus__NDISPROT_INDICATE_STATUS"} {:fieldname "IndicatedStatus"} IndicatedStatus__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_22"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterruptAffinity__FDO_DATA"} {:fieldname "InterruptAffinity"} InterruptAffinity__FDO_DATA(x: int) : int
{
  x + 1840
}

function {:inline true} {:fieldmap "Mem_T.InterruptLevel__FDO_DATA"} {:fieldname "InterruptLevel"} InterruptLevel__FDO_DATA(x: int) : int
{
  x + 1832
}

function {:inline true} {:fieldmap "Mem_T.InterruptMode__FDO_DATA"} {:fieldname "InterruptMode"} InterruptMode__FDO_DATA(x: int) : int
{
  x + 1844
}

function {:inline true} {:fieldmap "Mem_T.InterruptVector__FDO_DATA"} {:fieldname "InterruptVector"} InterruptVector__FDO_DATA(x: int) : int
{
  x + 1836
}

function {:inline true} {:fieldmap "Mem_T.Interrupt__FDO_DATA"} {:fieldname "Interrupt"} Interrupt__FDO_DATA(x: int) : int
{
  x + 1828
}

function {:inline true} {:fieldmap "Mem_T.IoBaseAddress__FDO_DATA"} {:fieldname "IoBaseAddress"} IoBaseAddress__FDO_DATA(x: int) : int
{
  x + 1800
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_22"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_22(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoRange__FDO_DATA"} {:fieldname "IoRange"} IoRange__FDO_DATA(x: int) : int
{
  x + 1804
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Irp__MP_TCB"} {:fieldname "Irp"} Irp__MP_TCB(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsDeviceIdle__FDO_DATA"} {:fieldname "IsDeviceIdle"} IsDeviceIdle__FDO_DATA(x: int) : int
{
  x + 904
}

function {:inline true} {:fieldmap "Mem_T.IsUpperEdgeNdis__FDO_DATA"} {:fieldname "IsUpperEdgeNdis"} IsUpperEdgeNdis__FDO_DATA(x: int) : int
{
  x + 1684
}

function {:inline true} {:fieldmap "Mem_T.L__NPAGED_LOOKASIDE_LIST"} {:fieldname "L"} L__NPAGED_LOOKASIDE_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_18"} {:fieldname "Length"} Length_unnamed_tag_18(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "ListEntry"} ListEntry_unnamed_tag_6(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T._SLIST_HEADER"} {:fieldname "ListHead"} ListHead__GENERAL_LOOKASIDE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MCAddressCount__FDO_DATA"} {:fieldname "MCAddressCount"} MCAddressCount__FDO_DATA(x: int) : int
{
  x + 2336
}

function {:inline true} {:fieldmap "Mem_T.MCList__FDO_DATA"} {:fieldname "MCList"} MCList__FDO_DATA(x: int) : int
{
  x + 2340
}

function {:inline true} {:fieldmap "Mem_T.MDIControl__CSR_STRUC"} {:fieldname "MDIControl"} MDIControl__CSR_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MWIEnable__FDO_DATA"} {:fieldname "MWIEnable"} MWIEnable__FDO_DATA(x: int) : int
{
  x + 1772
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MappedPorts__FDO_DATA"} {:fieldname "MappedPorts"} MappedPorts__FDO_DATA(x: int) : int
{
  x + 1848
}

function {:inline true} {:fieldmap "Mem_T.MaskSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "MaskSize"} MaskSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MaxNumRfd__FDO_DATA"} {:fieldname "MaxNumRfd"} MaxNumRfd__FDO_DATA(x: int) : int
{
  x + 2168
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.McAddress__MULTICAST_CB_STRUC"} {:fieldname "McAddress"} McAddress__MULTICAST_CB_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.McCount__MULTICAST_CB_STRUC"} {:fieldname "McCount"} McCount__MULTICAST_CB_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.MdlAddress__IRP"} {:fieldname "MdlAddress"} MdlAddress__IRP(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MediaState__FDO_DATA"} {:fieldname "MediaState"} MediaState__FDO_DATA(x: int) : int
{
  x + 1916
}

function {:inline true} {:fieldmap "Mem_T.MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinLinkChangeWakeUp"} MinLinkChangeWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinMagicPacketWakeUp"} MinMagicPacketWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES"} {:fieldname "MinPatternWakeUp"} MinPatternWakeUp__NDIS_PM_WAKE_UP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MoreThanOneRetry__FDO_DATA"} {:fieldname "MoreThanOneRetry"} MoreThanOneRetry__FDO_DATA(x: int) : int
{
  x + 3636
}

function {:inline true} {:fieldmap "Mem_T.MpTcbMem__FDO_DATA"} {:fieldname "MpTcbMem"} MpTcbMem__FDO_DATA(x: int) : int
{
  x + 2100
}

function {:inline true} {:fieldmap "Mem_T.Multicast_unnamed_tag_69"} {:fieldname "Multicast"} Multicast_unnamed_tag_69(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "NewRequestsQueue"} NewRequestsQueue__FDO_DATA(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.NextLowerDriver__FDO_DATA"} {:fieldname "NextLowerDriver"} NextLowerDriver__FDO_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Next__MDL"} {:fieldname "Next"} Next__MDL(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Next__MP_TCB"} {:fieldname "Next"} Next__MP_TCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCb__NON_TRANSMIT_CB"} {:fieldname "NonTxCb"} NonTxCb__NON_TRANSMIT_CB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlockPhys__FDO_DATA"} {:fieldname "NonTxCmdBlockPhys"} NonTxCmdBlockPhys__FDO_DATA(x: int) : int
{
  x + 3148
}

function {:inline true} {:fieldmap "Mem_T.NonTxCmdBlock__FDO_DATA"} {:fieldname "NonTxCmdBlock"} NonTxCmdBlock__FDO_DATA(x: int) : int
{
  x + 3144
}

function {:inline true} {:fieldmap "Mem_T.Oid__NDISPROT_QUERY_OID"} {:fieldname "Oid"} Oid__NDISPROT_QUERY_OID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OldPacketFilter__FDO_DATA"} {:fieldname "OldPacketFilter"} OldPacketFilter__FDO_DATA(x: int) : int
{
  x + 2320
}

function {:inline true} {:fieldmap "Mem_T.OldParameterField__FDO_DATA"} {:fieldname "OldParameterField"} OldParameterField__FDO_DATA(x: int) : int
{
  x + 3176
}

function {:inline true} {:fieldmap "Mem_T.OneRetry__FDO_DATA"} {:fieldname "OneRetry"} OneRetry__FDO_DATA(x: int) : int
{
  x + 3632
}

function {:inline true} {:fieldmap "Mem_T.OriginalHwRfd__MP_RFD"} {:fieldname "OriginalHwRfd"} OriginalHwRfd__MP_RFD(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_22"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_22(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutstandingIO__FDO_DATA"} {:fieldname "OutstandingIO"} OutstandingIO__FDO_DATA(x: int) : int
{
  x + 364
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_5"} {:fieldname "Overlay"} Overlay_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PacketFilter__FDO_DATA"} {:fieldname "PacketFilter"} PacketFilter__FDO_DATA(x: int) : int
{
  x + 2316
}

function {:inline true} {:fieldmap "Mem_T.PacketLength__MP_TCB"} {:fieldname "PacketLength"} PacketLength__MP_TCB(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.PacketSize__MP_RFD"} {:fieldname "PacketSize"} PacketSize__MP_RFD(x: int) : int
{
  x + 72
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "PatternList"} PatternList__MP_POWER_MGMT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PatternOffset__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternOffset"} PatternOffset__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.PatternSize__NDIS_PM_PACKET_PATTERN"} {:fieldname "PatternSize"} PatternSize__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Pattern__MP_WAKE_PATTERN"} {:fieldname "Pattern"} Pattern__MP_WAKE_PATTERN(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PerformanceIdleTime__FDO_DATA"} {:fieldname "PerformanceIdleTime"} PerformanceIdleTime__FDO_DATA(x: int) : int
{
  x + 1628
}

function {:inline true} {:fieldmap "Mem_T.PermanentAddress__FDO_DATA"} {:fieldname "PermanentAddress"} PermanentAddress__FDO_DATA(x: int) : int
{
  x + 1688
}

function {:inline true} {:fieldmap "Mem_T.PhyAddress__FDO_DATA"} {:fieldname "PhyAddress"} PhyAddress__FDO_DATA(x: int) : int
{
  x + 3168
}

function {:inline true} {:fieldmap "Mem_T.PoMgmt__FDO_DATA"} {:fieldname "PoMgmt"} PoMgmt__FDO_DATA(x: int) : int
{
  x + 516
}

function {:inline true} {:fieldmap "Mem_T.Port__CSR_STRUC"} {:fieldname "Port"} Port__CSR_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PowerCodeLockHandle__FDO_DATA"} {:fieldname "PowerCodeLockHandle"} PowerCodeLockHandle__FDO_DATA(x: int) : int
{
  x + 572
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "PowerSaveDisableEnableLock"} PowerSaveDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 908
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackObject__FDO_DATA"} {:fieldname "PowerStateCallbackObject"} PowerStateCallbackObject__FDO_DATA(x: int) : int
{
  x + 1636
}

function {:inline true} {:fieldmap "Mem_T.PowerStateCallbackRegistrationHandle__FDO_DATA"} {:fieldname "PowerStateCallbackRegistrationHandle"} PowerStateCallbackRegistrationHandle__FDO_DATA(x: int) : int
{
  x + 1640
}

function {:inline true} {:fieldmap "Mem_T.PowerState_unnamed_tag_37"} {:fieldname "PowerState"} PowerState_unnamed_tag_37(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_8"} {:fieldname "Power"} Power_unnamed_tag_8(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PreviousPnPState__FDO_DATA"} {:fieldname "PreviousPnPState"} PreviousPnPState__FDO_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Priority__NDIS_PM_PACKET_PATTERN"} {:fieldname "Priority"} Priority__NDIS_PM_PACKET_PATTERN(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PutDmaAdapter__DMA_OPERATIONS"} {:fieldname "PutDmaAdapter"} PutDmaAdapter__DMA_OPERATIONS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PutScatterGatherList__DMA_OPERATIONS"} {:fieldname "PutScatterGatherList"} PutScatterGatherList__DMA_OPERATIONS(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryRequest__FDO_DATA"} {:fieldname "QueryRequest"} QueryRequest__FDO_DATA(x: int) : int
{
  x + 3588
}

function {:inline true} {:fieldmap "Mem_T.QueueState__FDO_DATA"} {:fieldname "QueueState"} QueueState__FDO_DATA(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__ERR_COUNT_STRUC"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.RcvAlignmentErrors__FDO_DATA"} {:fieldname "RcvAlignmentErrors"} RcvAlignmentErrors__FDO_DATA(x: int) : int
{
  x + 3648
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCdtErrors"} RcvCdtErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.RcvCdtFrames__FDO_DATA"} {:fieldname "RcvCdtFrames"} RcvCdtFrames__FDO_DATA(x: int) : int
{
  x + 3660
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__ERR_COUNT_STRUC"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.RcvCrcErrors__FDO_DATA"} {:fieldname "RcvCrcErrors"} RcvCrcErrors__FDO_DATA(x: int) : int
{
  x + 3644
}

function {:inline true} {:fieldmap "Mem_T.RcvDmaOverrunErrors__FDO_DATA"} {:fieldname "RcvDmaOverrunErrors"} RcvDmaOverrunErrors__FDO_DATA(x: int) : int
{
  x + 3656
}

function {:inline true} {:fieldmap "Mem_T.RcvGoodFrames__ERR_COUNT_STRUC"} {:fieldname "RcvGoodFrames"} RcvGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.RcvOverrunErrors__ERR_COUNT_STRUC"} {:fieldname "RcvOverrunErrors"} RcvOverrunErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__ERR_COUNT_STRUC"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__ERR_COUNT_STRUC(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.RcvResourceErrors__FDO_DATA"} {:fieldname "RcvResourceErrors"} RcvResourceErrors__FDO_DATA(x: int) : int
{
  x + 3652
}

function {:inline true} {:fieldmap "Mem_T.RcvRuntErrors__FDO_DATA"} {:fieldname "RcvRuntErrors"} RcvRuntErrors__FDO_DATA(x: int) : int
{
  x + 3664
}

function {:inline true} {:fieldmap "Mem_T.RcvShortFrames__ERR_COUNT_STRUC"} {:fieldname "RcvShortFrames"} RcvShortFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvList"} RecvList__FDO_DATA(x: int) : int
{
  x + 2144
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "RecvLookaside"} RecvLookaside__FDO_DATA(x: int) : int
{
  x + 2196
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "RecvQueueHead"} RecvQueueHead__FDO_DATA(x: int) : int
{
  x + 2180
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "RemoveEvent"} RemoveEvent__FDO_DATA(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.ResumeWait__FDO_DATA"} {:fieldname "ResumeWait"} ResumeWait__FDO_DATA(x: int) : int
{
  x + 2140
}

function {:inline true} {:fieldmap "Mem_T.RevsionID__FDO_DATA"} {:fieldname "RevsionID"} RevsionID__FDO_DATA(x: int) : int
{
  x + 1784
}

function {:inline true} {:fieldmap "Mem_T.RfdActualCount__RFD_STRUC"} {:fieldname "RfdActualCount"} RfdActualCount__RFD_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.RfdCbHeader__RFD_STRUC"} {:fieldname "RfdCbHeader"} RfdCbHeader__RFD_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RfdShrinkCount__FDO_DATA"} {:fieldname "RfdShrinkCount"} RfdShrinkCount__FDO_DATA(x: int) : int
{
  x + 2176
}

function {:inline true} {:fieldmap "Mem_T.RunningOnBattery__FDO_DATA"} {:fieldname "RunningOnBattery"} RunningOnBattery__FDO_DATA(x: int) : int
{
  x + 1632
}

function {:inline true} {:fieldmap "Mem_T._NPAGED_LOOKASIDE_LIST"} {:fieldname "SGListLookasideList"} SGListLookasideList__FDO_DATA(x: int) : int
{
  x + 1928
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandHigh__CSR_STRUC"} {:fieldname "ScbCommandHigh"} ScbCommandHigh__CSR_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ScbCommandLow__CSR_STRUC"} {:fieldname "ScbCommandLow"} ScbCommandLow__CSR_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ScbGeneralPointer__CSR_STRUC"} {:fieldname "ScbGeneralPointer"} ScbGeneralPointer__CSR_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ScbStatus__CSR_STRUC"} {:fieldname "ScbStatus"} ScbStatus__CSR_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SelfTest__FDO_DATA"} {:fieldname "SelfTest"} SelfTest__FDO_DATA(x: int) : int
{
  x + 3136
}

function {:inline true} {:fieldmap "Mem_T.Self__FDO_DATA"} {:fieldname "Self"} Self__FDO_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T._LIST_ENTRY"} {:fieldname "SendQueueHead"} SendQueueHead__FDO_DATA(x: int) : int
{
  x + 2072
}

function {:inline true} {:fieldmap "Mem_T.SetRequest__FDO_DATA"} {:fieldname "SetRequest"} SetRequest__FDO_DATA(x: int) : int
{
  x + 3592
}

function {:inline true} {:fieldmap "Mem_T.Setup_unnamed_tag_69"} {:fieldname "Setup"} Setup_unnamed_tag_69(x: int) : int
{
  x + 884
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Signature__MP_WAKE_PATTERN"} {:fieldname "Signature"} Signature__MP_WAKE_PATTERN(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_39"} {:fieldname "State"} State_unnamed_tag_39(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.StatsCounterPhys__FDO_DATA"} {:fieldname "StatsCounterPhys"} StatsCounterPhys__FDO_DATA(x: int) : int
{
  x + 3164
}

function {:inline true} {:fieldmap "Mem_T.StatsCounters__FDO_DATA"} {:fieldname "StatsCounters"} StatsCounters__FDO_DATA(x: int) : int
{
  x + 3160
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferLength__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferLength"} StatusBufferLength__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.StatusBufferOffset__NDISPROT_INDICATE_STATUS"} {:fieldname "StatusBufferOffset"} StatusBufferOffset__NDISPROT_INDICATE_STATUS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.StatusIndicationIrp__FDO_DATA"} {:fieldname "StatusIndicationIrp"} StatusIndicationIrp__FDO_DATA(x: int) : int
{
  x + 3596
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "StopEvent"} StopEvent__FDO_DATA(x: int) : int
{
  x + 208
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_1"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_1(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemPowerState__FDO_DATA"} {:fieldname "SystemPowerState"} SystemPowerState__FDO_DATA(x: int) : int
{
  x + 560
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TotalFrees__GENERAL_LOOKASIDE"} {:fieldname "TotalFrees"} TotalFrees__GENERAL_LOOKASIDE(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.TotalRetries__FDO_DATA"} {:fieldname "TotalRetries"} TotalRetries__FDO_DATA(x: int) : int
{
  x + 3640
}

function {:inline true} {:fieldmap "Mem_T.TransmitIdle__FDO_DATA"} {:fieldname "TransmitIdle"} TransmitIdle__FDO_DATA(x: int) : int
{
  x + 2136
}

function {:inline true} {:fieldmap "Mem_T.TxAbortExcessCollisions__FDO_DATA"} {:fieldname "TxAbortExcessCollisions"} TxAbortExcessCollisions__FDO_DATA(x: int) : int
{
  x + 3612
}

function {:inline true} {:fieldmap "Mem_T.TxCbHeader__GENERIC_TxCB"} {:fieldname "TxCbHeader"} TxCbHeader__GENERIC_TxCB(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.TxDmaUnderrun__FDO_DATA"} {:fieldname "TxDmaUnderrun"} TxDmaUnderrun__FDO_DATA(x: int) : int
{
  x + 3620
}

function {:inline true} {:fieldmap "Mem_T.TxLateCollisions__FDO_DATA"} {:fieldname "TxLateCollisions"} TxLateCollisions__FDO_DATA(x: int) : int
{
  x + 3616
}

function {:inline true} {:fieldmap "Mem_T.TxLostCRS__FDO_DATA"} {:fieldname "TxLostCRS"} TxLostCRS__FDO_DATA(x: int) : int
{
  x + 3624
}

function {:inline true} {:fieldmap "Mem_T.TxOKButDeferred__FDO_DATA"} {:fieldname "TxOKButDeferred"} TxOKButDeferred__FDO_DATA(x: int) : int
{
  x + 3628
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_28"} {:fieldname "Type"} Type_unnamed_tag_28(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_39"} {:fieldname "Type"} Type_unnamed_tag_39(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.WaitWake_unnamed_tag_8"} {:fieldname "WaitWake"} WaitWake_unnamed_tag_8(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeCompletedEvent"} WakeCompletedEvent__FDO_DATA(x: int) : int
{
  x + 584
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WakeDisableEnableLock"} WakeDisableEnableLock__FDO_DATA(x: int) : int
{
  x + 740
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD0__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD0"} WakeFromD0__DEVICE_CAPABILITIES(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD1__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD1"} WakeFromD1__DEVICE_CAPABILITIES(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD2__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD2"} WakeFromD2__DEVICE_CAPABILITIES(x: int) : int
{
  x + 56
}

function {:inline true} {:fieldmap "Mem_T.WakeFromD3__DEVICE_CAPABILITIES"} {:fieldname "WakeFromD3"} WakeFromD3__DEVICE_CAPABILITIES(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.WakeIrp__FDO_DATA"} {:fieldname "WakeIrp"} WakeIrp__FDO_DATA(x: int) : int
{
  x + 580
}

function {:inline true} {:fieldmap "Mem_T.WakeState__FDO_DATA"} {:fieldname "WakeState"} WakeState__FDO_DATA(x: int) : int
{
  x + 576
}

function {:inline true} {:fieldmap "Mem_T.WakeUpCapabilities__NDIS_PNP_CAPABILITIES"} {:fieldname "WakeUpCapabilities"} WakeUpCapabilities__NDIS_PNP_CAPABILITIES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.VOID"} {:fieldname "WatchDogTimerEvent"} WatchDogTimerEvent__FDO_DATA(x: int) : int
{
  x + 3420
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__WORKER_ITEM_CONTEXT"} {:fieldname "WorkItem"} WorkItem__WORKER_ITEM_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.XmtDeferred__ERR_COUNT_STRUC"} {:fieldname "XmtDeferred"} XmtDeferred__ERR_COUNT_STRUC(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.XmtGoodFrames__ERR_COUNT_STRUC"} {:fieldname "XmtGoodFrames"} XmtGoodFrames__ERR_COUNT_STRUC(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.XmtLateCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtLateCollisions"} XmtLateCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.XmtLostCRS__ERR_COUNT_STRUC"} {:fieldname "XmtLostCRS"} XmtLostCRS__ERR_COUNT_STRUC(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.XmtMaxCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMaxCollisions"} XmtMaxCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.XmtMultCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtMultCollisions"} XmtMultCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.XmtSingleCollision__ERR_COUNT_STRUC"} {:fieldname "XmtSingleCollision"} XmtSingleCollision__ERR_COUNT_STRUC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.XmtTotalCollisions__ERR_COUNT_STRUC"} {:fieldname "XmtTotalCollisions"} XmtTotalCollisions__ERR_COUNT_STRUC(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.XmtUnderruns__ERR_COUNT_STRUC"} {:fieldname "XmtUnderruns"} XmtUnderruns__ERR_COUNT_STRUC(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.fmtid__DEVPROPKEY"} {:fieldname "fmtid"} fmtid__DEVPROPKEY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.nBusySend__FDO_DATA"} {:fieldname "nBusySend"} nBusySend__FDO_DATA(x: int) : int
{
  x + 2060
}

function {:inline true} {:fieldmap "Mem_T.nReadyRecv__FDO_DATA"} {:fieldname "nReadyRecv"} nReadyRecv__FDO_DATA(x: int) : int
{
  x + 2152
}

function {:inline true} {:fieldmap "Mem_T.nWaitSend__FDO_DATA"} {:fieldname "nWaitSend"} nWaitSend__FDO_DATA(x: int) : int
{
  x + 2064
}

function {:inline true} {:fieldmap "Mem_T.pid__DEVPROPKEY"} {:fieldname "pid"} pid__DEVPROPKEY(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.usDuplexMode__FDO_DATA"} {:fieldname "usDuplexMode"} usDuplexMode__FDO_DATA(x: int) : int
{
  x + 2332
}

function {:inline true} {:fieldmap "Mem_T.usLinkSpeed__FDO_DATA"} {:fieldname "usLinkSpeed"} usLinkSpeed__FDO_DATA(x: int) : int
{
  x + 2328
}

const {:string ""} unique strConst__li2bpl91: int;

const {:string "\tSetting the system state to %s\n"} unique strConst__li2bpl52: int;

const {:string "   Config Block at virt addr %p phys address %x\n"} unique strConst__li2bpl78: int;

const {:string "   Config byte %x = %.2x\n"} unique strConst__li2bpl81: int;

const {:string "   Issuing Configure command\n"} unique strConst__li2bpl77: int;

const {:string "  Config byte %x = %.2x\n"} unique strConst__li2bpl190: int;

const {:string " not"} unique strConst__li2bpl90: int;

const {:string "---> NICHandleRecvInterrupt\n"} unique strConst__li2bpl21: int;

const {:string "---> NICShutdown\n"} unique strConst__li2bpl71: int;

const {:string "---> NICStartRecv\n"} unique strConst__li2bpl22: int;

const {:string "--->PciDrvRead %p\n"} unique strConst__li2bpl132: int;

const {:string "--> ArmForWake\n"} unique strConst__li2bpl93: int;

const {:string "--> DisarmWake\n"} unique strConst__li2bpl96: int;

const {:string "--> HandleQueryOIDRequest\n"} unique strConst__li2bpl192: int;

const {:string "--> HandleSetOIDRequest\n"} unique strConst__li2bpl178: int;

const {:string "--> HwClearAllCounters\n"} unique strConst__li2bpl87: int;

const {:string "--> HwConfigure\n"} unique strConst__li2bpl80: int;

const {:string "--> HwSetupIAAddress\n"} unique strConst__li2bpl74: int;

const {:string "--> HwSoftwareReset\n"} unique strConst__li2bpl75: int;

const {:string "--> MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl2: int;

const {:string "--> NICAddWakeUpPattern\n"} unique strConst__li2bpl10: int;

const {:string "--> NICFreeAdapterMemory\n"} unique strConst__li2bpl69: int;

const {:string "--> NICFreeBusySendPackets\n"} unique strConst__li2bpl124: int;

const {:string "--> NICFreeQueuedSendPackets\n"} unique strConst__li2bpl114: int;

const {:string "--> NICGetStatsCounters\n"} unique strConst__li2bpl185: int;

const {:string "--> NICInitializeAdapter\n"} unique strConst__li2bpl85: int;

const {:string "--> NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl4: int;

const {:string "--> NICRemoveWakeUpPattern\n"} unique strConst__li2bpl8: int;

const {:string "--> NICServiceReadIrps\n"} unique strConst__li2bpl16: int;

const {:string "--> NICSetMulticastList\n"} unique strConst__li2bpl179: int;

const {:string "--> NICSetPacketFilter, PacketFilter=%08x\n"} unique strConst__li2bpl188: int;

const {:string "--> OID_PNP_ADD_WAKE_UP_PATTERN\n"} unique strConst__li2bpl175: int;

const {:string "--> OID_PNP_ENABLE_WAKE_UP\n"} unique strConst__li2bpl176: int;

const {:string "--> PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl103: int;

const {:string "--> PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl113: int;

const {:string "--> PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl110: int;

const {:string "--> PciDrvWrite %p\n"} unique strConst__li2bpl123: int;

const {:string "-->MPSetPowerD0Private\n"} unique strConst__li2bpl11: int;

const {:string "-->NICFreeDeviceResources\n"} unique strConst__li2bpl82: int;

const {:string "-->NICQueueIoctlIrp\n"} unique strConst__li2bpl135: int;

const {:string "-->PciDrvProcessQueuedRequests\n"} unique strConst__li2bpl137: int;

const {:string "-->PciDrvReadRegistryValue \n"} unique strConst__li2bpl142: int;

const {:string "-->PciDrvReturnResources\n"} unique strConst__li2bpl144: int;

const {:string "-->ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl183: int;

const {:string "<-- ArmForWake\n"} unique strConst__li2bpl94: int;

const {:string "<-- DisarmWake\n"} unique strConst__li2bpl98: int;

const {:string "<-- HandleSetOIDRequest\n"} unique strConst__li2bpl174: int;

const {:string "<-- HwClearAllCounters, status=%x\n"} unique strConst__li2bpl88: int;

const {:string "<-- HwConfigure, status=%x\n"} unique strConst__li2bpl79: int;

const {:string "<-- HwSetupIAAddress, status=%x\n"} unique strConst__li2bpl73: int;

const {:string "<-- HwSoftwareReset\n"} unique strConst__li2bpl76: int;

const {:string "<-- MPCalculateE100PatternForFilter\n"} unique strConst__li2bpl1: int;

const {:string "<-- NICAddWakeUpPattern\n"} unique strConst__li2bpl9: int;

const {:string "<-- NICFreeAdapterMemory\n"} unique strConst__li2bpl70: int;

const {:string "<-- NICFreeBusySendPackets\n"} unique strConst__li2bpl125: int;

const {:string "<-- NICFreeQueuedSendPackets\n"} unique strConst__li2bpl115: int;

const {:string "<-- NICGetStatsCounters\n"} unique strConst__li2bpl184: int;

const {:string "<-- NICInitializeAdapter, status=%x\n"} unique strConst__li2bpl86: int;

const {:string "<-- NICRemoveAllWakeUpPatterns\n"} unique strConst__li2bpl3: int;

const {:string "<-- NICRemoveWakeUpPattern\n"} unique strConst__li2bpl7: int;

const {:string "<-- NICServiceReadIrps\n"} unique strConst__li2bpl15: int;

const {:string "<-- NICSetMulticastList, status=%x\n"} unique strConst__li2bpl180: int;

const {:string "<-- NICSetPacketFilter, Status=%x\n"} unique strConst__li2bpl186: int;

const {:string "<-- PciDrvDeregisterIdleDetection\n"} unique strConst__li2bpl105: int;

const {:string "<-- PciDrvPowerUpDeviceCallback\n"} unique strConst__li2bpl112: int;

const {:string "<-- PciDrvRegisterForIdleDetection\n"} unique strConst__li2bpl111: int;

const {:string "<-- PciDrvWrite %x\n"} unique strConst__li2bpl118: int;

const {:string "<-- Read called %x\n"} unique strConst__li2bpl133: int;

const {:string "<--- NICHandleRecvInterrupt\n"} unique strConst__li2bpl20: int;

const {:string "<--- NICShutdown\n"} unique strConst__li2bpl72: int;

const {:string "<--- NICStartRecv, Status=%x\n"} unique strConst__li2bpl25: int;

const {:string "<--HandleQueryOIDRequest: OID %x, Status %x\n"} unique strConst__li2bpl191: int;

const {:string "<--MPSetPowerD0Private\n"} unique strConst__li2bpl12: int;

const {:string "<--NICFreeDeviceResources\n"} unique strConst__li2bpl84: int;

const {:string "<--NICQueueIoctlIrp\n"} unique strConst__li2bpl134: int;

const {:string "<--PciDrvProcessQueuedRequests %d\n"} unique strConst__li2bpl136: int;

const {:string "<--PciDrvReadRegistryValue %ws %d \n"} unique strConst__li2bpl143: int;

const {:string "<--PciDrvReturnResources\n"} unique strConst__li2bpl145: int;

const {:string "<--ndisServiceIndicateStatusIrp\n"} unique strConst__li2bpl182: int;

const {:string "Acquiring  PowerSaveDisableEnableLock\n"} unique strConst__li2bpl104: int;

const {:string "BuildScatterGatherList %x\n"} unique strConst__li2bpl122: int;

const {:string "CU suspended. ScbStatus=%04x Issue selective reset\n"} unique strConst__li2bpl214: int;

const {:string "Cleanup called\n"} unique strConst__li2bpl128: int;

const {:string "Close \n"} unique strConst__li2bpl131: int;

const {:string "Command failed\n"} unique strConst__li2bpl197: int;

const {:string "Config Block at virt addr %p, phys address %x\n"} unique strConst__li2bpl189: int;

const {:string "Connected"} unique strConst__li2bpl193: int;

const {:string "Create \n"} unique strConst__li2bpl141: int;

const {:string "DIRP"} unique strConst__li2bpl41: int;

const {:string "Device not ready %p\n"} unique strConst__li2bpl117: int;

const {:string "Disconnected"} unique strConst__li2bpl194: int;

const {:string "Entered PciDrvDispatchDeviceQueryPower\n"} unique strConst__li2bpl56: int;

const {:string "Entered PciDrvDispatchDeviceSetPower\n"} unique strConst__li2bpl55: int;

const {:string "Entered PciDrvDispatchQueryPowerState\n"} unique strConst__li2bpl39: int;

const {:string "Entered PciDrvDispatchSetPowerState\n"} unique strConst__li2bpl38: int;

const {:string "Entered PciDrvDispatchSystemPowerIrp\n"} unique strConst__li2bpl53: int;

const {:string "Entered PciDrvDispatchWaitWake\n"} unique strConst__li2bpl95: int;

const {:string "Entered PciDrvFinalizeDevicePowerIrp\n"} unique strConst__li2bpl54: int;

const {:string "Entering a deeper sleep state\n"} unique strConst__li2bpl13: int;

const {:string "Entering fully on state\n"} unique strConst__li2bpl14: int;

const {:string "FDO %s\n"} unique strConst__li2bpl57: int;

const {:string "FDO %s \n"} unique strConst__li2bpl126: int;

const {:string "FDO %s %s IRP:0x%p %s %s\n"} unique strConst__li2bpl42: int;

const {:string "Failed to create a Callback object status %lx\n"} unique strConst__li2bpl107: int;

const {:string "Failed to register callback\n"} unique strConst__li2bpl108: int;

const {:string "Good Receives %d\n"} unique strConst__li2bpl199: int;

const {:string "Good Transmits %d\n"} unique strConst__li2bpl198: int;

const {:string "IRP_MN_CANCEL_REMOVE_DEVICE"} unique strConst__li2bpl150: int;

const {:string "IRP_MN_CANCEL_STOP_DEVICE"} unique strConst__li2bpl153: int;

const {:string "IRP_MN_CHANGE_SINGLE_INSTANCE"} unique strConst__li2bpl61: int;

const {:string "IRP_MN_CHANGE_SINGLE_ITEM"} unique strConst__li2bpl62: int;

const {:string "IRP_MN_DEVICE_USAGE_NOTIFICATION"} unique strConst__li2bpl168: int;

const {:string "IRP_MN_DISABLE_COLLECTION"} unique strConst__li2bpl66: int;

const {:string "IRP_MN_DISABLE_EVENTS"} unique strConst__li2bpl64: int;

const {:string "IRP_MN_EJECT"} unique strConst__li2bpl163: int;

const {:string "IRP_MN_ENABLE_COLLECTION"} unique strConst__li2bpl65: int;

const {:string "IRP_MN_ENABLE_EVENTS"} unique strConst__li2bpl63: int;

const {:string "IRP_MN_EXECUTE_METHOD"} unique strConst__li2bpl68: int;

const {:string "IRP_MN_FILTER_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl160: int;

const {:string "IRP_MN_POWER_SEQUENCE"} unique strConst__li2bpl35: int;

const {:string "IRP_MN_QUERY_ALL_DATA"} unique strConst__li2bpl59: int;

const {:string "IRP_MN_QUERY_BUS_INFORMATION"} unique strConst__li2bpl167: int;

const {:string "IRP_MN_QUERY_CAPABILITIES"} unique strConst__li2bpl156: int;

const {:string "IRP_MN_QUERY_DEVICE_RELATIONS"} unique strConst__li2bpl154: int;

const {:string "IRP_MN_QUERY_DEVICE_TEXT"} unique strConst__li2bpl159: int;

const {:string "IRP_MN_QUERY_ID"} unique strConst__li2bpl165: int;

const {:string "IRP_MN_QUERY_INTERFACE"} unique strConst__li2bpl155: int;

const {:string "IRP_MN_QUERY_LEGACY_BUS_INFORMATION"} unique strConst__li2bpl170: int;

const {:string "IRP_MN_QUERY_PNP_DEVICE_STATE"} unique strConst__li2bpl166: int;

const {:string "IRP_MN_QUERY_POWER"} unique strConst__li2bpl37: int;

const {:string "IRP_MN_QUERY_REMOVE_DEVICE"} unique strConst__li2bpl148: int;

const {:string "IRP_MN_QUERY_RESOURCES"} unique strConst__li2bpl157: int;

const {:string "IRP_MN_QUERY_RESOURCE_REQUIREMENTS"} unique strConst__li2bpl158: int;

const {:string "IRP_MN_QUERY_SINGLE_INSTANCE"} unique strConst__li2bpl60: int;

const {:string "IRP_MN_QUERY_STOP_DEVICE"} unique strConst__li2bpl152: int;

const {:string "IRP_MN_READ_CONFIG"} unique strConst__li2bpl161: int;

const {:string "IRP_MN_REGINFO"} unique strConst__li2bpl67: int;

const {:string "IRP_MN_REMOVE_DEVICE"} unique strConst__li2bpl149: int;

const {:string "IRP_MN_SET_LOCK"} unique strConst__li2bpl164: int;

const {:string "IRP_MN_SET_POWER"} unique strConst__li2bpl36: int;

const {:string "IRP_MN_START_DEVICE"} unique strConst__li2bpl147: int;

const {:string "IRP_MN_STOP_DEVICE"} unique strConst__li2bpl151: int;

const {:string "IRP_MN_SURPRISE_REMOVAL"} unique strConst__li2bpl169: int;

const {:string "IRP_MN_WAIT_WAKE"} unique strConst__li2bpl34: int;

const {:string "IRP_MN_WRITE_CONFIG"} unique strConst__li2bpl162: int;

const {:string "Idle detection is%s enabled\n"} unique strConst__li2bpl102: int;

const {:string "IoConnectInterrupt failed %x\n"} unique strConst__li2bpl0: int;

const {:string "IoSetDeviceInterfaceState failed: 0x%x\n"} unique strConst__li2bpl127: int;

const {:string "Ioctl called %p\n"} unique strConst__li2bpl171: int;

const {:string "It is a bug to pend Irp without checking Irp->Cancel"} unique strConst__li2bpl215: int;

const {:string "KeWaitForMultipleObjects %x"} unique strConst__li2bpl100: int;

const {:string "Late Collisions %d\n"} unique strConst__li2bpl201: int;

const {:string "MC(%d) = %02x-%02x-%02x-%02x-%02x-%02x\n"} unique strConst__li2bpl181: int;

const {:string "Max Collisions %d\n"} unique strConst__li2bpl200: int;

const {:string "Media state changed to %s\n"} unique strConst__li2bpl195: int;

const {:string "Media state changed to Connected\n"} unique strConst__li2bpl19: int;

const {:string "Mult Collision xmits %d\n"} unique strConst__li2bpl206: int;

const {:string "NICAddWakeupPattern failed %x\n"} unique strConst__li2bpl5: int;

const {:string "NICCompleteSendRequest, Pkt= %p Sgl %p\n"} unique strConst__li2bpl116: int;

const {:string "NICRemoveWakeUpPattern failed %x\n"} unique strConst__li2bpl6: int;

const {:string "One Collision xmits %d\n"} unique strConst__li2bpl205: int;

const {:string "Packet needs to be coalesced\n"} unique strConst__li2bpl121: int;

const {:string "Packet size is less than %d\n"} unique strConst__li2bpl120: int;

const {:string "PciDrvDispatchIO called %p\n"} unique strConst__li2bpl129: int;

const {:string "PciDrvIoDecrement %d\n"} unique strConst__li2bpl130: int;

const {:string "PciDrvIoIncrement %d\n"} unique strConst__li2bpl172: int;

const {:string "PowerDeviceD0"} unique strConst__li2bpl28: int;

const {:string "PowerDeviceD1"} unique strConst__li2bpl29: int;

const {:string "PowerDeviceD2"} unique strConst__li2bpl30: int;

const {:string "PowerDeviceD3"} unique strConst__li2bpl31: int;

const {:string "PowerDeviceMaximum"} unique strConst__li2bpl32: int;

const {:string "PowerDeviceUnspecified"} unique strConst__li2bpl27: int;

const {:string "PowerSaveEnabled"} unique strConst__li2bpl101: int;

const {:string "PowerSystemHibernate"} unique strConst__li2bpl49: int;

const {:string "PowerSystemMaximum"} unique strConst__li2bpl51: int;

const {:string "PowerSystemShutdown"} unique strConst__li2bpl50: int;

const {:string "PowerSystemSleeping1"} unique strConst__li2bpl46: int;

const {:string "PowerSystemSleeping2"} unique strConst__li2bpl47: int;

const {:string "PowerSystemSleeping3"} unique strConst__li2bpl48: int;

const {:string "PowerSystemUnspecified"} unique strConst__li2bpl44: int;

const {:string "PowerSystemWorking"} unique strConst__li2bpl45: int;

const {:string "Queuing Requests\n"} unique strConst__li2bpl140: int;

const {:string "Re-Issuing Configure command for filter change\n"} unique strConst__li2bpl187: int;

const {:string "Re-start receive unit...\n"} unique strConst__li2bpl23: int;

const {:string "Receive Alignment errors %d\n"} unique strConst__li2bpl209: int;

const {:string "Receive CDT errors %d\n"} unique strConst__li2bpl212: int;

const {:string "Receive CRC errors %d\n"} unique strConst__li2bpl208: int;

const {:string "Receive failure = %x\n"} unique strConst__li2bpl18: int;

const {:string "Receive no resources %d\n"} unique strConst__li2bpl210: int;

const {:string "Receive overrun errors %d\n"} unique strConst__li2bpl211: int;

const {:string "Receive short frames %d\n"} unique strConst__li2bpl213: int;

const {:string "Receive unit already active\n"} unique strConst__li2bpl24: int;

const {:string "SET Power: Hardware error !!!\n"} unique strConst__li2bpl177: int;

const {:string "SIRP"} unique strConst__li2bpl40: int;

const {:string "Set Idle timer\n"} unique strConst__li2bpl106: int;

const {:string "Shrink... CurrNumRfd = %d\n"} unique strConst__li2bpl17: int;

const {:string "Total Collisions %d\n"} unique strConst__li2bpl207: int;

const {:string "Transmit Lost CRS %d\n"} unique strConst__li2bpl203: int;

const {:string "Transmit Underruns %d\n"} unique strConst__li2bpl202: int;

const {:string "Transmits Deferred %d\n"} unique strConst__li2bpl204: int;

const {:string "UnKnown Device Power State"} unique strConst__li2bpl26: int;

const {:string "UnKnown System Power State"} unique strConst__li2bpl43: int;

const {:string "Wait-Wake is%s enabled\n"} unique strConst__li2bpl92: int;

const {:string "WaitScb failed, ScbCommandLow=%x\n"} unique strConst__li2bpl196: int;

const {:string "WaitWakeEnabled"} unique strConst__li2bpl89: int;

const {:string "Waiting for pending requests to complete (Remove)...\n"} unique strConst__li2bpl139: int;

const {:string "Waiting for pending requests to complete (Stop)...\n"} unique strConst__li2bpl138: int;

const {:string "Waiting for the previously generated power irp to complete\n"} unique strConst__li2bpl99: int;

const {:string "Waiting for the watchdogtimer to exit..\n"} unique strConst__li2bpl83: int;

const {:string "Zero length buffer %p\n"} unique strConst__li2bpl119: int;

const {:string "\\Callback\\PowerState"} unique strConst__li2bpl109: int;

const {:string "caller"} unique strConst__li2bpl173: int;

const {:string "canceling wakeIrp\n"} unique strConst__li2bpl97: int;

const {:string "unknown_pnp_irp"} unique strConst__li2bpl146: int;

const {:string "unknown_power_irp"} unique strConst__li2bpl33: int;

const {:string "unknown_syscontrol_irp"} unique strConst__li2bpl58: int;

const {:allocated} li2bplFunctionConstant1377: int;

axiom li2bplFunctionConstant1377 == 1377;

const {:allocated} li2bplFunctionConstant3726: int;

axiom li2bplFunctionConstant3726 == 3726;

const {:allocated} li2bplFunctionConstant3731: int;

axiom li2bplFunctionConstant3731 == 3731;

const {:allocated} li2bplFunctionConstant5286: int;

axiom li2bplFunctionConstant5286 == 5286;

const {:allocated} li2bplFunctionConstant5292: int;

axiom li2bplFunctionConstant5292 == 5292;

const {:allocated} li2bplFunctionConstant5293: int;

axiom li2bplFunctionConstant5293 == 5293;

const {:allocated} li2bplFunctionConstant5299: int;

axiom li2bplFunctionConstant5299 == 5299;

const {:allocated} li2bplFunctionConstant5762: int;

axiom li2bplFunctionConstant5762 == 5762;

const {:allocated} li2bplFunctionConstant5764: int;

axiom li2bplFunctionConstant5764 == 5764;

const {:allocated} li2bplFunctionConstant6704: int;

axiom li2bplFunctionConstant6704 == 6704;

const {:allocated} li2bplFunctionConstant6708: int;

axiom li2bplFunctionConstant6708 == 6708;

const {:allocated} li2bplFunctionConstant6710: int;

axiom li2bplFunctionConstant6710 == 6710;

const {:allocated} li2bplFunctionConstant6711: int;

axiom li2bplFunctionConstant6711 == 6711;

const {:allocated} li2bplFunctionConstant7189: int;

axiom li2bplFunctionConstant7189 == 7189;

const {:allocated} li2bplFunctionConstant7191: int;

axiom li2bplFunctionConstant7191 == 7191;

const {:allocated} li2bplFunctionConstant7194: int;

axiom li2bplFunctionConstant7194 == 7194;

const {:allocated} li2bplFunctionConstant7198: int;

axiom li2bplFunctionConstant7198 == 7198;

const {:allocated} li2bplFunctionConstant7201: int;

axiom li2bplFunctionConstant7201 == 7201;

const {:allocated} li2bplFunctionConstant7727: int;

axiom li2bplFunctionConstant7727 == 7727;

const {:allocated} li2bplFunctionConstant7729: int;

axiom li2bplFunctionConstant7729 == 7729;

const {:allocated} li2bplFunctionConstant7732: int;

axiom li2bplFunctionConstant7732 == 7732;

const {:allocated} li2bplFunctionConstant909: int;

axiom li2bplFunctionConstant909 == 909;

implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_57: int, actual_Irp_31: int) returns (Tmp_661: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_662: int;
  var {:scalar} Tmp_663: int;
  var {:pointer} Tmp_664: int;
  var {:pointer} Tmp_665: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed_1: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_666: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_667: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} Tmp_669: int;
  var {:scalar} sdv_363: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} sdv_365: int;
  var {:scalar} sdv_366: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_50: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_670: int;
  var {:pointer} Tmp_671: int;
  var {:scalar} Tmp_672: int;
  var {:pointer} FdoData_57: int;
  var {:pointer} Irp_31: int;
  var vslice_dummy_var_42: int;

  anon0:
    call {:si_unique_call 1887} unUsed_1 := __HAVOC_malloc(4);
    FdoData_57 := actual_FdoData_57;
    Irp_31 := actual_Irp_31;
    call {:si_unique_call 1888} Tmp_662 := __HAVOC_malloc(124);
    call {:si_unique_call 1889} Tmp_664 := __HAVOC_malloc(132);
    call {:si_unique_call 1890} Tmp_665 := __HAVOC_malloc(112);
    call {:si_unique_call 1891} Tmp_666 := __HAVOC_malloc(16);
    call {:si_unique_call 1892} Tmp_669 := __HAVOC_malloc(132);
    call {:si_unique_call 1893} Tmp_670 := __HAVOC_malloc(100);
    call {:si_unique_call 1894} Tmp_671 := __HAVOC_malloc(100);
    status_50 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 1895} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_31);
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_671 := strConst__li2bpl178;
    call {:si_unique_call 1896} DebugPrint(6, 32, Tmp_671);
    Oid := 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} 8 > BufferLength;
    status_50 := 5;
    goto L33;

  L33:
    Tmp_670 := strConst__li2bpl174;
    call {:si_unique_call 1897} DebugPrint(6, 32, Tmp_670);
    Tmp_661 := status_50;
    goto L1;

  L1:
    return;

  anon65_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_666;
    InformationBuffer_2 := Tmp_666;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid != 65806;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Oid != 16843011;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Oid != -50265855;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Oid != -50265853;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Oid != -50265852;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Oid == -50265850;
    Tmp_665 := strConst__li2bpl176;
    call {:si_unique_call 1898} DebugPrint(5, 32, Tmp_665);
    call {:si_unique_call 1899} sdv_363 := IsPoMgmtSupported(FdoData_57);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_363 != 0;
    call {:si_unique_call 1900} sdv_RtlMoveMemory(0, 0, 4);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_663 := BAND(WakeUpEnable, 2);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Tmp_663 != 2;
    status_50 := -1073741637;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon69_Then:
    assume {:partition} Tmp_663 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    status_50 := 0;
    goto L33;

  anon51_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon50_Then:
    assume {:partition} sdv_363 == 0;
    status_50 := -1073741637;
    goto L33;

  anon60_Then:
    assume {:partition} Oid != -50265850;
    status_50 := -1073741637;
    goto L33;

  anon61_Then:
    assume {:partition} Oid == -50265852;
    Tmp_664 := strConst__li2bpl175;
    call {:si_unique_call 1901} DebugPrint(5, 32, Tmp_664);
    call {:si_unique_call 1902} sdv_365 := IsPoMgmtSupported(FdoData_57);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_365 != 0;
    call {:si_unique_call 1903} status_50 := NICRemoveWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon52_Then:
    assume {:partition} sdv_365 == 0;
    status_50 := -1073741637;
    goto L33;

  anon62_Then:
    assume {:partition} Oid == -50265853;
    Tmp_669 := strConst__li2bpl175;
    call {:si_unique_call 1904} DebugPrint(5, 32, Tmp_669);
    call {:si_unique_call 1905} sdv_366 := IsPoMgmtSupported(FdoData_57);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_366 != 0;
    call {:si_unique_call 1906} status_50 := NICAddWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon53_Then:
    assume {:partition} sdv_366 == 0;
    status_50 := -1073741637;
    goto L33;

  anon63_Then:
    assume {:partition} Oid == -50265855;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_661 := -1073741789;
    goto L1;

  anon49_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_668 := InformationBuffer_2;
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    havoc newDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc oldDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc vslice_dummy_var_42;
    call {:si_unique_call 1907} status_50 := PciDrvPowerBeginQueuingIrps#0(vslice_dummy_var_42, 1, 0);
    goto L97;

  L97:
    call {:si_unique_call 1908} status_50 := NICSetPower(FdoData_57, newDeviceState);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_50 != 0;
    Tmp_662 := strConst__li2bpl177;
    call {:si_unique_call 1909} DebugPrint(2, 32, Tmp_662);
    goto L33;

  anon54_Then:
    assume {:partition} status_50 == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    assume false;
    return;

  anon55_Then:
    assume {:partition} newDeviceState != 1;
    goto L111;

  L111:
    status_50 := 0;
    goto L33;

  anon68_Then:
    assume {:partition} oldDeviceState != 1;
    goto L97;

  anon64_Then:
    assume {:partition} Oid == 16843011;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_661 := -1073741306;
    goto L1;

  anon48_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_672 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_672;
    call {:si_unique_call 1910} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 1911} Tmp_667 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    call {:si_unique_call 1912} sdv_KeAcquireSpinLock(0, Tmp_667);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    havoc oldIrql_13;
    call {:si_unique_call 1913} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 1914} status_50 := NICSetMulticastList(FdoData_57);
    call {:si_unique_call 1915} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1916} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon67_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_672 := InformationBufferLength_2;
    goto L122;

  anon66_Then:
    assume {:partition} Oid == 65806;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_661 := -1073741306;
    goto L1;

  anon47_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 1917} sdv_RtlMoveMemory(0, 0, 4);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_661 := -1073741637;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 1918} Tmp_667 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    call {:si_unique_call 1919} sdv_KeAcquireSpinLock(0, Tmp_667);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    havoc oldIrql_13;
    call {:si_unique_call 1920} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 1921} status_50 := PciDrvQueueIoctlIrp(FdoData_57, Irp_31);
    call {:si_unique_call 1922} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1923} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon58_Then:
    call {:si_unique_call 1924} status_50 := NICSetPacketFilter(FdoData_57, PacketFilter);
    call {:si_unique_call 1925} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1926} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_50 == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon59_Then:
    assume {:partition} status_50 != 0;
    goto L33;

  anon57_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#0(actual_FdoData_57: int, actual_Irp_31: int) returns (Tmp_661: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} Tmp_661 == -1073741789 || Tmp_661 == -1073741306 || Tmp_661 == -1073741637 || Tmp_661 == 5 || Tmp_661 == 0 || Tmp_661 == -1073741675 || Tmp_661 == -1073741823 || Tmp_661 == -1073741668 || Tmp_661 == -1073741661 || Tmp_661 == -1073741536 || Tmp_661 == 259 || Tmp_661 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_57: int, actual_Irp_31: int) returns (Tmp_661: int)
{
  var {:pointer} DataBuffer: int;
  var {:pointer} Tmp_662: int;
  var {:scalar} Tmp_663: int;
  var {:pointer} Tmp_664: int;
  var {:pointer} Tmp_665: int;
  var {:pointer} pSet: int;
  var {:dopa} {:scalar} unUsed_1: int;
  var {:scalar} InformationBufferLength_2: int;
  var {:scalar} oldDeviceState: int;
  var {:scalar} Oid: int;
  var {:pointer} Tmp_666: int;
  var {:pointer} InformationBuffer_2: int;
  var {:pointer} Tmp_667: int;
  var {:scalar} PacketFilter: int;
  var {:pointer} Tmp_668: int;
  var {:pointer} Tmp_669: int;
  var {:scalar} sdv_363: int;
  var {:scalar} BufferLength: int;
  var {:scalar} newDeviceState: int;
  var {:scalar} oldIrql_13: int;
  var {:scalar} sdv_365: int;
  var {:scalar} sdv_366: int;
  var {:scalar} WakeUpEnable: int;
  var {:scalar} status_50: int;
  var {:pointer} pIrpSp_2: int;
  var {:pointer} Tmp_670: int;
  var {:pointer} Tmp_671: int;
  var {:scalar} Tmp_672: int;
  var {:pointer} FdoData_57: int;
  var {:pointer} Irp_31: int;
  var vslice_dummy_var_43: int;

  anon0:
    call {:si_unique_call 1927} unUsed_1 := __HAVOC_malloc(4);
    FdoData_57 := actual_FdoData_57;
    Irp_31 := actual_Irp_31;
    call {:si_unique_call 1928} Tmp_662 := __HAVOC_malloc(124);
    call {:si_unique_call 1929} Tmp_664 := __HAVOC_malloc(132);
    call {:si_unique_call 1930} Tmp_665 := __HAVOC_malloc(112);
    call {:si_unique_call 1931} Tmp_666 := __HAVOC_malloc(16);
    call {:si_unique_call 1932} Tmp_669 := __HAVOC_malloc(132);
    call {:si_unique_call 1933} Tmp_670 := __HAVOC_malloc(100);
    call {:si_unique_call 1934} Tmp_671 := __HAVOC_malloc(100);
    status_50 := 0;
    InformationBuffer_2 := 0;
    InformationBufferLength_2 := 0;
    call {:si_unique_call 1935} pIrpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_31);
    assume {:nonnull} Irp_31 != 0;
    assume Irp_31 > 0;
    havoc DataBuffer;
    assume {:nonnull} pIrpSp_2 != 0;
    assume pIrpSp_2 > 0;
    havoc BufferLength;
    Tmp_671 := strConst__li2bpl178;
    call {:si_unique_call 1936} DebugPrint(6, 32, Tmp_671);
    Oid := 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} 8 > BufferLength;
    status_50 := 5;
    goto L33;

  L33:
    Tmp_670 := strConst__li2bpl174;
    call {:si_unique_call 1937} DebugPrint(6, 32, Tmp_670);
    Tmp_661 := status_50;
    goto L1;

  L1:
    return;

  anon65_Then:
    assume {:partition} BufferLength >= 8;
    pSet := DataBuffer;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Oid;
    assume {:nonnull} pSet != 0;
    assume pSet > 0;
    havoc Tmp_666;
    InformationBuffer_2 := Tmp_666;
    InformationBufferLength_2 := BufferLength - 4;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} Oid != 65806;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} Oid != 16843011;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} Oid != -50265855;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} Oid != -50265853;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} Oid != -50265852;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} Oid == -50265850;
    Tmp_665 := strConst__li2bpl176;
    call {:si_unique_call 1938} DebugPrint(5, 32, Tmp_665);
    call {:si_unique_call 1939} sdv_363 := IsPoMgmtSupported(FdoData_57);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} sdv_363 != 0;
    call {:si_unique_call 1940} sdv_RtlMoveMemory(0, 0, 4);
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} WakeUpEnable != 0;
    Tmp_663 := BAND(WakeUpEnable, 2);
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} Tmp_663 != 2;
    status_50 := -1073741637;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon69_Then:
    assume {:partition} Tmp_663 == 2;
    goto L64;

  L64:
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    status_50 := 0;
    goto L33;

  anon51_Then:
    assume {:partition} WakeUpEnable == 0;
    goto L64;

  anon50_Then:
    assume {:partition} sdv_363 == 0;
    status_50 := -1073741637;
    goto L33;

  anon60_Then:
    assume {:partition} Oid != -50265850;
    status_50 := -1073741637;
    goto L33;

  anon61_Then:
    assume {:partition} Oid == -50265852;
    Tmp_664 := strConst__li2bpl175;
    call {:si_unique_call 1941} DebugPrint(5, 32, Tmp_664);
    call {:si_unique_call 1942} sdv_365 := IsPoMgmtSupported(FdoData_57);
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} sdv_365 != 0;
    call {:si_unique_call 1943} status_50 := NICRemoveWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon52_Then:
    assume {:partition} sdv_365 == 0;
    status_50 := -1073741637;
    goto L33;

  anon62_Then:
    assume {:partition} Oid == -50265853;
    Tmp_669 := strConst__li2bpl175;
    call {:si_unique_call 1944} DebugPrint(5, 32, Tmp_669);
    call {:si_unique_call 1945} sdv_366 := IsPoMgmtSupported(FdoData_57);
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} sdv_366 != 0;
    call {:si_unique_call 1946} status_50 := NICAddWakeUpPattern(FdoData_57, InformationBuffer_2, InformationBufferLength_2, unUsed_1, unUsed_1);
    goto L33;

  anon53_Then:
    assume {:partition} sdv_366 == 0;
    status_50 := -1073741637;
    goto L33;

  anon63_Then:
    assume {:partition} Oid == -50265855;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_661 := -1073741789;
    goto L1;

  anon49_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    Tmp_668 := InformationBuffer_2;
    assume {:nonnull} Tmp_668 != 0;
    assume Tmp_668 > 0;
    havoc newDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc oldDeviceState;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} oldDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    havoc vslice_dummy_var_43;
    call {:si_unique_call 1947} status_50 := PciDrvPowerBeginQueuingIrps#1(vslice_dummy_var_43, 1, 0);
    goto L97;

  L97:
    call {:si_unique_call 1948} status_50 := NICSetPower(FdoData_57, newDeviceState);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_50 != 0;
    Tmp_662 := strConst__li2bpl177;
    call {:si_unique_call 1949} DebugPrint(2, 32, Tmp_662);
    goto L33;

  anon54_Then:
    assume {:partition} status_50 == 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} newDeviceState == 1;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    call {:si_unique_call 1950} PciDrvProcessQueuedRequests#0(FdoData_57);
    goto L111;

  L111:
    status_50 := 0;
    goto L33;

  anon55_Then:
    assume {:partition} newDeviceState != 1;
    goto L111;

  anon68_Then:
    assume {:partition} oldDeviceState != 1;
    goto L97;

  anon64_Then:
    assume {:partition} Oid == 16843011;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) != 0;
    Tmp_661 := -1073741306;
    goto L1;

  anon48_Then:
    assume {:partition} INTMOD(InformationBufferLength_2, 6) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} InformationBufferLength_2 > 192;
    Tmp_672 := 192;
    goto L122;

  L122:
    InformationBufferLength_2 := Tmp_672;
    call {:si_unique_call 1951} sdv_RtlMoveMemory(0, 0, InformationBufferLength_2);
    call {:si_unique_call 1952} Tmp_667 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    call {:si_unique_call 1953} sdv_KeAcquireSpinLock(0, Tmp_667);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    havoc oldIrql_13;
    call {:si_unique_call 1954} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 1955} status_50 := NICSetMulticastList(FdoData_57);
    call {:si_unique_call 1956} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1957} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon67_Then:
    assume {:partition} 192 >= InformationBufferLength_2;
    Tmp_672 := InformationBufferLength_2;
    goto L122;

  anon66_Then:
    assume {:partition} Oid == 65806;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} InformationBufferLength_2 != 4;
    Tmp_661 := -1073741306;
    goto L1;

  anon47_Then:
    assume {:partition} InformationBufferLength_2 == 4;
    call {:si_unique_call 1958} sdv_RtlMoveMemory(0, 0, 4);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} BAND(PacketFilter, -48) != 0;
    Tmp_661 := -1073741637;
    goto L1;

  anon56_Then:
    assume {:partition} BAND(PacketFilter, -48) == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    call {:si_unique_call 1959} Tmp_667 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    call {:si_unique_call 1960} sdv_KeAcquireSpinLock(0, Tmp_667);
    assume {:nonnull} Tmp_667 != 0;
    assume Tmp_667 > 0;
    havoc oldIrql_13;
    call {:si_unique_call 1961} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    call {:si_unique_call 1962} status_50 := PciDrvQueueIoctlIrp(FdoData_57, Irp_31);
    call {:si_unique_call 1963} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1964} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto L33;

  anon58_Then:
    call {:si_unique_call 1965} status_50 := NICSetPacketFilter(FdoData_57, PacketFilter);
    call {:si_unique_call 1966} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1967} sdv_KeReleaseSpinLock(0, oldIrql_13);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_50 == 0;
    assume {:nonnull} FdoData_57 != 0;
    assume FdoData_57 > 0;
    goto L33;

  anon59_Then:
    assume {:partition} status_50 != 0;
    goto L33;

  anon57_Then:
    goto L33;
}



procedure {:origName "NICHandleSetOidRequest"} NICHandleSetOidRequest#1(actual_FdoData_57: int, actual_Irp_31: int) returns (Tmp_661: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} Tmp_661 == -1073741789 || Tmp_661 == -1073741306 || Tmp_661 == -1073741637 || Tmp_661 == 5 || Tmp_661 == 0 || Tmp_661 == -1073741675 || Tmp_661 == -1073741823 || Tmp_661 == -1073741668 || Tmp_661 == -1073741661 || Tmp_661 == -1073741536 || Tmp_661 == 259 || Tmp_661 == -1073741808;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_8: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_122: int)
{
  var {:pointer} fdoData_5: int;
  var {:scalar} status_15: int;
  var {:pointer} DeviceObject_8: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_8 := actual_DeviceObject_8;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 1968} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    havoc fdoData_5;
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    call {:si_unique_call 1969} PciDrvWithdrawIrps(fdoData_5);
    call {:si_unique_call 1970} PciDrvCancelIdleDetectionTimer(fdoData_5);
    call {:si_unique_call 1971} PciDrvReleaseAndWait(fdoData_5, IrpIoCharges, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 1972} status_15 := PciDrvCanSuspendDevice(DeviceObject_8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_15 >= 0;
    goto L27;

  L27:
    Tmp_122 := status_15;
    return;

  anon6_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    assume false;
    return;

  anon5_Then:
    assume {:partition} Query == 0;
    status_15 := 0;
    goto L27;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#0(actual_DeviceObject_8: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_122: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} Tmp_122 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_8: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_122: int)
{
  var {:pointer} fdoData_5: int;
  var {:scalar} status_15: int;
  var {:pointer} DeviceObject_8: int;
  var {:scalar} IrpIoCharges: int;
  var {:scalar} Query: int;

  anon0:
    DeviceObject_8 := actual_DeviceObject_8;
    IrpIoCharges := actual_IrpIoCharges;
    Query := actual_Query;
    call {:si_unique_call 1973} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    havoc fdoData_5;
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    call {:si_unique_call 1974} PciDrvWithdrawIrps(fdoData_5);
    call {:si_unique_call 1975} PciDrvCancelIdleDetectionTimer(fdoData_5);
    call {:si_unique_call 1976} PciDrvReleaseAndWait(fdoData_5, IrpIoCharges, 1);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Query != 0;
    call {:si_unique_call 1977} status_15 := PciDrvCanSuspendDevice(DeviceObject_8);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} status_15 >= 0;
    goto L27;

  L27:
    Tmp_122 := status_15;
    return;

  anon6_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} fdoData_5 != 0;
    assume fdoData_5 > 0;
    call {:si_unique_call 1978} PciDrvProcessQueuedRequests#0(fdoData_5);
    goto L27;

  anon5_Then:
    assume {:partition} Query == 0;
    status_15 := 0;
    goto L27;
}



procedure {:origName "PciDrvPowerBeginQueuingIrps"} PciDrvPowerBeginQueuingIrps#1(actual_DeviceObject_8: int, actual_IrpIoCharges: int, actual_Query: int) returns (Tmp_122: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} Tmp_122 == 0;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_48: int)
{
  var {:pointer} Tmp_401: int;
  var {:pointer} Tmp_402: int;
  var {:scalar} sdv_239: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_404: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} sdv_242: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_48: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 1979} vslice_dummy_var_225 := __HAVOC_malloc(4);
    FdoData_48 := actual_FdoData_48;
    call {:si_unique_call 1980} Tmp_401 := __HAVOC_malloc(140);
    call {:si_unique_call 1981} Tmp_402 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_402 := strConst__li2bpl137;
    call {:si_unique_call 1982} DebugPrint(5, 2048, Tmp_402);
    goto L13;

  L13:
    call {:si_unique_call 1983} sdv_239, listEntry_3, Tmp_404, cancelRoutine, oldIrql_9, sdv_242, nIrpsReDispatched, nextIrp, vslice_dummy_var_227 := PciDrvProcessQueuedRequests#0_loop_L13(sdv_239, listEntry_3, Tmp_404, cancelRoutine, oldIrql_9, sdv_242, nIrpsReDispatched, nextIrp, FdoData_48, vslice_dummy_var_227);
    goto L13_last;

  L13_last:
    call {:si_unique_call 1998} Tmp_404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    call {:si_unique_call 1999} sdv_KeAcquireSpinLock(0, Tmp_404);
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    havoc oldIrql_9;
    call {:si_unique_call 2000} sdv_239 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_239 != 0;
    call {:si_unique_call 1984} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto L27;

  L27:
    Tmp_401 := strConst__li2bpl136;
    call {:si_unique_call 1985} DebugPrint(5, 2048, Tmp_401);
    return;

  anon11_Then:
    assume {:partition} sdv_239 == 0;
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    call {:si_unique_call 1986} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_48));
    call {:si_unique_call 1987} sdv_242 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_242;
    call {:si_unique_call 1988} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 1989} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 1990} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 1991} InitializeListHead(listEntry_3);
    call {:si_unique_call 1992} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon12_Then:
    call {:si_unique_call 1993} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 1994} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    havoc vslice_dummy_var_44;
    call {:si_unique_call 1995} vslice_dummy_var_227 := PciDrvDispatchIO#0(vslice_dummy_var_44, nextIrp);
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    call {:si_unique_call 1996} vslice_dummy_var_226 := PciDrvIoIncrement(FdoData_48);
    call {:si_unique_call 1997} vslice_dummy_var_228 := PciDrvQueueRequest(FdoData_48, nextIrp);
    goto L27;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#0(actual_FdoData_48: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_48: int)
{
  var {:pointer} Tmp_401: int;
  var {:pointer} Tmp_402: int;
  var {:scalar} sdv_239: int;
  var {:pointer} listEntry_3: int;
  var {:pointer} Tmp_404: int;
  var {:scalar} cancelRoutine: int;
  var {:scalar} oldIrql_9: int;
  var {:pointer} sdv_242: int;
  var {:scalar} nIrpsReDispatched: int;
  var {:pointer} nextIrp: int;
  var {:pointer} FdoData_48: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_45: int;

  anon0:
    call {:si_unique_call 2001} vslice_dummy_var_229 := __HAVOC_malloc(4);
    FdoData_48 := actual_FdoData_48;
    call {:si_unique_call 2002} Tmp_401 := __HAVOC_malloc(140);
    call {:si_unique_call 2003} Tmp_402 := __HAVOC_malloc(128);
    nIrpsReDispatched := 0;
    Tmp_402 := strConst__li2bpl137;
    call {:si_unique_call 2004} DebugPrint(5, 2048, Tmp_402);
    goto L13;

  L13:
    call {:si_unique_call 2005} sdv_239, listEntry_3, Tmp_404, cancelRoutine, oldIrql_9, sdv_242, nIrpsReDispatched, nextIrp, vslice_dummy_var_231 := PciDrvProcessQueuedRequests#1_loop_L13(sdv_239, listEntry_3, Tmp_404, cancelRoutine, oldIrql_9, sdv_242, nIrpsReDispatched, nextIrp, FdoData_48, vslice_dummy_var_231);
    goto L13_last;

  L13_last:
    call {:si_unique_call 2020} Tmp_404 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    call {:si_unique_call 2021} sdv_KeAcquireSpinLock(0, Tmp_404);
    assume {:nonnull} Tmp_404 != 0;
    assume Tmp_404 > 0;
    havoc oldIrql_9;
    call {:si_unique_call 2022} sdv_239 := sdv_IsListEmpty(0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} sdv_239 != 0;
    call {:si_unique_call 2006} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto L27;

  L27:
    Tmp_401 := strConst__li2bpl136;
    call {:si_unique_call 2007} DebugPrint(5, 2048, Tmp_401);
    return;

  anon11_Then:
    assume {:partition} sdv_239 == 0;
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    call {:si_unique_call 2008} listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(FdoData_48));
    call {:si_unique_call 2009} sdv_242 := sdv_containing_record(listEntry_3, 88);
    nextIrp := sdv_242;
    call {:si_unique_call 2010} cancelRoutine := sdv_IoSetCancelRoutine(nextIrp, 0);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} cancelRoutine != 0;
    call {:si_unique_call 2011} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2012} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    assume false;
    return;

  anon13_Then:
    assume {:partition} cancelRoutine == 0;
    call {:si_unique_call 2013} InitializeListHead(listEntry_3);
    call {:si_unique_call 2014} sdv_KeReleaseSpinLock(0, oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    assume false;
    return;

  anon12_Then:
    call {:si_unique_call 2015} sdv_KeReleaseSpinLock(0, oldIrql_9);
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    assume {:nonnull} nextIrp != 0;
    assume nextIrp > 0;
    call {:si_unique_call 2016} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} FdoData_48 != 0;
    assume FdoData_48 > 0;
    havoc vslice_dummy_var_45;
    call {:si_unique_call 2017} vslice_dummy_var_231 := PciDrvDispatchIO#1(vslice_dummy_var_45, nextIrp);
    nIrpsReDispatched := nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    call {:si_unique_call 2018} vslice_dummy_var_230 := PciDrvIoIncrement(FdoData_48);
    call {:si_unique_call 2019} vslice_dummy_var_232 := PciDrvQueueRequest(FdoData_48, nextIrp);
    goto L27;
}



procedure {:origName "PciDrvProcessQueuedRequests"} PciDrvProcessQueuedRequests#1(actual_FdoData_48: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_380: int)
{
  var {:pointer} irpStack_1: int;
  var {:pointer} fdoData_11: int;
  var {:pointer} Tmp_382: int;
  var {:scalar} status_35: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;

  anon0:
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 2023} Tmp_382 := __HAVOC_malloc(112);
    status_35 := 0;
    Tmp_382 := strConst__li2bpl129;
    call {:si_unique_call 2024} DebugPrint(6, 32, Tmp_382);
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc fdoData_11;
    call {:si_unique_call 2025} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_16);
    call {:si_unique_call 2026} status_35 := PciDrvPowerUpDevice(fdoData_11, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_35 >= 0;
    call {:si_unique_call 2027} vslice_dummy_var_233 := PciDrvIoIncrement(fdoData_11);
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2028} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2029} vslice_dummy_var_234 := PciDrvIoDecrement(fdoData_11);
    Tmp_380 := -1073741810;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2030} status_35 := PciDrvDispatchIoctl#0(fdoData_11, Irp_16);
    goto L48;

  L48:
    Tmp_380 := status_35;
    goto L1;

  anon26_Then:
    status_35 := -1073741823;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2031} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2032} vslice_dummy_var_235 := PciDrvIoDecrement(fdoData_11);
    goto L48;

  anon27_Then:
    call {:si_unique_call 2033} status_35 := PciDrvWrite(fdoData_11, Irp_16);
    goto L48;

  anon23_Then:
    call {:si_unique_call 2034} status_35 := PciDrvRead(fdoData_11, Irp_16);
    goto L48;

  anon21_Then:
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L61;

  L61:
    call {:si_unique_call 2035} Tmp_380 := PciDrvQueueRequest(fdoData_11, Irp_16);
    goto L1;

  anon25_Then:
    goto L35;

  anon24_Then:
    goto L61;

  anon22_Then:
    goto L61;

  anon19_Then:
    assume {:partition} 0 > status_35;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2036} sdv_IoCompleteRequest(0, 0);
    Tmp_380 := status_35;
    goto L1;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#0(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_380: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_380: int)
{
  var {:pointer} irpStack_1: int;
  var {:pointer} fdoData_11: int;
  var {:pointer} Tmp_382: int;
  var {:scalar} status_35: int;
  var {:pointer} DeviceObject_16: int;
  var {:pointer} Irp_16: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;

  anon0:
    DeviceObject_16 := actual_DeviceObject_16;
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 2037} Tmp_382 := __HAVOC_malloc(112);
    status_35 := 0;
    Tmp_382 := strConst__li2bpl129;
    call {:si_unique_call 2038} DebugPrint(6, 32, Tmp_382);
    assume {:nonnull} DeviceObject_16 != 0;
    assume DeviceObject_16 > 0;
    havoc fdoData_11;
    call {:si_unique_call 2039} irpStack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_16);
    call {:si_unique_call 2040} status_35 := PciDrvPowerUpDevice(fdoData_11, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_35 >= 0;
    call {:si_unique_call 2041} vslice_dummy_var_236 := PciDrvIoIncrement(fdoData_11);
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2042} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2043} vslice_dummy_var_237 := PciDrvIoDecrement(fdoData_11);
    Tmp_380 := -1073741810;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L35;

  L35:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    call {:si_unique_call 2044} status_35 := PciDrvDispatchIoctl#1(fdoData_11, Irp_16);
    goto L48;

  L48:
    Tmp_380 := status_35;
    goto L1;

  anon26_Then:
    status_35 := -1073741823;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2045} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2046} vslice_dummy_var_238 := PciDrvIoDecrement(fdoData_11);
    goto L48;

  anon27_Then:
    call {:si_unique_call 2047} status_35 := PciDrvWrite(fdoData_11, Irp_16);
    goto L48;

  anon23_Then:
    call {:si_unique_call 2048} status_35 := PciDrvRead(fdoData_11, Irp_16);
    goto L48;

  anon21_Then:
    assume {:nonnull} fdoData_11 != 0;
    assume fdoData_11 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} irpStack_1 != 0;
    assume irpStack_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L61;

  L61:
    call {:si_unique_call 2049} Tmp_380 := PciDrvQueueRequest(fdoData_11, Irp_16);
    goto L1;

  anon25_Then:
    goto L35;

  anon24_Then:
    goto L61;

  anon22_Then:
    goto L61;

  anon19_Then:
    assume {:partition} 0 > status_35;
    assume {:nonnull} Irp_16 != 0;
    assume Irp_16 > 0;
    call {:si_unique_call 2050} sdv_IoCompleteRequest(0, 0);
    Tmp_380 := status_35;
    goto L1;
}



procedure {:origName "PciDrvDispatchIO"} PciDrvDispatchIO#1(actual_DeviceObject_16: int, actual_Irp_16: int) returns (Tmp_380: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_55: int, actual_Irp_24: int) returns (Tmp_437: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_438: int;
  var {:pointer} Tmp_439: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} status_45: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_55: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_239: int;

  anon0:
    call {:si_unique_call 2051} bytesReturned := __HAVOC_malloc(4);
    FdoData_55 := actual_FdoData_55;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2052} Tmp_438 := __HAVOC_malloc(68);
    status_45 := 0;
    Tmp_438 := strConst__li2bpl171;
    call {:si_unique_call 2053} DebugPrint(6, 32, Tmp_438);
    call {:si_unique_call 2054} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_24);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2055} Tmp_439 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    call {:si_unique_call 2056} sdv_KeAcquireSpinLock(0, Tmp_439);
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    havoc oldIrql_12;
    call {:si_unique_call 2057} status_45 := PciDrvQueueIoctlIrp(FdoData_55, Irp_24);
    call {:si_unique_call 2058} sdv_KeReleaseSpinLock(0, oldIrql_12);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_45 != 259;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2059} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2060} vslice_dummy_var_239 := PciDrvIoDecrement(FdoData_55);
    goto L39;

  L39:
    Tmp_437 := status_45;
    return;

  anon9_Then:
    assume {:partition} status_45 == 259;
    goto L39;

  anon10_Then:
    assume {:partition} FunctionCode != 1230872;
    status_45 := -1073741637;
    goto L38;

  anon11_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2061} status_45 := NICHandleSetOidRequest#0(FdoData_55, Irp_24);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;

  anon12_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2062} status_45 := NICHandleQueryOidRequest(FdoData_55, Irp_24, bytesReturned);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#0(actual_FdoData_55: int, actual_Irp_24: int) returns (Tmp_437: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_55: int, actual_Irp_24: int) returns (Tmp_437: int)
{
  var {:scalar} FunctionCode: int;
  var {:pointer} Tmp_438: int;
  var {:pointer} Tmp_439: int;
  var {:dopa} {:scalar} bytesReturned: int;
  var {:scalar} oldIrql_12: int;
  var {:scalar} status_45: int;
  var {:pointer} pIrpSp_1: int;
  var {:pointer} FdoData_55: int;
  var {:pointer} Irp_24: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 2063} bytesReturned := __HAVOC_malloc(4);
    FdoData_55 := actual_FdoData_55;
    Irp_24 := actual_Irp_24;
    call {:si_unique_call 2064} Tmp_438 := __HAVOC_malloc(68);
    status_45 := 0;
    Tmp_438 := strConst__li2bpl171;
    call {:si_unique_call 2065} DebugPrint(6, 32, Tmp_438);
    call {:si_unique_call 2066} pIrpSp_1 := sdv_IoGetCurrentIrpStackLocation(Irp_24);
    assume {:nonnull} pIrpSp_1 != 0;
    assume pIrpSp_1 > 0;
    havoc FunctionCode;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} FunctionCode != 1230852;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} FunctionCode != 1230868;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} FunctionCode == 1230872;
    call {:si_unique_call 2067} Tmp_439 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    call {:si_unique_call 2068} sdv_KeAcquireSpinLock(0, Tmp_439);
    assume {:nonnull} Tmp_439 != 0;
    assume Tmp_439 > 0;
    havoc oldIrql_12;
    call {:si_unique_call 2069} status_45 := PciDrvQueueIoctlIrp(FdoData_55, Irp_24);
    call {:si_unique_call 2070} sdv_KeReleaseSpinLock(0, oldIrql_12);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;

  L38:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_45 != 259;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    assume {:nonnull} Irp_24 != 0;
    assume Irp_24 > 0;
    call {:si_unique_call 2071} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2072} vslice_dummy_var_240 := PciDrvIoDecrement(FdoData_55);
    goto L39;

  L39:
    Tmp_437 := status_45;
    return;

  anon9_Then:
    assume {:partition} status_45 == 259;
    goto L39;

  anon10_Then:
    assume {:partition} FunctionCode != 1230872;
    status_45 := -1073741637;
    goto L38;

  anon11_Then:
    assume {:partition} FunctionCode == 1230868;
    call {:si_unique_call 2073} status_45 := NICHandleSetOidRequest#1(FdoData_55, Irp_24);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;

  anon12_Then:
    assume {:partition} FunctionCode == 1230852;
    call {:si_unique_call 2074} status_45 := NICHandleQueryOidRequest(FdoData_55, Irp_24, bytesReturned);
    assume {:nonnull} bytesReturned != 0;
    assume bytesReturned > 0;
    goto L38;
}



procedure {:origName "PciDrvDispatchIoctl"} PciDrvDispatchIoctl#1(actual_FdoData_55: int, actual_Irp_24: int) returns (Tmp_437: int);
  modifies alloc, IrpCancelChecked, IrpPended, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int)
{

  entry:
    out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := in_i, in_Tmp_7, in_MaskBit, in_Signature, in_n, in_MaskOffset, in_Tmp_11, in_BitOffsetInMask;
    goto L41, exit;

  exit:
    return;

  L41:
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 128 > out_n;
    goto anon19_Else;

  anon19_Else:
    assume {:partition} in_FrameLength > out_n;
    out_BitOffsetInMask := INTMOD(out_n, 8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_BitOffsetInMask != 0;
    goto L47;

  L47:
    call {:si_unique_call 2077} out_MaskBit := corral_nondet();
    assume {:nonnull} in_pCurrentMaskByte != 0;
    assume in_pCurrentMaskByte > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L57;

  L57:
    out_n := out_n + 1;
    goto L57_dummy;

  L57_dummy:
    call {:si_unique_call 2078} {:si_old_unique_call 1} out_i, out_Tmp_7, out_MaskBit, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask := MPCalculateE100PatternForFilter_loop_L41(out_i, out_Tmp_7, out_MaskBit, in_pCurrentMaskByte, out_Signature, out_n, out_MaskOffset, out_Tmp_11, out_BitOffsetInMask, in_pFrame, in_FrameLength, in_MaskLength);
    return;

  anon22_Then:
    out_Tmp_11 := out_n;
    assume {:nonnull} in_pFrame != 0;
    assume in_pFrame > 0;
    out_Tmp_7 := INTMOD(out_i, 3);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(out_Signature, 0) != 0;
    call {:si_unique_call 2075} out_Signature := corral_nondet();
    goto L56;

  L56:
    out_i := out_i + 1;
    goto L57;

  anon23_Then:
    assume {:partition} BAND(out_Signature, 0) == 0;
    call {:si_unique_call 2076} out_Signature := corral_nondet();
    goto L56;

  anon21_Then:
    assume {:partition} out_BitOffsetInMask == 0;
    out_MaskOffset := INTDIV(out_n, 8);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_MaskOffset != in_MaskLength;
    goto L47;
}



procedure {:LoopProcedure} MPCalculateE100PatternForFilter_loop_L41(in_i: int, in_Tmp_7: int, in_MaskBit: int, in_pCurrentMaskByte: int, in_Signature: int, in_n: int, in_MaskOffset: int, in_Tmp_11: int, in_BitOffsetInMask: int, in_pFrame: int, in_FrameLength: int, in_MaskLength: int) returns (out_i: int, out_Tmp_7: int, out_MaskBit: int, out_Signature: int, out_n: int, out_MaskOffset: int, out_Tmp_11: int, out_BitOffsetInMask: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_9: int, in_pPatternEntry: int, in_vslice_dummy_var_7: int) returns (out_sdv_9: int, out_pPatternEntry: int, out_vslice_dummy_var_7: int)
{

  entry:
    out_sdv_9, out_pPatternEntry, out_vslice_dummy_var_7 := in_sdv_9, in_pPatternEntry, in_vslice_dummy_var_7;
    goto L8, exit;

  exit:
    return;

  L8:
    goto anon3_Else;

  anon3_Else:
    call {:si_unique_call 2079} out_sdv_9 := sdv_containing_record(out_pPatternEntry, 0);
    assume {:nonnull} out_pPatternEntry != 0;
    assume out_pPatternEntry > 0;
    havoc out_pPatternEntry;
    call {:si_unique_call 2080} out_vslice_dummy_var_7 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2081} ExFreePoolWithTag(0, -1001831600);
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    havoc out_pPatternEntry;
    return;
}



procedure {:LoopProcedure} NICRemoveAllWakeUpPatterns_loop_L8(in_sdv_9: int, in_pPatternEntry: int, in_vslice_dummy_var_7: int) returns (out_sdv_9: int, out_pPatternEntry: int, out_vslice_dummy_var_7: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_9 == in_pPatternEntry || out_sdv_9 == in_sdv_9;
  free ensures {:va_keep} out_vslice_dummy_var_7 == 1 || out_vslice_dummy_var_7 == 0 || out_vslice_dummy_var_7 == in_vslice_dummy_var_7;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_24: int, in_bIsThisThePattern: int, in_sdv_14: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_24: int, out_bIsThisThePattern: int, out_sdv_14: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int)
{

  entry:
    out_Tmp_24, out_bIsThisThePattern, out_sdv_14, out_pWakeUpPattern_1, out_pCurrPattern, out_pPatternEntry_1 := in_Tmp_24, in_bIsThisThePattern, in_sdv_14, in_pWakeUpPattern_1, in_pCurrPattern, in_pPatternEntry_1;
    goto L32, exit;

  exit:
    return;

  L32:
    goto anon14_Else;

  anon14_Else:
    out_bIsThisThePattern := 0;
    out_pWakeUpPattern_1 := 0;
    out_pCurrPattern := 0;
    call {:si_unique_call 2082} out_sdv_14 := sdv_containing_record(out_pPatternEntry_1, 0);
    out_pWakeUpPattern_1 := out_sdv_14;
    assume {:nonnull} out_pWakeUpPattern_1 != 0;
    assume out_pWakeUpPattern_1 > 0;
    havoc out_Tmp_24;
    out_pCurrPattern := out_Tmp_24;
    assume {:nonnull} out_pPatternEntry_1 != 0;
    assume out_pPatternEntry_1 > 0;
    havoc out_pPatternEntry_1;
    call {:si_unique_call 2083} out_bIsThisThePattern := MPAreTwoPatternsEqual(in_pReqPattern, out_pCurrPattern);
    goto anon15_Then;

  anon15_Then:
    assume {:partition} out_bIsThisThePattern != 1;
    goto anon15_Then_dummy;

  anon15_Then_dummy:
    havoc out_pPatternEntry_1;
    return;
}



procedure {:LoopProcedure} NICRemoveWakeUpPattern_loop_L32(in_pReqPattern: int, in_Tmp_24: int, in_bIsThisThePattern: int, in_sdv_14: int, in_pWakeUpPattern_1: int, in_pCurrPattern: int, in_pPatternEntry_1: int) returns (out_Tmp_24: int, out_bIsThisThePattern: int, out_sdv_14: int, out_pWakeUpPattern_1: int, out_pCurrPattern: int, out_pPatternEntry_1: int);
  free ensures {:va_keep} out_bIsThisThePattern == 0 || out_bIsThisThePattern == 1 || out_bIsThisThePattern == in_bIsThisThePattern;
  free ensures {:va_keep} out_sdv_14 == in_pPatternEntry_1 || out_sdv_14 == in_sdv_14;
  free ensures {:va_keep} out_pWakeUpPattern_1 == in_pPatternEntry_1 || out_pWakeUpPattern_1 == in_pWakeUpPattern_1;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICServiceReadIrps_loop_L27(in_listEntry: int, in_sdv_30: int, in_sdv_36: int, in_sdv_38: int, in_irp: int, in_FdoData_8: int) returns (out_listEntry: int, out_sdv_30: int, out_sdv_36: int, out_sdv_38: int, out_irp: int)
{

  entry:
    out_listEntry, out_sdv_30, out_sdv_36, out_sdv_38, out_irp := in_listEntry, in_sdv_30, in_sdv_36, in_sdv_38, in_irp;
    goto L27, exit;

  exit:
    return;

  L27:
    call {:si_unique_call 2084} out_sdv_30 := sdv_IsListEmpty(0);
    goto anon16_Then;

  anon16_Then:
    assume {:partition} out_sdv_30 == 0;
    assume {:nonnull} in_FdoData_8 != 0;
    assume in_FdoData_8 > 0;
    call {:si_unique_call 2086} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_8));
    call {:si_unique_call 2087} out_sdv_36 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_36;
    call {:si_unique_call 2088} out_sdv_38 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon17_Then;

  anon17_Then:
    assume {:partition} out_sdv_38 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 2085} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    goto anon17_Then_dummy;

  anon17_Then_dummy:
    call {:si_unique_call 2089} {:si_old_unique_call 1} out_listEntry, out_sdv_30, out_sdv_36, out_sdv_38, out_irp := NICServiceReadIrps_loop_L27(out_listEntry, out_sdv_30, out_sdv_36, out_sdv_38, out_irp, in_FdoData_8);
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps_loop_L27(in_listEntry: int, in_sdv_30: int, in_sdv_36: int, in_sdv_38: int, in_irp: int, in_FdoData_8: int) returns (out_listEntry: int, out_sdv_30: int, out_sdv_36: int, out_sdv_38: int, out_irp: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_30 == 1 || out_sdv_30 == 0 || out_sdv_30 == in_sdv_30;
  free ensures {:va_keep} out_irp == 0 || out_irp == in_irp;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICServiceReadIrps_loop_L15(in_Tmp_54: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_30: int, in_sdv_31: int, in_buffer: int, in_sdv_36: int, in_index: int, in_sdv_38: int, in_irp: int, in_Tmp_59: int, in_status_8: int, in_Tmp_60: int, in_FdoData_8: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_15: int, in_vslice_dummy_var_16: int, in_vslice_dummy_var_17: int, in_vslice_dummy_var_18: int) returns (out_Tmp_54: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_30: int, out_sdv_31: int, out_buffer: int, out_sdv_36: int, out_index: int, out_sdv_38: int, out_irp: int, out_Tmp_59: int, out_status_8: int, out_Tmp_60: int, out_vslice_dummy_var_15: int, out_vslice_dummy_var_16: int, out_vslice_dummy_var_17: int, out_vslice_dummy_var_18: int)
{

  entry:
    out_Tmp_54, out_length, out_pMpRfd, out_listEntry, out_sdv_30, out_sdv_31, out_buffer, out_sdv_36, out_index, out_sdv_38, out_irp, out_Tmp_59, out_status_8, out_Tmp_60, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18 := in_Tmp_54, in_length, in_pMpRfd, in_listEntry, in_sdv_30, in_sdv_31, in_buffer, in_sdv_36, in_index, in_sdv_38, in_irp, in_Tmp_59, in_status_8, in_Tmp_60, in_vslice_dummy_var_15, in_vslice_dummy_var_16, in_vslice_dummy_var_17, in_vslice_dummy_var_18;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon15_Else;

  anon15_Else:
    assume {:partition} in_PacketArrayCount > out_index;
    out_Tmp_59 := out_index;
    assume {:nonnull} in_PacketArray != 0;
    assume in_PacketArray > 0;
    havoc out_pMpRfd;
    call {:si_unique_call 2110} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L27;

  L27:
    call {:si_unique_call 2108} out_listEntry, out_sdv_30, out_sdv_36, out_sdv_38, out_irp := NICServiceReadIrps_loop_L27(out_listEntry, out_sdv_30, out_sdv_36, out_sdv_38, out_irp, in_FdoData_8);
    goto L27_last;

  L27_last:
    call {:si_unique_call 2109} out_sdv_30 := sdv_IsListEmpty(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_sdv_30 != 0;
    call {:si_unique_call 2099} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L24;

  L24:
    call {:si_unique_call 2097} sdv_KeAcquireSpinLockAtDpcLevel(0);
    call {:si_unique_call 2098} out_vslice_dummy_var_16 := PciDrvIoDecrement(in_FdoData_8);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    assume {:nonnull} in_FdoData_8 != 0;
    assume in_FdoData_8 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2091} NICReturnRFD(in_FdoData_8, out_pMpRfd);
    goto L96;

  L96:
    call {:si_unique_call 2090} sdv_KeReleaseSpinLockFromDpcLevel(0);
    out_index := out_index + 1;
    goto L96_dummy;

  L96_dummy:
    call {:si_unique_call 2114} {:si_old_unique_call 1} out_Tmp_54, out_length, out_pMpRfd, out_listEntry, out_sdv_30, out_sdv_31, out_buffer, out_sdv_36, out_index, out_sdv_38, out_irp, out_Tmp_59, out_status_8, out_Tmp_60, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18 := NICServiceReadIrps_loop_L15(out_Tmp_54, out_length, out_pMpRfd, out_listEntry, out_sdv_30, out_sdv_31, out_buffer, out_sdv_36, out_index, out_sdv_38, out_irp, out_Tmp_59, out_status_8, out_Tmp_60, in_FdoData_8, in_PacketArray, in_PacketArrayCount, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18);
    return;

  anon21_Then:
    call {:si_unique_call 2095} out_vslice_dummy_var_17 := PciDrvIoIncrement(in_FdoData_8);
    call {:si_unique_call 2096} out_status_8 := PciDrvQueuePassiveLevelCallback(in_FdoData_8, li2bplFunctionConstant3731, out_pMpRfd, 0);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_status_8 >= 0;
    assume {:nonnull} in_FdoData_8 != 0;
    assume in_FdoData_8 > 0;
    assume {:nonnull} in_FdoData_8 != 0;
    assume in_FdoData_8 > 0;
    out_Tmp_60 := strConst__li2bpl17;
    call {:si_unique_call 2092} DebugPrint(5, 128, out_Tmp_60);
    goto L96;

  anon20_Then:
    assume {:partition} 0 > out_status_8;
    call {:si_unique_call 2093} out_vslice_dummy_var_18 := PciDrvIoDecrement(in_FdoData_8);
    call {:si_unique_call 2094} NICReturnRFD(in_FdoData_8, out_pMpRfd);
    goto L96;

  anon16_Then:
    assume {:partition} out_sdv_30 == 0;
    assume {:nonnull} in_FdoData_8 != 0;
    assume in_FdoData_8 > 0;
    call {:si_unique_call 2105} out_listEntry := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_8));
    call {:si_unique_call 2106} out_sdv_36 := sdv_containing_record(out_listEntry, 88);
    out_irp := out_sdv_36;
    call {:si_unique_call 2107} out_sdv_38 := sdv_IoSetCancelRoutine(out_irp, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_sdv_38 != 0;
    call {:si_unique_call 2103} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2104} out_buffer := sdv_MmGetSystemAddressForMdlSafe(0, 16);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} out_buffer != 0;
    call {:si_unique_call 2113} out_sdv_31 := sdv_MmGetMdlByteCount(0);
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 2112} out_Tmp_54 := sdv_MmGetMdlByteCount(0);
    goto L68;

  L68:
    out_length := out_Tmp_54;
    call {:si_unique_call 2102} sdv_RtlCopyMemory(0, 0, out_length);
    out_status_8 := 0;
    goto L73;

  L73:
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 2100} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2101} out_vslice_dummy_var_15 := PciDrvIoDecrement(in_FdoData_8);
    goto L24;

  anon19_Then:
    assume {:nonnull} out_pMpRfd != 0;
    assume out_pMpRfd > 0;
    havoc out_Tmp_54;
    goto L68;

  anon18_Then:
    assume {:partition} out_buffer == 0;
    out_status_8 := -1073741670;
    out_length := 0;
    goto L73;

  anon17_Then:
    assume {:partition} out_sdv_38 == 0;
    assume {:nonnull} out_irp != 0;
    assume out_irp > 0;
    call {:si_unique_call 2111} InitializeListHead(ListEntry_unnamed_tag_6(Overlay_unnamed_tag_5(Tail__IRP(out_irp))));
    out_irp := 0;
    assume false;
    return;
}



procedure {:LoopProcedure} NICServiceReadIrps_loop_L15(in_Tmp_54: int, in_length: int, in_pMpRfd: int, in_listEntry: int, in_sdv_30: int, in_sdv_31: int, in_buffer: int, in_sdv_36: int, in_index: int, in_sdv_38: int, in_irp: int, in_Tmp_59: int, in_status_8: int, in_Tmp_60: int, in_FdoData_8: int, in_PacketArray: int, in_PacketArrayCount: int, in_vslice_dummy_var_15: int, in_vslice_dummy_var_16: int, in_vslice_dummy_var_17: int, in_vslice_dummy_var_18: int) returns (out_Tmp_54: int, out_length: int, out_pMpRfd: int, out_listEntry: int, out_sdv_30: int, out_sdv_31: int, out_buffer: int, out_sdv_36: int, out_index: int, out_sdv_38: int, out_irp: int, out_Tmp_59: int, out_status_8: int, out_Tmp_60: int, out_vslice_dummy_var_15: int, out_vslice_dummy_var_16: int, out_vslice_dummy_var_17: int, out_vslice_dummy_var_18: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_30 == 1 || out_sdv_30 == 0 || out_sdv_30 == in_sdv_30;
  free ensures {:va_keep} out_status_8 == 0 || out_status_8 == -1073741670 || out_status_8 == in_status_8;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICHandleRecvInterrupt_loop_L115(in_pMpRfd_2: int, in_Tmp_70: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_10: int) returns (out_pMpRfd_2: int, out_Tmp_70: int, out_Index: int)
{

  entry:
    out_pMpRfd_2, out_Tmp_70, out_Index := in_pMpRfd_2, in_Tmp_70, in_Index;
    goto L115, exit;

  exit:
    return;

  L115:
    goto anon44_Else;

  anon44_Else:
    assume {:partition} in_PacketFreeCount > out_Index;
    out_Tmp_70 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2115} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    out_Index := out_Index + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    call {:si_unique_call 2116} {:si_old_unique_call 1} out_pMpRfd_2, out_Tmp_70, out_Index := NICHandleRecvInterrupt_loop_L115(out_pMpRfd_2, out_Tmp_70, in_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_10);
    return;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L115(in_pMpRfd_2: int, in_Tmp_70: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_Index: int, in_FdoData_10: int) returns (out_pMpRfd_2: int, out_Tmp_70: int, out_Index: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICHandleRecvInterrupt_loop_L29(in_PacketArrayCount_1: int, in_Tmp_65: int, in_Tmp_67: int, in_PacketStatus: int, in_Tmp_68: int, in_sdv_42: int, in_pMpRfd_2: int, in_Tmp_71: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_74: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_10: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_65: int, out_Tmp_67: int, out_PacketStatus: int, out_Tmp_68: int, out_sdv_42: int, out_pMpRfd_2: int, out_Tmp_71: int, out_PacketFreeCount: int, out_Tmp_74: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_65, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_71, out_PacketFreeCount, out_Tmp_74, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := in_PacketArrayCount_1, in_Tmp_65, in_Tmp_67, in_PacketStatus, in_Tmp_68, in_sdv_42, in_pMpRfd_2, in_Tmp_71, in_PacketFreeCount, in_Tmp_74, in_bAllocNewRfd, in_pHwRfd_1, in_vslice_dummy_var_22, in_vslice_dummy_var_25;
    goto L29, exit;

  exit:
    return;

  L29:
    goto anon37_Else;

  anon37_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 2119} out_sdv_42 := sdv_IsListEmpty(0);
    goto anon39_Then;

  anon39_Then:
    assume {:partition} out_sdv_42 == 0;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    out_Tmp_74 := RecvList__FDO_DATA(in_FdoData_10);
    assume {:nonnull} out_Tmp_74 != 0;
    assume out_Tmp_74 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_PacketStatus;
    goto anon49_Else;

  anon49_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_68;
    goto anon50_Else;

  anon50_Else:
    assume {:partition} out_Tmp_68 == 49152;
    call {:si_unique_call 2118} out_vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 2117} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    goto anon41_Else_dummy;

  anon41_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2125} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_65, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_71, out_PacketFreeCount, out_Tmp_74, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(out_PacketArrayCount_1, out_Tmp_65, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_71, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_74, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_10, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    return;

  anon41_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2121} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_67 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 2120} out_vslice_dummy_var_25 := PciDrvIoIncrement(in_FdoData_10);
    goto L70_dummy;

  L70_dummy:
    goto L_BAF_0;

  anon42_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_65 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 2122} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    goto anon40_Then_dummy;

  anon40_Then_dummy:
    goto L_BAF_0;

  anon51_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_71 := strConst__li2bpl18;
    call {:si_unique_call 2123} DebugPrint(3, 128, out_Tmp_71);
    call {:si_unique_call 2124} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    goto anon51_Then_dummy;

  anon51_Then_dummy:
    goto L_BAF_0;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L29(in_PacketArrayCount_1: int, in_Tmp_65: int, in_Tmp_67: int, in_PacketStatus: int, in_Tmp_68: int, in_sdv_42: int, in_pMpRfd_2: int, in_Tmp_71: int, in_PacketFreeCount: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_74: int, in_bAllocNewRfd: int, in_pHwRfd_1: int, in_FdoData_10: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_65: int, out_Tmp_67: int, out_PacketStatus: int, out_Tmp_68: int, out_sdv_42: int, out_pMpRfd_2: int, out_Tmp_71: int, out_PacketFreeCount: int, out_Tmp_74: int, out_bAllocNewRfd: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_42 == 1 || out_sdv_42 == 0 || out_sdv_42 == in_sdv_42;
  free ensures {:va_keep} out_Tmp_74 == in_Tmp_74 || out_Tmp_74 == RecvList__FDO_DATA(in_FdoData_10);
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_22 == 1 || out_vslice_dummy_var_22 == 0 || out_vslice_dummy_var_22 == in_vslice_dummy_var_22;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICHandleRecvInterrupt_loop_L24(in_PacketArrayCount_1: int, in_Tmp_65: int, in_Tmp_66: int, in_Tmp_67: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_68: int, in_sdv_42: int, in_pMpRfd_2: int, in_Tmp_70: int, in_Tmp_71: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_73: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_74: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_10: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_65: int, out_Tmp_66: int, out_Tmp_67: int, out_PacketStatus: int, out_Tmp_68: int, out_sdv_42: int, out_pMpRfd_2: int, out_Tmp_70: int, out_Tmp_71: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_73: int, out_Tmp_74: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int)
{

  entry:
    out_PacketArrayCount_1, out_Tmp_65, out_Tmp_66, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_70, out_Tmp_71, out_LoopIndex, out_PacketFreeCount, out_Tmp_73, out_Tmp_74, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := in_PacketArrayCount_1, in_Tmp_65, in_Tmp_66, in_Tmp_67, in_PacketStatus, in_Tmp_68, in_sdv_42, in_pMpRfd_2, in_Tmp_70, in_Tmp_71, in_LoopIndex, in_PacketFreeCount, in_Tmp_73, in_Tmp_74, in_bContinue, in_bAllocNewRfd, in_Index, in_pHwRfd_1, in_vslice_dummy_var_22, in_vslice_dummy_var_25;
    goto L24, exit;

  exit:
    return;

  L24:
    out_Tmp_73 := out_LoopIndex;
    out_LoopIndex := out_LoopIndex + 1;
    goto anon48_Else;

  anon48_Else:
    assume {:partition} in_LoopCount > out_Tmp_73;
    goto anon36_Else;

  anon36_Else:
    assume {:partition} out_bContinue != 0;
    out_PacketArrayCount_1 := 0;
    out_PacketFreeCount := 0;
    goto L29;

  L29:
    call {:si_unique_call 2136} out_PacketArrayCount_1, out_Tmp_65, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_71, out_PacketFreeCount, out_Tmp_74, out_bAllocNewRfd, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L29(out_PacketArrayCount_1, out_Tmp_65, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_71, out_PacketFreeCount, in_PacketFreeArray, in_PacketArray_1, out_Tmp_74, out_bAllocNewRfd, out_pHwRfd_1, in_FdoData_10, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    goto L29_last;

  L29_last:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} 20 > out_PacketArrayCount_1;
    call {:si_unique_call 2143} out_sdv_42 := sdv_IsListEmpty(0);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} out_sdv_42 != 0;
    out_bContinue := 0;
    goto L30;

  L30:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} out_PacketArrayCount_1 != 0;
    call {:si_unique_call 2134} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2135} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    out_Tmp_66 := strConst__li2bpl19;
    call {:si_unique_call 2130} DebugPrint(3, 128, out_Tmp_66);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    call {:si_unique_call 2131} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2132} NICServiceIndicateStatusIrp(in_FdoData_10);
    goto L108;

  L108:
    call {:si_unique_call 2127} NICServiceReadIrps(in_FdoData_10, in_PacketArray_1, out_PacketArrayCount_1);
    call {:si_unique_call 2128} sdv_KeAcquireSpinLockAtDpcLevel(0);
    out_Index := 0;
    goto L115;

  L115:
    call {:si_unique_call 2126} out_pMpRfd_2, out_Tmp_70, out_Index := NICHandleRecvInterrupt_loop_L115(out_pMpRfd_2, out_Tmp_70, out_PacketFreeCount, in_PacketFreeArray, out_Index, in_FdoData_10);
    goto L115_last;

  L115_last:
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} out_PacketFreeCount > out_Index;
    out_Tmp_70 := out_Index;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2129} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    out_Index := out_Index + 1;
    assume false;
    return;

  anon44_Then:
    assume {:partition} out_Index >= out_PacketFreeCount;
    goto anon44_Then_dummy;

  anon44_Then_dummy:
    call {:si_unique_call 2145} {:si_old_unique_call 1} out_PacketArrayCount_1, out_Tmp_65, out_Tmp_66, out_Tmp_67, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_70, out_Tmp_71, out_LoopIndex, out_PacketFreeCount, out_Tmp_73, out_Tmp_74, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, out_vslice_dummy_var_22, out_vslice_dummy_var_25 := NICHandleRecvInterrupt_loop_L24(out_PacketArrayCount_1, out_Tmp_65, out_Tmp_66, out_Tmp_67, in_LoopCount, out_PacketStatus, out_Tmp_68, out_sdv_42, out_pMpRfd_2, out_Tmp_70, out_Tmp_71, out_LoopIndex, out_PacketFreeCount, out_Tmp_73, in_PacketFreeArray, in_PacketArray_1, out_Tmp_74, out_bContinue, out_bAllocNewRfd, out_Index, out_pHwRfd_1, in_FdoData_10, out_vslice_dummy_var_22, out_vslice_dummy_var_25);
    return;

  anon43_Then:
    call {:si_unique_call 2133} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L108;

  anon39_Then:
    assume {:partition} out_sdv_42 == 0;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    out_Tmp_74 := RecvList__FDO_DATA(in_FdoData_10);
    assume {:nonnull} out_Tmp_74 != 0;
    assume out_Tmp_74 > 0;
    havoc out_pMpRfd_2;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    havoc out_pHwRfd_1;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_PacketStatus;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} BAND(out_PacketStatus, 32768) != 0;
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    havoc out_Tmp_68;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} out_Tmp_68 == 49152;
    call {:si_unique_call 2142} out_vslice_dummy_var_22 := sdv_RemoveEntryList(0);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} BAND(out_PacketStatus, 8192) != 0;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 2137} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    assume false;
    return;

  anon41_Then:
    assume {:nonnull} out_pHwRfd_1 != 0;
    assume out_pHwRfd_1 > 0;
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    call {:si_unique_call 2144} sdv_KeFlushIoBuffers(0, 1, 1);
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    goto L70;

  L70:
    out_Tmp_67 := out_PacketArrayCount_1;
    assume {:nonnull} in_PacketArray_1 != 0;
    assume in_PacketArray_1 > 0;
    out_PacketArrayCount_1 := out_PacketArrayCount_1 + 1;
    call {:si_unique_call 2138} out_vslice_dummy_var_25 := PciDrvIoIncrement(in_FdoData_10);
    assume false;
    return;

  anon42_Then:
    assume {:nonnull} out_pMpRfd_2 != 0;
    assume out_pMpRfd_2 > 0;
    out_Tmp_65 := out_PacketFreeCount;
    assume {:nonnull} in_PacketFreeArray != 0;
    assume in_PacketFreeArray > 0;
    out_PacketFreeCount := out_PacketFreeCount + 1;
    assume {:nonnull} in_FdoData_10 != 0;
    assume in_FdoData_10 > 0;
    out_bAllocNewRfd := 1;
    goto L70;

  anon40_Then:
    call {:si_unique_call 2139} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    assume false;
    return;

  anon51_Then:
    assume {:partition} BAND(out_PacketStatus, 8192) == 0;
    out_Tmp_71 := strConst__li2bpl18;
    call {:si_unique_call 2140} DebugPrint(3, 128, out_Tmp_71);
    call {:si_unique_call 2141} NICReturnRFD(in_FdoData_10, out_pMpRfd_2);
    assume false;
    return;

  anon50_Then:
    assume {:partition} out_Tmp_68 != 49152;
    out_bContinue := 0;
    goto L30;

  anon49_Then:
    assume {:partition} BAND(out_PacketStatus, 32768) == 0;
    out_bContinue := 0;
    goto L30;

  anon37_Then:
    assume {:partition} out_PacketArrayCount_1 >= 20;
    goto L30;
}



procedure {:LoopProcedure} NICHandleRecvInterrupt_loop_L24(in_PacketArrayCount_1: int, in_Tmp_65: int, in_Tmp_66: int, in_Tmp_67: int, in_LoopCount: int, in_PacketStatus: int, in_Tmp_68: int, in_sdv_42: int, in_pMpRfd_2: int, in_Tmp_70: int, in_Tmp_71: int, in_LoopIndex: int, in_PacketFreeCount: int, in_Tmp_73: int, in_PacketFreeArray: int, in_PacketArray_1: int, in_Tmp_74: int, in_bContinue: int, in_bAllocNewRfd: int, in_Index: int, in_pHwRfd_1: int, in_FdoData_10: int, in_vslice_dummy_var_22: int, in_vslice_dummy_var_25: int) returns (out_PacketArrayCount_1: int, out_Tmp_65: int, out_Tmp_66: int, out_Tmp_67: int, out_PacketStatus: int, out_Tmp_68: int, out_sdv_42: int, out_pMpRfd_2: int, out_Tmp_70: int, out_Tmp_71: int, out_LoopIndex: int, out_PacketFreeCount: int, out_Tmp_73: int, out_Tmp_74: int, out_bContinue: int, out_bAllocNewRfd: int, out_Index: int, out_pHwRfd_1: int, out_vslice_dummy_var_22: int, out_vslice_dummy_var_25: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} out_sdv_42 == 1 || out_sdv_42 == 0 || out_sdv_42 == in_sdv_42;
  free ensures {:va_keep} out_Tmp_74 == in_Tmp_74 || out_Tmp_74 == RecvList__FDO_DATA(in_FdoData_10);
  free ensures {:va_keep} out_bContinue == 0 || out_bContinue == in_bContinue;
  free ensures {:va_keep} out_bAllocNewRfd == 1 || out_bAllocNewRfd == in_bAllocNewRfd;
  free ensures {:va_keep} out_vslice_dummy_var_22 == 1 || out_vslice_dummy_var_22 == 0 || out_vslice_dummy_var_22 == in_vslice_dummy_var_22;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICFreeAdapterMemory_loop_L11(in_pMpRfd_4: int, in_sdv_97: int, in_sdv_98: int, in_FdoData_13: int) returns (out_pMpRfd_4: int, out_sdv_97: int, out_sdv_98: int)
{

  entry:
    out_pMpRfd_4, out_sdv_97, out_sdv_98 := in_pMpRfd_4, in_sdv_97, in_sdv_98;
    goto L11, exit;

  exit:
    return;

  L11:
    call {:si_unique_call 2146} out_sdv_97 := sdv_IsListEmpty(0);
    goto anon14_Then;

  anon14_Then:
    assume {:partition} out_sdv_97 == 0;
    assume {:nonnull} in_FdoData_13 != 0;
    assume in_FdoData_13 > 0;
    call {:si_unique_call 2147} out_sdv_98 := RemoveHeadList(RecvList__FDO_DATA(in_FdoData_13));
    out_pMpRfd_4 := out_sdv_98;
    call {:si_unique_call 2148} NICFreeRfd(in_FdoData_13, out_pMpRfd_4);
    goto anon14_Then_dummy;

  anon14_Then_dummy:
    call {:si_unique_call 2149} {:si_old_unique_call 1} out_pMpRfd_4, out_sdv_97, out_sdv_98 := NICFreeAdapterMemory_loop_L11(out_pMpRfd_4, out_sdv_97, out_sdv_98, in_FdoData_13);
    return;
}



procedure {:LoopProcedure} NICFreeAdapterMemory_loop_L11(in_pMpRfd_4: int, in_sdv_97: int, in_sdv_98: int, in_FdoData_13: int) returns (out_pMpRfd_4: int, out_sdv_97: int, out_sdv_98: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_97 == 1 || out_sdv_97 == 0 || out_sdv_97 == in_sdv_97;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:SIextraRecBound 6} HwSetupIAAddress_loop_L17(in_i_1: int, in_Tmp_148: int, in_Tmp_152: int, in_Tmp_153: int, in_Tmp_154: int, in_Tmp_155: int, in_FdoData_16: int) returns (out_i_1: int, out_Tmp_148: int, out_Tmp_152: int, out_Tmp_153: int, out_Tmp_154: int, out_Tmp_155: int)
{

  entry:
    out_i_1, out_Tmp_148, out_Tmp_152, out_Tmp_153, out_Tmp_154, out_Tmp_155 := in_i_1, in_Tmp_148, in_Tmp_152, in_Tmp_153, in_Tmp_154, in_Tmp_155;
    goto L17, exit;

  exit:
    return;

  L17:
    assume {:CounterLoop 6} {:Counter "i_1"} true;
    goto anon3_Else;

  anon3_Else:
    assume {:partition} 6 > out_i_1;
    out_Tmp_148 := out_i_1;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    havoc out_Tmp_154;
    assume {:nonnull} out_Tmp_154 != 0;
    assume out_Tmp_154 > 0;
    havoc out_Tmp_152;
    out_Tmp_153 := out_i_1;
    assume {:nonnull} in_FdoData_16 != 0;
    assume in_FdoData_16 > 0;
    havoc out_Tmp_155;
    assume {:nonnull} out_Tmp_152 != 0;
    assume out_Tmp_152 > 0;
    assume {:nonnull} out_Tmp_155 != 0;
    assume out_Tmp_155 > 0;
    out_i_1 := out_i_1 + 1;
    goto anon3_Else_dummy;

  anon3_Else_dummy:
    call {:si_unique_call 2150} {:si_old_unique_call 1} out_i_1, out_Tmp_148, out_Tmp_152, out_Tmp_153, out_Tmp_154, out_Tmp_155 := HwSetupIAAddress_loop_L17(out_i_1, out_Tmp_148, out_Tmp_152, out_Tmp_153, out_Tmp_154, out_Tmp_155, in_FdoData_16);
    return;
}



procedure {:LoopProcedure} HwSetupIAAddress_loop_L17(in_i_1: int, in_Tmp_148: int, in_Tmp_152: int, in_Tmp_153: int, in_Tmp_154: int, in_Tmp_155: int, in_FdoData_16: int) returns (out_i_1: int, out_Tmp_148: int, out_Tmp_152: int, out_Tmp_153: int, out_Tmp_154: int, out_Tmp_155: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation HwConfigure_loop_L56(in_i_2: int, in_Tmp_176: int, in_Tmp_187: int, in_Tmp_201: int, in_Tmp_217: int, in_Tmp_218: int, in_FdoData_18: int) returns (out_i_2: int, out_Tmp_176: int, out_Tmp_187: int, out_Tmp_201: int, out_Tmp_217: int, out_Tmp_218: int)
{

  entry:
    out_i_2, out_Tmp_176, out_Tmp_187, out_Tmp_201, out_Tmp_217, out_Tmp_218 := in_i_2, in_Tmp_176, in_Tmp_187, in_Tmp_201, in_Tmp_217, in_Tmp_218;
    goto L56, exit;

  exit:
    return;

  L56:
    assume {:CounterLoop 22} {:Counter "i_2"} true;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} 22 > out_i_2;
    out_Tmp_217 := out_i_2;
    assume {:nonnull} in_FdoData_18 != 0;
    assume in_FdoData_18 > 0;
    havoc out_Tmp_176;
    assume {:nonnull} out_Tmp_176 != 0;
    assume out_Tmp_176 > 0;
    havoc out_Tmp_187;
    assume {:nonnull} out_Tmp_187 != 0;
    assume out_Tmp_187 > 0;
    havoc out_Tmp_218;
    out_Tmp_201 := strConst__li2bpl81;
    call {:si_unique_call 2151} DebugPrint(6, 4096, out_Tmp_201);
    out_i_2 := out_i_2 + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_i_2;
    return;
}



procedure {:LoopProcedure} HwConfigure_loop_L56(in_i_2: int, in_Tmp_176: int, in_Tmp_187: int, in_Tmp_201: int, in_Tmp_217: int, in_Tmp_218: int, in_FdoData_18: int) returns (out_i_2: int, out_Tmp_176: int, out_Tmp_187: int, out_Tmp_201: int, out_Tmp_217: int, out_Tmp_218: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_217 == in_i_2 || out_Tmp_217 == in_Tmp_217;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_254: int, in_FdoData_22: int) returns (out_counter: int, out_Tmp_254: int)
{

  entry:
    out_counter, out_Tmp_254 := in_counter, in_Tmp_254;
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:CounterLoop 100000} {:Counter "counter"} true;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_counter != 0;
    assume {:nonnull} in_FdoData_22 != 0;
    assume in_FdoData_22 > 0;
    havoc out_Tmp_254;
    assume {:nonnull} out_Tmp_254 != 0;
    assume out_Tmp_254 > 0;
    goto anon15_Else;

  anon15_Else:
    out_counter := out_counter - 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    havoc out_counter;
    return;
}



procedure {:LoopProcedure} HwClearAllCounters_loop_L31(in_counter: int, in_Tmp_254: int, in_FdoData_22: int) returns (out_counter: int, out_Tmp_254: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_158: int, in_sdv_160: int, in_irp_1: int, in_status_30: int, in_FdoData_35: int) returns (out_pEntry: int, out_sdv_158: int, out_sdv_160: int, out_irp_1: int)
{

  entry:
    out_pEntry, out_sdv_158, out_sdv_160, out_irp_1 := in_pEntry, in_sdv_158, in_sdv_160, in_irp_1;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2152} out_sdv_158 := sdv_IsListEmpty(0);
    goto anon3_Then;

  anon3_Then:
    assume {:partition} out_sdv_158 == 0;
    assume {:nonnull} in_FdoData_35 != 0;
    assume in_FdoData_35 > 0;
    call {:si_unique_call 2153} out_pEntry := RemoveHeadList(SendQueueHead__FDO_DATA(in_FdoData_35));
    assume {:nonnull} in_FdoData_35 != 0;
    assume in_FdoData_35 > 0;
    call {:si_unique_call 2154} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 2155} out_sdv_160 := sdv_containing_record(out_pEntry, 88);
    out_irp_1 := out_sdv_160;
    call {:si_unique_call 2156} NICCompleteSendRequest(in_FdoData_35, out_irp_1, in_status_30, 0, 1);
    call {:si_unique_call 2157} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    call {:si_unique_call 2158} {:si_old_unique_call 1} out_pEntry, out_sdv_158, out_sdv_160, out_irp_1 := NICFreeQueuedSendPackets_loop_L13(out_pEntry, out_sdv_158, out_sdv_160, out_irp_1, in_status_30, in_FdoData_35);
    return;
}



procedure {:LoopProcedure} NICFreeQueuedSendPackets_loop_L13(in_pEntry: int, in_sdv_158: int, in_sdv_160: int, in_irp_1: int, in_status_30: int, in_FdoData_35: int) returns (out_pEntry: int, out_sdv_158: int, out_sdv_160: int, out_irp_1: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_158 == 1 || out_sdv_158 == 0 || out_sdv_158 == in_sdv_158;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:SIextraRecBound 2} NICWrite_loop_L46(in_length_1: int, in_sdv_165: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress: int) returns (out_length_1: int, out_sdv_165: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress: int)
{

  entry:
    out_length_1, out_sdv_165, out_tempMdl, out_pageCount, out_virtualAddress := in_length_1, in_sdv_165, in_tempMdl, in_pageCount, in_virtualAddress;
    goto L46, exit;

  exit:
    return;

  L46:
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_tempMdl != 0;
    call {:si_unique_call 2159} out_virtualAddress := sdv_MmGetMdlVirtualAddress(0);
    call {:si_unique_call 2160} out_sdv_165 := sdv_MmGetMdlByteCount(0);
    out_length_1 := out_length_1 + out_sdv_165;
    call {:si_unique_call 2161} out_pageCount := corral_nondet();
    assume {:nonnull} out_tempMdl != 0;
    assume out_tempMdl > 0;
    havoc out_tempMdl;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    call {:si_unique_call 2162} {:si_old_unique_call 1} out_length_1, out_sdv_165, out_tempMdl, out_pageCount, out_virtualAddress := NICWrite_loop_L46(out_length_1, out_sdv_165, out_tempMdl, out_pageCount, out_virtualAddress);
    return;
}



procedure {:LoopProcedure} NICWrite_loop_L46(in_length_1: int, in_sdv_165: int, in_tempMdl: int, in_pageCount: int, in_virtualAddress: int) returns (out_length_1: int, out_sdv_165: int, out_tempMdl: int, out_pageCount: int, out_virtualAddress: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICFreeBusySendPackets_loop_L12(in_Tmp_355: int, in_pMpTcb: int, in_status_32: int, in_Tmp_357: int, in_FdoData_38: int) returns (out_Tmp_355: int, out_pMpTcb: int, out_Tmp_357: int)
{

  entry:
    out_Tmp_355, out_pMpTcb, out_Tmp_357 := in_Tmp_355, in_pMpTcb, in_Tmp_357;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_38 != 0;
    assume in_FdoData_38 > 0;
    goto anon5_Else;

  anon5_Else:
    assume {:nonnull} in_FdoData_38 != 0;
    assume in_FdoData_38 > 0;
    havoc out_pMpTcb;
    assume {:nonnull} out_pMpTcb != 0;
    assume out_pMpTcb > 0;
    havoc out_Tmp_355;
    assume {:nonnull} out_Tmp_355 != 0;
    assume out_Tmp_355 > 0;
    havoc out_Tmp_357;
    goto anon6_Else;

  anon6_Else:
    assume {:partition} out_Tmp_357 != 3;
    call {:si_unique_call 2163} MP_FREE_SEND_PACKET(in_FdoData_38, out_pMpTcb, in_status_32);
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    call {:si_unique_call 2164} {:si_old_unique_call 1} out_Tmp_355, out_pMpTcb, out_Tmp_357 := NICFreeBusySendPackets_loop_L12(out_Tmp_355, out_pMpTcb, in_status_32, out_Tmp_357, in_FdoData_38);
    return;
}



procedure {:LoopProcedure} NICFreeBusySendPackets_loop_L12(in_Tmp_355: int, in_pMpTcb: int, in_status_32: int, in_Tmp_357: int, in_FdoData_38: int) returns (out_Tmp_355: int, out_pMpTcb: int, out_Tmp_357: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_169: int, in_listEntry_1: int, in_oldIrql_4: int, in_sdv_171: int, in_sdv_173: int, in_irp_2: int, in_Tmp_363: int, in_FdoData_40: int, in_vslice_dummy_var_93: int) returns (out_sdv_169: int, out_listEntry_1: int, out_oldIrql_4: int, out_sdv_171: int, out_sdv_173: int, out_irp_2: int, out_Tmp_363: int, out_vslice_dummy_var_93: int)
{

  entry:
    out_sdv_169, out_listEntry_1, out_oldIrql_4, out_sdv_171, out_sdv_173, out_irp_2, out_Tmp_363, out_vslice_dummy_var_93 := in_sdv_169, in_listEntry_1, in_oldIrql_4, in_sdv_171, in_sdv_173, in_irp_2, in_Tmp_363, in_vslice_dummy_var_93;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2165} out_sdv_169 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_169 == 0;
    assume {:nonnull} in_FdoData_40 != 0;
    assume in_FdoData_40 > 0;
    call {:si_unique_call 2171} out_listEntry_1 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_40));
    call {:si_unique_call 2172} out_sdv_171 := sdv_containing_record(out_listEntry_1, 88);
    out_irp_2 := out_sdv_171;
    call {:si_unique_call 2173} out_sdv_173 := sdv_IoSetCancelRoutine(out_irp_2, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} out_sdv_173 != 0;
    call {:si_unique_call 2166} sdv_KeReleaseSpinLock(0, out_oldIrql_4);
    assume {:nonnull} out_irp_2 != 0;
    assume out_irp_2 > 0;
    assume {:nonnull} out_irp_2 != 0;
    assume out_irp_2 > 0;
    call {:si_unique_call 2167} sdv_IoCompleteRequest(0, 0);
    call {:si_unique_call 2168} out_vslice_dummy_var_93 := PciDrvIoDecrement(in_FdoData_40);
    call {:si_unique_call 2169} out_Tmp_363 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_363 != 0;
    assume out_Tmp_363 > 0;
    call {:si_unique_call 2170} sdv_KeAcquireSpinLock(0, out_Tmp_363);
    assume {:nonnull} out_Tmp_363 != 0;
    assume out_Tmp_363 > 0;
    havoc out_oldIrql_4;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 2174} {:si_old_unique_call 1} out_sdv_169, out_listEntry_1, out_oldIrql_4, out_sdv_171, out_sdv_173, out_irp_2, out_Tmp_363, out_vslice_dummy_var_93 := PciDrvCancelQueuedReadIrps_loop_L10(out_sdv_169, out_listEntry_1, out_oldIrql_4, out_sdv_171, out_sdv_173, out_irp_2, out_Tmp_363, in_FdoData_40, out_vslice_dummy_var_93);
    return;

  anon6_Then:
    assume {:partition} out_sdv_173 == 0;
    out_irp_2 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    goto L_BAF_1;
}



procedure {:LoopProcedure} PciDrvCancelQueuedReadIrps_loop_L10(in_sdv_169: int, in_listEntry_1: int, in_oldIrql_4: int, in_sdv_171: int, in_sdv_173: int, in_irp_2: int, in_Tmp_363: int, in_FdoData_40: int, in_vslice_dummy_var_93: int) returns (out_sdv_169: int, out_listEntry_1: int, out_oldIrql_4: int, out_sdv_171: int, out_sdv_173: int, out_irp_2: int, out_Tmp_363: int, out_vslice_dummy_var_93: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_169 == 1 || out_sdv_169 == 0 || out_sdv_169 == in_sdv_169;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvWithdrawReadIrps_loop_L10(in_Tmp_369: int, in_sdv_198: int, in_listEntry_2: int, in_oldIrql_5: int, in_sdv_200: int, in_sdv_202: int, in_irp_3: int, in_FdoData_41: int, in_vslice_dummy_var_106: int) returns (out_Tmp_369: int, out_sdv_198: int, out_listEntry_2: int, out_oldIrql_5: int, out_sdv_200: int, out_sdv_202: int, out_irp_3: int, out_vslice_dummy_var_106: int)
{

  entry:
    out_Tmp_369, out_sdv_198, out_listEntry_2, out_oldIrql_5, out_sdv_200, out_sdv_202, out_irp_3, out_vslice_dummy_var_106 := in_Tmp_369, in_sdv_198, in_listEntry_2, in_oldIrql_5, in_sdv_200, in_sdv_202, in_irp_3, in_vslice_dummy_var_106;
    goto L10, exit;

  exit:
    return;

  L10:
    call {:si_unique_call 2175} out_sdv_198 := sdv_IsListEmpty(0);
    goto anon5_Then;

  anon5_Then:
    assume {:partition} out_sdv_198 == 0;
    assume {:nonnull} in_FdoData_41 != 0;
    assume in_FdoData_41 > 0;
    call {:si_unique_call 2180} out_listEntry_2 := RemoveHeadList(RecvQueueHead__FDO_DATA(in_FdoData_41));
    call {:si_unique_call 2181} out_sdv_200 := sdv_containing_record(out_listEntry_2, 88);
    out_irp_3 := out_sdv_200;
    call {:si_unique_call 2182} out_sdv_202 := sdv_IoSetCancelRoutine(out_irp_3, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} out_sdv_202 != 0;
    call {:si_unique_call 2176} sdv_KeReleaseSpinLock(0, out_oldIrql_5);
    call {:si_unique_call 2177} out_vslice_dummy_var_106 := PciDrvQueueRequest(in_FdoData_41, out_irp_3);
    call {:si_unique_call 2178} out_Tmp_369 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_369 != 0;
    assume out_Tmp_369 > 0;
    call {:si_unique_call 2179} sdv_KeAcquireSpinLock(0, out_Tmp_369);
    assume {:nonnull} out_Tmp_369 != 0;
    assume out_Tmp_369 > 0;
    havoc out_oldIrql_5;
    goto anon6_Else_dummy;

  anon6_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 2184} {:si_old_unique_call 1} out_Tmp_369, out_sdv_198, out_listEntry_2, out_oldIrql_5, out_sdv_200, out_sdv_202, out_irp_3, out_vslice_dummy_var_106 := PciDrvWithdrawReadIrps_loop_L10(out_Tmp_369, out_sdv_198, out_listEntry_2, out_oldIrql_5, out_sdv_200, out_sdv_202, out_irp_3, in_FdoData_41, out_vslice_dummy_var_106);
    return;

  anon6_Then:
    assume {:partition} out_sdv_202 == 0;
    call {:si_unique_call 2183} InitializeListHead(out_listEntry_2);
    out_irp_3 := 0;
    goto anon6_Then_dummy;

  anon6_Then_dummy:
    goto L_BAF_2;
}



procedure {:LoopProcedure} PciDrvWithdrawReadIrps_loop_L10(in_Tmp_369: int, in_sdv_198: int, in_listEntry_2: int, in_oldIrql_5: int, in_sdv_200: int, in_sdv_202: int, in_irp_3: int, in_FdoData_41: int, in_vslice_dummy_var_106: int) returns (out_Tmp_369: int, out_sdv_198: int, out_listEntry_2: int, out_oldIrql_5: int, out_sdv_200: int, out_sdv_202: int, out_irp_3: int, out_vslice_dummy_var_106: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} out_sdv_198 == 1 || out_sdv_198 == 0 || out_sdv_198 == in_sdv_198;
  free ensures {:va_keep} out_vslice_dummy_var_106 == 259 || out_vslice_dummy_var_106 == in_vslice_dummy_var_106;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_211: int, in_pendingIrp: int, in_sdv_212: int) returns (out_thisEntry: int, out_sdv_211: int, out_pendingIrp: int, out_sdv_212: int)
{

  entry:
    out_thisEntry, out_sdv_211, out_pendingIrp, out_sdv_212 := in_thisEntry, in_sdv_211, in_pendingIrp, in_sdv_212;
    goto L59, exit;

  exit:
    return;

  L59:
    call {:si_unique_call 2185} out_sdv_211 := sdv_IsListEmpty(0);
    goto anon12_Then;

  anon12_Then:
    assume {:partition} out_sdv_211 == 0;
    call {:si_unique_call 2186} out_thisEntry := RemoveHeadList(in_cleanupList);
    call {:si_unique_call 2187} out_sdv_212 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_212;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    assume {:nonnull} out_pendingIrp != 0;
    assume out_pendingIrp > 0;
    call {:si_unique_call 2188} sdv_IoCompleteRequest(0, 0);
    goto anon12_Then_dummy;

  anon12_Then_dummy:
    call {:si_unique_call 2189} {:si_old_unique_call 1} out_thisEntry, out_sdv_211, out_pendingIrp, out_sdv_212 := PciDrvCleanup_loop_L59(in_cleanupList, out_thisEntry, out_sdv_211, out_pendingIrp, out_sdv_212);
    return;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L59(in_cleanupList: int, in_thisEntry: int, in_sdv_211: int, in_pendingIrp: int, in_sdv_212: int) returns (out_thisEntry: int, out_sdv_211: int, out_pendingIrp: int, out_sdv_212: int);
  modifies alloc;
  free ensures {:va_keep} out_sdv_211 == 1 || out_sdv_211 == 0 || out_sdv_211 == in_sdv_211;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack: int, in_nextEntry: int, in_sdv_204: int, in_sdv_208: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_107: int, in_vslice_dummy_var_108: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_204: int, out_sdv_208: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_107: int, out_vslice_dummy_var_108: int)
{

  entry:
    out_thisEntry, out_nextEntry, out_sdv_204, out_sdv_208, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := in_thisEntry, in_nextEntry, in_sdv_204, in_sdv_208, in_pendingIrp, in_pendingIrpStack, in_vslice_dummy_var_107, in_vslice_dummy_var_108;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon9_Else;

  anon9_Else:
    assume {:nonnull} out_thisEntry != 0;
    assume out_thisEntry > 0;
    havoc out_nextEntry;
    call {:si_unique_call 2192} out_sdv_208 := sdv_containing_record(out_thisEntry, 88);
    out_pendingIrp := out_sdv_208;
    call {:si_unique_call 2193} out_pendingIrpStack := sdv_IoGetCurrentIrpStackLocation(out_pendingIrp);
    assume {:nonnull} in_irpStack != 0;
    assume in_irpStack > 0;
    assume {:nonnull} out_pendingIrpStack != 0;
    assume out_pendingIrpStack > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 2194} out_vslice_dummy_var_107 := sdv_RemoveEntryList(0);
    call {:si_unique_call 2195} out_sdv_204 := sdv_IoSetCancelRoutine(out_pendingIrp, 0);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} out_sdv_204 != 0;
    call {:si_unique_call 2190} out_vslice_dummy_var_108 := sdv_InsertTailList(in_cleanupList, out_thisEntry);
    goto L45;

  L45:
    out_thisEntry := out_nextEntry;
    goto L45_dummy;

  L45_dummy:
    call {:si_unique_call 2196} {:si_old_unique_call 1} out_thisEntry, out_nextEntry, out_sdv_204, out_sdv_208, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := PciDrvCleanup_loop_L31(in_cleanupList, out_thisEntry, in_irpStack, out_nextEntry, out_sdv_204, out_sdv_208, out_pendingIrp, out_pendingIrpStack, out_vslice_dummy_var_107, out_vslice_dummy_var_108);
    return;

  anon11_Then:
    assume {:partition} out_sdv_204 == 0;
    call {:si_unique_call 2191} InitializeListHead(out_thisEntry);
    goto L45;

  anon10_Then:
    goto L45;
}



procedure {:LoopProcedure} PciDrvCleanup_loop_L31(in_cleanupList: int, in_thisEntry: int, in_irpStack: int, in_nextEntry: int, in_sdv_204: int, in_sdv_208: int, in_pendingIrp: int, in_pendingIrpStack: int, in_vslice_dummy_var_107: int, in_vslice_dummy_var_108: int) returns (out_thisEntry: int, out_nextEntry: int, out_sdv_204: int, out_sdv_208: int, out_pendingIrp: int, out_pendingIrpStack: int, out_vslice_dummy_var_107: int, out_vslice_dummy_var_108: int);
  modifies alloc;
  free ensures {:va_keep} out_vslice_dummy_var_107 == 1 || out_vslice_dummy_var_107 == 0 || out_vslice_dummy_var_107 == in_vslice_dummy_var_107;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:SIextraRecBound 3} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_3: int, in_sdv_215: int, in_oldIrql_7: int, in_irp_4: int, in_Tmp_379: int, in_FdoData_42: int, in_vslice_dummy_var_113: int) returns (out_i_3: int, out_sdv_215: int, out_oldIrql_7: int, out_irp_4: int, out_Tmp_379: int, out_vslice_dummy_var_113: int)
{

  entry:
    out_i_3, out_sdv_215, out_oldIrql_7, out_irp_4, out_Tmp_379, out_vslice_dummy_var_113 := in_i_3, in_sdv_215, in_oldIrql_7, in_irp_4, in_Tmp_379, in_vslice_dummy_var_113;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 3} {:Counter "i_3"} true;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} 3 > out_i_3;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} out_i_3 != 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} out_i_3 != 1;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} out_i_3 != 2;
    goto L22;

  L22:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} out_irp_4 != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume out_irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 2203} SLIC_sdv_IoSetCancelRoutine_entry(0, 0);
    goto L59;

  L59:
    call {:si_unique_call 2202} out_sdv_215 := sdv_IoSetCancelRoutine(out_irp_4, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} out_sdv_215 != 0;
    call {:si_unique_call 2197} sdv_KeReleaseSpinLock(0, out_oldIrql_7);
    assume {:nonnull} out_irp_4 != 0;
    assume out_irp_4 > 0;
    assume {:nonnull} out_irp_4 != 0;
    assume out_irp_4 > 0;
    call {:si_unique_call 2198} sdv_IoCompleteRequest(0, 0);
    out_irp_4 := 0;
    call {:si_unique_call 2199} out_Tmp_379 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_379 != 0;
    assume out_Tmp_379 > 0;
    call {:si_unique_call 2200} sdv_KeAcquireSpinLock(0, out_Tmp_379);
    assume {:nonnull} out_Tmp_379 != 0;
    assume out_Tmp_379 > 0;
    havoc out_oldIrql_7;
    call {:si_unique_call 2201} out_vslice_dummy_var_113 := PciDrvIoDecrement(in_FdoData_42);
    goto L23;

  L23:
    out_i_3 := out_i_3 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 2204} {:si_old_unique_call 1} out_i_3, out_sdv_215, out_oldIrql_7, out_irp_4, out_Tmp_379, out_vslice_dummy_var_113 := PciDrvCancelQueuedIoctlIrps_loop_L11(out_i_3, out_sdv_215, out_oldIrql_7, out_irp_4, out_Tmp_379, in_FdoData_42, out_vslice_dummy_var_113);
    return;

  anon19_Then:
    assume {:partition} out_sdv_215 == 0;
    out_irp_4 := 0;
    goto L23;

  anon18_Then:
    assume !(out_irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L59;

  anon17_Then:
    assume {:partition} out_irp_4 == 0;
    goto L23;

  anon20_Then:
    assume {:partition} out_i_3 == 2;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_4;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;

  anon21_Then:
    assume {:partition} out_i_3 == 1;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_4;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;

  anon16_Then:
    assume {:partition} out_i_3 == 0;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    havoc out_irp_4;
    assume {:nonnull} in_FdoData_42 != 0;
    assume in_FdoData_42 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvCancelQueuedIoctlIrps_loop_L11(in_i_3: int, in_sdv_215: int, in_oldIrql_7: int, in_irp_4: int, in_Tmp_379: int, in_FdoData_42: int, in_vslice_dummy_var_113: int) returns (out_i_3: int, out_sdv_215: int, out_oldIrql_7: int, out_irp_4: int, out_Tmp_379: int, out_vslice_dummy_var_113: int);
  modifies alloc, IoSetCancelRoutineCalled;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 0 ==> IoSetCancelRoutineCalled != 1;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_1) == old(SLAM_guard_S_1_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_415: int, in_FdoData_50: int, in_vslice_dummy_var_127: int) returns (out_chargeRemining: int, out_Tmp_415: int, out_vslice_dummy_var_127: int)
{

  entry:
    out_chargeRemining, out_Tmp_415, out_vslice_dummy_var_127 := in_chargeRemining, in_Tmp_415, in_vslice_dummy_var_127;
    goto L20, exit;

  exit:
    return;

  L20:
    out_Tmp_415 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_Tmp_415 != 0;
    call {:si_unique_call 2205} out_vslice_dummy_var_127 := PciDrvIoIncrement(in_FdoData_50);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 2206} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_415, out_vslice_dummy_var_127 := PciDrvReleaseAndWait_loop_L20(out_chargeRemining, out_Tmp_415, in_FdoData_50, out_vslice_dummy_var_127);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L20(in_chargeRemining: int, in_Tmp_415: int, in_FdoData_50: int, in_vslice_dummy_var_127: int) returns (out_chargeRemining: int, out_Tmp_415: int, out_vslice_dummy_var_127: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_412: int, in_FdoData_50: int, in_vslice_dummy_var_125: int) returns (out_chargeRemining: int, out_Tmp_412: int, out_vslice_dummy_var_125: int)
{

  entry:
    out_chargeRemining, out_Tmp_412, out_vslice_dummy_var_125 := in_chargeRemining, in_Tmp_412, in_vslice_dummy_var_125;
    goto L8, exit;

  exit:
    return;

  L8:
    out_Tmp_412 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon13_Else;

  anon13_Else:
    assume {:partition} out_Tmp_412 != 0;
    call {:si_unique_call 2207} out_vslice_dummy_var_125 := PciDrvIoDecrement(in_FdoData_50);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    call {:si_unique_call 2208} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_412, out_vslice_dummy_var_125 := PciDrvReleaseAndWait_loop_L8(out_chargeRemining, out_Tmp_412, in_FdoData_50, out_vslice_dummy_var_125);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L8(in_chargeRemining: int, in_Tmp_412: int, in_FdoData_50: int, in_vslice_dummy_var_125: int) returns (out_chargeRemining: int, out_Tmp_412: int, out_vslice_dummy_var_125: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_413: int, in_FdoData_50: int, in_vslice_dummy_var_128: int) returns (out_chargeRemining: int, out_Tmp_413: int, out_vslice_dummy_var_128: int)
{

  entry:
    out_chargeRemining, out_Tmp_413, out_vslice_dummy_var_128 := in_chargeRemining, in_Tmp_413, in_vslice_dummy_var_128;
    goto L26, exit;

  exit:
    return;

  L26:
    out_Tmp_413 := out_chargeRemining;
    out_chargeRemining := out_chargeRemining - 1;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} out_Tmp_413 != 0;
    call {:si_unique_call 2209} out_vslice_dummy_var_128 := PciDrvIoDecrement(in_FdoData_50);
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 2210} {:si_old_unique_call 1} out_chargeRemining, out_Tmp_413, out_vslice_dummy_var_128 := PciDrvReleaseAndWait_loop_L26(out_chargeRemining, out_Tmp_413, in_FdoData_50, out_vslice_dummy_var_128);
    return;
}



procedure {:LoopProcedure} PciDrvReleaseAndWait_loop_L26(in_chargeRemining: int, in_Tmp_413: int, in_FdoData_50: int, in_vslice_dummy_var_128: int) returns (out_chargeRemining: int, out_Tmp_413: int, out_vslice_dummy_var_128: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:SIextraRecBound 3} PciDrvWithdrawIoctlIrps_loop_L10(in_i_4: int, in_oldIrql_10: int, in_irp_5: int, in_Tmp_417: int, in_FdoData_51: int, in_vslice_dummy_var_131: int) returns (out_i_4: int, out_oldIrql_10: int, out_irp_5: int, out_Tmp_417: int, out_vslice_dummy_var_131: int)
{

  entry:
    out_i_4, out_oldIrql_10, out_irp_5, out_Tmp_417, out_vslice_dummy_var_131 := in_i_4, in_oldIrql_10, in_irp_5, in_Tmp_417, in_vslice_dummy_var_131;
    goto L10, exit;

  exit:
    return;

  L10:
    assume {:CounterLoop 3} {:Counter "i_4"} true;
    goto anon11_Else;

  anon11_Else:
    assume {:partition} 3 > out_i_4;
    out_irp_5 := 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} out_i_4 != 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} out_i_4 != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_i_4 != 2;
    goto L22;

  L22:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} out_irp_5 != 0;
    call {:si_unique_call 2211} sdv_KeReleaseSpinLock(0, out_oldIrql_10);
    call {:si_unique_call 2212} out_vslice_dummy_var_131 := PciDrvQueueRequest(in_FdoData_51, out_irp_5);
    call {:si_unique_call 2213} out_Tmp_417 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    call {:si_unique_call 2214} sdv_KeAcquireSpinLock(0, out_Tmp_417);
    assume {:nonnull} out_Tmp_417 != 0;
    assume out_Tmp_417 > 0;
    havoc out_oldIrql_10;
    goto L23;

  L23:
    out_i_4 := out_i_4 + 1;
    goto L23_dummy;

  L23_dummy:
    call {:si_unique_call 2215} {:si_old_unique_call 1} out_i_4, out_oldIrql_10, out_irp_5, out_Tmp_417, out_vslice_dummy_var_131 := PciDrvWithdrawIoctlIrps_loop_L10(out_i_4, out_oldIrql_10, out_irp_5, out_Tmp_417, in_FdoData_51, out_vslice_dummy_var_131);
    return;

  anon12_Then:
    assume {:partition} out_irp_5 == 0;
    goto L23;

  anon13_Then:
    assume {:partition} out_i_4 == 2;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;

  anon14_Then:
    assume {:partition} out_i_4 == 1;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;

  anon15_Then:
    assume {:partition} out_i_4 == 0;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    havoc out_irp_5;
    assume {:nonnull} in_FdoData_51 != 0;
    assume in_FdoData_51 > 0;
    goto L22;
}



procedure {:LoopProcedure} PciDrvWithdrawIoctlIrps_loop_L10(in_i_4: int, in_oldIrql_10: int, in_irp_5: int, in_Tmp_417: int, in_FdoData_51: int, in_vslice_dummy_var_131: int) returns (out_i_4: int, out_oldIrql_10: int, out_irp_5: int, out_Tmp_417: int, out_vslice_dummy_var_131: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} out_vslice_dummy_var_131 == 259 || out_vslice_dummy_var_131 == in_vslice_dummy_var_131;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICSetMulticastList_loop_L25(in_i_5: int, in_McAddress: int, in_Tmp_681: int, in_j: int, in_Tmp_709: int, in_Tmp_712: int, in_Tmp_713: int, in_FdoData_58: int) returns (out_Tmp_681: int, out_j: int, out_Tmp_709: int, out_Tmp_712: int, out_Tmp_713: int)
{

  entry:
    out_Tmp_681, out_j, out_Tmp_709, out_Tmp_712, out_Tmp_713 := in_Tmp_681, in_j, in_Tmp_709, in_Tmp_712, in_Tmp_713;
    goto L25, exit;

  exit:
    return;

  L25:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_709 := out_j;
    out_Tmp_681 := in_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_712;
    assume {:nonnull} out_Tmp_712 != 0;
    assume out_Tmp_712 > 0;
    havoc out_Tmp_713;
    assume {:nonnull} in_McAddress != 0;
    assume in_McAddress > 0;
    assume {:nonnull} out_Tmp_713 != 0;
    assume out_Tmp_713 > 0;
    out_j := out_j + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    call {:si_unique_call 2216} {:si_old_unique_call 1} out_Tmp_681, out_j, out_Tmp_709, out_Tmp_712, out_Tmp_713 := NICSetMulticastList_loop_L25(in_i_5, in_McAddress, out_Tmp_681, out_j, out_Tmp_709, out_Tmp_712, out_Tmp_713, in_FdoData_58);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L25(in_i_5: int, in_McAddress: int, in_Tmp_681: int, in_j: int, in_Tmp_709: int, in_Tmp_712: int, in_Tmp_713: int, in_FdoData_58: int) returns (out_Tmp_681: int, out_j: int, out_Tmp_709: int, out_Tmp_712: int, out_Tmp_713: int);
  free ensures {:va_keep} out_Tmp_681 == in_Tmp_681 || out_Tmp_681 == in_i_5;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_693: int, in_Tmp_696: int, in_FdoData_58: int) returns (out_counter_1: int, out_Tmp_693: int, out_Tmp_696: int)
{

  entry:
    out_counter_1, out_Tmp_693, out_Tmp_696 := in_counter_1, in_Tmp_693, in_Tmp_696;
    goto L51, exit;

  exit:
    return;

  L51:
    assume {:CounterLoop 250000} {:Counter "counter_1"} true;
    goto anon22_Else;

  anon22_Else:
    assume {:partition} out_counter_1 != 0;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_696;
    assume {:nonnull} out_Tmp_696 != 0;
    assume out_Tmp_696 > 0;
    havoc out_Tmp_693;
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_Tmp_693 == 128;
    out_counter_1 := out_counter_1 - 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    havoc out_counter_1;
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L51(in_counter_1: int, in_Tmp_693: int, in_Tmp_696: int, in_FdoData_58: int) returns (out_counter_1: int, out_Tmp_693: int, out_Tmp_696: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICSetMulticastList_loop_L12(in_i_5: int, in_Tmp_675: int, in_Tmp_676: int, in_Tmp_677: int, in_Tmp_678: int, in_Tmp_679: int, in_Tmp_680: int, in_McAddress: int, in_Tmp_681: int, in_Tmp_682: int, in_Tmp_683: int, in_Tmp_684: int, in_Tmp_685: int, in_Tmp_686: int, in_Tmp_688: int, in_Tmp_689: int, in_j: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_697: int, in_Tmp_698: int, in_Tmp_699: int, in_Tmp_700: int, in_Tmp_702: int, in_Tmp_705: int, in_Tmp_706: int, in_Tmp_707: int, in_Tmp_709: int, in_Tmp_710: int, in_Tmp_711: int, in_Tmp_712: int, in_Tmp_713: int, in_Tmp_714: int, in_FdoData_58: int) returns (out_i_5: int, out_Tmp_675: int, out_Tmp_676: int, out_Tmp_677: int, out_Tmp_678: int, out_Tmp_679: int, out_Tmp_680: int, out_McAddress: int, out_Tmp_681: int, out_Tmp_682: int, out_Tmp_683: int, out_Tmp_684: int, out_Tmp_685: int, out_Tmp_686: int, out_Tmp_688: int, out_Tmp_689: int, out_j: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_697: int, out_Tmp_698: int, out_Tmp_699: int, out_Tmp_700: int, out_Tmp_702: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_707: int, out_Tmp_709: int, out_Tmp_710: int, out_Tmp_711: int, out_Tmp_712: int, out_Tmp_713: int, out_Tmp_714: int)
{

  entry:
    out_i_5, out_Tmp_675, out_Tmp_676, out_Tmp_677, out_Tmp_678, out_Tmp_679, out_Tmp_680, out_McAddress, out_Tmp_681, out_Tmp_682, out_Tmp_683, out_Tmp_684, out_Tmp_685, out_Tmp_686, out_Tmp_688, out_Tmp_689, out_j, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_697, out_Tmp_698, out_Tmp_699, out_Tmp_700, out_Tmp_702, out_Tmp_705, out_Tmp_706, out_Tmp_707, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_713, out_Tmp_714 := in_i_5, in_Tmp_675, in_Tmp_676, in_Tmp_677, in_Tmp_678, in_Tmp_679, in_Tmp_680, in_McAddress, in_Tmp_681, in_Tmp_682, in_Tmp_683, in_Tmp_684, in_Tmp_685, in_Tmp_686, in_Tmp_688, in_Tmp_689, in_j, in_Tmp_691, in_Tmp_692, in_Tmp_694, in_Tmp_695, in_Tmp_697, in_Tmp_698, in_Tmp_699, in_Tmp_700, in_Tmp_702, in_Tmp_705, in_Tmp_706, in_Tmp_707, in_Tmp_709, in_Tmp_710, in_Tmp_711, in_Tmp_712, in_Tmp_713, in_Tmp_714;
    goto L12, exit;

  exit:
    return;

  L12:
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    goto anon17_Else;

  anon17_Else:
    out_Tmp_689 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_702;
    assume {:nonnull} out_Tmp_702 != 0;
    assume out_Tmp_702 > 0;
    havoc out_Tmp_685;
    assume {:nonnull} out_Tmp_685 != 0;
    assume out_Tmp_685 > 0;
    havoc out_Tmp_678;
    out_Tmp_692 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_706;
    assume {:nonnull} out_Tmp_706 != 0;
    assume out_Tmp_706 > 0;
    havoc out_Tmp_707;
    assume {:nonnull} out_Tmp_707 != 0;
    assume out_Tmp_707 > 0;
    havoc out_Tmp_698;
    out_Tmp_699 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_710;
    assume {:nonnull} out_Tmp_710 != 0;
    assume out_Tmp_710 > 0;
    havoc out_Tmp_683;
    assume {:nonnull} out_Tmp_683 != 0;
    assume out_Tmp_683 > 0;
    havoc out_Tmp_680;
    out_Tmp_679 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_691;
    assume {:nonnull} out_Tmp_691 != 0;
    assume out_Tmp_691 > 0;
    havoc out_Tmp_682;
    assume {:nonnull} out_Tmp_682 != 0;
    assume out_Tmp_682 > 0;
    havoc out_Tmp_697;
    out_Tmp_705 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_694;
    assume {:nonnull} out_Tmp_694 != 0;
    assume out_Tmp_694 > 0;
    havoc out_Tmp_676;
    assume {:nonnull} out_Tmp_676 != 0;
    assume out_Tmp_676 > 0;
    havoc out_Tmp_688;
    out_Tmp_714 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_684;
    assume {:nonnull} out_Tmp_684 != 0;
    assume out_Tmp_684 > 0;
    havoc out_Tmp_677;
    assume {:nonnull} out_Tmp_677 != 0;
    assume out_Tmp_677 > 0;
    havoc out_Tmp_675;
    out_Tmp_711 := strConst__li2bpl181;
    call {:si_unique_call 2218} DebugPrint(5, 32, out_Tmp_711);
    out_Tmp_686 := out_i_5 * 6;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_695;
    assume {:nonnull} out_Tmp_695 != 0;
    assume out_Tmp_695 > 0;
    havoc out_Tmp_700;
    out_McAddress := out_Tmp_700 + out_Tmp_686 * 4;
    out_j := 0;
    goto L25;

  L25:
    call {:si_unique_call 2217} out_Tmp_681, out_j, out_Tmp_709, out_Tmp_712, out_Tmp_713 := NICSetMulticastList_loop_L25(out_i_5, out_McAddress, out_Tmp_681, out_j, out_Tmp_709, out_Tmp_712, out_Tmp_713, in_FdoData_58);
    goto L25_last;

  L25_last:
    assume {:CounterLoop 6} {:Counter "j"} true;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} 6 > out_j;
    out_Tmp_709 := out_j;
    out_Tmp_681 := out_i_5;
    assume {:nonnull} in_FdoData_58 != 0;
    assume in_FdoData_58 > 0;
    havoc out_Tmp_712;
    assume {:nonnull} out_Tmp_712 != 0;
    assume out_Tmp_712 > 0;
    havoc out_Tmp_713;
    assume {:nonnull} out_McAddress != 0;
    assume out_McAddress > 0;
    assume {:nonnull} out_Tmp_713 != 0;
    assume out_Tmp_713 > 0;
    out_j := out_j + 1;
    assume false;
    return;

  anon18_Then:
    assume {:partition} out_j >= 6;
    out_i_5 := out_i_5 + 1;
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    call {:si_unique_call 2219} {:si_old_unique_call 1} out_i_5, out_Tmp_675, out_Tmp_676, out_Tmp_677, out_Tmp_678, out_Tmp_679, out_Tmp_680, out_McAddress, out_Tmp_681, out_Tmp_682, out_Tmp_683, out_Tmp_684, out_Tmp_685, out_Tmp_686, out_Tmp_688, out_Tmp_689, out_j, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_697, out_Tmp_698, out_Tmp_699, out_Tmp_700, out_Tmp_702, out_Tmp_705, out_Tmp_706, out_Tmp_707, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_713, out_Tmp_714 := NICSetMulticastList_loop_L12(out_i_5, out_Tmp_675, out_Tmp_676, out_Tmp_677, out_Tmp_678, out_Tmp_679, out_Tmp_680, out_McAddress, out_Tmp_681, out_Tmp_682, out_Tmp_683, out_Tmp_684, out_Tmp_685, out_Tmp_686, out_Tmp_688, out_Tmp_689, out_j, out_Tmp_691, out_Tmp_692, out_Tmp_694, out_Tmp_695, out_Tmp_697, out_Tmp_698, out_Tmp_699, out_Tmp_700, out_Tmp_702, out_Tmp_705, out_Tmp_706, out_Tmp_707, out_Tmp_709, out_Tmp_710, out_Tmp_711, out_Tmp_712, out_Tmp_713, out_Tmp_714, in_FdoData_58);
    return;
}



procedure {:LoopProcedure} NICSetMulticastList_loop_L12(in_i_5: int, in_Tmp_675: int, in_Tmp_676: int, in_Tmp_677: int, in_Tmp_678: int, in_Tmp_679: int, in_Tmp_680: int, in_McAddress: int, in_Tmp_681: int, in_Tmp_682: int, in_Tmp_683: int, in_Tmp_684: int, in_Tmp_685: int, in_Tmp_686: int, in_Tmp_688: int, in_Tmp_689: int, in_j: int, in_Tmp_691: int, in_Tmp_692: int, in_Tmp_694: int, in_Tmp_695: int, in_Tmp_697: int, in_Tmp_698: int, in_Tmp_699: int, in_Tmp_700: int, in_Tmp_702: int, in_Tmp_705: int, in_Tmp_706: int, in_Tmp_707: int, in_Tmp_709: int, in_Tmp_710: int, in_Tmp_711: int, in_Tmp_712: int, in_Tmp_713: int, in_Tmp_714: int, in_FdoData_58: int) returns (out_i_5: int, out_Tmp_675: int, out_Tmp_676: int, out_Tmp_677: int, out_Tmp_678: int, out_Tmp_679: int, out_Tmp_680: int, out_McAddress: int, out_Tmp_681: int, out_Tmp_682: int, out_Tmp_683: int, out_Tmp_684: int, out_Tmp_685: int, out_Tmp_686: int, out_Tmp_688: int, out_Tmp_689: int, out_j: int, out_Tmp_691: int, out_Tmp_692: int, out_Tmp_694: int, out_Tmp_695: int, out_Tmp_697: int, out_Tmp_698: int, out_Tmp_699: int, out_Tmp_700: int, out_Tmp_702: int, out_Tmp_705: int, out_Tmp_706: int, out_Tmp_707: int, out_Tmp_709: int, out_Tmp_710: int, out_Tmp_711: int, out_Tmp_712: int, out_Tmp_713: int, out_Tmp_714: int);
  modifies alloc;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_740: int, in_Tmp_774: int, in_FdoData_61: int) returns (out_counter_2: int, out_Tmp_740: int, out_Tmp_774: int)
{

  entry:
    out_counter_2, out_Tmp_740, out_Tmp_774 := in_counter_2, in_Tmp_740, in_Tmp_774;
    goto L91, exit;

  exit:
    return;

  L91:
    assume {:CounterLoop 250000} {:Counter "counter_2"} true;
    goto anon56_Else;

  anon56_Else:
    assume {:partition} out_counter_2 != 0;
    assume {:nonnull} in_FdoData_61 != 0;
    assume in_FdoData_61 > 0;
    havoc out_Tmp_740;
    assume {:nonnull} out_Tmp_740 != 0;
    assume out_Tmp_740 > 0;
    havoc out_Tmp_774;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} out_Tmp_774 == 128;
    out_counter_2 := out_counter_2 - 1;
    goto anon62_Else_dummy;

  anon62_Else_dummy:
    havoc out_counter_2;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L91(in_counter_2: int, in_Tmp_740: int, in_Tmp_774: int, in_FdoData_61: int) returns (out_counter_2: int, out_Tmp_740: int, out_Tmp_774: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICSetPacketFilter_loop_L76(in_i_6: int, in_Tmp_728: int, in_Tmp_751: int, in_Tmp_755: int, in_Tmp_756: int, in_Tmp_760: int, in_FdoData_61: int) returns (out_i_6: int, out_Tmp_728: int, out_Tmp_751: int, out_Tmp_755: int, out_Tmp_756: int, out_Tmp_760: int)
{

  entry:
    out_i_6, out_Tmp_728, out_Tmp_751, out_Tmp_755, out_Tmp_756, out_Tmp_760 := in_i_6, in_Tmp_728, in_Tmp_751, in_Tmp_755, in_Tmp_756, in_Tmp_760;
    goto L76, exit;

  exit:
    return;

  L76:
    assume {:CounterLoop 22} {:Counter "i_6"} true;
    goto anon54_Else;

  anon54_Else:
    assume {:partition} 22 > out_i_6;
    out_Tmp_755 := out_i_6;
    assume {:nonnull} in_FdoData_61 != 0;
    assume in_FdoData_61 > 0;
    havoc out_Tmp_760;
    assume {:nonnull} out_Tmp_760 != 0;
    assume out_Tmp_760 > 0;
    havoc out_Tmp_756;
    assume {:nonnull} out_Tmp_756 != 0;
    assume out_Tmp_756 > 0;
    havoc out_Tmp_751;
    out_Tmp_728 := strConst__li2bpl190;
    call {:si_unique_call 2220} DebugPrint(6, 32, out_Tmp_728);
    out_i_6 := out_i_6 + 1;
    goto anon54_Else_dummy;

  anon54_Else_dummy:
    havoc out_i_6;
    return;
}



procedure {:LoopProcedure} NICSetPacketFilter_loop_L76(in_i_6: int, in_Tmp_728: int, in_Tmp_751: int, in_Tmp_755: int, in_Tmp_756: int, in_Tmp_760: int, in_FdoData_61: int) returns (out_i_6: int, out_Tmp_728: int, out_Tmp_751: int, out_Tmp_755: int, out_Tmp_756: int, out_Tmp_760: int);
  modifies alloc;
  free ensures {:va_keep} out_Tmp_755 == in_i_6 || out_Tmp_755 == in_Tmp_755;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation MdiRead_loop_L11(in_counter_3: int, in_Tmp_820: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_820: int)
{

  entry:
    out_counter_3, out_Tmp_820 := in_counter_3, in_Tmp_820;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_3"} true;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} out_counter_3 != 0;
    assume {:nonnull} in_Adapter_1 != 0;
    assume in_Adapter_1 > 0;
    havoc out_Tmp_820;
    assume {:nonnull} out_Tmp_820 != 0;
    assume out_Tmp_820 > 0;
    goto anon12_Else;

  anon12_Else:
    out_counter_3 := out_counter_3 - 1;
    goto anon12_Else_dummy;

  anon12_Else_dummy:
    havoc out_counter_3;
    return;
}



procedure {:LoopProcedure} MdiRead_loop_L11(in_counter_3: int, in_Tmp_820: int, in_Adapter_1: int) returns (out_counter_3: int, out_Tmp_820: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int)
{

  entry:
    out_counter_4 := in_counter_4;
    goto L9, exit;

  exit:
    return;

  L9:
    assume {:CounterLoop 30000} {:Counter "counter_4"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_4 != 0;
    assume {:nonnull} in_pCSRAddress != 0;
    assume in_pCSRAddress > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_4 := out_counter_4 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_4;
    return;
}



procedure {:LoopProcedure} WaitScb_loop_L9(in_counter_4: int, in_pCSRAddress: int) returns (out_counter_4: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int)
{

  entry:
    out_counter_5 := in_counter_5;
    goto L20, exit;

  exit:
    return;

  L20:
    assume {:CounterLoop 150000} {:Counter "counter_5"} true;
    goto anon14_Else;

  anon14_Else:
    assume {:partition} out_counter_5 != 0;
    assume {:nonnull} in_CommandBlock != 0;
    assume in_CommandBlock > 0;
    goto anon16_Else;

  anon16_Else:
    out_counter_5 := out_counter_5 - 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    havoc out_counter_5;
    return;
}



procedure {:LoopProcedure} D100SubmitCommandBlockAndWait_loop_L20(in_counter_5: int, in_CommandBlock: int) returns (out_counter_5: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICIssueFullReset_loop_L11(in_Tmp_835: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_835: int, out_counter_6: int)
{

  entry:
    out_Tmp_835, out_counter_6 := in_Tmp_835, in_counter_6;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100} {:Counter "counter_6"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_6 != 0;
    assume {:nonnull} in_Adapter_4 != 0;
    assume in_Adapter_4 > 0;
    havoc out_Tmp_835;
    assume {:nonnull} out_Tmp_835 != 0;
    assume out_Tmp_835 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_6 := out_counter_6 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_6;
    return;
}



procedure {:LoopProcedure} NICIssueFullReset_loop_L11(in_Tmp_835: int, in_counter_6: int, in_Adapter_4: int) returns (out_Tmp_835: int, out_counter_6: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_878: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_878: int)
{

  entry:
    out_counter_7, out_Tmp_878 := in_counter_7, in_Tmp_878;
    goto L19, exit;

  exit:
    return;

  L19:
    assume {:CounterLoop 100000} {:Counter "counter_7"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_7 != 0;
    assume {:nonnull} in_Adapter_5 != 0;
    assume in_Adapter_5 > 0;
    havoc out_Tmp_878;
    assume {:nonnull} out_Tmp_878 != 0;
    assume out_Tmp_878 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_7 := out_counter_7 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_7;
    return;
}



procedure {:LoopProcedure} DumpStatsCounters_loop_L19(in_counter_7: int, in_Tmp_878: int, in_Adapter_5: int) returns (out_counter_7: int, out_Tmp_878: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICIssueSelectiveReset_loop_L39(in_Tmp_896: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_896: int, out_counter_9: int)
{

  entry:
    out_Tmp_896, out_counter_9 := in_Tmp_896, in_counter_9;
    goto L39, exit;

  exit:
    return;

  L39:
    assume {:CounterLoop 100} {:Counter "counter_9"} true;
    goto anon23_Else;

  anon23_Else:
    assume {:partition} out_counter_9 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_896;
    assume {:nonnull} out_Tmp_896 != 0;
    assume out_Tmp_896 > 0;
    goto anon27_Else;

  anon27_Else:
    out_counter_9 := out_counter_9 - 1;
    goto anon27_Else_dummy;

  anon27_Else_dummy:
    havoc out_counter_9;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L39(in_Tmp_896: int, in_counter_9: int, in_Adapter_6: int) returns (out_Tmp_896: int, out_counter_9: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation NICIssueSelectiveReset_loop_L13(in_Tmp_894: int, in_counter_8: int, in_Tmp_895: int, in_Adapter_6: int) returns (out_Tmp_894: int, out_counter_8: int, out_Tmp_895: int)
{

  entry:
    out_Tmp_894, out_counter_8, out_Tmp_895 := in_Tmp_894, in_counter_8, in_Tmp_895;
    goto L13, exit;

  exit:
    return;

  L13:
    assume {:CounterLoop 100000} {:Counter "counter_8"} true;
    goto anon21_Else;

  anon21_Else:
    assume {:partition} out_counter_8 != 0;
    assume {:nonnull} in_Adapter_6 != 0;
    assume in_Adapter_6 > 0;
    havoc out_Tmp_895;
    assume {:nonnull} out_Tmp_895 != 0;
    assume out_Tmp_895 > 0;
    havoc out_Tmp_894;
    goto anon25_Else;

  anon25_Else:
    assume {:partition} out_Tmp_894 == 128;
    out_counter_8 := out_counter_8 - 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    havoc out_counter_8;
    return;
}



procedure {:LoopProcedure} NICIssueSelectiveReset_loop_L13(in_Tmp_894: int, in_counter_8: int, in_Tmp_895: int, in_Adapter_6: int) returns (out_Tmp_894: int, out_counter_8: int, out_Tmp_895: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation MdiWrite_loop_L11(in_counter_10: int, in_Tmp_904: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_904: int)
{

  entry:
    out_counter_10, out_Tmp_904 := in_counter_10, in_Tmp_904;
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:CounterLoop 100000} {:Counter "counter_10"} true;
    goto anon7_Else;

  anon7_Else:
    assume {:partition} out_counter_10 != 0;
    assume {:nonnull} in_Adapter_7 != 0;
    assume in_Adapter_7 > 0;
    havoc out_Tmp_904;
    assume {:nonnull} out_Tmp_904 != 0;
    assume out_Tmp_904 > 0;
    goto anon9_Else;

  anon9_Else:
    out_counter_10 := out_counter_10 - 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    havoc out_counter_10;
    return;
}



procedure {:LoopProcedure} MdiWrite_loop_L11(in_counter_10: int, in_Tmp_904: int, in_Adapter_7: int) returns (out_counter_10: int, out_Tmp_904: int);
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_239: int, in_listEntry_3: int, in_Tmp_404: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_242: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_227: int) returns (out_sdv_239: int, out_listEntry_3: int, out_Tmp_404: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_242: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_227: int)
{
  var vslice_dummy_var_46: int;

  entry:
    out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_227 := in_sdv_239, in_listEntry_3, in_Tmp_404, in_cancelRoutine, in_oldIrql_9, in_sdv_242, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_227;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2221} out_Tmp_404 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_404 != 0;
    assume out_Tmp_404 > 0;
    call {:si_unique_call 2222} sdv_KeAcquireSpinLock(0, out_Tmp_404);
    assume {:nonnull} out_Tmp_404 != 0;
    assume out_Tmp_404 > 0;
    havoc out_oldIrql_9;
    call {:si_unique_call 2223} out_sdv_239 := sdv_IsListEmpty(0);
    goto anon11_Then;

  anon11_Then:
    assume {:partition} out_sdv_239 == 0;
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    call {:si_unique_call 2226} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_48));
    call {:si_unique_call 2227} out_sdv_242 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_242;
    call {:si_unique_call 2228} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 2224} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2225} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 2234} {:si_old_unique_call 1} out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_227 := PciDrvProcessQueuedRequests#0_loop_L13(out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, in_FdoData_48, out_vslice_dummy_var_227);
    return;

  anon13_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 2229} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 2230} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    goto L_BAF_3;

  anon12_Then:
    call {:si_unique_call 2232} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2231} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    goto L_BAF_3;

  anon14_Then:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon15_Else;

  anon15_Else:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    havoc vslice_dummy_var_46;
    call {:si_unique_call 2233} out_vslice_dummy_var_227 := PciDrvDispatchIO#0(vslice_dummy_var_46, out_nextIrp);
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    goto L_BAF_3;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#0_loop_L13(in_sdv_239: int, in_listEntry_3: int, in_Tmp_404: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_242: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_227: int) returns (out_sdv_239: int, out_listEntry_3: int, out_Tmp_404: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_242: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_227: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} out_sdv_239 == 1 || out_sdv_239 == 0 || out_sdv_239 == in_sdv_239;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_239: int, in_listEntry_3: int, in_Tmp_404: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_242: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_231: int) returns (out_sdv_239: int, out_listEntry_3: int, out_Tmp_404: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_242: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_231: int)
{
  var vslice_dummy_var_47: int;

  entry:
    out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_231 := in_sdv_239, in_listEntry_3, in_Tmp_404, in_cancelRoutine, in_oldIrql_9, in_sdv_242, in_nIrpsReDispatched, in_nextIrp, in_vslice_dummy_var_231;
    goto L13, exit;

  exit:
    return;

  L13:
    call {:si_unique_call 2235} out_Tmp_404 := __HAVOC_malloc(4);
    assume {:nonnull} out_Tmp_404 != 0;
    assume out_Tmp_404 > 0;
    call {:si_unique_call 2236} sdv_KeAcquireSpinLock(0, out_Tmp_404);
    assume {:nonnull} out_Tmp_404 != 0;
    assume out_Tmp_404 > 0;
    havoc out_oldIrql_9;
    call {:si_unique_call 2237} out_sdv_239 := sdv_IsListEmpty(0);
    goto anon11_Then;

  anon11_Then:
    assume {:partition} out_sdv_239 == 0;
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    call {:si_unique_call 2240} out_listEntry_3 := RemoveHeadList(NewRequestsQueue__FDO_DATA(in_FdoData_48));
    call {:si_unique_call 2241} out_sdv_242 := sdv_containing_record(out_listEntry_3, 88);
    out_nextIrp := out_sdv_242;
    call {:si_unique_call 2242} out_cancelRoutine := sdv_IoSetCancelRoutine(out_nextIrp, 0);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} out_cancelRoutine != 0;
    call {:si_unique_call 2238} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2239} sdv_IoCompleteRequest(0, 0);
    goto anon13_Else_dummy;

  anon13_Else_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 2248} {:si_old_unique_call 1} out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, out_vslice_dummy_var_231 := PciDrvProcessQueuedRequests#1_loop_L13(out_sdv_239, out_listEntry_3, out_Tmp_404, out_cancelRoutine, out_oldIrql_9, out_sdv_242, out_nIrpsReDispatched, out_nextIrp, in_FdoData_48, out_vslice_dummy_var_231);
    return;

  anon13_Then:
    assume {:partition} out_cancelRoutine == 0;
    call {:si_unique_call 2243} InitializeListHead(out_listEntry_3);
    call {:si_unique_call 2244} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    goto anon13_Then_dummy;

  anon13_Then_dummy:
    goto L_BAF_4;

  anon12_Then:
    call {:si_unique_call 2246} sdv_KeReleaseSpinLock(0, out_oldIrql_9);
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    assume {:nonnull} out_nextIrp != 0;
    assume out_nextIrp > 0;
    call {:si_unique_call 2245} sdv_IoCompleteRequest(0, 0);
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    goto L_BAF_4;

  anon14_Then:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    goto anon15_Else;

  anon15_Else:
    assume {:nonnull} in_FdoData_48 != 0;
    assume in_FdoData_48 > 0;
    havoc vslice_dummy_var_47;
    call {:si_unique_call 2247} out_vslice_dummy_var_231 := PciDrvDispatchIO#1(vslice_dummy_var_47, out_nextIrp);
    out_nIrpsReDispatched := out_nIrpsReDispatched + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    goto L_BAF_4;
}



procedure {:LoopProcedure} PciDrvProcessQueuedRequests#1_loop_L13(in_sdv_239: int, in_listEntry_3: int, in_Tmp_404: int, in_cancelRoutine: int, in_oldIrql_9: int, in_sdv_242: int, in_nIrpsReDispatched: int, in_nextIrp: int, in_FdoData_48: int, in_vslice_dummy_var_231: int) returns (out_sdv_239: int, out_listEntry_3: int, out_Tmp_404: int, out_cancelRoutine: int, out_oldIrql_9: int, out_sdv_242: int, out_nIrpsReDispatched: int, out_nextIrp: int, out_vslice_dummy_var_231: int);
  modifies alloc, IrpPended, IoSetCancelRoutineCalled, IrpCancelChecked;
  free ensures {:va_keep} old(IoSetCancelRoutineCalled) == 1 ==> IoSetCancelRoutineCalled != 0;
  free ensures {:va_keep} old(IrpCancelChecked) == 1 ==> IrpCancelChecked != 0;
  free ensures {:va_keep} old(IrpPended) == 1 ==> IrpPended != 0;
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> IrpPended == old(IrpPended);
  free ensures {:va_keep} IoSetCancelRoutineCalled == 1 || IoSetCancelRoutineCalled == old(IoSetCancelRoutineCalled);
  free ensures {:va_keep} IrpPended == 1 || IrpPended == old(IrpPended);
  free ensures {:va_keep} IrpCancelChecked == 1 || IrpCancelChecked == old(IrpCancelChecked);
  free ensures {:va_keep} out_sdv_239 == 1 || out_sdv_239 == 0 || out_sdv_239 == in_sdv_239;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



procedure fakeMain() returns (Tmp_540: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_1, SLAM_guard_S_0, IoSetCancelRoutineCalled, IrpPended, IrpCancelChecked, yogi_error;
  free ensures {:va_keep} old(yogi_error) == 0;
  free ensures {:va_keep} false || old(IoSetCancelRoutineCalled) == 0 || old(IoSetCancelRoutineCalled) == 1;
  free ensures {:va_keep} false || old(IrpCancelChecked) == 0 || old(IrpCancelChecked) == 1;
  free ensures {:va_keep} false || old(IrpPended) == 0 || old(IrpPended) == 1;
  free ensures {:va_keep} alloc >= old(alloc);
  free ensures {:va_keep} false || IoSetCancelRoutineCalled == 0 || IoSetCancelRoutineCalled == 1;
  free ensures {:va_keep} false || IrpCancelChecked == 0 || IrpCancelChecked == 1;
  free ensures {:va_keep} false || IrpPended == 0 || IrpPended == 1;



implementation {:entrypoint} fakeMain() returns (Tmp_540: int, dup_assertVar: bool)
{

  start:
    call Tmp_540, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


